# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached(
    "refresh the cache entry"
    refresh: Boolean! = false,
    "measured in seconds"
    ttl: Int! = 60
) on QUERY

type AcceptMembershipInvitationOutput {
    membershipId: Int!
    token: String!
}

type ActivateMembershipOutput {
    membershipId: Int!
    status: String!
}

type AddEnhancementToken {
    token: String!
}

type AddFreeClipartResponse {
    salesItemProductId: bigint!
}

type AddLicenceOutput {
    orderId: String!
}

type AddTestBundleOutput {
    partnerId: bigint!
}

type AddTrialOrderAction {
    orderId: bigint!
}

type AddUpgradeToken {
    token: String!
}

type AllocateLicenceResponse {
    "An array relationship"
    allocationBatch(
        "distinct select on columns"
        distinct_on: [vectric_sales_oem_bundles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_oem_bundles_order_by!],
        "filter the rows returned"
        where: vectric_sales_oem_bundles_bool_exp
    ): [vectric_sales_oem_bundles!]!
    "An aggregate relationship"
    allocationBatch_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_oem_bundles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_oem_bundles_order_by!],
        "filter the rows returned"
        where: vectric_sales_oem_bundles_bool_exp
    ): vectric_sales_oem_bundles_aggregate!
    batchId: String
}

type AssignmentOutput {
    assigned: Boolean!
}

type CheckEmailForSignUpOutput {
    error: String
}

type DeactivateMembershipOutput {
    membershipId: Int!
    status: String!
}

type DeclineMembershipInvitationOutput {
    accessToken: String!
}

type DeletedOutput {
    deleted: [String!]
}

type EmailVerificationOutput {
    verified: Boolean!
}

type EvaluationLicenceOutput {
    orderId: String!
}

type FastspringSecureRequestOutput {
    key: String
    payload: String
}

type ForgotPassword {
    completed: Boolean!
    username: String!
}

type GetDownloadLinkForContentProject {
    expires: String!
    object: String
    url: String!
}

type GetDownloadLinkForFulfilmentOutput {
    expires: String!
    object: String!
    url: String
}

type LicenceDetailsForProductOrderItem {
    licenceCode: String!
    licenceData: String!
    licenceType: String
    registeredUsername: String!
    salesItemProductId: bigint!
}

type LicenceDetailsForProductOrderItemAndAddOns {
    licenceCode: String!
    licenceData: String!
    licenceType: String
    registeredUsername: String!
    salesItemProductId: bigint!
}

type MembershipInvitationCheckResult {
    customerId: Int
    existingCustomer: Boolean!
    existingUser: Boolean!
    used: Boolean!
    userInvitationToken: String
    valid: Boolean!
}

type OemFastspringSecureRequestOutput {
    key: String
    payload: String
}

type OrganizationAddNewMemberOutput {
    success: Boolean!
}

type OrganizationEditMemberOutput {
    success: Boolean!
}

type PasswordResetOutput {
    completed: Boolean!
}

type ProcessOemStaffInvitationOutput {
    enabledEvaluations: bigint!
    staffId: bigint!
}

type RegisterInvite {
    completed: Boolean!
}

type RemoveMembershipInvitationOutput {
    membershipId: Int!
}

type RemoveMembershipOutput {
    membershipId: String!
}

type RemovePartnerMemberOutput {
    removed: bigint!
}

type SampleOutput {
    output: String!
}

type SecureFSItemsOutput {
    key: String
    payload: String
}

type SendEmailVerificationOutput {
    sentTo: String!
}

type SendLicenceAllocationEmailResponse {
    sentTo: String!
}

type SignUpOutput {
    email: String!
    password: String!
}

type TestOrderOutput {
    orderId: String!
}

type UnassignItemOutput {
    unassigned: Boolean!
}

type UpgradeDetails {
    customerId: Int!
    fromProductName: String!
    fromProductVersion: String!
    toProductClipart: Boolean!
    toProductFastspringId: String!
    toProductId: Int!
    toProductName: String!
    toProductVersion: String!
    upgradeToken: String!
}

type ValidateInvitationToken {
    accepted: Boolean
    valid: Boolean!
}

type ValidateVerificationToken {
    valid: Boolean!
}

type ZendeskUploadOutput {
    initialZendeskUploadId: bigint
}

"mutation root"
type mutation_root {
    "insert data into the table: \"vectric.security_emailverificationtokens\""
    InsertSecurityEmailVerificationTokens(
        "the rows to be inserted"
        objects: [vectric_security_emailverificationtokens_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_security_emailverificationtokens_on_conflict
    ): vectric_security_emailverificationtokens_mutation_response
    "Accepts a membership invitation"
    acceptMembershipInvitation(token: String!): AcceptMembershipInvitationOutput
    activateMembership(membershipId: Int!): ActivateMembershipOutput
    addEnhancementToken(customerId: bigint!, enhancementEligibilityId: bigint!, salesItemProductId: bigint!): AddEnhancementToken
    addEvaluationLicence(data: EvaluationLicenceRequest!): EvaluationLicenceOutput!
    addFreeClipart(data: AddFreeClipartRequest!): AddFreeClipartResponse
    addLicence(data: AddLicenceInput!): AddLicenceOutput
    addTestBundles(data: AddTestBundleInput): AddTestBundleOutput
    addTestOrder(data: TestOrderInput!): TestOrderOutput
    addTrialOrderAction(customerId: bigint!, productName: String!): AddTrialOrderAction
    addUpgradeToken(customerId: bigint!, salesItemProductId: bigint!, upgradeEligibilityId: bigint!): AddUpgradeToken
    allocateLicence(data: AllocateLicenceRequest!): AllocateLicenceResponse
    assignItem(data: AssignmentInput!): AssignmentOutput
    deactivateMembership(membershipId: Int!): DeactivateMembershipOutput
    declineMembershipInvitation(token: String!): DeclineMembershipInvitationOutput
    "delete data from the table: \"vectric.allocation_summary\""
    deleteAllocationSummaries(
        "filter the rows which have to be deleted"
        where: vectric_allocation_summary_bool_exp!
    ): vectric_allocation_summary_mutation_response
    "delete single row from the table: \"vectric.allocation_summary\""
    deleteAllocationSummaryById(id: Int!): vectric_allocation_summary
    "delete single row from the table: \"vectric.owned_item_assignments\""
    deleteAssignment(assignment_id: Int!): vectric_owned_item_assignments
    "delete data from the table: \"vectric.owned_item_assignments\""
    deleteAssignments(
        "filter the rows which have to be deleted"
        where: vectric_owned_item_assignments_bool_exp!
    ): vectric_owned_item_assignments_mutation_response
    "delete data from the table: \"vectric.countries\""
    deleteCountries(
        "filter the rows which have to be deleted"
        where: vectric_countries_bool_exp!
    ): vectric_countries_mutation_response
    "delete single row from the table: \"vectric.countries\""
    deleteCountryById(countryid: bigint!): vectric_countries
    "delete data from the table: \"vectric.customer_area\""
    deleteCustomerArea(
        "filter the rows which have to be deleted"
        where: vectric_customer_area_bool_exp!
    ): vectric_customer_area_mutation_response
    "delete single row from the table: \"vectric.customer_area\""
    deleteCustomerAreaByPk(customerAreaId: bigint!): vectric_customer_area
    "delete data from the table: \"vectric.customer_area_file\""
    deleteCustomerAreaFile(
        "filter the rows which have to be deleted"
        where: vectric_customer_area_file_bool_exp!
    ): vectric_customer_area_file_mutation_response
    "delete single row from the table: \"vectric.customer_area_file\""
    deleteCustomerAreaFileByPk(customerAreaFileId: bigint!): vectric_customer_area_file
    "delete single row from the table: \"vectric.sales_customer_downloads\""
    deleteCustomerDownloadById(downloadId: bigint!): vectric_sales_customer_downloads
    "delete data from the table: \"vectric.sales_customer_downloads\""
    deleteCustomerDownloads(
        "filter the rows which have to be deleted"
        where: vectric_sales_customer_downloads_bool_exp!
    ): vectric_sales_customer_downloads_mutation_response
    "delete single row from the table: \"vectric.customer_responses\""
    deleteCustomerResponseById(customerresponseid: bigint!): vectric_customer_responses
    "delete data from the table: \"vectric.customer_responses\""
    deleteCustomerResponses(
        "filter the rows which have to be deleted"
        where: vectric_customer_responses_bool_exp!
    ): vectric_customer_responses_mutation_response
    "delete single row from the table: \"vectric.sales_velocitytemplate\""
    deleteEmailTemplate(templateName: String!): vectric_sales_velocitytemplate
    "delete data from the table: \"vectric.sales_velocitytemplate\""
    deleteEmailTemplates(
        "filter the rows which have to be deleted"
        where: vectric_sales_velocitytemplate_bool_exp!
    ): vectric_sales_velocitytemplate_mutation_response
    "delete single row from the table: \"vectric.entitled_products\""
    deleteEntitledProduct(productId: Int!): vectric_entitled_products
    "delete data from the table: \"vectric.entitled_products\""
    deleteEntitledProducts(
        "filter the rows which have to be deleted"
        where: vectric_entitled_products_bool_exp!
    ): vectric_entitled_products_mutation_response
    "delete single row from the table: \"vectric.entitlements\""
    deleteEntitlement(entitlementId: Int!): vectric_entitlements
    "delete single row from the table: \"vectric.entitlement_licences\""
    deleteEntitlementLicence(entitlementLicenceId: Int!): vectric_entitlement_licences
    "delete data from the table: \"vectric.entitlement_licences\""
    deleteEntitlementLicences(
        "filter the rows which have to be deleted"
        where: vectric_entitlement_licences_bool_exp!
    ): vectric_entitlement_licences_mutation_response
    "delete data from the table: \"vectric.entitlements\""
    deleteEntitlements(
        "filter the rows which have to be deleted"
        where: vectric_entitlements_bool_exp!
    ): vectric_entitlements_mutation_response
    "delete data from the table: \"vectric.oem_eval_request\""
    deleteEvalRequests(
        "filter the rows which have to be deleted"
        where: vectric_oem_eval_request_bool_exp!
    ): vectric_oem_eval_request_mutation_response
    "delete single row from the table: \"vectric.oem_eval_request\""
    deleteEvalRequestsById(requestId: bigint!): vectric_oem_eval_request
    "delete single row from the table: \"vectric.memberships\""
    deleteMembershipById(membershipId: Int!): vectric_memberships
    "delete single row from the table: \"vectric.membership_invitations\""
    deleteMembershipInvitationById(invitationId: Int!): vectric_membership_invitations
    "delete data from the table: \"vectric.membership_invitations\""
    deleteMembershipInvitations(
        "filter the rows which have to be deleted"
        where: vectric_membership_invitations_bool_exp!
    ): vectric_membership_invitations_mutation_response
    "delete data from the table: \"vectric.memberships\""
    deleteMemberships(
        "filter the rows which have to be deleted"
        where: vectric_memberships_bool_exp!
    ): vectric_memberships_mutation_response
    "delete data from the table: \"vectric.oem_allocation_emails\""
    deleteOemAllocationEmails(
        "filter the rows which have to be deleted"
        where: vectric_oem_allocation_emails_bool_exp!
    ): vectric_oem_allocation_emails_mutation_response
    "delete data from the table: \"vectric.oem_partners\""
    deleteOemPartner(
        "filter the rows which have to be deleted"
        where: vectric_oem_partners_bool_exp!
    ): vectric_oem_partners_mutation_response
    "delete single row from the table: \"vectric.oem_partners\""
    deleteOemPartnerById(partnerId: bigint!): vectric_oem_partners
    "delete single row from the table: \"vectric.oem_staff_customer\""
    deleteOemStaffCustomerById(staffId: bigint!): vectric_oem_staff_customer
    "delete data from the table: \"vectric.oem_staff_customer\""
    deleteOemStaffCustomers(
        "filter the rows which have to be deleted"
        where: vectric_oem_staff_customer_bool_exp!
    ): vectric_oem_staff_customer_mutation_response
    deleteOrderTree(data: [String!]!): DeletedOutput
    "delete data from the table: \"vectric.sales_orders\""
    deleteOrders(
        "filter the rows which have to be deleted"
        where: vectric_sales_orders_bool_exp!
    ): vectric_sales_orders_mutation_response
    "delete single row from the table: \"vectric.sales_orders\""
    deleteOrdersById(orderId: String!): vectric_sales_orders
    "delete single row from the table: \"vectric.organizations\""
    deleteOrganization(organizationId: Int!): vectric_organizations
    "delete single row from the table: \"vectric.organization_audit\""
    deleteOrganizationAuditById(auditId: Int!): vectric_organization_audit
    "delete data from the table: \"vectric.organization_audit\""
    deleteOrganizationAudits(
        "filter the rows which have to be deleted"
        where: vectric_organization_audit_bool_exp!
    ): vectric_organization_audit_mutation_response
    "delete single row from the table: \"vectric.organization_orders\""
    deleteOrganizationOrder(orderId: String!): vectric_organization_orders
    "delete single row from the table: \"vectric.organization_order_items\""
    deleteOrganizationOrderItem(orderItemId: Int!): vectric_organization_order_items
    "delete data from the table: \"vectric.organization_order_items\""
    deleteOrganizationOrderItems(
        "filter the rows which have to be deleted"
        where: vectric_organization_order_items_bool_exp!
    ): vectric_organization_order_items_mutation_response
    "delete data from the table: \"vectric.organization_orders\""
    deleteOrganizationOrders(
        "filter the rows which have to be deleted"
        where: vectric_organization_orders_bool_exp!
    ): vectric_organization_orders_mutation_response
    "delete data from the table: \"vectric.organizations\""
    deleteOrganizations(
        "filter the rows which have to be deleted"
        where: vectric_organizations_bool_exp!
    ): vectric_organizations_mutation_response
    "delete single row from the table: \"vectric.owned_items\""
    deleteOwnedItem(ownedItemId: Int!): vectric_owned_items
    "delete data from the table: \"vectric.owned_items\""
    deleteOwnedItems(
        "filter the rows which have to be deleted"
        where: vectric_owned_items_bool_exp!
    ): vectric_owned_items_mutation_response
    "delete single row from the table: \"vectric.owned_products\""
    deleteOwnedProduct(productId: Int!): vectric_owned_products
    "delete data from the table: \"vectric.owned_products\""
    deleteOwnedProducts(
        "filter the rows which have to be deleted"
        where: vectric_owned_products_bool_exp!
    ): vectric_owned_products_mutation_response
    "delete single row from the table: \"vectric.security_passwordresettokens\""
    deletePasswordResetTokenByPk(token: String!): vectric_security_passwordresettokens
    "delete data from the table: \"vectric.security_passwordresettokens\""
    deletePasswordResetTokens(
        "filter the rows which have to be deleted"
        where: vectric_security_passwordresettokens_bool_exp!
    ): vectric_security_passwordresettokens_mutation_response
    "delete data from the table: \"vectric.products_products\""
    deleteProduct(
        "filter the rows which have to be deleted"
        where: vectric_products_products_bool_exp!
    ): vectric_products_products_mutation_response
    "delete single row from the table: \"vectric.products_products\""
    deleteProductById(productID: bigint!): vectric_products_products
    "delete data from the table: \"vectric.products_producttype\""
    deleteProductType(
        "filter the rows which have to be deleted"
        where: vectric_products_producttype_bool_exp!
    ): vectric_products_producttype_mutation_response
    "delete single row from the table: \"vectric.products_producttype\""
    deleteProductTypeById(productTypeId: bigint!): vectric_products_producttype
    "delete single row from the table: \"vectric.products_upgrade_eligibility\""
    deleteProductUpgradeEligibility(eligibilityid: bigint!): vectric_products_upgrade_eligibility
    "delete data from the table: \"vectric.products_upgrade_eligibility\""
    deleteProductsUpgradeEligibility(
        "filter the rows which have to be deleted"
        where: vectric_products_upgrade_eligibility_bool_exp!
    ): vectric_products_upgrade_eligibility_mutation_response
    "delete single row from the table: \"vectric.oem_purchase_options\""
    deletePurchaseOptionByOptionId(optionId: bigint!): vectric_oem_purchase_options
    "delete data from the table: \"vectric.oem_purchase_options\""
    deletePurchaseOptions(
        "filter the rows which have to be deleted"
        where: vectric_oem_purchase_options_bool_exp!
    ): vectric_oem_purchase_options_mutation_response
    "delete single row from the table: \"vectric.questions\""
    deleteQuestionById(questionid: bigint!): vectric_questions
    "delete data from the table: \"vectric.questions\""
    deleteQuestions(
        "filter the rows which have to be deleted"
        where: vectric_questions_bool_exp!
    ): vectric_questions_mutation_response
    "delete single row from the table: \"vectric.responses\""
    deleteResponseById(responseid: bigint!): vectric_responses
    "delete data from the table: \"vectric.responses\""
    deleteResponses(
        "filter the rows which have to be deleted"
        where: vectric_responses_bool_exp!
    ): vectric_responses_mutation_response
    "delete single row from the table: \"vectric.saleable_products\""
    deleteSaleableProduct(productId: Int!): vectric_saleable_products
    "delete data from the table: \"vectric.saleable_products\""
    deleteSaleableProducts(
        "filter the rows which have to be deleted"
        where: vectric_saleable_products_bool_exp!
    ): vectric_saleable_products_mutation_response
    "delete single row from the table: \"vectric.sales_customers\""
    deleteSalesCustomerByPk(customerId: bigint!): vectric_sales_customers
    "delete data from the table: \"vectric.sales_customers\""
    deleteSalesCustomers(
        "filter the rows which have to be deleted"
        where: vectric_sales_customers_bool_exp!
    ): vectric_sales_customers_mutation_response
    "delete single row from the table: \"vectric.sales_salesitems\""
    deleteSalesItemById(salesitemid: bigint!): vectric_sales_salesitems
    "delete data from the table: \"vectric.sales_salesitem_products\""
    deleteSalesItemProduct(
        "filter the rows which have to be deleted"
        where: vectric_sales_salesitem_products_bool_exp!
    ): vectric_sales_salesitem_products_mutation_response
    "delete single row from the table: \"vectric.sales_salesitem_products\""
    deleteSalesItemProductById(salesItemProductId: bigint!): vectric_sales_salesitem_products
    "delete data from the table: \"vectric.sales_salesitems\""
    deleteSalesItems(
        "filter the rows which have to be deleted"
        where: vectric_sales_salesitems_bool_exp!
    ): vectric_sales_salesitems_mutation_response
    "delete single row from the table: \"vectric.sales_oem_bundles\""
    deleteSalesOEMBundleById(bundleId: String!): vectric_sales_oem_bundles
    "delete data from the table: \"vectric.sales_oem_bundles\""
    deleteSalesOemBundle(
        "filter the rows which have to be deleted"
        where: vectric_sales_oem_bundles_bool_exp!
    ): vectric_sales_oem_bundles_mutation_response
    "delete single row from the table: \"vectric.sales_oemlicences\""
    deleteSalesOemLicenceById(oemLicenceId: bigint!): vectric_sales_oemlicences
    "delete data from the table: \"vectric.sales_oemlicences\""
    deleteSalesOemLicences(
        "filter the rows which have to be deleted"
        where: vectric_sales_oemlicences_bool_exp!
    ): vectric_sales_oemlicences_mutation_response
    "delete single row from the table: \"vectric.scheduled_emails\""
    deleteScheduledEmailById(id: Int!): vectric_scheduled_emails
    "delete data from the table: \"vectric.scheduled_emails\""
    deleteScheduledEmails(
        "filter the rows which have to be deleted"
        where: vectric_scheduled_emails_bool_exp!
    ): vectric_scheduled_emails_mutation_response
    "delete single row from the table: \"vectric.security_group_members\""
    deleteSecurityGroupMemberById(id: bigint!): vectric_security_group_members
    "delete data from the table: \"vectric.security_group_members\""
    deleteSecurityGroupMembers(
        "filter the rows which have to be deleted"
        where: vectric_security_group_members_bool_exp!
    ): vectric_security_group_members_mutation_response
    "delete single row from the table: \"vectric.site_options\""
    deleteSiteOptionById(optionid: bigint!): vectric_site_options
    "delete single row from the table: \"vectric.site_option_location\""
    deleteSiteOptionLocationById(locationid: bigint!): vectric_site_option_location
    "delete data from the table: \"vectric.site_option_location\""
    deleteSiteOptionLocations(
        "filter the rows which have to be deleted"
        where: vectric_site_option_location_bool_exp!
    ): vectric_site_option_location_mutation_response
    "delete data from the table: \"vectric.site_options\""
    deleteSiteOptions(
        "filter the rows which have to be deleted"
        where: vectric_site_options_bool_exp!
    ): vectric_site_options_mutation_response
    "delete single row from the table: \"vectric.toolpath_saver_token\""
    deleteToolpathSaveTokenById(toolpathSaverTokenId: bigint!): vectric_toolpath_saver_token
    "delete data from the table: \"vectric.toolpath_saver_token\""
    deleteToolpathSaverTokens(
        "filter the rows which have to be deleted"
        where: vectric_toolpath_saver_token_bool_exp!
    ): vectric_toolpath_saver_token_mutation_response
    "delete single row from the table: \"vectric.trial_order\""
    deleteTrialOrderById(orderId: bigint!): vectric_trial_order
    "delete data from the table: \"vectric.trial_order\""
    deleteTrialOrders(
        "filter the rows which have to be deleted"
        where: vectric_trial_order_bool_exp!
    ): vectric_trial_order_mutation_response
    "delete single row from the table: \"vectric.update_requests\""
    deleteUpdateRequestById(requestId: bigint!): vectric_update_requests
    "delete data from the table: \"vectric.update_requests\""
    deleteUpdateRequests(
        "filter the rows which have to be deleted"
        where: vectric_update_requests_bool_exp!
    ): vectric_update_requests_mutation_response
    "delete single row from the table: \"vectric.upgrades_feature\""
    deleteUpgradeFeatureById(featureId: String!): vectric_upgrades_feature
    "delete data from the table: \"vectric.upgrades_feature\""
    deleteUpgradeFeatures(
        "filter the rows which have to be deleted"
        where: vectric_upgrades_feature_bool_exp!
    ): vectric_upgrades_feature_mutation_response
    "delete single row from the table: \"vectric.upgrades_product_type_feature\""
    deleteUpgradeProductTypeFeatureById(upgradeId: bigint!): vectric_upgrades_product_type_feature
    "delete data from the table: \"vectric.upgrades_product_type_feature\""
    deleteUpgradeProductTypeFeatures(
        "filter the rows which have to be deleted"
        where: vectric_upgrades_product_type_feature_bool_exp!
    ): vectric_upgrades_product_type_feature_mutation_response
    "delete single row from the table: \"vectric.upgrades_version_feature\""
    deleteUpgradeVersionFeatureById(upgradeId: bigint!): vectric_upgrades_version_feature
    "delete data from the table: \"vectric.upgrades_version_feature\""
    deleteUpgradeVersionFeatures(
        "filter the rows which have to be deleted"
        where: vectric_upgrades_version_feature_bool_exp!
    ): vectric_upgrades_version_feature_mutation_response
    "delete single row from the table: \"vectric.usergroup_2019_attendees\""
    deleteUserGroupAttendeeById(attendeeid: bigint!): vectric_usergroup_2019_attendees
    "delete data from the table: \"vectric.usergroup_2019_attendees\""
    deleteUserGroupAttendees(
        "filter the rows which have to be deleted"
        where: vectric_usergroup_2019_attendees_bool_exp!
    ): vectric_usergroup_2019_attendees_mutation_response
    "delete data from the table: \"vectric.usergroup_2019_waitlist\""
    deleteUserGroupWaitingListEntries(
        "filter the rows which have to be deleted"
        where: vectric_usergroup_2019_waitlist_bool_exp!
    ): vectric_usergroup_2019_waitlist_mutation_response
    "delete single row from the table: \"vectric.usergroup_2019_waitlist\""
    deleteUserGroupWaitingListEntryById(attendeeid: bigint!): vectric_usergroup_2019_waitlist
    "delete single row from the table: \"vectric.products_versioncodes\""
    deleteVersionCodeById(versioncodeid: bigint!): vectric_products_versioncodes
    "delete data from the table: \"vectric.products_versioncodes\""
    deleteVersionCodes(
        "filter the rows which have to be deleted"
        where: vectric_products_versioncodes_bool_exp!
    ): vectric_products_versioncodes_mutation_response
    "delete single row from the table: \"vectric.customer_zd_uploads\""
    deleteZendeskUploadById(zdUploadId: bigint!): vectric_customer_zd_uploads
    "delete data from the table: \"vectric.customer_zd_uploads\""
    deleteZendeskUploads(
        "filter the rows which have to be deleted"
        where: vectric_customer_zd_uploads_bool_exp!
    ): vectric_customer_zd_uploads_mutation_response
    "delete data from the table: \"vectric.allocatable_bundles\""
    delete_vectric_allocatable_bundles(
        "filter the rows which have to be deleted"
        where: vectric_allocatable_bundles_bool_exp!
    ): vectric_allocatable_bundles_mutation_response
    "delete data from the table: \"vectric.allocated_bundles\""
    delete_vectric_allocated_bundles(
        "filter the rows which have to be deleted"
        where: vectric_allocated_bundles_bool_exp!
    ): vectric_allocated_bundles_mutation_response
    "delete data from the table: \"vectric.allocation_summary_file_type\""
    delete_vectric_allocation_summary_file_type(
        "filter the rows which have to be deleted"
        where: vectric_allocation_summary_file_type_bool_exp!
    ): vectric_allocation_summary_file_type_mutation_response
    "delete single row from the table: \"vectric.allocation_summary_file_type\""
    delete_vectric_allocation_summary_file_type_by_pk(type: String!): vectric_allocation_summary_file_type
    "delete data from the table: \"vectric.continents\""
    delete_vectric_continents(
        "filter the rows which have to be deleted"
        where: vectric_continents_bool_exp!
    ): vectric_continents_mutation_response
    "delete single row from the table: \"vectric.continents\""
    delete_vectric_continents_by_pk(
        "Continent code"
        code: bpchar!
    ): vectric_continents
    "delete data from the table: \"vectric.customer_sales\""
    delete_vectric_customer_sales(
        "filter the rows which have to be deleted"
        where: vectric_customer_sales_bool_exp!
    ): vectric_customer_sales_mutation_response
    "delete data from the table: \"vectric.customer_status\""
    delete_vectric_customer_status(
        "filter the rows which have to be deleted"
        where: vectric_customer_status_bool_exp!
    ): vectric_customer_status_mutation_response
    "delete single row from the table: \"vectric.customer_status\""
    delete_vectric_customer_status_by_pk(statusId: bigint!): vectric_customer_status
    "delete data from the table: \"vectric.download\""
    delete_vectric_download(
        "filter the rows which have to be deleted"
        where: vectric_download_bool_exp!
    ): vectric_download_mutation_response
    "delete single row from the table: \"vectric.download\""
    delete_vectric_download_by_pk(downloadId: String!): vectric_download
    "delete data from the table: \"vectric.download_record\""
    delete_vectric_download_record(
        "filter the rows which have to be deleted"
        where: vectric_download_record_bool_exp!
    ): vectric_download_record_mutation_response
    "delete single row from the table: \"vectric.download_record\""
    delete_vectric_download_record_by_pk(id: bigint!): vectric_download_record
    "delete data from the table: \"vectric.enhancement_tokens\""
    delete_vectric_enhancement_tokens(
        "filter the rows which have to be deleted"
        where: vectric_enhancement_tokens_bool_exp!
    ): vectric_enhancement_tokens_mutation_response
    "delete single row from the table: \"vectric.enhancement_tokens\""
    delete_vectric_enhancement_tokens_by_pk(token: String!): vectric_enhancement_tokens
    "delete data from the table: \"vectric.free_clipart_tokens\""
    delete_vectric_free_clipart_tokens(
        "filter the rows which have to be deleted"
        where: vectric_free_clipart_tokens_bool_exp!
    ): vectric_free_clipart_tokens_mutation_response
    "delete single row from the table: \"vectric.free_clipart_tokens\""
    delete_vectric_free_clipart_tokens_by_pk(clipartToken: String!): vectric_free_clipart_tokens
    "delete data from the table: \"vectric.freeclipart\""
    delete_vectric_freeclipart(
        "filter the rows which have to be deleted"
        where: vectric_freeclipart_bool_exp!
    ): vectric_freeclipart_mutation_response
    "delete single row from the table: \"vectric.freeclipart\""
    delete_vectric_freeclipart_by_pk(freeClipartId: bigint!): vectric_freeclipart
    "delete data from the table: \"vectric.freeclipart_category\""
    delete_vectric_freeclipart_category(
        "filter the rows which have to be deleted"
        where: vectric_freeclipart_category_bool_exp!
    ): vectric_freeclipart_category_mutation_response
    "delete single row from the table: \"vectric.freeclipart_category\""
    delete_vectric_freeclipart_category_by_pk(categoryId: bigint!): vectric_freeclipart_category
    "delete data from the table: \"vectric.freeclipart_download_record\""
    delete_vectric_freeclipart_download_record(
        "filter the rows which have to be deleted"
        where: vectric_freeclipart_download_record_bool_exp!
    ): vectric_freeclipart_download_record_mutation_response
    "delete single row from the table: \"vectric.freeclipart_download_record\""
    delete_vectric_freeclipart_download_record_by_pk(downloadId: bigint!): vectric_freeclipart_download_record
    "delete data from the table: \"vectric.group_roles\""
    delete_vectric_group_roles(
        "filter the rows which have to be deleted"
        where: vectric_group_roles_bool_exp!
    ): vectric_group_roles_mutation_response
    "delete single row from the table: \"vectric.group_roles\""
    delete_vectric_group_roles_by_pk(id: Int!): vectric_group_roles
    "delete data from the table: \"vectric.group_user_role\""
    delete_vectric_group_user_role(
        "filter the rows which have to be deleted"
        where: vectric_group_user_role_bool_exp!
    ): vectric_group_user_role_mutation_response
    "delete single row from the table: \"vectric.group_user_role\""
    delete_vectric_group_user_role_by_pk(customer_id: bigint!, group_id: Int!): vectric_group_user_role
    "delete data from the table: \"vectric.groups\""
    delete_vectric_groups(
        "filter the rows which have to be deleted"
        where: vectric_groups_bool_exp!
    ): vectric_groups_mutation_response
    "delete single row from the table: \"vectric.groups\""
    delete_vectric_groups_by_pk(id: Int!): vectric_groups
    "delete data from the table: \"vectric.language_codes\""
    delete_vectric_language_codes(
        "filter the rows which have to be deleted"
        where: vectric_language_codes_bool_exp!
    ): vectric_language_codes_mutation_response
    "delete single row from the table: \"vectric.language_codes\""
    delete_vectric_language_codes_by_pk(
        "ISO 639-2 Code"
        threeLetterCode: bpchar!
    ): vectric_language_codes
    "delete data from the table: \"vectric.licence_log\""
    delete_vectric_licence_log(
        "filter the rows which have to be deleted"
        where: vectric_licence_log_bool_exp!
    ): vectric_licence_log_mutation_response
    "delete single row from the table: \"vectric.licence_log\""
    delete_vectric_licence_log_by_pk(licenceId: bigint!): vectric_licence_log
    "delete data from the table: \"vectric.linkshortener_links\""
    delete_vectric_linkshortener_links(
        "filter the rows which have to be deleted"
        where: vectric_linkshortener_links_bool_exp!
    ): vectric_linkshortener_links_mutation_response
    "delete single row from the table: \"vectric.linkshortener_links\""
    delete_vectric_linkshortener_links_by_pk(shortUrlHash: String!): vectric_linkshortener_links
    "delete data from the table: \"vectric.makerspace_requests\""
    delete_vectric_makerspace_requests(
        "filter the rows which have to be deleted"
        where: vectric_makerspace_requests_bool_exp!
    ): vectric_makerspace_requests_mutation_response
    "delete single row from the table: \"vectric.makerspace_requests\""
    delete_vectric_makerspace_requests_by_pk(requestId: bigint!): vectric_makerspace_requests
    "delete data from the table: \"vectric.membership_invitation_status\""
    delete_vectric_membership_invitation_status(
        "filter the rows which have to be deleted"
        where: vectric_membership_invitation_status_bool_exp!
    ): vectric_membership_invitation_status_mutation_response
    "delete single row from the table: \"vectric.membership_invitation_status\""
    delete_vectric_membership_invitation_status_by_pk(status: String!): vectric_membership_invitation_status
    "delete data from the table: \"vectric.membership_roles\""
    delete_vectric_membership_roles(
        "filter the rows which have to be deleted"
        where: vectric_membership_roles_bool_exp!
    ): vectric_membership_roles_mutation_response
    "delete single row from the table: \"vectric.membership_roles\""
    delete_vectric_membership_roles_by_pk(role: String!): vectric_membership_roles
    "delete data from the table: \"vectric.membership_status\""
    delete_vectric_membership_status(
        "filter the rows which have to be deleted"
        where: vectric_membership_status_bool_exp!
    ): vectric_membership_status_mutation_response
    "delete single row from the table: \"vectric.membership_status\""
    delete_vectric_membership_status_by_pk(status: String!): vectric_membership_status
    "delete data from the table: \"vectric.oauth_client_details\""
    delete_vectric_oauth_client_details(
        "filter the rows which have to be deleted"
        where: vectric_oauth_client_details_bool_exp!
    ): vectric_oauth_client_details_mutation_response
    "delete single row from the table: \"vectric.oauth_client_details\""
    delete_vectric_oauth_client_details_by_pk(client_id: String!): vectric_oauth_client_details
    "delete data from the table: \"vectric.oem_detailed_products\""
    delete_vectric_oem_detailed_products(
        "filter the rows which have to be deleted"
        where: vectric_oem_detailed_products_bool_exp!
    ): vectric_oem_detailed_products_mutation_response
    "delete single row from the table: \"vectric.oem_detailed_products\""
    delete_vectric_oem_detailed_products_by_pk(id: bigint!): vectric_oem_detailed_products
    "delete data from the table: \"vectric.oem_fastspring_item\""
    delete_vectric_oem_fastspring_item(
        "filter the rows which have to be deleted"
        where: vectric_oem_fastspring_item_bool_exp!
    ): vectric_oem_fastspring_item_mutation_response
    "delete data from the table: \"vectric.oem_fastspring_item_bundle\""
    delete_vectric_oem_fastspring_item_bundle(
        "filter the rows which have to be deleted"
        where: vectric_oem_fastspring_item_bundle_bool_exp!
    ): vectric_oem_fastspring_item_bundle_mutation_response
    "delete single row from the table: \"vectric.oem_fastspring_item_bundle\""
    delete_vectric_oem_fastspring_item_bundle_by_pk(itemBundleId: bigint!): vectric_oem_fastspring_item_bundle
    "delete single row from the table: \"vectric.oem_fastspring_item\""
    delete_vectric_oem_fastspring_item_by_pk(itemId: bigint!): vectric_oem_fastspring_item
    "delete data from the table: \"vectric.oem_fastspring_order\""
    delete_vectric_oem_fastspring_order(
        "filter the rows which have to be deleted"
        where: vectric_oem_fastspring_order_bool_exp!
    ): vectric_oem_fastspring_order_mutation_response
    "delete single row from the table: \"vectric.oem_fastspring_order\""
    delete_vectric_oem_fastspring_order_by_pk(orderId: bigint!): vectric_oem_fastspring_order
    "delete data from the table: \"vectric.oem_invite_status\""
    delete_vectric_oem_invite_status(
        "filter the rows which have to be deleted"
        where: vectric_oem_invite_status_bool_exp!
    ): vectric_oem_invite_status_mutation_response
    "delete single row from the table: \"vectric.oem_invite_status\""
    delete_vectric_oem_invite_status_by_pk(statusId: bigint!): vectric_oem_invite_status
    "delete data from the table: \"vectric.oem_licence_allocation_type\""
    delete_vectric_oem_licence_allocation_type(
        "filter the rows which have to be deleted"
        where: vectric_oem_licence_allocation_type_bool_exp!
    ): vectric_oem_licence_allocation_type_mutation_response
    "delete single row from the table: \"vectric.oem_licence_allocation_type\""
    delete_vectric_oem_licence_allocation_type_by_pk(allocationTypeId: bigint!): vectric_oem_licence_allocation_type
    "delete data from the table: \"vectric.oem_products\""
    delete_vectric_oem_products(
        "filter the rows which have to be deleted"
        where: vectric_oem_products_bool_exp!
    ): vectric_oem_products_mutation_response
    "delete single row from the table: \"vectric.oem_products\""
    delete_vectric_oem_products_by_pk(oemProductId: bigint!): vectric_oem_products
    "delete data from the table: \"vectric.organization_licence_scope\""
    delete_vectric_organization_licence_scope(
        "filter the rows which have to be deleted"
        where: vectric_organization_licence_scope_bool_exp!
    ): vectric_organization_licence_scope_mutation_response
    "delete single row from the table: \"vectric.organization_licence_scope\""
    delete_vectric_organization_licence_scope_by_pk(scope: String!): vectric_organization_licence_scope
    "delete data from the table: \"vectric.organization_types\""
    delete_vectric_organization_types(
        "filter the rows which have to be deleted"
        where: vectric_organization_types_bool_exp!
    ): vectric_organization_types_mutation_response
    "delete single row from the table: \"vectric.organization_types\""
    delete_vectric_organization_types_by_pk(type: String!): vectric_organization_types
    "delete data from the table: \"vectric.products_clipartcollection_links\""
    delete_vectric_products_clipartcollection_links(
        "filter the rows which have to be deleted"
        where: vectric_products_clipartcollection_links_bool_exp!
    ): vectric_products_clipartcollection_links_mutation_response
    "delete single row from the table: \"vectric.products_clipartcollection_links\""
    delete_vectric_products_clipartcollection_links_by_pk(clipartCollectionLinkId: bigint!): vectric_products_clipartcollection_links
    "delete data from the table: \"vectric.products_enhancement_eligibility\""
    delete_vectric_products_enhancement_eligibility(
        "filter the rows which have to be deleted"
        where: vectric_products_enhancement_eligibility_bool_exp!
    ): vectric_products_enhancement_eligibility_mutation_response
    "delete single row from the table: \"vectric.products_enhancement_eligibility\""
    delete_vectric_products_enhancement_eligibility_by_pk(eligibilityId: bigint!): vectric_products_enhancement_eligibility
    "delete data from the table: \"vectric.products_freeclipart\""
    delete_vectric_products_freeclipart(
        "filter the rows which have to be deleted"
        where: vectric_products_freeclipart_bool_exp!
    ): vectric_products_freeclipart_mutation_response
    "delete single row from the table: \"vectric.products_freeclipart\""
    delete_vectric_products_freeclipart_by_pk(productFreeClipartId: bigint!): vectric_products_freeclipart
    "delete data from the table: \"vectric.products_fulfilments\""
    delete_vectric_products_fulfilments(
        "filter the rows which have to be deleted"
        where: vectric_products_fulfilments_bool_exp!
    ): vectric_products_fulfilments_mutation_response
    "delete single row from the table: \"vectric.products_fulfilments\""
    delete_vectric_products_fulfilments_by_pk(fulfilmentId: bigint!): vectric_products_fulfilments
    "delete data from the table: \"vectric.products_fulfilmenttypes\""
    delete_vectric_products_fulfilmenttypes(
        "filter the rows which have to be deleted"
        where: vectric_products_fulfilmenttypes_bool_exp!
    ): vectric_products_fulfilmenttypes_mutation_response
    "delete single row from the table: \"vectric.products_fulfilmenttypes\""
    delete_vectric_products_fulfilmenttypes_by_pk(fulfilmenttypeid: bigint!): vectric_products_fulfilmenttypes
    "delete data from the table: \"vectric.products_product_fulfilments\""
    delete_vectric_products_product_fulfilments(
        "filter the rows which have to be deleted"
        where: vectric_products_product_fulfilments_bool_exp!
    ): vectric_products_product_fulfilments_mutation_response
    "delete single row from the table: \"vectric.products_product_fulfilments\""
    delete_vectric_products_product_fulfilments_by_pk(productfulfilmentid: bigint!): vectric_products_product_fulfilments
    "delete data from the table: \"vectric.products_product_licence_type\""
    delete_vectric_products_product_licence_type(
        "filter the rows which have to be deleted"
        where: vectric_products_product_licence_type_bool_exp!
    ): vectric_products_product_licence_type_mutation_response
    "delete single row from the table: \"vectric.products_product_licence_type\""
    delete_vectric_products_product_licence_type_by_pk(type: String!): vectric_products_product_licence_type
    "delete data from the table: \"vectric.sales_customerupdates\""
    delete_vectric_sales_customerupdates(
        "filter the rows which have to be deleted"
        where: vectric_sales_customerupdates_bool_exp!
    ): vectric_sales_customerupdates_mutation_response
    "delete single row from the table: \"vectric.sales_customerupdates\""
    delete_vectric_sales_customerupdates_by_pk(customerUpdateId: bigint!): vectric_sales_customerupdates
    "delete data from the table: \"vectric.sales_salesitemproduct_status\""
    delete_vectric_sales_salesitemproduct_status(
        "filter the rows which have to be deleted"
        where: vectric_sales_salesitemproduct_status_bool_exp!
    ): vectric_sales_salesitemproduct_status_mutation_response
    "delete single row from the table: \"vectric.sales_salesitemproduct_status\""
    delete_vectric_sales_salesitemproduct_status_by_pk(statusid: bigint!): vectric_sales_salesitemproduct_status
    "delete data from the table: \"vectric.security_emailverificationtokens\""
    delete_vectric_security_emailverificationtokens(
        "filter the rows which have to be deleted"
        where: vectric_security_emailverificationtokens_bool_exp!
    ): vectric_security_emailverificationtokens_mutation_response
    "delete single row from the table: \"vectric.security_emailverificationtokens\""
    delete_vectric_security_emailverificationtokens_by_pk(token: String!): vectric_security_emailverificationtokens
    "delete data from the table: \"vectric.security_group_authorities\""
    delete_vectric_security_group_authorities(
        "filter the rows which have to be deleted"
        where: vectric_security_group_authorities_bool_exp!
    ): vectric_security_group_authorities_mutation_response
    "delete data from the table: \"vectric.security_userinvitations\""
    delete_vectric_security_userinvitations(
        "filter the rows which have to be deleted"
        where: vectric_security_userinvitations_bool_exp!
    ): vectric_security_userinvitations_mutation_response
    "delete single row from the table: \"vectric.security_userinvitations\""
    delete_vectric_security_userinvitations_by_pk(token: String!): vectric_security_userinvitations
    "delete data from the table: \"vectric.security_users\""
    delete_vectric_security_users(
        "filter the rows which have to be deleted"
        where: vectric_security_users_bool_exp!
    ): vectric_security_users_mutation_response
    "delete single row from the table: \"vectric.security_users\""
    delete_vectric_security_users_by_pk(username: String!): vectric_security_users
    "delete data from the table: \"vectric.subscription_contract_status\""
    delete_vectric_subscription_contract_status(
        "filter the rows which have to be deleted"
        where: vectric_subscription_contract_status_bool_exp!
    ): vectric_subscription_contract_status_mutation_response
    "delete single row from the table: \"vectric.subscription_contract_status\""
    delete_vectric_subscription_contract_status_by_pk(status: String!): vectric_subscription_contract_status
    "delete data from the table: \"vectric.subscription_contracts\""
    delete_vectric_subscription_contracts(
        "filter the rows which have to be deleted"
        where: vectric_subscription_contracts_bool_exp!
    ): vectric_subscription_contracts_mutation_response
    "delete single row from the table: \"vectric.subscription_contracts\""
    delete_vectric_subscription_contracts_by_pk(subscriptionContractId: Int!): vectric_subscription_contracts
    "delete data from the table: \"vectric.subscription_events\""
    delete_vectric_subscription_events(
        "filter the rows which have to be deleted"
        where: vectric_subscription_events_bool_exp!
    ): vectric_subscription_events_mutation_response
    "delete single row from the table: \"vectric.subscription_events\""
    delete_vectric_subscription_events_by_pk(eventId: Int!): vectric_subscription_events
    "delete data from the table: \"vectric.upgrade_tokens\""
    delete_vectric_upgrade_tokens(
        "filter the rows which have to be deleted"
        where: vectric_upgrade_tokens_bool_exp!
    ): vectric_upgrade_tokens_mutation_response
    "delete single row from the table: \"vectric.upgrade_tokens\""
    delete_vectric_upgrade_tokens_by_pk(token: String!): vectric_upgrade_tokens
    "delete data from the table: \"vectric.version_code\""
    delete_vectric_version_code(
        "filter the rows which have to be deleted"
        where: vectric_version_code_bool_exp!
    ): vectric_version_code_mutation_response
    "delete single row from the table: \"vectric.version_code\""
    delete_vectric_version_code_by_pk(versionCodeId: bigint!): vectric_version_code
    forgotPassword(username: String!): ForgotPassword
    "insert data into the table: \"vectric.allocation_summary\""
    insertAllocationSummaries(
        "the rows to be inserted"
        objects: [vectric_allocation_summary_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_allocation_summary_on_conflict
    ): vectric_allocation_summary_mutation_response
    "insert a single row into the table: \"vectric.owned_item_assignments\""
    insertAssignment(
        "the row to be inserted"
        object: vectric_owned_item_assignments_insert_input!,
        "on conflict condition"
        on_conflict: vectric_owned_item_assignments_on_conflict
    ): vectric_owned_item_assignments
    "insert data into the table: \"vectric.owned_item_assignments\""
    insertAssignments(
        "the rows to be inserted"
        objects: [vectric_owned_item_assignments_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_owned_item_assignments_on_conflict
    ): vectric_owned_item_assignments_mutation_response
    "insert data into the table: \"vectric.countries\""
    insertCountries(
        "the rows to be inserted"
        objects: [vectric_countries_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_countries_on_conflict
    ): vectric_countries_mutation_response
    "insert a single row into the table: \"vectric.customer_area\""
    insertCustomerArea(
        "the row to be inserted"
        object: vectric_customer_area_insert_input!,
        "on conflict condition"
        on_conflict: vectric_customer_area_on_conflict
    ): vectric_customer_area
    "insert a single row into the table: \"vectric.customer_area_file\""
    insertCustomerAreaFile(
        "the row to be inserted"
        object: vectric_customer_area_file_insert_input!,
        "on conflict condition"
        on_conflict: vectric_customer_area_file_on_conflict
    ): vectric_customer_area_file
    "insert data into the table: \"vectric.customer_area_file\""
    insertCustomerAreaFiles(
        "the rows to be inserted"
        objects: [vectric_customer_area_file_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_customer_area_file_on_conflict
    ): vectric_customer_area_file_mutation_response
    "insert data into the table: \"vectric.customer_area\""
    insertCustomerAreas(
        "the rows to be inserted"
        objects: [vectric_customer_area_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_customer_area_on_conflict
    ): vectric_customer_area_mutation_response
    "insert data into the table: \"vectric.sales_customer_downloads\""
    insertCustomerDownloads(
        "the rows to be inserted"
        objects: [vectric_sales_customer_downloads_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_sales_customer_downloads_on_conflict
    ): vectric_sales_customer_downloads_mutation_response
    "insert data into the table: \"vectric.customer_responses\""
    insertCustomerResponses(
        "the rows to be inserted"
        objects: [vectric_customer_responses_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_customer_responses_on_conflict
    ): vectric_customer_responses_mutation_response
    "insert a single row into the table: \"vectric.download\""
    insertDownload(
        "the row to be inserted"
        object: vectric_download_insert_input!,
        "on conflict condition"
        on_conflict: vectric_download_on_conflict
    ): vectric_download
    "insert a single row into the table: \"vectric.download_record\""
    insertDownloadRecord(
        "the row to be inserted"
        object: vectric_download_record_insert_input!,
        "on conflict condition"
        on_conflict: vectric_download_record_on_conflict
    ): vectric_download_record
    "insert a single row into the table: \"vectric.sales_velocitytemplate\""
    insertEmailTemplate(
        "the row to be inserted"
        object: vectric_sales_velocitytemplate_insert_input!,
        "on conflict condition"
        on_conflict: vectric_sales_velocitytemplate_on_conflict
    ): vectric_sales_velocitytemplate
    "insert data into the table: \"vectric.sales_velocitytemplate\""
    insertEmailTemplates(
        "the rows to be inserted"
        objects: [vectric_sales_velocitytemplate_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_sales_velocitytemplate_on_conflict
    ): vectric_sales_velocitytemplate_mutation_response
    "insert a single row into the table: \"vectric.enhancement_tokens\""
    insertEnhancementToken(
        "the row to be inserted"
        object: vectric_enhancement_tokens_insert_input!,
        "on conflict condition"
        on_conflict: vectric_enhancement_tokens_on_conflict
    ): vectric_enhancement_tokens
    "insert data into the table: \"vectric.enhancement_tokens\""
    insertEnhancementTokens(
        "the rows to be inserted"
        objects: [vectric_enhancement_tokens_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_enhancement_tokens_on_conflict
    ): vectric_enhancement_tokens_mutation_response
    "insert a single row into the table: \"vectric.entitled_products\""
    insertEntitledProduct(
        "the row to be inserted"
        object: vectric_entitled_products_insert_input!,
        "on conflict condition"
        on_conflict: vectric_entitled_products_on_conflict
    ): vectric_entitled_products
    "insert data into the table: \"vectric.entitled_products\""
    insertEntitledProducts(
        "the rows to be inserted"
        objects: [vectric_entitled_products_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_entitled_products_on_conflict
    ): vectric_entitled_products_mutation_response
    "insert a single row into the table: \"vectric.entitlements\""
    insertEntitlement(
        "the row to be inserted"
        object: vectric_entitlements_insert_input!,
        "on conflict condition"
        on_conflict: vectric_entitlements_on_conflict
    ): vectric_entitlements
    "insert a single row into the table: \"vectric.entitlement_licences\""
    insertEntitlementLicence(
        "the row to be inserted"
        object: vectric_entitlement_licences_insert_input!,
        "on conflict condition"
        on_conflict: vectric_entitlement_licences_on_conflict
    ): vectric_entitlement_licences
    "insert data into the table: \"vectric.entitlement_licences\""
    insertEntitlementLicences(
        "the rows to be inserted"
        objects: [vectric_entitlement_licences_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_entitlement_licences_on_conflict
    ): vectric_entitlement_licences_mutation_response
    "insert data into the table: \"vectric.entitlements\""
    insertEntitlements(
        "the rows to be inserted"
        objects: [vectric_entitlements_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_entitlements_on_conflict
    ): vectric_entitlements_mutation_response
    "insert data into the table: \"vectric.oem_eval_request\""
    insertEvalRequests(
        "the rows to be inserted"
        objects: [vectric_oem_eval_request_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_oem_eval_request_on_conflict
    ): vectric_oem_eval_request_mutation_response
    "insert a single row into the table: \"vectric.freeclipart_download_record\""
    insertFreeClipartDownloadRecord(
        "the row to be inserted"
        object: vectric_freeclipart_download_record_insert_input!,
        "on conflict condition"
        on_conflict: vectric_freeclipart_download_record_on_conflict
    ): vectric_freeclipart_download_record
    "insert data into the table: \"vectric.freeclipart_download_record\""
    insertFreeClipartDownloadRecords(
        "the rows to be inserted"
        objects: [vectric_freeclipart_download_record_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_freeclipart_download_record_on_conflict
    ): vectric_freeclipart_download_record_mutation_response
    "insert a single row into the table: \"vectric.free_clipart_tokens\""
    insertFreeClipartToken(
        "the row to be inserted"
        object: vectric_free_clipart_tokens_insert_input!,
        "on conflict condition"
        on_conflict: vectric_free_clipart_tokens_on_conflict
    ): vectric_free_clipart_tokens
    "insert data into the table: \"vectric.free_clipart_tokens\""
    insertFreeClipartTokens(
        "the rows to be inserted"
        objects: [vectric_free_clipart_tokens_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_free_clipart_tokens_on_conflict
    ): vectric_free_clipart_tokens_mutation_response
    "insert a single row into the table: \"vectric.organization_licence_scope\""
    insertLicenceScope(
        "the row to be inserted"
        object: vectric_organization_licence_scope_insert_input!,
        "on conflict condition"
        on_conflict: vectric_organization_licence_scope_on_conflict
    ): vectric_organization_licence_scope
    "insert data into the table: \"vectric.organization_licence_scope\""
    insertLicenceScopes(
        "the rows to be inserted"
        objects: [vectric_organization_licence_scope_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_organization_licence_scope_on_conflict
    ): vectric_organization_licence_scope_mutation_response
    "insert a single row into the table: \"vectric.makerspace_requests\""
    insertMakerspaceRequest(
        "the row to be inserted"
        object: vectric_makerspace_requests_insert_input!,
        "on conflict condition"
        on_conflict: vectric_makerspace_requests_on_conflict
    ): vectric_makerspace_requests
    "insert data into the table: \"vectric.membership_invitations\""
    insertMembershipInvitations(
        "the rows to be inserted"
        objects: [vectric_membership_invitations_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_membership_invitations_on_conflict
    ): vectric_membership_invitations_mutation_response
    "insert data into the table: \"vectric.memberships\""
    insertMemberships(
        "the rows to be inserted"
        objects: [vectric_memberships_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_memberships_on_conflict
    ): vectric_memberships_mutation_response
    "insert data into the table: \"vectric.oem_allocation_emails\""
    insertOemAllocationEmails(
        "the rows to be inserted"
        objects: [vectric_oem_allocation_emails_insert_input!]!
    ): vectric_oem_allocation_emails_mutation_response
    "insert data into the table: \"vectric.oem_partners\""
    insertOemPartner(
        "the rows to be inserted"
        objects: [vectric_oem_partners_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_oem_partners_on_conflict
    ): vectric_oem_partners_mutation_response
    "insert data into the table: \"vectric.oem_staff_customer\""
    insertOemStaffCustomers(
        "the rows to be inserted"
        objects: [vectric_oem_staff_customer_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_oem_staff_customer_on_conflict
    ): vectric_oem_staff_customer_mutation_response
    "insert a single row into the table: \"vectric.allocation_summary\""
    insertOneAllocationSummary(
        "the row to be inserted"
        object: vectric_allocation_summary_insert_input!,
        "on conflict condition"
        on_conflict: vectric_allocation_summary_on_conflict
    ): vectric_allocation_summary
    "insert a single row into the table: \"vectric.countries\""
    insertOneCountry(
        "the row to be inserted"
        object: vectric_countries_insert_input!,
        "on conflict condition"
        on_conflict: vectric_countries_on_conflict
    ): vectric_countries
    "insert a single row into the table: \"vectric.sales_customer_downloads\""
    insertOneCustomerDownload(
        "the row to be inserted"
        object: vectric_sales_customer_downloads_insert_input!,
        "on conflict condition"
        on_conflict: vectric_sales_customer_downloads_on_conflict
    ): vectric_sales_customer_downloads
    "insert a single row into the table: \"vectric.customer_responses\""
    insertOneCustomerResponse(
        "the row to be inserted"
        object: vectric_customer_responses_insert_input!,
        "on conflict condition"
        on_conflict: vectric_customer_responses_on_conflict
    ): vectric_customer_responses
    "insert a single row into the table: \"vectric.oem_eval_request\""
    insertOneEvalRequest(
        "the row to be inserted"
        object: vectric_oem_eval_request_insert_input!,
        "on conflict condition"
        on_conflict: vectric_oem_eval_request_on_conflict
    ): vectric_oem_eval_request
    "insert a single row into the table: \"vectric.memberships\""
    insertOneMembership(
        "the row to be inserted"
        object: vectric_memberships_insert_input!,
        "on conflict condition"
        on_conflict: vectric_memberships_on_conflict
    ): vectric_memberships
    "insert a single row into the table: \"vectric.membership_invitations\""
    insertOneMembershipInvitation(
        "the row to be inserted"
        object: vectric_membership_invitations_insert_input!,
        "on conflict condition"
        on_conflict: vectric_membership_invitations_on_conflict
    ): vectric_membership_invitations
    "insert a single row into the table: \"vectric.oem_allocation_emails\""
    insertOneOemAllocationEmail(
        "the row to be inserted"
        object: vectric_oem_allocation_emails_insert_input!
    ): vectric_oem_allocation_emails
    "insert a single row into the table: \"vectric.oem_partners\""
    insertOneOemPartner(
        "the row to be inserted"
        object: vectric_oem_partners_insert_input!,
        "on conflict condition"
        on_conflict: vectric_oem_partners_on_conflict
    ): vectric_oem_partners
    "insert a single row into the table: \"vectric.oem_staff_customer\""
    insertOneOemStaffCustomer(
        "the row to be inserted"
        object: vectric_oem_staff_customer_insert_input!,
        "on conflict condition"
        on_conflict: vectric_oem_staff_customer_on_conflict
    ): vectric_oem_staff_customer
    "insert a single row into the table: \"vectric.sales_orders\""
    insertOneOrder(
        "the row to be inserted"
        object: vectric_sales_orders_insert_input!,
        "on conflict condition"
        on_conflict: vectric_sales_orders_on_conflict
    ): vectric_sales_orders
    "insert a single row into the table: \"vectric.organization_audit\""
    insertOneOrganizationAudit(
        "the row to be inserted"
        object: vectric_organization_audit_insert_input!,
        "on conflict condition"
        on_conflict: vectric_organization_audit_on_conflict
    ): vectric_organization_audit
    "insert a single row into the table: \"vectric.owned_items\""
    insertOneOwnedItem(
        "the row to be inserted"
        object: vectric_owned_items_insert_input!,
        "on conflict condition"
        on_conflict: vectric_owned_items_on_conflict
    ): vectric_owned_items
    "insert a single row into the table: \"vectric.security_passwordresettokens\""
    insertOnePasswordResetToken(
        "the row to be inserted"
        object: vectric_security_passwordresettokens_insert_input!,
        "on conflict condition"
        on_conflict: vectric_security_passwordresettokens_on_conflict
    ): vectric_security_passwordresettokens
    "insert a single row into the table: \"vectric.products_products\""
    insertOneProduct(
        "the row to be inserted"
        object: vectric_products_products_insert_input!,
        "on conflict condition"
        on_conflict: vectric_products_products_on_conflict
    ): vectric_products_products
    "insert a single row into the table: \"vectric.products_producttype\""
    insertOneProductType(
        "the row to be inserted"
        object: vectric_products_producttype_insert_input!,
        "on conflict condition"
        on_conflict: vectric_products_producttype_on_conflict
    ): vectric_products_producttype
    "insert a single row into the table: \"vectric.products_upgrade_eligibility\""
    insertOneProductUpgradeEligibility(
        "the row to be inserted"
        object: vectric_products_upgrade_eligibility_insert_input!,
        "on conflict condition"
        on_conflict: vectric_products_upgrade_eligibility_on_conflict
    ): vectric_products_upgrade_eligibility
    "insert a single row into the table: \"vectric.oem_purchase_options\""
    insertOnePurchaseOption(
        "the row to be inserted"
        object: vectric_oem_purchase_options_insert_input!,
        "on conflict condition"
        on_conflict: vectric_oem_purchase_options_on_conflict
    ): vectric_oem_purchase_options
    "insert a single row into the table: \"vectric.questions\""
    insertOneQuestion(
        "the row to be inserted"
        object: vectric_questions_insert_input!,
        "on conflict condition"
        on_conflict: vectric_questions_on_conflict
    ): vectric_questions
    "insert a single row into the table: \"vectric.responses\""
    insertOneResponse(
        "the row to be inserted"
        object: vectric_responses_insert_input!,
        "on conflict condition"
        on_conflict: vectric_responses_on_conflict
    ): vectric_responses
    "insert a single row into the table: \"vectric.sales_salesitems\""
    insertOneSalesItem(
        "the row to be inserted"
        object: vectric_sales_salesitems_insert_input!,
        "on conflict condition"
        on_conflict: vectric_sales_salesitems_on_conflict
    ): vectric_sales_salesitems
    "insert a single row into the table: \"vectric.sales_salesitem_products\""
    insertOneSalesItemProduct(
        "the row to be inserted"
        object: vectric_sales_salesitem_products_insert_input!,
        "on conflict condition"
        on_conflict: vectric_sales_salesitem_products_on_conflict
    ): vectric_sales_salesitem_products
    "insert a single row into the table: \"vectric.sales_oem_bundles\""
    insertOneSalesOemBundle(
        "the row to be inserted"
        object: vectric_sales_oem_bundles_insert_input!,
        "on conflict condition"
        on_conflict: vectric_sales_oem_bundles_on_conflict
    ): vectric_sales_oem_bundles
    "insert a single row into the table: \"vectric.site_options\""
    insertOneSiteOption(
        "the row to be inserted"
        object: vectric_site_options_insert_input!,
        "on conflict condition"
        on_conflict: vectric_site_options_on_conflict
    ): vectric_site_options
    "insert a single row into the table: \"vectric.site_option_location\""
    insertOneSiteOptionLocation(
        "the row to be inserted"
        object: vectric_site_option_location_insert_input!,
        "on conflict condition"
        on_conflict: vectric_site_option_location_on_conflict
    ): vectric_site_option_location
    "insert a single row into the table: \"vectric.trial_order\""
    insertOneTrialOrder(
        "the row to be inserted"
        object: vectric_trial_order_insert_input!,
        "on conflict condition"
        on_conflict: vectric_trial_order_on_conflict
    ): vectric_trial_order
    "insert a single row into the table: \"vectric.update_requests\""
    insertOneUpdateRequest(
        "the row to be inserted"
        object: vectric_update_requests_insert_input!,
        "on conflict condition"
        on_conflict: vectric_update_requests_on_conflict
    ): vectric_update_requests
    "insert a single row into the table: \"vectric.upgrades_feature\""
    insertOneUpgradeFeature(
        "the row to be inserted"
        object: vectric_upgrades_feature_insert_input!,
        "on conflict condition"
        on_conflict: vectric_upgrades_feature_on_conflict
    ): vectric_upgrades_feature
    "insert a single row into the table: \"vectric.upgrades_product_type_feature\""
    insertOneUpgradeProductTypeFeatureById(
        "the row to be inserted"
        object: vectric_upgrades_product_type_feature_insert_input!,
        "on conflict condition"
        on_conflict: vectric_upgrades_product_type_feature_on_conflict
    ): vectric_upgrades_product_type_feature
    "insert a single row into the table: \"vectric.upgrades_version_feature\""
    insertOneUpgradeVersionFeatureById(
        "the row to be inserted"
        object: vectric_upgrades_version_feature_insert_input!,
        "on conflict condition"
        on_conflict: vectric_upgrades_version_feature_on_conflict
    ): vectric_upgrades_version_feature
    "insert a single row into the table: \"vectric.usergroup_2019_attendees\""
    insertOneUserGroupAttendee(
        "the row to be inserted"
        object: vectric_usergroup_2019_attendees_insert_input!,
        "on conflict condition"
        on_conflict: vectric_usergroup_2019_attendees_on_conflict
    ): vectric_usergroup_2019_attendees
    "insert a single row into the table: \"vectric.usergroup_2019_waitlist\""
    insertOneUserGroupWaitingListEntry(
        "the row to be inserted"
        object: vectric_usergroup_2019_waitlist_insert_input!,
        "on conflict condition"
        on_conflict: vectric_usergroup_2019_waitlist_on_conflict
    ): vectric_usergroup_2019_waitlist
    "insert a single row into the table: \"vectric.products_versioncodes\""
    insertOneVersionCode(
        "the row to be inserted"
        object: vectric_products_versioncodes_insert_input!,
        "on conflict condition"
        on_conflict: vectric_products_versioncodes_on_conflict
    ): vectric_products_versioncodes
    "insert a single row into the table: \"vectric.customer_zd_uploads\""
    insertOneZendeskUpload(
        "the row to be inserted"
        object: vectric_customer_zd_uploads_insert_input!,
        "on conflict condition"
        on_conflict: vectric_customer_zd_uploads_on_conflict
    ): vectric_customer_zd_uploads
    "insert data into the table: \"vectric.sales_orders\""
    insertOrders(
        "the rows to be inserted"
        objects: [vectric_sales_orders_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_sales_orders_on_conflict
    ): vectric_sales_orders_mutation_response
    "insert a single row into the table: \"vectric.organizations\""
    insertOrganization(
        "the row to be inserted"
        object: vectric_organizations_insert_input!,
        "on conflict condition"
        on_conflict: vectric_organizations_on_conflict
    ): vectric_organizations
    "insert data into the table: \"vectric.organization_audit\""
    insertOrganizationAudits(
        "the rows to be inserted"
        objects: [vectric_organization_audit_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_organization_audit_on_conflict
    ): vectric_organization_audit_mutation_response
    "insert a single row into the table: \"vectric.organization_orders\""
    insertOrganizationOrder(
        "the row to be inserted"
        object: vectric_organization_orders_insert_input!,
        "on conflict condition"
        on_conflict: vectric_organization_orders_on_conflict
    ): vectric_organization_orders
    "insert a single row into the table: \"vectric.organization_order_items\""
    insertOrganizationOrderItem(
        "the row to be inserted"
        object: vectric_organization_order_items_insert_input!,
        "on conflict condition"
        on_conflict: vectric_organization_order_items_on_conflict
    ): vectric_organization_order_items
    "insert data into the table: \"vectric.organization_order_items\""
    insertOrganizationOrderItems(
        "the rows to be inserted"
        objects: [vectric_organization_order_items_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_organization_order_items_on_conflict
    ): vectric_organization_order_items_mutation_response
    "insert data into the table: \"vectric.organization_orders\""
    insertOrganizationOrders(
        "the rows to be inserted"
        objects: [vectric_organization_orders_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_organization_orders_on_conflict
    ): vectric_organization_orders_mutation_response
    "insert data into the table: \"vectric.organizations\""
    insertOrganizations(
        "the rows to be inserted"
        objects: [vectric_organizations_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_organizations_on_conflict
    ): vectric_organizations_mutation_response
    "insert data into the table: \"vectric.owned_items\""
    insertOwnedItem(
        "the rows to be inserted"
        objects: [vectric_owned_items_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_owned_items_on_conflict
    ): vectric_owned_items_mutation_response
    "insert a single row into the table: \"vectric.owned_products\""
    insertOwnedProduct(
        "the row to be inserted"
        object: vectric_owned_products_insert_input!,
        "on conflict condition"
        on_conflict: vectric_owned_products_on_conflict
    ): vectric_owned_products
    "insert data into the table: \"vectric.owned_products\""
    insertOwnedProducts(
        "the rows to be inserted"
        objects: [vectric_owned_products_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_owned_products_on_conflict
    ): vectric_owned_products_mutation_response
    "insert data into the table: \"vectric.security_passwordresettokens\""
    insertPasswordResetTokens(
        "the rows to be inserted"
        objects: [vectric_security_passwordresettokens_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_security_passwordresettokens_on_conflict
    ): vectric_security_passwordresettokens_mutation_response
    "insert data into the table: \"vectric.products_producttype\""
    insertProductTypes(
        "the rows to be inserted"
        objects: [vectric_products_producttype_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_products_producttype_on_conflict
    ): vectric_products_producttype_mutation_response
    "insert data into the table: \"vectric.products_products\""
    insertProducts(
        "the rows to be inserted"
        objects: [vectric_products_products_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_products_products_on_conflict
    ): vectric_products_products_mutation_response
    "insert data into the table: \"vectric.products_upgrade_eligibility\""
    insertProductsUpgradeEligibility(
        "the rows to be inserted"
        objects: [vectric_products_upgrade_eligibility_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_products_upgrade_eligibility_on_conflict
    ): vectric_products_upgrade_eligibility_mutation_response
    "insert data into the table: \"vectric.oem_purchase_options\""
    insertPurchaseOptions(
        "the rows to be inserted"
        objects: [vectric_oem_purchase_options_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_oem_purchase_options_on_conflict
    ): vectric_oem_purchase_options_mutation_response
    "insert data into the table: \"vectric.questions\""
    insertQuestions(
        "the rows to be inserted"
        objects: [vectric_questions_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_questions_on_conflict
    ): vectric_questions_mutation_response
    "insert data into the table: \"vectric.responses\""
    insertResponses(
        "the rows to be inserted"
        objects: [vectric_responses_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_responses_on_conflict
    ): vectric_responses_mutation_response
    "insert a single row into the table: \"vectric.saleable_products\""
    insertSaleableProduct(
        "the row to be inserted"
        object: vectric_saleable_products_insert_input!,
        "on conflict condition"
        on_conflict: vectric_saleable_products_on_conflict
    ): vectric_saleable_products
    "insert data into the table: \"vectric.saleable_products\""
    insertSaleableProducts(
        "the rows to be inserted"
        objects: [vectric_saleable_products_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_saleable_products_on_conflict
    ): vectric_saleable_products_mutation_response
    "insert a single row into the table: \"vectric.sales_customers\""
    insertSalesCustomer(
        "the row to be inserted"
        object: vectric_sales_customers_insert_input!,
        "on conflict condition"
        on_conflict: vectric_sales_customers_on_conflict
    ): vectric_sales_customers
    "insert data into the table: \"vectric.sales_customers\""
    insertSalesCustomers(
        "the rows to be inserted"
        objects: [vectric_sales_customers_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_sales_customers_on_conflict
    ): vectric_sales_customers_mutation_response
    "insert data into the table: \"vectric.sales_salesitem_products\""
    insertSalesItemProducts(
        "the rows to be inserted"
        objects: [vectric_sales_salesitem_products_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_sales_salesitem_products_on_conflict
    ): vectric_sales_salesitem_products_mutation_response
    "insert data into the table: \"vectric.sales_salesitems\""
    insertSalesItems(
        "the rows to be inserted"
        objects: [vectric_sales_salesitems_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_sales_salesitems_on_conflict
    ): vectric_sales_salesitems_mutation_response
    "insert data into the table: \"vectric.sales_oem_bundles\""
    insertSalesOemBundle(
        "the rows to be inserted"
        objects: [vectric_sales_oem_bundles_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_sales_oem_bundles_on_conflict
    ): vectric_sales_oem_bundles_mutation_response
    "insert a single row into the table: \"vectric.scheduled_emails\""
    insertScheduledEmail(
        "the row to be inserted"
        object: vectric_scheduled_emails_insert_input!,
        "on conflict condition"
        on_conflict: vectric_scheduled_emails_on_conflict
    ): vectric_scheduled_emails
    "insert data into the table: \"vectric.scheduled_emails\""
    insertScheduledEmails(
        "the rows to be inserted"
        objects: [vectric_scheduled_emails_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_scheduled_emails_on_conflict
    ): vectric_scheduled_emails_mutation_response
    "insert a single row into the table: \"vectric.security_emailverificationtokens\""
    insertSecurityEmailVerificationToken(
        "the row to be inserted"
        object: vectric_security_emailverificationtokens_insert_input!,
        "on conflict condition"
        on_conflict: vectric_security_emailverificationtokens_on_conflict
    ): vectric_security_emailverificationtokens
    "insert a single row into the table: \"vectric.security_group_members\""
    insertSecurityGroupMember(
        "the row to be inserted"
        object: vectric_security_group_members_insert_input!,
        "on conflict condition"
        on_conflict: vectric_security_group_members_on_conflict
    ): vectric_security_group_members
    "insert data into the table: \"vectric.security_group_members\""
    insertSecurityGroupMembers(
        "the rows to be inserted"
        objects: [vectric_security_group_members_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_security_group_members_on_conflict
    ): vectric_security_group_members_mutation_response
    "insert a single row into the table: \"vectric.security_users\""
    insertSecurityUser(
        "the row to be inserted"
        object: vectric_security_users_insert_input!,
        "on conflict condition"
        on_conflict: vectric_security_users_on_conflict
    ): vectric_security_users
    "insert a single row into the table: \"vectric.security_userinvitations\""
    insertSecurityUserInvitation(
        "the row to be inserted"
        object: vectric_security_userinvitations_insert_input!,
        "on conflict condition"
        on_conflict: vectric_security_userinvitations_on_conflict
    ): vectric_security_userinvitations
    "insert data into the table: \"vectric.security_userinvitations\""
    insertSecurityUserInvitations(
        "the rows to be inserted"
        objects: [vectric_security_userinvitations_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_security_userinvitations_on_conflict
    ): vectric_security_userinvitations_mutation_response
    "insert data into the table: \"vectric.security_users\""
    insertSecurityUsers(
        "the rows to be inserted"
        objects: [vectric_security_users_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_security_users_on_conflict
    ): vectric_security_users_mutation_response
    "insert data into the table: \"vectric.linkshortener_links\""
    insertShortLink(
        "the rows to be inserted"
        objects: [vectric_linkshortener_links_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_linkshortener_links_on_conflict
    ): vectric_linkshortener_links_mutation_response
    "insert a single row into the table: \"vectric.linkshortener_links\""
    insertShortLinkOne(
        "the row to be inserted"
        object: vectric_linkshortener_links_insert_input!,
        "on conflict condition"
        on_conflict: vectric_linkshortener_links_on_conflict
    ): vectric_linkshortener_links
    "insert data into the table: \"vectric.site_option_location\""
    insertSiteOptionLocations(
        "the rows to be inserted"
        objects: [vectric_site_option_location_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_site_option_location_on_conflict
    ): vectric_site_option_location_mutation_response
    "insert data into the table: \"vectric.site_options\""
    insertSiteOptions(
        "the rows to be inserted"
        objects: [vectric_site_options_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_site_options_on_conflict
    ): vectric_site_options_mutation_response
    "insert a single row into the table: \"vectric.toolpath_saver_token\""
    insertToolpathSaverToken(
        "the row to be inserted"
        object: vectric_toolpath_saver_token_insert_input!,
        "on conflict condition"
        on_conflict: vectric_toolpath_saver_token_on_conflict
    ): vectric_toolpath_saver_token
    "insert data into the table: \"vectric.toolpath_saver_token\""
    insertToolpathSaverTokens(
        "the rows to be inserted"
        objects: [vectric_toolpath_saver_token_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_toolpath_saver_token_on_conflict
    ): vectric_toolpath_saver_token_mutation_response
    "insert data into the table: \"vectric.trial_order\""
    insertTrialOrders(
        "the rows to be inserted"
        objects: [vectric_trial_order_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_trial_order_on_conflict
    ): vectric_trial_order_mutation_response
    "insert data into the table: \"vectric.update_requests\""
    insertUpdateRequests(
        "the rows to be inserted"
        objects: [vectric_update_requests_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_update_requests_on_conflict
    ): vectric_update_requests_mutation_response
    "insert data into the table: \"vectric.upgrades_feature\""
    insertUpgradeFeatures(
        "the rows to be inserted"
        objects: [vectric_upgrades_feature_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_upgrades_feature_on_conflict
    ): vectric_upgrades_feature_mutation_response
    "insert data into the table: \"vectric.upgrades_product_type_feature\""
    insertUpgradeProductTypeFeatures(
        "the rows to be inserted"
        objects: [vectric_upgrades_product_type_feature_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_upgrades_product_type_feature_on_conflict
    ): vectric_upgrades_product_type_feature_mutation_response
    "insert a single row into the table: \"vectric.upgrade_tokens\""
    insertUpgradeToken(
        "the row to be inserted"
        object: vectric_upgrade_tokens_insert_input!,
        "on conflict condition"
        on_conflict: vectric_upgrade_tokens_on_conflict
    ): vectric_upgrade_tokens
    "insert data into the table: \"vectric.upgrade_tokens\""
    insertUpgradeTokens(
        "the rows to be inserted"
        objects: [vectric_upgrade_tokens_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_upgrade_tokens_on_conflict
    ): vectric_upgrade_tokens_mutation_response
    "insert data into the table: \"vectric.upgrades_version_feature\""
    insertUpgradeVersionFeatures(
        "the rows to be inserted"
        objects: [vectric_upgrades_version_feature_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_upgrades_version_feature_on_conflict
    ): vectric_upgrades_version_feature_mutation_response
    "insert data into the table: \"vectric.usergroup_2019_attendees\""
    insertUserGroupAttendees(
        "the rows to be inserted"
        objects: [vectric_usergroup_2019_attendees_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_usergroup_2019_attendees_on_conflict
    ): vectric_usergroup_2019_attendees_mutation_response
    "insert data into the table: \"vectric.usergroup_2019_waitlist\""
    insertUserGroupWaitingListEntries(
        "the rows to be inserted"
        objects: [vectric_usergroup_2019_waitlist_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_usergroup_2019_waitlist_on_conflict
    ): vectric_usergroup_2019_waitlist_mutation_response
    "insert data into the table: \"vectric.products_versioncodes\""
    insertVersionCode(
        "the rows to be inserted"
        objects: [vectric_products_versioncodes_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_products_versioncodes_on_conflict
    ): vectric_products_versioncodes_mutation_response
    "insert data into the table: \"vectric.customer_zd_uploads\""
    insertZendeskUploads(
        "the rows to be inserted"
        objects: [vectric_customer_zd_uploads_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_customer_zd_uploads_on_conflict
    ): vectric_customer_zd_uploads_mutation_response
    "insert data into the table: \"vectric.allocatable_bundles\""
    insert_vectric_allocatable_bundles(
        "the rows to be inserted"
        objects: [vectric_allocatable_bundles_insert_input!]!
    ): vectric_allocatable_bundles_mutation_response
    "insert a single row into the table: \"vectric.allocatable_bundles\""
    insert_vectric_allocatable_bundles_one(
        "the row to be inserted"
        object: vectric_allocatable_bundles_insert_input!
    ): vectric_allocatable_bundles
    "insert data into the table: \"vectric.allocated_bundles\""
    insert_vectric_allocated_bundles(
        "the rows to be inserted"
        objects: [vectric_allocated_bundles_insert_input!]!
    ): vectric_allocated_bundles_mutation_response
    "insert a single row into the table: \"vectric.allocated_bundles\""
    insert_vectric_allocated_bundles_one(
        "the row to be inserted"
        object: vectric_allocated_bundles_insert_input!
    ): vectric_allocated_bundles
    "insert data into the table: \"vectric.allocation_summary_file_type\""
    insert_vectric_allocation_summary_file_type(
        "the rows to be inserted"
        objects: [vectric_allocation_summary_file_type_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_allocation_summary_file_type_on_conflict
    ): vectric_allocation_summary_file_type_mutation_response
    "insert a single row into the table: \"vectric.allocation_summary_file_type\""
    insert_vectric_allocation_summary_file_type_one(
        "the row to be inserted"
        object: vectric_allocation_summary_file_type_insert_input!,
        "on conflict condition"
        on_conflict: vectric_allocation_summary_file_type_on_conflict
    ): vectric_allocation_summary_file_type
    "insert data into the table: \"vectric.continents\""
    insert_vectric_continents(
        "the rows to be inserted"
        objects: [vectric_continents_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_continents_on_conflict
    ): vectric_continents_mutation_response
    "insert a single row into the table: \"vectric.continents\""
    insert_vectric_continents_one(
        "the row to be inserted"
        object: vectric_continents_insert_input!,
        "on conflict condition"
        on_conflict: vectric_continents_on_conflict
    ): vectric_continents
    "insert data into the table: \"vectric.customer_sales\""
    insert_vectric_customer_sales(
        "the rows to be inserted"
        objects: [vectric_customer_sales_insert_input!]!
    ): vectric_customer_sales_mutation_response
    "insert a single row into the table: \"vectric.customer_sales\""
    insert_vectric_customer_sales_one(
        "the row to be inserted"
        object: vectric_customer_sales_insert_input!
    ): vectric_customer_sales
    "insert data into the table: \"vectric.customer_status\""
    insert_vectric_customer_status(
        "the rows to be inserted"
        objects: [vectric_customer_status_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_customer_status_on_conflict
    ): vectric_customer_status_mutation_response
    "insert a single row into the table: \"vectric.customer_status\""
    insert_vectric_customer_status_one(
        "the row to be inserted"
        object: vectric_customer_status_insert_input!,
        "on conflict condition"
        on_conflict: vectric_customer_status_on_conflict
    ): vectric_customer_status
    "insert data into the table: \"vectric.download\""
    insert_vectric_download(
        "the rows to be inserted"
        objects: [vectric_download_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_download_on_conflict
    ): vectric_download_mutation_response
    "insert data into the table: \"vectric.download_record\""
    insert_vectric_download_record(
        "the rows to be inserted"
        objects: [vectric_download_record_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_download_record_on_conflict
    ): vectric_download_record_mutation_response
    "insert data into the table: \"vectric.freeclipart\""
    insert_vectric_freeclipart(
        "the rows to be inserted"
        objects: [vectric_freeclipart_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_freeclipart_on_conflict
    ): vectric_freeclipart_mutation_response
    "insert data into the table: \"vectric.freeclipart_category\""
    insert_vectric_freeclipart_category(
        "the rows to be inserted"
        objects: [vectric_freeclipart_category_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_freeclipart_category_on_conflict
    ): vectric_freeclipart_category_mutation_response
    "insert a single row into the table: \"vectric.freeclipart_category\""
    insert_vectric_freeclipart_category_one(
        "the row to be inserted"
        object: vectric_freeclipart_category_insert_input!,
        "on conflict condition"
        on_conflict: vectric_freeclipart_category_on_conflict
    ): vectric_freeclipart_category
    "insert a single row into the table: \"vectric.freeclipart\""
    insert_vectric_freeclipart_one(
        "the row to be inserted"
        object: vectric_freeclipart_insert_input!,
        "on conflict condition"
        on_conflict: vectric_freeclipart_on_conflict
    ): vectric_freeclipart
    "insert data into the table: \"vectric.group_roles\""
    insert_vectric_group_roles(
        "the rows to be inserted"
        objects: [vectric_group_roles_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_group_roles_on_conflict
    ): vectric_group_roles_mutation_response
    "insert a single row into the table: \"vectric.group_roles\""
    insert_vectric_group_roles_one(
        "the row to be inserted"
        object: vectric_group_roles_insert_input!,
        "on conflict condition"
        on_conflict: vectric_group_roles_on_conflict
    ): vectric_group_roles
    "insert data into the table: \"vectric.group_user_role\""
    insert_vectric_group_user_role(
        "the rows to be inserted"
        objects: [vectric_group_user_role_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_group_user_role_on_conflict
    ): vectric_group_user_role_mutation_response
    "insert a single row into the table: \"vectric.group_user_role\""
    insert_vectric_group_user_role_one(
        "the row to be inserted"
        object: vectric_group_user_role_insert_input!,
        "on conflict condition"
        on_conflict: vectric_group_user_role_on_conflict
    ): vectric_group_user_role
    "insert data into the table: \"vectric.groups\""
    insert_vectric_groups(
        "the rows to be inserted"
        objects: [vectric_groups_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_groups_on_conflict
    ): vectric_groups_mutation_response
    "insert a single row into the table: \"vectric.groups\""
    insert_vectric_groups_one(
        "the row to be inserted"
        object: vectric_groups_insert_input!,
        "on conflict condition"
        on_conflict: vectric_groups_on_conflict
    ): vectric_groups
    "insert data into the table: \"vectric.language_codes\""
    insert_vectric_language_codes(
        "the rows to be inserted"
        objects: [vectric_language_codes_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_language_codes_on_conflict
    ): vectric_language_codes_mutation_response
    "insert a single row into the table: \"vectric.language_codes\""
    insert_vectric_language_codes_one(
        "the row to be inserted"
        object: vectric_language_codes_insert_input!,
        "on conflict condition"
        on_conflict: vectric_language_codes_on_conflict
    ): vectric_language_codes
    "insert data into the table: \"vectric.licence_log\""
    insert_vectric_licence_log(
        "the rows to be inserted"
        objects: [vectric_licence_log_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_licence_log_on_conflict
    ): vectric_licence_log_mutation_response
    "insert a single row into the table: \"vectric.licence_log\""
    insert_vectric_licence_log_one(
        "the row to be inserted"
        object: vectric_licence_log_insert_input!,
        "on conflict condition"
        on_conflict: vectric_licence_log_on_conflict
    ): vectric_licence_log
    "insert data into the table: \"vectric.makerspace_requests\""
    insert_vectric_makerspace_requests(
        "the rows to be inserted"
        objects: [vectric_makerspace_requests_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_makerspace_requests_on_conflict
    ): vectric_makerspace_requests_mutation_response
    "insert data into the table: \"vectric.membership_invitation_status\""
    insert_vectric_membership_invitation_status(
        "the rows to be inserted"
        objects: [vectric_membership_invitation_status_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_membership_invitation_status_on_conflict
    ): vectric_membership_invitation_status_mutation_response
    "insert a single row into the table: \"vectric.membership_invitation_status\""
    insert_vectric_membership_invitation_status_one(
        "the row to be inserted"
        object: vectric_membership_invitation_status_insert_input!,
        "on conflict condition"
        on_conflict: vectric_membership_invitation_status_on_conflict
    ): vectric_membership_invitation_status
    "insert data into the table: \"vectric.membership_roles\""
    insert_vectric_membership_roles(
        "the rows to be inserted"
        objects: [vectric_membership_roles_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_membership_roles_on_conflict
    ): vectric_membership_roles_mutation_response
    "insert a single row into the table: \"vectric.membership_roles\""
    insert_vectric_membership_roles_one(
        "the row to be inserted"
        object: vectric_membership_roles_insert_input!,
        "on conflict condition"
        on_conflict: vectric_membership_roles_on_conflict
    ): vectric_membership_roles
    "insert data into the table: \"vectric.membership_status\""
    insert_vectric_membership_status(
        "the rows to be inserted"
        objects: [vectric_membership_status_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_membership_status_on_conflict
    ): vectric_membership_status_mutation_response
    "insert a single row into the table: \"vectric.membership_status\""
    insert_vectric_membership_status_one(
        "the row to be inserted"
        object: vectric_membership_status_insert_input!,
        "on conflict condition"
        on_conflict: vectric_membership_status_on_conflict
    ): vectric_membership_status
    "insert data into the table: \"vectric.oauth_client_details\""
    insert_vectric_oauth_client_details(
        "the rows to be inserted"
        objects: [vectric_oauth_client_details_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_oauth_client_details_on_conflict
    ): vectric_oauth_client_details_mutation_response
    "insert a single row into the table: \"vectric.oauth_client_details\""
    insert_vectric_oauth_client_details_one(
        "the row to be inserted"
        object: vectric_oauth_client_details_insert_input!,
        "on conflict condition"
        on_conflict: vectric_oauth_client_details_on_conflict
    ): vectric_oauth_client_details
    "insert data into the table: \"vectric.oem_detailed_products\""
    insert_vectric_oem_detailed_products(
        "the rows to be inserted"
        objects: [vectric_oem_detailed_products_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_oem_detailed_products_on_conflict
    ): vectric_oem_detailed_products_mutation_response
    "insert a single row into the table: \"vectric.oem_detailed_products\""
    insert_vectric_oem_detailed_products_one(
        "the row to be inserted"
        object: vectric_oem_detailed_products_insert_input!,
        "on conflict condition"
        on_conflict: vectric_oem_detailed_products_on_conflict
    ): vectric_oem_detailed_products
    "insert data into the table: \"vectric.oem_fastspring_item\""
    insert_vectric_oem_fastspring_item(
        "the rows to be inserted"
        objects: [vectric_oem_fastspring_item_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_oem_fastspring_item_on_conflict
    ): vectric_oem_fastspring_item_mutation_response
    "insert data into the table: \"vectric.oem_fastspring_item_bundle\""
    insert_vectric_oem_fastspring_item_bundle(
        "the rows to be inserted"
        objects: [vectric_oem_fastspring_item_bundle_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_oem_fastspring_item_bundle_on_conflict
    ): vectric_oem_fastspring_item_bundle_mutation_response
    "insert a single row into the table: \"vectric.oem_fastspring_item_bundle\""
    insert_vectric_oem_fastspring_item_bundle_one(
        "the row to be inserted"
        object: vectric_oem_fastspring_item_bundle_insert_input!,
        "on conflict condition"
        on_conflict: vectric_oem_fastspring_item_bundle_on_conflict
    ): vectric_oem_fastspring_item_bundle
    "insert a single row into the table: \"vectric.oem_fastspring_item\""
    insert_vectric_oem_fastspring_item_one(
        "the row to be inserted"
        object: vectric_oem_fastspring_item_insert_input!,
        "on conflict condition"
        on_conflict: vectric_oem_fastspring_item_on_conflict
    ): vectric_oem_fastspring_item
    "insert data into the table: \"vectric.oem_fastspring_order\""
    insert_vectric_oem_fastspring_order(
        "the rows to be inserted"
        objects: [vectric_oem_fastspring_order_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_oem_fastspring_order_on_conflict
    ): vectric_oem_fastspring_order_mutation_response
    "insert a single row into the table: \"vectric.oem_fastspring_order\""
    insert_vectric_oem_fastspring_order_one(
        "the row to be inserted"
        object: vectric_oem_fastspring_order_insert_input!,
        "on conflict condition"
        on_conflict: vectric_oem_fastspring_order_on_conflict
    ): vectric_oem_fastspring_order
    "insert data into the table: \"vectric.oem_invite_status\""
    insert_vectric_oem_invite_status(
        "the rows to be inserted"
        objects: [vectric_oem_invite_status_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_oem_invite_status_on_conflict
    ): vectric_oem_invite_status_mutation_response
    "insert a single row into the table: \"vectric.oem_invite_status\""
    insert_vectric_oem_invite_status_one(
        "the row to be inserted"
        object: vectric_oem_invite_status_insert_input!,
        "on conflict condition"
        on_conflict: vectric_oem_invite_status_on_conflict
    ): vectric_oem_invite_status
    "insert data into the table: \"vectric.oem_licence_allocation_type\""
    insert_vectric_oem_licence_allocation_type(
        "the rows to be inserted"
        objects: [vectric_oem_licence_allocation_type_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_oem_licence_allocation_type_on_conflict
    ): vectric_oem_licence_allocation_type_mutation_response
    "insert a single row into the table: \"vectric.oem_licence_allocation_type\""
    insert_vectric_oem_licence_allocation_type_one(
        "the row to be inserted"
        object: vectric_oem_licence_allocation_type_insert_input!,
        "on conflict condition"
        on_conflict: vectric_oem_licence_allocation_type_on_conflict
    ): vectric_oem_licence_allocation_type
    "insert data into the table: \"vectric.oem_products\""
    insert_vectric_oem_products(
        "the rows to be inserted"
        objects: [vectric_oem_products_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_oem_products_on_conflict
    ): vectric_oem_products_mutation_response
    "insert a single row into the table: \"vectric.oem_products\""
    insert_vectric_oem_products_one(
        "the row to be inserted"
        object: vectric_oem_products_insert_input!,
        "on conflict condition"
        on_conflict: vectric_oem_products_on_conflict
    ): vectric_oem_products
    "insert data into the table: \"vectric.organization_types\""
    insert_vectric_organization_types(
        "the rows to be inserted"
        objects: [vectric_organization_types_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_organization_types_on_conflict
    ): vectric_organization_types_mutation_response
    "insert a single row into the table: \"vectric.organization_types\""
    insert_vectric_organization_types_one(
        "the row to be inserted"
        object: vectric_organization_types_insert_input!,
        "on conflict condition"
        on_conflict: vectric_organization_types_on_conflict
    ): vectric_organization_types
    "insert data into the table: \"vectric.products_clipartcollection_links\""
    insert_vectric_products_clipartcollection_links(
        "the rows to be inserted"
        objects: [vectric_products_clipartcollection_links_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_products_clipartcollection_links_on_conflict
    ): vectric_products_clipartcollection_links_mutation_response
    "insert a single row into the table: \"vectric.products_clipartcollection_links\""
    insert_vectric_products_clipartcollection_links_one(
        "the row to be inserted"
        object: vectric_products_clipartcollection_links_insert_input!,
        "on conflict condition"
        on_conflict: vectric_products_clipartcollection_links_on_conflict
    ): vectric_products_clipartcollection_links
    "insert data into the table: \"vectric.products_enhancement_eligibility\""
    insert_vectric_products_enhancement_eligibility(
        "the rows to be inserted"
        objects: [vectric_products_enhancement_eligibility_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_products_enhancement_eligibility_on_conflict
    ): vectric_products_enhancement_eligibility_mutation_response
    "insert a single row into the table: \"vectric.products_enhancement_eligibility\""
    insert_vectric_products_enhancement_eligibility_one(
        "the row to be inserted"
        object: vectric_products_enhancement_eligibility_insert_input!,
        "on conflict condition"
        on_conflict: vectric_products_enhancement_eligibility_on_conflict
    ): vectric_products_enhancement_eligibility
    "insert data into the table: \"vectric.products_freeclipart\""
    insert_vectric_products_freeclipart(
        "the rows to be inserted"
        objects: [vectric_products_freeclipart_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_products_freeclipart_on_conflict
    ): vectric_products_freeclipart_mutation_response
    "insert a single row into the table: \"vectric.products_freeclipart\""
    insert_vectric_products_freeclipart_one(
        "the row to be inserted"
        object: vectric_products_freeclipart_insert_input!,
        "on conflict condition"
        on_conflict: vectric_products_freeclipart_on_conflict
    ): vectric_products_freeclipart
    "insert data into the table: \"vectric.products_fulfilments\""
    insert_vectric_products_fulfilments(
        "the rows to be inserted"
        objects: [vectric_products_fulfilments_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_products_fulfilments_on_conflict
    ): vectric_products_fulfilments_mutation_response
    "insert a single row into the table: \"vectric.products_fulfilments\""
    insert_vectric_products_fulfilments_one(
        "the row to be inserted"
        object: vectric_products_fulfilments_insert_input!,
        "on conflict condition"
        on_conflict: vectric_products_fulfilments_on_conflict
    ): vectric_products_fulfilments
    "insert data into the table: \"vectric.products_fulfilmenttypes\""
    insert_vectric_products_fulfilmenttypes(
        "the rows to be inserted"
        objects: [vectric_products_fulfilmenttypes_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_products_fulfilmenttypes_on_conflict
    ): vectric_products_fulfilmenttypes_mutation_response
    "insert a single row into the table: \"vectric.products_fulfilmenttypes\""
    insert_vectric_products_fulfilmenttypes_one(
        "the row to be inserted"
        object: vectric_products_fulfilmenttypes_insert_input!,
        "on conflict condition"
        on_conflict: vectric_products_fulfilmenttypes_on_conflict
    ): vectric_products_fulfilmenttypes
    "insert data into the table: \"vectric.products_product_fulfilments\""
    insert_vectric_products_product_fulfilments(
        "the rows to be inserted"
        objects: [vectric_products_product_fulfilments_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_products_product_fulfilments_on_conflict
    ): vectric_products_product_fulfilments_mutation_response
    "insert a single row into the table: \"vectric.products_product_fulfilments\""
    insert_vectric_products_product_fulfilments_one(
        "the row to be inserted"
        object: vectric_products_product_fulfilments_insert_input!,
        "on conflict condition"
        on_conflict: vectric_products_product_fulfilments_on_conflict
    ): vectric_products_product_fulfilments
    "insert data into the table: \"vectric.products_product_licence_type\""
    insert_vectric_products_product_licence_type(
        "the rows to be inserted"
        objects: [vectric_products_product_licence_type_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_products_product_licence_type_on_conflict
    ): vectric_products_product_licence_type_mutation_response
    "insert a single row into the table: \"vectric.products_product_licence_type\""
    insert_vectric_products_product_licence_type_one(
        "the row to be inserted"
        object: vectric_products_product_licence_type_insert_input!,
        "on conflict condition"
        on_conflict: vectric_products_product_licence_type_on_conflict
    ): vectric_products_product_licence_type
    "insert data into the table: \"vectric.sales_customerupdates\""
    insert_vectric_sales_customerupdates(
        "the rows to be inserted"
        objects: [vectric_sales_customerupdates_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_sales_customerupdates_on_conflict
    ): vectric_sales_customerupdates_mutation_response
    "insert a single row into the table: \"vectric.sales_customerupdates\""
    insert_vectric_sales_customerupdates_one(
        "the row to be inserted"
        object: vectric_sales_customerupdates_insert_input!,
        "on conflict condition"
        on_conflict: vectric_sales_customerupdates_on_conflict
    ): vectric_sales_customerupdates
    "insert data into the table: \"vectric.sales_oemlicences\""
    insert_vectric_sales_oemlicences(
        "the rows to be inserted"
        objects: [vectric_sales_oemlicences_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_sales_oemlicences_on_conflict
    ): vectric_sales_oemlicences_mutation_response
    "insert a single row into the table: \"vectric.sales_oemlicences\""
    insert_vectric_sales_oemlicences_one(
        "the row to be inserted"
        object: vectric_sales_oemlicences_insert_input!,
        "on conflict condition"
        on_conflict: vectric_sales_oemlicences_on_conflict
    ): vectric_sales_oemlicences
    "insert data into the table: \"vectric.sales_salesitemproduct_status\""
    insert_vectric_sales_salesitemproduct_status(
        "the rows to be inserted"
        objects: [vectric_sales_salesitemproduct_status_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_sales_salesitemproduct_status_on_conflict
    ): vectric_sales_salesitemproduct_status_mutation_response
    "insert a single row into the table: \"vectric.sales_salesitemproduct_status\""
    insert_vectric_sales_salesitemproduct_status_one(
        "the row to be inserted"
        object: vectric_sales_salesitemproduct_status_insert_input!,
        "on conflict condition"
        on_conflict: vectric_sales_salesitemproduct_status_on_conflict
    ): vectric_sales_salesitemproduct_status
    "insert data into the table: \"vectric.security_group_authorities\""
    insert_vectric_security_group_authorities(
        "the rows to be inserted"
        objects: [vectric_security_group_authorities_insert_input!]!
    ): vectric_security_group_authorities_mutation_response
    "insert a single row into the table: \"vectric.security_group_authorities\""
    insert_vectric_security_group_authorities_one(
        "the row to be inserted"
        object: vectric_security_group_authorities_insert_input!
    ): vectric_security_group_authorities
    "insert data into the table: \"vectric.subscription_contract_status\""
    insert_vectric_subscription_contract_status(
        "the rows to be inserted"
        objects: [vectric_subscription_contract_status_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_subscription_contract_status_on_conflict
    ): vectric_subscription_contract_status_mutation_response
    "insert a single row into the table: \"vectric.subscription_contract_status\""
    insert_vectric_subscription_contract_status_one(
        "the row to be inserted"
        object: vectric_subscription_contract_status_insert_input!,
        "on conflict condition"
        on_conflict: vectric_subscription_contract_status_on_conflict
    ): vectric_subscription_contract_status
    "insert data into the table: \"vectric.subscription_contracts\""
    insert_vectric_subscription_contracts(
        "the rows to be inserted"
        objects: [vectric_subscription_contracts_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_subscription_contracts_on_conflict
    ): vectric_subscription_contracts_mutation_response
    "insert a single row into the table: \"vectric.subscription_contracts\""
    insert_vectric_subscription_contracts_one(
        "the row to be inserted"
        object: vectric_subscription_contracts_insert_input!,
        "on conflict condition"
        on_conflict: vectric_subscription_contracts_on_conflict
    ): vectric_subscription_contracts
    "insert data into the table: \"vectric.subscription_events\""
    insert_vectric_subscription_events(
        "the rows to be inserted"
        objects: [vectric_subscription_events_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_subscription_events_on_conflict
    ): vectric_subscription_events_mutation_response
    "insert a single row into the table: \"vectric.subscription_events\""
    insert_vectric_subscription_events_one(
        "the row to be inserted"
        object: vectric_subscription_events_insert_input!,
        "on conflict condition"
        on_conflict: vectric_subscription_events_on_conflict
    ): vectric_subscription_events
    "insert data into the table: \"vectric.version_code\""
    insert_vectric_version_code(
        "the rows to be inserted"
        objects: [vectric_version_code_insert_input!]!,
        "on conflict condition"
        on_conflict: vectric_version_code_on_conflict
    ): vectric_version_code_mutation_response
    "insert a single row into the table: \"vectric.version_code\""
    insert_vectric_version_code_one(
        "the row to be inserted"
        object: vectric_version_code_insert_input!,
        "on conflict condition"
        on_conflict: vectric_version_code_on_conflict
    ): vectric_version_code
    oemSecureFsRequest(partnerId: bigint!, request: [OemFSRequest!]!, requestId: String!): OemFastspringSecureRequestOutput
    organizationAddNewMember(data: OrganizationAddNewMemberRequest): OrganizationAddNewMemberOutput
    organizationEditMember(data: OrganizationEditMemberRequest): OrganizationEditMemberOutput
    passwordReset(password: String!, token: String!): PasswordResetOutput
    processOemStaffInvitation(customerId: bigint!, staffId: bigint!, status: bigint!): ProcessOemStaffInvitationOutput
    registerInvite(data: RegisterInviteInput!): RegisterInvite
    removeMembership(membershipId: Int!): RemoveMembershipOutput
    removeMembershipInvitation(membershipId: Int!): RemoveMembershipInvitationOutput
    removePartnerMember(memberId: bigint!, partnerId: bigint!): RemovePartnerMemberOutput
    secureFSItems(toDiscount: SecureFSItemsInput!): SecureFSItemsOutput
    sendEmailVerification(email: String!): SendEmailVerificationOutput
    sendLicenceAllocationEmail(data: sendLicenceAllocationEmailRequest!): SendLicenceAllocationEmailResponse
    signUp(data: SignUpInput!): SignUpOutput
    transferOrderItemProduct(data: TransferInput!): SampleOutput
    unassignItem(data: UnassignItemInput!): UnassignItemOutput
    "update data of the table: \"vectric.allocation_summary\""
    updateAllocationSummaries(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_allocation_summary_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_allocation_summary_set_input,
        "filter the rows which have to be updated"
        where: vectric_allocation_summary_bool_exp!
    ): vectric_allocation_summary_mutation_response
    "update single row of the table: \"vectric.allocation_summary\""
    updateAllocationSummaryById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_allocation_summary_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_allocation_summary_set_input,
        pk_columns: vectric_allocation_summary_pk_columns_input!
    ): vectric_allocation_summary
    "update single row of the table: \"vectric.owned_item_assignments\""
    updateAssignment(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_owned_item_assignments_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_owned_item_assignments_set_input,
        pk_columns: vectric_owned_item_assignments_pk_columns_input!
    ): vectric_owned_item_assignments
    "update data of the table: \"vectric.owned_item_assignments\""
    updateAssignments(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_owned_item_assignments_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_owned_item_assignments_set_input,
        "filter the rows which have to be updated"
        where: vectric_owned_item_assignments_bool_exp!
    ): vectric_owned_item_assignments_mutation_response
    "update data of the table: \"vectric.countries\""
    updateCountries(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_countries_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_countries_set_input,
        "filter the rows which have to be updated"
        where: vectric_countries_bool_exp!
    ): vectric_countries_mutation_response
    "update single row of the table: \"vectric.countries\""
    updateCountryById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_countries_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_countries_set_input,
        pk_columns: vectric_countries_pk_columns_input!
    ): vectric_countries
    "update data of the table: \"vectric.sales_customers\""
    updateCustomer(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_sales_customers_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_sales_customers_set_input,
        "filter the rows which have to be updated"
        where: vectric_sales_customers_bool_exp!
    ): vectric_sales_customers_mutation_response
    "update single row of the table: \"vectric.customer_area_file\""
    updateCustomerAreaFileByPk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_customer_area_file_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_customer_area_file_set_input,
        pk_columns: vectric_customer_area_file_pk_columns_input!
    ): vectric_customer_area_file
    "update single row of the table: \"vectric.sales_customers\""
    updateCustomerById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_sales_customers_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_sales_customers_set_input,
        pk_columns: vectric_sales_customers_pk_columns_input!
    ): vectric_sales_customers
    "update single row of the table: \"vectric.sales_customer_downloads\""
    updateCustomerDownloadById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_sales_customer_downloads_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_sales_customer_downloads_set_input,
        pk_columns: vectric_sales_customer_downloads_pk_columns_input!
    ): vectric_sales_customer_downloads
    "update data of the table: \"vectric.sales_customer_downloads\""
    updateCustomerDownloads(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_sales_customer_downloads_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_sales_customer_downloads_set_input,
        "filter the rows which have to be updated"
        where: vectric_sales_customer_downloads_bool_exp!
    ): vectric_sales_customer_downloads_mutation_response
    "update single row of the table: \"vectric.customer_responses\""
    updateCustomerResponseById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_customer_responses_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_customer_responses_set_input,
        pk_columns: vectric_customer_responses_pk_columns_input!
    ): vectric_customer_responses
    "update data of the table: \"vectric.customer_responses\""
    updateCustomerResponses(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_customer_responses_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_customer_responses_set_input,
        "filter the rows which have to be updated"
        where: vectric_customer_responses_bool_exp!
    ): vectric_customer_responses_mutation_response
    "update single row of the table: \"vectric.sales_velocitytemplate\""
    updateEmailTemplate(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_sales_velocitytemplate_set_input,
        pk_columns: vectric_sales_velocitytemplate_pk_columns_input!
    ): vectric_sales_velocitytemplate
    "update data of the table: \"vectric.sales_velocitytemplate\""
    updateEmailTemplates(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_sales_velocitytemplate_set_input,
        "filter the rows which have to be updated"
        where: vectric_sales_velocitytemplate_bool_exp!
    ): vectric_sales_velocitytemplate_mutation_response
    "update single row of the table: \"vectric.entitled_products\""
    updateEntitleProduct(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_entitled_products_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_entitled_products_set_input,
        pk_columns: vectric_entitled_products_pk_columns_input!
    ): vectric_entitled_products
    "update data of the table: \"vectric.entitled_products\""
    updateEntitledProducts(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_entitled_products_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_entitled_products_set_input,
        "filter the rows which have to be updated"
        where: vectric_entitled_products_bool_exp!
    ): vectric_entitled_products_mutation_response
    "update single row of the table: \"vectric.entitlements\""
    updateEntitlement(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_entitlements_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_entitlements_set_input,
        pk_columns: vectric_entitlements_pk_columns_input!
    ): vectric_entitlements
    "update single row of the table: \"vectric.entitlement_licences\""
    updateEntitlementLicence(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_entitlement_licences_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_entitlement_licences_set_input,
        pk_columns: vectric_entitlement_licences_pk_columns_input!
    ): vectric_entitlement_licences
    "update data of the table: \"vectric.entitlement_licences\""
    updateEntitlementLicences(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_entitlement_licences_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_entitlement_licences_set_input,
        "filter the rows which have to be updated"
        where: vectric_entitlement_licences_bool_exp!
    ): vectric_entitlement_licences_mutation_response
    "update data of the table: \"vectric.entitlements\""
    updateEntitlements(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_entitlements_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_entitlements_set_input,
        "filter the rows which have to be updated"
        where: vectric_entitlements_bool_exp!
    ): vectric_entitlements_mutation_response
    "update data of the table: \"vectric.oem_eval_request\""
    updateEvalRequest(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_eval_request_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_eval_request_set_input,
        "filter the rows which have to be updated"
        where: vectric_oem_eval_request_bool_exp!
    ): vectric_oem_eval_request_mutation_response
    "update single row of the table: \"vectric.oem_eval_request\""
    updateEvalRequestById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_eval_request_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_eval_request_set_input,
        pk_columns: vectric_oem_eval_request_pk_columns_input!
    ): vectric_oem_eval_request
    "update single row of the table: \"vectric.free_clipart_tokens\""
    updateFreeClipartTokenByPk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_free_clipart_tokens_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_free_clipart_tokens_set_input,
        pk_columns: vectric_free_clipart_tokens_pk_columns_input!
    ): vectric_free_clipart_tokens
    "update single row of the table: \"vectric.organization_licence_scope\""
    updateLicenceScope(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_organization_licence_scope_set_input,
        pk_columns: vectric_organization_licence_scope_pk_columns_input!
    ): vectric_organization_licence_scope
    "update data of the table: \"vectric.organization_licence_scope\""
    updateLicenceScopes(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_organization_licence_scope_set_input,
        "filter the rows which have to be updated"
        where: vectric_organization_licence_scope_bool_exp!
    ): vectric_organization_licence_scope_mutation_response
    "update single row of the table: \"vectric.memberships\""
    updateMembershipById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_memberships_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_memberships_set_input,
        pk_columns: vectric_memberships_pk_columns_input!
    ): vectric_memberships
    "update single row of the table: \"vectric.membership_invitations\""
    updateMembershipInvitationById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_membership_invitations_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_membership_invitations_set_input,
        pk_columns: vectric_membership_invitations_pk_columns_input!
    ): vectric_membership_invitations
    "update data of the table: \"vectric.membership_invitations\""
    updateMembershipInvitations(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_membership_invitations_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_membership_invitations_set_input,
        "filter the rows which have to be updated"
        where: vectric_membership_invitations_bool_exp!
    ): vectric_membership_invitations_mutation_response
    "update data of the table: \"vectric.memberships\""
    updateMemberships(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_memberships_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_memberships_set_input,
        "filter the rows which have to be updated"
        where: vectric_memberships_bool_exp!
    ): vectric_memberships_mutation_response
    "update data of the table: \"vectric.oem_allocation_emails\""
    updateOemAllocationEmails(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_allocation_emails_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_allocation_emails_set_input,
        "filter the rows which have to be updated"
        where: vectric_oem_allocation_emails_bool_exp!
    ): vectric_oem_allocation_emails_mutation_response
    "update data of the table: \"vectric.oem_partners\""
    updateOemPartner(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_partners_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_partners_set_input,
        "filter the rows which have to be updated"
        where: vectric_oem_partners_bool_exp!
    ): vectric_oem_partners_mutation_response
    "update single row of the table: \"vectric.oem_partners\""
    updateOemPartnerById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_partners_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_partners_set_input,
        pk_columns: vectric_oem_partners_pk_columns_input!
    ): vectric_oem_partners
    "update single row of the table: \"vectric.oem_staff_customer\""
    updateOemStaffCustomerById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_staff_customer_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_staff_customer_set_input,
        pk_columns: vectric_oem_staff_customer_pk_columns_input!
    ): vectric_oem_staff_customer
    "update data of the table: \"vectric.oem_staff_customer\""
    updateOemStaffCustomers(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_staff_customer_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_staff_customer_set_input,
        "filter the rows which have to be updated"
        where: vectric_oem_staff_customer_bool_exp!
    ): vectric_oem_staff_customer_mutation_response
    "update data of the table: \"vectric.sales_orders\""
    updateOrder(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_sales_orders_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_sales_orders_set_input,
        "filter the rows which have to be updated"
        where: vectric_sales_orders_bool_exp!
    ): vectric_sales_orders_mutation_response
    "update single row of the table: \"vectric.sales_orders\""
    updateOrderById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_sales_orders_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_sales_orders_set_input,
        pk_columns: vectric_sales_orders_pk_columns_input!
    ): vectric_sales_orders
    "update single row of the table: \"vectric.organizations\""
    updateOrganization(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_organizations_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_organizations_set_input,
        pk_columns: vectric_organizations_pk_columns_input!
    ): vectric_organizations
    "update single row of the table: \"vectric.organization_audit\""
    updateOrganizationAuditById(
        "append existing jsonb value of filtered columns with new jsonb value"
        _append: vectric_organization_audit_append_input,
        "delete the field or element with specified path (for JSON arrays, negative integers count from the end)"
        _delete_at_path: vectric_organization_audit_delete_at_path_input,
        "delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"
        _delete_elem: vectric_organization_audit_delete_elem_input,
        "delete key/value pair or string element. key/value pairs are matched based on their key value"
        _delete_key: vectric_organization_audit_delete_key_input,
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_organization_audit_inc_input,
        "prepend existing jsonb value of filtered columns with new jsonb value"
        _prepend: vectric_organization_audit_prepend_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_organization_audit_set_input,
        pk_columns: vectric_organization_audit_pk_columns_input!
    ): vectric_organization_audit
    "update data of the table: \"vectric.organization_audit\""
    updateOrganizationAudits(
        "append existing jsonb value of filtered columns with new jsonb value"
        _append: vectric_organization_audit_append_input,
        "delete the field or element with specified path (for JSON arrays, negative integers count from the end)"
        _delete_at_path: vectric_organization_audit_delete_at_path_input,
        "delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"
        _delete_elem: vectric_organization_audit_delete_elem_input,
        "delete key/value pair or string element. key/value pairs are matched based on their key value"
        _delete_key: vectric_organization_audit_delete_key_input,
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_organization_audit_inc_input,
        "prepend existing jsonb value of filtered columns with new jsonb value"
        _prepend: vectric_organization_audit_prepend_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_organization_audit_set_input,
        "filter the rows which have to be updated"
        where: vectric_organization_audit_bool_exp!
    ): vectric_organization_audit_mutation_response
    "update single row of the table: \"vectric.organization_orders\""
    updateOrganizationOrder(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_organization_orders_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_organization_orders_set_input,
        pk_columns: vectric_organization_orders_pk_columns_input!
    ): vectric_organization_orders
    "update single row of the table: \"vectric.organization_order_items\""
    updateOrganizationOrderItem(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_organization_order_items_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_organization_order_items_set_input,
        pk_columns: vectric_organization_order_items_pk_columns_input!
    ): vectric_organization_order_items
    "update data of the table: \"vectric.organization_order_items\""
    updateOrganizationOrderItems(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_organization_order_items_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_organization_order_items_set_input,
        "filter the rows which have to be updated"
        where: vectric_organization_order_items_bool_exp!
    ): vectric_organization_order_items_mutation_response
    "update data of the table: \"vectric.organization_orders\""
    updateOrganizationOrders(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_organization_orders_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_organization_orders_set_input,
        "filter the rows which have to be updated"
        where: vectric_organization_orders_bool_exp!
    ): vectric_organization_orders_mutation_response
    "update data of the table: \"vectric.organizations\""
    updateOrganizations(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_organizations_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_organizations_set_input,
        "filter the rows which have to be updated"
        where: vectric_organizations_bool_exp!
    ): vectric_organizations_mutation_response
    "update single row of the table: \"vectric.owned_items\""
    updateOwnedItem(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_owned_items_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_owned_items_set_input,
        pk_columns: vectric_owned_items_pk_columns_input!
    ): vectric_owned_items
    "update data of the table: \"vectric.owned_items\""
    updateOwnedItems(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_owned_items_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_owned_items_set_input,
        "filter the rows which have to be updated"
        where: vectric_owned_items_bool_exp!
    ): vectric_owned_items_mutation_response
    "update single row of the table: \"vectric.owned_products\""
    updateOwnedProduct(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_owned_products_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_owned_products_set_input,
        pk_columns: vectric_owned_products_pk_columns_input!
    ): vectric_owned_products
    "update data of the table: \"vectric.owned_products\""
    updateOwnedProducts(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_owned_products_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_owned_products_set_input,
        "filter the rows which have to be updated"
        where: vectric_owned_products_bool_exp!
    ): vectric_owned_products_mutation_response
    "update single row of the table: \"vectric.products_products\""
    updateProductById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_products_products_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_products_set_input,
        pk_columns: vectric_products_products_pk_columns_input!
    ): vectric_products_products
    "update single row of the table: \"vectric.products_producttype\""
    updateProductTypeById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_products_producttype_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_producttype_set_input,
        pk_columns: vectric_products_producttype_pk_columns_input!
    ): vectric_products_producttype
    "update data of the table: \"vectric.products_producttype\""
    updateProductTypes(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_products_producttype_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_producttype_set_input,
        "filter the rows which have to be updated"
        where: vectric_products_producttype_bool_exp!
    ): vectric_products_producttype_mutation_response
    "update single row of the table: \"vectric.products_upgrade_eligibility\""
    updateProductUpgradeEligibility(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_products_upgrade_eligibility_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_upgrade_eligibility_set_input,
        pk_columns: vectric_products_upgrade_eligibility_pk_columns_input!
    ): vectric_products_upgrade_eligibility
    "update data of the table: \"vectric.products_products\""
    updateProducts(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_products_products_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_products_set_input,
        "filter the rows which have to be updated"
        where: vectric_products_products_bool_exp!
    ): vectric_products_products_mutation_response
    "update data of the table: \"vectric.products_upgrade_eligibility\""
    updateProductsUpgradeEligibility(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_products_upgrade_eligibility_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_upgrade_eligibility_set_input,
        "filter the rows which have to be updated"
        where: vectric_products_upgrade_eligibility_bool_exp!
    ): vectric_products_upgrade_eligibility_mutation_response
    "update single row of the table: \"vectric.oem_purchase_options\""
    updatePurchaseOptionByOptionId(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_purchase_options_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_purchase_options_set_input,
        pk_columns: vectric_oem_purchase_options_pk_columns_input!
    ): vectric_oem_purchase_options
    "update data of the table: \"vectric.oem_purchase_options\""
    updatePurchaseOptions(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_purchase_options_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_purchase_options_set_input,
        "filter the rows which have to be updated"
        where: vectric_oem_purchase_options_bool_exp!
    ): vectric_oem_purchase_options_mutation_response
    "update single row of the table: \"vectric.questions\""
    updateQuestionById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_questions_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_questions_set_input,
        pk_columns: vectric_questions_pk_columns_input!
    ): vectric_questions
    "update data of the table: \"vectric.questions\""
    updateQuestions(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_questions_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_questions_set_input,
        "filter the rows which have to be updated"
        where: vectric_questions_bool_exp!
    ): vectric_questions_mutation_response
    "update single row of the table: \"vectric.responses\""
    updateResponseById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_responses_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_responses_set_input,
        pk_columns: vectric_responses_pk_columns_input!
    ): vectric_responses
    "update data of the table: \"vectric.responses\""
    updateResponses(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_responses_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_responses_set_input,
        "filter the rows which have to be updated"
        where: vectric_responses_bool_exp!
    ): vectric_responses_mutation_response
    "update single row of the table: \"vectric.saleable_products\""
    updateSaleableProduct(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_saleable_products_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_saleable_products_set_input,
        pk_columns: vectric_saleable_products_pk_columns_input!
    ): vectric_saleable_products
    "update data of the table: \"vectric.saleable_products\""
    updateSaleableProducts(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_saleable_products_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_saleable_products_set_input,
        "filter the rows which have to be updated"
        where: vectric_saleable_products_bool_exp!
    ): vectric_saleable_products_mutation_response
    "update single row of the table: \"vectric.sales_salesitems\""
    updateSalesItemById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_sales_salesitems_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_sales_salesitems_set_input,
        pk_columns: vectric_sales_salesitems_pk_columns_input!
    ): vectric_sales_salesitems
    "update data of the table: \"vectric.sales_salesitem_products\""
    updateSalesItemProduces(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_sales_salesitem_products_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_sales_salesitem_products_set_input,
        "filter the rows which have to be updated"
        where: vectric_sales_salesitem_products_bool_exp!
    ): vectric_sales_salesitem_products_mutation_response
    "update single row of the table: \"vectric.sales_salesitem_products\""
    updateSalesItemProductById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_sales_salesitem_products_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_sales_salesitem_products_set_input,
        pk_columns: vectric_sales_salesitem_products_pk_columns_input!
    ): vectric_sales_salesitem_products
    "update data of the table: \"vectric.sales_salesitems\""
    updateSalesItems(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_sales_salesitems_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_sales_salesitems_set_input,
        "filter the rows which have to be updated"
        where: vectric_sales_salesitems_bool_exp!
    ): vectric_sales_salesitems_mutation_response
    "update data of the table: \"vectric.sales_oem_bundles\""
    updateSalesOemBundle(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_sales_oem_bundles_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_sales_oem_bundles_set_input,
        "filter the rows which have to be updated"
        where: vectric_sales_oem_bundles_bool_exp!
    ): vectric_sales_oem_bundles_mutation_response
    "update single row of the table: \"vectric.sales_oem_bundles\""
    updateSalesOemBundleById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_sales_oem_bundles_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_sales_oem_bundles_set_input,
        pk_columns: vectric_sales_oem_bundles_pk_columns_input!
    ): vectric_sales_oem_bundles
    "update data of the table: \"vectric.scheduled_emails\""
    updateScheduledEmails(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_scheduled_emails_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_scheduled_emails_set_input,
        "filter the rows which have to be updated"
        where: vectric_scheduled_emails_bool_exp!
    ): vectric_scheduled_emails_mutation_response
    "update single row of the table: \"vectric.scheduled_emails\""
    updateScheduledEmailsById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_scheduled_emails_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_scheduled_emails_set_input,
        pk_columns: vectric_scheduled_emails_pk_columns_input!
    ): vectric_scheduled_emails
    "update single row of the table: \"vectric.security_users\""
    updateSecurityUserByPk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_security_users_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_security_users_set_input,
        pk_columns: vectric_security_users_pk_columns_input!
    ): vectric_security_users
    "update data of the table: \"vectric.security_users\""
    updateSecurityUsers(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_security_users_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_security_users_set_input,
        "filter the rows which have to be updated"
        where: vectric_security_users_bool_exp!
    ): vectric_security_users_mutation_response
    "update single row of the table: \"vectric.linkshortener_links\""
    updateShortLinkByHash(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_linkshortener_links_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_linkshortener_links_set_input,
        pk_columns: vectric_linkshortener_links_pk_columns_input!
    ): vectric_linkshortener_links
    "update data of the table: \"vectric.linkshortener_links\""
    updateShortLinks(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_linkshortener_links_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_linkshortener_links_set_input,
        "filter the rows which have to be updated"
        where: vectric_linkshortener_links_bool_exp!
    ): vectric_linkshortener_links_mutation_response
    "update single row of the table: \"vectric.site_options\""
    updateSiteOptionById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_site_options_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_site_options_set_input,
        pk_columns: vectric_site_options_pk_columns_input!
    ): vectric_site_options
    "update single row of the table: \"vectric.site_option_location\""
    updateSiteOptionLocationById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_site_option_location_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_site_option_location_set_input,
        pk_columns: vectric_site_option_location_pk_columns_input!
    ): vectric_site_option_location
    "update data of the table: \"vectric.site_option_location\""
    updateSiteOptionLocations(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_site_option_location_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_site_option_location_set_input,
        "filter the rows which have to be updated"
        where: vectric_site_option_location_bool_exp!
    ): vectric_site_option_location_mutation_response
    "update data of the table: \"vectric.site_options\""
    updateSiteOptions(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_site_options_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_site_options_set_input,
        "filter the rows which have to be updated"
        where: vectric_site_options_bool_exp!
    ): vectric_site_options_mutation_response
    "update single row of the table: \"vectric.toolpath_saver_token\""
    updateToolpathSaverTokenById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_toolpath_saver_token_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_toolpath_saver_token_set_input,
        pk_columns: vectric_toolpath_saver_token_pk_columns_input!
    ): vectric_toolpath_saver_token
    "update data of the table: \"vectric.toolpath_saver_token\""
    updateToolpathSaverTokens(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_toolpath_saver_token_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_toolpath_saver_token_set_input,
        "filter the rows which have to be updated"
        where: vectric_toolpath_saver_token_bool_exp!
    ): vectric_toolpath_saver_token_mutation_response
    "update single row of the table: \"vectric.trial_order\""
    updateTrialOrderById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_trial_order_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_trial_order_set_input,
        pk_columns: vectric_trial_order_pk_columns_input!
    ): vectric_trial_order
    "update data of the table: \"vectric.trial_order\""
    updateTrialOrders(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_trial_order_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_trial_order_set_input,
        "filter the rows which have to be updated"
        where: vectric_trial_order_bool_exp!
    ): vectric_trial_order_mutation_response
    "update data of the table: \"vectric.update_requests\""
    updateUpdateRequests(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_update_requests_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_update_requests_set_input,
        "filter the rows which have to be updated"
        where: vectric_update_requests_bool_exp!
    ): vectric_update_requests_mutation_response
    "update single row of the table: \"vectric.upgrades_feature\""
    updateUpgradeFeatureById(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_upgrades_feature_set_input,
        pk_columns: vectric_upgrades_feature_pk_columns_input!
    ): vectric_upgrades_feature
    "update data of the table: \"vectric.upgrades_feature\""
    updateUpgradeFeatures(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_upgrades_feature_set_input,
        "filter the rows which have to be updated"
        where: vectric_upgrades_feature_bool_exp!
    ): vectric_upgrades_feature_mutation_response
    "update single row of the table: \"vectric.upgrades_product_type_feature\""
    updateUpgradeProductTypeFeatureById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_upgrades_product_type_feature_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_upgrades_product_type_feature_set_input,
        pk_columns: vectric_upgrades_product_type_feature_pk_columns_input!
    ): vectric_upgrades_product_type_feature
    "update data of the table: \"vectric.upgrades_product_type_feature\""
    updateUpgradeProductTypeFeatures(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_upgrades_product_type_feature_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_upgrades_product_type_feature_set_input,
        "filter the rows which have to be updated"
        where: vectric_upgrades_product_type_feature_bool_exp!
    ): vectric_upgrades_product_type_feature_mutation_response
    "update single row of the table: \"vectric.upgrades_version_feature\""
    updateUpgradeVersionFeatureById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_upgrades_version_feature_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_upgrades_version_feature_set_input,
        pk_columns: vectric_upgrades_version_feature_pk_columns_input!
    ): vectric_upgrades_version_feature
    "update data of the table: \"vectric.upgrades_version_feature\""
    updateUpgradeVersionFeatures(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_upgrades_version_feature_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_upgrades_version_feature_set_input,
        "filter the rows which have to be updated"
        where: vectric_upgrades_version_feature_bool_exp!
    ): vectric_upgrades_version_feature_mutation_response
    "update single row of the table: \"vectric.usergroup_2019_attendees\""
    updateUserGroupAttendeeById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_usergroup_2019_attendees_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_usergroup_2019_attendees_set_input,
        pk_columns: vectric_usergroup_2019_attendees_pk_columns_input!
    ): vectric_usergroup_2019_attendees
    "update data of the table: \"vectric.usergroup_2019_attendees\""
    updateUserGroupAttendees(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_usergroup_2019_attendees_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_usergroup_2019_attendees_set_input,
        "filter the rows which have to be updated"
        where: vectric_usergroup_2019_attendees_bool_exp!
    ): vectric_usergroup_2019_attendees_mutation_response
    "update data of the table: \"vectric.usergroup_2019_waitlist\""
    updateUserGroupWaitingListEntries(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_usergroup_2019_waitlist_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_usergroup_2019_waitlist_set_input,
        "filter the rows which have to be updated"
        where: vectric_usergroup_2019_waitlist_bool_exp!
    ): vectric_usergroup_2019_waitlist_mutation_response
    "update single row of the table: \"vectric.usergroup_2019_waitlist\""
    updateUserGroupWaitingListEntryById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_usergroup_2019_waitlist_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_usergroup_2019_waitlist_set_input,
        pk_columns: vectric_usergroup_2019_waitlist_pk_columns_input!
    ): vectric_usergroup_2019_waitlist
    "update single row of the table: \"vectric.security_userinvitations\""
    updateUserInvitationByToken(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_security_userinvitations_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_security_userinvitations_set_input,
        pk_columns: vectric_security_userinvitations_pk_columns_input!
    ): vectric_security_userinvitations
    "update single row of the table: \"vectric.products_versioncodes\""
    updateVersionCodeById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_products_versioncodes_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_versioncodes_set_input,
        pk_columns: vectric_products_versioncodes_pk_columns_input!
    ): vectric_products_versioncodes
    "update data of the table: \"vectric.products_versioncodes\""
    updateVersionCodes(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_products_versioncodes_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_versioncodes_set_input,
        "filter the rows which have to be updated"
        where: vectric_products_versioncodes_bool_exp!
    ): vectric_products_versioncodes_mutation_response
    "update single row of the table: \"vectric.customer_zd_uploads\""
    updateZendeskUploadById(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_customer_zd_uploads_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_customer_zd_uploads_set_input,
        pk_columns: vectric_customer_zd_uploads_pk_columns_input!
    ): vectric_customer_zd_uploads
    "update data of the table: \"vectric.customer_zd_uploads\""
    updateZendeskUploads(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_customer_zd_uploads_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_customer_zd_uploads_set_input,
        "filter the rows which have to be updated"
        where: vectric_customer_zd_uploads_bool_exp!
    ): vectric_customer_zd_uploads_mutation_response
    "update data of the table: \"vectric.allocatable_bundles\""
    update_vectric_allocatable_bundles(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_allocatable_bundles_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_allocatable_bundles_set_input,
        "filter the rows which have to be updated"
        where: vectric_allocatable_bundles_bool_exp!
    ): vectric_allocatable_bundles_mutation_response
    "update data of the table: \"vectric.allocated_bundles\""
    update_vectric_allocated_bundles(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_allocated_bundles_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_allocated_bundles_set_input,
        "filter the rows which have to be updated"
        where: vectric_allocated_bundles_bool_exp!
    ): vectric_allocated_bundles_mutation_response
    "update data of the table: \"vectric.allocation_summary_file_type\""
    update_vectric_allocation_summary_file_type(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_allocation_summary_file_type_set_input,
        "filter the rows which have to be updated"
        where: vectric_allocation_summary_file_type_bool_exp!
    ): vectric_allocation_summary_file_type_mutation_response
    "update single row of the table: \"vectric.allocation_summary_file_type\""
    update_vectric_allocation_summary_file_type_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_allocation_summary_file_type_set_input,
        pk_columns: vectric_allocation_summary_file_type_pk_columns_input!
    ): vectric_allocation_summary_file_type
    "update data of the table: \"vectric.continents\""
    update_vectric_continents(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_continents_set_input,
        "filter the rows which have to be updated"
        where: vectric_continents_bool_exp!
    ): vectric_continents_mutation_response
    "update single row of the table: \"vectric.continents\""
    update_vectric_continents_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_continents_set_input,
        pk_columns: vectric_continents_pk_columns_input!
    ): vectric_continents
    "update data of the table: \"vectric.customer_area\""
    update_vectric_customer_area(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_customer_area_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_customer_area_set_input,
        "filter the rows which have to be updated"
        where: vectric_customer_area_bool_exp!
    ): vectric_customer_area_mutation_response
    "update single row of the table: \"vectric.customer_area\""
    update_vectric_customer_area_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_customer_area_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_customer_area_set_input,
        pk_columns: vectric_customer_area_pk_columns_input!
    ): vectric_customer_area
    "update data of the table: \"vectric.customer_area_file\""
    update_vectric_customer_area_file(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_customer_area_file_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_customer_area_file_set_input,
        "filter the rows which have to be updated"
        where: vectric_customer_area_file_bool_exp!
    ): vectric_customer_area_file_mutation_response
    "update data of the table: \"vectric.customer_sales\""
    update_vectric_customer_sales(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_customer_sales_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_customer_sales_set_input,
        "filter the rows which have to be updated"
        where: vectric_customer_sales_bool_exp!
    ): vectric_customer_sales_mutation_response
    "update data of the table: \"vectric.customer_status\""
    update_vectric_customer_status(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_customer_status_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_customer_status_set_input,
        "filter the rows which have to be updated"
        where: vectric_customer_status_bool_exp!
    ): vectric_customer_status_mutation_response
    "update single row of the table: \"vectric.customer_status\""
    update_vectric_customer_status_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_customer_status_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_customer_status_set_input,
        pk_columns: vectric_customer_status_pk_columns_input!
    ): vectric_customer_status
    "update data of the table: \"vectric.download\""
    update_vectric_download(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_download_set_input,
        "filter the rows which have to be updated"
        where: vectric_download_bool_exp!
    ): vectric_download_mutation_response
    "update single row of the table: \"vectric.download\""
    update_vectric_download_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_download_set_input,
        pk_columns: vectric_download_pk_columns_input!
    ): vectric_download
    "update data of the table: \"vectric.download_record\""
    update_vectric_download_record(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_download_record_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_download_record_set_input,
        "filter the rows which have to be updated"
        where: vectric_download_record_bool_exp!
    ): vectric_download_record_mutation_response
    "update single row of the table: \"vectric.download_record\""
    update_vectric_download_record_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_download_record_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_download_record_set_input,
        pk_columns: vectric_download_record_pk_columns_input!
    ): vectric_download_record
    "update data of the table: \"vectric.enhancement_tokens\""
    update_vectric_enhancement_tokens(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_enhancement_tokens_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_enhancement_tokens_set_input,
        "filter the rows which have to be updated"
        where: vectric_enhancement_tokens_bool_exp!
    ): vectric_enhancement_tokens_mutation_response
    "update single row of the table: \"vectric.enhancement_tokens\""
    update_vectric_enhancement_tokens_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_enhancement_tokens_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_enhancement_tokens_set_input,
        pk_columns: vectric_enhancement_tokens_pk_columns_input!
    ): vectric_enhancement_tokens
    "update data of the table: \"vectric.free_clipart_tokens\""
    update_vectric_free_clipart_tokens(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_free_clipart_tokens_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_free_clipart_tokens_set_input,
        "filter the rows which have to be updated"
        where: vectric_free_clipart_tokens_bool_exp!
    ): vectric_free_clipart_tokens_mutation_response
    "update data of the table: \"vectric.freeclipart\""
    update_vectric_freeclipart(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_freeclipart_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_freeclipart_set_input,
        "filter the rows which have to be updated"
        where: vectric_freeclipart_bool_exp!
    ): vectric_freeclipart_mutation_response
    "update single row of the table: \"vectric.freeclipart\""
    update_vectric_freeclipart_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_freeclipart_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_freeclipart_set_input,
        pk_columns: vectric_freeclipart_pk_columns_input!
    ): vectric_freeclipart
    "update data of the table: \"vectric.freeclipart_category\""
    update_vectric_freeclipart_category(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_freeclipart_category_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_freeclipart_category_set_input,
        "filter the rows which have to be updated"
        where: vectric_freeclipart_category_bool_exp!
    ): vectric_freeclipart_category_mutation_response
    "update single row of the table: \"vectric.freeclipart_category\""
    update_vectric_freeclipart_category_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_freeclipart_category_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_freeclipart_category_set_input,
        pk_columns: vectric_freeclipart_category_pk_columns_input!
    ): vectric_freeclipart_category
    "update data of the table: \"vectric.freeclipart_download_record\""
    update_vectric_freeclipart_download_record(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_freeclipart_download_record_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_freeclipart_download_record_set_input,
        "filter the rows which have to be updated"
        where: vectric_freeclipart_download_record_bool_exp!
    ): vectric_freeclipart_download_record_mutation_response
    "update single row of the table: \"vectric.freeclipart_download_record\""
    update_vectric_freeclipart_download_record_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_freeclipart_download_record_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_freeclipart_download_record_set_input,
        pk_columns: vectric_freeclipart_download_record_pk_columns_input!
    ): vectric_freeclipart_download_record
    "update data of the table: \"vectric.group_roles\""
    update_vectric_group_roles(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_group_roles_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_group_roles_set_input,
        "filter the rows which have to be updated"
        where: vectric_group_roles_bool_exp!
    ): vectric_group_roles_mutation_response
    "update single row of the table: \"vectric.group_roles\""
    update_vectric_group_roles_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_group_roles_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_group_roles_set_input,
        pk_columns: vectric_group_roles_pk_columns_input!
    ): vectric_group_roles
    "update data of the table: \"vectric.group_user_role\""
    update_vectric_group_user_role(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_group_user_role_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_group_user_role_set_input,
        "filter the rows which have to be updated"
        where: vectric_group_user_role_bool_exp!
    ): vectric_group_user_role_mutation_response
    "update single row of the table: \"vectric.group_user_role\""
    update_vectric_group_user_role_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_group_user_role_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_group_user_role_set_input,
        pk_columns: vectric_group_user_role_pk_columns_input!
    ): vectric_group_user_role
    "update data of the table: \"vectric.groups\""
    update_vectric_groups(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_groups_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_groups_set_input,
        "filter the rows which have to be updated"
        where: vectric_groups_bool_exp!
    ): vectric_groups_mutation_response
    "update single row of the table: \"vectric.groups\""
    update_vectric_groups_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_groups_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_groups_set_input,
        pk_columns: vectric_groups_pk_columns_input!
    ): vectric_groups
    "update data of the table: \"vectric.language_codes\""
    update_vectric_language_codes(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_language_codes_set_input,
        "filter the rows which have to be updated"
        where: vectric_language_codes_bool_exp!
    ): vectric_language_codes_mutation_response
    "update single row of the table: \"vectric.language_codes\""
    update_vectric_language_codes_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_language_codes_set_input,
        pk_columns: vectric_language_codes_pk_columns_input!
    ): vectric_language_codes
    "update data of the table: \"vectric.licence_log\""
    update_vectric_licence_log(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_licence_log_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_licence_log_set_input,
        "filter the rows which have to be updated"
        where: vectric_licence_log_bool_exp!
    ): vectric_licence_log_mutation_response
    "update single row of the table: \"vectric.licence_log\""
    update_vectric_licence_log_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_licence_log_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_licence_log_set_input,
        pk_columns: vectric_licence_log_pk_columns_input!
    ): vectric_licence_log
    "update data of the table: \"vectric.makerspace_requests\""
    update_vectric_makerspace_requests(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_makerspace_requests_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_makerspace_requests_set_input,
        "filter the rows which have to be updated"
        where: vectric_makerspace_requests_bool_exp!
    ): vectric_makerspace_requests_mutation_response
    "update single row of the table: \"vectric.makerspace_requests\""
    update_vectric_makerspace_requests_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_makerspace_requests_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_makerspace_requests_set_input,
        pk_columns: vectric_makerspace_requests_pk_columns_input!
    ): vectric_makerspace_requests
    "update data of the table: \"vectric.membership_invitation_status\""
    update_vectric_membership_invitation_status(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_membership_invitation_status_set_input,
        "filter the rows which have to be updated"
        where: vectric_membership_invitation_status_bool_exp!
    ): vectric_membership_invitation_status_mutation_response
    "update single row of the table: \"vectric.membership_invitation_status\""
    update_vectric_membership_invitation_status_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_membership_invitation_status_set_input,
        pk_columns: vectric_membership_invitation_status_pk_columns_input!
    ): vectric_membership_invitation_status
    "update data of the table: \"vectric.membership_roles\""
    update_vectric_membership_roles(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_membership_roles_set_input,
        "filter the rows which have to be updated"
        where: vectric_membership_roles_bool_exp!
    ): vectric_membership_roles_mutation_response
    "update single row of the table: \"vectric.membership_roles\""
    update_vectric_membership_roles_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_membership_roles_set_input,
        pk_columns: vectric_membership_roles_pk_columns_input!
    ): vectric_membership_roles
    "update data of the table: \"vectric.membership_status\""
    update_vectric_membership_status(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_membership_status_set_input,
        "filter the rows which have to be updated"
        where: vectric_membership_status_bool_exp!
    ): vectric_membership_status_mutation_response
    "update single row of the table: \"vectric.membership_status\""
    update_vectric_membership_status_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_membership_status_set_input,
        pk_columns: vectric_membership_status_pk_columns_input!
    ): vectric_membership_status
    "update data of the table: \"vectric.oauth_client_details\""
    update_vectric_oauth_client_details(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oauth_client_details_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oauth_client_details_set_input,
        "filter the rows which have to be updated"
        where: vectric_oauth_client_details_bool_exp!
    ): vectric_oauth_client_details_mutation_response
    "update single row of the table: \"vectric.oauth_client_details\""
    update_vectric_oauth_client_details_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oauth_client_details_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oauth_client_details_set_input,
        pk_columns: vectric_oauth_client_details_pk_columns_input!
    ): vectric_oauth_client_details
    "update data of the table: \"vectric.oem_detailed_products\""
    update_vectric_oem_detailed_products(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_detailed_products_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_detailed_products_set_input,
        "filter the rows which have to be updated"
        where: vectric_oem_detailed_products_bool_exp!
    ): vectric_oem_detailed_products_mutation_response
    "update single row of the table: \"vectric.oem_detailed_products\""
    update_vectric_oem_detailed_products_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_detailed_products_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_detailed_products_set_input,
        pk_columns: vectric_oem_detailed_products_pk_columns_input!
    ): vectric_oem_detailed_products
    "update data of the table: \"vectric.oem_fastspring_item\""
    update_vectric_oem_fastspring_item(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_fastspring_item_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_fastspring_item_set_input,
        "filter the rows which have to be updated"
        where: vectric_oem_fastspring_item_bool_exp!
    ): vectric_oem_fastspring_item_mutation_response
    "update data of the table: \"vectric.oem_fastspring_item_bundle\""
    update_vectric_oem_fastspring_item_bundle(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_fastspring_item_bundle_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_fastspring_item_bundle_set_input,
        "filter the rows which have to be updated"
        where: vectric_oem_fastspring_item_bundle_bool_exp!
    ): vectric_oem_fastspring_item_bundle_mutation_response
    "update single row of the table: \"vectric.oem_fastspring_item_bundle\""
    update_vectric_oem_fastspring_item_bundle_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_fastspring_item_bundle_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_fastspring_item_bundle_set_input,
        pk_columns: vectric_oem_fastspring_item_bundle_pk_columns_input!
    ): vectric_oem_fastspring_item_bundle
    "update single row of the table: \"vectric.oem_fastspring_item\""
    update_vectric_oem_fastspring_item_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_fastspring_item_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_fastspring_item_set_input,
        pk_columns: vectric_oem_fastspring_item_pk_columns_input!
    ): vectric_oem_fastspring_item
    "update data of the table: \"vectric.oem_fastspring_order\""
    update_vectric_oem_fastspring_order(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_fastspring_order_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_fastspring_order_set_input,
        "filter the rows which have to be updated"
        where: vectric_oem_fastspring_order_bool_exp!
    ): vectric_oem_fastspring_order_mutation_response
    "update single row of the table: \"vectric.oem_fastspring_order\""
    update_vectric_oem_fastspring_order_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_fastspring_order_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_fastspring_order_set_input,
        pk_columns: vectric_oem_fastspring_order_pk_columns_input!
    ): vectric_oem_fastspring_order
    "update data of the table: \"vectric.oem_invite_status\""
    update_vectric_oem_invite_status(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_invite_status_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_invite_status_set_input,
        "filter the rows which have to be updated"
        where: vectric_oem_invite_status_bool_exp!
    ): vectric_oem_invite_status_mutation_response
    "update single row of the table: \"vectric.oem_invite_status\""
    update_vectric_oem_invite_status_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_invite_status_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_invite_status_set_input,
        pk_columns: vectric_oem_invite_status_pk_columns_input!
    ): vectric_oem_invite_status
    "update data of the table: \"vectric.oem_licence_allocation_type\""
    update_vectric_oem_licence_allocation_type(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_licence_allocation_type_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_licence_allocation_type_set_input,
        "filter the rows which have to be updated"
        where: vectric_oem_licence_allocation_type_bool_exp!
    ): vectric_oem_licence_allocation_type_mutation_response
    "update single row of the table: \"vectric.oem_licence_allocation_type\""
    update_vectric_oem_licence_allocation_type_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_licence_allocation_type_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_licence_allocation_type_set_input,
        pk_columns: vectric_oem_licence_allocation_type_pk_columns_input!
    ): vectric_oem_licence_allocation_type
    "update data of the table: \"vectric.oem_products\""
    update_vectric_oem_products(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_products_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_products_set_input,
        "filter the rows which have to be updated"
        where: vectric_oem_products_bool_exp!
    ): vectric_oem_products_mutation_response
    "update single row of the table: \"vectric.oem_products\""
    update_vectric_oem_products_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_oem_products_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_oem_products_set_input,
        pk_columns: vectric_oem_products_pk_columns_input!
    ): vectric_oem_products
    "update data of the table: \"vectric.organization_types\""
    update_vectric_organization_types(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_organization_types_set_input,
        "filter the rows which have to be updated"
        where: vectric_organization_types_bool_exp!
    ): vectric_organization_types_mutation_response
    "update single row of the table: \"vectric.organization_types\""
    update_vectric_organization_types_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_organization_types_set_input,
        pk_columns: vectric_organization_types_pk_columns_input!
    ): vectric_organization_types
    "update data of the table: \"vectric.products_clipartcollection_links\""
    update_vectric_products_clipartcollection_links(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_products_clipartcollection_links_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_clipartcollection_links_set_input,
        "filter the rows which have to be updated"
        where: vectric_products_clipartcollection_links_bool_exp!
    ): vectric_products_clipartcollection_links_mutation_response
    "update single row of the table: \"vectric.products_clipartcollection_links\""
    update_vectric_products_clipartcollection_links_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_products_clipartcollection_links_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_clipartcollection_links_set_input,
        pk_columns: vectric_products_clipartcollection_links_pk_columns_input!
    ): vectric_products_clipartcollection_links
    "update data of the table: \"vectric.products_enhancement_eligibility\""
    update_vectric_products_enhancement_eligibility(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_products_enhancement_eligibility_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_enhancement_eligibility_set_input,
        "filter the rows which have to be updated"
        where: vectric_products_enhancement_eligibility_bool_exp!
    ): vectric_products_enhancement_eligibility_mutation_response
    "update single row of the table: \"vectric.products_enhancement_eligibility\""
    update_vectric_products_enhancement_eligibility_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_products_enhancement_eligibility_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_enhancement_eligibility_set_input,
        pk_columns: vectric_products_enhancement_eligibility_pk_columns_input!
    ): vectric_products_enhancement_eligibility
    "update data of the table: \"vectric.products_freeclipart\""
    update_vectric_products_freeclipart(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_products_freeclipart_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_freeclipart_set_input,
        "filter the rows which have to be updated"
        where: vectric_products_freeclipart_bool_exp!
    ): vectric_products_freeclipart_mutation_response
    "update single row of the table: \"vectric.products_freeclipart\""
    update_vectric_products_freeclipart_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_products_freeclipart_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_freeclipart_set_input,
        pk_columns: vectric_products_freeclipart_pk_columns_input!
    ): vectric_products_freeclipart
    "update data of the table: \"vectric.products_fulfilments\""
    update_vectric_products_fulfilments(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_products_fulfilments_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_fulfilments_set_input,
        "filter the rows which have to be updated"
        where: vectric_products_fulfilments_bool_exp!
    ): vectric_products_fulfilments_mutation_response
    "update single row of the table: \"vectric.products_fulfilments\""
    update_vectric_products_fulfilments_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_products_fulfilments_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_fulfilments_set_input,
        pk_columns: vectric_products_fulfilments_pk_columns_input!
    ): vectric_products_fulfilments
    "update data of the table: \"vectric.products_fulfilmenttypes\""
    update_vectric_products_fulfilmenttypes(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_products_fulfilmenttypes_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_fulfilmenttypes_set_input,
        "filter the rows which have to be updated"
        where: vectric_products_fulfilmenttypes_bool_exp!
    ): vectric_products_fulfilmenttypes_mutation_response
    "update single row of the table: \"vectric.products_fulfilmenttypes\""
    update_vectric_products_fulfilmenttypes_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_products_fulfilmenttypes_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_fulfilmenttypes_set_input,
        pk_columns: vectric_products_fulfilmenttypes_pk_columns_input!
    ): vectric_products_fulfilmenttypes
    "update data of the table: \"vectric.products_product_fulfilments\""
    update_vectric_products_product_fulfilments(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_products_product_fulfilments_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_product_fulfilments_set_input,
        "filter the rows which have to be updated"
        where: vectric_products_product_fulfilments_bool_exp!
    ): vectric_products_product_fulfilments_mutation_response
    "update single row of the table: \"vectric.products_product_fulfilments\""
    update_vectric_products_product_fulfilments_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_products_product_fulfilments_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_product_fulfilments_set_input,
        pk_columns: vectric_products_product_fulfilments_pk_columns_input!
    ): vectric_products_product_fulfilments
    "update data of the table: \"vectric.products_product_licence_type\""
    update_vectric_products_product_licence_type(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_product_licence_type_set_input,
        "filter the rows which have to be updated"
        where: vectric_products_product_licence_type_bool_exp!
    ): vectric_products_product_licence_type_mutation_response
    "update single row of the table: \"vectric.products_product_licence_type\""
    update_vectric_products_product_licence_type_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_products_product_licence_type_set_input,
        pk_columns: vectric_products_product_licence_type_pk_columns_input!
    ): vectric_products_product_licence_type
    "update data of the table: \"vectric.sales_customerupdates\""
    update_vectric_sales_customerupdates(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_sales_customerupdates_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_sales_customerupdates_set_input,
        "filter the rows which have to be updated"
        where: vectric_sales_customerupdates_bool_exp!
    ): vectric_sales_customerupdates_mutation_response
    "update single row of the table: \"vectric.sales_customerupdates\""
    update_vectric_sales_customerupdates_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_sales_customerupdates_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_sales_customerupdates_set_input,
        pk_columns: vectric_sales_customerupdates_pk_columns_input!
    ): vectric_sales_customerupdates
    "update data of the table: \"vectric.sales_oemlicences\""
    update_vectric_sales_oemlicences(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_sales_oemlicences_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_sales_oemlicences_set_input,
        "filter the rows which have to be updated"
        where: vectric_sales_oemlicences_bool_exp!
    ): vectric_sales_oemlicences_mutation_response
    "update single row of the table: \"vectric.sales_oemlicences\""
    update_vectric_sales_oemlicences_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_sales_oemlicences_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_sales_oemlicences_set_input,
        pk_columns: vectric_sales_oemlicences_pk_columns_input!
    ): vectric_sales_oemlicences
    "update data of the table: \"vectric.sales_salesitemproduct_status\""
    update_vectric_sales_salesitemproduct_status(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_sales_salesitemproduct_status_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_sales_salesitemproduct_status_set_input,
        "filter the rows which have to be updated"
        where: vectric_sales_salesitemproduct_status_bool_exp!
    ): vectric_sales_salesitemproduct_status_mutation_response
    "update single row of the table: \"vectric.sales_salesitemproduct_status\""
    update_vectric_sales_salesitemproduct_status_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_sales_salesitemproduct_status_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_sales_salesitemproduct_status_set_input,
        pk_columns: vectric_sales_salesitemproduct_status_pk_columns_input!
    ): vectric_sales_salesitemproduct_status
    "update data of the table: \"vectric.security_emailverificationtokens\""
    update_vectric_security_emailverificationtokens(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_security_emailverificationtokens_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_security_emailverificationtokens_set_input,
        "filter the rows which have to be updated"
        where: vectric_security_emailverificationtokens_bool_exp!
    ): vectric_security_emailverificationtokens_mutation_response
    "update single row of the table: \"vectric.security_emailverificationtokens\""
    update_vectric_security_emailverificationtokens_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_security_emailverificationtokens_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_security_emailverificationtokens_set_input,
        pk_columns: vectric_security_emailverificationtokens_pk_columns_input!
    ): vectric_security_emailverificationtokens
    "update data of the table: \"vectric.security_group_authorities\""
    update_vectric_security_group_authorities(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_security_group_authorities_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_security_group_authorities_set_input,
        "filter the rows which have to be updated"
        where: vectric_security_group_authorities_bool_exp!
    ): vectric_security_group_authorities_mutation_response
    "update data of the table: \"vectric.security_group_members\""
    update_vectric_security_group_members(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_security_group_members_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_security_group_members_set_input,
        "filter the rows which have to be updated"
        where: vectric_security_group_members_bool_exp!
    ): vectric_security_group_members_mutation_response
    "update single row of the table: \"vectric.security_group_members\""
    update_vectric_security_group_members_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_security_group_members_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_security_group_members_set_input,
        pk_columns: vectric_security_group_members_pk_columns_input!
    ): vectric_security_group_members
    "update data of the table: \"vectric.security_passwordresettokens\""
    update_vectric_security_passwordresettokens(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_security_passwordresettokens_set_input,
        "filter the rows which have to be updated"
        where: vectric_security_passwordresettokens_bool_exp!
    ): vectric_security_passwordresettokens_mutation_response
    "update single row of the table: \"vectric.security_passwordresettokens\""
    update_vectric_security_passwordresettokens_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_security_passwordresettokens_set_input,
        pk_columns: vectric_security_passwordresettokens_pk_columns_input!
    ): vectric_security_passwordresettokens
    "update data of the table: \"vectric.security_userinvitations\""
    update_vectric_security_userinvitations(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_security_userinvitations_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_security_userinvitations_set_input,
        "filter the rows which have to be updated"
        where: vectric_security_userinvitations_bool_exp!
    ): vectric_security_userinvitations_mutation_response
    "update data of the table: \"vectric.subscription_contract_status\""
    update_vectric_subscription_contract_status(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_subscription_contract_status_set_input,
        "filter the rows which have to be updated"
        where: vectric_subscription_contract_status_bool_exp!
    ): vectric_subscription_contract_status_mutation_response
    "update single row of the table: \"vectric.subscription_contract_status\""
    update_vectric_subscription_contract_status_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: vectric_subscription_contract_status_set_input,
        pk_columns: vectric_subscription_contract_status_pk_columns_input!
    ): vectric_subscription_contract_status
    "update data of the table: \"vectric.subscription_contracts\""
    update_vectric_subscription_contracts(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_subscription_contracts_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_subscription_contracts_set_input,
        "filter the rows which have to be updated"
        where: vectric_subscription_contracts_bool_exp!
    ): vectric_subscription_contracts_mutation_response
    "update single row of the table: \"vectric.subscription_contracts\""
    update_vectric_subscription_contracts_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_subscription_contracts_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_subscription_contracts_set_input,
        pk_columns: vectric_subscription_contracts_pk_columns_input!
    ): vectric_subscription_contracts
    "update data of the table: \"vectric.subscription_events\""
    update_vectric_subscription_events(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_subscription_events_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_subscription_events_set_input,
        "filter the rows which have to be updated"
        where: vectric_subscription_events_bool_exp!
    ): vectric_subscription_events_mutation_response
    "update single row of the table: \"vectric.subscription_events\""
    update_vectric_subscription_events_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_subscription_events_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_subscription_events_set_input,
        pk_columns: vectric_subscription_events_pk_columns_input!
    ): vectric_subscription_events
    "update single row of the table: \"vectric.update_requests\""
    update_vectric_update_requests_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_update_requests_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_update_requests_set_input,
        pk_columns: vectric_update_requests_pk_columns_input!
    ): vectric_update_requests
    "update data of the table: \"vectric.upgrade_tokens\""
    update_vectric_upgrade_tokens(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_upgrade_tokens_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_upgrade_tokens_set_input,
        "filter the rows which have to be updated"
        where: vectric_upgrade_tokens_bool_exp!
    ): vectric_upgrade_tokens_mutation_response
    "update single row of the table: \"vectric.upgrade_tokens\""
    update_vectric_upgrade_tokens_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_upgrade_tokens_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_upgrade_tokens_set_input,
        pk_columns: vectric_upgrade_tokens_pk_columns_input!
    ): vectric_upgrade_tokens
    "update data of the table: \"vectric.version_code\""
    update_vectric_version_code(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_version_code_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_version_code_set_input,
        "filter the rows which have to be updated"
        where: vectric_version_code_bool_exp!
    ): vectric_version_code_mutation_response
    "update single row of the table: \"vectric.version_code\""
    update_vectric_version_code_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: vectric_version_code_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: vectric_version_code_set_input,
        pk_columns: vectric_version_code_pk_columns_input!
    ): vectric_version_code
    upgradeDetailsFromToken(token: String!): UpgradeDetails
    validateFSRequest(addonOnly: Boolean!, clipartLogID: String, email: String, firstName: String, lastName: String, modelCollection: String, modelProject: String!, otherModelCollections: [String!]!, software: [String!]!, upgradeToken: String): FastspringSecureRequestOutput
    verifyEmail(verificationToken: String!): EmailVerificationOutput
    zendeskUpload(customerId: bigint!, zdUploadedFiles: [String!]!, zendeskUploadId: bigint!): ZendeskUploadOutput
}

type query_root {
    "fetch data from the table: \"vectric.usergroup_2019_attendees\" using primary key columns"
    UserGroupAttendeeById(attendeeid: bigint!): vectric_usergroup_2019_attendees
    "fetch data from the table: \"vectric.usergroup_2019_attendees\""
    UserGroupAttendees(
        "distinct select on columns"
        distinct_on: [vectric_usergroup_2019_attendees_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_usergroup_2019_attendees_order_by!],
        "filter the rows returned"
        where: vectric_usergroup_2019_attendees_bool_exp
    ): [vectric_usergroup_2019_attendees!]!
    "fetch aggregated fields from the table: \"vectric.usergroup_2019_attendees\""
    UserGroupAttendees_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_usergroup_2019_attendees_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_usergroup_2019_attendees_order_by!],
        "filter the rows returned"
        where: vectric_usergroup_2019_attendees_bool_exp
    ): vectric_usergroup_2019_attendees_aggregate!
    "fetch data from the table: \"vectric.allocatable_bundles\""
    allocatableBundles(
        "distinct select on columns"
        distinct_on: [vectric_allocatable_bundles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocatable_bundles_order_by!],
        "filter the rows returned"
        where: vectric_allocatable_bundles_bool_exp
    ): [vectric_allocatable_bundles!]!
    "fetch data from the table: \"vectric.allocatable_licence_count\""
    allocatableLicenceCount(
        "distinct select on columns"
        distinct_on: [vectric_allocatable_licence_count_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocatable_licence_count_order_by!],
        "filter the rows returned"
        where: vectric_allocatable_licence_count_bool_exp
    ): [vectric_allocatable_licence_count!]!
    "fetch aggregated fields from the table: \"vectric.allocatable_licence_count\""
    allocatableLicenceCount_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_allocatable_licence_count_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocatable_licence_count_order_by!],
        "filter the rows returned"
        where: vectric_allocatable_licence_count_bool_exp
    ): vectric_allocatable_licence_count_aggregate!
    "fetch data from the table: \"vectric.allocated_bundles\""
    allocatedBundles(
        "distinct select on columns"
        distinct_on: [vectric_allocated_bundles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocated_bundles_order_by!],
        "filter the rows returned"
        where: vectric_allocated_bundles_bool_exp
    ): [vectric_allocated_bundles!]!
    "fetch data from the table: \"vectric.allocation_summary\""
    allocationSummaries(
        "distinct select on columns"
        distinct_on: [vectric_allocation_summary_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocation_summary_order_by!],
        "filter the rows returned"
        where: vectric_allocation_summary_bool_exp
    ): [vectric_allocation_summary!]!
    "fetch data from the table: \"vectric.allocation_summary\" using primary key columns"
    allocationSummaryById(id: Int!): vectric_allocation_summary
    "fetch aggregated fields from the table: \"vectric.allocation_summary\""
    allocationSummary_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_allocation_summary_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocation_summary_order_by!],
        "filter the rows returned"
        where: vectric_allocation_summary_bool_exp
    ): vectric_allocation_summary_aggregate!
    "fetch data from the table: \"vectric.owned_item_assignments\" using primary key columns"
    assignment(assignment_id: Int!): vectric_owned_item_assignments
    "fetch data from the table: \"vectric.owned_item_assignments\""
    assignments(
        "distinct select on columns"
        distinct_on: [vectric_owned_item_assignments_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_owned_item_assignments_order_by!],
        "filter the rows returned"
        where: vectric_owned_item_assignments_bool_exp
    ): [vectric_owned_item_assignments!]!
    "fetch aggregated fields from the table: \"vectric.owned_item_assignments\""
    assignments_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_owned_item_assignments_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_owned_item_assignments_order_by!],
        "filter the rows returned"
        where: vectric_owned_item_assignments_bool_exp
    ): vectric_owned_item_assignments_aggregate!
    checkSignUpEmail(data: CheckEmailForSignUpInput!): CheckEmailForSignUpOutput
    "fetch data from the table: \"vectric.products_clipartcollection_links\""
    clipartCollection(
        "distinct select on columns"
        distinct_on: [vectric_products_clipartcollection_links_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_clipartcollection_links_order_by!],
        "filter the rows returned"
        where: vectric_products_clipartcollection_links_bool_exp
    ): [vectric_products_clipartcollection_links!]!
    "fetch data from the table: \"vectric.countries\""
    countries(
        "distinct select on columns"
        distinct_on: [vectric_countries_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_countries_order_by!],
        "filter the rows returned"
        where: vectric_countries_bool_exp
    ): [vectric_countries!]!
    "fetch aggregated fields from the table: \"vectric.countries\""
    countries_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_countries_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_countries_order_by!],
        "filter the rows returned"
        where: vectric_countries_bool_exp
    ): vectric_countries_aggregate!
    "fetch data from the table: \"vectric.countries\" using primary key columns"
    countryById(countryid: bigint!): vectric_countries
    "fetch data from the table: \"vectric.customer_area\""
    customerArea(
        "distinct select on columns"
        distinct_on: [vectric_customer_area_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_area_order_by!],
        "filter the rows returned"
        where: vectric_customer_area_bool_exp
    ): [vectric_customer_area!]!
    "fetch data from the table: \"vectric.customer_area\" using primary key columns"
    customerAreaByPk(customerAreaId: bigint!): vectric_customer_area
    "fetch data from the table: \"vectric.customer_area_file\""
    customerAreaFile(
        "distinct select on columns"
        distinct_on: [vectric_customer_area_file_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_area_file_order_by!],
        "filter the rows returned"
        where: vectric_customer_area_file_bool_exp
    ): [vectric_customer_area_file!]!
    "fetch data from the table: \"vectric.customer_area_file\" using primary key columns"
    customerAreaFileByPk(customerAreaFileId: bigint!): vectric_customer_area_file
    "fetch data from the table: \"vectric.sales_customers\" using primary key columns"
    customerById(customerId: bigint!): vectric_sales_customers
    "fetch data from the table: \"vectric.customer_responses\" using primary key columns"
    customerResponseById(customerresponseid: bigint!): vectric_customer_responses
    "fetch data from the table: \"vectric.customer_responses\""
    customerResponses(
        "distinct select on columns"
        distinct_on: [vectric_customer_responses_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_responses_order_by!],
        "filter the rows returned"
        where: vectric_customer_responses_bool_exp
    ): [vectric_customer_responses!]!
    "fetch aggregated fields from the table: \"vectric.customer_responses\""
    customerResponses_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_customer_responses_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_responses_order_by!],
        "filter the rows returned"
        where: vectric_customer_responses_bool_exp
    ): vectric_customer_responses_aggregate!
    "An array relationship"
    customerSales(
        "distinct select on columns"
        distinct_on: [vectric_customer_sales_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_sales_order_by!],
        "filter the rows returned"
        where: vectric_customer_sales_bool_exp
    ): [vectric_customer_sales!]!
    "An aggregate relationship"
    customerSales_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_customer_sales_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_sales_order_by!],
        "filter the rows returned"
        where: vectric_customer_sales_bool_exp
    ): vectric_customer_sales_aggregate!
    "fetch data from the table: \"vectric.customer_status\""
    customerStatus(
        "distinct select on columns"
        distinct_on: [vectric_customer_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_status_order_by!],
        "filter the rows returned"
        where: vectric_customer_status_bool_exp
    ): [vectric_customer_status!]!
    "fetch data from the table: \"vectric.customer_status\" using primary key columns"
    customerStatusById(statusId: bigint!): vectric_customer_status
    "fetch data from the table: \"vectric.sales_customers\""
    customers(
        "distinct select on columns"
        distinct_on: [vectric_sales_customers_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_customers_order_by!],
        "filter the rows returned"
        where: vectric_sales_customers_bool_exp
    ): [vectric_sales_customers!]!
    "fetch data from the table: \"vectric.download\" using primary key columns"
    downloadByPk(downloadId: String!): vectric_download
    "fetch data from the table: \"vectric.sales_velocitytemplate\" using primary key columns"
    emailTemplate(templateName: String!): vectric_sales_velocitytemplate
    "fetch aggregated fields from the table: \"vectric.sales_velocitytemplate\""
    emailTemplate_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_velocitytemplate_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_velocitytemplate_order_by!],
        "filter the rows returned"
        where: vectric_sales_velocitytemplate_bool_exp
    ): vectric_sales_velocitytemplate_aggregate!
    "fetch data from the table: \"vectric.sales_velocitytemplate\""
    emailTemplates(
        "distinct select on columns"
        distinct_on: [vectric_sales_velocitytemplate_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_velocitytemplate_order_by!],
        "filter the rows returned"
        where: vectric_sales_velocitytemplate_bool_exp
    ): [vectric_sales_velocitytemplate!]!
    "An array relationship"
    enhancementTokens(
        "distinct select on columns"
        distinct_on: [vectric_enhancement_tokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_enhancement_tokens_order_by!],
        "filter the rows returned"
        where: vectric_enhancement_tokens_bool_exp
    ): [vectric_enhancement_tokens!]!
    "fetch data from the table: \"vectric.entitled_products\" using primary key columns"
    entitledProduct(productId: Int!): vectric_entitled_products
    "fetch data from the table: \"vectric.entitled_products\""
    entitledProducts(
        "distinct select on columns"
        distinct_on: [vectric_entitled_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_entitled_products_order_by!],
        "filter the rows returned"
        where: vectric_entitled_products_bool_exp
    ): [vectric_entitled_products!]!
    "fetch aggregated fields from the table: \"vectric.entitled_products\""
    entitledProducts_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_entitled_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_entitled_products_order_by!],
        "filter the rows returned"
        where: vectric_entitled_products_bool_exp
    ): vectric_entitled_products_aggregate!
    "fetch data from the table: \"vectric.entitlements\" using primary key columns"
    entitlement(entitlementId: Int!): vectric_entitlements
    "fetch data from the table: \"vectric.entitlement_licences\" using primary key columns"
    entitlementLicence(entitlementLicenceId: Int!): vectric_entitlement_licences
    "fetch aggregated fields from the table: \"vectric.entitlement_licences\""
    entitlementLicence_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_entitlement_licences_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_entitlement_licences_order_by!],
        "filter the rows returned"
        where: vectric_entitlement_licences_bool_exp
    ): vectric_entitlement_licences_aggregate!
    "fetch data from the table: \"vectric.entitlement_licences\""
    entitlementLicences(
        "distinct select on columns"
        distinct_on: [vectric_entitlement_licences_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_entitlement_licences_order_by!],
        "filter the rows returned"
        where: vectric_entitlement_licences_bool_exp
    ): [vectric_entitlement_licences!]!
    "An array relationship"
    entitlements(
        "distinct select on columns"
        distinct_on: [vectric_entitlements_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_entitlements_order_by!],
        "filter the rows returned"
        where: vectric_entitlements_bool_exp
    ): [vectric_entitlements!]!
    "An aggregate relationship"
    entitlements_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_entitlements_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_entitlements_order_by!],
        "filter the rows returned"
        where: vectric_entitlements_bool_exp
    ): vectric_entitlements_aggregate!
    "fetch data from the table: \"vectric.oem_eval_request\" using primary key columns"
    evalRequestById(requestId: bigint!): vectric_oem_eval_request
    "fetch aggregated fields from the table: \"vectric.oem_eval_request\""
    evalRequest_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_eval_request_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_eval_request_order_by!],
        "filter the rows returned"
        where: vectric_oem_eval_request_bool_exp
    ): vectric_oem_eval_request_aggregate!
    "fetch data from the table: \"vectric.oem_eval_request\""
    evalRequests(
        "distinct select on columns"
        distinct_on: [vectric_oem_eval_request_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_eval_request_order_by!],
        "filter the rows returned"
        where: vectric_oem_eval_request_bool_exp
    ): [vectric_oem_eval_request!]!
    "fetch data from the table: \"vectric.freeclipart\""
    freeClipart(
        "distinct select on columns"
        distinct_on: [vectric_freeclipart_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_freeclipart_order_by!],
        "filter the rows returned"
        where: vectric_freeclipart_bool_exp
    ): [vectric_freeclipart!]!
    "fetch data from the table: \"vectric.freeclipart_category\""
    freeClipartCategory(
        "distinct select on columns"
        distinct_on: [vectric_freeclipart_category_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_freeclipart_category_order_by!],
        "filter the rows returned"
        where: vectric_freeclipart_category_bool_exp
    ): [vectric_freeclipart_category!]!
    "fetch data from the table: \"vectric.free_clipart_tokens\" using primary key columns"
    freeClipartTokenByPk(clipartToken: String!): vectric_free_clipart_tokens
    "An array relationship"
    freeClipartTokens(
        "distinct select on columns"
        distinct_on: [vectric_free_clipart_tokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_free_clipart_tokens_order_by!],
        "filter the rows returned"
        where: vectric_free_clipart_tokens_bool_exp
    ): [vectric_free_clipart_tokens!]!
    getAdminDownloadLinkForFulfilment(fulfilmentId: bigint!): GetDownloadLinkForFulfilmentOutput
    getDownloadLinkForFulfilment(customerId: bigint!, fulfilmentId: bigint!, ipAddress: String, salesItemProductId: bigint!): GetDownloadLinkForFulfilmentOutput
    getDownloadLinkForPrivateProject(downloadId: String!): GetDownloadLinkForContentProject
    getLicenceDetailsForProductOrderItemAndAddOns(salesItemProductId: bigint!): [LicenceDetailsForProductOrderItemAndAddOns]
    getLicenceDetailsForProductOrderItems(salesItemProductIds: [bigint]!): [LicenceDetailsForProductOrderItem!]!
    "fetch data from the table: \"vectric.organization_licence_scope\" using primary key columns"
    licenceScope(scope: String!): vectric_organization_licence_scope
    "fetch aggregated fields from the table: \"vectric.organization_licence_scope\""
    licenceScope_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_organization_licence_scope_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_licence_scope_order_by!],
        "filter the rows returned"
        where: vectric_organization_licence_scope_bool_exp
    ): vectric_organization_licence_scope_aggregate!
    "fetch data from the table: \"vectric.organization_licence_scope\""
    licenceScopes(
        "distinct select on columns"
        distinct_on: [vectric_organization_licence_scope_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_licence_scope_order_by!],
        "filter the rows returned"
        where: vectric_organization_licence_scope_bool_exp
    ): [vectric_organization_licence_scope!]!
    "fetch data from the table: \"vectric.memberships\" using primary key columns"
    membershipById(membershipId: Int!): vectric_memberships
    "fetch data from the table: \"vectric.membership_invitations\" using primary key columns"
    membershipInvitationById(invitationId: Int!): vectric_membership_invitations
    membershipInvitationCheck(token: String!): MembershipInvitationCheckResult
    "An array relationship"
    membershipInvitations(
        "distinct select on columns"
        distinct_on: [vectric_membership_invitations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_invitations_order_by!],
        "filter the rows returned"
        where: vectric_membership_invitations_bool_exp
    ): [vectric_membership_invitations!]!
    "An aggregate relationship"
    membershipInvitations_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_membership_invitations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_invitations_order_by!],
        "filter the rows returned"
        where: vectric_membership_invitations_bool_exp
    ): vectric_membership_invitations_aggregate!
    "An array relationship"
    memberships(
        "distinct select on columns"
        distinct_on: [vectric_memberships_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_memberships_order_by!],
        "filter the rows returned"
        where: vectric_memberships_bool_exp
    ): [vectric_memberships!]!
    "An aggregate relationship"
    memberships_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_memberships_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_memberships_order_by!],
        "filter the rows returned"
        where: vectric_memberships_bool_exp
    ): vectric_memberships_aggregate!
    "fetch data from the table: \"vectric.oem_allocation_emails\""
    oemAllocationEmails(
        "distinct select on columns"
        distinct_on: [vectric_oem_allocation_emails_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_allocation_emails_order_by!],
        "filter the rows returned"
        where: vectric_oem_allocation_emails_bool_exp
    ): [vectric_oem_allocation_emails!]!
    "fetch aggregated fields from the table: \"vectric.oem_allocation_emails\""
    oemAllocationEmails_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_allocation_emails_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_allocation_emails_order_by!],
        "filter the rows returned"
        where: vectric_oem_allocation_emails_bool_exp
    ): vectric_oem_allocation_emails_aggregate!
    "fetch data from the table: \"vectric.sales_oem_bundles\""
    oemBundles(
        "distinct select on columns"
        distinct_on: [vectric_sales_oem_bundles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_oem_bundles_order_by!],
        "filter the rows returned"
        where: vectric_sales_oem_bundles_bool_exp
    ): [vectric_sales_oem_bundles!]!
    "fetch data from the table: \"vectric.sales_oem_bundles\" using primary key columns"
    oemBundlesById(bundleId: String!): vectric_sales_oem_bundles
    "fetch aggregated fields from the table: \"vectric.sales_oem_bundles\""
    oemBundles_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_oem_bundles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_oem_bundles_order_by!],
        "filter the rows returned"
        where: vectric_sales_oem_bundles_bool_exp
    ): vectric_sales_oem_bundles_aggregate!
    "fetch data from the table: \"vectric.oem_fastspring_item\""
    oemFastspringItem(
        "distinct select on columns"
        distinct_on: [vectric_oem_fastspring_item_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_fastspring_item_order_by!],
        "filter the rows returned"
        where: vectric_oem_fastspring_item_bool_exp
    ): [vectric_oem_fastspring_item!]!
    "fetch data from the table: \"vectric.oem_fastspring_item\" using primary key columns"
    oemFastspringItemById(itemId: bigint!): vectric_oem_fastspring_item
    "fetch aggregated fields from the table: \"vectric.oem_fastspring_item\""
    oemFastspringItem_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_fastspring_item_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_fastspring_item_order_by!],
        "filter the rows returned"
        where: vectric_oem_fastspring_item_bool_exp
    ): vectric_oem_fastspring_item_aggregate!
    "fetch data from the table: \"vectric.oem_fastspring_order\""
    oemFastspringOrder(
        "distinct select on columns"
        distinct_on: [vectric_oem_fastspring_order_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_fastspring_order_order_by!],
        "filter the rows returned"
        where: vectric_oem_fastspring_order_bool_exp
    ): [vectric_oem_fastspring_order!]!
    "fetch data from the table: \"vectric.oem_fastspring_order\" using primary key columns"
    oemFastspringOrderById(orderId: bigint!): vectric_oem_fastspring_order
    "fetch aggregated fields from the table: \"vectric.oem_fastspring_order\""
    oemFastspringOrder_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_fastspring_order_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_fastspring_order_order_by!],
        "filter the rows returned"
        where: vectric_oem_fastspring_order_bool_exp
    ): vectric_oem_fastspring_order_aggregate!
    "fetch data from the table: \"vectric.oem_licence_allocation_type\""
    oemLicenceAllocationType(
        "distinct select on columns"
        distinct_on: [vectric_oem_licence_allocation_type_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_licence_allocation_type_order_by!],
        "filter the rows returned"
        where: vectric_oem_licence_allocation_type_bool_exp
    ): [vectric_oem_licence_allocation_type!]!
    "fetch data from the table: \"vectric.sales_oemlicences\""
    oemLicences(
        "distinct select on columns"
        distinct_on: [vectric_sales_oemlicences_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_oemlicences_order_by!],
        "filter the rows returned"
        where: vectric_sales_oemlicences_bool_exp
    ): [vectric_sales_oemlicences!]!
    "fetch data from the table: \"vectric.sales_oemlicences\" using primary key columns"
    oemLicencesById(oemLicenceId: bigint!): vectric_sales_oemlicences
    "fetch data from the table: \"vectric.oem_partners\""
    oemPartners(
        "distinct select on columns"
        distinct_on: [vectric_oem_partners_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_partners_order_by!],
        "filter the rows returned"
        where: vectric_oem_partners_bool_exp
    ): [vectric_oem_partners!]!
    "fetch data from the table: \"vectric.oem_partners\" using primary key columns"
    oemPartnersById(partnerId: bigint!): vectric_oem_partners
    "fetch data from the table: \"vectric.oem_products\" using primary key columns"
    oemProductByPk(oemProductId: bigint!): vectric_oem_products
    "fetch data from the table: \"vectric.oem_products\""
    oemProducts(
        "distinct select on columns"
        distinct_on: [vectric_oem_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_products_order_by!],
        "filter the rows returned"
        where: vectric_oem_products_bool_exp
    ): [vectric_oem_products!]!
    "fetch data from the table: \"vectric.oem_purchase_options\""
    oemPurchaseOptions(
        "distinct select on columns"
        distinct_on: [vectric_oem_purchase_options_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_purchase_options_order_by!],
        "filter the rows returned"
        where: vectric_oem_purchase_options_bool_exp
    ): [vectric_oem_purchase_options!]!
    "fetch data from the table: \"vectric.oem_purchase_options\" using primary key columns"
    oemPurchaseOptionsByOptionId(optionId: bigint!): vectric_oem_purchase_options
    "fetch aggregated fields from the table: \"vectric.oem_purchase_options\""
    oemPurchaseOptions_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_purchase_options_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_purchase_options_order_by!],
        "filter the rows returned"
        where: vectric_oem_purchase_options_bool_exp
    ): vectric_oem_purchase_options_aggregate!
    "fetch data from the table: \"vectric.oem_staff_customer\" using primary key columns"
    oemStaffCustomerById(staffId: bigint!): vectric_oem_staff_customer
    "fetch data from the table: \"vectric.oem_staff_customer\""
    oemStaffCustomers(
        "distinct select on columns"
        distinct_on: [vectric_oem_staff_customer_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_staff_customer_order_by!],
        "filter the rows returned"
        where: vectric_oem_staff_customer_bool_exp
    ): [vectric_oem_staff_customer!]!
    "fetch aggregated fields from the table: \"vectric.oem_staff_customer\""
    oemStaffCustomers_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_staff_customer_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_staff_customer_order_by!],
        "filter the rows returned"
        where: vectric_oem_staff_customer_bool_exp
    ): vectric_oem_staff_customer_aggregate!
    "fetch data from the table: \"vectric.oem_staff_admin_ownership\""
    oemStaffMembershipDetails(
        "distinct select on columns"
        distinct_on: [vectric_oem_staff_admin_ownership_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_staff_admin_ownership_order_by!],
        "filter the rows returned"
        where: vectric_oem_staff_admin_ownership_bool_exp
    ): [vectric_oem_staff_admin_ownership!]!
    "An array relationship"
    orders(
        "distinct select on columns"
        distinct_on: [vectric_sales_orders_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_orders_order_by!],
        "filter the rows returned"
        where: vectric_sales_orders_bool_exp
    ): [vectric_sales_orders!]!
    "fetch data from the table: \"vectric.sales_orders\" using primary key columns"
    ordersByOrderId(orderId: String!): vectric_sales_orders
    "fetch data from the table: \"vectric.organization_audit\" using primary key columns"
    organizationAuditById(auditId: Int!): vectric_organization_audit
    "fetch aggregated fields from the table: \"vectric.organization_audit\""
    organizationAudit_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_organization_audit_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_audit_order_by!],
        "filter the rows returned"
        where: vectric_organization_audit_bool_exp
    ): vectric_organization_audit_aggregate!
    "fetch data from the table: \"vectric.organizations\" using primary key columns"
    organizationById(organizationId: Int!): vectric_organizations
    "fetch data from the table: \"vectric.organization_memberships_admin_access\""
    organizationMembershipsAdminAccess(
        "distinct select on columns"
        distinct_on: [vectric_organization_memberships_admin_access_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_memberships_admin_access_order_by!],
        "filter the rows returned"
        where: vectric_organization_memberships_admin_access_bool_exp
    ): [vectric_organization_memberships_admin_access!]!
    "fetch data from the table: \"vectric.organization_orders\" using primary key columns"
    organizationOrder(orderId: String!): vectric_organization_orders
    "fetch data from the table: \"vectric.organization_order_items\" using primary key columns"
    organizationOrderItem(orderItemId: Int!): vectric_organization_order_items
    "fetch data from the table: \"vectric.organization_order_items\""
    organizationOrderItems(
        "distinct select on columns"
        distinct_on: [vectric_organization_order_items_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_order_items_order_by!],
        "filter the rows returned"
        where: vectric_organization_order_items_bool_exp
    ): [vectric_organization_order_items!]!
    "fetch data from the table: \"vectric.organization_orders\""
    organizationOrders(
        "distinct select on columns"
        distinct_on: [vectric_organization_orders_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_orders_order_by!],
        "filter the rows returned"
        where: vectric_organization_orders_bool_exp
    ): [vectric_organization_orders!]!
    "fetch aggregated fields from the table: \"vectric.organizations\""
    organization_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_organizations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organizations_order_by!],
        "filter the rows returned"
        where: vectric_organizations_bool_exp
    ): vectric_organizations_aggregate!
    "fetch data from the table: \"vectric.organizations\""
    organizations(
        "distinct select on columns"
        distinct_on: [vectric_organizations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organizations_order_by!],
        "filter the rows returned"
        where: vectric_organizations_bool_exp
    ): [vectric_organizations!]!
    "fetch data from the table: \"vectric.organization_audit\""
    organiztionAudits(
        "distinct select on columns"
        distinct_on: [vectric_organization_audit_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_audit_order_by!],
        "filter the rows returned"
        where: vectric_organization_audit_bool_exp
    ): [vectric_organization_audit!]!
    "fetch data from the table: \"vectric.owned_items\" using primary key columns"
    ownedItem(ownedItemId: Int!): vectric_owned_items
    "An array relationship"
    ownedItems(
        "distinct select on columns"
        distinct_on: [vectric_owned_items_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_owned_items_order_by!],
        "filter the rows returned"
        where: vectric_owned_items_bool_exp
    ): [vectric_owned_items!]!
    "An aggregate relationship"
    ownedItems_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_owned_items_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_owned_items_order_by!],
        "filter the rows returned"
        where: vectric_owned_items_bool_exp
    ): vectric_owned_items_aggregate!
    "fetch data from the table: \"vectric.owned_products\" using primary key columns"
    ownedProduct(productId: Int!): vectric_owned_products
    "fetch data from the table: \"vectric.owned_products\""
    ownedProducts(
        "distinct select on columns"
        distinct_on: [vectric_owned_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_owned_products_order_by!],
        "filter the rows returned"
        where: vectric_owned_products_bool_exp
    ): [vectric_owned_products!]!
    "fetch aggregated fields from the table: \"vectric.owned_products\""
    ownedProducts_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_owned_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_owned_products_order_by!],
        "filter the rows returned"
        where: vectric_owned_products_bool_exp
    ): vectric_owned_products_aggregate!
    "fetch data from the table: \"vectric.security_passwordresettokens\""
    passwordResetTokens(
        "distinct select on columns"
        distinct_on: [vectric_security_passwordresettokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_passwordresettokens_order_by!],
        "filter the rows returned"
        where: vectric_security_passwordresettokens_bool_exp
    ): [vectric_security_passwordresettokens!]!
    "fetch data from the table: \"vectric.security_passwordresettokens\" using primary key columns"
    passwordResetTokensByPk(token: String!): vectric_security_passwordresettokens
    "fetch data from the table: \"vectric.products_products\" using primary key columns"
    productById(productID: bigint!): vectric_products_products
    "fetch data from the table: \"vectric.products_enhancement_eligibility\""
    productEnhancementEligibility(
        "distinct select on columns"
        distinct_on: [vectric_products_enhancement_eligibility_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_enhancement_eligibility_order_by!],
        "filter the rows returned"
        where: vectric_products_enhancement_eligibility_bool_exp
    ): [vectric_products_enhancement_eligibility!]!
    "fetch data from the table: \"vectric.products_producttype\""
    productTypes(
        "distinct select on columns"
        distinct_on: [vectric_products_producttype_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_producttype_order_by!],
        "filter the rows returned"
        where: vectric_products_producttype_bool_exp
    ): [vectric_products_producttype!]!
    "fetch data from the table: \"vectric.products_producttype\" using primary key columns"
    productTypesById(productTypeId: bigint!): vectric_products_producttype
    "fetch data from the table: \"vectric.products_upgrade_eligibility\" using primary key columns"
    productUpgradeEligibilityById(eligibilityid: bigint!): vectric_products_upgrade_eligibility
    "An array relationship"
    products(
        "distinct select on columns"
        distinct_on: [vectric_products_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_products_order_by!],
        "filter the rows returned"
        where: vectric_products_products_bool_exp
    ): [vectric_products_products!]!
    "fetch data from the table: \"vectric.products_freeclipart\""
    productsFreeClipart(
        "distinct select on columns"
        distinct_on: [vectric_products_freeclipart_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_freeclipart_order_by!],
        "filter the rows returned"
        where: vectric_products_freeclipart_bool_exp
    ): [vectric_products_freeclipart!]!
    "fetch data from the table: \"vectric.products_upgrade_eligibility\""
    productsUpgradeEligibility(
        "distinct select on columns"
        distinct_on: [vectric_products_upgrade_eligibility_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_upgrade_eligibility_order_by!],
        "filter the rows returned"
        where: vectric_products_upgrade_eligibility_bool_exp
    ): [vectric_products_upgrade_eligibility!]!
    "fetch data from the table: \"vectric.questions\" using primary key columns"
    questionById(questionid: bigint!): vectric_questions
    "fetch data from the table: \"vectric.questions\""
    questions(
        "distinct select on columns"
        distinct_on: [vectric_questions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_questions_order_by!],
        "filter the rows returned"
        where: vectric_questions_bool_exp
    ): [vectric_questions!]!
    "fetch aggregated fields from the table: \"vectric.questions\""
    questions_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_questions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_questions_order_by!],
        "filter the rows returned"
        where: vectric_questions_bool_exp
    ): vectric_questions_aggregate!
    "fetch data from the table: \"vectric.responses\" using primary key columns"
    responseById(responseid: bigint!): vectric_responses
    "fetch data from the table: \"vectric.responses\""
    responses(
        "distinct select on columns"
        distinct_on: [vectric_responses_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_responses_order_by!],
        "filter the rows returned"
        where: vectric_responses_bool_exp
    ): [vectric_responses!]!
    "fetch aggregated fields from the table: \"vectric.responses\""
    responses_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_responses_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_responses_order_by!],
        "filter the rows returned"
        where: vectric_responses_bool_exp
    ): vectric_responses_aggregate!
    "fetch data from the table: \"vectric.saleable_products\" using primary key columns"
    saleableProduct(productId: Int!): vectric_saleable_products
    "fetch data from the table: \"vectric.saleable_products\""
    saleableProducts(
        "distinct select on columns"
        distinct_on: [vectric_saleable_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_saleable_products_order_by!],
        "filter the rows returned"
        where: vectric_saleable_products_bool_exp
    ): [vectric_saleable_products!]!
    "fetch aggregated fields from the table: \"vectric.saleable_products\""
    saleableProducts_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_saleable_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_saleable_products_order_by!],
        "filter the rows returned"
        where: vectric_saleable_products_bool_exp
    ): vectric_saleable_products_aggregate!
    "fetch aggregated fields from the table: \"vectric.sales_customers\""
    salesCustomers_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_customers_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_customers_order_by!],
        "filter the rows returned"
        where: vectric_sales_customers_bool_exp
    ): vectric_sales_customers_aggregate!
    "fetch data from the table: \"vectric.sales_salesitem_products\""
    salesItemProduct(
        "distinct select on columns"
        distinct_on: [vectric_sales_salesitem_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_salesitem_products_order_by!],
        "filter the rows returned"
        where: vectric_sales_salesitem_products_bool_exp
    ): [vectric_sales_salesitem_products!]!
    "fetch data from the table: \"vectric.sales_salesitem_products\" using primary key columns"
    salesItemProductById(salesItemProductId: bigint!): vectric_sales_salesitem_products
    "An array relationship"
    salesItems(
        "distinct select on columns"
        distinct_on: [vectric_sales_salesitems_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_salesitems_order_by!],
        "filter the rows returned"
        where: vectric_sales_salesitems_bool_exp
    ): [vectric_sales_salesitems!]!
    "fetch data from the table: \"vectric.sales_salesitems\" using primary key columns"
    salesItemsById(salesitemid: bigint!): vectric_sales_salesitems
    "fetch data from the table: \"vectric.scheduled_emails\""
    scheduledEmails(
        "distinct select on columns"
        distinct_on: [vectric_scheduled_emails_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_scheduled_emails_order_by!],
        "filter the rows returned"
        where: vectric_scheduled_emails_bool_exp
    ): [vectric_scheduled_emails!]!
    "fetch data from the table: \"vectric.scheduled_emails\" using primary key columns"
    scheduledEmailsById(id: Int!): vectric_scheduled_emails
    "fetch aggregated fields from the table: \"vectric.scheduled_emails\""
    scheduledEmails_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_scheduled_emails_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_scheduled_emails_order_by!],
        "filter the rows returned"
        where: vectric_scheduled_emails_bool_exp
    ): vectric_scheduled_emails_aggregate!
    "fetch data from the table: \"vectric.security_emailverificationtokens\" using primary key columns"
    securityEmailVerificationTokenByToken(token: String!): vectric_security_emailverificationtokens
    "fetch data from the table: \"vectric.security_emailverificationtokens\""
    securityEmailVerificationTokens(
        "distinct select on columns"
        distinct_on: [vectric_security_emailverificationtokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_emailverificationtokens_order_by!],
        "filter the rows returned"
        where: vectric_security_emailverificationtokens_bool_exp
    ): [vectric_security_emailverificationtokens!]!
    "fetch data from the table: \"vectric.security_userinvitations\""
    securityUserInvitations(
        "distinct select on columns"
        distinct_on: [vectric_security_userinvitations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_userinvitations_order_by!],
        "filter the rows returned"
        where: vectric_security_userinvitations_bool_exp
    ): [vectric_security_userinvitations!]!
    "fetch data from the table: \"vectric.security_users\""
    securityUsers(
        "distinct select on columns"
        distinct_on: [vectric_security_users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_users_order_by!],
        "filter the rows returned"
        where: vectric_security_users_bool_exp
    ): [vectric_security_users!]!
    "fetch data from the table: \"vectric.sales_customer_downloads\""
    selectCustomerDownloads(
        "distinct select on columns"
        distinct_on: [vectric_sales_customer_downloads_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_customer_downloads_order_by!],
        "filter the rows returned"
        where: vectric_sales_customer_downloads_bool_exp
    ): [vectric_sales_customer_downloads!]!
    "fetch data from the table: \"vectric.sales_customer_downloads\" using primary key columns"
    selectCustomerDownloadsById(downloadId: bigint!): vectric_sales_customer_downloads
    "fetch aggregated fields from the table: \"vectric.sales_customer_downloads\""
    selectCustomerDownloads_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_customer_downloads_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_customer_downloads_order_by!],
        "filter the rows returned"
        where: vectric_sales_customer_downloads_bool_exp
    ): vectric_sales_customer_downloads_aggregate!
    "fetch data from the table: \"vectric.security_group_members\" using primary key columns"
    selectSecurityGroupMembersById(id: bigint!): vectric_security_group_members
    "fetch data from the table: \"vectric.security_group_members\""
    selectSecurityGrupMemebers(
        "distinct select on columns"
        distinct_on: [vectric_security_group_members_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_group_members_order_by!],
        "filter the rows returned"
        where: vectric_security_group_members_bool_exp
    ): [vectric_security_group_members!]!
    "fetch data from the table: \"vectric.linkshortener_links\""
    shortLinks(
        "distinct select on columns"
        distinct_on: [vectric_linkshortener_links_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_linkshortener_links_order_by!],
        "filter the rows returned"
        where: vectric_linkshortener_links_bool_exp
    ): [vectric_linkshortener_links!]!
    "fetch data from the table: \"vectric.linkshortener_links\" using primary key columns"
    shortLinksByHash(shortUrlHash: String!): vectric_linkshortener_links
    "fetch aggregated fields from the table: \"vectric.site_option_location\""
    siteOptionLocation_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_site_option_location_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_site_option_location_order_by!],
        "filter the rows returned"
        where: vectric_site_option_location_bool_exp
    ): vectric_site_option_location_aggregate!
    "fetch data from the table: \"vectric.site_option_location\""
    siteOptionLocations(
        "distinct select on columns"
        distinct_on: [vectric_site_option_location_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_site_option_location_order_by!],
        "filter the rows returned"
        where: vectric_site_option_location_bool_exp
    ): [vectric_site_option_location!]!
    "fetch data from the table: \"vectric.site_option_location\" using primary key columns"
    siteOptionLocationsById(locationid: bigint!): vectric_site_option_location
    "fetch data from the table: \"vectric.site_options\""
    siteOptions(
        "distinct select on columns"
        distinct_on: [vectric_site_options_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_site_options_order_by!],
        "filter the rows returned"
        where: vectric_site_options_bool_exp
    ): [vectric_site_options!]!
    "fetch data from the table: \"vectric.site_options\" using primary key columns"
    siteOptionsById(optionid: bigint!): vectric_site_options
    "fetch aggregated fields from the table: \"vectric.site_options\""
    siteOptions_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_site_options_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_site_options_order_by!],
        "filter the rows returned"
        where: vectric_site_options_bool_exp
    ): vectric_site_options_aggregate!
    testAction(input: String!): SampleOutput
    "fetch aggregated fields from the table: \"vectric.toolpath_saver_token\""
    toolpathSaveToken_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_toolpath_saver_token_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_toolpath_saver_token_order_by!],
        "filter the rows returned"
        where: vectric_toolpath_saver_token_bool_exp
    ): vectric_toolpath_saver_token_aggregate!
    "fetch data from the table: \"vectric.toolpath_saver_token\" using primary key columns"
    toolpathSaverTokenById(toolpathSaverTokenId: bigint!): vectric_toolpath_saver_token
    "fetch data from the table: \"vectric.toolpath_saver_token\""
    toolpathSaverTokens(
        "distinct select on columns"
        distinct_on: [vectric_toolpath_saver_token_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_toolpath_saver_token_order_by!],
        "filter the rows returned"
        where: vectric_toolpath_saver_token_bool_exp
    ): [vectric_toolpath_saver_token!]!
    "fetch data from the table: \"vectric.trial_order\" using primary key columns"
    trialOrderById(orderId: bigint!): vectric_trial_order
    "fetch data from the table: \"vectric.trial_order\""
    trialOrders(
        "distinct select on columns"
        distinct_on: [vectric_trial_order_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_trial_order_order_by!],
        "filter the rows returned"
        where: vectric_trial_order_bool_exp
    ): [vectric_trial_order!]!
    "fetch aggregated fields from the table: \"vectric.trial_order\""
    trialOrders_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_trial_order_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_trial_order_order_by!],
        "filter the rows returned"
        where: vectric_trial_order_bool_exp
    ): vectric_trial_order_aggregate!
    "fetch data from the table: \"vectric.update_requests\" using primary key columns"
    updateRequestById(requestId: bigint!): vectric_update_requests
    "fetch data from the table: \"vectric.update_requests\""
    updateRequests(
        "distinct select on columns"
        distinct_on: [vectric_update_requests_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_update_requests_order_by!],
        "filter the rows returned"
        where: vectric_update_requests_bool_exp
    ): [vectric_update_requests!]!
    "fetch data from the table: \"vectric.upgrades_feature\" using primary key columns"
    upgradeFeatureById(featureId: String!): vectric_upgrades_feature
    "fetch data from the table: \"vectric.upgrades_feature\""
    upgradeFeatures(
        "distinct select on columns"
        distinct_on: [vectric_upgrades_feature_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrades_feature_order_by!],
        "filter the rows returned"
        where: vectric_upgrades_feature_bool_exp
    ): [vectric_upgrades_feature!]!
    "fetch aggregated fields from the table: \"vectric.upgrades_feature\""
    upgradeFeatures_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_upgrades_feature_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrades_feature_order_by!],
        "filter the rows returned"
        where: vectric_upgrades_feature_bool_exp
    ): vectric_upgrades_feature_aggregate!
    "fetch data from the table: \"vectric.upgrades_product_type_feature\" using primary key columns"
    upgradeProductTypeFeatureById(upgradeId: bigint!): vectric_upgrades_product_type_feature
    "An array relationship"
    upgradeProductTypeFeatures(
        "distinct select on columns"
        distinct_on: [vectric_upgrades_product_type_feature_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrades_product_type_feature_order_by!],
        "filter the rows returned"
        where: vectric_upgrades_product_type_feature_bool_exp
    ): [vectric_upgrades_product_type_feature!]!
    "An aggregate relationship"
    upgradeProductTypeFeatures_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_upgrades_product_type_feature_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrades_product_type_feature_order_by!],
        "filter the rows returned"
        where: vectric_upgrades_product_type_feature_bool_exp
    ): vectric_upgrades_product_type_feature_aggregate!
    "An array relationship"
    upgradeTokens(
        "distinct select on columns"
        distinct_on: [vectric_upgrade_tokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrade_tokens_order_by!],
        "filter the rows returned"
        where: vectric_upgrade_tokens_bool_exp
    ): [vectric_upgrade_tokens!]!
    "fetch data from the table: \"vectric.upgrade_tokens\" using primary key columns"
    upgradeTokensById(token: String!): vectric_upgrade_tokens
    "fetch data from the table: \"vectric.upgrades_version_feature\" using primary key columns"
    upgradeVersionFeatureById(upgradeId: bigint!): vectric_upgrades_version_feature
    "fetch data from the table: \"vectric.upgrades_version_feature\""
    upgradeVersionFeatures(
        "distinct select on columns"
        distinct_on: [vectric_upgrades_version_feature_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrades_version_feature_order_by!],
        "filter the rows returned"
        where: vectric_upgrades_version_feature_bool_exp
    ): [vectric_upgrades_version_feature!]!
    "An aggregate relationship"
    upgradeVersionFeatures_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_upgrades_version_feature_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrades_version_feature_order_by!],
        "filter the rows returned"
        where: vectric_upgrades_version_feature_bool_exp
    ): vectric_upgrades_version_feature_aggregate!
    "fetch data from the table: \"vectric.usergroup_2019_waitlist\""
    userGroupWaitingListEntries(
        "distinct select on columns"
        distinct_on: [vectric_usergroup_2019_waitlist_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_usergroup_2019_waitlist_order_by!],
        "filter the rows returned"
        where: vectric_usergroup_2019_waitlist_bool_exp
    ): [vectric_usergroup_2019_waitlist!]!
    "fetch aggregated fields from the table: \"vectric.usergroup_2019_waitlist\""
    userGroupWaitingListEntries_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_usergroup_2019_waitlist_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_usergroup_2019_waitlist_order_by!],
        "filter the rows returned"
        where: vectric_usergroup_2019_waitlist_bool_exp
    ): vectric_usergroup_2019_waitlist_aggregate!
    "fetch data from the table: \"vectric.usergroup_2019_waitlist\" using primary key columns"
    userGroupWaitingListEntryById(attendeeid: bigint!): vectric_usergroup_2019_waitlist
    validateInvitationToken(token: String!): ValidateInvitationToken
    validateVerificationToken(token: String!): ValidateVerificationToken!
    "fetch data from the table: \"vectric.active_memberships\""
    vectric_active_memberships(
        "distinct select on columns"
        distinct_on: [vectric_active_memberships_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_active_memberships_order_by!],
        "filter the rows returned"
        where: vectric_active_memberships_bool_exp
    ): [vectric_active_memberships!]!
    "fetch aggregated fields from the table: \"vectric.active_memberships\""
    vectric_active_memberships_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_active_memberships_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_active_memberships_order_by!],
        "filter the rows returned"
        where: vectric_active_memberships_bool_exp
    ): vectric_active_memberships_aggregate!
    "fetch data from the table: \"vectric.active_upgrades\""
    vectric_active_upgrades(
        "distinct select on columns"
        distinct_on: [vectric_active_upgrades_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_active_upgrades_order_by!],
        "filter the rows returned"
        where: vectric_active_upgrades_bool_exp
    ): [vectric_active_upgrades!]!
    "fetch aggregated fields from the table: \"vectric.active_upgrades\""
    vectric_active_upgrades_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_active_upgrades_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_active_upgrades_order_by!],
        "filter the rows returned"
        where: vectric_active_upgrades_bool_exp
    ): vectric_active_upgrades_aggregate!
    "fetch aggregated fields from the table: \"vectric.allocatable_bundles\""
    vectric_allocatable_bundles_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_allocatable_bundles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocatable_bundles_order_by!],
        "filter the rows returned"
        where: vectric_allocatable_bundles_bool_exp
    ): vectric_allocatable_bundles_aggregate!
    "fetch aggregated fields from the table: \"vectric.allocated_bundles\""
    vectric_allocated_bundles_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_allocated_bundles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocated_bundles_order_by!],
        "filter the rows returned"
        where: vectric_allocated_bundles_bool_exp
    ): vectric_allocated_bundles_aggregate!
    "fetch data from the table: \"vectric.allocation_summary_file_type\""
    vectric_allocation_summary_file_type(
        "distinct select on columns"
        distinct_on: [vectric_allocation_summary_file_type_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocation_summary_file_type_order_by!],
        "filter the rows returned"
        where: vectric_allocation_summary_file_type_bool_exp
    ): [vectric_allocation_summary_file_type!]!
    "fetch aggregated fields from the table: \"vectric.allocation_summary_file_type\""
    vectric_allocation_summary_file_type_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_allocation_summary_file_type_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocation_summary_file_type_order_by!],
        "filter the rows returned"
        where: vectric_allocation_summary_file_type_bool_exp
    ): vectric_allocation_summary_file_type_aggregate!
    "fetch data from the table: \"vectric.allocation_summary_file_type\" using primary key columns"
    vectric_allocation_summary_file_type_by_pk(type: String!): vectric_allocation_summary_file_type
    "fetch data from the table: \"vectric.continents\""
    vectric_continents(
        "distinct select on columns"
        distinct_on: [vectric_continents_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_continents_order_by!],
        "filter the rows returned"
        where: vectric_continents_bool_exp
    ): [vectric_continents!]!
    "fetch aggregated fields from the table: \"vectric.continents\""
    vectric_continents_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_continents_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_continents_order_by!],
        "filter the rows returned"
        where: vectric_continents_bool_exp
    ): vectric_continents_aggregate!
    "fetch data from the table: \"vectric.continents\" using primary key columns"
    vectric_continents_by_pk(
        "Continent code"
        code: bpchar!
    ): vectric_continents
    "fetch aggregated fields from the table: \"vectric.customer_area\""
    vectric_customer_area_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_customer_area_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_area_order_by!],
        "filter the rows returned"
        where: vectric_customer_area_bool_exp
    ): vectric_customer_area_aggregate!
    "fetch aggregated fields from the table: \"vectric.customer_area_file\""
    vectric_customer_area_file_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_customer_area_file_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_area_file_order_by!],
        "filter the rows returned"
        where: vectric_customer_area_file_bool_exp
    ): vectric_customer_area_file_aggregate!
    "fetch aggregated fields from the table: \"vectric.customer_status\""
    vectric_customer_status_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_customer_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_status_order_by!],
        "filter the rows returned"
        where: vectric_customer_status_bool_exp
    ): vectric_customer_status_aggregate!
    "fetch data from the table: \"vectric.download\""
    vectric_download(
        "distinct select on columns"
        distinct_on: [vectric_download_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_download_order_by!],
        "filter the rows returned"
        where: vectric_download_bool_exp
    ): [vectric_download!]!
    "fetch aggregated fields from the table: \"vectric.download\""
    vectric_download_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_download_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_download_order_by!],
        "filter the rows returned"
        where: vectric_download_bool_exp
    ): vectric_download_aggregate!
    "fetch data from the table: \"vectric.download_record\""
    vectric_download_record(
        "distinct select on columns"
        distinct_on: [vectric_download_record_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_download_record_order_by!],
        "filter the rows returned"
        where: vectric_download_record_bool_exp
    ): [vectric_download_record!]!
    "fetch aggregated fields from the table: \"vectric.download_record\""
    vectric_download_record_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_download_record_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_download_record_order_by!],
        "filter the rows returned"
        where: vectric_download_record_bool_exp
    ): vectric_download_record_aggregate!
    "fetch data from the table: \"vectric.download_record\" using primary key columns"
    vectric_download_record_by_pk(id: bigint!): vectric_download_record
    "fetch aggregated fields from the table: \"vectric.enhancement_tokens\""
    vectric_enhancement_tokens_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_enhancement_tokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_enhancement_tokens_order_by!],
        "filter the rows returned"
        where: vectric_enhancement_tokens_bool_exp
    ): vectric_enhancement_tokens_aggregate!
    "fetch data from the table: \"vectric.enhancement_tokens\" using primary key columns"
    vectric_enhancement_tokens_by_pk(token: String!): vectric_enhancement_tokens
    "fetch data from the table: \"vectric.entitled_product_version_code_view\""
    vectric_entitled_product_version_code_view(
        "distinct select on columns"
        distinct_on: [vectric_entitled_product_version_code_view_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_entitled_product_version_code_view_order_by!],
        "filter the rows returned"
        where: vectric_entitled_product_version_code_view_bool_exp
    ): [vectric_entitled_product_version_code_view!]!
    "fetch aggregated fields from the table: \"vectric.entitled_product_version_code_view\""
    vectric_entitled_product_version_code_view_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_entitled_product_version_code_view_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_entitled_product_version_code_view_order_by!],
        "filter the rows returned"
        where: vectric_entitled_product_version_code_view_bool_exp
    ): vectric_entitled_product_version_code_view_aggregate!
    "fetch aggregated fields from the table: \"vectric.free_clipart_tokens\""
    vectric_free_clipart_tokens_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_free_clipart_tokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_free_clipart_tokens_order_by!],
        "filter the rows returned"
        where: vectric_free_clipart_tokens_bool_exp
    ): vectric_free_clipart_tokens_aggregate!
    "fetch aggregated fields from the table: \"vectric.freeclipart\""
    vectric_freeclipart_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_freeclipart_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_freeclipart_order_by!],
        "filter the rows returned"
        where: vectric_freeclipart_bool_exp
    ): vectric_freeclipart_aggregate!
    "fetch data from the table: \"vectric.freeclipart\" using primary key columns"
    vectric_freeclipart_by_pk(freeClipartId: bigint!): vectric_freeclipart
    "fetch aggregated fields from the table: \"vectric.freeclipart_category\""
    vectric_freeclipart_category_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_freeclipart_category_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_freeclipart_category_order_by!],
        "filter the rows returned"
        where: vectric_freeclipart_category_bool_exp
    ): vectric_freeclipart_category_aggregate!
    "fetch data from the table: \"vectric.freeclipart_category\" using primary key columns"
    vectric_freeclipart_category_by_pk(categoryId: bigint!): vectric_freeclipart_category
    "fetch data from the table: \"vectric.freeclipart_download_record\""
    vectric_freeclipart_download_record(
        "distinct select on columns"
        distinct_on: [vectric_freeclipart_download_record_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_freeclipart_download_record_order_by!],
        "filter the rows returned"
        where: vectric_freeclipart_download_record_bool_exp
    ): [vectric_freeclipart_download_record!]!
    "fetch aggregated fields from the table: \"vectric.freeclipart_download_record\""
    vectric_freeclipart_download_record_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_freeclipart_download_record_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_freeclipart_download_record_order_by!],
        "filter the rows returned"
        where: vectric_freeclipart_download_record_bool_exp
    ): vectric_freeclipart_download_record_aggregate!
    "fetch data from the table: \"vectric.freeclipart_download_record\" using primary key columns"
    vectric_freeclipart_download_record_by_pk(downloadId: bigint!): vectric_freeclipart_download_record
    "fetch data from the table: \"vectric.group_info\""
    vectric_group_info(
        "distinct select on columns"
        distinct_on: [vectric_group_info_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_group_info_order_by!],
        "filter the rows returned"
        where: vectric_group_info_bool_exp
    ): [vectric_group_info!]!
    "fetch aggregated fields from the table: \"vectric.group_info\""
    vectric_group_info_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_group_info_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_group_info_order_by!],
        "filter the rows returned"
        where: vectric_group_info_bool_exp
    ): vectric_group_info_aggregate!
    "fetch data from the table: \"vectric.group_roles\""
    vectric_group_roles(
        "distinct select on columns"
        distinct_on: [vectric_group_roles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_group_roles_order_by!],
        "filter the rows returned"
        where: vectric_group_roles_bool_exp
    ): [vectric_group_roles!]!
    "fetch aggregated fields from the table: \"vectric.group_roles\""
    vectric_group_roles_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_group_roles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_group_roles_order_by!],
        "filter the rows returned"
        where: vectric_group_roles_bool_exp
    ): vectric_group_roles_aggregate!
    "fetch data from the table: \"vectric.group_roles\" using primary key columns"
    vectric_group_roles_by_pk(id: Int!): vectric_group_roles
    "fetch data from the table: \"vectric.group_user_role\""
    vectric_group_user_role(
        "distinct select on columns"
        distinct_on: [vectric_group_user_role_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_group_user_role_order_by!],
        "filter the rows returned"
        where: vectric_group_user_role_bool_exp
    ): [vectric_group_user_role!]!
    "fetch aggregated fields from the table: \"vectric.group_user_role\""
    vectric_group_user_role_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_group_user_role_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_group_user_role_order_by!],
        "filter the rows returned"
        where: vectric_group_user_role_bool_exp
    ): vectric_group_user_role_aggregate!
    "fetch data from the table: \"vectric.group_user_role\" using primary key columns"
    vectric_group_user_role_by_pk(customer_id: bigint!, group_id: Int!): vectric_group_user_role
    "fetch data from the table: \"vectric.groups\""
    vectric_groups(
        "distinct select on columns"
        distinct_on: [vectric_groups_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_groups_order_by!],
        "filter the rows returned"
        where: vectric_groups_bool_exp
    ): [vectric_groups!]!
    "fetch aggregated fields from the table: \"vectric.groups\""
    vectric_groups_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_groups_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_groups_order_by!],
        "filter the rows returned"
        where: vectric_groups_bool_exp
    ): vectric_groups_aggregate!
    "fetch data from the table: \"vectric.groups\" using primary key columns"
    vectric_groups_by_pk(id: Int!): vectric_groups
    "fetch data from the table: \"vectric.language_codes\""
    vectric_language_codes(
        "distinct select on columns"
        distinct_on: [vectric_language_codes_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_language_codes_order_by!],
        "filter the rows returned"
        where: vectric_language_codes_bool_exp
    ): [vectric_language_codes!]!
    "fetch aggregated fields from the table: \"vectric.language_codes\""
    vectric_language_codes_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_language_codes_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_language_codes_order_by!],
        "filter the rows returned"
        where: vectric_language_codes_bool_exp
    ): vectric_language_codes_aggregate!
    "fetch data from the table: \"vectric.language_codes\" using primary key columns"
    vectric_language_codes_by_pk(
        "ISO 639-2 Code"
        threeLetterCode: bpchar!
    ): vectric_language_codes
    "fetch data from the table: \"vectric.licence_log\""
    vectric_licence_log(
        "distinct select on columns"
        distinct_on: [vectric_licence_log_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_licence_log_order_by!],
        "filter the rows returned"
        where: vectric_licence_log_bool_exp
    ): [vectric_licence_log!]!
    "fetch aggregated fields from the table: \"vectric.licence_log\""
    vectric_licence_log_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_licence_log_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_licence_log_order_by!],
        "filter the rows returned"
        where: vectric_licence_log_bool_exp
    ): vectric_licence_log_aggregate!
    "fetch data from the table: \"vectric.licence_log\" using primary key columns"
    vectric_licence_log_by_pk(licenceId: bigint!): vectric_licence_log
    "fetch aggregated fields from the table: \"vectric.linkshortener_links\""
    vectric_linkshortener_links_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_linkshortener_links_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_linkshortener_links_order_by!],
        "filter the rows returned"
        where: vectric_linkshortener_links_bool_exp
    ): vectric_linkshortener_links_aggregate!
    "fetch data from the table: \"vectric.makerspace_requests\""
    vectric_makerspace_requests(
        "distinct select on columns"
        distinct_on: [vectric_makerspace_requests_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_makerspace_requests_order_by!],
        "filter the rows returned"
        where: vectric_makerspace_requests_bool_exp
    ): [vectric_makerspace_requests!]!
    "fetch aggregated fields from the table: \"vectric.makerspace_requests\""
    vectric_makerspace_requests_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_makerspace_requests_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_makerspace_requests_order_by!],
        "filter the rows returned"
        where: vectric_makerspace_requests_bool_exp
    ): vectric_makerspace_requests_aggregate!
    "fetch data from the table: \"vectric.makerspace_requests\" using primary key columns"
    vectric_makerspace_requests_by_pk(requestId: bigint!): vectric_makerspace_requests
    "fetch data from the table: \"vectric.membership_invitation_status\""
    vectric_membership_invitation_status(
        "distinct select on columns"
        distinct_on: [vectric_membership_invitation_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_invitation_status_order_by!],
        "filter the rows returned"
        where: vectric_membership_invitation_status_bool_exp
    ): [vectric_membership_invitation_status!]!
    "fetch aggregated fields from the table: \"vectric.membership_invitation_status\""
    vectric_membership_invitation_status_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_membership_invitation_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_invitation_status_order_by!],
        "filter the rows returned"
        where: vectric_membership_invitation_status_bool_exp
    ): vectric_membership_invitation_status_aggregate!
    "fetch data from the table: \"vectric.membership_invitation_status\" using primary key columns"
    vectric_membership_invitation_status_by_pk(status: String!): vectric_membership_invitation_status
    "fetch data from the table: \"vectric.membership_roles\""
    vectric_membership_roles(
        "distinct select on columns"
        distinct_on: [vectric_membership_roles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_roles_order_by!],
        "filter the rows returned"
        where: vectric_membership_roles_bool_exp
    ): [vectric_membership_roles!]!
    "fetch aggregated fields from the table: \"vectric.membership_roles\""
    vectric_membership_roles_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_membership_roles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_roles_order_by!],
        "filter the rows returned"
        where: vectric_membership_roles_bool_exp
    ): vectric_membership_roles_aggregate!
    "fetch data from the table: \"vectric.membership_roles\" using primary key columns"
    vectric_membership_roles_by_pk(role: String!): vectric_membership_roles
    "fetch data from the table: \"vectric.membership_status\""
    vectric_membership_status(
        "distinct select on columns"
        distinct_on: [vectric_membership_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_status_order_by!],
        "filter the rows returned"
        where: vectric_membership_status_bool_exp
    ): [vectric_membership_status!]!
    "fetch aggregated fields from the table: \"vectric.membership_status\""
    vectric_membership_status_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_membership_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_status_order_by!],
        "filter the rows returned"
        where: vectric_membership_status_bool_exp
    ): vectric_membership_status_aggregate!
    "fetch data from the table: \"vectric.membership_status\" using primary key columns"
    vectric_membership_status_by_pk(status: String!): vectric_membership_status
    "fetch data from the table: \"vectric.oauth_client_details\""
    vectric_oauth_client_details(
        "distinct select on columns"
        distinct_on: [vectric_oauth_client_details_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oauth_client_details_order_by!],
        "filter the rows returned"
        where: vectric_oauth_client_details_bool_exp
    ): [vectric_oauth_client_details!]!
    "fetch aggregated fields from the table: \"vectric.oauth_client_details\""
    vectric_oauth_client_details_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oauth_client_details_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oauth_client_details_order_by!],
        "filter the rows returned"
        where: vectric_oauth_client_details_bool_exp
    ): vectric_oauth_client_details_aggregate!
    "fetch data from the table: \"vectric.oauth_client_details\" using primary key columns"
    vectric_oauth_client_details_by_pk(client_id: String!): vectric_oauth_client_details
    "fetch data from the table: \"vectric.oem_detailed_products\""
    vectric_oem_detailed_products(
        "distinct select on columns"
        distinct_on: [vectric_oem_detailed_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_detailed_products_order_by!],
        "filter the rows returned"
        where: vectric_oem_detailed_products_bool_exp
    ): [vectric_oem_detailed_products!]!
    "fetch aggregated fields from the table: \"vectric.oem_detailed_products\""
    vectric_oem_detailed_products_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_detailed_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_detailed_products_order_by!],
        "filter the rows returned"
        where: vectric_oem_detailed_products_bool_exp
    ): vectric_oem_detailed_products_aggregate!
    "fetch data from the table: \"vectric.oem_detailed_products\" using primary key columns"
    vectric_oem_detailed_products_by_pk(id: bigint!): vectric_oem_detailed_products
    "fetch data from the table: \"vectric.oem_fastspring_item_bundle\""
    vectric_oem_fastspring_item_bundle(
        "distinct select on columns"
        distinct_on: [vectric_oem_fastspring_item_bundle_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_fastspring_item_bundle_order_by!],
        "filter the rows returned"
        where: vectric_oem_fastspring_item_bundle_bool_exp
    ): [vectric_oem_fastspring_item_bundle!]!
    "fetch aggregated fields from the table: \"vectric.oem_fastspring_item_bundle\""
    vectric_oem_fastspring_item_bundle_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_fastspring_item_bundle_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_fastspring_item_bundle_order_by!],
        "filter the rows returned"
        where: vectric_oem_fastspring_item_bundle_bool_exp
    ): vectric_oem_fastspring_item_bundle_aggregate!
    "fetch data from the table: \"vectric.oem_fastspring_item_bundle\" using primary key columns"
    vectric_oem_fastspring_item_bundle_by_pk(itemBundleId: bigint!): vectric_oem_fastspring_item_bundle
    "fetch data from the table: \"vectric.oem_invite_status\""
    vectric_oem_invite_status(
        "distinct select on columns"
        distinct_on: [vectric_oem_invite_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_invite_status_order_by!],
        "filter the rows returned"
        where: vectric_oem_invite_status_bool_exp
    ): [vectric_oem_invite_status!]!
    "fetch aggregated fields from the table: \"vectric.oem_invite_status\""
    vectric_oem_invite_status_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_invite_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_invite_status_order_by!],
        "filter the rows returned"
        where: vectric_oem_invite_status_bool_exp
    ): vectric_oem_invite_status_aggregate!
    "fetch data from the table: \"vectric.oem_invite_status\" using primary key columns"
    vectric_oem_invite_status_by_pk(statusId: bigint!): vectric_oem_invite_status
    "fetch aggregated fields from the table: \"vectric.oem_licence_allocation_type\""
    vectric_oem_licence_allocation_type_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_licence_allocation_type_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_licence_allocation_type_order_by!],
        "filter the rows returned"
        where: vectric_oem_licence_allocation_type_bool_exp
    ): vectric_oem_licence_allocation_type_aggregate!
    "fetch data from the table: \"vectric.oem_licence_allocation_type\" using primary key columns"
    vectric_oem_licence_allocation_type_by_pk(allocationTypeId: bigint!): vectric_oem_licence_allocation_type
    "fetch aggregated fields from the table: \"vectric.oem_partners\""
    vectric_oem_partners_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_partners_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_partners_order_by!],
        "filter the rows returned"
        where: vectric_oem_partners_bool_exp
    ): vectric_oem_partners_aggregate!
    "fetch aggregated fields from the table: \"vectric.oem_products\""
    vectric_oem_products_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_products_order_by!],
        "filter the rows returned"
        where: vectric_oem_products_bool_exp
    ): vectric_oem_products_aggregate!
    "fetch aggregated fields from the table: \"vectric.oem_staff_admin_ownership\""
    vectric_oem_staff_admin_ownership_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_staff_admin_ownership_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_staff_admin_ownership_order_by!],
        "filter the rows returned"
        where: vectric_oem_staff_admin_ownership_bool_exp
    ): vectric_oem_staff_admin_ownership_aggregate!
    "fetch aggregated fields from the table: \"vectric.organization_memberships_admin_access\""
    vectric_organization_memberships_admin_access_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_organization_memberships_admin_access_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_memberships_admin_access_order_by!],
        "filter the rows returned"
        where: vectric_organization_memberships_admin_access_bool_exp
    ): vectric_organization_memberships_admin_access_aggregate!
    "fetch aggregated fields from the table: \"vectric.organization_order_items\""
    vectric_organization_order_items_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_organization_order_items_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_order_items_order_by!],
        "filter the rows returned"
        where: vectric_organization_order_items_bool_exp
    ): vectric_organization_order_items_aggregate!
    "fetch aggregated fields from the table: \"vectric.organization_orders\""
    vectric_organization_orders_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_organization_orders_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_orders_order_by!],
        "filter the rows returned"
        where: vectric_organization_orders_bool_exp
    ): vectric_organization_orders_aggregate!
    "fetch data from the table: \"vectric.organization_types\""
    vectric_organization_types(
        "distinct select on columns"
        distinct_on: [vectric_organization_types_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_types_order_by!],
        "filter the rows returned"
        where: vectric_organization_types_bool_exp
    ): [vectric_organization_types!]!
    "fetch aggregated fields from the table: \"vectric.organization_types\""
    vectric_organization_types_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_organization_types_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_types_order_by!],
        "filter the rows returned"
        where: vectric_organization_types_bool_exp
    ): vectric_organization_types_aggregate!
    "fetch data from the table: \"vectric.organization_types\" using primary key columns"
    vectric_organization_types_by_pk(type: String!): vectric_organization_types
    "fetch aggregated fields from the table: \"vectric.products_clipartcollection_links\""
    vectric_products_clipartcollection_links_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_clipartcollection_links_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_clipartcollection_links_order_by!],
        "filter the rows returned"
        where: vectric_products_clipartcollection_links_bool_exp
    ): vectric_products_clipartcollection_links_aggregate!
    "fetch data from the table: \"vectric.products_clipartcollection_links\" using primary key columns"
    vectric_products_clipartcollection_links_by_pk(clipartCollectionLinkId: bigint!): vectric_products_clipartcollection_links
    "fetch aggregated fields from the table: \"vectric.products_enhancement_eligibility\""
    vectric_products_enhancement_eligibility_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_enhancement_eligibility_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_enhancement_eligibility_order_by!],
        "filter the rows returned"
        where: vectric_products_enhancement_eligibility_bool_exp
    ): vectric_products_enhancement_eligibility_aggregate!
    "fetch data from the table: \"vectric.products_enhancement_eligibility\" using primary key columns"
    vectric_products_enhancement_eligibility_by_pk(eligibilityId: bigint!): vectric_products_enhancement_eligibility
    "fetch aggregated fields from the table: \"vectric.products_freeclipart\""
    vectric_products_freeclipart_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_freeclipart_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_freeclipart_order_by!],
        "filter the rows returned"
        where: vectric_products_freeclipart_bool_exp
    ): vectric_products_freeclipart_aggregate!
    "fetch data from the table: \"vectric.products_freeclipart\" using primary key columns"
    vectric_products_freeclipart_by_pk(productFreeClipartId: bigint!): vectric_products_freeclipart
    "fetch data from the table: \"vectric.products_fulfilments\""
    vectric_products_fulfilments(
        "distinct select on columns"
        distinct_on: [vectric_products_fulfilments_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_fulfilments_order_by!],
        "filter the rows returned"
        where: vectric_products_fulfilments_bool_exp
    ): [vectric_products_fulfilments!]!
    "fetch aggregated fields from the table: \"vectric.products_fulfilments\""
    vectric_products_fulfilments_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_fulfilments_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_fulfilments_order_by!],
        "filter the rows returned"
        where: vectric_products_fulfilments_bool_exp
    ): vectric_products_fulfilments_aggregate!
    "fetch data from the table: \"vectric.products_fulfilments\" using primary key columns"
    vectric_products_fulfilments_by_pk(fulfilmentId: bigint!): vectric_products_fulfilments
    "fetch data from the table: \"vectric.products_fulfilmenttypes\""
    vectric_products_fulfilmenttypes(
        "distinct select on columns"
        distinct_on: [vectric_products_fulfilmenttypes_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_fulfilmenttypes_order_by!],
        "filter the rows returned"
        where: vectric_products_fulfilmenttypes_bool_exp
    ): [vectric_products_fulfilmenttypes!]!
    "fetch aggregated fields from the table: \"vectric.products_fulfilmenttypes\""
    vectric_products_fulfilmenttypes_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_fulfilmenttypes_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_fulfilmenttypes_order_by!],
        "filter the rows returned"
        where: vectric_products_fulfilmenttypes_bool_exp
    ): vectric_products_fulfilmenttypes_aggregate!
    "fetch data from the table: \"vectric.products_fulfilmenttypes\" using primary key columns"
    vectric_products_fulfilmenttypes_by_pk(fulfilmenttypeid: bigint!): vectric_products_fulfilmenttypes
    "fetch data from the table: \"vectric.products_product_fulfilments\""
    vectric_products_product_fulfilments(
        "distinct select on columns"
        distinct_on: [vectric_products_product_fulfilments_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_product_fulfilments_order_by!],
        "filter the rows returned"
        where: vectric_products_product_fulfilments_bool_exp
    ): [vectric_products_product_fulfilments!]!
    "fetch aggregated fields from the table: \"vectric.products_product_fulfilments\""
    vectric_products_product_fulfilments_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_product_fulfilments_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_product_fulfilments_order_by!],
        "filter the rows returned"
        where: vectric_products_product_fulfilments_bool_exp
    ): vectric_products_product_fulfilments_aggregate!
    "fetch data from the table: \"vectric.products_product_fulfilments\" using primary key columns"
    vectric_products_product_fulfilments_by_pk(productfulfilmentid: bigint!): vectric_products_product_fulfilments
    "fetch data from the table: \"vectric.products_product_licence_type\""
    vectric_products_product_licence_type(
        "distinct select on columns"
        distinct_on: [vectric_products_product_licence_type_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_product_licence_type_order_by!],
        "filter the rows returned"
        where: vectric_products_product_licence_type_bool_exp
    ): [vectric_products_product_licence_type!]!
    "fetch aggregated fields from the table: \"vectric.products_product_licence_type\""
    vectric_products_product_licence_type_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_product_licence_type_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_product_licence_type_order_by!],
        "filter the rows returned"
        where: vectric_products_product_licence_type_bool_exp
    ): vectric_products_product_licence_type_aggregate!
    "fetch data from the table: \"vectric.products_product_licence_type\" using primary key columns"
    vectric_products_product_licence_type_by_pk(type: String!): vectric_products_product_licence_type
    "fetch aggregated fields from the table: \"vectric.products_products\""
    vectric_products_products_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_products_order_by!],
        "filter the rows returned"
        where: vectric_products_products_bool_exp
    ): vectric_products_products_aggregate!
    "fetch aggregated fields from the table: \"vectric.products_producttype\""
    vectric_products_producttype_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_producttype_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_producttype_order_by!],
        "filter the rows returned"
        where: vectric_products_producttype_bool_exp
    ): vectric_products_producttype_aggregate!
    "fetch aggregated fields from the table: \"vectric.products_upgrade_eligibility\""
    vectric_products_upgrade_eligibility_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_upgrade_eligibility_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_upgrade_eligibility_order_by!],
        "filter the rows returned"
        where: vectric_products_upgrade_eligibility_bool_exp
    ): vectric_products_upgrade_eligibility_aggregate!
    "fetch data from the table: \"vectric.sales_customerupdates\""
    vectric_sales_customerupdates(
        "distinct select on columns"
        distinct_on: [vectric_sales_customerupdates_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_customerupdates_order_by!],
        "filter the rows returned"
        where: vectric_sales_customerupdates_bool_exp
    ): [vectric_sales_customerupdates!]!
    "fetch aggregated fields from the table: \"vectric.sales_customerupdates\""
    vectric_sales_customerupdates_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_customerupdates_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_customerupdates_order_by!],
        "filter the rows returned"
        where: vectric_sales_customerupdates_bool_exp
    ): vectric_sales_customerupdates_aggregate!
    "fetch data from the table: \"vectric.sales_customerupdates\" using primary key columns"
    vectric_sales_customerupdates_by_pk(customerUpdateId: bigint!): vectric_sales_customerupdates
    "fetch aggregated fields from the table: \"vectric.sales_oemlicences\""
    vectric_sales_oemlicences_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_oemlicences_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_oemlicences_order_by!],
        "filter the rows returned"
        where: vectric_sales_oemlicences_bool_exp
    ): vectric_sales_oemlicences_aggregate!
    "fetch aggregated fields from the table: \"vectric.sales_orders\""
    vectric_sales_orders_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_orders_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_orders_order_by!],
        "filter the rows returned"
        where: vectric_sales_orders_bool_exp
    ): vectric_sales_orders_aggregate!
    "fetch aggregated fields from the table: \"vectric.sales_salesitem_products\""
    vectric_sales_salesitem_products_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_salesitem_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_salesitem_products_order_by!],
        "filter the rows returned"
        where: vectric_sales_salesitem_products_bool_exp
    ): vectric_sales_salesitem_products_aggregate!
    "fetch data from the table: \"vectric.sales_salesitemproduct_status\""
    vectric_sales_salesitemproduct_status(
        "distinct select on columns"
        distinct_on: [vectric_sales_salesitemproduct_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_salesitemproduct_status_order_by!],
        "filter the rows returned"
        where: vectric_sales_salesitemproduct_status_bool_exp
    ): [vectric_sales_salesitemproduct_status!]!
    "fetch aggregated fields from the table: \"vectric.sales_salesitemproduct_status\""
    vectric_sales_salesitemproduct_status_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_salesitemproduct_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_salesitemproduct_status_order_by!],
        "filter the rows returned"
        where: vectric_sales_salesitemproduct_status_bool_exp
    ): vectric_sales_salesitemproduct_status_aggregate!
    "fetch data from the table: \"vectric.sales_salesitemproduct_status\" using primary key columns"
    vectric_sales_salesitemproduct_status_by_pk(statusid: bigint!): vectric_sales_salesitemproduct_status
    "fetch aggregated fields from the table: \"vectric.sales_salesitems\""
    vectric_sales_salesitems_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_salesitems_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_salesitems_order_by!],
        "filter the rows returned"
        where: vectric_sales_salesitems_bool_exp
    ): vectric_sales_salesitems_aggregate!
    "fetch aggregated fields from the table: \"vectric.security_emailverificationtokens\""
    vectric_security_emailverificationtokens_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_security_emailverificationtokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_emailverificationtokens_order_by!],
        "filter the rows returned"
        where: vectric_security_emailverificationtokens_bool_exp
    ): vectric_security_emailverificationtokens_aggregate!
    "fetch data from the table: \"vectric.security_group_authorities\""
    vectric_security_group_authorities(
        "distinct select on columns"
        distinct_on: [vectric_security_group_authorities_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_group_authorities_order_by!],
        "filter the rows returned"
        where: vectric_security_group_authorities_bool_exp
    ): [vectric_security_group_authorities!]!
    "fetch aggregated fields from the table: \"vectric.security_group_authorities\""
    vectric_security_group_authorities_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_security_group_authorities_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_group_authorities_order_by!],
        "filter the rows returned"
        where: vectric_security_group_authorities_bool_exp
    ): vectric_security_group_authorities_aggregate!
    "fetch aggregated fields from the table: \"vectric.security_group_members\""
    vectric_security_group_members_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_security_group_members_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_group_members_order_by!],
        "filter the rows returned"
        where: vectric_security_group_members_bool_exp
    ): vectric_security_group_members_aggregate!
    "fetch aggregated fields from the table: \"vectric.security_passwordresettokens\""
    vectric_security_passwordresettokens_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_security_passwordresettokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_passwordresettokens_order_by!],
        "filter the rows returned"
        where: vectric_security_passwordresettokens_bool_exp
    ): vectric_security_passwordresettokens_aggregate!
    "fetch aggregated fields from the table: \"vectric.security_userinvitations\""
    vectric_security_userinvitations_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_security_userinvitations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_userinvitations_order_by!],
        "filter the rows returned"
        where: vectric_security_userinvitations_bool_exp
    ): vectric_security_userinvitations_aggregate!
    "fetch data from the table: \"vectric.security_userinvitations\" using primary key columns"
    vectric_security_userinvitations_by_pk(token: String!): vectric_security_userinvitations
    "fetch aggregated fields from the table: \"vectric.security_users\""
    vectric_security_users_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_security_users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_users_order_by!],
        "filter the rows returned"
        where: vectric_security_users_bool_exp
    ): vectric_security_users_aggregate!
    "fetch data from the table: \"vectric.security_users\" using primary key columns"
    vectric_security_users_by_pk(username: String!): vectric_security_users
    "fetch data from the table: \"vectric.subscription_contract_status\""
    vectric_subscription_contract_status(
        "distinct select on columns"
        distinct_on: [vectric_subscription_contract_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_subscription_contract_status_order_by!],
        "filter the rows returned"
        where: vectric_subscription_contract_status_bool_exp
    ): [vectric_subscription_contract_status!]!
    "fetch aggregated fields from the table: \"vectric.subscription_contract_status\""
    vectric_subscription_contract_status_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_subscription_contract_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_subscription_contract_status_order_by!],
        "filter the rows returned"
        where: vectric_subscription_contract_status_bool_exp
    ): vectric_subscription_contract_status_aggregate!
    "fetch data from the table: \"vectric.subscription_contract_status\" using primary key columns"
    vectric_subscription_contract_status_by_pk(status: String!): vectric_subscription_contract_status
    "fetch data from the table: \"vectric.subscription_contracts\""
    vectric_subscription_contracts(
        "distinct select on columns"
        distinct_on: [vectric_subscription_contracts_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_subscription_contracts_order_by!],
        "filter the rows returned"
        where: vectric_subscription_contracts_bool_exp
    ): [vectric_subscription_contracts!]!
    "fetch aggregated fields from the table: \"vectric.subscription_contracts\""
    vectric_subscription_contracts_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_subscription_contracts_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_subscription_contracts_order_by!],
        "filter the rows returned"
        where: vectric_subscription_contracts_bool_exp
    ): vectric_subscription_contracts_aggregate!
    "fetch data from the table: \"vectric.subscription_contracts\" using primary key columns"
    vectric_subscription_contracts_by_pk(subscriptionContractId: Int!): vectric_subscription_contracts
    "fetch data from the table: \"vectric.subscription_events\""
    vectric_subscription_events(
        "distinct select on columns"
        distinct_on: [vectric_subscription_events_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_subscription_events_order_by!],
        "filter the rows returned"
        where: vectric_subscription_events_bool_exp
    ): [vectric_subscription_events!]!
    "fetch aggregated fields from the table: \"vectric.subscription_events\""
    vectric_subscription_events_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_subscription_events_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_subscription_events_order_by!],
        "filter the rows returned"
        where: vectric_subscription_events_bool_exp
    ): vectric_subscription_events_aggregate!
    "fetch data from the table: \"vectric.subscription_events\" using primary key columns"
    vectric_subscription_events_by_pk(eventId: Int!): vectric_subscription_events
    "fetch aggregated fields from the table: \"vectric.update_requests\""
    vectric_update_requests_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_update_requests_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_update_requests_order_by!],
        "filter the rows returned"
        where: vectric_update_requests_bool_exp
    ): vectric_update_requests_aggregate!
    "fetch aggregated fields from the table: \"vectric.upgrade_tokens\""
    vectric_upgrade_tokens_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_upgrade_tokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrade_tokens_order_by!],
        "filter the rows returned"
        where: vectric_upgrade_tokens_bool_exp
    ): vectric_upgrade_tokens_aggregate!
    "fetch data from the table: \"vectric.version_code\""
    vectric_version_code(
        "distinct select on columns"
        distinct_on: [vectric_version_code_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_version_code_order_by!],
        "filter the rows returned"
        where: vectric_version_code_bool_exp
    ): [vectric_version_code!]!
    "fetch aggregated fields from the table: \"vectric.version_code\""
    vectric_version_code_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_version_code_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_version_code_order_by!],
        "filter the rows returned"
        where: vectric_version_code_bool_exp
    ): vectric_version_code_aggregate!
    "fetch data from the table: \"vectric.version_code\" using primary key columns"
    vectric_version_code_by_pk(versionCodeId: bigint!): vectric_version_code
    "fetch data from the table: \"vectric.products_versioncodes\" using primary key columns"
    versionCodeById(versioncodeid: bigint!): vectric_products_versioncodes
    "fetch data from the table: \"vectric.products_versioncodes\""
    versionCodes(
        "distinct select on columns"
        distinct_on: [vectric_products_versioncodes_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_versioncodes_order_by!],
        "filter the rows returned"
        where: vectric_products_versioncodes_bool_exp
    ): [vectric_products_versioncodes!]!
    "fetch aggregated fields from the table: \"vectric.products_versioncodes\""
    versionCodes_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_versioncodes_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_versioncodes_order_by!],
        "filter the rows returned"
        where: vectric_products_versioncodes_bool_exp
    ): vectric_products_versioncodes_aggregate!
    "fetch data from the table: \"vectric.customer_zd_uploads\""
    zendeskUploads(
        "distinct select on columns"
        distinct_on: [vectric_customer_zd_uploads_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_zd_uploads_order_by!],
        "filter the rows returned"
        where: vectric_customer_zd_uploads_bool_exp
    ): [vectric_customer_zd_uploads!]!
    "fetch data from the table: \"vectric.customer_zd_uploads\" using primary key columns"
    zendeskUploadsById(zdUploadId: bigint!): vectric_customer_zd_uploads
    "fetch aggregated fields from the table: \"vectric.customer_zd_uploads\""
    zendeskUploads_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_customer_zd_uploads_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_zd_uploads_order_by!],
        "filter the rows returned"
        where: vectric_customer_zd_uploads_bool_exp
    ): vectric_customer_zd_uploads_aggregate!
}

type subscription_root {
    "fetch data from the table: \"vectric.usergroup_2019_attendees\" using primary key columns"
    UserGroupAttendeeById(attendeeid: bigint!): vectric_usergroup_2019_attendees
    "fetch data from the table: \"vectric.usergroup_2019_attendees\""
    UserGroupAttendees(
        "distinct select on columns"
        distinct_on: [vectric_usergroup_2019_attendees_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_usergroup_2019_attendees_order_by!],
        "filter the rows returned"
        where: vectric_usergroup_2019_attendees_bool_exp
    ): [vectric_usergroup_2019_attendees!]!
    "fetch aggregated fields from the table: \"vectric.usergroup_2019_attendees\""
    UserGroupAttendees_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_usergroup_2019_attendees_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_usergroup_2019_attendees_order_by!],
        "filter the rows returned"
        where: vectric_usergroup_2019_attendees_bool_exp
    ): vectric_usergroup_2019_attendees_aggregate!
    "fetch data from the table: \"vectric.allocatable_bundles\""
    allocatableBundles(
        "distinct select on columns"
        distinct_on: [vectric_allocatable_bundles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocatable_bundles_order_by!],
        "filter the rows returned"
        where: vectric_allocatable_bundles_bool_exp
    ): [vectric_allocatable_bundles!]!
    "fetch data from the table: \"vectric.allocatable_licence_count\""
    allocatableLicenceCount(
        "distinct select on columns"
        distinct_on: [vectric_allocatable_licence_count_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocatable_licence_count_order_by!],
        "filter the rows returned"
        where: vectric_allocatable_licence_count_bool_exp
    ): [vectric_allocatable_licence_count!]!
    "fetch aggregated fields from the table: \"vectric.allocatable_licence_count\""
    allocatableLicenceCount_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_allocatable_licence_count_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocatable_licence_count_order_by!],
        "filter the rows returned"
        where: vectric_allocatable_licence_count_bool_exp
    ): vectric_allocatable_licence_count_aggregate!
    "fetch data from the table: \"vectric.allocated_bundles\""
    allocatedBundles(
        "distinct select on columns"
        distinct_on: [vectric_allocated_bundles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocated_bundles_order_by!],
        "filter the rows returned"
        where: vectric_allocated_bundles_bool_exp
    ): [vectric_allocated_bundles!]!
    "fetch data from the table: \"vectric.allocation_summary\""
    allocationSummaries(
        "distinct select on columns"
        distinct_on: [vectric_allocation_summary_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocation_summary_order_by!],
        "filter the rows returned"
        where: vectric_allocation_summary_bool_exp
    ): [vectric_allocation_summary!]!
    "fetch data from the table: \"vectric.allocation_summary\" using primary key columns"
    allocationSummaryById(id: Int!): vectric_allocation_summary
    "fetch aggregated fields from the table: \"vectric.allocation_summary\""
    allocationSummary_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_allocation_summary_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocation_summary_order_by!],
        "filter the rows returned"
        where: vectric_allocation_summary_bool_exp
    ): vectric_allocation_summary_aggregate!
    "fetch data from the table: \"vectric.owned_item_assignments\" using primary key columns"
    assignment(assignment_id: Int!): vectric_owned_item_assignments
    "fetch data from the table: \"vectric.owned_item_assignments\""
    assignments(
        "distinct select on columns"
        distinct_on: [vectric_owned_item_assignments_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_owned_item_assignments_order_by!],
        "filter the rows returned"
        where: vectric_owned_item_assignments_bool_exp
    ): [vectric_owned_item_assignments!]!
    "fetch aggregated fields from the table: \"vectric.owned_item_assignments\""
    assignments_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_owned_item_assignments_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_owned_item_assignments_order_by!],
        "filter the rows returned"
        where: vectric_owned_item_assignments_bool_exp
    ): vectric_owned_item_assignments_aggregate!
    "fetch data from the table: \"vectric.products_clipartcollection_links\""
    clipartCollection(
        "distinct select on columns"
        distinct_on: [vectric_products_clipartcollection_links_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_clipartcollection_links_order_by!],
        "filter the rows returned"
        where: vectric_products_clipartcollection_links_bool_exp
    ): [vectric_products_clipartcollection_links!]!
    "fetch data from the table: \"vectric.countries\""
    countries(
        "distinct select on columns"
        distinct_on: [vectric_countries_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_countries_order_by!],
        "filter the rows returned"
        where: vectric_countries_bool_exp
    ): [vectric_countries!]!
    "fetch aggregated fields from the table: \"vectric.countries\""
    countries_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_countries_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_countries_order_by!],
        "filter the rows returned"
        where: vectric_countries_bool_exp
    ): vectric_countries_aggregate!
    "fetch data from the table: \"vectric.countries\" using primary key columns"
    countryById(countryid: bigint!): vectric_countries
    "fetch data from the table: \"vectric.customer_area\""
    customerArea(
        "distinct select on columns"
        distinct_on: [vectric_customer_area_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_area_order_by!],
        "filter the rows returned"
        where: vectric_customer_area_bool_exp
    ): [vectric_customer_area!]!
    "fetch data from the table: \"vectric.customer_area\" using primary key columns"
    customerAreaByPk(customerAreaId: bigint!): vectric_customer_area
    "fetch data from the table: \"vectric.customer_area_file\""
    customerAreaFile(
        "distinct select on columns"
        distinct_on: [vectric_customer_area_file_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_area_file_order_by!],
        "filter the rows returned"
        where: vectric_customer_area_file_bool_exp
    ): [vectric_customer_area_file!]!
    "fetch data from the table: \"vectric.customer_area_file\" using primary key columns"
    customerAreaFileByPk(customerAreaFileId: bigint!): vectric_customer_area_file
    "fetch data from the table: \"vectric.sales_customers\" using primary key columns"
    customerById(customerId: bigint!): vectric_sales_customers
    "fetch data from the table: \"vectric.customer_responses\" using primary key columns"
    customerResponseById(customerresponseid: bigint!): vectric_customer_responses
    "fetch data from the table: \"vectric.customer_responses\""
    customerResponses(
        "distinct select on columns"
        distinct_on: [vectric_customer_responses_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_responses_order_by!],
        "filter the rows returned"
        where: vectric_customer_responses_bool_exp
    ): [vectric_customer_responses!]!
    "fetch aggregated fields from the table: \"vectric.customer_responses\""
    customerResponses_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_customer_responses_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_responses_order_by!],
        "filter the rows returned"
        where: vectric_customer_responses_bool_exp
    ): vectric_customer_responses_aggregate!
    "An array relationship"
    customerSales(
        "distinct select on columns"
        distinct_on: [vectric_customer_sales_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_sales_order_by!],
        "filter the rows returned"
        where: vectric_customer_sales_bool_exp
    ): [vectric_customer_sales!]!
    "An aggregate relationship"
    customerSales_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_customer_sales_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_sales_order_by!],
        "filter the rows returned"
        where: vectric_customer_sales_bool_exp
    ): vectric_customer_sales_aggregate!
    "fetch data from the table: \"vectric.customer_status\""
    customerStatus(
        "distinct select on columns"
        distinct_on: [vectric_customer_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_status_order_by!],
        "filter the rows returned"
        where: vectric_customer_status_bool_exp
    ): [vectric_customer_status!]!
    "fetch data from the table: \"vectric.customer_status\" using primary key columns"
    customerStatusById(statusId: bigint!): vectric_customer_status
    "fetch data from the table: \"vectric.sales_customers\""
    customers(
        "distinct select on columns"
        distinct_on: [vectric_sales_customers_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_customers_order_by!],
        "filter the rows returned"
        where: vectric_sales_customers_bool_exp
    ): [vectric_sales_customers!]!
    "fetch data from the table: \"vectric.download\" using primary key columns"
    downloadByPk(downloadId: String!): vectric_download
    "fetch data from the table: \"vectric.sales_velocitytemplate\" using primary key columns"
    emailTemplate(templateName: String!): vectric_sales_velocitytemplate
    "fetch aggregated fields from the table: \"vectric.sales_velocitytemplate\""
    emailTemplate_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_velocitytemplate_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_velocitytemplate_order_by!],
        "filter the rows returned"
        where: vectric_sales_velocitytemplate_bool_exp
    ): vectric_sales_velocitytemplate_aggregate!
    "fetch data from the table: \"vectric.sales_velocitytemplate\""
    emailTemplates(
        "distinct select on columns"
        distinct_on: [vectric_sales_velocitytemplate_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_velocitytemplate_order_by!],
        "filter the rows returned"
        where: vectric_sales_velocitytemplate_bool_exp
    ): [vectric_sales_velocitytemplate!]!
    "An array relationship"
    enhancementTokens(
        "distinct select on columns"
        distinct_on: [vectric_enhancement_tokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_enhancement_tokens_order_by!],
        "filter the rows returned"
        where: vectric_enhancement_tokens_bool_exp
    ): [vectric_enhancement_tokens!]!
    "fetch data from the table: \"vectric.entitled_products\" using primary key columns"
    entitledProduct(productId: Int!): vectric_entitled_products
    "fetch data from the table: \"vectric.entitled_products\""
    entitledProducts(
        "distinct select on columns"
        distinct_on: [vectric_entitled_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_entitled_products_order_by!],
        "filter the rows returned"
        where: vectric_entitled_products_bool_exp
    ): [vectric_entitled_products!]!
    "fetch aggregated fields from the table: \"vectric.entitled_products\""
    entitledProducts_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_entitled_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_entitled_products_order_by!],
        "filter the rows returned"
        where: vectric_entitled_products_bool_exp
    ): vectric_entitled_products_aggregate!
    "fetch data from the table: \"vectric.entitlements\" using primary key columns"
    entitlement(entitlementId: Int!): vectric_entitlements
    "fetch data from the table: \"vectric.entitlement_licences\" using primary key columns"
    entitlementLicence(entitlementLicenceId: Int!): vectric_entitlement_licences
    "fetch aggregated fields from the table: \"vectric.entitlement_licences\""
    entitlementLicence_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_entitlement_licences_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_entitlement_licences_order_by!],
        "filter the rows returned"
        where: vectric_entitlement_licences_bool_exp
    ): vectric_entitlement_licences_aggregate!
    "fetch data from the table: \"vectric.entitlement_licences\""
    entitlementLicences(
        "distinct select on columns"
        distinct_on: [vectric_entitlement_licences_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_entitlement_licences_order_by!],
        "filter the rows returned"
        where: vectric_entitlement_licences_bool_exp
    ): [vectric_entitlement_licences!]!
    "An array relationship"
    entitlements(
        "distinct select on columns"
        distinct_on: [vectric_entitlements_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_entitlements_order_by!],
        "filter the rows returned"
        where: vectric_entitlements_bool_exp
    ): [vectric_entitlements!]!
    "An aggregate relationship"
    entitlements_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_entitlements_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_entitlements_order_by!],
        "filter the rows returned"
        where: vectric_entitlements_bool_exp
    ): vectric_entitlements_aggregate!
    "fetch data from the table: \"vectric.oem_eval_request\" using primary key columns"
    evalRequestById(requestId: bigint!): vectric_oem_eval_request
    "fetch aggregated fields from the table: \"vectric.oem_eval_request\""
    evalRequest_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_eval_request_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_eval_request_order_by!],
        "filter the rows returned"
        where: vectric_oem_eval_request_bool_exp
    ): vectric_oem_eval_request_aggregate!
    "fetch data from the table: \"vectric.oem_eval_request\""
    evalRequests(
        "distinct select on columns"
        distinct_on: [vectric_oem_eval_request_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_eval_request_order_by!],
        "filter the rows returned"
        where: vectric_oem_eval_request_bool_exp
    ): [vectric_oem_eval_request!]!
    "fetch data from the table: \"vectric.freeclipart\""
    freeClipart(
        "distinct select on columns"
        distinct_on: [vectric_freeclipart_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_freeclipart_order_by!],
        "filter the rows returned"
        where: vectric_freeclipart_bool_exp
    ): [vectric_freeclipart!]!
    "fetch data from the table: \"vectric.freeclipart_category\""
    freeClipartCategory(
        "distinct select on columns"
        distinct_on: [vectric_freeclipart_category_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_freeclipart_category_order_by!],
        "filter the rows returned"
        where: vectric_freeclipart_category_bool_exp
    ): [vectric_freeclipart_category!]!
    "fetch data from the table: \"vectric.free_clipart_tokens\" using primary key columns"
    freeClipartTokenByPk(clipartToken: String!): vectric_free_clipart_tokens
    "An array relationship"
    freeClipartTokens(
        "distinct select on columns"
        distinct_on: [vectric_free_clipart_tokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_free_clipart_tokens_order_by!],
        "filter the rows returned"
        where: vectric_free_clipart_tokens_bool_exp
    ): [vectric_free_clipart_tokens!]!
    "fetch data from the table: \"vectric.organization_licence_scope\" using primary key columns"
    licenceScope(scope: String!): vectric_organization_licence_scope
    "fetch aggregated fields from the table: \"vectric.organization_licence_scope\""
    licenceScope_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_organization_licence_scope_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_licence_scope_order_by!],
        "filter the rows returned"
        where: vectric_organization_licence_scope_bool_exp
    ): vectric_organization_licence_scope_aggregate!
    "fetch data from the table: \"vectric.organization_licence_scope\""
    licenceScopes(
        "distinct select on columns"
        distinct_on: [vectric_organization_licence_scope_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_licence_scope_order_by!],
        "filter the rows returned"
        where: vectric_organization_licence_scope_bool_exp
    ): [vectric_organization_licence_scope!]!
    "fetch data from the table: \"vectric.memberships\" using primary key columns"
    membershipById(membershipId: Int!): vectric_memberships
    "fetch data from the table: \"vectric.membership_invitations\" using primary key columns"
    membershipInvitationById(invitationId: Int!): vectric_membership_invitations
    "An array relationship"
    membershipInvitations(
        "distinct select on columns"
        distinct_on: [vectric_membership_invitations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_invitations_order_by!],
        "filter the rows returned"
        where: vectric_membership_invitations_bool_exp
    ): [vectric_membership_invitations!]!
    "An aggregate relationship"
    membershipInvitations_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_membership_invitations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_invitations_order_by!],
        "filter the rows returned"
        where: vectric_membership_invitations_bool_exp
    ): vectric_membership_invitations_aggregate!
    "An array relationship"
    memberships(
        "distinct select on columns"
        distinct_on: [vectric_memberships_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_memberships_order_by!],
        "filter the rows returned"
        where: vectric_memberships_bool_exp
    ): [vectric_memberships!]!
    "An aggregate relationship"
    memberships_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_memberships_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_memberships_order_by!],
        "filter the rows returned"
        where: vectric_memberships_bool_exp
    ): vectric_memberships_aggregate!
    "fetch data from the table: \"vectric.oem_allocation_emails\""
    oemAllocationEmails(
        "distinct select on columns"
        distinct_on: [vectric_oem_allocation_emails_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_allocation_emails_order_by!],
        "filter the rows returned"
        where: vectric_oem_allocation_emails_bool_exp
    ): [vectric_oem_allocation_emails!]!
    "fetch aggregated fields from the table: \"vectric.oem_allocation_emails\""
    oemAllocationEmails_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_allocation_emails_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_allocation_emails_order_by!],
        "filter the rows returned"
        where: vectric_oem_allocation_emails_bool_exp
    ): vectric_oem_allocation_emails_aggregate!
    "fetch data from the table: \"vectric.sales_oem_bundles\""
    oemBundles(
        "distinct select on columns"
        distinct_on: [vectric_sales_oem_bundles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_oem_bundles_order_by!],
        "filter the rows returned"
        where: vectric_sales_oem_bundles_bool_exp
    ): [vectric_sales_oem_bundles!]!
    "fetch data from the table: \"vectric.sales_oem_bundles\" using primary key columns"
    oemBundlesById(bundleId: String!): vectric_sales_oem_bundles
    "fetch aggregated fields from the table: \"vectric.sales_oem_bundles\""
    oemBundles_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_oem_bundles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_oem_bundles_order_by!],
        "filter the rows returned"
        where: vectric_sales_oem_bundles_bool_exp
    ): vectric_sales_oem_bundles_aggregate!
    "fetch data from the table: \"vectric.oem_fastspring_item\""
    oemFastspringItem(
        "distinct select on columns"
        distinct_on: [vectric_oem_fastspring_item_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_fastspring_item_order_by!],
        "filter the rows returned"
        where: vectric_oem_fastspring_item_bool_exp
    ): [vectric_oem_fastspring_item!]!
    "fetch data from the table: \"vectric.oem_fastspring_item\" using primary key columns"
    oemFastspringItemById(itemId: bigint!): vectric_oem_fastspring_item
    "fetch aggregated fields from the table: \"vectric.oem_fastspring_item\""
    oemFastspringItem_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_fastspring_item_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_fastspring_item_order_by!],
        "filter the rows returned"
        where: vectric_oem_fastspring_item_bool_exp
    ): vectric_oem_fastspring_item_aggregate!
    "fetch data from the table: \"vectric.oem_fastspring_order\""
    oemFastspringOrder(
        "distinct select on columns"
        distinct_on: [vectric_oem_fastspring_order_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_fastspring_order_order_by!],
        "filter the rows returned"
        where: vectric_oem_fastspring_order_bool_exp
    ): [vectric_oem_fastspring_order!]!
    "fetch data from the table: \"vectric.oem_fastspring_order\" using primary key columns"
    oemFastspringOrderById(orderId: bigint!): vectric_oem_fastspring_order
    "fetch aggregated fields from the table: \"vectric.oem_fastspring_order\""
    oemFastspringOrder_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_fastspring_order_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_fastspring_order_order_by!],
        "filter the rows returned"
        where: vectric_oem_fastspring_order_bool_exp
    ): vectric_oem_fastspring_order_aggregate!
    "fetch data from the table: \"vectric.oem_licence_allocation_type\""
    oemLicenceAllocationType(
        "distinct select on columns"
        distinct_on: [vectric_oem_licence_allocation_type_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_licence_allocation_type_order_by!],
        "filter the rows returned"
        where: vectric_oem_licence_allocation_type_bool_exp
    ): [vectric_oem_licence_allocation_type!]!
    "fetch data from the table: \"vectric.sales_oemlicences\""
    oemLicences(
        "distinct select on columns"
        distinct_on: [vectric_sales_oemlicences_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_oemlicences_order_by!],
        "filter the rows returned"
        where: vectric_sales_oemlicences_bool_exp
    ): [vectric_sales_oemlicences!]!
    "fetch data from the table: \"vectric.sales_oemlicences\" using primary key columns"
    oemLicencesById(oemLicenceId: bigint!): vectric_sales_oemlicences
    "fetch data from the table: \"vectric.oem_partners\""
    oemPartners(
        "distinct select on columns"
        distinct_on: [vectric_oem_partners_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_partners_order_by!],
        "filter the rows returned"
        where: vectric_oem_partners_bool_exp
    ): [vectric_oem_partners!]!
    "fetch data from the table: \"vectric.oem_partners\" using primary key columns"
    oemPartnersById(partnerId: bigint!): vectric_oem_partners
    "fetch data from the table: \"vectric.oem_products\" using primary key columns"
    oemProductByPk(oemProductId: bigint!): vectric_oem_products
    "fetch data from the table: \"vectric.oem_products\""
    oemProducts(
        "distinct select on columns"
        distinct_on: [vectric_oem_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_products_order_by!],
        "filter the rows returned"
        where: vectric_oem_products_bool_exp
    ): [vectric_oem_products!]!
    "fetch data from the table: \"vectric.oem_purchase_options\""
    oemPurchaseOptions(
        "distinct select on columns"
        distinct_on: [vectric_oem_purchase_options_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_purchase_options_order_by!],
        "filter the rows returned"
        where: vectric_oem_purchase_options_bool_exp
    ): [vectric_oem_purchase_options!]!
    "fetch data from the table: \"vectric.oem_purchase_options\" using primary key columns"
    oemPurchaseOptionsByOptionId(optionId: bigint!): vectric_oem_purchase_options
    "fetch aggregated fields from the table: \"vectric.oem_purchase_options\""
    oemPurchaseOptions_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_purchase_options_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_purchase_options_order_by!],
        "filter the rows returned"
        where: vectric_oem_purchase_options_bool_exp
    ): vectric_oem_purchase_options_aggregate!
    "fetch data from the table: \"vectric.oem_staff_customer\" using primary key columns"
    oemStaffCustomerById(staffId: bigint!): vectric_oem_staff_customer
    "fetch data from the table: \"vectric.oem_staff_customer\""
    oemStaffCustomers(
        "distinct select on columns"
        distinct_on: [vectric_oem_staff_customer_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_staff_customer_order_by!],
        "filter the rows returned"
        where: vectric_oem_staff_customer_bool_exp
    ): [vectric_oem_staff_customer!]!
    "fetch aggregated fields from the table: \"vectric.oem_staff_customer\""
    oemStaffCustomers_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_staff_customer_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_staff_customer_order_by!],
        "filter the rows returned"
        where: vectric_oem_staff_customer_bool_exp
    ): vectric_oem_staff_customer_aggregate!
    "fetch data from the table: \"vectric.oem_staff_admin_ownership\""
    oemStaffMembershipDetails(
        "distinct select on columns"
        distinct_on: [vectric_oem_staff_admin_ownership_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_staff_admin_ownership_order_by!],
        "filter the rows returned"
        where: vectric_oem_staff_admin_ownership_bool_exp
    ): [vectric_oem_staff_admin_ownership!]!
    "An array relationship"
    orders(
        "distinct select on columns"
        distinct_on: [vectric_sales_orders_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_orders_order_by!],
        "filter the rows returned"
        where: vectric_sales_orders_bool_exp
    ): [vectric_sales_orders!]!
    "fetch data from the table: \"vectric.sales_orders\" using primary key columns"
    ordersByOrderId(orderId: String!): vectric_sales_orders
    "fetch data from the table: \"vectric.organization_audit\" using primary key columns"
    organizationAuditById(auditId: Int!): vectric_organization_audit
    "fetch aggregated fields from the table: \"vectric.organization_audit\""
    organizationAudit_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_organization_audit_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_audit_order_by!],
        "filter the rows returned"
        where: vectric_organization_audit_bool_exp
    ): vectric_organization_audit_aggregate!
    "fetch data from the table: \"vectric.organizations\" using primary key columns"
    organizationById(organizationId: Int!): vectric_organizations
    "fetch data from the table: \"vectric.organization_memberships_admin_access\""
    organizationMembershipsAdminAccess(
        "distinct select on columns"
        distinct_on: [vectric_organization_memberships_admin_access_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_memberships_admin_access_order_by!],
        "filter the rows returned"
        where: vectric_organization_memberships_admin_access_bool_exp
    ): [vectric_organization_memberships_admin_access!]!
    "fetch data from the table: \"vectric.organization_orders\" using primary key columns"
    organizationOrder(orderId: String!): vectric_organization_orders
    "fetch data from the table: \"vectric.organization_order_items\" using primary key columns"
    organizationOrderItem(orderItemId: Int!): vectric_organization_order_items
    "fetch data from the table: \"vectric.organization_order_items\""
    organizationOrderItems(
        "distinct select on columns"
        distinct_on: [vectric_organization_order_items_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_order_items_order_by!],
        "filter the rows returned"
        where: vectric_organization_order_items_bool_exp
    ): [vectric_organization_order_items!]!
    "fetch data from the table: \"vectric.organization_orders\""
    organizationOrders(
        "distinct select on columns"
        distinct_on: [vectric_organization_orders_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_orders_order_by!],
        "filter the rows returned"
        where: vectric_organization_orders_bool_exp
    ): [vectric_organization_orders!]!
    "fetch aggregated fields from the table: \"vectric.organizations\""
    organization_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_organizations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organizations_order_by!],
        "filter the rows returned"
        where: vectric_organizations_bool_exp
    ): vectric_organizations_aggregate!
    "fetch data from the table: \"vectric.organizations\""
    organizations(
        "distinct select on columns"
        distinct_on: [vectric_organizations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organizations_order_by!],
        "filter the rows returned"
        where: vectric_organizations_bool_exp
    ): [vectric_organizations!]!
    "fetch data from the table: \"vectric.organization_audit\""
    organiztionAudits(
        "distinct select on columns"
        distinct_on: [vectric_organization_audit_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_audit_order_by!],
        "filter the rows returned"
        where: vectric_organization_audit_bool_exp
    ): [vectric_organization_audit!]!
    "fetch data from the table: \"vectric.owned_items\" using primary key columns"
    ownedItem(ownedItemId: Int!): vectric_owned_items
    "An array relationship"
    ownedItems(
        "distinct select on columns"
        distinct_on: [vectric_owned_items_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_owned_items_order_by!],
        "filter the rows returned"
        where: vectric_owned_items_bool_exp
    ): [vectric_owned_items!]!
    "An aggregate relationship"
    ownedItems_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_owned_items_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_owned_items_order_by!],
        "filter the rows returned"
        where: vectric_owned_items_bool_exp
    ): vectric_owned_items_aggregate!
    "fetch data from the table: \"vectric.owned_products\" using primary key columns"
    ownedProduct(productId: Int!): vectric_owned_products
    "fetch data from the table: \"vectric.owned_products\""
    ownedProducts(
        "distinct select on columns"
        distinct_on: [vectric_owned_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_owned_products_order_by!],
        "filter the rows returned"
        where: vectric_owned_products_bool_exp
    ): [vectric_owned_products!]!
    "fetch aggregated fields from the table: \"vectric.owned_products\""
    ownedProducts_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_owned_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_owned_products_order_by!],
        "filter the rows returned"
        where: vectric_owned_products_bool_exp
    ): vectric_owned_products_aggregate!
    "fetch data from the table: \"vectric.security_passwordresettokens\""
    passwordResetTokens(
        "distinct select on columns"
        distinct_on: [vectric_security_passwordresettokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_passwordresettokens_order_by!],
        "filter the rows returned"
        where: vectric_security_passwordresettokens_bool_exp
    ): [vectric_security_passwordresettokens!]!
    "fetch data from the table: \"vectric.security_passwordresettokens\" using primary key columns"
    passwordResetTokensByPk(token: String!): vectric_security_passwordresettokens
    "fetch data from the table: \"vectric.products_products\" using primary key columns"
    productById(productID: bigint!): vectric_products_products
    "fetch data from the table: \"vectric.products_enhancement_eligibility\""
    productEnhancementEligibility(
        "distinct select on columns"
        distinct_on: [vectric_products_enhancement_eligibility_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_enhancement_eligibility_order_by!],
        "filter the rows returned"
        where: vectric_products_enhancement_eligibility_bool_exp
    ): [vectric_products_enhancement_eligibility!]!
    "fetch data from the table: \"vectric.products_producttype\""
    productTypes(
        "distinct select on columns"
        distinct_on: [vectric_products_producttype_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_producttype_order_by!],
        "filter the rows returned"
        where: vectric_products_producttype_bool_exp
    ): [vectric_products_producttype!]!
    "fetch data from the table: \"vectric.products_producttype\" using primary key columns"
    productTypesById(productTypeId: bigint!): vectric_products_producttype
    "fetch data from the table: \"vectric.products_upgrade_eligibility\" using primary key columns"
    productUpgradeEligibilityById(eligibilityid: bigint!): vectric_products_upgrade_eligibility
    "An array relationship"
    products(
        "distinct select on columns"
        distinct_on: [vectric_products_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_products_order_by!],
        "filter the rows returned"
        where: vectric_products_products_bool_exp
    ): [vectric_products_products!]!
    "fetch data from the table: \"vectric.products_freeclipart\""
    productsFreeClipart(
        "distinct select on columns"
        distinct_on: [vectric_products_freeclipart_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_freeclipart_order_by!],
        "filter the rows returned"
        where: vectric_products_freeclipart_bool_exp
    ): [vectric_products_freeclipart!]!
    "fetch data from the table: \"vectric.products_upgrade_eligibility\""
    productsUpgradeEligibility(
        "distinct select on columns"
        distinct_on: [vectric_products_upgrade_eligibility_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_upgrade_eligibility_order_by!],
        "filter the rows returned"
        where: vectric_products_upgrade_eligibility_bool_exp
    ): [vectric_products_upgrade_eligibility!]!
    "fetch data from the table: \"vectric.questions\" using primary key columns"
    questionById(questionid: bigint!): vectric_questions
    "fetch data from the table: \"vectric.questions\""
    questions(
        "distinct select on columns"
        distinct_on: [vectric_questions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_questions_order_by!],
        "filter the rows returned"
        where: vectric_questions_bool_exp
    ): [vectric_questions!]!
    "fetch aggregated fields from the table: \"vectric.questions\""
    questions_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_questions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_questions_order_by!],
        "filter the rows returned"
        where: vectric_questions_bool_exp
    ): vectric_questions_aggregate!
    "fetch data from the table: \"vectric.responses\" using primary key columns"
    responseById(responseid: bigint!): vectric_responses
    "fetch data from the table: \"vectric.responses\""
    responses(
        "distinct select on columns"
        distinct_on: [vectric_responses_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_responses_order_by!],
        "filter the rows returned"
        where: vectric_responses_bool_exp
    ): [vectric_responses!]!
    "fetch aggregated fields from the table: \"vectric.responses\""
    responses_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_responses_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_responses_order_by!],
        "filter the rows returned"
        where: vectric_responses_bool_exp
    ): vectric_responses_aggregate!
    "fetch data from the table: \"vectric.saleable_products\" using primary key columns"
    saleableProduct(productId: Int!): vectric_saleable_products
    "fetch data from the table: \"vectric.saleable_products\""
    saleableProducts(
        "distinct select on columns"
        distinct_on: [vectric_saleable_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_saleable_products_order_by!],
        "filter the rows returned"
        where: vectric_saleable_products_bool_exp
    ): [vectric_saleable_products!]!
    "fetch aggregated fields from the table: \"vectric.saleable_products\""
    saleableProducts_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_saleable_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_saleable_products_order_by!],
        "filter the rows returned"
        where: vectric_saleable_products_bool_exp
    ): vectric_saleable_products_aggregate!
    "fetch aggregated fields from the table: \"vectric.sales_customers\""
    salesCustomers_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_customers_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_customers_order_by!],
        "filter the rows returned"
        where: vectric_sales_customers_bool_exp
    ): vectric_sales_customers_aggregate!
    "fetch data from the table: \"vectric.sales_salesitem_products\""
    salesItemProduct(
        "distinct select on columns"
        distinct_on: [vectric_sales_salesitem_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_salesitem_products_order_by!],
        "filter the rows returned"
        where: vectric_sales_salesitem_products_bool_exp
    ): [vectric_sales_salesitem_products!]!
    "fetch data from the table: \"vectric.sales_salesitem_products\" using primary key columns"
    salesItemProductById(salesItemProductId: bigint!): vectric_sales_salesitem_products
    "An array relationship"
    salesItems(
        "distinct select on columns"
        distinct_on: [vectric_sales_salesitems_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_salesitems_order_by!],
        "filter the rows returned"
        where: vectric_sales_salesitems_bool_exp
    ): [vectric_sales_salesitems!]!
    "fetch data from the table: \"vectric.sales_salesitems\" using primary key columns"
    salesItemsById(salesitemid: bigint!): vectric_sales_salesitems
    "fetch data from the table: \"vectric.scheduled_emails\""
    scheduledEmails(
        "distinct select on columns"
        distinct_on: [vectric_scheduled_emails_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_scheduled_emails_order_by!],
        "filter the rows returned"
        where: vectric_scheduled_emails_bool_exp
    ): [vectric_scheduled_emails!]!
    "fetch data from the table: \"vectric.scheduled_emails\" using primary key columns"
    scheduledEmailsById(id: Int!): vectric_scheduled_emails
    "fetch aggregated fields from the table: \"vectric.scheduled_emails\""
    scheduledEmails_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_scheduled_emails_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_scheduled_emails_order_by!],
        "filter the rows returned"
        where: vectric_scheduled_emails_bool_exp
    ): vectric_scheduled_emails_aggregate!
    "fetch data from the table: \"vectric.security_emailverificationtokens\" using primary key columns"
    securityEmailVerificationTokenByToken(token: String!): vectric_security_emailverificationtokens
    "fetch data from the table: \"vectric.security_emailverificationtokens\""
    securityEmailVerificationTokens(
        "distinct select on columns"
        distinct_on: [vectric_security_emailverificationtokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_emailverificationtokens_order_by!],
        "filter the rows returned"
        where: vectric_security_emailverificationtokens_bool_exp
    ): [vectric_security_emailverificationtokens!]!
    "fetch data from the table: \"vectric.security_userinvitations\""
    securityUserInvitations(
        "distinct select on columns"
        distinct_on: [vectric_security_userinvitations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_userinvitations_order_by!],
        "filter the rows returned"
        where: vectric_security_userinvitations_bool_exp
    ): [vectric_security_userinvitations!]!
    "fetch data from the table: \"vectric.security_users\""
    securityUsers(
        "distinct select on columns"
        distinct_on: [vectric_security_users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_users_order_by!],
        "filter the rows returned"
        where: vectric_security_users_bool_exp
    ): [vectric_security_users!]!
    "fetch data from the table: \"vectric.sales_customer_downloads\""
    selectCustomerDownloads(
        "distinct select on columns"
        distinct_on: [vectric_sales_customer_downloads_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_customer_downloads_order_by!],
        "filter the rows returned"
        where: vectric_sales_customer_downloads_bool_exp
    ): [vectric_sales_customer_downloads!]!
    "fetch data from the table: \"vectric.sales_customer_downloads\" using primary key columns"
    selectCustomerDownloadsById(downloadId: bigint!): vectric_sales_customer_downloads
    "fetch aggregated fields from the table: \"vectric.sales_customer_downloads\""
    selectCustomerDownloads_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_customer_downloads_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_customer_downloads_order_by!],
        "filter the rows returned"
        where: vectric_sales_customer_downloads_bool_exp
    ): vectric_sales_customer_downloads_aggregate!
    "fetch data from the table: \"vectric.security_group_members\" using primary key columns"
    selectSecurityGroupMembersById(id: bigint!): vectric_security_group_members
    "fetch data from the table: \"vectric.security_group_members\""
    selectSecurityGrupMemebers(
        "distinct select on columns"
        distinct_on: [vectric_security_group_members_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_group_members_order_by!],
        "filter the rows returned"
        where: vectric_security_group_members_bool_exp
    ): [vectric_security_group_members!]!
    "fetch data from the table: \"vectric.linkshortener_links\""
    shortLinks(
        "distinct select on columns"
        distinct_on: [vectric_linkshortener_links_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_linkshortener_links_order_by!],
        "filter the rows returned"
        where: vectric_linkshortener_links_bool_exp
    ): [vectric_linkshortener_links!]!
    "fetch data from the table: \"vectric.linkshortener_links\" using primary key columns"
    shortLinksByHash(shortUrlHash: String!): vectric_linkshortener_links
    "fetch aggregated fields from the table: \"vectric.site_option_location\""
    siteOptionLocation_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_site_option_location_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_site_option_location_order_by!],
        "filter the rows returned"
        where: vectric_site_option_location_bool_exp
    ): vectric_site_option_location_aggregate!
    "fetch data from the table: \"vectric.site_option_location\""
    siteOptionLocations(
        "distinct select on columns"
        distinct_on: [vectric_site_option_location_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_site_option_location_order_by!],
        "filter the rows returned"
        where: vectric_site_option_location_bool_exp
    ): [vectric_site_option_location!]!
    "fetch data from the table: \"vectric.site_option_location\" using primary key columns"
    siteOptionLocationsById(locationid: bigint!): vectric_site_option_location
    "fetch data from the table: \"vectric.site_options\""
    siteOptions(
        "distinct select on columns"
        distinct_on: [vectric_site_options_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_site_options_order_by!],
        "filter the rows returned"
        where: vectric_site_options_bool_exp
    ): [vectric_site_options!]!
    "fetch data from the table: \"vectric.site_options\" using primary key columns"
    siteOptionsById(optionid: bigint!): vectric_site_options
    "fetch aggregated fields from the table: \"vectric.site_options\""
    siteOptions_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_site_options_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_site_options_order_by!],
        "filter the rows returned"
        where: vectric_site_options_bool_exp
    ): vectric_site_options_aggregate!
    "fetch aggregated fields from the table: \"vectric.toolpath_saver_token\""
    toolpathSaveToken_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_toolpath_saver_token_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_toolpath_saver_token_order_by!],
        "filter the rows returned"
        where: vectric_toolpath_saver_token_bool_exp
    ): vectric_toolpath_saver_token_aggregate!
    "fetch data from the table: \"vectric.toolpath_saver_token\" using primary key columns"
    toolpathSaverTokenById(toolpathSaverTokenId: bigint!): vectric_toolpath_saver_token
    "fetch data from the table: \"vectric.toolpath_saver_token\""
    toolpathSaverTokens(
        "distinct select on columns"
        distinct_on: [vectric_toolpath_saver_token_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_toolpath_saver_token_order_by!],
        "filter the rows returned"
        where: vectric_toolpath_saver_token_bool_exp
    ): [vectric_toolpath_saver_token!]!
    "fetch data from the table: \"vectric.trial_order\" using primary key columns"
    trialOrderById(orderId: bigint!): vectric_trial_order
    "fetch data from the table: \"vectric.trial_order\""
    trialOrders(
        "distinct select on columns"
        distinct_on: [vectric_trial_order_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_trial_order_order_by!],
        "filter the rows returned"
        where: vectric_trial_order_bool_exp
    ): [vectric_trial_order!]!
    "fetch aggregated fields from the table: \"vectric.trial_order\""
    trialOrders_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_trial_order_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_trial_order_order_by!],
        "filter the rows returned"
        where: vectric_trial_order_bool_exp
    ): vectric_trial_order_aggregate!
    "fetch data from the table: \"vectric.update_requests\" using primary key columns"
    updateRequestById(requestId: bigint!): vectric_update_requests
    "fetch data from the table: \"vectric.update_requests\""
    updateRequests(
        "distinct select on columns"
        distinct_on: [vectric_update_requests_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_update_requests_order_by!],
        "filter the rows returned"
        where: vectric_update_requests_bool_exp
    ): [vectric_update_requests!]!
    "fetch data from the table: \"vectric.upgrades_feature\" using primary key columns"
    upgradeFeatureById(featureId: String!): vectric_upgrades_feature
    "fetch data from the table: \"vectric.upgrades_feature\""
    upgradeFeatures(
        "distinct select on columns"
        distinct_on: [vectric_upgrades_feature_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrades_feature_order_by!],
        "filter the rows returned"
        where: vectric_upgrades_feature_bool_exp
    ): [vectric_upgrades_feature!]!
    "fetch aggregated fields from the table: \"vectric.upgrades_feature\""
    upgradeFeatures_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_upgrades_feature_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrades_feature_order_by!],
        "filter the rows returned"
        where: vectric_upgrades_feature_bool_exp
    ): vectric_upgrades_feature_aggregate!
    "fetch data from the table: \"vectric.upgrades_product_type_feature\" using primary key columns"
    upgradeProductTypeFeatureById(upgradeId: bigint!): vectric_upgrades_product_type_feature
    "An array relationship"
    upgradeProductTypeFeatures(
        "distinct select on columns"
        distinct_on: [vectric_upgrades_product_type_feature_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrades_product_type_feature_order_by!],
        "filter the rows returned"
        where: vectric_upgrades_product_type_feature_bool_exp
    ): [vectric_upgrades_product_type_feature!]!
    "An aggregate relationship"
    upgradeProductTypeFeatures_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_upgrades_product_type_feature_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrades_product_type_feature_order_by!],
        "filter the rows returned"
        where: vectric_upgrades_product_type_feature_bool_exp
    ): vectric_upgrades_product_type_feature_aggregate!
    "An array relationship"
    upgradeTokens(
        "distinct select on columns"
        distinct_on: [vectric_upgrade_tokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrade_tokens_order_by!],
        "filter the rows returned"
        where: vectric_upgrade_tokens_bool_exp
    ): [vectric_upgrade_tokens!]!
    "fetch data from the table: \"vectric.upgrade_tokens\" using primary key columns"
    upgradeTokensById(token: String!): vectric_upgrade_tokens
    "fetch data from the table: \"vectric.upgrades_version_feature\" using primary key columns"
    upgradeVersionFeatureById(upgradeId: bigint!): vectric_upgrades_version_feature
    "fetch data from the table: \"vectric.upgrades_version_feature\""
    upgradeVersionFeatures(
        "distinct select on columns"
        distinct_on: [vectric_upgrades_version_feature_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrades_version_feature_order_by!],
        "filter the rows returned"
        where: vectric_upgrades_version_feature_bool_exp
    ): [vectric_upgrades_version_feature!]!
    "An aggregate relationship"
    upgradeVersionFeatures_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_upgrades_version_feature_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrades_version_feature_order_by!],
        "filter the rows returned"
        where: vectric_upgrades_version_feature_bool_exp
    ): vectric_upgrades_version_feature_aggregate!
    "fetch data from the table: \"vectric.usergroup_2019_waitlist\""
    userGroupWaitingListEntries(
        "distinct select on columns"
        distinct_on: [vectric_usergroup_2019_waitlist_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_usergroup_2019_waitlist_order_by!],
        "filter the rows returned"
        where: vectric_usergroup_2019_waitlist_bool_exp
    ): [vectric_usergroup_2019_waitlist!]!
    "fetch aggregated fields from the table: \"vectric.usergroup_2019_waitlist\""
    userGroupWaitingListEntries_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_usergroup_2019_waitlist_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_usergroup_2019_waitlist_order_by!],
        "filter the rows returned"
        where: vectric_usergroup_2019_waitlist_bool_exp
    ): vectric_usergroup_2019_waitlist_aggregate!
    "fetch data from the table: \"vectric.usergroup_2019_waitlist\" using primary key columns"
    userGroupWaitingListEntryById(attendeeid: bigint!): vectric_usergroup_2019_waitlist
    "fetch data from the table: \"vectric.active_memberships\""
    vectric_active_memberships(
        "distinct select on columns"
        distinct_on: [vectric_active_memberships_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_active_memberships_order_by!],
        "filter the rows returned"
        where: vectric_active_memberships_bool_exp
    ): [vectric_active_memberships!]!
    "fetch aggregated fields from the table: \"vectric.active_memberships\""
    vectric_active_memberships_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_active_memberships_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_active_memberships_order_by!],
        "filter the rows returned"
        where: vectric_active_memberships_bool_exp
    ): vectric_active_memberships_aggregate!
    "fetch data from the table: \"vectric.active_upgrades\""
    vectric_active_upgrades(
        "distinct select on columns"
        distinct_on: [vectric_active_upgrades_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_active_upgrades_order_by!],
        "filter the rows returned"
        where: vectric_active_upgrades_bool_exp
    ): [vectric_active_upgrades!]!
    "fetch aggregated fields from the table: \"vectric.active_upgrades\""
    vectric_active_upgrades_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_active_upgrades_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_active_upgrades_order_by!],
        "filter the rows returned"
        where: vectric_active_upgrades_bool_exp
    ): vectric_active_upgrades_aggregate!
    "fetch aggregated fields from the table: \"vectric.allocatable_bundles\""
    vectric_allocatable_bundles_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_allocatable_bundles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocatable_bundles_order_by!],
        "filter the rows returned"
        where: vectric_allocatable_bundles_bool_exp
    ): vectric_allocatable_bundles_aggregate!
    "fetch aggregated fields from the table: \"vectric.allocated_bundles\""
    vectric_allocated_bundles_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_allocated_bundles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocated_bundles_order_by!],
        "filter the rows returned"
        where: vectric_allocated_bundles_bool_exp
    ): vectric_allocated_bundles_aggregate!
    "fetch data from the table: \"vectric.allocation_summary_file_type\""
    vectric_allocation_summary_file_type(
        "distinct select on columns"
        distinct_on: [vectric_allocation_summary_file_type_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocation_summary_file_type_order_by!],
        "filter the rows returned"
        where: vectric_allocation_summary_file_type_bool_exp
    ): [vectric_allocation_summary_file_type!]!
    "fetch aggregated fields from the table: \"vectric.allocation_summary_file_type\""
    vectric_allocation_summary_file_type_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_allocation_summary_file_type_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocation_summary_file_type_order_by!],
        "filter the rows returned"
        where: vectric_allocation_summary_file_type_bool_exp
    ): vectric_allocation_summary_file_type_aggregate!
    "fetch data from the table: \"vectric.allocation_summary_file_type\" using primary key columns"
    vectric_allocation_summary_file_type_by_pk(type: String!): vectric_allocation_summary_file_type
    "fetch data from the table: \"vectric.continents\""
    vectric_continents(
        "distinct select on columns"
        distinct_on: [vectric_continents_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_continents_order_by!],
        "filter the rows returned"
        where: vectric_continents_bool_exp
    ): [vectric_continents!]!
    "fetch aggregated fields from the table: \"vectric.continents\""
    vectric_continents_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_continents_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_continents_order_by!],
        "filter the rows returned"
        where: vectric_continents_bool_exp
    ): vectric_continents_aggregate!
    "fetch data from the table: \"vectric.continents\" using primary key columns"
    vectric_continents_by_pk(
        "Continent code"
        code: bpchar!
    ): vectric_continents
    "fetch aggregated fields from the table: \"vectric.customer_area\""
    vectric_customer_area_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_customer_area_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_area_order_by!],
        "filter the rows returned"
        where: vectric_customer_area_bool_exp
    ): vectric_customer_area_aggregate!
    "fetch aggregated fields from the table: \"vectric.customer_area_file\""
    vectric_customer_area_file_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_customer_area_file_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_area_file_order_by!],
        "filter the rows returned"
        where: vectric_customer_area_file_bool_exp
    ): vectric_customer_area_file_aggregate!
    "fetch aggregated fields from the table: \"vectric.customer_status\""
    vectric_customer_status_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_customer_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_status_order_by!],
        "filter the rows returned"
        where: vectric_customer_status_bool_exp
    ): vectric_customer_status_aggregate!
    "fetch data from the table: \"vectric.download\""
    vectric_download(
        "distinct select on columns"
        distinct_on: [vectric_download_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_download_order_by!],
        "filter the rows returned"
        where: vectric_download_bool_exp
    ): [vectric_download!]!
    "fetch aggregated fields from the table: \"vectric.download\""
    vectric_download_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_download_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_download_order_by!],
        "filter the rows returned"
        where: vectric_download_bool_exp
    ): vectric_download_aggregate!
    "fetch data from the table: \"vectric.download_record\""
    vectric_download_record(
        "distinct select on columns"
        distinct_on: [vectric_download_record_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_download_record_order_by!],
        "filter the rows returned"
        where: vectric_download_record_bool_exp
    ): [vectric_download_record!]!
    "fetch aggregated fields from the table: \"vectric.download_record\""
    vectric_download_record_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_download_record_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_download_record_order_by!],
        "filter the rows returned"
        where: vectric_download_record_bool_exp
    ): vectric_download_record_aggregate!
    "fetch data from the table: \"vectric.download_record\" using primary key columns"
    vectric_download_record_by_pk(id: bigint!): vectric_download_record
    "fetch aggregated fields from the table: \"vectric.enhancement_tokens\""
    vectric_enhancement_tokens_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_enhancement_tokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_enhancement_tokens_order_by!],
        "filter the rows returned"
        where: vectric_enhancement_tokens_bool_exp
    ): vectric_enhancement_tokens_aggregate!
    "fetch data from the table: \"vectric.enhancement_tokens\" using primary key columns"
    vectric_enhancement_tokens_by_pk(token: String!): vectric_enhancement_tokens
    "fetch data from the table: \"vectric.entitled_product_version_code_view\""
    vectric_entitled_product_version_code_view(
        "distinct select on columns"
        distinct_on: [vectric_entitled_product_version_code_view_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_entitled_product_version_code_view_order_by!],
        "filter the rows returned"
        where: vectric_entitled_product_version_code_view_bool_exp
    ): [vectric_entitled_product_version_code_view!]!
    "fetch aggregated fields from the table: \"vectric.entitled_product_version_code_view\""
    vectric_entitled_product_version_code_view_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_entitled_product_version_code_view_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_entitled_product_version_code_view_order_by!],
        "filter the rows returned"
        where: vectric_entitled_product_version_code_view_bool_exp
    ): vectric_entitled_product_version_code_view_aggregate!
    "fetch aggregated fields from the table: \"vectric.free_clipart_tokens\""
    vectric_free_clipart_tokens_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_free_clipart_tokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_free_clipart_tokens_order_by!],
        "filter the rows returned"
        where: vectric_free_clipart_tokens_bool_exp
    ): vectric_free_clipart_tokens_aggregate!
    "fetch aggregated fields from the table: \"vectric.freeclipart\""
    vectric_freeclipart_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_freeclipart_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_freeclipart_order_by!],
        "filter the rows returned"
        where: vectric_freeclipart_bool_exp
    ): vectric_freeclipart_aggregate!
    "fetch data from the table: \"vectric.freeclipart\" using primary key columns"
    vectric_freeclipart_by_pk(freeClipartId: bigint!): vectric_freeclipart
    "fetch aggregated fields from the table: \"vectric.freeclipart_category\""
    vectric_freeclipart_category_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_freeclipart_category_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_freeclipart_category_order_by!],
        "filter the rows returned"
        where: vectric_freeclipart_category_bool_exp
    ): vectric_freeclipart_category_aggregate!
    "fetch data from the table: \"vectric.freeclipart_category\" using primary key columns"
    vectric_freeclipart_category_by_pk(categoryId: bigint!): vectric_freeclipart_category
    "fetch data from the table: \"vectric.freeclipart_download_record\""
    vectric_freeclipart_download_record(
        "distinct select on columns"
        distinct_on: [vectric_freeclipart_download_record_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_freeclipart_download_record_order_by!],
        "filter the rows returned"
        where: vectric_freeclipart_download_record_bool_exp
    ): [vectric_freeclipart_download_record!]!
    "fetch aggregated fields from the table: \"vectric.freeclipart_download_record\""
    vectric_freeclipart_download_record_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_freeclipart_download_record_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_freeclipart_download_record_order_by!],
        "filter the rows returned"
        where: vectric_freeclipart_download_record_bool_exp
    ): vectric_freeclipart_download_record_aggregate!
    "fetch data from the table: \"vectric.freeclipart_download_record\" using primary key columns"
    vectric_freeclipart_download_record_by_pk(downloadId: bigint!): vectric_freeclipart_download_record
    "fetch data from the table: \"vectric.group_info\""
    vectric_group_info(
        "distinct select on columns"
        distinct_on: [vectric_group_info_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_group_info_order_by!],
        "filter the rows returned"
        where: vectric_group_info_bool_exp
    ): [vectric_group_info!]!
    "fetch aggregated fields from the table: \"vectric.group_info\""
    vectric_group_info_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_group_info_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_group_info_order_by!],
        "filter the rows returned"
        where: vectric_group_info_bool_exp
    ): vectric_group_info_aggregate!
    "fetch data from the table: \"vectric.group_roles\""
    vectric_group_roles(
        "distinct select on columns"
        distinct_on: [vectric_group_roles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_group_roles_order_by!],
        "filter the rows returned"
        where: vectric_group_roles_bool_exp
    ): [vectric_group_roles!]!
    "fetch aggregated fields from the table: \"vectric.group_roles\""
    vectric_group_roles_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_group_roles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_group_roles_order_by!],
        "filter the rows returned"
        where: vectric_group_roles_bool_exp
    ): vectric_group_roles_aggregate!
    "fetch data from the table: \"vectric.group_roles\" using primary key columns"
    vectric_group_roles_by_pk(id: Int!): vectric_group_roles
    "fetch data from the table: \"vectric.group_user_role\""
    vectric_group_user_role(
        "distinct select on columns"
        distinct_on: [vectric_group_user_role_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_group_user_role_order_by!],
        "filter the rows returned"
        where: vectric_group_user_role_bool_exp
    ): [vectric_group_user_role!]!
    "fetch aggregated fields from the table: \"vectric.group_user_role\""
    vectric_group_user_role_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_group_user_role_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_group_user_role_order_by!],
        "filter the rows returned"
        where: vectric_group_user_role_bool_exp
    ): vectric_group_user_role_aggregate!
    "fetch data from the table: \"vectric.group_user_role\" using primary key columns"
    vectric_group_user_role_by_pk(customer_id: bigint!, group_id: Int!): vectric_group_user_role
    "fetch data from the table: \"vectric.groups\""
    vectric_groups(
        "distinct select on columns"
        distinct_on: [vectric_groups_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_groups_order_by!],
        "filter the rows returned"
        where: vectric_groups_bool_exp
    ): [vectric_groups!]!
    "fetch aggregated fields from the table: \"vectric.groups\""
    vectric_groups_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_groups_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_groups_order_by!],
        "filter the rows returned"
        where: vectric_groups_bool_exp
    ): vectric_groups_aggregate!
    "fetch data from the table: \"vectric.groups\" using primary key columns"
    vectric_groups_by_pk(id: Int!): vectric_groups
    "fetch data from the table: \"vectric.language_codes\""
    vectric_language_codes(
        "distinct select on columns"
        distinct_on: [vectric_language_codes_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_language_codes_order_by!],
        "filter the rows returned"
        where: vectric_language_codes_bool_exp
    ): [vectric_language_codes!]!
    "fetch aggregated fields from the table: \"vectric.language_codes\""
    vectric_language_codes_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_language_codes_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_language_codes_order_by!],
        "filter the rows returned"
        where: vectric_language_codes_bool_exp
    ): vectric_language_codes_aggregate!
    "fetch data from the table: \"vectric.language_codes\" using primary key columns"
    vectric_language_codes_by_pk(
        "ISO 639-2 Code"
        threeLetterCode: bpchar!
    ): vectric_language_codes
    "fetch data from the table: \"vectric.licence_log\""
    vectric_licence_log(
        "distinct select on columns"
        distinct_on: [vectric_licence_log_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_licence_log_order_by!],
        "filter the rows returned"
        where: vectric_licence_log_bool_exp
    ): [vectric_licence_log!]!
    "fetch aggregated fields from the table: \"vectric.licence_log\""
    vectric_licence_log_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_licence_log_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_licence_log_order_by!],
        "filter the rows returned"
        where: vectric_licence_log_bool_exp
    ): vectric_licence_log_aggregate!
    "fetch data from the table: \"vectric.licence_log\" using primary key columns"
    vectric_licence_log_by_pk(licenceId: bigint!): vectric_licence_log
    "fetch aggregated fields from the table: \"vectric.linkshortener_links\""
    vectric_linkshortener_links_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_linkshortener_links_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_linkshortener_links_order_by!],
        "filter the rows returned"
        where: vectric_linkshortener_links_bool_exp
    ): vectric_linkshortener_links_aggregate!
    "fetch data from the table: \"vectric.makerspace_requests\""
    vectric_makerspace_requests(
        "distinct select on columns"
        distinct_on: [vectric_makerspace_requests_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_makerspace_requests_order_by!],
        "filter the rows returned"
        where: vectric_makerspace_requests_bool_exp
    ): [vectric_makerspace_requests!]!
    "fetch aggregated fields from the table: \"vectric.makerspace_requests\""
    vectric_makerspace_requests_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_makerspace_requests_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_makerspace_requests_order_by!],
        "filter the rows returned"
        where: vectric_makerspace_requests_bool_exp
    ): vectric_makerspace_requests_aggregate!
    "fetch data from the table: \"vectric.makerspace_requests\" using primary key columns"
    vectric_makerspace_requests_by_pk(requestId: bigint!): vectric_makerspace_requests
    "fetch data from the table: \"vectric.membership_invitation_status\""
    vectric_membership_invitation_status(
        "distinct select on columns"
        distinct_on: [vectric_membership_invitation_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_invitation_status_order_by!],
        "filter the rows returned"
        where: vectric_membership_invitation_status_bool_exp
    ): [vectric_membership_invitation_status!]!
    "fetch aggregated fields from the table: \"vectric.membership_invitation_status\""
    vectric_membership_invitation_status_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_membership_invitation_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_invitation_status_order_by!],
        "filter the rows returned"
        where: vectric_membership_invitation_status_bool_exp
    ): vectric_membership_invitation_status_aggregate!
    "fetch data from the table: \"vectric.membership_invitation_status\" using primary key columns"
    vectric_membership_invitation_status_by_pk(status: String!): vectric_membership_invitation_status
    "fetch data from the table: \"vectric.membership_roles\""
    vectric_membership_roles(
        "distinct select on columns"
        distinct_on: [vectric_membership_roles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_roles_order_by!],
        "filter the rows returned"
        where: vectric_membership_roles_bool_exp
    ): [vectric_membership_roles!]!
    "fetch aggregated fields from the table: \"vectric.membership_roles\""
    vectric_membership_roles_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_membership_roles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_roles_order_by!],
        "filter the rows returned"
        where: vectric_membership_roles_bool_exp
    ): vectric_membership_roles_aggregate!
    "fetch data from the table: \"vectric.membership_roles\" using primary key columns"
    vectric_membership_roles_by_pk(role: String!): vectric_membership_roles
    "fetch data from the table: \"vectric.membership_status\""
    vectric_membership_status(
        "distinct select on columns"
        distinct_on: [vectric_membership_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_status_order_by!],
        "filter the rows returned"
        where: vectric_membership_status_bool_exp
    ): [vectric_membership_status!]!
    "fetch aggregated fields from the table: \"vectric.membership_status\""
    vectric_membership_status_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_membership_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_status_order_by!],
        "filter the rows returned"
        where: vectric_membership_status_bool_exp
    ): vectric_membership_status_aggregate!
    "fetch data from the table: \"vectric.membership_status\" using primary key columns"
    vectric_membership_status_by_pk(status: String!): vectric_membership_status
    "fetch data from the table: \"vectric.oauth_client_details\""
    vectric_oauth_client_details(
        "distinct select on columns"
        distinct_on: [vectric_oauth_client_details_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oauth_client_details_order_by!],
        "filter the rows returned"
        where: vectric_oauth_client_details_bool_exp
    ): [vectric_oauth_client_details!]!
    "fetch aggregated fields from the table: \"vectric.oauth_client_details\""
    vectric_oauth_client_details_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oauth_client_details_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oauth_client_details_order_by!],
        "filter the rows returned"
        where: vectric_oauth_client_details_bool_exp
    ): vectric_oauth_client_details_aggregate!
    "fetch data from the table: \"vectric.oauth_client_details\" using primary key columns"
    vectric_oauth_client_details_by_pk(client_id: String!): vectric_oauth_client_details
    "fetch data from the table: \"vectric.oem_detailed_products\""
    vectric_oem_detailed_products(
        "distinct select on columns"
        distinct_on: [vectric_oem_detailed_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_detailed_products_order_by!],
        "filter the rows returned"
        where: vectric_oem_detailed_products_bool_exp
    ): [vectric_oem_detailed_products!]!
    "fetch aggregated fields from the table: \"vectric.oem_detailed_products\""
    vectric_oem_detailed_products_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_detailed_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_detailed_products_order_by!],
        "filter the rows returned"
        where: vectric_oem_detailed_products_bool_exp
    ): vectric_oem_detailed_products_aggregate!
    "fetch data from the table: \"vectric.oem_detailed_products\" using primary key columns"
    vectric_oem_detailed_products_by_pk(id: bigint!): vectric_oem_detailed_products
    "fetch data from the table: \"vectric.oem_fastspring_item_bundle\""
    vectric_oem_fastspring_item_bundle(
        "distinct select on columns"
        distinct_on: [vectric_oem_fastspring_item_bundle_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_fastspring_item_bundle_order_by!],
        "filter the rows returned"
        where: vectric_oem_fastspring_item_bundle_bool_exp
    ): [vectric_oem_fastspring_item_bundle!]!
    "fetch aggregated fields from the table: \"vectric.oem_fastspring_item_bundle\""
    vectric_oem_fastspring_item_bundle_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_fastspring_item_bundle_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_fastspring_item_bundle_order_by!],
        "filter the rows returned"
        where: vectric_oem_fastspring_item_bundle_bool_exp
    ): vectric_oem_fastspring_item_bundle_aggregate!
    "fetch data from the table: \"vectric.oem_fastspring_item_bundle\" using primary key columns"
    vectric_oem_fastspring_item_bundle_by_pk(itemBundleId: bigint!): vectric_oem_fastspring_item_bundle
    "fetch data from the table: \"vectric.oem_invite_status\""
    vectric_oem_invite_status(
        "distinct select on columns"
        distinct_on: [vectric_oem_invite_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_invite_status_order_by!],
        "filter the rows returned"
        where: vectric_oem_invite_status_bool_exp
    ): [vectric_oem_invite_status!]!
    "fetch aggregated fields from the table: \"vectric.oem_invite_status\""
    vectric_oem_invite_status_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_invite_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_invite_status_order_by!],
        "filter the rows returned"
        where: vectric_oem_invite_status_bool_exp
    ): vectric_oem_invite_status_aggregate!
    "fetch data from the table: \"vectric.oem_invite_status\" using primary key columns"
    vectric_oem_invite_status_by_pk(statusId: bigint!): vectric_oem_invite_status
    "fetch aggregated fields from the table: \"vectric.oem_licence_allocation_type\""
    vectric_oem_licence_allocation_type_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_licence_allocation_type_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_licence_allocation_type_order_by!],
        "filter the rows returned"
        where: vectric_oem_licence_allocation_type_bool_exp
    ): vectric_oem_licence_allocation_type_aggregate!
    "fetch data from the table: \"vectric.oem_licence_allocation_type\" using primary key columns"
    vectric_oem_licence_allocation_type_by_pk(allocationTypeId: bigint!): vectric_oem_licence_allocation_type
    "fetch aggregated fields from the table: \"vectric.oem_partners\""
    vectric_oem_partners_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_partners_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_partners_order_by!],
        "filter the rows returned"
        where: vectric_oem_partners_bool_exp
    ): vectric_oem_partners_aggregate!
    "fetch aggregated fields from the table: \"vectric.oem_products\""
    vectric_oem_products_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_products_order_by!],
        "filter the rows returned"
        where: vectric_oem_products_bool_exp
    ): vectric_oem_products_aggregate!
    "fetch aggregated fields from the table: \"vectric.oem_staff_admin_ownership\""
    vectric_oem_staff_admin_ownership_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_staff_admin_ownership_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_staff_admin_ownership_order_by!],
        "filter the rows returned"
        where: vectric_oem_staff_admin_ownership_bool_exp
    ): vectric_oem_staff_admin_ownership_aggregate!
    "fetch aggregated fields from the table: \"vectric.organization_memberships_admin_access\""
    vectric_organization_memberships_admin_access_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_organization_memberships_admin_access_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_memberships_admin_access_order_by!],
        "filter the rows returned"
        where: vectric_organization_memberships_admin_access_bool_exp
    ): vectric_organization_memberships_admin_access_aggregate!
    "fetch aggregated fields from the table: \"vectric.organization_order_items\""
    vectric_organization_order_items_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_organization_order_items_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_order_items_order_by!],
        "filter the rows returned"
        where: vectric_organization_order_items_bool_exp
    ): vectric_organization_order_items_aggregate!
    "fetch aggregated fields from the table: \"vectric.organization_orders\""
    vectric_organization_orders_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_organization_orders_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_orders_order_by!],
        "filter the rows returned"
        where: vectric_organization_orders_bool_exp
    ): vectric_organization_orders_aggregate!
    "fetch data from the table: \"vectric.organization_types\""
    vectric_organization_types(
        "distinct select on columns"
        distinct_on: [vectric_organization_types_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_types_order_by!],
        "filter the rows returned"
        where: vectric_organization_types_bool_exp
    ): [vectric_organization_types!]!
    "fetch aggregated fields from the table: \"vectric.organization_types\""
    vectric_organization_types_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_organization_types_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_types_order_by!],
        "filter the rows returned"
        where: vectric_organization_types_bool_exp
    ): vectric_organization_types_aggregate!
    "fetch data from the table: \"vectric.organization_types\" using primary key columns"
    vectric_organization_types_by_pk(type: String!): vectric_organization_types
    "fetch aggregated fields from the table: \"vectric.products_clipartcollection_links\""
    vectric_products_clipartcollection_links_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_clipartcollection_links_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_clipartcollection_links_order_by!],
        "filter the rows returned"
        where: vectric_products_clipartcollection_links_bool_exp
    ): vectric_products_clipartcollection_links_aggregate!
    "fetch data from the table: \"vectric.products_clipartcollection_links\" using primary key columns"
    vectric_products_clipartcollection_links_by_pk(clipartCollectionLinkId: bigint!): vectric_products_clipartcollection_links
    "fetch aggregated fields from the table: \"vectric.products_enhancement_eligibility\""
    vectric_products_enhancement_eligibility_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_enhancement_eligibility_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_enhancement_eligibility_order_by!],
        "filter the rows returned"
        where: vectric_products_enhancement_eligibility_bool_exp
    ): vectric_products_enhancement_eligibility_aggregate!
    "fetch data from the table: \"vectric.products_enhancement_eligibility\" using primary key columns"
    vectric_products_enhancement_eligibility_by_pk(eligibilityId: bigint!): vectric_products_enhancement_eligibility
    "fetch aggregated fields from the table: \"vectric.products_freeclipart\""
    vectric_products_freeclipart_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_freeclipart_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_freeclipart_order_by!],
        "filter the rows returned"
        where: vectric_products_freeclipart_bool_exp
    ): vectric_products_freeclipart_aggregate!
    "fetch data from the table: \"vectric.products_freeclipart\" using primary key columns"
    vectric_products_freeclipart_by_pk(productFreeClipartId: bigint!): vectric_products_freeclipart
    "fetch data from the table: \"vectric.products_fulfilments\""
    vectric_products_fulfilments(
        "distinct select on columns"
        distinct_on: [vectric_products_fulfilments_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_fulfilments_order_by!],
        "filter the rows returned"
        where: vectric_products_fulfilments_bool_exp
    ): [vectric_products_fulfilments!]!
    "fetch aggregated fields from the table: \"vectric.products_fulfilments\""
    vectric_products_fulfilments_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_fulfilments_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_fulfilments_order_by!],
        "filter the rows returned"
        where: vectric_products_fulfilments_bool_exp
    ): vectric_products_fulfilments_aggregate!
    "fetch data from the table: \"vectric.products_fulfilments\" using primary key columns"
    vectric_products_fulfilments_by_pk(fulfilmentId: bigint!): vectric_products_fulfilments
    "fetch data from the table: \"vectric.products_fulfilmenttypes\""
    vectric_products_fulfilmenttypes(
        "distinct select on columns"
        distinct_on: [vectric_products_fulfilmenttypes_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_fulfilmenttypes_order_by!],
        "filter the rows returned"
        where: vectric_products_fulfilmenttypes_bool_exp
    ): [vectric_products_fulfilmenttypes!]!
    "fetch aggregated fields from the table: \"vectric.products_fulfilmenttypes\""
    vectric_products_fulfilmenttypes_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_fulfilmenttypes_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_fulfilmenttypes_order_by!],
        "filter the rows returned"
        where: vectric_products_fulfilmenttypes_bool_exp
    ): vectric_products_fulfilmenttypes_aggregate!
    "fetch data from the table: \"vectric.products_fulfilmenttypes\" using primary key columns"
    vectric_products_fulfilmenttypes_by_pk(fulfilmenttypeid: bigint!): vectric_products_fulfilmenttypes
    "fetch data from the table: \"vectric.products_product_fulfilments\""
    vectric_products_product_fulfilments(
        "distinct select on columns"
        distinct_on: [vectric_products_product_fulfilments_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_product_fulfilments_order_by!],
        "filter the rows returned"
        where: vectric_products_product_fulfilments_bool_exp
    ): [vectric_products_product_fulfilments!]!
    "fetch aggregated fields from the table: \"vectric.products_product_fulfilments\""
    vectric_products_product_fulfilments_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_product_fulfilments_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_product_fulfilments_order_by!],
        "filter the rows returned"
        where: vectric_products_product_fulfilments_bool_exp
    ): vectric_products_product_fulfilments_aggregate!
    "fetch data from the table: \"vectric.products_product_fulfilments\" using primary key columns"
    vectric_products_product_fulfilments_by_pk(productfulfilmentid: bigint!): vectric_products_product_fulfilments
    "fetch data from the table: \"vectric.products_product_licence_type\""
    vectric_products_product_licence_type(
        "distinct select on columns"
        distinct_on: [vectric_products_product_licence_type_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_product_licence_type_order_by!],
        "filter the rows returned"
        where: vectric_products_product_licence_type_bool_exp
    ): [vectric_products_product_licence_type!]!
    "fetch aggregated fields from the table: \"vectric.products_product_licence_type\""
    vectric_products_product_licence_type_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_product_licence_type_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_product_licence_type_order_by!],
        "filter the rows returned"
        where: vectric_products_product_licence_type_bool_exp
    ): vectric_products_product_licence_type_aggregate!
    "fetch data from the table: \"vectric.products_product_licence_type\" using primary key columns"
    vectric_products_product_licence_type_by_pk(type: String!): vectric_products_product_licence_type
    "fetch aggregated fields from the table: \"vectric.products_products\""
    vectric_products_products_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_products_order_by!],
        "filter the rows returned"
        where: vectric_products_products_bool_exp
    ): vectric_products_products_aggregate!
    "fetch aggregated fields from the table: \"vectric.products_producttype\""
    vectric_products_producttype_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_producttype_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_producttype_order_by!],
        "filter the rows returned"
        where: vectric_products_producttype_bool_exp
    ): vectric_products_producttype_aggregate!
    "fetch aggregated fields from the table: \"vectric.products_upgrade_eligibility\""
    vectric_products_upgrade_eligibility_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_upgrade_eligibility_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_upgrade_eligibility_order_by!],
        "filter the rows returned"
        where: vectric_products_upgrade_eligibility_bool_exp
    ): vectric_products_upgrade_eligibility_aggregate!
    "fetch data from the table: \"vectric.sales_customerupdates\""
    vectric_sales_customerupdates(
        "distinct select on columns"
        distinct_on: [vectric_sales_customerupdates_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_customerupdates_order_by!],
        "filter the rows returned"
        where: vectric_sales_customerupdates_bool_exp
    ): [vectric_sales_customerupdates!]!
    "fetch aggregated fields from the table: \"vectric.sales_customerupdates\""
    vectric_sales_customerupdates_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_customerupdates_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_customerupdates_order_by!],
        "filter the rows returned"
        where: vectric_sales_customerupdates_bool_exp
    ): vectric_sales_customerupdates_aggregate!
    "fetch data from the table: \"vectric.sales_customerupdates\" using primary key columns"
    vectric_sales_customerupdates_by_pk(customerUpdateId: bigint!): vectric_sales_customerupdates
    "fetch aggregated fields from the table: \"vectric.sales_oemlicences\""
    vectric_sales_oemlicences_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_oemlicences_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_oemlicences_order_by!],
        "filter the rows returned"
        where: vectric_sales_oemlicences_bool_exp
    ): vectric_sales_oemlicences_aggregate!
    "fetch aggregated fields from the table: \"vectric.sales_orders\""
    vectric_sales_orders_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_orders_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_orders_order_by!],
        "filter the rows returned"
        where: vectric_sales_orders_bool_exp
    ): vectric_sales_orders_aggregate!
    "fetch aggregated fields from the table: \"vectric.sales_salesitem_products\""
    vectric_sales_salesitem_products_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_salesitem_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_salesitem_products_order_by!],
        "filter the rows returned"
        where: vectric_sales_salesitem_products_bool_exp
    ): vectric_sales_salesitem_products_aggregate!
    "fetch data from the table: \"vectric.sales_salesitemproduct_status\""
    vectric_sales_salesitemproduct_status(
        "distinct select on columns"
        distinct_on: [vectric_sales_salesitemproduct_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_salesitemproduct_status_order_by!],
        "filter the rows returned"
        where: vectric_sales_salesitemproduct_status_bool_exp
    ): [vectric_sales_salesitemproduct_status!]!
    "fetch aggregated fields from the table: \"vectric.sales_salesitemproduct_status\""
    vectric_sales_salesitemproduct_status_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_salesitemproduct_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_salesitemproduct_status_order_by!],
        "filter the rows returned"
        where: vectric_sales_salesitemproduct_status_bool_exp
    ): vectric_sales_salesitemproduct_status_aggregate!
    "fetch data from the table: \"vectric.sales_salesitemproduct_status\" using primary key columns"
    vectric_sales_salesitemproduct_status_by_pk(statusid: bigint!): vectric_sales_salesitemproduct_status
    "fetch aggregated fields from the table: \"vectric.sales_salesitems\""
    vectric_sales_salesitems_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_salesitems_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_salesitems_order_by!],
        "filter the rows returned"
        where: vectric_sales_salesitems_bool_exp
    ): vectric_sales_salesitems_aggregate!
    "fetch aggregated fields from the table: \"vectric.security_emailverificationtokens\""
    vectric_security_emailverificationtokens_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_security_emailverificationtokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_emailverificationtokens_order_by!],
        "filter the rows returned"
        where: vectric_security_emailverificationtokens_bool_exp
    ): vectric_security_emailverificationtokens_aggregate!
    "fetch data from the table: \"vectric.security_group_authorities\""
    vectric_security_group_authorities(
        "distinct select on columns"
        distinct_on: [vectric_security_group_authorities_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_group_authorities_order_by!],
        "filter the rows returned"
        where: vectric_security_group_authorities_bool_exp
    ): [vectric_security_group_authorities!]!
    "fetch aggregated fields from the table: \"vectric.security_group_authorities\""
    vectric_security_group_authorities_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_security_group_authorities_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_group_authorities_order_by!],
        "filter the rows returned"
        where: vectric_security_group_authorities_bool_exp
    ): vectric_security_group_authorities_aggregate!
    "fetch aggregated fields from the table: \"vectric.security_group_members\""
    vectric_security_group_members_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_security_group_members_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_group_members_order_by!],
        "filter the rows returned"
        where: vectric_security_group_members_bool_exp
    ): vectric_security_group_members_aggregate!
    "fetch aggregated fields from the table: \"vectric.security_passwordresettokens\""
    vectric_security_passwordresettokens_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_security_passwordresettokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_passwordresettokens_order_by!],
        "filter the rows returned"
        where: vectric_security_passwordresettokens_bool_exp
    ): vectric_security_passwordresettokens_aggregate!
    "fetch aggregated fields from the table: \"vectric.security_userinvitations\""
    vectric_security_userinvitations_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_security_userinvitations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_userinvitations_order_by!],
        "filter the rows returned"
        where: vectric_security_userinvitations_bool_exp
    ): vectric_security_userinvitations_aggregate!
    "fetch data from the table: \"vectric.security_userinvitations\" using primary key columns"
    vectric_security_userinvitations_by_pk(token: String!): vectric_security_userinvitations
    "fetch aggregated fields from the table: \"vectric.security_users\""
    vectric_security_users_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_security_users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_users_order_by!],
        "filter the rows returned"
        where: vectric_security_users_bool_exp
    ): vectric_security_users_aggregate!
    "fetch data from the table: \"vectric.security_users\" using primary key columns"
    vectric_security_users_by_pk(username: String!): vectric_security_users
    "fetch data from the table: \"vectric.subscription_contract_status\""
    vectric_subscription_contract_status(
        "distinct select on columns"
        distinct_on: [vectric_subscription_contract_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_subscription_contract_status_order_by!],
        "filter the rows returned"
        where: vectric_subscription_contract_status_bool_exp
    ): [vectric_subscription_contract_status!]!
    "fetch aggregated fields from the table: \"vectric.subscription_contract_status\""
    vectric_subscription_contract_status_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_subscription_contract_status_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_subscription_contract_status_order_by!],
        "filter the rows returned"
        where: vectric_subscription_contract_status_bool_exp
    ): vectric_subscription_contract_status_aggregate!
    "fetch data from the table: \"vectric.subscription_contract_status\" using primary key columns"
    vectric_subscription_contract_status_by_pk(status: String!): vectric_subscription_contract_status
    "fetch data from the table: \"vectric.subscription_contracts\""
    vectric_subscription_contracts(
        "distinct select on columns"
        distinct_on: [vectric_subscription_contracts_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_subscription_contracts_order_by!],
        "filter the rows returned"
        where: vectric_subscription_contracts_bool_exp
    ): [vectric_subscription_contracts!]!
    "fetch aggregated fields from the table: \"vectric.subscription_contracts\""
    vectric_subscription_contracts_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_subscription_contracts_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_subscription_contracts_order_by!],
        "filter the rows returned"
        where: vectric_subscription_contracts_bool_exp
    ): vectric_subscription_contracts_aggregate!
    "fetch data from the table: \"vectric.subscription_contracts\" using primary key columns"
    vectric_subscription_contracts_by_pk(subscriptionContractId: Int!): vectric_subscription_contracts
    "fetch data from the table: \"vectric.subscription_events\""
    vectric_subscription_events(
        "distinct select on columns"
        distinct_on: [vectric_subscription_events_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_subscription_events_order_by!],
        "filter the rows returned"
        where: vectric_subscription_events_bool_exp
    ): [vectric_subscription_events!]!
    "fetch aggregated fields from the table: \"vectric.subscription_events\""
    vectric_subscription_events_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_subscription_events_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_subscription_events_order_by!],
        "filter the rows returned"
        where: vectric_subscription_events_bool_exp
    ): vectric_subscription_events_aggregate!
    "fetch data from the table: \"vectric.subscription_events\" using primary key columns"
    vectric_subscription_events_by_pk(eventId: Int!): vectric_subscription_events
    "fetch aggregated fields from the table: \"vectric.update_requests\""
    vectric_update_requests_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_update_requests_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_update_requests_order_by!],
        "filter the rows returned"
        where: vectric_update_requests_bool_exp
    ): vectric_update_requests_aggregate!
    "fetch aggregated fields from the table: \"vectric.upgrade_tokens\""
    vectric_upgrade_tokens_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_upgrade_tokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrade_tokens_order_by!],
        "filter the rows returned"
        where: vectric_upgrade_tokens_bool_exp
    ): vectric_upgrade_tokens_aggregate!
    "fetch data from the table: \"vectric.version_code\""
    vectric_version_code(
        "distinct select on columns"
        distinct_on: [vectric_version_code_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_version_code_order_by!],
        "filter the rows returned"
        where: vectric_version_code_bool_exp
    ): [vectric_version_code!]!
    "fetch aggregated fields from the table: \"vectric.version_code\""
    vectric_version_code_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_version_code_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_version_code_order_by!],
        "filter the rows returned"
        where: vectric_version_code_bool_exp
    ): vectric_version_code_aggregate!
    "fetch data from the table: \"vectric.version_code\" using primary key columns"
    vectric_version_code_by_pk(versionCodeId: bigint!): vectric_version_code
    "fetch data from the table: \"vectric.products_versioncodes\" using primary key columns"
    versionCodeById(versioncodeid: bigint!): vectric_products_versioncodes
    "fetch data from the table: \"vectric.products_versioncodes\""
    versionCodes(
        "distinct select on columns"
        distinct_on: [vectric_products_versioncodes_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_versioncodes_order_by!],
        "filter the rows returned"
        where: vectric_products_versioncodes_bool_exp
    ): [vectric_products_versioncodes!]!
    "fetch aggregated fields from the table: \"vectric.products_versioncodes\""
    versionCodes_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_versioncodes_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_versioncodes_order_by!],
        "filter the rows returned"
        where: vectric_products_versioncodes_bool_exp
    ): vectric_products_versioncodes_aggregate!
    "fetch data from the table: \"vectric.customer_zd_uploads\""
    zendeskUploads(
        "distinct select on columns"
        distinct_on: [vectric_customer_zd_uploads_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_zd_uploads_order_by!],
        "filter the rows returned"
        where: vectric_customer_zd_uploads_bool_exp
    ): [vectric_customer_zd_uploads!]!
    "fetch data from the table: \"vectric.customer_zd_uploads\" using primary key columns"
    zendeskUploadsById(zdUploadId: bigint!): vectric_customer_zd_uploads
    "fetch aggregated fields from the table: \"vectric.customer_zd_uploads\""
    zendeskUploads_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_customer_zd_uploads_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_zd_uploads_order_by!],
        "filter the rows returned"
        where: vectric_customer_zd_uploads_bool_exp
    ): vectric_customer_zd_uploads_aggregate!
}

"columns and relationships of \"vectric.active_memberships\""
type vectric_active_memberships {
    customerId: bigint
    isAdmin: Boolean
    membershipId: Int
    "An object relationship"
    organization: vectric_organizations
    organizationId: Int
    role: String
}

"aggregated selection of \"vectric.active_memberships\""
type vectric_active_memberships_aggregate {
    aggregate: vectric_active_memberships_aggregate_fields
    nodes: [vectric_active_memberships!]!
}

"aggregate fields of \"vectric.active_memberships\""
type vectric_active_memberships_aggregate_fields {
    avg: vectric_active_memberships_avg_fields
    count(columns: [vectric_active_memberships_select_column!], distinct: Boolean): Int!
    max: vectric_active_memberships_max_fields
    min: vectric_active_memberships_min_fields
    stddev: vectric_active_memberships_stddev_fields
    stddev_pop: vectric_active_memberships_stddev_pop_fields
    stddev_samp: vectric_active_memberships_stddev_samp_fields
    sum: vectric_active_memberships_sum_fields
    var_pop: vectric_active_memberships_var_pop_fields
    var_samp: vectric_active_memberships_var_samp_fields
    variance: vectric_active_memberships_variance_fields
}

"aggregate avg on columns"
type vectric_active_memberships_avg_fields {
    customerId: Float
    membershipId: Float
    organizationId: Float
}

"aggregate max on columns"
type vectric_active_memberships_max_fields {
    customerId: bigint
    membershipId: Int
    organizationId: Int
    role: String
}

"aggregate min on columns"
type vectric_active_memberships_min_fields {
    customerId: bigint
    membershipId: Int
    organizationId: Int
    role: String
}

"aggregate stddev on columns"
type vectric_active_memberships_stddev_fields {
    customerId: Float
    membershipId: Float
    organizationId: Float
}

"aggregate stddev_pop on columns"
type vectric_active_memberships_stddev_pop_fields {
    customerId: Float
    membershipId: Float
    organizationId: Float
}

"aggregate stddev_samp on columns"
type vectric_active_memberships_stddev_samp_fields {
    customerId: Float
    membershipId: Float
    organizationId: Float
}

"aggregate sum on columns"
type vectric_active_memberships_sum_fields {
    customerId: bigint
    membershipId: Int
    organizationId: Int
}

"aggregate var_pop on columns"
type vectric_active_memberships_var_pop_fields {
    customerId: Float
    membershipId: Float
    organizationId: Float
}

"aggregate var_samp on columns"
type vectric_active_memberships_var_samp_fields {
    customerId: Float
    membershipId: Float
    organizationId: Float
}

"aggregate variance on columns"
type vectric_active_memberships_variance_fields {
    customerId: Float
    membershipId: Float
    organizationId: Float
}

"columns and relationships of \"vectric.active_upgrades\""
type vectric_active_upgrades {
    eligibility_id: bigint
    fastspring_id: String
    "An object relationship"
    fromProduct: vectric_products_products
    from_product_id: bigint
    from_product_name: String
    price: numeric
    summary: String
    "An object relationship"
    toProduct: vectric_products_products
    to_product_id: bigint
    to_product_name: String
}

"aggregated selection of \"vectric.active_upgrades\""
type vectric_active_upgrades_aggregate {
    aggregate: vectric_active_upgrades_aggregate_fields
    nodes: [vectric_active_upgrades!]!
}

"aggregate fields of \"vectric.active_upgrades\""
type vectric_active_upgrades_aggregate_fields {
    avg: vectric_active_upgrades_avg_fields
    count(columns: [vectric_active_upgrades_select_column!], distinct: Boolean): Int!
    max: vectric_active_upgrades_max_fields
    min: vectric_active_upgrades_min_fields
    stddev: vectric_active_upgrades_stddev_fields
    stddev_pop: vectric_active_upgrades_stddev_pop_fields
    stddev_samp: vectric_active_upgrades_stddev_samp_fields
    sum: vectric_active_upgrades_sum_fields
    var_pop: vectric_active_upgrades_var_pop_fields
    var_samp: vectric_active_upgrades_var_samp_fields
    variance: vectric_active_upgrades_variance_fields
}

"aggregate avg on columns"
type vectric_active_upgrades_avg_fields {
    eligibility_id: Float
    from_product_id: Float
    price: Float
    to_product_id: Float
}

"aggregate max on columns"
type vectric_active_upgrades_max_fields {
    eligibility_id: bigint
    fastspring_id: String
    from_product_id: bigint
    from_product_name: String
    price: numeric
    summary: String
    to_product_id: bigint
    to_product_name: String
}

"aggregate min on columns"
type vectric_active_upgrades_min_fields {
    eligibility_id: bigint
    fastspring_id: String
    from_product_id: bigint
    from_product_name: String
    price: numeric
    summary: String
    to_product_id: bigint
    to_product_name: String
}

"aggregate stddev on columns"
type vectric_active_upgrades_stddev_fields {
    eligibility_id: Float
    from_product_id: Float
    price: Float
    to_product_id: Float
}

"aggregate stddev_pop on columns"
type vectric_active_upgrades_stddev_pop_fields {
    eligibility_id: Float
    from_product_id: Float
    price: Float
    to_product_id: Float
}

"aggregate stddev_samp on columns"
type vectric_active_upgrades_stddev_samp_fields {
    eligibility_id: Float
    from_product_id: Float
    price: Float
    to_product_id: Float
}

"aggregate sum on columns"
type vectric_active_upgrades_sum_fields {
    eligibility_id: bigint
    from_product_id: bigint
    price: numeric
    to_product_id: bigint
}

"aggregate var_pop on columns"
type vectric_active_upgrades_var_pop_fields {
    eligibility_id: Float
    from_product_id: Float
    price: Float
    to_product_id: Float
}

"aggregate var_samp on columns"
type vectric_active_upgrades_var_samp_fields {
    eligibility_id: Float
    from_product_id: Float
    price: Float
    to_product_id: Float
}

"aggregate variance on columns"
type vectric_active_upgrades_variance_fields {
    eligibility_id: Float
    from_product_id: Float
    price: Float
    to_product_id: Float
}

"columns and relationships of \"vectric.allocatable_bundles\""
type vectric_allocatable_bundles {
    "An object relationship"
    allocatableProduct: vectric_products_products
    bundleId: String
    "An array relationship"
    licences(
        "distinct select on columns"
        distinct_on: [vectric_sales_oemlicences_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_oemlicences_order_by!],
        "filter the rows returned"
        where: vectric_sales_oemlicences_bool_exp
    ): [vectric_sales_oemlicences!]!
    "An aggregate relationship"
    licences_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_oemlicences_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_oemlicences_order_by!],
        "filter the rows returned"
        where: vectric_sales_oemlicences_bool_exp
    ): vectric_sales_oemlicences_aggregate!
    "An object relationship"
    partner: vectric_oem_partners
    partnerId: bigint
    product: bigint
    productDisplayName: String
    typeDisplayName: String
}

"aggregated selection of \"vectric.allocatable_bundles\""
type vectric_allocatable_bundles_aggregate {
    aggregate: vectric_allocatable_bundles_aggregate_fields
    nodes: [vectric_allocatable_bundles!]!
}

"aggregate fields of \"vectric.allocatable_bundles\""
type vectric_allocatable_bundles_aggregate_fields {
    avg: vectric_allocatable_bundles_avg_fields
    count(columns: [vectric_allocatable_bundles_select_column!], distinct: Boolean): Int!
    max: vectric_allocatable_bundles_max_fields
    min: vectric_allocatable_bundles_min_fields
    stddev: vectric_allocatable_bundles_stddev_fields
    stddev_pop: vectric_allocatable_bundles_stddev_pop_fields
    stddev_samp: vectric_allocatable_bundles_stddev_samp_fields
    sum: vectric_allocatable_bundles_sum_fields
    var_pop: vectric_allocatable_bundles_var_pop_fields
    var_samp: vectric_allocatable_bundles_var_samp_fields
    variance: vectric_allocatable_bundles_variance_fields
}

"aggregate avg on columns"
type vectric_allocatable_bundles_avg_fields {
    partnerId: Float
    product: Float
}

"aggregate max on columns"
type vectric_allocatable_bundles_max_fields {
    bundleId: String
    partnerId: bigint
    product: bigint
    productDisplayName: String
    typeDisplayName: String
}

"aggregate min on columns"
type vectric_allocatable_bundles_min_fields {
    bundleId: String
    partnerId: bigint
    product: bigint
    productDisplayName: String
    typeDisplayName: String
}

"response of any mutation on the table \"vectric.allocatable_bundles\""
type vectric_allocatable_bundles_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_allocatable_bundles!]!
}

"aggregate stddev on columns"
type vectric_allocatable_bundles_stddev_fields {
    partnerId: Float
    product: Float
}

"aggregate stddev_pop on columns"
type vectric_allocatable_bundles_stddev_pop_fields {
    partnerId: Float
    product: Float
}

"aggregate stddev_samp on columns"
type vectric_allocatable_bundles_stddev_samp_fields {
    partnerId: Float
    product: Float
}

"aggregate sum on columns"
type vectric_allocatable_bundles_sum_fields {
    partnerId: bigint
    product: bigint
}

"aggregate var_pop on columns"
type vectric_allocatable_bundles_var_pop_fields {
    partnerId: Float
    product: Float
}

"aggregate var_samp on columns"
type vectric_allocatable_bundles_var_samp_fields {
    partnerId: Float
    product: Float
}

"aggregate variance on columns"
type vectric_allocatable_bundles_variance_fields {
    partnerId: Float
    product: Float
}

"columns and relationships of \"vectric.allocatable_licence_count\""
type vectric_allocatable_licence_count {
    "An object relationship"
    allocatableProduct: vectric_products_products
    availableCount: bigint
    oemPartnerId: bigint
    "An object relationship"
    partner: vectric_oem_partners
    productId: bigint
}

"aggregated selection of \"vectric.allocatable_licence_count\""
type vectric_allocatable_licence_count_aggregate {
    aggregate: vectric_allocatable_licence_count_aggregate_fields
    nodes: [vectric_allocatable_licence_count!]!
}

"aggregate fields of \"vectric.allocatable_licence_count\""
type vectric_allocatable_licence_count_aggregate_fields {
    avg: vectric_allocatable_licence_count_avg_fields
    count(columns: [vectric_allocatable_licence_count_select_column!], distinct: Boolean): Int!
    max: vectric_allocatable_licence_count_max_fields
    min: vectric_allocatable_licence_count_min_fields
    stddev: vectric_allocatable_licence_count_stddev_fields
    stddev_pop: vectric_allocatable_licence_count_stddev_pop_fields
    stddev_samp: vectric_allocatable_licence_count_stddev_samp_fields
    sum: vectric_allocatable_licence_count_sum_fields
    var_pop: vectric_allocatable_licence_count_var_pop_fields
    var_samp: vectric_allocatable_licence_count_var_samp_fields
    variance: vectric_allocatable_licence_count_variance_fields
}

"aggregate avg on columns"
type vectric_allocatable_licence_count_avg_fields {
    availableCount: Float
    oemPartnerId: Float
    productId: Float
}

"aggregate max on columns"
type vectric_allocatable_licence_count_max_fields {
    availableCount: bigint
    oemPartnerId: bigint
    productId: bigint
}

"aggregate min on columns"
type vectric_allocatable_licence_count_min_fields {
    availableCount: bigint
    oemPartnerId: bigint
    productId: bigint
}

"aggregate stddev on columns"
type vectric_allocatable_licence_count_stddev_fields {
    availableCount: Float
    oemPartnerId: Float
    productId: Float
}

"aggregate stddev_pop on columns"
type vectric_allocatable_licence_count_stddev_pop_fields {
    availableCount: Float
    oemPartnerId: Float
    productId: Float
}

"aggregate stddev_samp on columns"
type vectric_allocatable_licence_count_stddev_samp_fields {
    availableCount: Float
    oemPartnerId: Float
    productId: Float
}

"aggregate sum on columns"
type vectric_allocatable_licence_count_sum_fields {
    availableCount: bigint
    oemPartnerId: bigint
    productId: bigint
}

"aggregate var_pop on columns"
type vectric_allocatable_licence_count_var_pop_fields {
    availableCount: Float
    oemPartnerId: Float
    productId: Float
}

"aggregate var_samp on columns"
type vectric_allocatable_licence_count_var_samp_fields {
    availableCount: Float
    oemPartnerId: Float
    productId: Float
}

"aggregate variance on columns"
type vectric_allocatable_licence_count_variance_fields {
    availableCount: Float
    oemPartnerId: Float
    productId: Float
}

"columns and relationships of \"vectric.allocated_bundles\""
type vectric_allocated_bundles {
    allocatedby: String
    allocationbatch: String
    allocationtype: bigint
    bundleId: String
    dateAllocated: timestamptz
    dateCreated: timestamptz
    dateOriginallyRegistered: timestamptz
    "An array relationship"
    licences(
        "distinct select on columns"
        distinct_on: [vectric_sales_oemlicences_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_oemlicences_order_by!],
        "filter the rows returned"
        where: vectric_sales_oemlicences_bool_exp
    ): [vectric_sales_oemlicences!]!
    "An aggregate relationship"
    licences_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_oemlicences_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_oemlicences_order_by!],
        "filter the rows returned"
        where: vectric_sales_oemlicences_bool_exp
    ): vectric_sales_oemlicences_aggregate!
    notes: String
    "An object relationship"
    partner: vectric_oem_partners
    partnerId: bigint
    product: bigint
    productDisplayName: String
    typeDisplayName: String
}

"aggregated selection of \"vectric.allocated_bundles\""
type vectric_allocated_bundles_aggregate {
    aggregate: vectric_allocated_bundles_aggregate_fields
    nodes: [vectric_allocated_bundles!]!
}

"aggregate fields of \"vectric.allocated_bundles\""
type vectric_allocated_bundles_aggregate_fields {
    avg: vectric_allocated_bundles_avg_fields
    count(columns: [vectric_allocated_bundles_select_column!], distinct: Boolean): Int!
    max: vectric_allocated_bundles_max_fields
    min: vectric_allocated_bundles_min_fields
    stddev: vectric_allocated_bundles_stddev_fields
    stddev_pop: vectric_allocated_bundles_stddev_pop_fields
    stddev_samp: vectric_allocated_bundles_stddev_samp_fields
    sum: vectric_allocated_bundles_sum_fields
    var_pop: vectric_allocated_bundles_var_pop_fields
    var_samp: vectric_allocated_bundles_var_samp_fields
    variance: vectric_allocated_bundles_variance_fields
}

"aggregate avg on columns"
type vectric_allocated_bundles_avg_fields {
    allocationtype: Float
    partnerId: Float
    product: Float
}

"aggregate max on columns"
type vectric_allocated_bundles_max_fields {
    allocatedby: String
    allocationbatch: String
    allocationtype: bigint
    bundleId: String
    dateAllocated: timestamptz
    dateCreated: timestamptz
    dateOriginallyRegistered: timestamptz
    notes: String
    partnerId: bigint
    product: bigint
    productDisplayName: String
    typeDisplayName: String
}

"aggregate min on columns"
type vectric_allocated_bundles_min_fields {
    allocatedby: String
    allocationbatch: String
    allocationtype: bigint
    bundleId: String
    dateAllocated: timestamptz
    dateCreated: timestamptz
    dateOriginallyRegistered: timestamptz
    notes: String
    partnerId: bigint
    product: bigint
    productDisplayName: String
    typeDisplayName: String
}

"response of any mutation on the table \"vectric.allocated_bundles\""
type vectric_allocated_bundles_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_allocated_bundles!]!
}

"aggregate stddev on columns"
type vectric_allocated_bundles_stddev_fields {
    allocationtype: Float
    partnerId: Float
    product: Float
}

"aggregate stddev_pop on columns"
type vectric_allocated_bundles_stddev_pop_fields {
    allocationtype: Float
    partnerId: Float
    product: Float
}

"aggregate stddev_samp on columns"
type vectric_allocated_bundles_stddev_samp_fields {
    allocationtype: Float
    partnerId: Float
    product: Float
}

"aggregate sum on columns"
type vectric_allocated_bundles_sum_fields {
    allocationtype: bigint
    partnerId: bigint
    product: bigint
}

"aggregate var_pop on columns"
type vectric_allocated_bundles_var_pop_fields {
    allocationtype: Float
    partnerId: Float
    product: Float
}

"aggregate var_samp on columns"
type vectric_allocated_bundles_var_samp_fields {
    allocationtype: Float
    partnerId: Float
    product: Float
}

"aggregate variance on columns"
type vectric_allocated_bundles_variance_fields {
    allocationtype: Float
    partnerId: Float
    product: Float
}

"""

File locations for batch summaries


columns and relationships of "vectric.allocation_summary"
"""
type vectric_allocation_summary {
    "An array relationship"
    batch(
        "distinct select on columns"
        distinct_on: [vectric_allocated_bundles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocated_bundles_order_by!],
        "filter the rows returned"
        where: vectric_allocated_bundles_bool_exp
    ): [vectric_allocated_bundles!]!
    batchId: String!
    "An aggregate relationship"
    batch_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_allocated_bundles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_allocated_bundles_order_by!],
        "filter the rows returned"
        where: vectric_allocated_bundles_bool_exp
    ): vectric_allocated_bundles_aggregate!
    bucket: String!
    id: Int!
    location: String!
    "An object relationship"
    partner: vectric_oem_partners!
    partnerId: Int!
    signedUrl: String
    type: vectric_allocation_summary_file_type_enum!
}

"aggregated selection of \"vectric.allocation_summary\""
type vectric_allocation_summary_aggregate {
    aggregate: vectric_allocation_summary_aggregate_fields
    nodes: [vectric_allocation_summary!]!
}

"aggregate fields of \"vectric.allocation_summary\""
type vectric_allocation_summary_aggregate_fields {
    avg: vectric_allocation_summary_avg_fields
    count(columns: [vectric_allocation_summary_select_column!], distinct: Boolean): Int!
    max: vectric_allocation_summary_max_fields
    min: vectric_allocation_summary_min_fields
    stddev: vectric_allocation_summary_stddev_fields
    stddev_pop: vectric_allocation_summary_stddev_pop_fields
    stddev_samp: vectric_allocation_summary_stddev_samp_fields
    sum: vectric_allocation_summary_sum_fields
    var_pop: vectric_allocation_summary_var_pop_fields
    var_samp: vectric_allocation_summary_var_samp_fields
    variance: vectric_allocation_summary_variance_fields
}

"aggregate avg on columns"
type vectric_allocation_summary_avg_fields {
    id: Float
    partnerId: Float
}

"""

File types for the summaries


columns and relationships of "vectric.allocation_summary_file_type"
"""
type vectric_allocation_summary_file_type {
    type: String!
}

"aggregated selection of \"vectric.allocation_summary_file_type\""
type vectric_allocation_summary_file_type_aggregate {
    aggregate: vectric_allocation_summary_file_type_aggregate_fields
    nodes: [vectric_allocation_summary_file_type!]!
}

"aggregate fields of \"vectric.allocation_summary_file_type\""
type vectric_allocation_summary_file_type_aggregate_fields {
    count(columns: [vectric_allocation_summary_file_type_select_column!], distinct: Boolean): Int!
    max: vectric_allocation_summary_file_type_max_fields
    min: vectric_allocation_summary_file_type_min_fields
}

"aggregate max on columns"
type vectric_allocation_summary_file_type_max_fields {
    type: String
}

"aggregate min on columns"
type vectric_allocation_summary_file_type_min_fields {
    type: String
}

"response of any mutation on the table \"vectric.allocation_summary_file_type\""
type vectric_allocation_summary_file_type_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_allocation_summary_file_type!]!
}

"aggregate max on columns"
type vectric_allocation_summary_max_fields {
    batchId: String
    bucket: String
    id: Int
    location: String
    partnerId: Int
    signedUrl: String
}

"aggregate min on columns"
type vectric_allocation_summary_min_fields {
    batchId: String
    bucket: String
    id: Int
    location: String
    partnerId: Int
    signedUrl: String
}

"response of any mutation on the table \"vectric.allocation_summary\""
type vectric_allocation_summary_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_allocation_summary!]!
}

"aggregate stddev on columns"
type vectric_allocation_summary_stddev_fields {
    id: Float
    partnerId: Float
}

"aggregate stddev_pop on columns"
type vectric_allocation_summary_stddev_pop_fields {
    id: Float
    partnerId: Float
}

"aggregate stddev_samp on columns"
type vectric_allocation_summary_stddev_samp_fields {
    id: Float
    partnerId: Float
}

"aggregate sum on columns"
type vectric_allocation_summary_sum_fields {
    id: Int
    partnerId: Int
}

"aggregate var_pop on columns"
type vectric_allocation_summary_var_pop_fields {
    id: Float
    partnerId: Float
}

"aggregate var_samp on columns"
type vectric_allocation_summary_var_samp_fields {
    id: Float
    partnerId: Float
}

"aggregate variance on columns"
type vectric_allocation_summary_variance_fields {
    id: Float
    partnerId: Float
}

"columns and relationships of \"vectric.continents\""
type vectric_continents {
    "Continent code"
    code: bpchar!
    name: String
}

"aggregated selection of \"vectric.continents\""
type vectric_continents_aggregate {
    aggregate: vectric_continents_aggregate_fields
    nodes: [vectric_continents!]!
}

"aggregate fields of \"vectric.continents\""
type vectric_continents_aggregate_fields {
    count(columns: [vectric_continents_select_column!], distinct: Boolean): Int!
    max: vectric_continents_max_fields
    min: vectric_continents_min_fields
}

"aggregate max on columns"
type vectric_continents_max_fields {
    "Continent code"
    code: bpchar
    name: String
}

"aggregate min on columns"
type vectric_continents_min_fields {
    "Continent code"
    code: bpchar
    name: String
}

"response of any mutation on the table \"vectric.continents\""
type vectric_continents_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_continents!]!
}

"columns and relationships of \"vectric.countries\""
type vectric_countries {
    "Two-letter country code (ISO 3166-1 alpha-2)"
    code: bpchar!
    "An object relationship"
    continent: vectric_continents!
    continentcode: bpchar!
    countryid: bigint!
    displayorder: Int!
    "Full English country name"
    fullname: String!
    "Three-letter country code (ISO 3166-1 alpha-3)"
    iso3: bpchar!
    "English country name"
    name: String!
    "Three-digit country number (ISO 3166-1 numeric)"
    number: Int!
}

"aggregated selection of \"vectric.countries\""
type vectric_countries_aggregate {
    aggregate: vectric_countries_aggregate_fields
    nodes: [vectric_countries!]!
}

"aggregate fields of \"vectric.countries\""
type vectric_countries_aggregate_fields {
    avg: vectric_countries_avg_fields
    count(columns: [vectric_countries_select_column!], distinct: Boolean): Int!
    max: vectric_countries_max_fields
    min: vectric_countries_min_fields
    stddev: vectric_countries_stddev_fields
    stddev_pop: vectric_countries_stddev_pop_fields
    stddev_samp: vectric_countries_stddev_samp_fields
    sum: vectric_countries_sum_fields
    var_pop: vectric_countries_var_pop_fields
    var_samp: vectric_countries_var_samp_fields
    variance: vectric_countries_variance_fields
}

"aggregate avg on columns"
type vectric_countries_avg_fields {
    countryid: Float
    displayorder: Float
    "Three-digit country number (ISO 3166-1 numeric)"
    number: Float
}

"aggregate max on columns"
type vectric_countries_max_fields {
    "Two-letter country code (ISO 3166-1 alpha-2)"
    code: bpchar
    continentcode: bpchar
    countryid: bigint
    displayorder: Int
    "Full English country name"
    fullname: String
    "Three-letter country code (ISO 3166-1 alpha-3)"
    iso3: bpchar
    "English country name"
    name: String
    "Three-digit country number (ISO 3166-1 numeric)"
    number: Int
}

"aggregate min on columns"
type vectric_countries_min_fields {
    "Two-letter country code (ISO 3166-1 alpha-2)"
    code: bpchar
    continentcode: bpchar
    countryid: bigint
    displayorder: Int
    "Full English country name"
    fullname: String
    "Three-letter country code (ISO 3166-1 alpha-3)"
    iso3: bpchar
    "English country name"
    name: String
    "Three-digit country number (ISO 3166-1 numeric)"
    number: Int
}

"response of any mutation on the table \"vectric.countries\""
type vectric_countries_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_countries!]!
}

"aggregate stddev on columns"
type vectric_countries_stddev_fields {
    countryid: Float
    displayorder: Float
    "Three-digit country number (ISO 3166-1 numeric)"
    number: Float
}

"aggregate stddev_pop on columns"
type vectric_countries_stddev_pop_fields {
    countryid: Float
    displayorder: Float
    "Three-digit country number (ISO 3166-1 numeric)"
    number: Float
}

"aggregate stddev_samp on columns"
type vectric_countries_stddev_samp_fields {
    countryid: Float
    displayorder: Float
    "Three-digit country number (ISO 3166-1 numeric)"
    number: Float
}

"aggregate sum on columns"
type vectric_countries_sum_fields {
    countryid: bigint
    displayorder: Int
    "Three-digit country number (ISO 3166-1 numeric)"
    number: Int
}

"aggregate var_pop on columns"
type vectric_countries_var_pop_fields {
    countryid: Float
    displayorder: Float
    "Three-digit country number (ISO 3166-1 numeric)"
    number: Float
}

"aggregate var_samp on columns"
type vectric_countries_var_samp_fields {
    countryid: Float
    displayorder: Float
    "Three-digit country number (ISO 3166-1 numeric)"
    number: Float
}

"aggregate variance on columns"
type vectric_countries_variance_fields {
    countryid: Float
    displayorder: Float
    "Three-digit country number (ISO 3166-1 numeric)"
    number: Float
}

"columns and relationships of \"vectric.customer_area\""
type vectric_customer_area {
    bucketName: String!
    "An object relationship"
    customer: vectric_sales_customers!
    "An array relationship"
    customerAreaFiles(
        "distinct select on columns"
        distinct_on: [vectric_customer_area_file_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_area_file_order_by!],
        "filter the rows returned"
        where: vectric_customer_area_file_bool_exp
    ): [vectric_customer_area_file!]!
    "An aggregate relationship"
    customerAreaFiles_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_customer_area_file_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_area_file_order_by!],
        "filter the rows returned"
        where: vectric_customer_area_file_bool_exp
    ): vectric_customer_area_file_aggregate!
    customerAreaId: bigint!
    customerId: bigint!
    objectName: String!
}

"aggregated selection of \"vectric.customer_area\""
type vectric_customer_area_aggregate {
    aggregate: vectric_customer_area_aggregate_fields
    nodes: [vectric_customer_area!]!
}

"aggregate fields of \"vectric.customer_area\""
type vectric_customer_area_aggregate_fields {
    avg: vectric_customer_area_avg_fields
    count(columns: [vectric_customer_area_select_column!], distinct: Boolean): Int!
    max: vectric_customer_area_max_fields
    min: vectric_customer_area_min_fields
    stddev: vectric_customer_area_stddev_fields
    stddev_pop: vectric_customer_area_stddev_pop_fields
    stddev_samp: vectric_customer_area_stddev_samp_fields
    sum: vectric_customer_area_sum_fields
    var_pop: vectric_customer_area_var_pop_fields
    var_samp: vectric_customer_area_var_samp_fields
    variance: vectric_customer_area_variance_fields
}

"aggregate avg on columns"
type vectric_customer_area_avg_fields {
    customerAreaId: Float
    customerId: Float
}

"columns and relationships of \"vectric.customer_area_file\""
type vectric_customer_area_file {
    "An object relationship"
    customerArea: vectric_customer_area!
    customerAreaFileId: bigint!
    customerAreaId: bigint!
    dateUploaded: timestamptz!
    fileKey: String!
    fileName: String!
    objectName: String!
    "An object relationship"
    product: vectric_products_products
    productId: bigint
}

"aggregated selection of \"vectric.customer_area_file\""
type vectric_customer_area_file_aggregate {
    aggregate: vectric_customer_area_file_aggregate_fields
    nodes: [vectric_customer_area_file!]!
}

"aggregate fields of \"vectric.customer_area_file\""
type vectric_customer_area_file_aggregate_fields {
    avg: vectric_customer_area_file_avg_fields
    count(columns: [vectric_customer_area_file_select_column!], distinct: Boolean): Int!
    max: vectric_customer_area_file_max_fields
    min: vectric_customer_area_file_min_fields
    stddev: vectric_customer_area_file_stddev_fields
    stddev_pop: vectric_customer_area_file_stddev_pop_fields
    stddev_samp: vectric_customer_area_file_stddev_samp_fields
    sum: vectric_customer_area_file_sum_fields
    var_pop: vectric_customer_area_file_var_pop_fields
    var_samp: vectric_customer_area_file_var_samp_fields
    variance: vectric_customer_area_file_variance_fields
}

"aggregate avg on columns"
type vectric_customer_area_file_avg_fields {
    customerAreaFileId: Float
    customerAreaId: Float
    productId: Float
}

"aggregate max on columns"
type vectric_customer_area_file_max_fields {
    customerAreaFileId: bigint
    customerAreaId: bigint
    dateUploaded: timestamptz
    fileKey: String
    fileName: String
    objectName: String
    productId: bigint
}

"aggregate min on columns"
type vectric_customer_area_file_min_fields {
    customerAreaFileId: bigint
    customerAreaId: bigint
    dateUploaded: timestamptz
    fileKey: String
    fileName: String
    objectName: String
    productId: bigint
}

"response of any mutation on the table \"vectric.customer_area_file\""
type vectric_customer_area_file_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_customer_area_file!]!
}

"aggregate stddev on columns"
type vectric_customer_area_file_stddev_fields {
    customerAreaFileId: Float
    customerAreaId: Float
    productId: Float
}

"aggregate stddev_pop on columns"
type vectric_customer_area_file_stddev_pop_fields {
    customerAreaFileId: Float
    customerAreaId: Float
    productId: Float
}

"aggregate stddev_samp on columns"
type vectric_customer_area_file_stddev_samp_fields {
    customerAreaFileId: Float
    customerAreaId: Float
    productId: Float
}

"aggregate sum on columns"
type vectric_customer_area_file_sum_fields {
    customerAreaFileId: bigint
    customerAreaId: bigint
    productId: bigint
}

"aggregate var_pop on columns"
type vectric_customer_area_file_var_pop_fields {
    customerAreaFileId: Float
    customerAreaId: Float
    productId: Float
}

"aggregate var_samp on columns"
type vectric_customer_area_file_var_samp_fields {
    customerAreaFileId: Float
    customerAreaId: Float
    productId: Float
}

"aggregate variance on columns"
type vectric_customer_area_file_variance_fields {
    customerAreaFileId: Float
    customerAreaId: Float
    productId: Float
}

"aggregate max on columns"
type vectric_customer_area_max_fields {
    bucketName: String
    customerAreaId: bigint
    customerId: bigint
    objectName: String
}

"aggregate min on columns"
type vectric_customer_area_min_fields {
    bucketName: String
    customerAreaId: bigint
    customerId: bigint
    objectName: String
}

"response of any mutation on the table \"vectric.customer_area\""
type vectric_customer_area_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_customer_area!]!
}

"aggregate stddev on columns"
type vectric_customer_area_stddev_fields {
    customerAreaId: Float
    customerId: Float
}

"aggregate stddev_pop on columns"
type vectric_customer_area_stddev_pop_fields {
    customerAreaId: Float
    customerId: Float
}

"aggregate stddev_samp on columns"
type vectric_customer_area_stddev_samp_fields {
    customerAreaId: Float
    customerId: Float
}

"aggregate sum on columns"
type vectric_customer_area_sum_fields {
    customerAreaId: bigint
    customerId: bigint
}

"aggregate var_pop on columns"
type vectric_customer_area_var_pop_fields {
    customerAreaId: Float
    customerId: Float
}

"aggregate var_samp on columns"
type vectric_customer_area_var_samp_fields {
    customerAreaId: Float
    customerId: Float
}

"aggregate variance on columns"
type vectric_customer_area_variance_fields {
    customerAreaId: Float
    customerId: Float
}

"columns and relationships of \"vectric.customer_responses\""
type vectric_customer_responses {
    customerid: bigint!
    customerresponseid: bigint!
    othertext: String
    "An object relationship"
    question: vectric_questions!
    questionid: bigint!
    "An object relationship"
    response: vectric_responses!
    responseid: bigint!
}

"aggregated selection of \"vectric.customer_responses\""
type vectric_customer_responses_aggregate {
    aggregate: vectric_customer_responses_aggregate_fields
    nodes: [vectric_customer_responses!]!
}

"aggregate fields of \"vectric.customer_responses\""
type vectric_customer_responses_aggregate_fields {
    avg: vectric_customer_responses_avg_fields
    count(columns: [vectric_customer_responses_select_column!], distinct: Boolean): Int!
    max: vectric_customer_responses_max_fields
    min: vectric_customer_responses_min_fields
    stddev: vectric_customer_responses_stddev_fields
    stddev_pop: vectric_customer_responses_stddev_pop_fields
    stddev_samp: vectric_customer_responses_stddev_samp_fields
    sum: vectric_customer_responses_sum_fields
    var_pop: vectric_customer_responses_var_pop_fields
    var_samp: vectric_customer_responses_var_samp_fields
    variance: vectric_customer_responses_variance_fields
}

"aggregate avg on columns"
type vectric_customer_responses_avg_fields {
    customerid: Float
    customerresponseid: Float
    questionid: Float
    responseid: Float
}

"aggregate max on columns"
type vectric_customer_responses_max_fields {
    customerid: bigint
    customerresponseid: bigint
    othertext: String
    questionid: bigint
    responseid: bigint
}

"aggregate min on columns"
type vectric_customer_responses_min_fields {
    customerid: bigint
    customerresponseid: bigint
    othertext: String
    questionid: bigint
    responseid: bigint
}

"response of any mutation on the table \"vectric.customer_responses\""
type vectric_customer_responses_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_customer_responses!]!
}

"aggregate stddev on columns"
type vectric_customer_responses_stddev_fields {
    customerid: Float
    customerresponseid: Float
    questionid: Float
    responseid: Float
}

"aggregate stddev_pop on columns"
type vectric_customer_responses_stddev_pop_fields {
    customerid: Float
    customerresponseid: Float
    questionid: Float
    responseid: Float
}

"aggregate stddev_samp on columns"
type vectric_customer_responses_stddev_samp_fields {
    customerid: Float
    customerresponseid: Float
    questionid: Float
    responseid: Float
}

"aggregate sum on columns"
type vectric_customer_responses_sum_fields {
    customerid: bigint
    customerresponseid: bigint
    questionid: bigint
    responseid: bigint
}

"aggregate var_pop on columns"
type vectric_customer_responses_var_pop_fields {
    customerid: Float
    customerresponseid: Float
    questionid: Float
    responseid: Float
}

"aggregate var_samp on columns"
type vectric_customer_responses_var_samp_fields {
    customerid: Float
    customerresponseid: Float
    questionid: Float
    responseid: Float
}

"aggregate variance on columns"
type vectric_customer_responses_variance_fields {
    customerid: Float
    customerresponseid: Float
    questionid: Float
    responseid: Float
}

"columns and relationships of \"vectric.customer_sales\""
type vectric_customer_sales {
    customerId: bigint
    dateCreated: timestamptz
    orderDate: timestamptz
    orderId: String
    "An array relationship"
    salesItems(
        "distinct select on columns"
        distinct_on: [vectric_sales_salesitems_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_salesitems_order_by!],
        "filter the rows returned"
        where: vectric_sales_salesitems_bool_exp
    ): [vectric_sales_salesitems!]!
    "An aggregate relationship"
    salesItems_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_salesitems_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_salesitems_order_by!],
        "filter the rows returned"
        where: vectric_sales_salesitems_bool_exp
    ): vectric_sales_salesitems_aggregate!
    veccode: String
}

"aggregated selection of \"vectric.customer_sales\""
type vectric_customer_sales_aggregate {
    aggregate: vectric_customer_sales_aggregate_fields
    nodes: [vectric_customer_sales!]!
}

"aggregate fields of \"vectric.customer_sales\""
type vectric_customer_sales_aggregate_fields {
    avg: vectric_customer_sales_avg_fields
    count(columns: [vectric_customer_sales_select_column!], distinct: Boolean): Int!
    max: vectric_customer_sales_max_fields
    min: vectric_customer_sales_min_fields
    stddev: vectric_customer_sales_stddev_fields
    stddev_pop: vectric_customer_sales_stddev_pop_fields
    stddev_samp: vectric_customer_sales_stddev_samp_fields
    sum: vectric_customer_sales_sum_fields
    var_pop: vectric_customer_sales_var_pop_fields
    var_samp: vectric_customer_sales_var_samp_fields
    variance: vectric_customer_sales_variance_fields
}

"aggregate avg on columns"
type vectric_customer_sales_avg_fields {
    customerId: Float
}

"aggregate max on columns"
type vectric_customer_sales_max_fields {
    customerId: bigint
    dateCreated: timestamptz
    orderDate: timestamptz
    orderId: String
    veccode: String
}

"aggregate min on columns"
type vectric_customer_sales_min_fields {
    customerId: bigint
    dateCreated: timestamptz
    orderDate: timestamptz
    orderId: String
    veccode: String
}

"response of any mutation on the table \"vectric.customer_sales\""
type vectric_customer_sales_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_customer_sales!]!
}

"aggregate stddev on columns"
type vectric_customer_sales_stddev_fields {
    customerId: Float
}

"aggregate stddev_pop on columns"
type vectric_customer_sales_stddev_pop_fields {
    customerId: Float
}

"aggregate stddev_samp on columns"
type vectric_customer_sales_stddev_samp_fields {
    customerId: Float
}

"aggregate sum on columns"
type vectric_customer_sales_sum_fields {
    customerId: bigint
}

"aggregate var_pop on columns"
type vectric_customer_sales_var_pop_fields {
    customerId: Float
}

"aggregate var_samp on columns"
type vectric_customer_sales_var_samp_fields {
    customerId: Float
}

"aggregate variance on columns"
type vectric_customer_sales_variance_fields {
    customerId: Float
}

"columns and relationships of \"vectric.customer_status\""
type vectric_customer_status {
    status: String
    statusId: bigint!
}

"aggregated selection of \"vectric.customer_status\""
type vectric_customer_status_aggregate {
    aggregate: vectric_customer_status_aggregate_fields
    nodes: [vectric_customer_status!]!
}

"aggregate fields of \"vectric.customer_status\""
type vectric_customer_status_aggregate_fields {
    avg: vectric_customer_status_avg_fields
    count(columns: [vectric_customer_status_select_column!], distinct: Boolean): Int!
    max: vectric_customer_status_max_fields
    min: vectric_customer_status_min_fields
    stddev: vectric_customer_status_stddev_fields
    stddev_pop: vectric_customer_status_stddev_pop_fields
    stddev_samp: vectric_customer_status_stddev_samp_fields
    sum: vectric_customer_status_sum_fields
    var_pop: vectric_customer_status_var_pop_fields
    var_samp: vectric_customer_status_var_samp_fields
    variance: vectric_customer_status_variance_fields
}

"aggregate avg on columns"
type vectric_customer_status_avg_fields {
    statusId: Float
}

"aggregate max on columns"
type vectric_customer_status_max_fields {
    status: String
    statusId: bigint
}

"aggregate min on columns"
type vectric_customer_status_min_fields {
    status: String
    statusId: bigint
}

"response of any mutation on the table \"vectric.customer_status\""
type vectric_customer_status_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_customer_status!]!
}

"aggregate stddev on columns"
type vectric_customer_status_stddev_fields {
    statusId: Float
}

"aggregate stddev_pop on columns"
type vectric_customer_status_stddev_pop_fields {
    statusId: Float
}

"aggregate stddev_samp on columns"
type vectric_customer_status_stddev_samp_fields {
    statusId: Float
}

"aggregate sum on columns"
type vectric_customer_status_sum_fields {
    statusId: bigint
}

"aggregate var_pop on columns"
type vectric_customer_status_var_pop_fields {
    statusId: Float
}

"aggregate var_samp on columns"
type vectric_customer_status_var_samp_fields {
    statusId: Float
}

"aggregate variance on columns"
type vectric_customer_status_variance_fields {
    statusId: Float
}

"columns and relationships of \"vectric.customer_zd_uploads\""
type vectric_customer_zd_uploads {
    createdBy: bigint!
    "An object relationship"
    customer: vectric_sales_customers!
    customerId: bigint!
    dateCreated: timestamptz
    dateUploaded: timestamptz
    location: String
    objectName: String
    shorturlhash: String
    "An object relationship"
    staff: vectric_sales_customers
    ticketId: String!
    zdUploadId: bigint!
}

"aggregated selection of \"vectric.customer_zd_uploads\""
type vectric_customer_zd_uploads_aggregate {
    aggregate: vectric_customer_zd_uploads_aggregate_fields
    nodes: [vectric_customer_zd_uploads!]!
}

"aggregate fields of \"vectric.customer_zd_uploads\""
type vectric_customer_zd_uploads_aggregate_fields {
    avg: vectric_customer_zd_uploads_avg_fields
    count(columns: [vectric_customer_zd_uploads_select_column!], distinct: Boolean): Int!
    max: vectric_customer_zd_uploads_max_fields
    min: vectric_customer_zd_uploads_min_fields
    stddev: vectric_customer_zd_uploads_stddev_fields
    stddev_pop: vectric_customer_zd_uploads_stddev_pop_fields
    stddev_samp: vectric_customer_zd_uploads_stddev_samp_fields
    sum: vectric_customer_zd_uploads_sum_fields
    var_pop: vectric_customer_zd_uploads_var_pop_fields
    var_samp: vectric_customer_zd_uploads_var_samp_fields
    variance: vectric_customer_zd_uploads_variance_fields
}

"aggregate avg on columns"
type vectric_customer_zd_uploads_avg_fields {
    createdBy: Float
    customerId: Float
    zdUploadId: Float
}

"aggregate max on columns"
type vectric_customer_zd_uploads_max_fields {
    createdBy: bigint
    customerId: bigint
    dateCreated: timestamptz
    dateUploaded: timestamptz
    location: String
    objectName: String
    shorturlhash: String
    ticketId: String
    zdUploadId: bigint
}

"aggregate min on columns"
type vectric_customer_zd_uploads_min_fields {
    createdBy: bigint
    customerId: bigint
    dateCreated: timestamptz
    dateUploaded: timestamptz
    location: String
    objectName: String
    shorturlhash: String
    ticketId: String
    zdUploadId: bigint
}

"response of any mutation on the table \"vectric.customer_zd_uploads\""
type vectric_customer_zd_uploads_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_customer_zd_uploads!]!
}

"aggregate stddev on columns"
type vectric_customer_zd_uploads_stddev_fields {
    createdBy: Float
    customerId: Float
    zdUploadId: Float
}

"aggregate stddev_pop on columns"
type vectric_customer_zd_uploads_stddev_pop_fields {
    createdBy: Float
    customerId: Float
    zdUploadId: Float
}

"aggregate stddev_samp on columns"
type vectric_customer_zd_uploads_stddev_samp_fields {
    createdBy: Float
    customerId: Float
    zdUploadId: Float
}

"aggregate sum on columns"
type vectric_customer_zd_uploads_sum_fields {
    createdBy: bigint
    customerId: bigint
    zdUploadId: bigint
}

"aggregate var_pop on columns"
type vectric_customer_zd_uploads_var_pop_fields {
    createdBy: Float
    customerId: Float
    zdUploadId: Float
}

"aggregate var_samp on columns"
type vectric_customer_zd_uploads_var_samp_fields {
    createdBy: Float
    customerId: Float
    zdUploadId: Float
}

"aggregate variance on columns"
type vectric_customer_zd_uploads_variance_fields {
    createdBy: Float
    customerId: Float
    zdUploadId: Float
}

"columns and relationships of \"vectric.download\""
type vectric_download {
    bucketName: String
    description: String
    downloadId: String!
    downloadSize: String!
    groupId: String
    name: String!
    objectName: String
    previewImageUrl: String
    uploadDate: timestamptz
}

"aggregated selection of \"vectric.download\""
type vectric_download_aggregate {
    aggregate: vectric_download_aggregate_fields
    nodes: [vectric_download!]!
}

"aggregate fields of \"vectric.download\""
type vectric_download_aggregate_fields {
    count(columns: [vectric_download_select_column!], distinct: Boolean): Int!
    max: vectric_download_max_fields
    min: vectric_download_min_fields
}

"aggregate max on columns"
type vectric_download_max_fields {
    bucketName: String
    description: String
    downloadId: String
    downloadSize: String
    groupId: String
    name: String
    objectName: String
    previewImageUrl: String
    uploadDate: timestamptz
}

"aggregate min on columns"
type vectric_download_min_fields {
    bucketName: String
    description: String
    downloadId: String
    downloadSize: String
    groupId: String
    name: String
    objectName: String
    previewImageUrl: String
    uploadDate: timestamptz
}

"response of any mutation on the table \"vectric.download\""
type vectric_download_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_download!]!
}

"columns and relationships of \"vectric.download_record\""
type vectric_download_record {
    customerId: bigint!
    downloadDate: timestamptz
    downloadId: String
    id: bigint!
}

"aggregated selection of \"vectric.download_record\""
type vectric_download_record_aggregate {
    aggregate: vectric_download_record_aggregate_fields
    nodes: [vectric_download_record!]!
}

"aggregate fields of \"vectric.download_record\""
type vectric_download_record_aggregate_fields {
    avg: vectric_download_record_avg_fields
    count(columns: [vectric_download_record_select_column!], distinct: Boolean): Int!
    max: vectric_download_record_max_fields
    min: vectric_download_record_min_fields
    stddev: vectric_download_record_stddev_fields
    stddev_pop: vectric_download_record_stddev_pop_fields
    stddev_samp: vectric_download_record_stddev_samp_fields
    sum: vectric_download_record_sum_fields
    var_pop: vectric_download_record_var_pop_fields
    var_samp: vectric_download_record_var_samp_fields
    variance: vectric_download_record_variance_fields
}

"aggregate avg on columns"
type vectric_download_record_avg_fields {
    customerId: Float
    id: Float
}

"aggregate max on columns"
type vectric_download_record_max_fields {
    customerId: bigint
    downloadDate: timestamptz
    downloadId: String
    id: bigint
}

"aggregate min on columns"
type vectric_download_record_min_fields {
    customerId: bigint
    downloadDate: timestamptz
    downloadId: String
    id: bigint
}

"response of any mutation on the table \"vectric.download_record\""
type vectric_download_record_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_download_record!]!
}

"aggregate stddev on columns"
type vectric_download_record_stddev_fields {
    customerId: Float
    id: Float
}

"aggregate stddev_pop on columns"
type vectric_download_record_stddev_pop_fields {
    customerId: Float
    id: Float
}

"aggregate stddev_samp on columns"
type vectric_download_record_stddev_samp_fields {
    customerId: Float
    id: Float
}

"aggregate sum on columns"
type vectric_download_record_sum_fields {
    customerId: bigint
    id: bigint
}

"aggregate var_pop on columns"
type vectric_download_record_var_pop_fields {
    customerId: Float
    id: Float
}

"aggregate var_samp on columns"
type vectric_download_record_var_samp_fields {
    customerId: Float
    id: Float
}

"aggregate variance on columns"
type vectric_download_record_variance_fields {
    customerId: Float
    id: Float
}

"columns and relationships of \"vectric.enhancement_tokens\""
type vectric_enhancement_tokens {
    customerId: bigint!
    dateCreated: timestamptz!
    dateUsed: timestamptz
    enhancementEligibilityId: bigint
    enhancementOrderItemProductId: bigint
    orderItemProductId: bigint!
    token: String!
    used: Boolean!
}

"aggregated selection of \"vectric.enhancement_tokens\""
type vectric_enhancement_tokens_aggregate {
    aggregate: vectric_enhancement_tokens_aggregate_fields
    nodes: [vectric_enhancement_tokens!]!
}

"aggregate fields of \"vectric.enhancement_tokens\""
type vectric_enhancement_tokens_aggregate_fields {
    avg: vectric_enhancement_tokens_avg_fields
    count(columns: [vectric_enhancement_tokens_select_column!], distinct: Boolean): Int!
    max: vectric_enhancement_tokens_max_fields
    min: vectric_enhancement_tokens_min_fields
    stddev: vectric_enhancement_tokens_stddev_fields
    stddev_pop: vectric_enhancement_tokens_stddev_pop_fields
    stddev_samp: vectric_enhancement_tokens_stddev_samp_fields
    sum: vectric_enhancement_tokens_sum_fields
    var_pop: vectric_enhancement_tokens_var_pop_fields
    var_samp: vectric_enhancement_tokens_var_samp_fields
    variance: vectric_enhancement_tokens_variance_fields
}

"aggregate avg on columns"
type vectric_enhancement_tokens_avg_fields {
    customerId: Float
    enhancementEligibilityId: Float
    enhancementOrderItemProductId: Float
    orderItemProductId: Float
}

"aggregate max on columns"
type vectric_enhancement_tokens_max_fields {
    customerId: bigint
    dateCreated: timestamptz
    dateUsed: timestamptz
    enhancementEligibilityId: bigint
    enhancementOrderItemProductId: bigint
    orderItemProductId: bigint
    token: String
}

"aggregate min on columns"
type vectric_enhancement_tokens_min_fields {
    customerId: bigint
    dateCreated: timestamptz
    dateUsed: timestamptz
    enhancementEligibilityId: bigint
    enhancementOrderItemProductId: bigint
    orderItemProductId: bigint
    token: String
}

"response of any mutation on the table \"vectric.enhancement_tokens\""
type vectric_enhancement_tokens_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_enhancement_tokens!]!
}

"aggregate stddev on columns"
type vectric_enhancement_tokens_stddev_fields {
    customerId: Float
    enhancementEligibilityId: Float
    enhancementOrderItemProductId: Float
    orderItemProductId: Float
}

"aggregate stddev_pop on columns"
type vectric_enhancement_tokens_stddev_pop_fields {
    customerId: Float
    enhancementEligibilityId: Float
    enhancementOrderItemProductId: Float
    orderItemProductId: Float
}

"aggregate stddev_samp on columns"
type vectric_enhancement_tokens_stddev_samp_fields {
    customerId: Float
    enhancementEligibilityId: Float
    enhancementOrderItemProductId: Float
    orderItemProductId: Float
}

"aggregate sum on columns"
type vectric_enhancement_tokens_sum_fields {
    customerId: bigint
    enhancementEligibilityId: bigint
    enhancementOrderItemProductId: bigint
    orderItemProductId: bigint
}

"aggregate var_pop on columns"
type vectric_enhancement_tokens_var_pop_fields {
    customerId: Float
    enhancementEligibilityId: Float
    enhancementOrderItemProductId: Float
    orderItemProductId: Float
}

"aggregate var_samp on columns"
type vectric_enhancement_tokens_var_samp_fields {
    customerId: Float
    enhancementEligibilityId: Float
    enhancementOrderItemProductId: Float
    orderItemProductId: Float
}

"aggregate variance on columns"
type vectric_enhancement_tokens_variance_fields {
    customerId: Float
    enhancementEligibilityId: Float
    enhancementOrderItemProductId: Float
    orderItemProductId: Float
}

"columns and relationships of \"vectric.entitled_product_version_code_view\""
type vectric_entitled_product_version_code_view {
    displayVersion: String
    entitled_product_id: bigint
    latest: Boolean
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    notifying: Boolean
    patchUrl: String
    releaseDate: date
    url: String
    versionCodeId: bigint
    visible: Boolean
}

"aggregated selection of \"vectric.entitled_product_version_code_view\""
type vectric_entitled_product_version_code_view_aggregate {
    aggregate: vectric_entitled_product_version_code_view_aggregate_fields
    nodes: [vectric_entitled_product_version_code_view!]!
}

"aggregate fields of \"vectric.entitled_product_version_code_view\""
type vectric_entitled_product_version_code_view_aggregate_fields {
    avg: vectric_entitled_product_version_code_view_avg_fields
    count(columns: [vectric_entitled_product_version_code_view_select_column!], distinct: Boolean): Int!
    max: vectric_entitled_product_version_code_view_max_fields
    min: vectric_entitled_product_version_code_view_min_fields
    stddev: vectric_entitled_product_version_code_view_stddev_fields
    stddev_pop: vectric_entitled_product_version_code_view_stddev_pop_fields
    stddev_samp: vectric_entitled_product_version_code_view_stddev_samp_fields
    sum: vectric_entitled_product_version_code_view_sum_fields
    var_pop: vectric_entitled_product_version_code_view_var_pop_fields
    var_samp: vectric_entitled_product_version_code_view_var_samp_fields
    variance: vectric_entitled_product_version_code_view_variance_fields
}

"aggregate avg on columns"
type vectric_entitled_product_version_code_view_avg_fields {
    entitled_product_id: Float
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    versionCodeId: Float
}

"aggregate max on columns"
type vectric_entitled_product_version_code_view_max_fields {
    displayVersion: String
    entitled_product_id: bigint
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    patchUrl: String
    releaseDate: date
    url: String
    versionCodeId: bigint
}

"aggregate min on columns"
type vectric_entitled_product_version_code_view_min_fields {
    displayVersion: String
    entitled_product_id: bigint
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    patchUrl: String
    releaseDate: date
    url: String
    versionCodeId: bigint
}

"aggregate stddev on columns"
type vectric_entitled_product_version_code_view_stddev_fields {
    entitled_product_id: Float
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    versionCodeId: Float
}

"aggregate stddev_pop on columns"
type vectric_entitled_product_version_code_view_stddev_pop_fields {
    entitled_product_id: Float
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    versionCodeId: Float
}

"aggregate stddev_samp on columns"
type vectric_entitled_product_version_code_view_stddev_samp_fields {
    entitled_product_id: Float
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    versionCodeId: Float
}

"aggregate sum on columns"
type vectric_entitled_product_version_code_view_sum_fields {
    entitled_product_id: bigint
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    versionCodeId: bigint
}

"aggregate var_pop on columns"
type vectric_entitled_product_version_code_view_var_pop_fields {
    entitled_product_id: Float
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    versionCodeId: Float
}

"aggregate var_samp on columns"
type vectric_entitled_product_version_code_view_var_samp_fields {
    entitled_product_id: Float
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    versionCodeId: Float
}

"aggregate variance on columns"
type vectric_entitled_product_version_code_view_variance_fields {
    entitled_product_id: Float
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    versionCodeId: Float
}

"columns and relationships of \"vectric.entitled_products\""
type vectric_entitled_products {
    enabled: Boolean
    "An object relationship"
    latestVersion: vectric_products_versioncodes
    latestVersionId: Int
    licenceType: vectric_products_product_licence_type_enum!
    productId: Int!
    productName: String!
    "An object relationship"
    productType: vectric_products_producttype!
    productTypeId: Int!
    releaseDate: timestamp
    requiresLicence: Boolean
    "An array relationship"
    versions(
        "distinct select on columns"
        distinct_on: [vectric_entitled_product_version_code_view_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_entitled_product_version_code_view_order_by!],
        "filter the rows returned"
        where: vectric_entitled_product_version_code_view_bool_exp
    ): [vectric_entitled_product_version_code_view!]!
    "An aggregate relationship"
    versions_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_entitled_product_version_code_view_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_entitled_product_version_code_view_order_by!],
        "filter the rows returned"
        where: vectric_entitled_product_version_code_view_bool_exp
    ): vectric_entitled_product_version_code_view_aggregate!
}

"aggregated selection of \"vectric.entitled_products\""
type vectric_entitled_products_aggregate {
    aggregate: vectric_entitled_products_aggregate_fields
    nodes: [vectric_entitled_products!]!
}

"aggregate fields of \"vectric.entitled_products\""
type vectric_entitled_products_aggregate_fields {
    avg: vectric_entitled_products_avg_fields
    count(columns: [vectric_entitled_products_select_column!], distinct: Boolean): Int!
    max: vectric_entitled_products_max_fields
    min: vectric_entitled_products_min_fields
    stddev: vectric_entitled_products_stddev_fields
    stddev_pop: vectric_entitled_products_stddev_pop_fields
    stddev_samp: vectric_entitled_products_stddev_samp_fields
    sum: vectric_entitled_products_sum_fields
    var_pop: vectric_entitled_products_var_pop_fields
    var_samp: vectric_entitled_products_var_samp_fields
    variance: vectric_entitled_products_variance_fields
}

"aggregate avg on columns"
type vectric_entitled_products_avg_fields {
    latestVersionId: Float
    productId: Float
    productTypeId: Float
}

"aggregate max on columns"
type vectric_entitled_products_max_fields {
    latestVersionId: Int
    productId: Int
    productName: String
    productTypeId: Int
    releaseDate: timestamp
}

"aggregate min on columns"
type vectric_entitled_products_min_fields {
    latestVersionId: Int
    productId: Int
    productName: String
    productTypeId: Int
    releaseDate: timestamp
}

"response of any mutation on the table \"vectric.entitled_products\""
type vectric_entitled_products_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_entitled_products!]!
}

"aggregate stddev on columns"
type vectric_entitled_products_stddev_fields {
    latestVersionId: Float
    productId: Float
    productTypeId: Float
}

"aggregate stddev_pop on columns"
type vectric_entitled_products_stddev_pop_fields {
    latestVersionId: Float
    productId: Float
    productTypeId: Float
}

"aggregate stddev_samp on columns"
type vectric_entitled_products_stddev_samp_fields {
    latestVersionId: Float
    productId: Float
    productTypeId: Float
}

"aggregate sum on columns"
type vectric_entitled_products_sum_fields {
    latestVersionId: Int
    productId: Int
    productTypeId: Int
}

"aggregate var_pop on columns"
type vectric_entitled_products_var_pop_fields {
    latestVersionId: Float
    productId: Float
    productTypeId: Float
}

"aggregate var_samp on columns"
type vectric_entitled_products_var_samp_fields {
    latestVersionId: Float
    productId: Float
    productTypeId: Float
}

"aggregate variance on columns"
type vectric_entitled_products_variance_fields {
    latestVersionId: Float
    productId: Float
    productTypeId: Float
}

"columns and relationships of \"vectric.entitlement_licences\""
type vectric_entitlement_licences {
    "An object relationship"
    entitledProduct: vectric_entitled_products!
    "An object relationship"
    entitlement: vectric_entitlements!
    entitlementId: Int!
    entitlementLicenceId: Int!
    licenceCode: String!
    licenceIdAsDisplay: Boolean
    licenceType: String!
    productId: Int!
    registeredUsername: String!
}

"aggregated selection of \"vectric.entitlement_licences\""
type vectric_entitlement_licences_aggregate {
    aggregate: vectric_entitlement_licences_aggregate_fields
    nodes: [vectric_entitlement_licences!]!
}

"aggregate fields of \"vectric.entitlement_licences\""
type vectric_entitlement_licences_aggregate_fields {
    avg: vectric_entitlement_licences_avg_fields
    count(columns: [vectric_entitlement_licences_select_column!], distinct: Boolean): Int!
    max: vectric_entitlement_licences_max_fields
    min: vectric_entitlement_licences_min_fields
    stddev: vectric_entitlement_licences_stddev_fields
    stddev_pop: vectric_entitlement_licences_stddev_pop_fields
    stddev_samp: vectric_entitlement_licences_stddev_samp_fields
    sum: vectric_entitlement_licences_sum_fields
    var_pop: vectric_entitlement_licences_var_pop_fields
    var_samp: vectric_entitlement_licences_var_samp_fields
    variance: vectric_entitlement_licences_variance_fields
}

"aggregate avg on columns"
type vectric_entitlement_licences_avg_fields {
    entitlementId: Float
    entitlementLicenceId: Float
    productId: Float
}

"aggregate max on columns"
type vectric_entitlement_licences_max_fields {
    entitlementId: Int
    entitlementLicenceId: Int
    licenceCode: String
    licenceType: String
    productId: Int
    registeredUsername: String
}

"aggregate min on columns"
type vectric_entitlement_licences_min_fields {
    entitlementId: Int
    entitlementLicenceId: Int
    licenceCode: String
    licenceType: String
    productId: Int
    registeredUsername: String
}

"response of any mutation on the table \"vectric.entitlement_licences\""
type vectric_entitlement_licences_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_entitlement_licences!]!
}

"aggregate stddev on columns"
type vectric_entitlement_licences_stddev_fields {
    entitlementId: Float
    entitlementLicenceId: Float
    productId: Float
}

"aggregate stddev_pop on columns"
type vectric_entitlement_licences_stddev_pop_fields {
    entitlementId: Float
    entitlementLicenceId: Float
    productId: Float
}

"aggregate stddev_samp on columns"
type vectric_entitlement_licences_stddev_samp_fields {
    entitlementId: Float
    entitlementLicenceId: Float
    productId: Float
}

"aggregate sum on columns"
type vectric_entitlement_licences_sum_fields {
    entitlementId: Int
    entitlementLicenceId: Int
    productId: Int
}

"aggregate var_pop on columns"
type vectric_entitlement_licences_var_pop_fields {
    entitlementId: Float
    entitlementLicenceId: Float
    productId: Float
}

"aggregate var_samp on columns"
type vectric_entitlement_licences_var_samp_fields {
    entitlementId: Float
    entitlementLicenceId: Float
    productId: Float
}

"aggregate variance on columns"
type vectric_entitlement_licences_variance_fields {
    entitlementId: Float
    entitlementLicenceId: Float
    productId: Float
}

"columns and relationships of \"vectric.entitlements\""
type vectric_entitlements {
    amendedBy: String
    createdBy: String!
    dateAmended: timestamp
    dateCreated: timestamp
    "An object relationship"
    entitledProduct: vectric_entitled_products!
    entitledProductId: Int!
    entitlementId: Int!
    "An object relationship"
    licence: vectric_entitlement_licences
    "An object relationship"
    ownedItem: vectric_owned_items!
    ownedItemId: Int!
    statusId: Int!
}

"aggregated selection of \"vectric.entitlements\""
type vectric_entitlements_aggregate {
    aggregate: vectric_entitlements_aggregate_fields
    nodes: [vectric_entitlements!]!
}

"aggregate fields of \"vectric.entitlements\""
type vectric_entitlements_aggregate_fields {
    avg: vectric_entitlements_avg_fields
    count(columns: [vectric_entitlements_select_column!], distinct: Boolean): Int!
    max: vectric_entitlements_max_fields
    min: vectric_entitlements_min_fields
    stddev: vectric_entitlements_stddev_fields
    stddev_pop: vectric_entitlements_stddev_pop_fields
    stddev_samp: vectric_entitlements_stddev_samp_fields
    sum: vectric_entitlements_sum_fields
    var_pop: vectric_entitlements_var_pop_fields
    var_samp: vectric_entitlements_var_samp_fields
    variance: vectric_entitlements_variance_fields
}

"aggregate avg on columns"
type vectric_entitlements_avg_fields {
    entitledProductId: Float
    entitlementId: Float
    ownedItemId: Float
    statusId: Float
}

"aggregate max on columns"
type vectric_entitlements_max_fields {
    amendedBy: String
    createdBy: String
    dateAmended: timestamp
    dateCreated: timestamp
    entitledProductId: Int
    entitlementId: Int
    ownedItemId: Int
    statusId: Int
}

"aggregate min on columns"
type vectric_entitlements_min_fields {
    amendedBy: String
    createdBy: String
    dateAmended: timestamp
    dateCreated: timestamp
    entitledProductId: Int
    entitlementId: Int
    ownedItemId: Int
    statusId: Int
}

"response of any mutation on the table \"vectric.entitlements\""
type vectric_entitlements_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_entitlements!]!
}

"aggregate stddev on columns"
type vectric_entitlements_stddev_fields {
    entitledProductId: Float
    entitlementId: Float
    ownedItemId: Float
    statusId: Float
}

"aggregate stddev_pop on columns"
type vectric_entitlements_stddev_pop_fields {
    entitledProductId: Float
    entitlementId: Float
    ownedItemId: Float
    statusId: Float
}

"aggregate stddev_samp on columns"
type vectric_entitlements_stddev_samp_fields {
    entitledProductId: Float
    entitlementId: Float
    ownedItemId: Float
    statusId: Float
}

"aggregate sum on columns"
type vectric_entitlements_sum_fields {
    entitledProductId: Int
    entitlementId: Int
    ownedItemId: Int
    statusId: Int
}

"aggregate var_pop on columns"
type vectric_entitlements_var_pop_fields {
    entitledProductId: Float
    entitlementId: Float
    ownedItemId: Float
    statusId: Float
}

"aggregate var_samp on columns"
type vectric_entitlements_var_samp_fields {
    entitledProductId: Float
    entitlementId: Float
    ownedItemId: Float
    statusId: Float
}

"aggregate variance on columns"
type vectric_entitlements_variance_fields {
    entitledProductId: Float
    entitlementId: Float
    ownedItemId: Float
    statusId: Float
}

"columns and relationships of \"vectric.free_clipart_tokens\""
type vectric_free_clipart_tokens {
    clipartToken: String!
    completed: Boolean!
    customerId: bigint!
    dateAdded: timestamptz
    dateSelected: timestamptz
    "An object relationship"
    redeemableToken: vectric_sales_salesitem_products!
    redeemableTokenOip: bigint!
    replacementOip: bigint
    "An object relationship"
    toV10Product: vectric_products_products
    v10Product: bigint!
}

"aggregated selection of \"vectric.free_clipart_tokens\""
type vectric_free_clipart_tokens_aggregate {
    aggregate: vectric_free_clipart_tokens_aggregate_fields
    nodes: [vectric_free_clipart_tokens!]!
}

"aggregate fields of \"vectric.free_clipart_tokens\""
type vectric_free_clipart_tokens_aggregate_fields {
    avg: vectric_free_clipart_tokens_avg_fields
    count(columns: [vectric_free_clipart_tokens_select_column!], distinct: Boolean): Int!
    max: vectric_free_clipart_tokens_max_fields
    min: vectric_free_clipart_tokens_min_fields
    stddev: vectric_free_clipart_tokens_stddev_fields
    stddev_pop: vectric_free_clipart_tokens_stddev_pop_fields
    stddev_samp: vectric_free_clipart_tokens_stddev_samp_fields
    sum: vectric_free_clipart_tokens_sum_fields
    var_pop: vectric_free_clipart_tokens_var_pop_fields
    var_samp: vectric_free_clipart_tokens_var_samp_fields
    variance: vectric_free_clipart_tokens_variance_fields
}

"aggregate avg on columns"
type vectric_free_clipart_tokens_avg_fields {
    customerId: Float
    redeemableTokenOip: Float
    replacementOip: Float
    v10Product: Float
}

"aggregate max on columns"
type vectric_free_clipart_tokens_max_fields {
    clipartToken: String
    customerId: bigint
    dateAdded: timestamptz
    dateSelected: timestamptz
    redeemableTokenOip: bigint
    replacementOip: bigint
    v10Product: bigint
}

"aggregate min on columns"
type vectric_free_clipart_tokens_min_fields {
    clipartToken: String
    customerId: bigint
    dateAdded: timestamptz
    dateSelected: timestamptz
    redeemableTokenOip: bigint
    replacementOip: bigint
    v10Product: bigint
}

"response of any mutation on the table \"vectric.free_clipart_tokens\""
type vectric_free_clipart_tokens_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_free_clipart_tokens!]!
}

"aggregate stddev on columns"
type vectric_free_clipart_tokens_stddev_fields {
    customerId: Float
    redeemableTokenOip: Float
    replacementOip: Float
    v10Product: Float
}

"aggregate stddev_pop on columns"
type vectric_free_clipart_tokens_stddev_pop_fields {
    customerId: Float
    redeemableTokenOip: Float
    replacementOip: Float
    v10Product: Float
}

"aggregate stddev_samp on columns"
type vectric_free_clipart_tokens_stddev_samp_fields {
    customerId: Float
    redeemableTokenOip: Float
    replacementOip: Float
    v10Product: Float
}

"aggregate sum on columns"
type vectric_free_clipart_tokens_sum_fields {
    customerId: bigint
    redeemableTokenOip: bigint
    replacementOip: bigint
    v10Product: bigint
}

"aggregate var_pop on columns"
type vectric_free_clipart_tokens_var_pop_fields {
    customerId: Float
    redeemableTokenOip: Float
    replacementOip: Float
    v10Product: Float
}

"aggregate var_samp on columns"
type vectric_free_clipart_tokens_var_samp_fields {
    customerId: Float
    redeemableTokenOip: Float
    replacementOip: Float
    v10Product: Float
}

"aggregate variance on columns"
type vectric_free_clipart_tokens_variance_fields {
    customerId: Float
    redeemableTokenOip: Float
    replacementOip: Float
    v10Product: Float
}

"columns and relationships of \"vectric.freeclipart\""
type vectric_freeclipart {
    accessId: String
    "An object relationship"
    category: vectric_freeclipart_category
    categoryId: bigint
    freeClipartId: bigint!
    location: String
    name: String
    objectName: String
    previewImgUrl: String
}

"aggregated selection of \"vectric.freeclipart\""
type vectric_freeclipart_aggregate {
    aggregate: vectric_freeclipart_aggregate_fields
    nodes: [vectric_freeclipart!]!
}

"aggregate fields of \"vectric.freeclipart\""
type vectric_freeclipart_aggregate_fields {
    avg: vectric_freeclipart_avg_fields
    count(columns: [vectric_freeclipart_select_column!], distinct: Boolean): Int!
    max: vectric_freeclipart_max_fields
    min: vectric_freeclipart_min_fields
    stddev: vectric_freeclipart_stddev_fields
    stddev_pop: vectric_freeclipart_stddev_pop_fields
    stddev_samp: vectric_freeclipart_stddev_samp_fields
    sum: vectric_freeclipart_sum_fields
    var_pop: vectric_freeclipart_var_pop_fields
    var_samp: vectric_freeclipart_var_samp_fields
    variance: vectric_freeclipart_variance_fields
}

"aggregate avg on columns"
type vectric_freeclipart_avg_fields {
    categoryId: Float
    freeClipartId: Float
}

"columns and relationships of \"vectric.freeclipart_category\""
type vectric_freeclipart_category {
    categoryId: bigint!
    name: String
}

"aggregated selection of \"vectric.freeclipart_category\""
type vectric_freeclipart_category_aggregate {
    aggregate: vectric_freeclipart_category_aggregate_fields
    nodes: [vectric_freeclipart_category!]!
}

"aggregate fields of \"vectric.freeclipart_category\""
type vectric_freeclipart_category_aggregate_fields {
    avg: vectric_freeclipart_category_avg_fields
    count(columns: [vectric_freeclipart_category_select_column!], distinct: Boolean): Int!
    max: vectric_freeclipart_category_max_fields
    min: vectric_freeclipart_category_min_fields
    stddev: vectric_freeclipart_category_stddev_fields
    stddev_pop: vectric_freeclipart_category_stddev_pop_fields
    stddev_samp: vectric_freeclipart_category_stddev_samp_fields
    sum: vectric_freeclipart_category_sum_fields
    var_pop: vectric_freeclipart_category_var_pop_fields
    var_samp: vectric_freeclipart_category_var_samp_fields
    variance: vectric_freeclipart_category_variance_fields
}

"aggregate avg on columns"
type vectric_freeclipart_category_avg_fields {
    categoryId: Float
}

"aggregate max on columns"
type vectric_freeclipart_category_max_fields {
    categoryId: bigint
    name: String
}

"aggregate min on columns"
type vectric_freeclipart_category_min_fields {
    categoryId: bigint
    name: String
}

"response of any mutation on the table \"vectric.freeclipart_category\""
type vectric_freeclipart_category_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_freeclipart_category!]!
}

"aggregate stddev on columns"
type vectric_freeclipart_category_stddev_fields {
    categoryId: Float
}

"aggregate stddev_pop on columns"
type vectric_freeclipart_category_stddev_pop_fields {
    categoryId: Float
}

"aggregate stddev_samp on columns"
type vectric_freeclipart_category_stddev_samp_fields {
    categoryId: Float
}

"aggregate sum on columns"
type vectric_freeclipart_category_sum_fields {
    categoryId: bigint
}

"aggregate var_pop on columns"
type vectric_freeclipart_category_var_pop_fields {
    categoryId: Float
}

"aggregate var_samp on columns"
type vectric_freeclipart_category_var_samp_fields {
    categoryId: Float
}

"aggregate variance on columns"
type vectric_freeclipart_category_variance_fields {
    categoryId: Float
}

"columns and relationships of \"vectric.freeclipart_download_record\""
type vectric_freeclipart_download_record {
    customerId: bigint
    downloadDate: timestamptz
    downloadId: bigint!
    freeClipartResourceId: bigint
    ipAddress: String
}

"aggregated selection of \"vectric.freeclipart_download_record\""
type vectric_freeclipart_download_record_aggregate {
    aggregate: vectric_freeclipart_download_record_aggregate_fields
    nodes: [vectric_freeclipart_download_record!]!
}

"aggregate fields of \"vectric.freeclipart_download_record\""
type vectric_freeclipart_download_record_aggregate_fields {
    avg: vectric_freeclipart_download_record_avg_fields
    count(columns: [vectric_freeclipart_download_record_select_column!], distinct: Boolean): Int!
    max: vectric_freeclipart_download_record_max_fields
    min: vectric_freeclipart_download_record_min_fields
    stddev: vectric_freeclipart_download_record_stddev_fields
    stddev_pop: vectric_freeclipart_download_record_stddev_pop_fields
    stddev_samp: vectric_freeclipart_download_record_stddev_samp_fields
    sum: vectric_freeclipart_download_record_sum_fields
    var_pop: vectric_freeclipart_download_record_var_pop_fields
    var_samp: vectric_freeclipart_download_record_var_samp_fields
    variance: vectric_freeclipart_download_record_variance_fields
}

"aggregate avg on columns"
type vectric_freeclipart_download_record_avg_fields {
    customerId: Float
    downloadId: Float
    freeClipartResourceId: Float
}

"aggregate max on columns"
type vectric_freeclipart_download_record_max_fields {
    customerId: bigint
    downloadDate: timestamptz
    downloadId: bigint
    freeClipartResourceId: bigint
    ipAddress: String
}

"aggregate min on columns"
type vectric_freeclipart_download_record_min_fields {
    customerId: bigint
    downloadDate: timestamptz
    downloadId: bigint
    freeClipartResourceId: bigint
    ipAddress: String
}

"response of any mutation on the table \"vectric.freeclipart_download_record\""
type vectric_freeclipart_download_record_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_freeclipart_download_record!]!
}

"aggregate stddev on columns"
type vectric_freeclipart_download_record_stddev_fields {
    customerId: Float
    downloadId: Float
    freeClipartResourceId: Float
}

"aggregate stddev_pop on columns"
type vectric_freeclipart_download_record_stddev_pop_fields {
    customerId: Float
    downloadId: Float
    freeClipartResourceId: Float
}

"aggregate stddev_samp on columns"
type vectric_freeclipart_download_record_stddev_samp_fields {
    customerId: Float
    downloadId: Float
    freeClipartResourceId: Float
}

"aggregate sum on columns"
type vectric_freeclipart_download_record_sum_fields {
    customerId: bigint
    downloadId: bigint
    freeClipartResourceId: bigint
}

"aggregate var_pop on columns"
type vectric_freeclipart_download_record_var_pop_fields {
    customerId: Float
    downloadId: Float
    freeClipartResourceId: Float
}

"aggregate var_samp on columns"
type vectric_freeclipart_download_record_var_samp_fields {
    customerId: Float
    downloadId: Float
    freeClipartResourceId: Float
}

"aggregate variance on columns"
type vectric_freeclipart_download_record_variance_fields {
    customerId: Float
    downloadId: Float
    freeClipartResourceId: Float
}

"aggregate max on columns"
type vectric_freeclipart_max_fields {
    accessId: String
    categoryId: bigint
    freeClipartId: bigint
    location: String
    name: String
    objectName: String
    previewImgUrl: String
}

"aggregate min on columns"
type vectric_freeclipart_min_fields {
    accessId: String
    categoryId: bigint
    freeClipartId: bigint
    location: String
    name: String
    objectName: String
    previewImgUrl: String
}

"response of any mutation on the table \"vectric.freeclipart\""
type vectric_freeclipart_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_freeclipart!]!
}

"aggregate stddev on columns"
type vectric_freeclipart_stddev_fields {
    categoryId: Float
    freeClipartId: Float
}

"aggregate stddev_pop on columns"
type vectric_freeclipart_stddev_pop_fields {
    categoryId: Float
    freeClipartId: Float
}

"aggregate stddev_samp on columns"
type vectric_freeclipart_stddev_samp_fields {
    categoryId: Float
    freeClipartId: Float
}

"aggregate sum on columns"
type vectric_freeclipart_sum_fields {
    categoryId: bigint
    freeClipartId: bigint
}

"aggregate var_pop on columns"
type vectric_freeclipart_var_pop_fields {
    categoryId: Float
    freeClipartId: Float
}

"aggregate var_samp on columns"
type vectric_freeclipart_var_samp_fields {
    categoryId: Float
    freeClipartId: Float
}

"aggregate variance on columns"
type vectric_freeclipart_variance_fields {
    categoryId: Float
    freeClipartId: Float
}

"columns and relationships of \"vectric.group_info\""
type vectric_group_info {
    customerid: bigint
    group_id: Int
    group_name: String
    role: String
}

"aggregated selection of \"vectric.group_info\""
type vectric_group_info_aggregate {
    aggregate: vectric_group_info_aggregate_fields
    nodes: [vectric_group_info!]!
}

"aggregate fields of \"vectric.group_info\""
type vectric_group_info_aggregate_fields {
    avg: vectric_group_info_avg_fields
    count(columns: [vectric_group_info_select_column!], distinct: Boolean): Int!
    max: vectric_group_info_max_fields
    min: vectric_group_info_min_fields
    stddev: vectric_group_info_stddev_fields
    stddev_pop: vectric_group_info_stddev_pop_fields
    stddev_samp: vectric_group_info_stddev_samp_fields
    sum: vectric_group_info_sum_fields
    var_pop: vectric_group_info_var_pop_fields
    var_samp: vectric_group_info_var_samp_fields
    variance: vectric_group_info_variance_fields
}

"aggregate avg on columns"
type vectric_group_info_avg_fields {
    customerid: Float
    group_id: Float
}

"aggregate max on columns"
type vectric_group_info_max_fields {
    customerid: bigint
    group_id: Int
    group_name: String
    role: String
}

"aggregate min on columns"
type vectric_group_info_min_fields {
    customerid: bigint
    group_id: Int
    group_name: String
    role: String
}

"aggregate stddev on columns"
type vectric_group_info_stddev_fields {
    customerid: Float
    group_id: Float
}

"aggregate stddev_pop on columns"
type vectric_group_info_stddev_pop_fields {
    customerid: Float
    group_id: Float
}

"aggregate stddev_samp on columns"
type vectric_group_info_stddev_samp_fields {
    customerid: Float
    group_id: Float
}

"aggregate sum on columns"
type vectric_group_info_sum_fields {
    customerid: bigint
    group_id: Int
}

"aggregate var_pop on columns"
type vectric_group_info_var_pop_fields {
    customerid: Float
    group_id: Float
}

"aggregate var_samp on columns"
type vectric_group_info_var_samp_fields {
    customerid: Float
    group_id: Float
}

"aggregate variance on columns"
type vectric_group_info_variance_fields {
    customerid: Float
    group_id: Float
}

"columns and relationships of \"vectric.group_roles\""
type vectric_group_roles {
    id: Int!
    role: String!
}

"aggregated selection of \"vectric.group_roles\""
type vectric_group_roles_aggregate {
    aggregate: vectric_group_roles_aggregate_fields
    nodes: [vectric_group_roles!]!
}

"aggregate fields of \"vectric.group_roles\""
type vectric_group_roles_aggregate_fields {
    avg: vectric_group_roles_avg_fields
    count(columns: [vectric_group_roles_select_column!], distinct: Boolean): Int!
    max: vectric_group_roles_max_fields
    min: vectric_group_roles_min_fields
    stddev: vectric_group_roles_stddev_fields
    stddev_pop: vectric_group_roles_stddev_pop_fields
    stddev_samp: vectric_group_roles_stddev_samp_fields
    sum: vectric_group_roles_sum_fields
    var_pop: vectric_group_roles_var_pop_fields
    var_samp: vectric_group_roles_var_samp_fields
    variance: vectric_group_roles_variance_fields
}

"aggregate avg on columns"
type vectric_group_roles_avg_fields {
    id: Float
}

"aggregate max on columns"
type vectric_group_roles_max_fields {
    id: Int
    role: String
}

"aggregate min on columns"
type vectric_group_roles_min_fields {
    id: Int
    role: String
}

"response of any mutation on the table \"vectric.group_roles\""
type vectric_group_roles_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_group_roles!]!
}

"aggregate stddev on columns"
type vectric_group_roles_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type vectric_group_roles_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type vectric_group_roles_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type vectric_group_roles_sum_fields {
    id: Int
}

"aggregate var_pop on columns"
type vectric_group_roles_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type vectric_group_roles_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type vectric_group_roles_variance_fields {
    id: Float
}

"columns and relationships of \"vectric.group_user_role\""
type vectric_group_user_role {
    "An object relationship"
    customer: vectric_sales_customers!
    customer_id: bigint!
    "An object relationship"
    group: vectric_groups!
    group_id: Int!
    "An object relationship"
    role: vectric_group_roles!
    role_id: Int!
}

"aggregated selection of \"vectric.group_user_role\""
type vectric_group_user_role_aggregate {
    aggregate: vectric_group_user_role_aggregate_fields
    nodes: [vectric_group_user_role!]!
}

"aggregate fields of \"vectric.group_user_role\""
type vectric_group_user_role_aggregate_fields {
    avg: vectric_group_user_role_avg_fields
    count(columns: [vectric_group_user_role_select_column!], distinct: Boolean): Int!
    max: vectric_group_user_role_max_fields
    min: vectric_group_user_role_min_fields
    stddev: vectric_group_user_role_stddev_fields
    stddev_pop: vectric_group_user_role_stddev_pop_fields
    stddev_samp: vectric_group_user_role_stddev_samp_fields
    sum: vectric_group_user_role_sum_fields
    var_pop: vectric_group_user_role_var_pop_fields
    var_samp: vectric_group_user_role_var_samp_fields
    variance: vectric_group_user_role_variance_fields
}

"aggregate avg on columns"
type vectric_group_user_role_avg_fields {
    customer_id: Float
    group_id: Float
    role_id: Float
}

"aggregate max on columns"
type vectric_group_user_role_max_fields {
    customer_id: bigint
    group_id: Int
    role_id: Int
}

"aggregate min on columns"
type vectric_group_user_role_min_fields {
    customer_id: bigint
    group_id: Int
    role_id: Int
}

"response of any mutation on the table \"vectric.group_user_role\""
type vectric_group_user_role_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_group_user_role!]!
}

"aggregate stddev on columns"
type vectric_group_user_role_stddev_fields {
    customer_id: Float
    group_id: Float
    role_id: Float
}

"aggregate stddev_pop on columns"
type vectric_group_user_role_stddev_pop_fields {
    customer_id: Float
    group_id: Float
    role_id: Float
}

"aggregate stddev_samp on columns"
type vectric_group_user_role_stddev_samp_fields {
    customer_id: Float
    group_id: Float
    role_id: Float
}

"aggregate sum on columns"
type vectric_group_user_role_sum_fields {
    customer_id: bigint
    group_id: Int
    role_id: Int
}

"aggregate var_pop on columns"
type vectric_group_user_role_var_pop_fields {
    customer_id: Float
    group_id: Float
    role_id: Float
}

"aggregate var_samp on columns"
type vectric_group_user_role_var_samp_fields {
    customer_id: Float
    group_id: Float
    role_id: Float
}

"aggregate variance on columns"
type vectric_group_user_role_variance_fields {
    customer_id: Float
    group_id: Float
    role_id: Float
}

"columns and relationships of \"vectric.groups\""
type vectric_groups {
    created_at: timestamp!
    group_name: String!
    id: Int!
    "An array relationship"
    members(
        "distinct select on columns"
        distinct_on: [vectric_group_user_role_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_group_user_role_order_by!],
        "filter the rows returned"
        where: vectric_group_user_role_bool_exp
    ): [vectric_group_user_role!]!
    "An aggregate relationship"
    members_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_group_user_role_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_group_user_role_order_by!],
        "filter the rows returned"
        where: vectric_group_user_role_bool_exp
    ): vectric_group_user_role_aggregate!
}

"aggregated selection of \"vectric.groups\""
type vectric_groups_aggregate {
    aggregate: vectric_groups_aggregate_fields
    nodes: [vectric_groups!]!
}

"aggregate fields of \"vectric.groups\""
type vectric_groups_aggregate_fields {
    avg: vectric_groups_avg_fields
    count(columns: [vectric_groups_select_column!], distinct: Boolean): Int!
    max: vectric_groups_max_fields
    min: vectric_groups_min_fields
    stddev: vectric_groups_stddev_fields
    stddev_pop: vectric_groups_stddev_pop_fields
    stddev_samp: vectric_groups_stddev_samp_fields
    sum: vectric_groups_sum_fields
    var_pop: vectric_groups_var_pop_fields
    var_samp: vectric_groups_var_samp_fields
    variance: vectric_groups_variance_fields
}

"aggregate avg on columns"
type vectric_groups_avg_fields {
    id: Float
}

"aggregate max on columns"
type vectric_groups_max_fields {
    created_at: timestamp
    group_name: String
    id: Int
}

"aggregate min on columns"
type vectric_groups_min_fields {
    created_at: timestamp
    group_name: String
    id: Int
}

"response of any mutation on the table \"vectric.groups\""
type vectric_groups_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_groups!]!
}

"aggregate stddev on columns"
type vectric_groups_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type vectric_groups_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type vectric_groups_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type vectric_groups_sum_fields {
    id: Int
}

"aggregate var_pop on columns"
type vectric_groups_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type vectric_groups_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type vectric_groups_variance_fields {
    id: Float
}

"columns and relationships of \"vectric.language_codes\""
type vectric_language_codes {
    name: String
    "ISO 639-2 Code"
    threeLetterCode: bpchar!
    "ISO 639-1 Code"
    twoLetterCode: String
}

"aggregated selection of \"vectric.language_codes\""
type vectric_language_codes_aggregate {
    aggregate: vectric_language_codes_aggregate_fields
    nodes: [vectric_language_codes!]!
}

"aggregate fields of \"vectric.language_codes\""
type vectric_language_codes_aggregate_fields {
    count(columns: [vectric_language_codes_select_column!], distinct: Boolean): Int!
    max: vectric_language_codes_max_fields
    min: vectric_language_codes_min_fields
}

"aggregate max on columns"
type vectric_language_codes_max_fields {
    name: String
    "ISO 639-2 Code"
    threeLetterCode: bpchar
    "ISO 639-1 Code"
    twoLetterCode: String
}

"aggregate min on columns"
type vectric_language_codes_min_fields {
    name: String
    "ISO 639-2 Code"
    threeLetterCode: bpchar
    "ISO 639-1 Code"
    twoLetterCode: String
}

"response of any mutation on the table \"vectric.language_codes\""
type vectric_language_codes_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_language_codes!]!
}

"columns and relationships of \"vectric.licence_log\""
type vectric_licence_log {
    batchId: String
    createdBy: String
    dateCreated: timestamptz
    licenceCode: String
    licenceId: bigint!
    oemLicenceId: bigint
    productName: String
    registeredUsername: String
    shortUrlHash: String
}

"aggregated selection of \"vectric.licence_log\""
type vectric_licence_log_aggregate {
    aggregate: vectric_licence_log_aggregate_fields
    nodes: [vectric_licence_log!]!
}

"aggregate fields of \"vectric.licence_log\""
type vectric_licence_log_aggregate_fields {
    avg: vectric_licence_log_avg_fields
    count(columns: [vectric_licence_log_select_column!], distinct: Boolean): Int!
    max: vectric_licence_log_max_fields
    min: vectric_licence_log_min_fields
    stddev: vectric_licence_log_stddev_fields
    stddev_pop: vectric_licence_log_stddev_pop_fields
    stddev_samp: vectric_licence_log_stddev_samp_fields
    sum: vectric_licence_log_sum_fields
    var_pop: vectric_licence_log_var_pop_fields
    var_samp: vectric_licence_log_var_samp_fields
    variance: vectric_licence_log_variance_fields
}

"aggregate avg on columns"
type vectric_licence_log_avg_fields {
    licenceId: Float
    oemLicenceId: Float
}

"aggregate max on columns"
type vectric_licence_log_max_fields {
    batchId: String
    createdBy: String
    dateCreated: timestamptz
    licenceCode: String
    licenceId: bigint
    oemLicenceId: bigint
    productName: String
    registeredUsername: String
    shortUrlHash: String
}

"aggregate min on columns"
type vectric_licence_log_min_fields {
    batchId: String
    createdBy: String
    dateCreated: timestamptz
    licenceCode: String
    licenceId: bigint
    oemLicenceId: bigint
    productName: String
    registeredUsername: String
    shortUrlHash: String
}

"response of any mutation on the table \"vectric.licence_log\""
type vectric_licence_log_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_licence_log!]!
}

"aggregate stddev on columns"
type vectric_licence_log_stddev_fields {
    licenceId: Float
    oemLicenceId: Float
}

"aggregate stddev_pop on columns"
type vectric_licence_log_stddev_pop_fields {
    licenceId: Float
    oemLicenceId: Float
}

"aggregate stddev_samp on columns"
type vectric_licence_log_stddev_samp_fields {
    licenceId: Float
    oemLicenceId: Float
}

"aggregate sum on columns"
type vectric_licence_log_sum_fields {
    licenceId: bigint
    oemLicenceId: bigint
}

"aggregate var_pop on columns"
type vectric_licence_log_var_pop_fields {
    licenceId: Float
    oemLicenceId: Float
}

"aggregate var_samp on columns"
type vectric_licence_log_var_samp_fields {
    licenceId: Float
    oemLicenceId: Float
}

"aggregate variance on columns"
type vectric_licence_log_variance_fields {
    licenceId: Float
    oemLicenceId: Float
}

"columns and relationships of \"vectric.linkshortener_links\""
type vectric_linkshortener_links {
    expiryDate: timestamptz!
    limitDownloads: Boolean!
    longUrl: String
    remainingDownloads: smallint
    shortUrlHash: String!
}

"aggregated selection of \"vectric.linkshortener_links\""
type vectric_linkshortener_links_aggregate {
    aggregate: vectric_linkshortener_links_aggregate_fields
    nodes: [vectric_linkshortener_links!]!
}

"aggregate fields of \"vectric.linkshortener_links\""
type vectric_linkshortener_links_aggregate_fields {
    avg: vectric_linkshortener_links_avg_fields
    count(columns: [vectric_linkshortener_links_select_column!], distinct: Boolean): Int!
    max: vectric_linkshortener_links_max_fields
    min: vectric_linkshortener_links_min_fields
    stddev: vectric_linkshortener_links_stddev_fields
    stddev_pop: vectric_linkshortener_links_stddev_pop_fields
    stddev_samp: vectric_linkshortener_links_stddev_samp_fields
    sum: vectric_linkshortener_links_sum_fields
    var_pop: vectric_linkshortener_links_var_pop_fields
    var_samp: vectric_linkshortener_links_var_samp_fields
    variance: vectric_linkshortener_links_variance_fields
}

"aggregate avg on columns"
type vectric_linkshortener_links_avg_fields {
    remainingDownloads: Float
}

"aggregate max on columns"
type vectric_linkshortener_links_max_fields {
    expiryDate: timestamptz
    longUrl: String
    remainingDownloads: smallint
    shortUrlHash: String
}

"aggregate min on columns"
type vectric_linkshortener_links_min_fields {
    expiryDate: timestamptz
    longUrl: String
    remainingDownloads: smallint
    shortUrlHash: String
}

"response of any mutation on the table \"vectric.linkshortener_links\""
type vectric_linkshortener_links_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_linkshortener_links!]!
}

"aggregate stddev on columns"
type vectric_linkshortener_links_stddev_fields {
    remainingDownloads: Float
}

"aggregate stddev_pop on columns"
type vectric_linkshortener_links_stddev_pop_fields {
    remainingDownloads: Float
}

"aggregate stddev_samp on columns"
type vectric_linkshortener_links_stddev_samp_fields {
    remainingDownloads: Float
}

"aggregate sum on columns"
type vectric_linkshortener_links_sum_fields {
    remainingDownloads: smallint
}

"aggregate var_pop on columns"
type vectric_linkshortener_links_var_pop_fields {
    remainingDownloads: Float
}

"aggregate var_samp on columns"
type vectric_linkshortener_links_var_samp_fields {
    remainingDownloads: Float
}

"aggregate variance on columns"
type vectric_linkshortener_links_variance_fields {
    remainingDownloads: Float
}

"columns and relationships of \"vectric.makerspace_requests\""
type vectric_makerspace_requests {
    ipAddress: String
    licenceCode: String
    licenceGenerated: String
    makerspaceDiskId: String
    makerspaceId: String
    requestDate: timestamptz
    requestId: bigint!
    salesItemProductId: bigint
    trialDiskId: String
    trialLayerUuid: String
}

"aggregated selection of \"vectric.makerspace_requests\""
type vectric_makerspace_requests_aggregate {
    aggregate: vectric_makerspace_requests_aggregate_fields
    nodes: [vectric_makerspace_requests!]!
}

"aggregate fields of \"vectric.makerspace_requests\""
type vectric_makerspace_requests_aggregate_fields {
    avg: vectric_makerspace_requests_avg_fields
    count(columns: [vectric_makerspace_requests_select_column!], distinct: Boolean): Int!
    max: vectric_makerspace_requests_max_fields
    min: vectric_makerspace_requests_min_fields
    stddev: vectric_makerspace_requests_stddev_fields
    stddev_pop: vectric_makerspace_requests_stddev_pop_fields
    stddev_samp: vectric_makerspace_requests_stddev_samp_fields
    sum: vectric_makerspace_requests_sum_fields
    var_pop: vectric_makerspace_requests_var_pop_fields
    var_samp: vectric_makerspace_requests_var_samp_fields
    variance: vectric_makerspace_requests_variance_fields
}

"aggregate avg on columns"
type vectric_makerspace_requests_avg_fields {
    requestId: Float
    salesItemProductId: Float
}

"aggregate max on columns"
type vectric_makerspace_requests_max_fields {
    ipAddress: String
    licenceCode: String
    licenceGenerated: String
    makerspaceDiskId: String
    makerspaceId: String
    requestDate: timestamptz
    requestId: bigint
    salesItemProductId: bigint
    trialDiskId: String
    trialLayerUuid: String
}

"aggregate min on columns"
type vectric_makerspace_requests_min_fields {
    ipAddress: String
    licenceCode: String
    licenceGenerated: String
    makerspaceDiskId: String
    makerspaceId: String
    requestDate: timestamptz
    requestId: bigint
    salesItemProductId: bigint
    trialDiskId: String
    trialLayerUuid: String
}

"response of any mutation on the table \"vectric.makerspace_requests\""
type vectric_makerspace_requests_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_makerspace_requests!]!
}

"aggregate stddev on columns"
type vectric_makerspace_requests_stddev_fields {
    requestId: Float
    salesItemProductId: Float
}

"aggregate stddev_pop on columns"
type vectric_makerspace_requests_stddev_pop_fields {
    requestId: Float
    salesItemProductId: Float
}

"aggregate stddev_samp on columns"
type vectric_makerspace_requests_stddev_samp_fields {
    requestId: Float
    salesItemProductId: Float
}

"aggregate sum on columns"
type vectric_makerspace_requests_sum_fields {
    requestId: bigint
    salesItemProductId: bigint
}

"aggregate var_pop on columns"
type vectric_makerspace_requests_var_pop_fields {
    requestId: Float
    salesItemProductId: Float
}

"aggregate var_samp on columns"
type vectric_makerspace_requests_var_samp_fields {
    requestId: Float
    salesItemProductId: Float
}

"aggregate variance on columns"
type vectric_makerspace_requests_variance_fields {
    requestId: Float
    salesItemProductId: Float
}

"columns and relationships of \"vectric.membership_invitation_status\""
type vectric_membership_invitation_status {
    status: String!
}

"aggregated selection of \"vectric.membership_invitation_status\""
type vectric_membership_invitation_status_aggregate {
    aggregate: vectric_membership_invitation_status_aggregate_fields
    nodes: [vectric_membership_invitation_status!]!
}

"aggregate fields of \"vectric.membership_invitation_status\""
type vectric_membership_invitation_status_aggregate_fields {
    count(columns: [vectric_membership_invitation_status_select_column!], distinct: Boolean): Int!
    max: vectric_membership_invitation_status_max_fields
    min: vectric_membership_invitation_status_min_fields
}

"aggregate max on columns"
type vectric_membership_invitation_status_max_fields {
    status: String
}

"aggregate min on columns"
type vectric_membership_invitation_status_min_fields {
    status: String
}

"response of any mutation on the table \"vectric.membership_invitation_status\""
type vectric_membership_invitation_status_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_membership_invitation_status!]!
}

"columns and relationships of \"vectric.membership_invitations\""
type vectric_membership_invitations {
    dateInvited: timestamp!
    dateProcessed: timestamp
    email: String!
    invitationId: Int!
    invitationStatus: vectric_membership_invitation_status_enum!
    invitedBy: String!
    "An object relationship"
    membership: vectric_memberships!
    membershipId: Int!
    "An object relationship"
    organization: vectric_organizations!
    organizationId: Int!
    "An object relationship"
    status: vectric_membership_invitation_status!
    token: String!
}

"aggregated selection of \"vectric.membership_invitations\""
type vectric_membership_invitations_aggregate {
    aggregate: vectric_membership_invitations_aggregate_fields
    nodes: [vectric_membership_invitations!]!
}

"aggregate fields of \"vectric.membership_invitations\""
type vectric_membership_invitations_aggregate_fields {
    avg: vectric_membership_invitations_avg_fields
    count(columns: [vectric_membership_invitations_select_column!], distinct: Boolean): Int!
    max: vectric_membership_invitations_max_fields
    min: vectric_membership_invitations_min_fields
    stddev: vectric_membership_invitations_stddev_fields
    stddev_pop: vectric_membership_invitations_stddev_pop_fields
    stddev_samp: vectric_membership_invitations_stddev_samp_fields
    sum: vectric_membership_invitations_sum_fields
    var_pop: vectric_membership_invitations_var_pop_fields
    var_samp: vectric_membership_invitations_var_samp_fields
    variance: vectric_membership_invitations_variance_fields
}

"aggregate avg on columns"
type vectric_membership_invitations_avg_fields {
    invitationId: Float
    membershipId: Float
    organizationId: Float
}

"aggregate max on columns"
type vectric_membership_invitations_max_fields {
    dateInvited: timestamp
    dateProcessed: timestamp
    email: String
    invitationId: Int
    invitedBy: String
    membershipId: Int
    organizationId: Int
    token: String
}

"aggregate min on columns"
type vectric_membership_invitations_min_fields {
    dateInvited: timestamp
    dateProcessed: timestamp
    email: String
    invitationId: Int
    invitedBy: String
    membershipId: Int
    organizationId: Int
    token: String
}

"response of any mutation on the table \"vectric.membership_invitations\""
type vectric_membership_invitations_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_membership_invitations!]!
}

"aggregate stddev on columns"
type vectric_membership_invitations_stddev_fields {
    invitationId: Float
    membershipId: Float
    organizationId: Float
}

"aggregate stddev_pop on columns"
type vectric_membership_invitations_stddev_pop_fields {
    invitationId: Float
    membershipId: Float
    organizationId: Float
}

"aggregate stddev_samp on columns"
type vectric_membership_invitations_stddev_samp_fields {
    invitationId: Float
    membershipId: Float
    organizationId: Float
}

"aggregate sum on columns"
type vectric_membership_invitations_sum_fields {
    invitationId: Int
    membershipId: Int
    organizationId: Int
}

"aggregate var_pop on columns"
type vectric_membership_invitations_var_pop_fields {
    invitationId: Float
    membershipId: Float
    organizationId: Float
}

"aggregate var_samp on columns"
type vectric_membership_invitations_var_samp_fields {
    invitationId: Float
    membershipId: Float
    organizationId: Float
}

"aggregate variance on columns"
type vectric_membership_invitations_variance_fields {
    invitationId: Float
    membershipId: Float
    organizationId: Float
}

"columns and relationships of \"vectric.membership_roles\""
type vectric_membership_roles {
    role: String!
}

"aggregated selection of \"vectric.membership_roles\""
type vectric_membership_roles_aggregate {
    aggregate: vectric_membership_roles_aggregate_fields
    nodes: [vectric_membership_roles!]!
}

"aggregate fields of \"vectric.membership_roles\""
type vectric_membership_roles_aggregate_fields {
    count(columns: [vectric_membership_roles_select_column!], distinct: Boolean): Int!
    max: vectric_membership_roles_max_fields
    min: vectric_membership_roles_min_fields
}

"aggregate max on columns"
type vectric_membership_roles_max_fields {
    role: String
}

"aggregate min on columns"
type vectric_membership_roles_min_fields {
    role: String
}

"response of any mutation on the table \"vectric.membership_roles\""
type vectric_membership_roles_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_membership_roles!]!
}

"columns and relationships of \"vectric.membership_status\""
type vectric_membership_status {
    status: String!
}

"aggregated selection of \"vectric.membership_status\""
type vectric_membership_status_aggregate {
    aggregate: vectric_membership_status_aggregate_fields
    nodes: [vectric_membership_status!]!
}

"aggregate fields of \"vectric.membership_status\""
type vectric_membership_status_aggregate_fields {
    count(columns: [vectric_membership_status_select_column!], distinct: Boolean): Int!
    max: vectric_membership_status_max_fields
    min: vectric_membership_status_min_fields
}

"aggregate max on columns"
type vectric_membership_status_max_fields {
    status: String
}

"aggregate min on columns"
type vectric_membership_status_min_fields {
    status: String
}

"response of any mutation on the table \"vectric.membership_status\""
type vectric_membership_status_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_membership_status!]!
}

"columns and relationships of \"vectric.memberships\""
type vectric_memberships {
    "An array relationship"
    activeMembers(
        "distinct select on columns"
        distinct_on: [vectric_active_memberships_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_active_memberships_order_by!],
        "filter the rows returned"
        where: vectric_active_memberships_bool_exp
    ): [vectric_active_memberships!]!
    "An aggregate relationship"
    activeMembers_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_active_memberships_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_active_memberships_order_by!],
        "filter the rows returned"
        where: vectric_active_memberships_bool_exp
    ): vectric_active_memberships_aggregate!
    addedBy: String!
    amendedBy: String
    "An object relationship"
    customer: vectric_sales_customers
    customerId: bigint
    dateAdded: timestamp!
    dateAmended: timestamp
    membershipId: Int!
    "An array relationship"
    membershipInvitations(
        "distinct select on columns"
        distinct_on: [vectric_membership_invitations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_invitations_order_by!],
        "filter the rows returned"
        where: vectric_membership_invitations_bool_exp
    ): [vectric_membership_invitations!]!
    "An aggregate relationship"
    membershipInvitations_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_membership_invitations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_invitations_order_by!],
        "filter the rows returned"
        where: vectric_membership_invitations_bool_exp
    ): vectric_membership_invitations_aggregate!
    "An object relationship"
    membershipRole: vectric_membership_roles!
    "An object relationship"
    membershipStatus: vectric_membership_status!
    "An object relationship"
    organization: vectric_organizations!
    organizationId: Int!
    role: vectric_membership_roles_enum!
    status: vectric_membership_status_enum!
}

"aggregated selection of \"vectric.memberships\""
type vectric_memberships_aggregate {
    aggregate: vectric_memberships_aggregate_fields
    nodes: [vectric_memberships!]!
}

"aggregate fields of \"vectric.memberships\""
type vectric_memberships_aggregate_fields {
    avg: vectric_memberships_avg_fields
    count(columns: [vectric_memberships_select_column!], distinct: Boolean): Int!
    max: vectric_memberships_max_fields
    min: vectric_memberships_min_fields
    stddev: vectric_memberships_stddev_fields
    stddev_pop: vectric_memberships_stddev_pop_fields
    stddev_samp: vectric_memberships_stddev_samp_fields
    sum: vectric_memberships_sum_fields
    var_pop: vectric_memberships_var_pop_fields
    var_samp: vectric_memberships_var_samp_fields
    variance: vectric_memberships_variance_fields
}

"aggregate avg on columns"
type vectric_memberships_avg_fields {
    customerId: Float
    membershipId: Float
    organizationId: Float
}

"aggregate max on columns"
type vectric_memberships_max_fields {
    addedBy: String
    amendedBy: String
    customerId: bigint
    dateAdded: timestamp
    dateAmended: timestamp
    membershipId: Int
    organizationId: Int
}

"aggregate min on columns"
type vectric_memberships_min_fields {
    addedBy: String
    amendedBy: String
    customerId: bigint
    dateAdded: timestamp
    dateAmended: timestamp
    membershipId: Int
    organizationId: Int
}

"response of any mutation on the table \"vectric.memberships\""
type vectric_memberships_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_memberships!]!
}

"aggregate stddev on columns"
type vectric_memberships_stddev_fields {
    customerId: Float
    membershipId: Float
    organizationId: Float
}

"aggregate stddev_pop on columns"
type vectric_memberships_stddev_pop_fields {
    customerId: Float
    membershipId: Float
    organizationId: Float
}

"aggregate stddev_samp on columns"
type vectric_memberships_stddev_samp_fields {
    customerId: Float
    membershipId: Float
    organizationId: Float
}

"aggregate sum on columns"
type vectric_memberships_sum_fields {
    customerId: bigint
    membershipId: Int
    organizationId: Int
}

"aggregate var_pop on columns"
type vectric_memberships_var_pop_fields {
    customerId: Float
    membershipId: Float
    organizationId: Float
}

"aggregate var_samp on columns"
type vectric_memberships_var_samp_fields {
    customerId: Float
    membershipId: Float
    organizationId: Float
}

"aggregate variance on columns"
type vectric_memberships_variance_fields {
    customerId: Float
    membershipId: Float
    organizationId: Float
}

"columns and relationships of \"vectric.oauth_client_details\""
type vectric_oauth_client_details {
    access_token_validity: bigint
    additional_information: String
    authorities: String
    authorized_grant_types: String
    autoapprove: String
    client_id: String!
    client_secret: String
    refresh_token_validity: bigint
    resource_ids: String
    scope: String
    web_server_redirect_uri: String
}

"aggregated selection of \"vectric.oauth_client_details\""
type vectric_oauth_client_details_aggregate {
    aggregate: vectric_oauth_client_details_aggregate_fields
    nodes: [vectric_oauth_client_details!]!
}

"aggregate fields of \"vectric.oauth_client_details\""
type vectric_oauth_client_details_aggregate_fields {
    avg: vectric_oauth_client_details_avg_fields
    count(columns: [vectric_oauth_client_details_select_column!], distinct: Boolean): Int!
    max: vectric_oauth_client_details_max_fields
    min: vectric_oauth_client_details_min_fields
    stddev: vectric_oauth_client_details_stddev_fields
    stddev_pop: vectric_oauth_client_details_stddev_pop_fields
    stddev_samp: vectric_oauth_client_details_stddev_samp_fields
    sum: vectric_oauth_client_details_sum_fields
    var_pop: vectric_oauth_client_details_var_pop_fields
    var_samp: vectric_oauth_client_details_var_samp_fields
    variance: vectric_oauth_client_details_variance_fields
}

"aggregate avg on columns"
type vectric_oauth_client_details_avg_fields {
    access_token_validity: Float
    refresh_token_validity: Float
}

"aggregate max on columns"
type vectric_oauth_client_details_max_fields {
    access_token_validity: bigint
    additional_information: String
    authorities: String
    authorized_grant_types: String
    autoapprove: String
    client_id: String
    client_secret: String
    refresh_token_validity: bigint
    resource_ids: String
    scope: String
    web_server_redirect_uri: String
}

"aggregate min on columns"
type vectric_oauth_client_details_min_fields {
    access_token_validity: bigint
    additional_information: String
    authorities: String
    authorized_grant_types: String
    autoapprove: String
    client_id: String
    client_secret: String
    refresh_token_validity: bigint
    resource_ids: String
    scope: String
    web_server_redirect_uri: String
}

"response of any mutation on the table \"vectric.oauth_client_details\""
type vectric_oauth_client_details_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_oauth_client_details!]!
}

"aggregate stddev on columns"
type vectric_oauth_client_details_stddev_fields {
    access_token_validity: Float
    refresh_token_validity: Float
}

"aggregate stddev_pop on columns"
type vectric_oauth_client_details_stddev_pop_fields {
    access_token_validity: Float
    refresh_token_validity: Float
}

"aggregate stddev_samp on columns"
type vectric_oauth_client_details_stddev_samp_fields {
    access_token_validity: Float
    refresh_token_validity: Float
}

"aggregate sum on columns"
type vectric_oauth_client_details_sum_fields {
    access_token_validity: bigint
    refresh_token_validity: bigint
}

"aggregate var_pop on columns"
type vectric_oauth_client_details_var_pop_fields {
    access_token_validity: Float
    refresh_token_validity: Float
}

"aggregate var_samp on columns"
type vectric_oauth_client_details_var_samp_fields {
    access_token_validity: Float
    refresh_token_validity: Float
}

"aggregate variance on columns"
type vectric_oauth_client_details_variance_fields {
    access_token_validity: Float
    refresh_token_validity: Float
}

"columns and relationships of \"vectric.oem_allocation_emails\""
type vectric_oem_allocation_emails {
    bundle_id: String!
    date: timestamp!
    email_to: String!
    "An object relationship"
    oem_customer: vectric_sales_customers!
    oem_customer_id: bigint!
    "An object relationship"
    oem_partner: vectric_oem_partners!
    partner_id: bigint!
    "An object relationship"
    sales_oem_bundle: vectric_sales_oem_bundles!
}

"aggregated selection of \"vectric.oem_allocation_emails\""
type vectric_oem_allocation_emails_aggregate {
    aggregate: vectric_oem_allocation_emails_aggregate_fields
    nodes: [vectric_oem_allocation_emails!]!
}

"aggregate fields of \"vectric.oem_allocation_emails\""
type vectric_oem_allocation_emails_aggregate_fields {
    avg: vectric_oem_allocation_emails_avg_fields
    count(columns: [vectric_oem_allocation_emails_select_column!], distinct: Boolean): Int!
    max: vectric_oem_allocation_emails_max_fields
    min: vectric_oem_allocation_emails_min_fields
    stddev: vectric_oem_allocation_emails_stddev_fields
    stddev_pop: vectric_oem_allocation_emails_stddev_pop_fields
    stddev_samp: vectric_oem_allocation_emails_stddev_samp_fields
    sum: vectric_oem_allocation_emails_sum_fields
    var_pop: vectric_oem_allocation_emails_var_pop_fields
    var_samp: vectric_oem_allocation_emails_var_samp_fields
    variance: vectric_oem_allocation_emails_variance_fields
}

"aggregate avg on columns"
type vectric_oem_allocation_emails_avg_fields {
    oem_customer_id: Float
    partner_id: Float
}

"aggregate max on columns"
type vectric_oem_allocation_emails_max_fields {
    bundle_id: String
    date: timestamp
    email_to: String
    oem_customer_id: bigint
    partner_id: bigint
}

"aggregate min on columns"
type vectric_oem_allocation_emails_min_fields {
    bundle_id: String
    date: timestamp
    email_to: String
    oem_customer_id: bigint
    partner_id: bigint
}

"response of any mutation on the table \"vectric.oem_allocation_emails\""
type vectric_oem_allocation_emails_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_oem_allocation_emails!]!
}

"aggregate stddev on columns"
type vectric_oem_allocation_emails_stddev_fields {
    oem_customer_id: Float
    partner_id: Float
}

"aggregate stddev_pop on columns"
type vectric_oem_allocation_emails_stddev_pop_fields {
    oem_customer_id: Float
    partner_id: Float
}

"aggregate stddev_samp on columns"
type vectric_oem_allocation_emails_stddev_samp_fields {
    oem_customer_id: Float
    partner_id: Float
}

"aggregate sum on columns"
type vectric_oem_allocation_emails_sum_fields {
    oem_customer_id: bigint
    partner_id: bigint
}

"aggregate var_pop on columns"
type vectric_oem_allocation_emails_var_pop_fields {
    oem_customer_id: Float
    partner_id: Float
}

"aggregate var_samp on columns"
type vectric_oem_allocation_emails_var_samp_fields {
    oem_customer_id: Float
    partner_id: Float
}

"aggregate variance on columns"
type vectric_oem_allocation_emails_variance_fields {
    oem_customer_id: Float
    partner_id: Float
}

"columns and relationships of \"vectric.oem_detailed_products\""
type vectric_oem_detailed_products {
    id: bigint!
    oemProductId: bigint!
    "An object relationship"
    product: vectric_products_products!
    productId: bigint!
}

"aggregated selection of \"vectric.oem_detailed_products\""
type vectric_oem_detailed_products_aggregate {
    aggregate: vectric_oem_detailed_products_aggregate_fields
    nodes: [vectric_oem_detailed_products!]!
}

"aggregate fields of \"vectric.oem_detailed_products\""
type vectric_oem_detailed_products_aggregate_fields {
    avg: vectric_oem_detailed_products_avg_fields
    count(columns: [vectric_oem_detailed_products_select_column!], distinct: Boolean): Int!
    max: vectric_oem_detailed_products_max_fields
    min: vectric_oem_detailed_products_min_fields
    stddev: vectric_oem_detailed_products_stddev_fields
    stddev_pop: vectric_oem_detailed_products_stddev_pop_fields
    stddev_samp: vectric_oem_detailed_products_stddev_samp_fields
    sum: vectric_oem_detailed_products_sum_fields
    var_pop: vectric_oem_detailed_products_var_pop_fields
    var_samp: vectric_oem_detailed_products_var_samp_fields
    variance: vectric_oem_detailed_products_variance_fields
}

"aggregate avg on columns"
type vectric_oem_detailed_products_avg_fields {
    id: Float
    oemProductId: Float
    productId: Float
}

"aggregate max on columns"
type vectric_oem_detailed_products_max_fields {
    id: bigint
    oemProductId: bigint
    productId: bigint
}

"aggregate min on columns"
type vectric_oem_detailed_products_min_fields {
    id: bigint
    oemProductId: bigint
    productId: bigint
}

"response of any mutation on the table \"vectric.oem_detailed_products\""
type vectric_oem_detailed_products_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_oem_detailed_products!]!
}

"aggregate stddev on columns"
type vectric_oem_detailed_products_stddev_fields {
    id: Float
    oemProductId: Float
    productId: Float
}

"aggregate stddev_pop on columns"
type vectric_oem_detailed_products_stddev_pop_fields {
    id: Float
    oemProductId: Float
    productId: Float
}

"aggregate stddev_samp on columns"
type vectric_oem_detailed_products_stddev_samp_fields {
    id: Float
    oemProductId: Float
    productId: Float
}

"aggregate sum on columns"
type vectric_oem_detailed_products_sum_fields {
    id: bigint
    oemProductId: bigint
    productId: bigint
}

"aggregate var_pop on columns"
type vectric_oem_detailed_products_var_pop_fields {
    id: Float
    oemProductId: Float
    productId: Float
}

"aggregate var_samp on columns"
type vectric_oem_detailed_products_var_samp_fields {
    id: Float
    oemProductId: Float
    productId: Float
}

"aggregate variance on columns"
type vectric_oem_detailed_products_variance_fields {
    id: Float
    oemProductId: Float
    productId: Float
}

"columns and relationships of \"vectric.oem_eval_request\""
type vectric_oem_eval_request {
    "An object relationship"
    customer: vectric_sales_customers!
    customerId: bigint!
    dateProcessed: timestamptz
    dateRequested: timestamptz
    expired: Boolean!
    granted: Boolean!
    "An object relationship"
    partner: vectric_oem_partners
    partnerId: bigint
    processed: Boolean!
    processedBy: String
    replacedBy: bigint
    "An object relationship"
    replacementRequest: vectric_oem_eval_request
    requestId: bigint!
    requestedBy: bigint!
    "An object relationship"
    requester: vectric_sales_customers!
    vloggerId: Int
}

"aggregated selection of \"vectric.oem_eval_request\""
type vectric_oem_eval_request_aggregate {
    aggregate: vectric_oem_eval_request_aggregate_fields
    nodes: [vectric_oem_eval_request!]!
}

"aggregate fields of \"vectric.oem_eval_request\""
type vectric_oem_eval_request_aggregate_fields {
    avg: vectric_oem_eval_request_avg_fields
    count(columns: [vectric_oem_eval_request_select_column!], distinct: Boolean): Int!
    max: vectric_oem_eval_request_max_fields
    min: vectric_oem_eval_request_min_fields
    stddev: vectric_oem_eval_request_stddev_fields
    stddev_pop: vectric_oem_eval_request_stddev_pop_fields
    stddev_samp: vectric_oem_eval_request_stddev_samp_fields
    sum: vectric_oem_eval_request_sum_fields
    var_pop: vectric_oem_eval_request_var_pop_fields
    var_samp: vectric_oem_eval_request_var_samp_fields
    variance: vectric_oem_eval_request_variance_fields
}

"aggregate avg on columns"
type vectric_oem_eval_request_avg_fields {
    customerId: Float
    partnerId: Float
    replacedBy: Float
    requestId: Float
    requestedBy: Float
    vloggerId: Float
}

"aggregate max on columns"
type vectric_oem_eval_request_max_fields {
    customerId: bigint
    dateProcessed: timestamptz
    dateRequested: timestamptz
    partnerId: bigint
    processedBy: String
    replacedBy: bigint
    requestId: bigint
    requestedBy: bigint
    vloggerId: Int
}

"aggregate min on columns"
type vectric_oem_eval_request_min_fields {
    customerId: bigint
    dateProcessed: timestamptz
    dateRequested: timestamptz
    partnerId: bigint
    processedBy: String
    replacedBy: bigint
    requestId: bigint
    requestedBy: bigint
    vloggerId: Int
}

"response of any mutation on the table \"vectric.oem_eval_request\""
type vectric_oem_eval_request_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_oem_eval_request!]!
}

"aggregate stddev on columns"
type vectric_oem_eval_request_stddev_fields {
    customerId: Float
    partnerId: Float
    replacedBy: Float
    requestId: Float
    requestedBy: Float
    vloggerId: Float
}

"aggregate stddev_pop on columns"
type vectric_oem_eval_request_stddev_pop_fields {
    customerId: Float
    partnerId: Float
    replacedBy: Float
    requestId: Float
    requestedBy: Float
    vloggerId: Float
}

"aggregate stddev_samp on columns"
type vectric_oem_eval_request_stddev_samp_fields {
    customerId: Float
    partnerId: Float
    replacedBy: Float
    requestId: Float
    requestedBy: Float
    vloggerId: Float
}

"aggregate sum on columns"
type vectric_oem_eval_request_sum_fields {
    customerId: bigint
    partnerId: bigint
    replacedBy: bigint
    requestId: bigint
    requestedBy: bigint
    vloggerId: Int
}

"aggregate var_pop on columns"
type vectric_oem_eval_request_var_pop_fields {
    customerId: Float
    partnerId: Float
    replacedBy: Float
    requestId: Float
    requestedBy: Float
    vloggerId: Float
}

"aggregate var_samp on columns"
type vectric_oem_eval_request_var_samp_fields {
    customerId: Float
    partnerId: Float
    replacedBy: Float
    requestId: Float
    requestedBy: Float
    vloggerId: Float
}

"aggregate variance on columns"
type vectric_oem_eval_request_variance_fields {
    customerId: Float
    partnerId: Float
    replacedBy: Float
    requestId: Float
    requestedBy: Float
    vloggerId: Float
}

"columns and relationships of \"vectric.oem_fastspring_item\""
type vectric_oem_fastspring_item {
    batchId: String
    discountValue: numeric
    "An array relationship"
    itemBundle(
        "distinct select on columns"
        distinct_on: [vectric_oem_fastspring_item_bundle_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_fastspring_item_bundle_order_by!],
        "filter the rows returned"
        where: vectric_oem_fastspring_item_bundle_bool_exp
    ): [vectric_oem_fastspring_item_bundle!]!
    "An aggregate relationship"
    itemBundle_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_fastspring_item_bundle_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_fastspring_item_bundle_order_by!],
        "filter the rows returned"
        where: vectric_oem_fastspring_item_bundle_bool_exp
    ): vectric_oem_fastspring_item_bundle_aggregate!
    itemId: bigint!
    "An object relationship"
    oemProduct: vectric_oem_products
    oemProductId: bigint
    "An object relationship"
    order: vectric_oem_fastspring_order
    orderId: bigint
    priceTotal: numeric
    productName: String
    quantity: bigint
}

"aggregated selection of \"vectric.oem_fastspring_item\""
type vectric_oem_fastspring_item_aggregate {
    aggregate: vectric_oem_fastspring_item_aggregate_fields
    nodes: [vectric_oem_fastspring_item!]!
}

"aggregate fields of \"vectric.oem_fastspring_item\""
type vectric_oem_fastspring_item_aggregate_fields {
    avg: vectric_oem_fastspring_item_avg_fields
    count(columns: [vectric_oem_fastspring_item_select_column!], distinct: Boolean): Int!
    max: vectric_oem_fastspring_item_max_fields
    min: vectric_oem_fastspring_item_min_fields
    stddev: vectric_oem_fastspring_item_stddev_fields
    stddev_pop: vectric_oem_fastspring_item_stddev_pop_fields
    stddev_samp: vectric_oem_fastspring_item_stddev_samp_fields
    sum: vectric_oem_fastspring_item_sum_fields
    var_pop: vectric_oem_fastspring_item_var_pop_fields
    var_samp: vectric_oem_fastspring_item_var_samp_fields
    variance: vectric_oem_fastspring_item_variance_fields
}

"aggregate avg on columns"
type vectric_oem_fastspring_item_avg_fields {
    discountValue: Float
    itemId: Float
    oemProductId: Float
    orderId: Float
    priceTotal: Float
    quantity: Float
}

"columns and relationships of \"vectric.oem_fastspring_item_bundle\""
type vectric_oem_fastspring_item_bundle {
    "An object relationship"
    bundle: vectric_sales_oem_bundles!
    bundleId: String!
    "An object relationship"
    fastspringItem: vectric_oem_fastspring_item!
    fastspringItemId: bigint!
    itemBundleId: bigint!
}

"aggregated selection of \"vectric.oem_fastspring_item_bundle\""
type vectric_oem_fastspring_item_bundle_aggregate {
    aggregate: vectric_oem_fastspring_item_bundle_aggregate_fields
    nodes: [vectric_oem_fastspring_item_bundle!]!
}

"aggregate fields of \"vectric.oem_fastspring_item_bundle\""
type vectric_oem_fastspring_item_bundle_aggregate_fields {
    avg: vectric_oem_fastspring_item_bundle_avg_fields
    count(columns: [vectric_oem_fastspring_item_bundle_select_column!], distinct: Boolean): Int!
    max: vectric_oem_fastspring_item_bundle_max_fields
    min: vectric_oem_fastspring_item_bundle_min_fields
    stddev: vectric_oem_fastspring_item_bundle_stddev_fields
    stddev_pop: vectric_oem_fastspring_item_bundle_stddev_pop_fields
    stddev_samp: vectric_oem_fastspring_item_bundle_stddev_samp_fields
    sum: vectric_oem_fastspring_item_bundle_sum_fields
    var_pop: vectric_oem_fastspring_item_bundle_var_pop_fields
    var_samp: vectric_oem_fastspring_item_bundle_var_samp_fields
    variance: vectric_oem_fastspring_item_bundle_variance_fields
}

"aggregate avg on columns"
type vectric_oem_fastspring_item_bundle_avg_fields {
    fastspringItemId: Float
    itemBundleId: Float
}

"aggregate max on columns"
type vectric_oem_fastspring_item_bundle_max_fields {
    bundleId: String
    fastspringItemId: bigint
    itemBundleId: bigint
}

"aggregate min on columns"
type vectric_oem_fastspring_item_bundle_min_fields {
    bundleId: String
    fastspringItemId: bigint
    itemBundleId: bigint
}

"response of any mutation on the table \"vectric.oem_fastspring_item_bundle\""
type vectric_oem_fastspring_item_bundle_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_oem_fastspring_item_bundle!]!
}

"aggregate stddev on columns"
type vectric_oem_fastspring_item_bundle_stddev_fields {
    fastspringItemId: Float
    itemBundleId: Float
}

"aggregate stddev_pop on columns"
type vectric_oem_fastspring_item_bundle_stddev_pop_fields {
    fastspringItemId: Float
    itemBundleId: Float
}

"aggregate stddev_samp on columns"
type vectric_oem_fastspring_item_bundle_stddev_samp_fields {
    fastspringItemId: Float
    itemBundleId: Float
}

"aggregate sum on columns"
type vectric_oem_fastspring_item_bundle_sum_fields {
    fastspringItemId: bigint
    itemBundleId: bigint
}

"aggregate var_pop on columns"
type vectric_oem_fastspring_item_bundle_var_pop_fields {
    fastspringItemId: Float
    itemBundleId: Float
}

"aggregate var_samp on columns"
type vectric_oem_fastspring_item_bundle_var_samp_fields {
    fastspringItemId: Float
    itemBundleId: Float
}

"aggregate variance on columns"
type vectric_oem_fastspring_item_bundle_variance_fields {
    fastspringItemId: Float
    itemBundleId: Float
}

"aggregate max on columns"
type vectric_oem_fastspring_item_max_fields {
    batchId: String
    discountValue: numeric
    itemId: bigint
    oemProductId: bigint
    orderId: bigint
    priceTotal: numeric
    productName: String
    quantity: bigint
}

"aggregate min on columns"
type vectric_oem_fastspring_item_min_fields {
    batchId: String
    discountValue: numeric
    itemId: bigint
    oemProductId: bigint
    orderId: bigint
    priceTotal: numeric
    productName: String
    quantity: bigint
}

"response of any mutation on the table \"vectric.oem_fastspring_item\""
type vectric_oem_fastspring_item_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_oem_fastspring_item!]!
}

"aggregate stddev on columns"
type vectric_oem_fastspring_item_stddev_fields {
    discountValue: Float
    itemId: Float
    oemProductId: Float
    orderId: Float
    priceTotal: Float
    quantity: Float
}

"aggregate stddev_pop on columns"
type vectric_oem_fastspring_item_stddev_pop_fields {
    discountValue: Float
    itemId: Float
    oemProductId: Float
    orderId: Float
    priceTotal: Float
    quantity: Float
}

"aggregate stddev_samp on columns"
type vectric_oem_fastspring_item_stddev_samp_fields {
    discountValue: Float
    itemId: Float
    oemProductId: Float
    orderId: Float
    priceTotal: Float
    quantity: Float
}

"aggregate sum on columns"
type vectric_oem_fastspring_item_sum_fields {
    discountValue: numeric
    itemId: bigint
    oemProductId: bigint
    orderId: bigint
    priceTotal: numeric
    quantity: bigint
}

"aggregate var_pop on columns"
type vectric_oem_fastspring_item_var_pop_fields {
    discountValue: Float
    itemId: Float
    oemProductId: Float
    orderId: Float
    priceTotal: Float
    quantity: Float
}

"aggregate var_samp on columns"
type vectric_oem_fastspring_item_var_samp_fields {
    discountValue: Float
    itemId: Float
    oemProductId: Float
    orderId: Float
    priceTotal: Float
    quantity: Float
}

"aggregate variance on columns"
type vectric_oem_fastspring_item_variance_fields {
    discountValue: Float
    itemId: Float
    oemProductId: Float
    orderId: Float
    priceTotal: Float
    quantity: Float
}

"columns and relationships of \"vectric.oem_fastspring_order\""
type vectric_oem_fastspring_order {
    actionTaken: bigint
    amendedBy: String
    city: String
    createdBy: String
    currency: String!
    customerId: bigint
    dateAmended: timestamptz
    dateCreated: timestamptz
    dateProcessed: timestamptz
    fastSpringCustomerId: bigint!
    "An array relationship"
    items(
        "distinct select on columns"
        distinct_on: [vectric_oem_fastspring_item_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_fastspring_item_order_by!],
        "filter the rows returned"
        where: vectric_oem_fastspring_item_bool_exp
    ): [vectric_oem_fastspring_item!]!
    "An aggregate relationship"
    items_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_fastspring_item_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_fastspring_item_order_by!],
        "filter the rows returned"
        where: vectric_oem_fastspring_item_bool_exp
    ): vectric_oem_fastspring_item_aggregate!
    language: String
    notes: String
    orderId: bigint!
    orderReference: String!
    "An object relationship"
    partner: vectric_oem_partners!
    partnerId: bigint!
    postalCode: String
    processedBy: String
    region: String
    route: String
    subTotal: numeric
    tax: numeric
    total: numeric
}

"aggregated selection of \"vectric.oem_fastspring_order\""
type vectric_oem_fastspring_order_aggregate {
    aggregate: vectric_oem_fastspring_order_aggregate_fields
    nodes: [vectric_oem_fastspring_order!]!
}

"aggregate fields of \"vectric.oem_fastspring_order\""
type vectric_oem_fastspring_order_aggregate_fields {
    avg: vectric_oem_fastspring_order_avg_fields
    count(columns: [vectric_oem_fastspring_order_select_column!], distinct: Boolean): Int!
    max: vectric_oem_fastspring_order_max_fields
    min: vectric_oem_fastspring_order_min_fields
    stddev: vectric_oem_fastspring_order_stddev_fields
    stddev_pop: vectric_oem_fastspring_order_stddev_pop_fields
    stddev_samp: vectric_oem_fastspring_order_stddev_samp_fields
    sum: vectric_oem_fastspring_order_sum_fields
    var_pop: vectric_oem_fastspring_order_var_pop_fields
    var_samp: vectric_oem_fastspring_order_var_samp_fields
    variance: vectric_oem_fastspring_order_variance_fields
}

"aggregate avg on columns"
type vectric_oem_fastspring_order_avg_fields {
    actionTaken: Float
    customerId: Float
    fastSpringCustomerId: Float
    orderId: Float
    partnerId: Float
    subTotal: Float
    tax: Float
    total: Float
}

"aggregate max on columns"
type vectric_oem_fastspring_order_max_fields {
    actionTaken: bigint
    amendedBy: String
    city: String
    createdBy: String
    currency: String
    customerId: bigint
    dateAmended: timestamptz
    dateCreated: timestamptz
    dateProcessed: timestamptz
    fastSpringCustomerId: bigint
    language: String
    notes: String
    orderId: bigint
    orderReference: String
    partnerId: bigint
    postalCode: String
    processedBy: String
    region: String
    route: String
    subTotal: numeric
    tax: numeric
    total: numeric
}

"aggregate min on columns"
type vectric_oem_fastspring_order_min_fields {
    actionTaken: bigint
    amendedBy: String
    city: String
    createdBy: String
    currency: String
    customerId: bigint
    dateAmended: timestamptz
    dateCreated: timestamptz
    dateProcessed: timestamptz
    fastSpringCustomerId: bigint
    language: String
    notes: String
    orderId: bigint
    orderReference: String
    partnerId: bigint
    postalCode: String
    processedBy: String
    region: String
    route: String
    subTotal: numeric
    tax: numeric
    total: numeric
}

"response of any mutation on the table \"vectric.oem_fastspring_order\""
type vectric_oem_fastspring_order_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_oem_fastspring_order!]!
}

"aggregate stddev on columns"
type vectric_oem_fastspring_order_stddev_fields {
    actionTaken: Float
    customerId: Float
    fastSpringCustomerId: Float
    orderId: Float
    partnerId: Float
    subTotal: Float
    tax: Float
    total: Float
}

"aggregate stddev_pop on columns"
type vectric_oem_fastspring_order_stddev_pop_fields {
    actionTaken: Float
    customerId: Float
    fastSpringCustomerId: Float
    orderId: Float
    partnerId: Float
    subTotal: Float
    tax: Float
    total: Float
}

"aggregate stddev_samp on columns"
type vectric_oem_fastspring_order_stddev_samp_fields {
    actionTaken: Float
    customerId: Float
    fastSpringCustomerId: Float
    orderId: Float
    partnerId: Float
    subTotal: Float
    tax: Float
    total: Float
}

"aggregate sum on columns"
type vectric_oem_fastspring_order_sum_fields {
    actionTaken: bigint
    customerId: bigint
    fastSpringCustomerId: bigint
    orderId: bigint
    partnerId: bigint
    subTotal: numeric
    tax: numeric
    total: numeric
}

"aggregate var_pop on columns"
type vectric_oem_fastspring_order_var_pop_fields {
    actionTaken: Float
    customerId: Float
    fastSpringCustomerId: Float
    orderId: Float
    partnerId: Float
    subTotal: Float
    tax: Float
    total: Float
}

"aggregate var_samp on columns"
type vectric_oem_fastspring_order_var_samp_fields {
    actionTaken: Float
    customerId: Float
    fastSpringCustomerId: Float
    orderId: Float
    partnerId: Float
    subTotal: Float
    tax: Float
    total: Float
}

"aggregate variance on columns"
type vectric_oem_fastspring_order_variance_fields {
    actionTaken: Float
    customerId: Float
    fastSpringCustomerId: Float
    orderId: Float
    partnerId: Float
    subTotal: Float
    tax: Float
    total: Float
}

"columns and relationships of \"vectric.oem_invite_status\""
type vectric_oem_invite_status {
    status: String!
    statusId: bigint!
}

"aggregated selection of \"vectric.oem_invite_status\""
type vectric_oem_invite_status_aggregate {
    aggregate: vectric_oem_invite_status_aggregate_fields
    nodes: [vectric_oem_invite_status!]!
}

"aggregate fields of \"vectric.oem_invite_status\""
type vectric_oem_invite_status_aggregate_fields {
    avg: vectric_oem_invite_status_avg_fields
    count(columns: [vectric_oem_invite_status_select_column!], distinct: Boolean): Int!
    max: vectric_oem_invite_status_max_fields
    min: vectric_oem_invite_status_min_fields
    stddev: vectric_oem_invite_status_stddev_fields
    stddev_pop: vectric_oem_invite_status_stddev_pop_fields
    stddev_samp: vectric_oem_invite_status_stddev_samp_fields
    sum: vectric_oem_invite_status_sum_fields
    var_pop: vectric_oem_invite_status_var_pop_fields
    var_samp: vectric_oem_invite_status_var_samp_fields
    variance: vectric_oem_invite_status_variance_fields
}

"aggregate avg on columns"
type vectric_oem_invite_status_avg_fields {
    statusId: Float
}

"aggregate max on columns"
type vectric_oem_invite_status_max_fields {
    status: String
    statusId: bigint
}

"aggregate min on columns"
type vectric_oem_invite_status_min_fields {
    status: String
    statusId: bigint
}

"response of any mutation on the table \"vectric.oem_invite_status\""
type vectric_oem_invite_status_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_oem_invite_status!]!
}

"aggregate stddev on columns"
type vectric_oem_invite_status_stddev_fields {
    statusId: Float
}

"aggregate stddev_pop on columns"
type vectric_oem_invite_status_stddev_pop_fields {
    statusId: Float
}

"aggregate stddev_samp on columns"
type vectric_oem_invite_status_stddev_samp_fields {
    statusId: Float
}

"aggregate sum on columns"
type vectric_oem_invite_status_sum_fields {
    statusId: bigint
}

"aggregate var_pop on columns"
type vectric_oem_invite_status_var_pop_fields {
    statusId: Float
}

"aggregate var_samp on columns"
type vectric_oem_invite_status_var_samp_fields {
    statusId: Float
}

"aggregate variance on columns"
type vectric_oem_invite_status_variance_fields {
    statusId: Float
}

"columns and relationships of \"vectric.oem_licence_allocation_type\""
type vectric_oem_licence_allocation_type {
    allocationTypeId: bigint!
    typeName: String!
}

"aggregated selection of \"vectric.oem_licence_allocation_type\""
type vectric_oem_licence_allocation_type_aggregate {
    aggregate: vectric_oem_licence_allocation_type_aggregate_fields
    nodes: [vectric_oem_licence_allocation_type!]!
}

"aggregate fields of \"vectric.oem_licence_allocation_type\""
type vectric_oem_licence_allocation_type_aggregate_fields {
    avg: vectric_oem_licence_allocation_type_avg_fields
    count(columns: [vectric_oem_licence_allocation_type_select_column!], distinct: Boolean): Int!
    max: vectric_oem_licence_allocation_type_max_fields
    min: vectric_oem_licence_allocation_type_min_fields
    stddev: vectric_oem_licence_allocation_type_stddev_fields
    stddev_pop: vectric_oem_licence_allocation_type_stddev_pop_fields
    stddev_samp: vectric_oem_licence_allocation_type_stddev_samp_fields
    sum: vectric_oem_licence_allocation_type_sum_fields
    var_pop: vectric_oem_licence_allocation_type_var_pop_fields
    var_samp: vectric_oem_licence_allocation_type_var_samp_fields
    variance: vectric_oem_licence_allocation_type_variance_fields
}

"aggregate avg on columns"
type vectric_oem_licence_allocation_type_avg_fields {
    allocationTypeId: Float
}

"aggregate max on columns"
type vectric_oem_licence_allocation_type_max_fields {
    allocationTypeId: bigint
    typeName: String
}

"aggregate min on columns"
type vectric_oem_licence_allocation_type_min_fields {
    allocationTypeId: bigint
    typeName: String
}

"response of any mutation on the table \"vectric.oem_licence_allocation_type\""
type vectric_oem_licence_allocation_type_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_oem_licence_allocation_type!]!
}

"aggregate stddev on columns"
type vectric_oem_licence_allocation_type_stddev_fields {
    allocationTypeId: Float
}

"aggregate stddev_pop on columns"
type vectric_oem_licence_allocation_type_stddev_pop_fields {
    allocationTypeId: Float
}

"aggregate stddev_samp on columns"
type vectric_oem_licence_allocation_type_stddev_samp_fields {
    allocationTypeId: Float
}

"aggregate sum on columns"
type vectric_oem_licence_allocation_type_sum_fields {
    allocationTypeId: bigint
}

"aggregate var_pop on columns"
type vectric_oem_licence_allocation_type_var_pop_fields {
    allocationTypeId: Float
}

"aggregate var_samp on columns"
type vectric_oem_licence_allocation_type_var_samp_fields {
    allocationTypeId: Float
}

"aggregate variance on columns"
type vectric_oem_licence_allocation_type_variance_fields {
    allocationTypeId: Float
}

"columns and relationships of \"vectric.oem_partners\""
type vectric_oem_partners {
    "An array relationship"
    bundles(
        "distinct select on columns"
        distinct_on: [vectric_sales_oem_bundles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_oem_bundles_order_by!],
        "filter the rows returned"
        where: vectric_sales_oem_bundles_bool_exp
    ): [vectric_sales_oem_bundles!]!
    "An aggregate relationship"
    bundles_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_oem_bundles_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_oem_bundles_order_by!],
        "filter the rows returned"
        where: vectric_sales_oem_bundles_bool_exp
    ): vectric_sales_oem_bundles_aggregate!
    codePrefix: String!
    countrycode: bigint
    dateOfLastBatch: timestamptz
    displayName: String!
    inactive: Boolean
    nextIssue: bigint
    partnerId: bigint!
    "An array relationship"
    purchaseOptions(
        "distinct select on columns"
        distinct_on: [vectric_oem_purchase_options_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_purchase_options_order_by!],
        "filter the rows returned"
        where: vectric_oem_purchase_options_bool_exp
    ): [vectric_oem_purchase_options!]!
    "An aggregate relationship"
    purchaseOptions_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_purchase_options_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_purchase_options_order_by!],
        "filter the rows returned"
        where: vectric_oem_purchase_options_bool_exp
    ): vectric_oem_purchase_options_aggregate!
    "An array relationship"
    staff(
        "distinct select on columns"
        distinct_on: [vectric_oem_staff_customer_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_staff_customer_order_by!],
        "filter the rows returned"
        where: vectric_oem_staff_customer_bool_exp
    ): [vectric_oem_staff_customer!]!
    "An aggregate relationship"
    staff_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_staff_customer_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_staff_customer_order_by!],
        "filter the rows returned"
        where: vectric_oem_staff_customer_bool_exp
    ): vectric_oem_staff_customer_aggregate!
}

"aggregated selection of \"vectric.oem_partners\""
type vectric_oem_partners_aggregate {
    aggregate: vectric_oem_partners_aggregate_fields
    nodes: [vectric_oem_partners!]!
}

"aggregate fields of \"vectric.oem_partners\""
type vectric_oem_partners_aggregate_fields {
    avg: vectric_oem_partners_avg_fields
    count(columns: [vectric_oem_partners_select_column!], distinct: Boolean): Int!
    max: vectric_oem_partners_max_fields
    min: vectric_oem_partners_min_fields
    stddev: vectric_oem_partners_stddev_fields
    stddev_pop: vectric_oem_partners_stddev_pop_fields
    stddev_samp: vectric_oem_partners_stddev_samp_fields
    sum: vectric_oem_partners_sum_fields
    var_pop: vectric_oem_partners_var_pop_fields
    var_samp: vectric_oem_partners_var_samp_fields
    variance: vectric_oem_partners_variance_fields
}

"aggregate avg on columns"
type vectric_oem_partners_avg_fields {
    countrycode: Float
    nextIssue: Float
    partnerId: Float
}

"aggregate max on columns"
type vectric_oem_partners_max_fields {
    codePrefix: String
    countrycode: bigint
    dateOfLastBatch: timestamptz
    displayName: String
    nextIssue: bigint
    partnerId: bigint
}

"aggregate min on columns"
type vectric_oem_partners_min_fields {
    codePrefix: String
    countrycode: bigint
    dateOfLastBatch: timestamptz
    displayName: String
    nextIssue: bigint
    partnerId: bigint
}

"response of any mutation on the table \"vectric.oem_partners\""
type vectric_oem_partners_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_oem_partners!]!
}

"aggregate stddev on columns"
type vectric_oem_partners_stddev_fields {
    countrycode: Float
    nextIssue: Float
    partnerId: Float
}

"aggregate stddev_pop on columns"
type vectric_oem_partners_stddev_pop_fields {
    countrycode: Float
    nextIssue: Float
    partnerId: Float
}

"aggregate stddev_samp on columns"
type vectric_oem_partners_stddev_samp_fields {
    countrycode: Float
    nextIssue: Float
    partnerId: Float
}

"aggregate sum on columns"
type vectric_oem_partners_sum_fields {
    countrycode: bigint
    nextIssue: bigint
    partnerId: bigint
}

"aggregate var_pop on columns"
type vectric_oem_partners_var_pop_fields {
    countrycode: Float
    nextIssue: Float
    partnerId: Float
}

"aggregate var_samp on columns"
type vectric_oem_partners_var_samp_fields {
    countrycode: Float
    nextIssue: Float
    partnerId: Float
}

"aggregate variance on columns"
type vectric_oem_partners_variance_fields {
    countrycode: Float
    nextIssue: Float
    partnerId: Float
}

"columns and relationships of \"vectric.oem_products\""
type vectric_oem_products {
    "An array relationship"
    detailedProducts(
        "distinct select on columns"
        distinct_on: [vectric_oem_detailed_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_detailed_products_order_by!],
        "filter the rows returned"
        where: vectric_oem_detailed_products_bool_exp
    ): [vectric_oem_detailed_products!]!
    "An aggregate relationship"
    detailedProducts_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_detailed_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_detailed_products_order_by!],
        "filter the rows returned"
        where: vectric_oem_detailed_products_bool_exp
    ): vectric_oem_detailed_products_aggregate!
    enabled: Boolean!
    oemFastspringId: String!
    oemProductId: bigint!
    "An object relationship"
    product: vectric_products_products!
    productId: bigint!
}

"aggregated selection of \"vectric.oem_products\""
type vectric_oem_products_aggregate {
    aggregate: vectric_oem_products_aggregate_fields
    nodes: [vectric_oem_products!]!
}

"aggregate fields of \"vectric.oem_products\""
type vectric_oem_products_aggregate_fields {
    avg: vectric_oem_products_avg_fields
    count(columns: [vectric_oem_products_select_column!], distinct: Boolean): Int!
    max: vectric_oem_products_max_fields
    min: vectric_oem_products_min_fields
    stddev: vectric_oem_products_stddev_fields
    stddev_pop: vectric_oem_products_stddev_pop_fields
    stddev_samp: vectric_oem_products_stddev_samp_fields
    sum: vectric_oem_products_sum_fields
    var_pop: vectric_oem_products_var_pop_fields
    var_samp: vectric_oem_products_var_samp_fields
    variance: vectric_oem_products_variance_fields
}

"aggregate avg on columns"
type vectric_oem_products_avg_fields {
    oemProductId: Float
    productId: Float
}

"aggregate max on columns"
type vectric_oem_products_max_fields {
    oemFastspringId: String
    oemProductId: bigint
    productId: bigint
}

"aggregate min on columns"
type vectric_oem_products_min_fields {
    oemFastspringId: String
    oemProductId: bigint
    productId: bigint
}

"response of any mutation on the table \"vectric.oem_products\""
type vectric_oem_products_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_oem_products!]!
}

"aggregate stddev on columns"
type vectric_oem_products_stddev_fields {
    oemProductId: Float
    productId: Float
}

"aggregate stddev_pop on columns"
type vectric_oem_products_stddev_pop_fields {
    oemProductId: Float
    productId: Float
}

"aggregate stddev_samp on columns"
type vectric_oem_products_stddev_samp_fields {
    oemProductId: Float
    productId: Float
}

"aggregate sum on columns"
type vectric_oem_products_sum_fields {
    oemProductId: bigint
    productId: bigint
}

"aggregate var_pop on columns"
type vectric_oem_products_var_pop_fields {
    oemProductId: Float
    productId: Float
}

"aggregate var_samp on columns"
type vectric_oem_products_var_samp_fields {
    oemProductId: Float
    productId: Float
}

"aggregate variance on columns"
type vectric_oem_products_variance_fields {
    oemProductId: Float
    productId: Float
}

"columns and relationships of \"vectric.oem_purchase_options\""
type vectric_oem_purchase_options {
    emailLicenceDetails: Boolean!
    maxQuantity: bigint!
    minQuantity: bigint!
    multipleLicences: Boolean
    optionId: bigint!
    "An object relationship"
    partner: vectric_oem_partners!
    partnerId: bigint!
}

"aggregated selection of \"vectric.oem_purchase_options\""
type vectric_oem_purchase_options_aggregate {
    aggregate: vectric_oem_purchase_options_aggregate_fields
    nodes: [vectric_oem_purchase_options!]!
}

"aggregate fields of \"vectric.oem_purchase_options\""
type vectric_oem_purchase_options_aggregate_fields {
    avg: vectric_oem_purchase_options_avg_fields
    count(columns: [vectric_oem_purchase_options_select_column!], distinct: Boolean): Int!
    max: vectric_oem_purchase_options_max_fields
    min: vectric_oem_purchase_options_min_fields
    stddev: vectric_oem_purchase_options_stddev_fields
    stddev_pop: vectric_oem_purchase_options_stddev_pop_fields
    stddev_samp: vectric_oem_purchase_options_stddev_samp_fields
    sum: vectric_oem_purchase_options_sum_fields
    var_pop: vectric_oem_purchase_options_var_pop_fields
    var_samp: vectric_oem_purchase_options_var_samp_fields
    variance: vectric_oem_purchase_options_variance_fields
}

"aggregate avg on columns"
type vectric_oem_purchase_options_avg_fields {
    maxQuantity: Float
    minQuantity: Float
    optionId: Float
    partnerId: Float
}

"aggregate max on columns"
type vectric_oem_purchase_options_max_fields {
    maxQuantity: bigint
    minQuantity: bigint
    optionId: bigint
    partnerId: bigint
}

"aggregate min on columns"
type vectric_oem_purchase_options_min_fields {
    maxQuantity: bigint
    minQuantity: bigint
    optionId: bigint
    partnerId: bigint
}

"response of any mutation on the table \"vectric.oem_purchase_options\""
type vectric_oem_purchase_options_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_oem_purchase_options!]!
}

"aggregate stddev on columns"
type vectric_oem_purchase_options_stddev_fields {
    maxQuantity: Float
    minQuantity: Float
    optionId: Float
    partnerId: Float
}

"aggregate stddev_pop on columns"
type vectric_oem_purchase_options_stddev_pop_fields {
    maxQuantity: Float
    minQuantity: Float
    optionId: Float
    partnerId: Float
}

"aggregate stddev_samp on columns"
type vectric_oem_purchase_options_stddev_samp_fields {
    maxQuantity: Float
    minQuantity: Float
    optionId: Float
    partnerId: Float
}

"aggregate sum on columns"
type vectric_oem_purchase_options_sum_fields {
    maxQuantity: bigint
    minQuantity: bigint
    optionId: bigint
    partnerId: bigint
}

"aggregate var_pop on columns"
type vectric_oem_purchase_options_var_pop_fields {
    maxQuantity: Float
    minQuantity: Float
    optionId: Float
    partnerId: Float
}

"aggregate var_samp on columns"
type vectric_oem_purchase_options_var_samp_fields {
    maxQuantity: Float
    minQuantity: Float
    optionId: Float
    partnerId: Float
}

"aggregate variance on columns"
type vectric_oem_purchase_options_variance_fields {
    maxQuantity: Float
    minQuantity: Float
    optionId: Float
    partnerId: Float
}

"columns and relationships of \"vectric.oem_staff_admin_ownership\""
type vectric_oem_staff_admin_ownership {
    admin: Boolean
    adminId: bigint
    customerId: bigint
    customerName: String
    dateAccepted: timestamptz
    displayStatus: String
    email: String
    partnerId: bigint
    status: bigint
}

"aggregated selection of \"vectric.oem_staff_admin_ownership\""
type vectric_oem_staff_admin_ownership_aggregate {
    aggregate: vectric_oem_staff_admin_ownership_aggregate_fields
    nodes: [vectric_oem_staff_admin_ownership!]!
}

"aggregate fields of \"vectric.oem_staff_admin_ownership\""
type vectric_oem_staff_admin_ownership_aggregate_fields {
    avg: vectric_oem_staff_admin_ownership_avg_fields
    count(columns: [vectric_oem_staff_admin_ownership_select_column!], distinct: Boolean): Int!
    max: vectric_oem_staff_admin_ownership_max_fields
    min: vectric_oem_staff_admin_ownership_min_fields
    stddev: vectric_oem_staff_admin_ownership_stddev_fields
    stddev_pop: vectric_oem_staff_admin_ownership_stddev_pop_fields
    stddev_samp: vectric_oem_staff_admin_ownership_stddev_samp_fields
    sum: vectric_oem_staff_admin_ownership_sum_fields
    var_pop: vectric_oem_staff_admin_ownership_var_pop_fields
    var_samp: vectric_oem_staff_admin_ownership_var_samp_fields
    variance: vectric_oem_staff_admin_ownership_variance_fields
}

"aggregate avg on columns"
type vectric_oem_staff_admin_ownership_avg_fields {
    adminId: Float
    customerId: Float
    partnerId: Float
    status: Float
}

"aggregate max on columns"
type vectric_oem_staff_admin_ownership_max_fields {
    adminId: bigint
    customerId: bigint
    customerName: String
    dateAccepted: timestamptz
    displayStatus: String
    email: String
    partnerId: bigint
    status: bigint
}

"aggregate min on columns"
type vectric_oem_staff_admin_ownership_min_fields {
    adminId: bigint
    customerId: bigint
    customerName: String
    dateAccepted: timestamptz
    displayStatus: String
    email: String
    partnerId: bigint
    status: bigint
}

"aggregate stddev on columns"
type vectric_oem_staff_admin_ownership_stddev_fields {
    adminId: Float
    customerId: Float
    partnerId: Float
    status: Float
}

"aggregate stddev_pop on columns"
type vectric_oem_staff_admin_ownership_stddev_pop_fields {
    adminId: Float
    customerId: Float
    partnerId: Float
    status: Float
}

"aggregate stddev_samp on columns"
type vectric_oem_staff_admin_ownership_stddev_samp_fields {
    adminId: Float
    customerId: Float
    partnerId: Float
    status: Float
}

"aggregate sum on columns"
type vectric_oem_staff_admin_ownership_sum_fields {
    adminId: bigint
    customerId: bigint
    partnerId: bigint
    status: bigint
}

"aggregate var_pop on columns"
type vectric_oem_staff_admin_ownership_var_pop_fields {
    adminId: Float
    customerId: Float
    partnerId: Float
    status: Float
}

"aggregate var_samp on columns"
type vectric_oem_staff_admin_ownership_var_samp_fields {
    adminId: Float
    customerId: Float
    partnerId: Float
    status: Float
}

"aggregate variance on columns"
type vectric_oem_staff_admin_ownership_variance_fields {
    adminId: Float
    customerId: Float
    partnerId: Float
    status: Float
}

"columns and relationships of \"vectric.oem_staff_customer\""
type vectric_oem_staff_customer {
    admin: Boolean!
    "An object relationship"
    customer: vectric_sales_customers!
    customerId: bigint!
    dataRequested: timestamptz!
    dateAccepted: timestamptz
    dateUpdated: timestamptz
    "An object relationship"
    inviteStatus: vectric_oem_invite_status!
    "An object relationship"
    partner: vectric_oem_partners!
    partnerId: bigint!
    staffId: bigint!
    status: bigint!
}

"aggregated selection of \"vectric.oem_staff_customer\""
type vectric_oem_staff_customer_aggregate {
    aggregate: vectric_oem_staff_customer_aggregate_fields
    nodes: [vectric_oem_staff_customer!]!
}

"aggregate fields of \"vectric.oem_staff_customer\""
type vectric_oem_staff_customer_aggregate_fields {
    avg: vectric_oem_staff_customer_avg_fields
    count(columns: [vectric_oem_staff_customer_select_column!], distinct: Boolean): Int!
    max: vectric_oem_staff_customer_max_fields
    min: vectric_oem_staff_customer_min_fields
    stddev: vectric_oem_staff_customer_stddev_fields
    stddev_pop: vectric_oem_staff_customer_stddev_pop_fields
    stddev_samp: vectric_oem_staff_customer_stddev_samp_fields
    sum: vectric_oem_staff_customer_sum_fields
    var_pop: vectric_oem_staff_customer_var_pop_fields
    var_samp: vectric_oem_staff_customer_var_samp_fields
    variance: vectric_oem_staff_customer_variance_fields
}

"aggregate avg on columns"
type vectric_oem_staff_customer_avg_fields {
    customerId: Float
    partnerId: Float
    staffId: Float
    status: Float
}

"aggregate max on columns"
type vectric_oem_staff_customer_max_fields {
    customerId: bigint
    dataRequested: timestamptz
    dateAccepted: timestamptz
    dateUpdated: timestamptz
    partnerId: bigint
    staffId: bigint
    status: bigint
}

"aggregate min on columns"
type vectric_oem_staff_customer_min_fields {
    customerId: bigint
    dataRequested: timestamptz
    dateAccepted: timestamptz
    dateUpdated: timestamptz
    partnerId: bigint
    staffId: bigint
    status: bigint
}

"response of any mutation on the table \"vectric.oem_staff_customer\""
type vectric_oem_staff_customer_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_oem_staff_customer!]!
}

"aggregate stddev on columns"
type vectric_oem_staff_customer_stddev_fields {
    customerId: Float
    partnerId: Float
    staffId: Float
    status: Float
}

"aggregate stddev_pop on columns"
type vectric_oem_staff_customer_stddev_pop_fields {
    customerId: Float
    partnerId: Float
    staffId: Float
    status: Float
}

"aggregate stddev_samp on columns"
type vectric_oem_staff_customer_stddev_samp_fields {
    customerId: Float
    partnerId: Float
    staffId: Float
    status: Float
}

"aggregate sum on columns"
type vectric_oem_staff_customer_sum_fields {
    customerId: bigint
    partnerId: bigint
    staffId: bigint
    status: bigint
}

"aggregate var_pop on columns"
type vectric_oem_staff_customer_var_pop_fields {
    customerId: Float
    partnerId: Float
    staffId: Float
    status: Float
}

"aggregate var_samp on columns"
type vectric_oem_staff_customer_var_samp_fields {
    customerId: Float
    partnerId: Float
    staffId: Float
    status: Float
}

"aggregate variance on columns"
type vectric_oem_staff_customer_variance_fields {
    customerId: Float
    partnerId: Float
    staffId: Float
    status: Float
}

"columns and relationships of \"vectric.organization_audit\""
type vectric_organization_audit {
    auditDate: timestamp!
    auditId: Int!
    auditPayload(
        "JSON select path"
        path: String
    ): jsonb
    auditType: String!
    author: String!
    internalChange: Boolean!
    ipAddress: String
    organizationId: Int!
}

"aggregated selection of \"vectric.organization_audit\""
type vectric_organization_audit_aggregate {
    aggregate: vectric_organization_audit_aggregate_fields
    nodes: [vectric_organization_audit!]!
}

"aggregate fields of \"vectric.organization_audit\""
type vectric_organization_audit_aggregate_fields {
    avg: vectric_organization_audit_avg_fields
    count(columns: [vectric_organization_audit_select_column!], distinct: Boolean): Int!
    max: vectric_organization_audit_max_fields
    min: vectric_organization_audit_min_fields
    stddev: vectric_organization_audit_stddev_fields
    stddev_pop: vectric_organization_audit_stddev_pop_fields
    stddev_samp: vectric_organization_audit_stddev_samp_fields
    sum: vectric_organization_audit_sum_fields
    var_pop: vectric_organization_audit_var_pop_fields
    var_samp: vectric_organization_audit_var_samp_fields
    variance: vectric_organization_audit_variance_fields
}

"aggregate avg on columns"
type vectric_organization_audit_avg_fields {
    auditId: Float
    organizationId: Float
}

"aggregate max on columns"
type vectric_organization_audit_max_fields {
    auditDate: timestamp
    auditId: Int
    auditType: String
    author: String
    ipAddress: String
    organizationId: Int
}

"aggregate min on columns"
type vectric_organization_audit_min_fields {
    auditDate: timestamp
    auditId: Int
    auditType: String
    author: String
    ipAddress: String
    organizationId: Int
}

"response of any mutation on the table \"vectric.organization_audit\""
type vectric_organization_audit_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_organization_audit!]!
}

"aggregate stddev on columns"
type vectric_organization_audit_stddev_fields {
    auditId: Float
    organizationId: Float
}

"aggregate stddev_pop on columns"
type vectric_organization_audit_stddev_pop_fields {
    auditId: Float
    organizationId: Float
}

"aggregate stddev_samp on columns"
type vectric_organization_audit_stddev_samp_fields {
    auditId: Float
    organizationId: Float
}

"aggregate sum on columns"
type vectric_organization_audit_sum_fields {
    auditId: Int
    organizationId: Int
}

"aggregate var_pop on columns"
type vectric_organization_audit_var_pop_fields {
    auditId: Float
    organizationId: Float
}

"aggregate var_samp on columns"
type vectric_organization_audit_var_samp_fields {
    auditId: Float
    organizationId: Float
}

"aggregate variance on columns"
type vectric_organization_audit_variance_fields {
    auditId: Float
    organizationId: Float
}

"columns and relationships of \"vectric.organization_licence_scope\""
type vectric_organization_licence_scope {
    scope: String!
}

"aggregated selection of \"vectric.organization_licence_scope\""
type vectric_organization_licence_scope_aggregate {
    aggregate: vectric_organization_licence_scope_aggregate_fields
    nodes: [vectric_organization_licence_scope!]!
}

"aggregate fields of \"vectric.organization_licence_scope\""
type vectric_organization_licence_scope_aggregate_fields {
    count(columns: [vectric_organization_licence_scope_select_column!], distinct: Boolean): Int!
    max: vectric_organization_licence_scope_max_fields
    min: vectric_organization_licence_scope_min_fields
}

"aggregate max on columns"
type vectric_organization_licence_scope_max_fields {
    scope: String
}

"aggregate min on columns"
type vectric_organization_licence_scope_min_fields {
    scope: String
}

"response of any mutation on the table \"vectric.organization_licence_scope\""
type vectric_organization_licence_scope_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_organization_licence_scope!]!
}

"""

The view is created for organization admins. Admins should not have access to customer information if the customer has not confirmed their invitation


columns and relationships of "vectric.organization_memberships_admin_access"
"""
type vectric_organization_memberships_admin_access {
    addedBy: String
    amendedBy: String
    customerEmail: String
    customerId: bigint
    customerName: String
    customerRegisteredUsername: String
    dateAdded: timestamp
    dateAmended: timestamp
    "An array relationship"
    invitations(
        "distinct select on columns"
        distinct_on: [vectric_membership_invitations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_invitations_order_by!],
        "filter the rows returned"
        where: vectric_membership_invitations_bool_exp
    ): [vectric_membership_invitations!]!
    "An aggregate relationship"
    invitations_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_membership_invitations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_invitations_order_by!],
        "filter the rows returned"
        where: vectric_membership_invitations_bool_exp
    ): vectric_membership_invitations_aggregate!
    membershipId: Int
    membershipRole: String
    membershipStatus: String
    "An object relationship"
    organization: vectric_organizations
    organizationCountryId: bigint
    organizationCountryName: String
    organizationId: Int
    organizationName: String
    organizationType: String
}

"aggregated selection of \"vectric.organization_memberships_admin_access\""
type vectric_organization_memberships_admin_access_aggregate {
    aggregate: vectric_organization_memberships_admin_access_aggregate_fields
    nodes: [vectric_organization_memberships_admin_access!]!
}

"aggregate fields of \"vectric.organization_memberships_admin_access\""
type vectric_organization_memberships_admin_access_aggregate_fields {
    avg: vectric_organization_memberships_admin_access_avg_fields
    count(columns: [vectric_organization_memberships_admin_access_select_column!], distinct: Boolean): Int!
    max: vectric_organization_memberships_admin_access_max_fields
    min: vectric_organization_memberships_admin_access_min_fields
    stddev: vectric_organization_memberships_admin_access_stddev_fields
    stddev_pop: vectric_organization_memberships_admin_access_stddev_pop_fields
    stddev_samp: vectric_organization_memberships_admin_access_stddev_samp_fields
    sum: vectric_organization_memberships_admin_access_sum_fields
    var_pop: vectric_organization_memberships_admin_access_var_pop_fields
    var_samp: vectric_organization_memberships_admin_access_var_samp_fields
    variance: vectric_organization_memberships_admin_access_variance_fields
}

"aggregate avg on columns"
type vectric_organization_memberships_admin_access_avg_fields {
    customerId: Float
    membershipId: Float
    organizationCountryId: Float
    organizationId: Float
}

"aggregate max on columns"
type vectric_organization_memberships_admin_access_max_fields {
    addedBy: String
    amendedBy: String
    customerEmail: String
    customerId: bigint
    customerName: String
    customerRegisteredUsername: String
    dateAdded: timestamp
    dateAmended: timestamp
    membershipId: Int
    membershipRole: String
    membershipStatus: String
    organizationCountryId: bigint
    organizationCountryName: String
    organizationId: Int
    organizationName: String
    organizationType: String
}

"aggregate min on columns"
type vectric_organization_memberships_admin_access_min_fields {
    addedBy: String
    amendedBy: String
    customerEmail: String
    customerId: bigint
    customerName: String
    customerRegisteredUsername: String
    dateAdded: timestamp
    dateAmended: timestamp
    membershipId: Int
    membershipRole: String
    membershipStatus: String
    organizationCountryId: bigint
    organizationCountryName: String
    organizationId: Int
    organizationName: String
    organizationType: String
}

"aggregate stddev on columns"
type vectric_organization_memberships_admin_access_stddev_fields {
    customerId: Float
    membershipId: Float
    organizationCountryId: Float
    organizationId: Float
}

"aggregate stddev_pop on columns"
type vectric_organization_memberships_admin_access_stddev_pop_fields {
    customerId: Float
    membershipId: Float
    organizationCountryId: Float
    organizationId: Float
}

"aggregate stddev_samp on columns"
type vectric_organization_memberships_admin_access_stddev_samp_fields {
    customerId: Float
    membershipId: Float
    organizationCountryId: Float
    organizationId: Float
}

"aggregate sum on columns"
type vectric_organization_memberships_admin_access_sum_fields {
    customerId: bigint
    membershipId: Int
    organizationCountryId: bigint
    organizationId: Int
}

"aggregate var_pop on columns"
type vectric_organization_memberships_admin_access_var_pop_fields {
    customerId: Float
    membershipId: Float
    organizationCountryId: Float
    organizationId: Float
}

"aggregate var_samp on columns"
type vectric_organization_memberships_admin_access_var_samp_fields {
    customerId: Float
    membershipId: Float
    organizationCountryId: Float
    organizationId: Float
}

"aggregate variance on columns"
type vectric_organization_memberships_admin_access_variance_fields {
    customerId: Float
    membershipId: Float
    organizationCountryId: Float
    organizationId: Float
}

"columns and relationships of \"vectric.organization_order_items\""
type vectric_organization_order_items {
    "An object relationship"
    order: vectric_organization_orders!
    orderId: String!
    orderItemId: Int!
    "An array relationship"
    ownedItems(
        "distinct select on columns"
        distinct_on: [vectric_owned_items_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_owned_items_order_by!],
        "filter the rows returned"
        where: vectric_owned_items_bool_exp
    ): [vectric_owned_items!]!
    "An aggregate relationship"
    ownedItems_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_owned_items_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_owned_items_order_by!],
        "filter the rows returned"
        where: vectric_owned_items_bool_exp
    ): vectric_owned_items_aggregate!
    "An object relationship"
    saleableProduct: vectric_saleable_products!
    saleableProductId: Int!
    subscription: Boolean
    "An object relationship"
    subscriptionContract: vectric_subscription_contracts
    "An array relationship"
    subscriptionEvents(
        "distinct select on columns"
        distinct_on: [vectric_subscription_events_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_subscription_events_order_by!],
        "filter the rows returned"
        where: vectric_subscription_events_bool_exp
    ): [vectric_subscription_events!]!
    "An aggregate relationship"
    subscriptionEvents_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_subscription_events_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_subscription_events_order_by!],
        "filter the rows returned"
        where: vectric_subscription_events_bool_exp
    ): vectric_subscription_events_aggregate!
}

"aggregated selection of \"vectric.organization_order_items\""
type vectric_organization_order_items_aggregate {
    aggregate: vectric_organization_order_items_aggregate_fields
    nodes: [vectric_organization_order_items!]!
}

"aggregate fields of \"vectric.organization_order_items\""
type vectric_organization_order_items_aggregate_fields {
    avg: vectric_organization_order_items_avg_fields
    count(columns: [vectric_organization_order_items_select_column!], distinct: Boolean): Int!
    max: vectric_organization_order_items_max_fields
    min: vectric_organization_order_items_min_fields
    stddev: vectric_organization_order_items_stddev_fields
    stddev_pop: vectric_organization_order_items_stddev_pop_fields
    stddev_samp: vectric_organization_order_items_stddev_samp_fields
    sum: vectric_organization_order_items_sum_fields
    var_pop: vectric_organization_order_items_var_pop_fields
    var_samp: vectric_organization_order_items_var_samp_fields
    variance: vectric_organization_order_items_variance_fields
}

"aggregate avg on columns"
type vectric_organization_order_items_avg_fields {
    orderItemId: Float
    saleableProductId: Float
}

"aggregate max on columns"
type vectric_organization_order_items_max_fields {
    orderId: String
    orderItemId: Int
    saleableProductId: Int
}

"aggregate min on columns"
type vectric_organization_order_items_min_fields {
    orderId: String
    orderItemId: Int
    saleableProductId: Int
}

"response of any mutation on the table \"vectric.organization_order_items\""
type vectric_organization_order_items_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_organization_order_items!]!
}

"aggregate stddev on columns"
type vectric_organization_order_items_stddev_fields {
    orderItemId: Float
    saleableProductId: Float
}

"aggregate stddev_pop on columns"
type vectric_organization_order_items_stddev_pop_fields {
    orderItemId: Float
    saleableProductId: Float
}

"aggregate stddev_samp on columns"
type vectric_organization_order_items_stddev_samp_fields {
    orderItemId: Float
    saleableProductId: Float
}

"aggregate sum on columns"
type vectric_organization_order_items_sum_fields {
    orderItemId: Int
    saleableProductId: Int
}

"aggregate var_pop on columns"
type vectric_organization_order_items_var_pop_fields {
    orderItemId: Float
    saleableProductId: Float
}

"aggregate var_samp on columns"
type vectric_organization_order_items_var_samp_fields {
    orderItemId: Float
    saleableProductId: Float
}

"aggregate variance on columns"
type vectric_organization_order_items_variance_fields {
    orderItemId: Float
    saleableProductId: Float
}

"columns and relationships of \"vectric.organization_orders\""
type vectric_organization_orders {
    amendedBy: String
    createdBy: String!
    dateAmended: timestamp
    dateCreated: timestamp!
    externalReference: String
    "An array relationship"
    items(
        "distinct select on columns"
        distinct_on: [vectric_organization_order_items_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_order_items_order_by!],
        "filter the rows returned"
        where: vectric_organization_order_items_bool_exp
    ): [vectric_organization_order_items!]!
    "An aggregate relationship"
    items_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_organization_order_items_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_order_items_order_by!],
        "filter the rows returned"
        where: vectric_organization_order_items_bool_exp
    ): vectric_organization_order_items_aggregate!
    notes: String
    orderDate: timestamp!
    orderId: String!
    "An object relationship"
    organization: vectric_organizations
    organizationId: Int
    "An object relationship"
    purchaser: vectric_sales_customers!
    purchaserId: Int!
}

"aggregated selection of \"vectric.organization_orders\""
type vectric_organization_orders_aggregate {
    aggregate: vectric_organization_orders_aggregate_fields
    nodes: [vectric_organization_orders!]!
}

"aggregate fields of \"vectric.organization_orders\""
type vectric_organization_orders_aggregate_fields {
    avg: vectric_organization_orders_avg_fields
    count(columns: [vectric_organization_orders_select_column!], distinct: Boolean): Int!
    max: vectric_organization_orders_max_fields
    min: vectric_organization_orders_min_fields
    stddev: vectric_organization_orders_stddev_fields
    stddev_pop: vectric_organization_orders_stddev_pop_fields
    stddev_samp: vectric_organization_orders_stddev_samp_fields
    sum: vectric_organization_orders_sum_fields
    var_pop: vectric_organization_orders_var_pop_fields
    var_samp: vectric_organization_orders_var_samp_fields
    variance: vectric_organization_orders_variance_fields
}

"aggregate avg on columns"
type vectric_organization_orders_avg_fields {
    organizationId: Float
    purchaserId: Float
}

"aggregate max on columns"
type vectric_organization_orders_max_fields {
    amendedBy: String
    createdBy: String
    dateAmended: timestamp
    dateCreated: timestamp
    externalReference: String
    notes: String
    orderDate: timestamp
    orderId: String
    organizationId: Int
    purchaserId: Int
}

"aggregate min on columns"
type vectric_organization_orders_min_fields {
    amendedBy: String
    createdBy: String
    dateAmended: timestamp
    dateCreated: timestamp
    externalReference: String
    notes: String
    orderDate: timestamp
    orderId: String
    organizationId: Int
    purchaserId: Int
}

"response of any mutation on the table \"vectric.organization_orders\""
type vectric_organization_orders_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_organization_orders!]!
}

"aggregate stddev on columns"
type vectric_organization_orders_stddev_fields {
    organizationId: Float
    purchaserId: Float
}

"aggregate stddev_pop on columns"
type vectric_organization_orders_stddev_pop_fields {
    organizationId: Float
    purchaserId: Float
}

"aggregate stddev_samp on columns"
type vectric_organization_orders_stddev_samp_fields {
    organizationId: Float
    purchaserId: Float
}

"aggregate sum on columns"
type vectric_organization_orders_sum_fields {
    organizationId: Int
    purchaserId: Int
}

"aggregate var_pop on columns"
type vectric_organization_orders_var_pop_fields {
    organizationId: Float
    purchaserId: Float
}

"aggregate var_samp on columns"
type vectric_organization_orders_var_samp_fields {
    organizationId: Float
    purchaserId: Float
}

"aggregate variance on columns"
type vectric_organization_orders_variance_fields {
    organizationId: Float
    purchaserId: Float
}

"columns and relationships of \"vectric.organization_types\""
type vectric_organization_types {
    type: String!
}

"aggregated selection of \"vectric.organization_types\""
type vectric_organization_types_aggregate {
    aggregate: vectric_organization_types_aggregate_fields
    nodes: [vectric_organization_types!]!
}

"aggregate fields of \"vectric.organization_types\""
type vectric_organization_types_aggregate_fields {
    count(columns: [vectric_organization_types_select_column!], distinct: Boolean): Int!
    max: vectric_organization_types_max_fields
    min: vectric_organization_types_min_fields
}

"aggregate max on columns"
type vectric_organization_types_max_fields {
    type: String
}

"aggregate min on columns"
type vectric_organization_types_min_fields {
    type: String
}

"response of any mutation on the table \"vectric.organization_types\""
type vectric_organization_types_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_organization_types!]!
}

"columns and relationships of \"vectric.organizations\""
type vectric_organizations {
    active: Boolean!
    "An array relationship"
    activeMembers(
        "distinct select on columns"
        distinct_on: [vectric_active_memberships_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_active_memberships_order_by!],
        "filter the rows returned"
        where: vectric_active_memberships_bool_exp
    ): [vectric_active_memberships!]!
    "An aggregate relationship"
    activeMembers_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_active_memberships_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_active_memberships_order_by!],
        "filter the rows returned"
        where: vectric_active_memberships_bool_exp
    ): vectric_active_memberships_aggregate!
    amendedBy: String
    "An array relationship"
    auditLogs(
        "distinct select on columns"
        distinct_on: [vectric_organization_audit_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_audit_order_by!],
        "filter the rows returned"
        where: vectric_organization_audit_bool_exp
    ): [vectric_organization_audit!]!
    "An aggregate relationship"
    auditLogs_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_organization_audit_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_organization_audit_order_by!],
        "filter the rows returned"
        where: vectric_organization_audit_bool_exp
    ): vectric_organization_audit_aggregate!
    "An object relationship"
    country: vectric_countries
    countryId: bigint
    createdBy: String!
    dateAmended: timestamp
    dateCreated: timestamp!
    internalNotes: String
    "An array relationship"
    invitations(
        "distinct select on columns"
        distinct_on: [vectric_membership_invitations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_invitations_order_by!],
        "filter the rows returned"
        where: vectric_membership_invitations_bool_exp
    ): [vectric_membership_invitations!]!
    "An aggregate relationship"
    invitations_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_membership_invitations_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_membership_invitations_order_by!],
        "filter the rows returned"
        where: vectric_membership_invitations_bool_exp
    ): vectric_membership_invitations_aggregate!
    "An array relationship"
    memberships(
        "distinct select on columns"
        distinct_on: [vectric_memberships_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_memberships_order_by!],
        "filter the rows returned"
        where: vectric_memberships_bool_exp
    ): [vectric_memberships!]!
    "An aggregate relationship"
    memberships_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_memberships_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_memberships_order_by!],
        "filter the rows returned"
        where: vectric_memberships_bool_exp
    ): vectric_memberships_aggregate!
    organizationId: Int!
    organizationName: String!
    "An object relationship"
    organizationType: vectric_organization_types!
    organizationUUID: uuid!
    type: vectric_organization_types_enum!
}

"aggregated selection of \"vectric.organizations\""
type vectric_organizations_aggregate {
    aggregate: vectric_organizations_aggregate_fields
    nodes: [vectric_organizations!]!
}

"aggregate fields of \"vectric.organizations\""
type vectric_organizations_aggregate_fields {
    avg: vectric_organizations_avg_fields
    count(columns: [vectric_organizations_select_column!], distinct: Boolean): Int!
    max: vectric_organizations_max_fields
    min: vectric_organizations_min_fields
    stddev: vectric_organizations_stddev_fields
    stddev_pop: vectric_organizations_stddev_pop_fields
    stddev_samp: vectric_organizations_stddev_samp_fields
    sum: vectric_organizations_sum_fields
    var_pop: vectric_organizations_var_pop_fields
    var_samp: vectric_organizations_var_samp_fields
    variance: vectric_organizations_variance_fields
}

"aggregate avg on columns"
type vectric_organizations_avg_fields {
    countryId: Float
    organizationId: Float
}

"aggregate max on columns"
type vectric_organizations_max_fields {
    amendedBy: String
    countryId: bigint
    createdBy: String
    dateAmended: timestamp
    dateCreated: timestamp
    internalNotes: String
    organizationId: Int
    organizationName: String
    organizationUUID: uuid
}

"aggregate min on columns"
type vectric_organizations_min_fields {
    amendedBy: String
    countryId: bigint
    createdBy: String
    dateAmended: timestamp
    dateCreated: timestamp
    internalNotes: String
    organizationId: Int
    organizationName: String
    organizationUUID: uuid
}

"response of any mutation on the table \"vectric.organizations\""
type vectric_organizations_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_organizations!]!
}

"aggregate stddev on columns"
type vectric_organizations_stddev_fields {
    countryId: Float
    organizationId: Float
}

"aggregate stddev_pop on columns"
type vectric_organizations_stddev_pop_fields {
    countryId: Float
    organizationId: Float
}

"aggregate stddev_samp on columns"
type vectric_organizations_stddev_samp_fields {
    countryId: Float
    organizationId: Float
}

"aggregate sum on columns"
type vectric_organizations_sum_fields {
    countryId: bigint
    organizationId: Int
}

"aggregate var_pop on columns"
type vectric_organizations_var_pop_fields {
    countryId: Float
    organizationId: Float
}

"aggregate var_samp on columns"
type vectric_organizations_var_samp_fields {
    countryId: Float
    organizationId: Float
}

"aggregate variance on columns"
type vectric_organizations_variance_fields {
    countryId: Float
    organizationId: Float
}

"columns and relationships of \"vectric.owned_item_assignments\""
type vectric_owned_item_assignments {
    assignedBy: String!
    assignedTo: bigint!
    "An object relationship"
    assignedToMember: vectric_memberships!
    "An object relationship"
    assignedToMemberAdminAccess: vectric_organization_memberships_admin_access
    assignment_id: Int!
    dateAssigned: timestamp!
    ownedItemId: Int!
}

"aggregated selection of \"vectric.owned_item_assignments\""
type vectric_owned_item_assignments_aggregate {
    aggregate: vectric_owned_item_assignments_aggregate_fields
    nodes: [vectric_owned_item_assignments!]!
}

"aggregate fields of \"vectric.owned_item_assignments\""
type vectric_owned_item_assignments_aggregate_fields {
    avg: vectric_owned_item_assignments_avg_fields
    count(columns: [vectric_owned_item_assignments_select_column!], distinct: Boolean): Int!
    max: vectric_owned_item_assignments_max_fields
    min: vectric_owned_item_assignments_min_fields
    stddev: vectric_owned_item_assignments_stddev_fields
    stddev_pop: vectric_owned_item_assignments_stddev_pop_fields
    stddev_samp: vectric_owned_item_assignments_stddev_samp_fields
    sum: vectric_owned_item_assignments_sum_fields
    var_pop: vectric_owned_item_assignments_var_pop_fields
    var_samp: vectric_owned_item_assignments_var_samp_fields
    variance: vectric_owned_item_assignments_variance_fields
}

"aggregate avg on columns"
type vectric_owned_item_assignments_avg_fields {
    assignedTo: Float
    assignment_id: Float
    ownedItemId: Float
}

"aggregate max on columns"
type vectric_owned_item_assignments_max_fields {
    assignedBy: String
    assignedTo: bigint
    assignment_id: Int
    dateAssigned: timestamp
    ownedItemId: Int
}

"aggregate min on columns"
type vectric_owned_item_assignments_min_fields {
    assignedBy: String
    assignedTo: bigint
    assignment_id: Int
    dateAssigned: timestamp
    ownedItemId: Int
}

"response of any mutation on the table \"vectric.owned_item_assignments\""
type vectric_owned_item_assignments_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_owned_item_assignments!]!
}

"aggregate stddev on columns"
type vectric_owned_item_assignments_stddev_fields {
    assignedTo: Float
    assignment_id: Float
    ownedItemId: Float
}

"aggregate stddev_pop on columns"
type vectric_owned_item_assignments_stddev_pop_fields {
    assignedTo: Float
    assignment_id: Float
    ownedItemId: Float
}

"aggregate stddev_samp on columns"
type vectric_owned_item_assignments_stddev_samp_fields {
    assignedTo: Float
    assignment_id: Float
    ownedItemId: Float
}

"aggregate sum on columns"
type vectric_owned_item_assignments_sum_fields {
    assignedTo: bigint
    assignment_id: Int
    ownedItemId: Int
}

"aggregate var_pop on columns"
type vectric_owned_item_assignments_var_pop_fields {
    assignedTo: Float
    assignment_id: Float
    ownedItemId: Float
}

"aggregate var_samp on columns"
type vectric_owned_item_assignments_var_samp_fields {
    assignedTo: Float
    assignment_id: Float
    ownedItemId: Float
}

"aggregate variance on columns"
type vectric_owned_item_assignments_variance_fields {
    assignedTo: Float
    assignment_id: Float
    ownedItemId: Float
}

"columns and relationships of \"vectric.owned_items\""
type vectric_owned_items {
    amendedBy: String
    "An object relationship"
    assignment: vectric_owned_item_assignments
    createdBy: String!
    "An object relationship"
    customer: vectric_sales_customers
    customerId: bigint
    dateAmended: timestamp
    dateCreated: timestamp!
    "An array relationship"
    entitlements(
        "distinct select on columns"
        distinct_on: [vectric_entitlements_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_entitlements_order_by!],
        "filter the rows returned"
        where: vectric_entitlements_bool_exp
    ): [vectric_entitlements!]!
    "An aggregate relationship"
    entitlements_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_entitlements_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_entitlements_order_by!],
        "filter the rows returned"
        where: vectric_entitlements_bool_exp
    ): vectric_entitlements_aggregate!
    "An object relationship"
    licenceScope: vectric_organization_licence_scope!
    notes: String
    "An object relationship"
    orderItem: vectric_organization_order_items
    orderItemId: Int
    "An object relationship"
    organization: vectric_organizations
    organizationId: Int
    ownedItemId: Int!
    "An object relationship"
    ownedProduct: vectric_owned_products!
    ownedProductId: Int!
    record_date: timestamp!
    scope: vectric_organization_licence_scope_enum!
    status: Int!
    subscription: Boolean
}

"aggregated selection of \"vectric.owned_items\""
type vectric_owned_items_aggregate {
    aggregate: vectric_owned_items_aggregate_fields
    nodes: [vectric_owned_items!]!
}

"aggregate fields of \"vectric.owned_items\""
type vectric_owned_items_aggregate_fields {
    avg: vectric_owned_items_avg_fields
    count(columns: [vectric_owned_items_select_column!], distinct: Boolean): Int!
    max: vectric_owned_items_max_fields
    min: vectric_owned_items_min_fields
    stddev: vectric_owned_items_stddev_fields
    stddev_pop: vectric_owned_items_stddev_pop_fields
    stddev_samp: vectric_owned_items_stddev_samp_fields
    sum: vectric_owned_items_sum_fields
    var_pop: vectric_owned_items_var_pop_fields
    var_samp: vectric_owned_items_var_samp_fields
    variance: vectric_owned_items_variance_fields
}

"aggregate avg on columns"
type vectric_owned_items_avg_fields {
    customerId: Float
    orderItemId: Float
    organizationId: Float
    ownedItemId: Float
    ownedProductId: Float
    status: Float
}

"aggregate max on columns"
type vectric_owned_items_max_fields {
    amendedBy: String
    createdBy: String
    customerId: bigint
    dateAmended: timestamp
    dateCreated: timestamp
    notes: String
    orderItemId: Int
    organizationId: Int
    ownedItemId: Int
    ownedProductId: Int
    record_date: timestamp
    status: Int
}

"aggregate min on columns"
type vectric_owned_items_min_fields {
    amendedBy: String
    createdBy: String
    customerId: bigint
    dateAmended: timestamp
    dateCreated: timestamp
    notes: String
    orderItemId: Int
    organizationId: Int
    ownedItemId: Int
    ownedProductId: Int
    record_date: timestamp
    status: Int
}

"response of any mutation on the table \"vectric.owned_items\""
type vectric_owned_items_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_owned_items!]!
}

"aggregate stddev on columns"
type vectric_owned_items_stddev_fields {
    customerId: Float
    orderItemId: Float
    organizationId: Float
    ownedItemId: Float
    ownedProductId: Float
    status: Float
}

"aggregate stddev_pop on columns"
type vectric_owned_items_stddev_pop_fields {
    customerId: Float
    orderItemId: Float
    organizationId: Float
    ownedItemId: Float
    ownedProductId: Float
    status: Float
}

"aggregate stddev_samp on columns"
type vectric_owned_items_stddev_samp_fields {
    customerId: Float
    orderItemId: Float
    organizationId: Float
    ownedItemId: Float
    ownedProductId: Float
    status: Float
}

"aggregate sum on columns"
type vectric_owned_items_sum_fields {
    customerId: bigint
    orderItemId: Int
    organizationId: Int
    ownedItemId: Int
    ownedProductId: Int
    status: Int
}

"aggregate var_pop on columns"
type vectric_owned_items_var_pop_fields {
    customerId: Float
    orderItemId: Float
    organizationId: Float
    ownedItemId: Float
    ownedProductId: Float
    status: Float
}

"aggregate var_samp on columns"
type vectric_owned_items_var_samp_fields {
    customerId: Float
    orderItemId: Float
    organizationId: Float
    ownedItemId: Float
    ownedProductId: Float
    status: Float
}

"aggregate variance on columns"
type vectric_owned_items_variance_fields {
    customerId: Float
    orderItemId: Float
    organizationId: Float
    ownedItemId: Float
    ownedProductId: Float
    status: Float
}

"columns and relationships of \"vectric.owned_products\""
type vectric_owned_products {
    enabled: Boolean
    enhancement: Boolean
    productId: Int!
    productName: String!
    "An object relationship"
    productType: vectric_products_producttype!
    productTypeId: Int!
    subscription: Boolean
}

"aggregated selection of \"vectric.owned_products\""
type vectric_owned_products_aggregate {
    aggregate: vectric_owned_products_aggregate_fields
    nodes: [vectric_owned_products!]!
}

"aggregate fields of \"vectric.owned_products\""
type vectric_owned_products_aggregate_fields {
    avg: vectric_owned_products_avg_fields
    count(columns: [vectric_owned_products_select_column!], distinct: Boolean): Int!
    max: vectric_owned_products_max_fields
    min: vectric_owned_products_min_fields
    stddev: vectric_owned_products_stddev_fields
    stddev_pop: vectric_owned_products_stddev_pop_fields
    stddev_samp: vectric_owned_products_stddev_samp_fields
    sum: vectric_owned_products_sum_fields
    var_pop: vectric_owned_products_var_pop_fields
    var_samp: vectric_owned_products_var_samp_fields
    variance: vectric_owned_products_variance_fields
}

"aggregate avg on columns"
type vectric_owned_products_avg_fields {
    productId: Float
    productTypeId: Float
}

"aggregate max on columns"
type vectric_owned_products_max_fields {
    productId: Int
    productName: String
    productTypeId: Int
}

"aggregate min on columns"
type vectric_owned_products_min_fields {
    productId: Int
    productName: String
    productTypeId: Int
}

"response of any mutation on the table \"vectric.owned_products\""
type vectric_owned_products_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_owned_products!]!
}

"aggregate stddev on columns"
type vectric_owned_products_stddev_fields {
    productId: Float
    productTypeId: Float
}

"aggregate stddev_pop on columns"
type vectric_owned_products_stddev_pop_fields {
    productId: Float
    productTypeId: Float
}

"aggregate stddev_samp on columns"
type vectric_owned_products_stddev_samp_fields {
    productId: Float
    productTypeId: Float
}

"aggregate sum on columns"
type vectric_owned_products_sum_fields {
    productId: Int
    productTypeId: Int
}

"aggregate var_pop on columns"
type vectric_owned_products_var_pop_fields {
    productId: Float
    productTypeId: Float
}

"aggregate var_samp on columns"
type vectric_owned_products_var_samp_fields {
    productId: Float
    productTypeId: Float
}

"aggregate variance on columns"
type vectric_owned_products_variance_fields {
    productId: Float
    productTypeId: Float
}

"columns and relationships of \"vectric.products_clipartcollection_links\""
type vectric_products_clipartcollection_links {
    clipartChildId: bigint!
    clipartCollectionLinkId: bigint!
    clipartParentId: bigint!
    "An object relationship"
    collection: vectric_products_products!
    "An object relationship"
    project: vectric_products_products!
}

"aggregated selection of \"vectric.products_clipartcollection_links\""
type vectric_products_clipartcollection_links_aggregate {
    aggregate: vectric_products_clipartcollection_links_aggregate_fields
    nodes: [vectric_products_clipartcollection_links!]!
}

"aggregate fields of \"vectric.products_clipartcollection_links\""
type vectric_products_clipartcollection_links_aggregate_fields {
    avg: vectric_products_clipartcollection_links_avg_fields
    count(columns: [vectric_products_clipartcollection_links_select_column!], distinct: Boolean): Int!
    max: vectric_products_clipartcollection_links_max_fields
    min: vectric_products_clipartcollection_links_min_fields
    stddev: vectric_products_clipartcollection_links_stddev_fields
    stddev_pop: vectric_products_clipartcollection_links_stddev_pop_fields
    stddev_samp: vectric_products_clipartcollection_links_stddev_samp_fields
    sum: vectric_products_clipartcollection_links_sum_fields
    var_pop: vectric_products_clipartcollection_links_var_pop_fields
    var_samp: vectric_products_clipartcollection_links_var_samp_fields
    variance: vectric_products_clipartcollection_links_variance_fields
}

"aggregate avg on columns"
type vectric_products_clipartcollection_links_avg_fields {
    clipartChildId: Float
    clipartCollectionLinkId: Float
    clipartParentId: Float
}

"aggregate max on columns"
type vectric_products_clipartcollection_links_max_fields {
    clipartChildId: bigint
    clipartCollectionLinkId: bigint
    clipartParentId: bigint
}

"aggregate min on columns"
type vectric_products_clipartcollection_links_min_fields {
    clipartChildId: bigint
    clipartCollectionLinkId: bigint
    clipartParentId: bigint
}

"response of any mutation on the table \"vectric.products_clipartcollection_links\""
type vectric_products_clipartcollection_links_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_products_clipartcollection_links!]!
}

"aggregate stddev on columns"
type vectric_products_clipartcollection_links_stddev_fields {
    clipartChildId: Float
    clipartCollectionLinkId: Float
    clipartParentId: Float
}

"aggregate stddev_pop on columns"
type vectric_products_clipartcollection_links_stddev_pop_fields {
    clipartChildId: Float
    clipartCollectionLinkId: Float
    clipartParentId: Float
}

"aggregate stddev_samp on columns"
type vectric_products_clipartcollection_links_stddev_samp_fields {
    clipartChildId: Float
    clipartCollectionLinkId: Float
    clipartParentId: Float
}

"aggregate sum on columns"
type vectric_products_clipartcollection_links_sum_fields {
    clipartChildId: bigint
    clipartCollectionLinkId: bigint
    clipartParentId: bigint
}

"aggregate var_pop on columns"
type vectric_products_clipartcollection_links_var_pop_fields {
    clipartChildId: Float
    clipartCollectionLinkId: Float
    clipartParentId: Float
}

"aggregate var_samp on columns"
type vectric_products_clipartcollection_links_var_samp_fields {
    clipartChildId: Float
    clipartCollectionLinkId: Float
    clipartParentId: Float
}

"aggregate variance on columns"
type vectric_products_clipartcollection_links_variance_fields {
    clipartChildId: Float
    clipartCollectionLinkId: Float
    clipartParentId: Float
}

"columns and relationships of \"vectric.products_enhancement_eligibility\""
type vectric_products_enhancement_eligibility {
    eligibilityId: bigint!
    fastspringurl: String!
    "An object relationship"
    fromProduct: vectric_products_products!
    fromproduct: bigint!
    moreinfolink: String
    price: numeric!
    summary: String
    "An object relationship"
    toProduct: vectric_products_products!
    toproduct: bigint!
    visibletocustomers: Boolean!
    visibletostaff: Boolean!
}

"aggregated selection of \"vectric.products_enhancement_eligibility\""
type vectric_products_enhancement_eligibility_aggregate {
    aggregate: vectric_products_enhancement_eligibility_aggregate_fields
    nodes: [vectric_products_enhancement_eligibility!]!
}

"aggregate fields of \"vectric.products_enhancement_eligibility\""
type vectric_products_enhancement_eligibility_aggregate_fields {
    avg: vectric_products_enhancement_eligibility_avg_fields
    count(columns: [vectric_products_enhancement_eligibility_select_column!], distinct: Boolean): Int!
    max: vectric_products_enhancement_eligibility_max_fields
    min: vectric_products_enhancement_eligibility_min_fields
    stddev: vectric_products_enhancement_eligibility_stddev_fields
    stddev_pop: vectric_products_enhancement_eligibility_stddev_pop_fields
    stddev_samp: vectric_products_enhancement_eligibility_stddev_samp_fields
    sum: vectric_products_enhancement_eligibility_sum_fields
    var_pop: vectric_products_enhancement_eligibility_var_pop_fields
    var_samp: vectric_products_enhancement_eligibility_var_samp_fields
    variance: vectric_products_enhancement_eligibility_variance_fields
}

"aggregate avg on columns"
type vectric_products_enhancement_eligibility_avg_fields {
    eligibilityId: Float
    fromproduct: Float
    price: Float
    toproduct: Float
}

"aggregate max on columns"
type vectric_products_enhancement_eligibility_max_fields {
    eligibilityId: bigint
    fastspringurl: String
    fromproduct: bigint
    moreinfolink: String
    price: numeric
    summary: String
    toproduct: bigint
}

"aggregate min on columns"
type vectric_products_enhancement_eligibility_min_fields {
    eligibilityId: bigint
    fastspringurl: String
    fromproduct: bigint
    moreinfolink: String
    price: numeric
    summary: String
    toproduct: bigint
}

"response of any mutation on the table \"vectric.products_enhancement_eligibility\""
type vectric_products_enhancement_eligibility_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_products_enhancement_eligibility!]!
}

"aggregate stddev on columns"
type vectric_products_enhancement_eligibility_stddev_fields {
    eligibilityId: Float
    fromproduct: Float
    price: Float
    toproduct: Float
}

"aggregate stddev_pop on columns"
type vectric_products_enhancement_eligibility_stddev_pop_fields {
    eligibilityId: Float
    fromproduct: Float
    price: Float
    toproduct: Float
}

"aggregate stddev_samp on columns"
type vectric_products_enhancement_eligibility_stddev_samp_fields {
    eligibilityId: Float
    fromproduct: Float
    price: Float
    toproduct: Float
}

"aggregate sum on columns"
type vectric_products_enhancement_eligibility_sum_fields {
    eligibilityId: bigint
    fromproduct: bigint
    price: numeric
    toproduct: bigint
}

"aggregate var_pop on columns"
type vectric_products_enhancement_eligibility_var_pop_fields {
    eligibilityId: Float
    fromproduct: Float
    price: Float
    toproduct: Float
}

"aggregate var_samp on columns"
type vectric_products_enhancement_eligibility_var_samp_fields {
    eligibilityId: Float
    fromproduct: Float
    price: Float
    toproduct: Float
}

"aggregate variance on columns"
type vectric_products_enhancement_eligibility_variance_fields {
    eligibilityId: Float
    fromproduct: Float
    price: Float
    toproduct: Float
}

"columns and relationships of \"vectric.products_freeclipart\""
type vectric_products_freeclipart {
    "An object relationship"
    freeClipart: vectric_freeclipart
    freeClipartId: bigint
    "An object relationship"
    product: vectric_products_products
    productFreeClipartId: bigint!
    productId: bigint
}

"aggregated selection of \"vectric.products_freeclipart\""
type vectric_products_freeclipart_aggregate {
    aggregate: vectric_products_freeclipart_aggregate_fields
    nodes: [vectric_products_freeclipart!]!
}

"aggregate fields of \"vectric.products_freeclipart\""
type vectric_products_freeclipart_aggregate_fields {
    avg: vectric_products_freeclipart_avg_fields
    count(columns: [vectric_products_freeclipart_select_column!], distinct: Boolean): Int!
    max: vectric_products_freeclipart_max_fields
    min: vectric_products_freeclipart_min_fields
    stddev: vectric_products_freeclipart_stddev_fields
    stddev_pop: vectric_products_freeclipart_stddev_pop_fields
    stddev_samp: vectric_products_freeclipart_stddev_samp_fields
    sum: vectric_products_freeclipart_sum_fields
    var_pop: vectric_products_freeclipart_var_pop_fields
    var_samp: vectric_products_freeclipart_var_samp_fields
    variance: vectric_products_freeclipart_variance_fields
}

"aggregate avg on columns"
type vectric_products_freeclipart_avg_fields {
    freeClipartId: Float
    productFreeClipartId: Float
    productId: Float
}

"aggregate max on columns"
type vectric_products_freeclipart_max_fields {
    freeClipartId: bigint
    productFreeClipartId: bigint
    productId: bigint
}

"aggregate min on columns"
type vectric_products_freeclipart_min_fields {
    freeClipartId: bigint
    productFreeClipartId: bigint
    productId: bigint
}

"response of any mutation on the table \"vectric.products_freeclipart\""
type vectric_products_freeclipart_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_products_freeclipart!]!
}

"aggregate stddev on columns"
type vectric_products_freeclipart_stddev_fields {
    freeClipartId: Float
    productFreeClipartId: Float
    productId: Float
}

"aggregate stddev_pop on columns"
type vectric_products_freeclipart_stddev_pop_fields {
    freeClipartId: Float
    productFreeClipartId: Float
    productId: Float
}

"aggregate stddev_samp on columns"
type vectric_products_freeclipart_stddev_samp_fields {
    freeClipartId: Float
    productFreeClipartId: Float
    productId: Float
}

"aggregate sum on columns"
type vectric_products_freeclipart_sum_fields {
    freeClipartId: bigint
    productFreeClipartId: bigint
    productId: bigint
}

"aggregate var_pop on columns"
type vectric_products_freeclipart_var_pop_fields {
    freeClipartId: Float
    productFreeClipartId: Float
    productId: Float
}

"aggregate var_samp on columns"
type vectric_products_freeclipart_var_samp_fields {
    freeClipartId: Float
    productFreeClipartId: Float
    productId: Float
}

"aggregate variance on columns"
type vectric_products_freeclipart_variance_fields {
    freeClipartId: Float
    productFreeClipartId: Float
    productId: Float
}

"columns and relationships of \"vectric.products_fulfilments\""
type vectric_products_fulfilments {
    description: String
    downloadSize: String
    fulfilmentId: bigint!
    fulfilmentName: String!
    fulfilmenttypeid: bigint
    location: String!
    objectName: String!
    "An object relationship"
    type: vectric_products_fulfilmenttypes
}

"aggregated selection of \"vectric.products_fulfilments\""
type vectric_products_fulfilments_aggregate {
    aggregate: vectric_products_fulfilments_aggregate_fields
    nodes: [vectric_products_fulfilments!]!
}

"aggregate fields of \"vectric.products_fulfilments\""
type vectric_products_fulfilments_aggregate_fields {
    avg: vectric_products_fulfilments_avg_fields
    count(columns: [vectric_products_fulfilments_select_column!], distinct: Boolean): Int!
    max: vectric_products_fulfilments_max_fields
    min: vectric_products_fulfilments_min_fields
    stddev: vectric_products_fulfilments_stddev_fields
    stddev_pop: vectric_products_fulfilments_stddev_pop_fields
    stddev_samp: vectric_products_fulfilments_stddev_samp_fields
    sum: vectric_products_fulfilments_sum_fields
    var_pop: vectric_products_fulfilments_var_pop_fields
    var_samp: vectric_products_fulfilments_var_samp_fields
    variance: vectric_products_fulfilments_variance_fields
}

"aggregate avg on columns"
type vectric_products_fulfilments_avg_fields {
    fulfilmentId: Float
    fulfilmenttypeid: Float
}

"aggregate max on columns"
type vectric_products_fulfilments_max_fields {
    description: String
    downloadSize: String
    fulfilmentId: bigint
    fulfilmentName: String
    fulfilmenttypeid: bigint
    location: String
    objectName: String
}

"aggregate min on columns"
type vectric_products_fulfilments_min_fields {
    description: String
    downloadSize: String
    fulfilmentId: bigint
    fulfilmentName: String
    fulfilmenttypeid: bigint
    location: String
    objectName: String
}

"response of any mutation on the table \"vectric.products_fulfilments\""
type vectric_products_fulfilments_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_products_fulfilments!]!
}

"aggregate stddev on columns"
type vectric_products_fulfilments_stddev_fields {
    fulfilmentId: Float
    fulfilmenttypeid: Float
}

"aggregate stddev_pop on columns"
type vectric_products_fulfilments_stddev_pop_fields {
    fulfilmentId: Float
    fulfilmenttypeid: Float
}

"aggregate stddev_samp on columns"
type vectric_products_fulfilments_stddev_samp_fields {
    fulfilmentId: Float
    fulfilmenttypeid: Float
}

"aggregate sum on columns"
type vectric_products_fulfilments_sum_fields {
    fulfilmentId: bigint
    fulfilmenttypeid: bigint
}

"aggregate var_pop on columns"
type vectric_products_fulfilments_var_pop_fields {
    fulfilmentId: Float
    fulfilmenttypeid: Float
}

"aggregate var_samp on columns"
type vectric_products_fulfilments_var_samp_fields {
    fulfilmentId: Float
    fulfilmenttypeid: Float
}

"aggregate variance on columns"
type vectric_products_fulfilments_variance_fields {
    fulfilmentId: Float
    fulfilmenttypeid: Float
}

"columns and relationships of \"vectric.products_fulfilmenttypes\""
type vectric_products_fulfilmenttypes {
    fulfilmenttypeid: bigint!
    typename: String!
}

"aggregated selection of \"vectric.products_fulfilmenttypes\""
type vectric_products_fulfilmenttypes_aggregate {
    aggregate: vectric_products_fulfilmenttypes_aggregate_fields
    nodes: [vectric_products_fulfilmenttypes!]!
}

"aggregate fields of \"vectric.products_fulfilmenttypes\""
type vectric_products_fulfilmenttypes_aggregate_fields {
    avg: vectric_products_fulfilmenttypes_avg_fields
    count(columns: [vectric_products_fulfilmenttypes_select_column!], distinct: Boolean): Int!
    max: vectric_products_fulfilmenttypes_max_fields
    min: vectric_products_fulfilmenttypes_min_fields
    stddev: vectric_products_fulfilmenttypes_stddev_fields
    stddev_pop: vectric_products_fulfilmenttypes_stddev_pop_fields
    stddev_samp: vectric_products_fulfilmenttypes_stddev_samp_fields
    sum: vectric_products_fulfilmenttypes_sum_fields
    var_pop: vectric_products_fulfilmenttypes_var_pop_fields
    var_samp: vectric_products_fulfilmenttypes_var_samp_fields
    variance: vectric_products_fulfilmenttypes_variance_fields
}

"aggregate avg on columns"
type vectric_products_fulfilmenttypes_avg_fields {
    fulfilmenttypeid: Float
}

"aggregate max on columns"
type vectric_products_fulfilmenttypes_max_fields {
    fulfilmenttypeid: bigint
    typename: String
}

"aggregate min on columns"
type vectric_products_fulfilmenttypes_min_fields {
    fulfilmenttypeid: bigint
    typename: String
}

"response of any mutation on the table \"vectric.products_fulfilmenttypes\""
type vectric_products_fulfilmenttypes_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_products_fulfilmenttypes!]!
}

"aggregate stddev on columns"
type vectric_products_fulfilmenttypes_stddev_fields {
    fulfilmenttypeid: Float
}

"aggregate stddev_pop on columns"
type vectric_products_fulfilmenttypes_stddev_pop_fields {
    fulfilmenttypeid: Float
}

"aggregate stddev_samp on columns"
type vectric_products_fulfilmenttypes_stddev_samp_fields {
    fulfilmenttypeid: Float
}

"aggregate sum on columns"
type vectric_products_fulfilmenttypes_sum_fields {
    fulfilmenttypeid: bigint
}

"aggregate var_pop on columns"
type vectric_products_fulfilmenttypes_var_pop_fields {
    fulfilmenttypeid: Float
}

"aggregate var_samp on columns"
type vectric_products_fulfilmenttypes_var_samp_fields {
    fulfilmenttypeid: Float
}

"aggregate variance on columns"
type vectric_products_fulfilmenttypes_variance_fields {
    fulfilmenttypeid: Float
}

"columns and relationships of \"vectric.products_product_fulfilments\""
type vectric_products_product_fulfilments {
    "An object relationship"
    fulfilment: vectric_products_fulfilments!
    fulfilmentid: bigint!
    "An object relationship"
    product: vectric_products_products!
    productfulfilmentid: bigint!
    productid: bigint!
}

"aggregated selection of \"vectric.products_product_fulfilments\""
type vectric_products_product_fulfilments_aggregate {
    aggregate: vectric_products_product_fulfilments_aggregate_fields
    nodes: [vectric_products_product_fulfilments!]!
}

"aggregate fields of \"vectric.products_product_fulfilments\""
type vectric_products_product_fulfilments_aggregate_fields {
    avg: vectric_products_product_fulfilments_avg_fields
    count(columns: [vectric_products_product_fulfilments_select_column!], distinct: Boolean): Int!
    max: vectric_products_product_fulfilments_max_fields
    min: vectric_products_product_fulfilments_min_fields
    stddev: vectric_products_product_fulfilments_stddev_fields
    stddev_pop: vectric_products_product_fulfilments_stddev_pop_fields
    stddev_samp: vectric_products_product_fulfilments_stddev_samp_fields
    sum: vectric_products_product_fulfilments_sum_fields
    var_pop: vectric_products_product_fulfilments_var_pop_fields
    var_samp: vectric_products_product_fulfilments_var_samp_fields
    variance: vectric_products_product_fulfilments_variance_fields
}

"aggregate avg on columns"
type vectric_products_product_fulfilments_avg_fields {
    fulfilmentid: Float
    productfulfilmentid: Float
    productid: Float
}

"aggregate max on columns"
type vectric_products_product_fulfilments_max_fields {
    fulfilmentid: bigint
    productfulfilmentid: bigint
    productid: bigint
}

"aggregate min on columns"
type vectric_products_product_fulfilments_min_fields {
    fulfilmentid: bigint
    productfulfilmentid: bigint
    productid: bigint
}

"response of any mutation on the table \"vectric.products_product_fulfilments\""
type vectric_products_product_fulfilments_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_products_product_fulfilments!]!
}

"aggregate stddev on columns"
type vectric_products_product_fulfilments_stddev_fields {
    fulfilmentid: Float
    productfulfilmentid: Float
    productid: Float
}

"aggregate stddev_pop on columns"
type vectric_products_product_fulfilments_stddev_pop_fields {
    fulfilmentid: Float
    productfulfilmentid: Float
    productid: Float
}

"aggregate stddev_samp on columns"
type vectric_products_product_fulfilments_stddev_samp_fields {
    fulfilmentid: Float
    productfulfilmentid: Float
    productid: Float
}

"aggregate sum on columns"
type vectric_products_product_fulfilments_sum_fields {
    fulfilmentid: bigint
    productfulfilmentid: bigint
    productid: bigint
}

"aggregate var_pop on columns"
type vectric_products_product_fulfilments_var_pop_fields {
    fulfilmentid: Float
    productfulfilmentid: Float
    productid: Float
}

"aggregate var_samp on columns"
type vectric_products_product_fulfilments_var_samp_fields {
    fulfilmentid: Float
    productfulfilmentid: Float
    productid: Float
}

"aggregate variance on columns"
type vectric_products_product_fulfilments_variance_fields {
    fulfilmentid: Float
    productfulfilmentid: Float
    productid: Float
}

"columns and relationships of \"vectric.products_product_licence_type\""
type vectric_products_product_licence_type {
    type: String!
}

"aggregated selection of \"vectric.products_product_licence_type\""
type vectric_products_product_licence_type_aggregate {
    aggregate: vectric_products_product_licence_type_aggregate_fields
    nodes: [vectric_products_product_licence_type!]!
}

"aggregate fields of \"vectric.products_product_licence_type\""
type vectric_products_product_licence_type_aggregate_fields {
    count(columns: [vectric_products_product_licence_type_select_column!], distinct: Boolean): Int!
    max: vectric_products_product_licence_type_max_fields
    min: vectric_products_product_licence_type_min_fields
}

"aggregate max on columns"
type vectric_products_product_licence_type_max_fields {
    type: String
}

"aggregate min on columns"
type vectric_products_product_licence_type_min_fields {
    type: String
}

"response of any mutation on the table \"vectric.products_product_licence_type\""
type vectric_products_product_licence_type_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_products_product_licence_type!]!
}

"columns and relationships of \"vectric.products_products\""
type vectric_products_products {
    enabled: Boolean!
    externalid: bigint
    fastspringId: String
    free: Boolean!
    "An object relationship"
    latestVersion: vectric_products_versioncodes
    latestversion: bigint
    licenceType: vectric_products_product_licence_type_enum!
    media: Boolean!
    "An array relationship"
    potentialEnhancements(
        "distinct select on columns"
        distinct_on: [vectric_products_enhancement_eligibility_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_enhancement_eligibility_order_by!],
        "filter the rows returned"
        where: vectric_products_enhancement_eligibility_bool_exp
    ): [vectric_products_enhancement_eligibility!]!
    "An aggregate relationship"
    potentialEnhancements_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_enhancement_eligibility_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_enhancement_eligibility_order_by!],
        "filter the rows returned"
        where: vectric_products_enhancement_eligibility_bool_exp
    ): vectric_products_enhancement_eligibility_aggregate!
    "An array relationship"
    potentialUpgrades(
        "distinct select on columns"
        distinct_on: [vectric_active_upgrades_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_active_upgrades_order_by!],
        "filter the rows returned"
        where: vectric_active_upgrades_bool_exp
    ): [vectric_active_upgrades!]!
    "An aggregate relationship"
    potentialUpgrades_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_active_upgrades_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_active_upgrades_order_by!],
        "filter the rows returned"
        where: vectric_active_upgrades_bool_exp
    ): vectric_active_upgrades_aggregate!
    productID: bigint!
    productName: String!
    "An object relationship"
    productType: vectric_products_producttype!
    "An array relationship"
    product_fulfilments(
        "distinct select on columns"
        distinct_on: [vectric_products_product_fulfilments_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_product_fulfilments_order_by!],
        "filter the rows returned"
        where: vectric_products_product_fulfilments_bool_exp
    ): [vectric_products_product_fulfilments!]!
    "An aggregate relationship"
    product_fulfilments_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_product_fulfilments_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_product_fulfilments_order_by!],
        "filter the rows returned"
        where: vectric_products_product_fulfilments_bool_exp
    ): vectric_products_product_fulfilments_aggregate!
    receivesClipart: Boolean!
    releaseDate: date
    requireslicence: Boolean
    type: bigint!
    upgradefromtypeid: bigint
    "An array relationship"
    versions(
        "distinct select on columns"
        distinct_on: [vectric_products_versioncodes_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_versioncodes_order_by!],
        "filter the rows returned"
        where: vectric_products_versioncodes_bool_exp
    ): [vectric_products_versioncodes!]!
    "An aggregate relationship"
    versions_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_versioncodes_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_versioncodes_order_by!],
        "filter the rows returned"
        where: vectric_products_versioncodes_bool_exp
    ): vectric_products_versioncodes_aggregate!
}

"aggregated selection of \"vectric.products_products\""
type vectric_products_products_aggregate {
    aggregate: vectric_products_products_aggregate_fields
    nodes: [vectric_products_products!]!
}

"aggregate fields of \"vectric.products_products\""
type vectric_products_products_aggregate_fields {
    avg: vectric_products_products_avg_fields
    count(columns: [vectric_products_products_select_column!], distinct: Boolean): Int!
    max: vectric_products_products_max_fields
    min: vectric_products_products_min_fields
    stddev: vectric_products_products_stddev_fields
    stddev_pop: vectric_products_products_stddev_pop_fields
    stddev_samp: vectric_products_products_stddev_samp_fields
    sum: vectric_products_products_sum_fields
    var_pop: vectric_products_products_var_pop_fields
    var_samp: vectric_products_products_var_samp_fields
    variance: vectric_products_products_variance_fields
}

"aggregate avg on columns"
type vectric_products_products_avg_fields {
    externalid: Float
    latestversion: Float
    productID: Float
    type: Float
    upgradefromtypeid: Float
}

"aggregate max on columns"
type vectric_products_products_max_fields {
    externalid: bigint
    fastspringId: String
    latestversion: bigint
    productID: bigint
    productName: String
    releaseDate: date
    type: bigint
    upgradefromtypeid: bigint
}

"aggregate min on columns"
type vectric_products_products_min_fields {
    externalid: bigint
    fastspringId: String
    latestversion: bigint
    productID: bigint
    productName: String
    releaseDate: date
    type: bigint
    upgradefromtypeid: bigint
}

"response of any mutation on the table \"vectric.products_products\""
type vectric_products_products_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_products_products!]!
}

"aggregate stddev on columns"
type vectric_products_products_stddev_fields {
    externalid: Float
    latestversion: Float
    productID: Float
    type: Float
    upgradefromtypeid: Float
}

"aggregate stddev_pop on columns"
type vectric_products_products_stddev_pop_fields {
    externalid: Float
    latestversion: Float
    productID: Float
    type: Float
    upgradefromtypeid: Float
}

"aggregate stddev_samp on columns"
type vectric_products_products_stddev_samp_fields {
    externalid: Float
    latestversion: Float
    productID: Float
    type: Float
    upgradefromtypeid: Float
}

"aggregate sum on columns"
type vectric_products_products_sum_fields {
    externalid: bigint
    latestversion: bigint
    productID: bigint
    type: bigint
    upgradefromtypeid: bigint
}

"aggregate var_pop on columns"
type vectric_products_products_var_pop_fields {
    externalid: Float
    latestversion: Float
    productID: Float
    type: Float
    upgradefromtypeid: Float
}

"aggregate var_samp on columns"
type vectric_products_products_var_samp_fields {
    externalid: Float
    latestversion: Float
    productID: Float
    type: Float
    upgradefromtypeid: Float
}

"aggregate variance on columns"
type vectric_products_products_variance_fields {
    externalid: Float
    latestversion: Float
    productID: Float
    type: Float
    upgradefromtypeid: Float
}

"columns and relationships of \"vectric.products_producttype\""
type vectric_products_producttype {
    productTypeId: bigint!
    productTypeName: String!
    "An array relationship"
    products(
        "distinct select on columns"
        distinct_on: [vectric_products_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_products_order_by!],
        "filter the rows returned"
        where: vectric_products_products_bool_exp
    ): [vectric_products_products!]!
    "An aggregate relationship"
    products_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_products_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_products_products_order_by!],
        "filter the rows returned"
        where: vectric_products_products_bool_exp
    ): vectric_products_products_aggregate!
    seq: Int
}

"aggregated selection of \"vectric.products_producttype\""
type vectric_products_producttype_aggregate {
    aggregate: vectric_products_producttype_aggregate_fields
    nodes: [vectric_products_producttype!]!
}

"aggregate fields of \"vectric.products_producttype\""
type vectric_products_producttype_aggregate_fields {
    avg: vectric_products_producttype_avg_fields
    count(columns: [vectric_products_producttype_select_column!], distinct: Boolean): Int!
    max: vectric_products_producttype_max_fields
    min: vectric_products_producttype_min_fields
    stddev: vectric_products_producttype_stddev_fields
    stddev_pop: vectric_products_producttype_stddev_pop_fields
    stddev_samp: vectric_products_producttype_stddev_samp_fields
    sum: vectric_products_producttype_sum_fields
    var_pop: vectric_products_producttype_var_pop_fields
    var_samp: vectric_products_producttype_var_samp_fields
    variance: vectric_products_producttype_variance_fields
}

"aggregate avg on columns"
type vectric_products_producttype_avg_fields {
    productTypeId: Float
    seq: Float
}

"aggregate max on columns"
type vectric_products_producttype_max_fields {
    productTypeId: bigint
    productTypeName: String
    seq: Int
}

"aggregate min on columns"
type vectric_products_producttype_min_fields {
    productTypeId: bigint
    productTypeName: String
    seq: Int
}

"response of any mutation on the table \"vectric.products_producttype\""
type vectric_products_producttype_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_products_producttype!]!
}

"aggregate stddev on columns"
type vectric_products_producttype_stddev_fields {
    productTypeId: Float
    seq: Float
}

"aggregate stddev_pop on columns"
type vectric_products_producttype_stddev_pop_fields {
    productTypeId: Float
    seq: Float
}

"aggregate stddev_samp on columns"
type vectric_products_producttype_stddev_samp_fields {
    productTypeId: Float
    seq: Float
}

"aggregate sum on columns"
type vectric_products_producttype_sum_fields {
    productTypeId: bigint
    seq: Int
}

"aggregate var_pop on columns"
type vectric_products_producttype_var_pop_fields {
    productTypeId: Float
    seq: Float
}

"aggregate var_samp on columns"
type vectric_products_producttype_var_samp_fields {
    productTypeId: Float
    seq: Float
}

"aggregate variance on columns"
type vectric_products_producttype_variance_fields {
    productTypeId: Float
    seq: Float
}

"columns and relationships of \"vectric.products_upgrade_eligibility\""
type vectric_products_upgrade_eligibility {
    eligibilityid: bigint!
    fastspringproductid: String!
    fastspringurl: String!
    fromtype: bigint!
    maxmajorversion: bigint!
    minmajorversion: bigint!
    price: numeric!
    "An object relationship"
    productsUpgradeFromType: vectric_products_producttype!
    "An object relationship"
    productsUpgradeToProduct: vectric_products_products!
    summary: String
    toproduct: bigint!
    updatelink: String
    visibletocustomers: Boolean!
    visibletostaff: Boolean!
}

"aggregated selection of \"vectric.products_upgrade_eligibility\""
type vectric_products_upgrade_eligibility_aggregate {
    aggregate: vectric_products_upgrade_eligibility_aggregate_fields
    nodes: [vectric_products_upgrade_eligibility!]!
}

"aggregate fields of \"vectric.products_upgrade_eligibility\""
type vectric_products_upgrade_eligibility_aggregate_fields {
    avg: vectric_products_upgrade_eligibility_avg_fields
    count(columns: [vectric_products_upgrade_eligibility_select_column!], distinct: Boolean): Int!
    max: vectric_products_upgrade_eligibility_max_fields
    min: vectric_products_upgrade_eligibility_min_fields
    stddev: vectric_products_upgrade_eligibility_stddev_fields
    stddev_pop: vectric_products_upgrade_eligibility_stddev_pop_fields
    stddev_samp: vectric_products_upgrade_eligibility_stddev_samp_fields
    sum: vectric_products_upgrade_eligibility_sum_fields
    var_pop: vectric_products_upgrade_eligibility_var_pop_fields
    var_samp: vectric_products_upgrade_eligibility_var_samp_fields
    variance: vectric_products_upgrade_eligibility_variance_fields
}

"aggregate avg on columns"
type vectric_products_upgrade_eligibility_avg_fields {
    eligibilityid: Float
    fromtype: Float
    maxmajorversion: Float
    minmajorversion: Float
    price: Float
    toproduct: Float
}

"aggregate max on columns"
type vectric_products_upgrade_eligibility_max_fields {
    eligibilityid: bigint
    fastspringproductid: String
    fastspringurl: String
    fromtype: bigint
    maxmajorversion: bigint
    minmajorversion: bigint
    price: numeric
    summary: String
    toproduct: bigint
    updatelink: String
}

"aggregate min on columns"
type vectric_products_upgrade_eligibility_min_fields {
    eligibilityid: bigint
    fastspringproductid: String
    fastspringurl: String
    fromtype: bigint
    maxmajorversion: bigint
    minmajorversion: bigint
    price: numeric
    summary: String
    toproduct: bigint
    updatelink: String
}

"response of any mutation on the table \"vectric.products_upgrade_eligibility\""
type vectric_products_upgrade_eligibility_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_products_upgrade_eligibility!]!
}

"aggregate stddev on columns"
type vectric_products_upgrade_eligibility_stddev_fields {
    eligibilityid: Float
    fromtype: Float
    maxmajorversion: Float
    minmajorversion: Float
    price: Float
    toproduct: Float
}

"aggregate stddev_pop on columns"
type vectric_products_upgrade_eligibility_stddev_pop_fields {
    eligibilityid: Float
    fromtype: Float
    maxmajorversion: Float
    minmajorversion: Float
    price: Float
    toproduct: Float
}

"aggregate stddev_samp on columns"
type vectric_products_upgrade_eligibility_stddev_samp_fields {
    eligibilityid: Float
    fromtype: Float
    maxmajorversion: Float
    minmajorversion: Float
    price: Float
    toproduct: Float
}

"aggregate sum on columns"
type vectric_products_upgrade_eligibility_sum_fields {
    eligibilityid: bigint
    fromtype: bigint
    maxmajorversion: bigint
    minmajorversion: bigint
    price: numeric
    toproduct: bigint
}

"aggregate var_pop on columns"
type vectric_products_upgrade_eligibility_var_pop_fields {
    eligibilityid: Float
    fromtype: Float
    maxmajorversion: Float
    minmajorversion: Float
    price: Float
    toproduct: Float
}

"aggregate var_samp on columns"
type vectric_products_upgrade_eligibility_var_samp_fields {
    eligibilityid: Float
    fromtype: Float
    maxmajorversion: Float
    minmajorversion: Float
    price: Float
    toproduct: Float
}

"aggregate variance on columns"
type vectric_products_upgrade_eligibility_variance_fields {
    eligibilityid: Float
    fromtype: Float
    maxmajorversion: Float
    minmajorversion: Float
    price: Float
    toproduct: Float
}

"columns and relationships of \"vectric.products_versioncodes\""
type vectric_products_versioncodes {
    displayVersion: String
    latest: Boolean!
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    notifying: Boolean
    patchurl: String
    "An object relationship"
    product: vectric_products_products
    productid: bigint
    releaseDate: date
    url: String
    versioncodeid: bigint!
    visible: Boolean!
}

"aggregated selection of \"vectric.products_versioncodes\""
type vectric_products_versioncodes_aggregate {
    aggregate: vectric_products_versioncodes_aggregate_fields
    nodes: [vectric_products_versioncodes!]!
}

"aggregate fields of \"vectric.products_versioncodes\""
type vectric_products_versioncodes_aggregate_fields {
    avg: vectric_products_versioncodes_avg_fields
    count(columns: [vectric_products_versioncodes_select_column!], distinct: Boolean): Int!
    max: vectric_products_versioncodes_max_fields
    min: vectric_products_versioncodes_min_fields
    stddev: vectric_products_versioncodes_stddev_fields
    stddev_pop: vectric_products_versioncodes_stddev_pop_fields
    stddev_samp: vectric_products_versioncodes_stddev_samp_fields
    sum: vectric_products_versioncodes_sum_fields
    var_pop: vectric_products_versioncodes_var_pop_fields
    var_samp: vectric_products_versioncodes_var_samp_fields
    variance: vectric_products_versioncodes_variance_fields
}

"aggregate avg on columns"
type vectric_products_versioncodes_avg_fields {
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    productid: Float
    versioncodeid: Float
}

"aggregate max on columns"
type vectric_products_versioncodes_max_fields {
    displayVersion: String
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    patchurl: String
    productid: bigint
    releaseDate: date
    url: String
    versioncodeid: bigint
}

"aggregate min on columns"
type vectric_products_versioncodes_min_fields {
    displayVersion: String
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    patchurl: String
    productid: bigint
    releaseDate: date
    url: String
    versioncodeid: bigint
}

"response of any mutation on the table \"vectric.products_versioncodes\""
type vectric_products_versioncodes_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_products_versioncodes!]!
}

"aggregate stddev on columns"
type vectric_products_versioncodes_stddev_fields {
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    productid: Float
    versioncodeid: Float
}

"aggregate stddev_pop on columns"
type vectric_products_versioncodes_stddev_pop_fields {
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    productid: Float
    versioncodeid: Float
}

"aggregate stddev_samp on columns"
type vectric_products_versioncodes_stddev_samp_fields {
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    productid: Float
    versioncodeid: Float
}

"aggregate sum on columns"
type vectric_products_versioncodes_sum_fields {
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    productid: bigint
    versioncodeid: bigint
}

"aggregate var_pop on columns"
type vectric_products_versioncodes_var_pop_fields {
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    productid: Float
    versioncodeid: Float
}

"aggregate var_samp on columns"
type vectric_products_versioncodes_var_samp_fields {
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    productid: Float
    versioncodeid: Float
}

"aggregate variance on columns"
type vectric_products_versioncodes_variance_fields {
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    productid: Float
    versioncodeid: Float
}

"columns and relationships of \"vectric.questions\""
type vectric_questions {
    "An array relationship"
    customer_responses(
        "distinct select on columns"
        distinct_on: [vectric_customer_responses_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_responses_order_by!],
        "filter the rows returned"
        where: vectric_customer_responses_bool_exp
    ): [vectric_customer_responses!]!
    "An aggregate relationship"
    customer_responses_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_customer_responses_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_responses_order_by!],
        "filter the rows returned"
        where: vectric_customer_responses_bool_exp
    ): vectric_customer_responses_aggregate!
    multipleanswers: Boolean
    questionid: bigint!
    questiontext: String
    "fetch data from the table: \"vectric.responses\""
    responses(
        "distinct select on columns"
        distinct_on: [vectric_responses_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_responses_order_by!],
        "filter the rows returned"
        where: vectric_responses_bool_exp
    ): [vectric_responses!]!
    "fetch aggregated fields from the table: \"vectric.responses\""
    responses_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_responses_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_responses_order_by!],
        "filter the rows returned"
        where: vectric_responses_bool_exp
    ): vectric_responses_aggregate!
}

"aggregated selection of \"vectric.questions\""
type vectric_questions_aggregate {
    aggregate: vectric_questions_aggregate_fields
    nodes: [vectric_questions!]!
}

"aggregate fields of \"vectric.questions\""
type vectric_questions_aggregate_fields {
    avg: vectric_questions_avg_fields
    count(columns: [vectric_questions_select_column!], distinct: Boolean): Int!
    max: vectric_questions_max_fields
    min: vectric_questions_min_fields
    stddev: vectric_questions_stddev_fields
    stddev_pop: vectric_questions_stddev_pop_fields
    stddev_samp: vectric_questions_stddev_samp_fields
    sum: vectric_questions_sum_fields
    var_pop: vectric_questions_var_pop_fields
    var_samp: vectric_questions_var_samp_fields
    variance: vectric_questions_variance_fields
}

"aggregate avg on columns"
type vectric_questions_avg_fields {
    questionid: Float
}

"aggregate max on columns"
type vectric_questions_max_fields {
    questionid: bigint
    questiontext: String
}

"aggregate min on columns"
type vectric_questions_min_fields {
    questionid: bigint
    questiontext: String
}

"response of any mutation on the table \"vectric.questions\""
type vectric_questions_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_questions!]!
}

"aggregate stddev on columns"
type vectric_questions_stddev_fields {
    questionid: Float
}

"aggregate stddev_pop on columns"
type vectric_questions_stddev_pop_fields {
    questionid: Float
}

"aggregate stddev_samp on columns"
type vectric_questions_stddev_samp_fields {
    questionid: Float
}

"aggregate sum on columns"
type vectric_questions_sum_fields {
    questionid: bigint
}

"aggregate var_pop on columns"
type vectric_questions_var_pop_fields {
    questionid: Float
}

"aggregate var_samp on columns"
type vectric_questions_var_samp_fields {
    questionid: Float
}

"aggregate variance on columns"
type vectric_questions_variance_fields {
    questionid: Float
}

"columns and relationships of \"vectric.responses\""
type vectric_responses {
    questionid: bigint!
    responseid: bigint!
    responsetext: String
}

"aggregated selection of \"vectric.responses\""
type vectric_responses_aggregate {
    aggregate: vectric_responses_aggregate_fields
    nodes: [vectric_responses!]!
}

"aggregate fields of \"vectric.responses\""
type vectric_responses_aggregate_fields {
    avg: vectric_responses_avg_fields
    count(columns: [vectric_responses_select_column!], distinct: Boolean): Int!
    max: vectric_responses_max_fields
    min: vectric_responses_min_fields
    stddev: vectric_responses_stddev_fields
    stddev_pop: vectric_responses_stddev_pop_fields
    stddev_samp: vectric_responses_stddev_samp_fields
    sum: vectric_responses_sum_fields
    var_pop: vectric_responses_var_pop_fields
    var_samp: vectric_responses_var_samp_fields
    variance: vectric_responses_variance_fields
}

"aggregate avg on columns"
type vectric_responses_avg_fields {
    questionid: Float
    responseid: Float
}

"aggregate max on columns"
type vectric_responses_max_fields {
    questionid: bigint
    responseid: bigint
    responsetext: String
}

"aggregate min on columns"
type vectric_responses_min_fields {
    questionid: bigint
    responseid: bigint
    responsetext: String
}

"response of any mutation on the table \"vectric.responses\""
type vectric_responses_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_responses!]!
}

"aggregate stddev on columns"
type vectric_responses_stddev_fields {
    questionid: Float
    responseid: Float
}

"aggregate stddev_pop on columns"
type vectric_responses_stddev_pop_fields {
    questionid: Float
    responseid: Float
}

"aggregate stddev_samp on columns"
type vectric_responses_stddev_samp_fields {
    questionid: Float
    responseid: Float
}

"aggregate sum on columns"
type vectric_responses_sum_fields {
    questionid: bigint
    responseid: bigint
}

"aggregate var_pop on columns"
type vectric_responses_var_pop_fields {
    questionid: Float
    responseid: Float
}

"aggregate var_samp on columns"
type vectric_responses_var_samp_fields {
    questionid: Float
    responseid: Float
}

"aggregate variance on columns"
type vectric_responses_variance_fields {
    questionid: Float
    responseid: Float
}

"columns and relationships of \"vectric.saleable_products\""
type vectric_saleable_products {
    enabled: Boolean
    fastspringId: String
    free: Boolean
    media: Boolean
    productId: Int!
    productName: String!
    productTypeId: Int!
    receivesClipart: Boolean
    subscription: Boolean
}

"aggregated selection of \"vectric.saleable_products\""
type vectric_saleable_products_aggregate {
    aggregate: vectric_saleable_products_aggregate_fields
    nodes: [vectric_saleable_products!]!
}

"aggregate fields of \"vectric.saleable_products\""
type vectric_saleable_products_aggregate_fields {
    avg: vectric_saleable_products_avg_fields
    count(columns: [vectric_saleable_products_select_column!], distinct: Boolean): Int!
    max: vectric_saleable_products_max_fields
    min: vectric_saleable_products_min_fields
    stddev: vectric_saleable_products_stddev_fields
    stddev_pop: vectric_saleable_products_stddev_pop_fields
    stddev_samp: vectric_saleable_products_stddev_samp_fields
    sum: vectric_saleable_products_sum_fields
    var_pop: vectric_saleable_products_var_pop_fields
    var_samp: vectric_saleable_products_var_samp_fields
    variance: vectric_saleable_products_variance_fields
}

"aggregate avg on columns"
type vectric_saleable_products_avg_fields {
    productId: Float
    productTypeId: Float
}

"aggregate max on columns"
type vectric_saleable_products_max_fields {
    fastspringId: String
    productId: Int
    productName: String
    productTypeId: Int
}

"aggregate min on columns"
type vectric_saleable_products_min_fields {
    fastspringId: String
    productId: Int
    productName: String
    productTypeId: Int
}

"response of any mutation on the table \"vectric.saleable_products\""
type vectric_saleable_products_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_saleable_products!]!
}

"aggregate stddev on columns"
type vectric_saleable_products_stddev_fields {
    productId: Float
    productTypeId: Float
}

"aggregate stddev_pop on columns"
type vectric_saleable_products_stddev_pop_fields {
    productId: Float
    productTypeId: Float
}

"aggregate stddev_samp on columns"
type vectric_saleable_products_stddev_samp_fields {
    productId: Float
    productTypeId: Float
}

"aggregate sum on columns"
type vectric_saleable_products_sum_fields {
    productId: Int
    productTypeId: Int
}

"aggregate var_pop on columns"
type vectric_saleable_products_var_pop_fields {
    productId: Float
    productTypeId: Float
}

"aggregate var_samp on columns"
type vectric_saleable_products_var_samp_fields {
    productId: Float
    productTypeId: Float
}

"aggregate variance on columns"
type vectric_saleable_products_variance_fields {
    productId: Float
    productTypeId: Float
}

"columns and relationships of \"vectric.sales_customer_downloads\""
type vectric_sales_customer_downloads {
    customerId: bigint
    downloadDate: timestamptz
    downloadId: bigint!
    fulfilmentId: bigint
    ipAddress: String
}

"aggregated selection of \"vectric.sales_customer_downloads\""
type vectric_sales_customer_downloads_aggregate {
    aggregate: vectric_sales_customer_downloads_aggregate_fields
    nodes: [vectric_sales_customer_downloads!]!
}

"aggregate fields of \"vectric.sales_customer_downloads\""
type vectric_sales_customer_downloads_aggregate_fields {
    avg: vectric_sales_customer_downloads_avg_fields
    count(columns: [vectric_sales_customer_downloads_select_column!], distinct: Boolean): Int!
    max: vectric_sales_customer_downloads_max_fields
    min: vectric_sales_customer_downloads_min_fields
    stddev: vectric_sales_customer_downloads_stddev_fields
    stddev_pop: vectric_sales_customer_downloads_stddev_pop_fields
    stddev_samp: vectric_sales_customer_downloads_stddev_samp_fields
    sum: vectric_sales_customer_downloads_sum_fields
    var_pop: vectric_sales_customer_downloads_var_pop_fields
    var_samp: vectric_sales_customer_downloads_var_samp_fields
    variance: vectric_sales_customer_downloads_variance_fields
}

"aggregate avg on columns"
type vectric_sales_customer_downloads_avg_fields {
    customerId: Float
    downloadId: Float
    fulfilmentId: Float
}

"aggregate max on columns"
type vectric_sales_customer_downloads_max_fields {
    customerId: bigint
    downloadDate: timestamptz
    downloadId: bigint
    fulfilmentId: bigint
    ipAddress: String
}

"aggregate min on columns"
type vectric_sales_customer_downloads_min_fields {
    customerId: bigint
    downloadDate: timestamptz
    downloadId: bigint
    fulfilmentId: bigint
    ipAddress: String
}

"response of any mutation on the table \"vectric.sales_customer_downloads\""
type vectric_sales_customer_downloads_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_sales_customer_downloads!]!
}

"aggregate stddev on columns"
type vectric_sales_customer_downloads_stddev_fields {
    customerId: Float
    downloadId: Float
    fulfilmentId: Float
}

"aggregate stddev_pop on columns"
type vectric_sales_customer_downloads_stddev_pop_fields {
    customerId: Float
    downloadId: Float
    fulfilmentId: Float
}

"aggregate stddev_samp on columns"
type vectric_sales_customer_downloads_stddev_samp_fields {
    customerId: Float
    downloadId: Float
    fulfilmentId: Float
}

"aggregate sum on columns"
type vectric_sales_customer_downloads_sum_fields {
    customerId: bigint
    downloadId: bigint
    fulfilmentId: bigint
}

"aggregate var_pop on columns"
type vectric_sales_customer_downloads_var_pop_fields {
    customerId: Float
    downloadId: Float
    fulfilmentId: Float
}

"aggregate var_samp on columns"
type vectric_sales_customer_downloads_var_samp_fields {
    customerId: Float
    downloadId: Float
    fulfilmentId: Float
}

"aggregate variance on columns"
type vectric_sales_customer_downloads_variance_fields {
    customerId: Float
    downloadId: Float
    fulfilmentId: Float
}

"columns and relationships of \"vectric.sales_customers\""
type vectric_sales_customers {
    acceptedTerms: Boolean!
    amendedby: String
    companyName: String
    "An object relationship"
    country: vectric_countries
    countrycode: bigint
    createdby: String
    customerAddressLine: String
    customerId: bigint!
    customerName: String
    "An array relationship"
    customerSales(
        "distinct select on columns"
        distinct_on: [vectric_customer_sales_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_sales_order_by!],
        "filter the rows returned"
        where: vectric_customer_sales_bool_exp
    ): [vectric_customer_sales!]!
    "An aggregate relationship"
    customerSales_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_customer_sales_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_customer_sales_order_by!],
        "filter the rows returned"
        where: vectric_customer_sales_bool_exp
    ): vectric_customer_sales_aggregate!
    customerTelephone: String
    customerType: String!
    customerstatusid: bigint!
    customeruuid: uuid!
    dateAcceptedTerms: timestamptz
    dateCreated: timestamptz
    dateMarketingConsentUpdated: timestamptz
    dateUpgradeEmailConsentUpdates: timestamptz
    dateamended: timestamptz
    email: String!
    "An array relationship"
    freeClipartTokens(
        "distinct select on columns"
        distinct_on: [vectric_free_clipart_tokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_free_clipart_tokens_order_by!],
        "filter the rows returned"
        where: vectric_free_clipart_tokens_bool_exp
    ): [vectric_free_clipart_tokens!]!
    "An aggregate relationship"
    freeClipartTokens_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_free_clipart_tokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_free_clipart_tokens_order_by!],
        "filter the rows returned"
        where: vectric_free_clipart_tokens_bool_exp
    ): vectric_free_clipart_tokens_aggregate!
    language: String
    lastLogin: timestamptz
    lastipaddress: String
    location: String
    "An array relationship"
    memberships(
        "distinct select on columns"
        distinct_on: [vectric_group_user_role_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_group_user_role_order_by!],
        "filter the rows returned"
        where: vectric_group_user_role_bool_exp
    ): [vectric_group_user_role!]!
    "An aggregate relationship"
    memberships_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_group_user_role_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_group_user_role_order_by!],
        "filter the rows returned"
        where: vectric_group_user_role_bool_exp
    ): vectric_group_user_role_aggregate!
    mergedfromcustomerid: bigint
    mergedtocustomerid: bigint
    notes: String
    "An array relationship"
    orders(
        "distinct select on columns"
        distinct_on: [vectric_sales_orders_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_orders_order_by!],
        "filter the rows returned"
        where: vectric_sales_orders_bool_exp
    ): [vectric_sales_orders!]!
    "An aggregate relationship"
    orders_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_orders_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_orders_order_by!],
        "filter the rows returned"
        where: vectric_sales_orders_bool_exp
    ): vectric_sales_orders_aggregate!
    "An array relationship"
    organizationMemberships(
        "distinct select on columns"
        distinct_on: [vectric_memberships_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_memberships_order_by!],
        "filter the rows returned"
        where: vectric_memberships_bool_exp
    ): [vectric_memberships!]!
    "An aggregate relationship"
    organizationMemberships_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_memberships_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_memberships_order_by!],
        "filter the rows returned"
        where: vectric_memberships_bool_exp
    ): vectric_memberships_aggregate!
    "An array relationship"
    partnerMemberships(
        "distinct select on columns"
        distinct_on: [vectric_oem_staff_customer_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_staff_customer_order_by!],
        "filter the rows returned"
        where: vectric_oem_staff_customer_bool_exp
    ): [vectric_oem_staff_customer!]!
    "An aggregate relationship"
    partnerMemberships_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_oem_staff_customer_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_oem_staff_customer_order_by!],
        "filter the rows returned"
        where: vectric_oem_staff_customer_bool_exp
    ): vectric_oem_staff_customer_aggregate!
    receivingMarketingEmails: Boolean!
    receivingUpgradeEmails: Boolean!
    registeredUsername: String!
    "An object relationship"
    user: vectric_security_users
    verified: Boolean!
}

"aggregated selection of \"vectric.sales_customers\""
type vectric_sales_customers_aggregate {
    aggregate: vectric_sales_customers_aggregate_fields
    nodes: [vectric_sales_customers!]!
}

"aggregate fields of \"vectric.sales_customers\""
type vectric_sales_customers_aggregate_fields {
    avg: vectric_sales_customers_avg_fields
    count(columns: [vectric_sales_customers_select_column!], distinct: Boolean): Int!
    max: vectric_sales_customers_max_fields
    min: vectric_sales_customers_min_fields
    stddev: vectric_sales_customers_stddev_fields
    stddev_pop: vectric_sales_customers_stddev_pop_fields
    stddev_samp: vectric_sales_customers_stddev_samp_fields
    sum: vectric_sales_customers_sum_fields
    var_pop: vectric_sales_customers_var_pop_fields
    var_samp: vectric_sales_customers_var_samp_fields
    variance: vectric_sales_customers_variance_fields
}

"aggregate avg on columns"
type vectric_sales_customers_avg_fields {
    countrycode: Float
    customerId: Float
    customerstatusid: Float
    mergedfromcustomerid: Float
    mergedtocustomerid: Float
}

"aggregate max on columns"
type vectric_sales_customers_max_fields {
    amendedby: String
    companyName: String
    countrycode: bigint
    createdby: String
    customerAddressLine: String
    customerId: bigint
    customerName: String
    customerTelephone: String
    customerType: String
    customerstatusid: bigint
    customeruuid: uuid
    dateAcceptedTerms: timestamptz
    dateCreated: timestamptz
    dateMarketingConsentUpdated: timestamptz
    dateUpgradeEmailConsentUpdates: timestamptz
    dateamended: timestamptz
    email: String
    language: String
    lastLogin: timestamptz
    lastipaddress: String
    location: String
    mergedfromcustomerid: bigint
    mergedtocustomerid: bigint
    notes: String
    registeredUsername: String
}

"aggregate min on columns"
type vectric_sales_customers_min_fields {
    amendedby: String
    companyName: String
    countrycode: bigint
    createdby: String
    customerAddressLine: String
    customerId: bigint
    customerName: String
    customerTelephone: String
    customerType: String
    customerstatusid: bigint
    customeruuid: uuid
    dateAcceptedTerms: timestamptz
    dateCreated: timestamptz
    dateMarketingConsentUpdated: timestamptz
    dateUpgradeEmailConsentUpdates: timestamptz
    dateamended: timestamptz
    email: String
    language: String
    lastLogin: timestamptz
    lastipaddress: String
    location: String
    mergedfromcustomerid: bigint
    mergedtocustomerid: bigint
    notes: String
    registeredUsername: String
}

"response of any mutation on the table \"vectric.sales_customers\""
type vectric_sales_customers_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_sales_customers!]!
}

"aggregate stddev on columns"
type vectric_sales_customers_stddev_fields {
    countrycode: Float
    customerId: Float
    customerstatusid: Float
    mergedfromcustomerid: Float
    mergedtocustomerid: Float
}

"aggregate stddev_pop on columns"
type vectric_sales_customers_stddev_pop_fields {
    countrycode: Float
    customerId: Float
    customerstatusid: Float
    mergedfromcustomerid: Float
    mergedtocustomerid: Float
}

"aggregate stddev_samp on columns"
type vectric_sales_customers_stddev_samp_fields {
    countrycode: Float
    customerId: Float
    customerstatusid: Float
    mergedfromcustomerid: Float
    mergedtocustomerid: Float
}

"aggregate sum on columns"
type vectric_sales_customers_sum_fields {
    countrycode: bigint
    customerId: bigint
    customerstatusid: bigint
    mergedfromcustomerid: bigint
    mergedtocustomerid: bigint
}

"aggregate var_pop on columns"
type vectric_sales_customers_var_pop_fields {
    countrycode: Float
    customerId: Float
    customerstatusid: Float
    mergedfromcustomerid: Float
    mergedtocustomerid: Float
}

"aggregate var_samp on columns"
type vectric_sales_customers_var_samp_fields {
    countrycode: Float
    customerId: Float
    customerstatusid: Float
    mergedfromcustomerid: Float
    mergedtocustomerid: Float
}

"aggregate variance on columns"
type vectric_sales_customers_variance_fields {
    countrycode: Float
    customerId: Float
    customerstatusid: Float
    mergedfromcustomerid: Float
    mergedtocustomerid: Float
}

"columns and relationships of \"vectric.sales_customerupdates\""
type vectric_sales_customerupdates {
    changedBy: String
    customerId: bigint!
    customerUpdateId: bigint!
    dateChanged: timestamptz!
    fieldName: String!
    newValue: String!
    oldValue: String
}

"aggregated selection of \"vectric.sales_customerupdates\""
type vectric_sales_customerupdates_aggregate {
    aggregate: vectric_sales_customerupdates_aggregate_fields
    nodes: [vectric_sales_customerupdates!]!
}

"aggregate fields of \"vectric.sales_customerupdates\""
type vectric_sales_customerupdates_aggregate_fields {
    avg: vectric_sales_customerupdates_avg_fields
    count(columns: [vectric_sales_customerupdates_select_column!], distinct: Boolean): Int!
    max: vectric_sales_customerupdates_max_fields
    min: vectric_sales_customerupdates_min_fields
    stddev: vectric_sales_customerupdates_stddev_fields
    stddev_pop: vectric_sales_customerupdates_stddev_pop_fields
    stddev_samp: vectric_sales_customerupdates_stddev_samp_fields
    sum: vectric_sales_customerupdates_sum_fields
    var_pop: vectric_sales_customerupdates_var_pop_fields
    var_samp: vectric_sales_customerupdates_var_samp_fields
    variance: vectric_sales_customerupdates_variance_fields
}

"aggregate avg on columns"
type vectric_sales_customerupdates_avg_fields {
    customerId: Float
    customerUpdateId: Float
}

"aggregate max on columns"
type vectric_sales_customerupdates_max_fields {
    changedBy: String
    customerId: bigint
    customerUpdateId: bigint
    dateChanged: timestamptz
    fieldName: String
    newValue: String
    oldValue: String
}

"aggregate min on columns"
type vectric_sales_customerupdates_min_fields {
    changedBy: String
    customerId: bigint
    customerUpdateId: bigint
    dateChanged: timestamptz
    fieldName: String
    newValue: String
    oldValue: String
}

"response of any mutation on the table \"vectric.sales_customerupdates\""
type vectric_sales_customerupdates_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_sales_customerupdates!]!
}

"aggregate stddev on columns"
type vectric_sales_customerupdates_stddev_fields {
    customerId: Float
    customerUpdateId: Float
}

"aggregate stddev_pop on columns"
type vectric_sales_customerupdates_stddev_pop_fields {
    customerId: Float
    customerUpdateId: Float
}

"aggregate stddev_samp on columns"
type vectric_sales_customerupdates_stddev_samp_fields {
    customerId: Float
    customerUpdateId: Float
}

"aggregate sum on columns"
type vectric_sales_customerupdates_sum_fields {
    customerId: bigint
    customerUpdateId: bigint
}

"aggregate var_pop on columns"
type vectric_sales_customerupdates_var_pop_fields {
    customerId: Float
    customerUpdateId: Float
}

"aggregate var_samp on columns"
type vectric_sales_customerupdates_var_samp_fields {
    customerId: Float
    customerUpdateId: Float
}

"aggregate variance on columns"
type vectric_sales_customerupdates_variance_fields {
    customerId: Float
    customerUpdateId: Float
}

"columns and relationships of \"vectric.sales_oem_bundles\""
type vectric_sales_oem_bundles {
    allocatedBy: String
    allocationBatch: String
    "An object relationship"
    allocationType: vectric_oem_licence_allocation_type!
    allocationTypeId: bigint!
    bundleId: String!
    dateAllocated: timestamptz
    dateCreated: timestamptz!
    "An array relationship"
    licences(
        "distinct select on columns"
        distinct_on: [vectric_sales_oemlicences_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_oemlicences_order_by!],
        "filter the rows returned"
        where: vectric_sales_oemlicences_bool_exp
    ): [vectric_sales_oemlicences!]!
    "An aggregate relationship"
    licences_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_oemlicences_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_oemlicences_order_by!],
        "filter the rows returned"
        where: vectric_sales_oemlicences_bool_exp
    ): vectric_sales_oemlicences_aggregate!
    notes: String
    "An object relationship"
    partner: vectric_oem_partners
    partnerId: bigint!
    product: bigint!
    productDisplayName: String
    registrationDate: timestamptz
    typeDisplayName: String
}

"aggregated selection of \"vectric.sales_oem_bundles\""
type vectric_sales_oem_bundles_aggregate {
    aggregate: vectric_sales_oem_bundles_aggregate_fields
    nodes: [vectric_sales_oem_bundles!]!
}

"aggregate fields of \"vectric.sales_oem_bundles\""
type vectric_sales_oem_bundles_aggregate_fields {
    avg: vectric_sales_oem_bundles_avg_fields
    count(columns: [vectric_sales_oem_bundles_select_column!], distinct: Boolean): Int!
    max: vectric_sales_oem_bundles_max_fields
    min: vectric_sales_oem_bundles_min_fields
    stddev: vectric_sales_oem_bundles_stddev_fields
    stddev_pop: vectric_sales_oem_bundles_stddev_pop_fields
    stddev_samp: vectric_sales_oem_bundles_stddev_samp_fields
    sum: vectric_sales_oem_bundles_sum_fields
    var_pop: vectric_sales_oem_bundles_var_pop_fields
    var_samp: vectric_sales_oem_bundles_var_samp_fields
    variance: vectric_sales_oem_bundles_variance_fields
}

"aggregate avg on columns"
type vectric_sales_oem_bundles_avg_fields {
    allocationTypeId: Float
    partnerId: Float
    product: Float
}

"aggregate max on columns"
type vectric_sales_oem_bundles_max_fields {
    allocatedBy: String
    allocationBatch: String
    allocationTypeId: bigint
    bundleId: String
    dateAllocated: timestamptz
    dateCreated: timestamptz
    notes: String
    partnerId: bigint
    product: bigint
    productDisplayName: String
    registrationDate: timestamptz
    typeDisplayName: String
}

"aggregate min on columns"
type vectric_sales_oem_bundles_min_fields {
    allocatedBy: String
    allocationBatch: String
    allocationTypeId: bigint
    bundleId: String
    dateAllocated: timestamptz
    dateCreated: timestamptz
    notes: String
    partnerId: bigint
    product: bigint
    productDisplayName: String
    registrationDate: timestamptz
    typeDisplayName: String
}

"response of any mutation on the table \"vectric.sales_oem_bundles\""
type vectric_sales_oem_bundles_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_sales_oem_bundles!]!
}

"aggregate stddev on columns"
type vectric_sales_oem_bundles_stddev_fields {
    allocationTypeId: Float
    partnerId: Float
    product: Float
}

"aggregate stddev_pop on columns"
type vectric_sales_oem_bundles_stddev_pop_fields {
    allocationTypeId: Float
    partnerId: Float
    product: Float
}

"aggregate stddev_samp on columns"
type vectric_sales_oem_bundles_stddev_samp_fields {
    allocationTypeId: Float
    partnerId: Float
    product: Float
}

"aggregate sum on columns"
type vectric_sales_oem_bundles_sum_fields {
    allocationTypeId: bigint
    partnerId: bigint
    product: bigint
}

"aggregate var_pop on columns"
type vectric_sales_oem_bundles_var_pop_fields {
    allocationTypeId: Float
    partnerId: Float
    product: Float
}

"aggregate var_samp on columns"
type vectric_sales_oem_bundles_var_samp_fields {
    allocationTypeId: Float
    partnerId: Float
    product: Float
}

"aggregate variance on columns"
type vectric_sales_oem_bundles_variance_fields {
    allocationTypeId: Float
    partnerId: Float
    product: Float
}

"columns and relationships of \"vectric.sales_oemlicences\""
type vectric_sales_oemlicences {
    allocatedBy: String
    "An object relationship"
    allocationType: vectric_oem_licence_allocation_type!
    allocationTypeId: bigint!
    dateAllocated: timestamptz
    dateCreated: timestamptz!
    disabled: Boolean
    licenceCode: String!
    "An array relationship"
    licenceLogRows(
        "distinct select on columns"
        distinct_on: [vectric_licence_log_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_licence_log_order_by!],
        "filter the rows returned"
        where: vectric_licence_log_bool_exp
    ): [vectric_licence_log!]!
    "An aggregate relationship"
    licenceLogRows_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_licence_log_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_licence_log_order_by!],
        "filter the rows returned"
        where: vectric_licence_log_bool_exp
    ): vectric_licence_log_aggregate!
    mediaProvided: Boolean
    oemBundleId: String!
    oemLicenceId: bigint!
    orderItemProductId: bigint
    "An object relationship"
    partner: vectric_oem_partners
    partnerId: bigint
    productId: bigint
    productName: String!
    registrationDate: timestamptz
    saleItemId: bigint
    version: smallint!
}

"aggregated selection of \"vectric.sales_oemlicences\""
type vectric_sales_oemlicences_aggregate {
    aggregate: vectric_sales_oemlicences_aggregate_fields
    nodes: [vectric_sales_oemlicences!]!
}

"aggregate fields of \"vectric.sales_oemlicences\""
type vectric_sales_oemlicences_aggregate_fields {
    avg: vectric_sales_oemlicences_avg_fields
    count(columns: [vectric_sales_oemlicences_select_column!], distinct: Boolean): Int!
    max: vectric_sales_oemlicences_max_fields
    min: vectric_sales_oemlicences_min_fields
    stddev: vectric_sales_oemlicences_stddev_fields
    stddev_pop: vectric_sales_oemlicences_stddev_pop_fields
    stddev_samp: vectric_sales_oemlicences_stddev_samp_fields
    sum: vectric_sales_oemlicences_sum_fields
    var_pop: vectric_sales_oemlicences_var_pop_fields
    var_samp: vectric_sales_oemlicences_var_samp_fields
    variance: vectric_sales_oemlicences_variance_fields
}

"aggregate avg on columns"
type vectric_sales_oemlicences_avg_fields {
    allocationTypeId: Float
    oemLicenceId: Float
    orderItemProductId: Float
    partnerId: Float
    productId: Float
    saleItemId: Float
    version: Float
}

"aggregate max on columns"
type vectric_sales_oemlicences_max_fields {
    allocatedBy: String
    allocationTypeId: bigint
    dateAllocated: timestamptz
    dateCreated: timestamptz
    licenceCode: String
    oemBundleId: String
    oemLicenceId: bigint
    orderItemProductId: bigint
    partnerId: bigint
    productId: bigint
    productName: String
    registrationDate: timestamptz
    saleItemId: bigint
    version: smallint
}

"aggregate min on columns"
type vectric_sales_oemlicences_min_fields {
    allocatedBy: String
    allocationTypeId: bigint
    dateAllocated: timestamptz
    dateCreated: timestamptz
    licenceCode: String
    oemBundleId: String
    oemLicenceId: bigint
    orderItemProductId: bigint
    partnerId: bigint
    productId: bigint
    productName: String
    registrationDate: timestamptz
    saleItemId: bigint
    version: smallint
}

"response of any mutation on the table \"vectric.sales_oemlicences\""
type vectric_sales_oemlicences_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_sales_oemlicences!]!
}

"aggregate stddev on columns"
type vectric_sales_oemlicences_stddev_fields {
    allocationTypeId: Float
    oemLicenceId: Float
    orderItemProductId: Float
    partnerId: Float
    productId: Float
    saleItemId: Float
    version: Float
}

"aggregate stddev_pop on columns"
type vectric_sales_oemlicences_stddev_pop_fields {
    allocationTypeId: Float
    oemLicenceId: Float
    orderItemProductId: Float
    partnerId: Float
    productId: Float
    saleItemId: Float
    version: Float
}

"aggregate stddev_samp on columns"
type vectric_sales_oemlicences_stddev_samp_fields {
    allocationTypeId: Float
    oemLicenceId: Float
    orderItemProductId: Float
    partnerId: Float
    productId: Float
    saleItemId: Float
    version: Float
}

"aggregate sum on columns"
type vectric_sales_oemlicences_sum_fields {
    allocationTypeId: bigint
    oemLicenceId: bigint
    orderItemProductId: bigint
    partnerId: bigint
    productId: bigint
    saleItemId: bigint
    version: smallint
}

"aggregate var_pop on columns"
type vectric_sales_oemlicences_var_pop_fields {
    allocationTypeId: Float
    oemLicenceId: Float
    orderItemProductId: Float
    partnerId: Float
    productId: Float
    saleItemId: Float
    version: Float
}

"aggregate var_samp on columns"
type vectric_sales_oemlicences_var_samp_fields {
    allocationTypeId: Float
    oemLicenceId: Float
    orderItemProductId: Float
    partnerId: Float
    productId: Float
    saleItemId: Float
    version: Float
}

"aggregate variance on columns"
type vectric_sales_oemlicences_variance_fields {
    allocationTypeId: Float
    oemLicenceId: Float
    orderItemProductId: Float
    partnerId: Float
    productId: Float
    saleItemId: Float
    version: Float
}

"columns and relationships of \"vectric.sales_orders\""
type vectric_sales_orders {
    amendedby: String
    createdby: String
    customerId: bigint!
    dateCreated: timestamptz
    dateamended: timestamptz
    mergedfromcustomerid: bigint
    orderDate: timestamptz!
    orderId: String!
    purchaser: String
    registrationemailsent: date
    salenote: String
    "An array relationship"
    salesItems(
        "distinct select on columns"
        distinct_on: [vectric_sales_salesitems_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_salesitems_order_by!],
        "filter the rows returned"
        where: vectric_sales_salesitems_bool_exp
    ): [vectric_sales_salesitems!]!
    "An aggregate relationship"
    salesItems_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_salesitems_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_salesitems_order_by!],
        "filter the rows returned"
        where: vectric_sales_salesitems_bool_exp
    ): vectric_sales_salesitems_aggregate!
    "An object relationship"
    sales_customer: vectric_sales_customers!
    salesdetails: String
    salesummary: String
    validationcomments: String
    veccode: String
}

"aggregated selection of \"vectric.sales_orders\""
type vectric_sales_orders_aggregate {
    aggregate: vectric_sales_orders_aggregate_fields
    nodes: [vectric_sales_orders!]!
}

"aggregate fields of \"vectric.sales_orders\""
type vectric_sales_orders_aggregate_fields {
    avg: vectric_sales_orders_avg_fields
    count(columns: [vectric_sales_orders_select_column!], distinct: Boolean): Int!
    max: vectric_sales_orders_max_fields
    min: vectric_sales_orders_min_fields
    stddev: vectric_sales_orders_stddev_fields
    stddev_pop: vectric_sales_orders_stddev_pop_fields
    stddev_samp: vectric_sales_orders_stddev_samp_fields
    sum: vectric_sales_orders_sum_fields
    var_pop: vectric_sales_orders_var_pop_fields
    var_samp: vectric_sales_orders_var_samp_fields
    variance: vectric_sales_orders_variance_fields
}

"aggregate avg on columns"
type vectric_sales_orders_avg_fields {
    customerId: Float
    mergedfromcustomerid: Float
}

"aggregate max on columns"
type vectric_sales_orders_max_fields {
    amendedby: String
    createdby: String
    customerId: bigint
    dateCreated: timestamptz
    dateamended: timestamptz
    mergedfromcustomerid: bigint
    orderDate: timestamptz
    orderId: String
    purchaser: String
    registrationemailsent: date
    salenote: String
    salesdetails: String
    salesummary: String
    validationcomments: String
    veccode: String
}

"aggregate min on columns"
type vectric_sales_orders_min_fields {
    amendedby: String
    createdby: String
    customerId: bigint
    dateCreated: timestamptz
    dateamended: timestamptz
    mergedfromcustomerid: bigint
    orderDate: timestamptz
    orderId: String
    purchaser: String
    registrationemailsent: date
    salenote: String
    salesdetails: String
    salesummary: String
    validationcomments: String
    veccode: String
}

"response of any mutation on the table \"vectric.sales_orders\""
type vectric_sales_orders_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_sales_orders!]!
}

"aggregate stddev on columns"
type vectric_sales_orders_stddev_fields {
    customerId: Float
    mergedfromcustomerid: Float
}

"aggregate stddev_pop on columns"
type vectric_sales_orders_stddev_pop_fields {
    customerId: Float
    mergedfromcustomerid: Float
}

"aggregate stddev_samp on columns"
type vectric_sales_orders_stddev_samp_fields {
    customerId: Float
    mergedfromcustomerid: Float
}

"aggregate sum on columns"
type vectric_sales_orders_sum_fields {
    customerId: bigint
    mergedfromcustomerid: bigint
}

"aggregate var_pop on columns"
type vectric_sales_orders_var_pop_fields {
    customerId: Float
    mergedfromcustomerid: Float
}

"aggregate var_samp on columns"
type vectric_sales_orders_var_samp_fields {
    customerId: Float
    mergedfromcustomerid: Float
}

"aggregate variance on columns"
type vectric_sales_orders_variance_fields {
    customerId: Float
    mergedfromcustomerid: Float
}

"columns and relationships of \"vectric.sales_salesitem_products\""
type vectric_sales_salesitem_products {
    "An array relationship"
    addOns(
        "distinct select on columns"
        distinct_on: [vectric_sales_salesitem_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_salesitem_products_order_by!],
        "filter the rows returned"
        where: vectric_sales_salesitem_products_bool_exp
    ): [vectric_sales_salesitem_products!]!
    "An aggregate relationship"
    addOns_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_salesitem_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_salesitem_products_order_by!],
        "filter the rows returned"
        where: vectric_sales_salesitem_products_bool_exp
    ): vectric_sales_salesitem_products_aggregate!
    amended: timestamptz
    amendedby: String
    emailsubject: String
    "An object relationship"
    enhanceSalesItemProduct: vectric_sales_salesitem_products
    "An array relationship"
    enhancementTokens(
        "distinct select on columns"
        distinct_on: [vectric_enhancement_tokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_enhancement_tokens_order_by!],
        "filter the rows returned"
        where: vectric_enhancement_tokens_bool_exp
    ): [vectric_enhancement_tokens!]!
    "An aggregate relationship"
    enhancementTokens_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_enhancement_tokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_enhancement_tokens_order_by!],
        "filter the rows returned"
        where: vectric_enhancement_tokens_bool_exp
    ): vectric_enhancement_tokens_aggregate!
    enhances: bigint
    "An array relationship"
    freeClipartTokens(
        "distinct select on columns"
        distinct_on: [vectric_free_clipart_tokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_free_clipart_tokens_order_by!],
        "filter the rows returned"
        where: vectric_free_clipart_tokens_bool_exp
    ): [vectric_free_clipart_tokens!]!
    "An aggregate relationship"
    freeClipartTokens_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_free_clipart_tokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_free_clipart_tokens_order_by!],
        "filter the rows returned"
        where: vectric_free_clipart_tokens_bool_exp
    ): vectric_free_clipart_tokens_aggregate!
    licenceCode: String!
    licenceIdAsDisplay: Boolean!
    licenceType: String
    oembundleid: String
    "An object relationship"
    product: vectric_products_products!
    productId: bigint!
    registeredUsername: String!
    resentdate: timestamptz
    "An object relationship"
    salesItem: vectric_sales_salesitems!
    salesItemProductId: bigint!
    "An object relationship"
    salesItemProductStatus: vectric_sales_salesitemproduct_status
    salesitemid: bigint!
    status: bigint!
    transfersalesitem: bigint
    "An array relationship"
    upgradeTokens(
        "distinct select on columns"
        distinct_on: [vectric_upgrade_tokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrade_tokens_order_by!],
        "filter the rows returned"
        where: vectric_upgrade_tokens_bool_exp
    ): [vectric_upgrade_tokens!]!
    "An aggregate relationship"
    upgradeTokens_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_upgrade_tokens_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrade_tokens_order_by!],
        "filter the rows returned"
        where: vectric_upgrade_tokens_bool_exp
    ): vectric_upgrade_tokens_aggregate!
    upgradesalesitem: bigint
    versioncodeid: bigint
}

"aggregated selection of \"vectric.sales_salesitem_products\""
type vectric_sales_salesitem_products_aggregate {
    aggregate: vectric_sales_salesitem_products_aggregate_fields
    nodes: [vectric_sales_salesitem_products!]!
}

"aggregate fields of \"vectric.sales_salesitem_products\""
type vectric_sales_salesitem_products_aggregate_fields {
    avg: vectric_sales_salesitem_products_avg_fields
    count(columns: [vectric_sales_salesitem_products_select_column!], distinct: Boolean): Int!
    max: vectric_sales_salesitem_products_max_fields
    min: vectric_sales_salesitem_products_min_fields
    stddev: vectric_sales_salesitem_products_stddev_fields
    stddev_pop: vectric_sales_salesitem_products_stddev_pop_fields
    stddev_samp: vectric_sales_salesitem_products_stddev_samp_fields
    sum: vectric_sales_salesitem_products_sum_fields
    var_pop: vectric_sales_salesitem_products_var_pop_fields
    var_samp: vectric_sales_salesitem_products_var_samp_fields
    variance: vectric_sales_salesitem_products_variance_fields
}

"aggregate avg on columns"
type vectric_sales_salesitem_products_avg_fields {
    enhances: Float
    productId: Float
    salesItemProductId: Float
    salesitemid: Float
    status: Float
    transfersalesitem: Float
    upgradesalesitem: Float
    versioncodeid: Float
}

"aggregate max on columns"
type vectric_sales_salesitem_products_max_fields {
    amended: timestamptz
    amendedby: String
    emailsubject: String
    enhances: bigint
    licenceCode: String
    licenceType: String
    oembundleid: String
    productId: bigint
    registeredUsername: String
    resentdate: timestamptz
    salesItemProductId: bigint
    salesitemid: bigint
    status: bigint
    transfersalesitem: bigint
    upgradesalesitem: bigint
    versioncodeid: bigint
}

"aggregate min on columns"
type vectric_sales_salesitem_products_min_fields {
    amended: timestamptz
    amendedby: String
    emailsubject: String
    enhances: bigint
    licenceCode: String
    licenceType: String
    oembundleid: String
    productId: bigint
    registeredUsername: String
    resentdate: timestamptz
    salesItemProductId: bigint
    salesitemid: bigint
    status: bigint
    transfersalesitem: bigint
    upgradesalesitem: bigint
    versioncodeid: bigint
}

"response of any mutation on the table \"vectric.sales_salesitem_products\""
type vectric_sales_salesitem_products_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_sales_salesitem_products!]!
}

"aggregate stddev on columns"
type vectric_sales_salesitem_products_stddev_fields {
    enhances: Float
    productId: Float
    salesItemProductId: Float
    salesitemid: Float
    status: Float
    transfersalesitem: Float
    upgradesalesitem: Float
    versioncodeid: Float
}

"aggregate stddev_pop on columns"
type vectric_sales_salesitem_products_stddev_pop_fields {
    enhances: Float
    productId: Float
    salesItemProductId: Float
    salesitemid: Float
    status: Float
    transfersalesitem: Float
    upgradesalesitem: Float
    versioncodeid: Float
}

"aggregate stddev_samp on columns"
type vectric_sales_salesitem_products_stddev_samp_fields {
    enhances: Float
    productId: Float
    salesItemProductId: Float
    salesitemid: Float
    status: Float
    transfersalesitem: Float
    upgradesalesitem: Float
    versioncodeid: Float
}

"aggregate sum on columns"
type vectric_sales_salesitem_products_sum_fields {
    enhances: bigint
    productId: bigint
    salesItemProductId: bigint
    salesitemid: bigint
    status: bigint
    transfersalesitem: bigint
    upgradesalesitem: bigint
    versioncodeid: bigint
}

"aggregate var_pop on columns"
type vectric_sales_salesitem_products_var_pop_fields {
    enhances: Float
    productId: Float
    salesItemProductId: Float
    salesitemid: Float
    status: Float
    transfersalesitem: Float
    upgradesalesitem: Float
    versioncodeid: Float
}

"aggregate var_samp on columns"
type vectric_sales_salesitem_products_var_samp_fields {
    enhances: Float
    productId: Float
    salesItemProductId: Float
    salesitemid: Float
    status: Float
    transfersalesitem: Float
    upgradesalesitem: Float
    versioncodeid: Float
}

"aggregate variance on columns"
type vectric_sales_salesitem_products_variance_fields {
    enhances: Float
    productId: Float
    salesItemProductId: Float
    salesitemid: Float
    status: Float
    transfersalesitem: Float
    upgradesalesitem: Float
    versioncodeid: Float
}

"columns and relationships of \"vectric.sales_salesitemproduct_status\""
type vectric_sales_salesitemproduct_status {
    status: String!
    statusid: bigint!
}

"aggregated selection of \"vectric.sales_salesitemproduct_status\""
type vectric_sales_salesitemproduct_status_aggregate {
    aggregate: vectric_sales_salesitemproduct_status_aggregate_fields
    nodes: [vectric_sales_salesitemproduct_status!]!
}

"aggregate fields of \"vectric.sales_salesitemproduct_status\""
type vectric_sales_salesitemproduct_status_aggregate_fields {
    avg: vectric_sales_salesitemproduct_status_avg_fields
    count(columns: [vectric_sales_salesitemproduct_status_select_column!], distinct: Boolean): Int!
    max: vectric_sales_salesitemproduct_status_max_fields
    min: vectric_sales_salesitemproduct_status_min_fields
    stddev: vectric_sales_salesitemproduct_status_stddev_fields
    stddev_pop: vectric_sales_salesitemproduct_status_stddev_pop_fields
    stddev_samp: vectric_sales_salesitemproduct_status_stddev_samp_fields
    sum: vectric_sales_salesitemproduct_status_sum_fields
    var_pop: vectric_sales_salesitemproduct_status_var_pop_fields
    var_samp: vectric_sales_salesitemproduct_status_var_samp_fields
    variance: vectric_sales_salesitemproduct_status_variance_fields
}

"aggregate avg on columns"
type vectric_sales_salesitemproduct_status_avg_fields {
    statusid: Float
}

"aggregate max on columns"
type vectric_sales_salesitemproduct_status_max_fields {
    status: String
    statusid: bigint
}

"aggregate min on columns"
type vectric_sales_salesitemproduct_status_min_fields {
    status: String
    statusid: bigint
}

"response of any mutation on the table \"vectric.sales_salesitemproduct_status\""
type vectric_sales_salesitemproduct_status_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_sales_salesitemproduct_status!]!
}

"aggregate stddev on columns"
type vectric_sales_salesitemproduct_status_stddev_fields {
    statusid: Float
}

"aggregate stddev_pop on columns"
type vectric_sales_salesitemproduct_status_stddev_pop_fields {
    statusid: Float
}

"aggregate stddev_samp on columns"
type vectric_sales_salesitemproduct_status_stddev_samp_fields {
    statusid: Float
}

"aggregate sum on columns"
type vectric_sales_salesitemproduct_status_sum_fields {
    statusid: bigint
}

"aggregate var_pop on columns"
type vectric_sales_salesitemproduct_status_var_pop_fields {
    statusid: Float
}

"aggregate var_samp on columns"
type vectric_sales_salesitemproduct_status_var_samp_fields {
    statusid: Float
}

"aggregate variance on columns"
type vectric_sales_salesitemproduct_status_variance_fields {
    statusid: Float
}

"columns and relationships of \"vectric.sales_salesitems\""
type vectric_sales_salesitems {
    amendedby: String
    "An object relationship"
    customerSale: vectric_customer_sales
    dateamended: timestamptz
    orderid: String!
    "An object relationship"
    product: vectric_products_products!
    productid: bigint!
    "An array relationship"
    salesItemProducts(
        "distinct select on columns"
        distinct_on: [vectric_sales_salesitem_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_salesitem_products_order_by!],
        "filter the rows returned"
        where: vectric_sales_salesitem_products_bool_exp
    ): [vectric_sales_salesitem_products!]!
    "An aggregate relationship"
    salesItemProducts_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_sales_salesitem_products_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_sales_salesitem_products_order_by!],
        "filter the rows returned"
        where: vectric_sales_salesitem_products_bool_exp
    ): vectric_sales_salesitem_products_aggregate!
    "An object relationship"
    sales_order: vectric_sales_orders!
    salesitemid: bigint!
}

"aggregated selection of \"vectric.sales_salesitems\""
type vectric_sales_salesitems_aggregate {
    aggregate: vectric_sales_salesitems_aggregate_fields
    nodes: [vectric_sales_salesitems!]!
}

"aggregate fields of \"vectric.sales_salesitems\""
type vectric_sales_salesitems_aggregate_fields {
    avg: vectric_sales_salesitems_avg_fields
    count(columns: [vectric_sales_salesitems_select_column!], distinct: Boolean): Int!
    max: vectric_sales_salesitems_max_fields
    min: vectric_sales_salesitems_min_fields
    stddev: vectric_sales_salesitems_stddev_fields
    stddev_pop: vectric_sales_salesitems_stddev_pop_fields
    stddev_samp: vectric_sales_salesitems_stddev_samp_fields
    sum: vectric_sales_salesitems_sum_fields
    var_pop: vectric_sales_salesitems_var_pop_fields
    var_samp: vectric_sales_salesitems_var_samp_fields
    variance: vectric_sales_salesitems_variance_fields
}

"aggregate avg on columns"
type vectric_sales_salesitems_avg_fields {
    productid: Float
    salesitemid: Float
}

"aggregate max on columns"
type vectric_sales_salesitems_max_fields {
    amendedby: String
    dateamended: timestamptz
    orderid: String
    productid: bigint
    salesitemid: bigint
}

"aggregate min on columns"
type vectric_sales_salesitems_min_fields {
    amendedby: String
    dateamended: timestamptz
    orderid: String
    productid: bigint
    salesitemid: bigint
}

"response of any mutation on the table \"vectric.sales_salesitems\""
type vectric_sales_salesitems_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_sales_salesitems!]!
}

"aggregate stddev on columns"
type vectric_sales_salesitems_stddev_fields {
    productid: Float
    salesitemid: Float
}

"aggregate stddev_pop on columns"
type vectric_sales_salesitems_stddev_pop_fields {
    productid: Float
    salesitemid: Float
}

"aggregate stddev_samp on columns"
type vectric_sales_salesitems_stddev_samp_fields {
    productid: Float
    salesitemid: Float
}

"aggregate sum on columns"
type vectric_sales_salesitems_sum_fields {
    productid: bigint
    salesitemid: bigint
}

"aggregate var_pop on columns"
type vectric_sales_salesitems_var_pop_fields {
    productid: Float
    salesitemid: Float
}

"aggregate var_samp on columns"
type vectric_sales_salesitems_var_samp_fields {
    productid: Float
    salesitemid: Float
}

"aggregate variance on columns"
type vectric_sales_salesitems_variance_fields {
    productid: Float
    salesitemid: Float
}

"columns and relationships of \"vectric.sales_velocitytemplate\""
type vectric_sales_velocitytemplate {
    lang: String
    "An object relationship"
    languageCode: vectric_language_codes
    sender: String!
    signedBy: String!
    subject: String!
    template: String!
    templateName: String!
    templateTimestamp: timestamptz!
}

"aggregated selection of \"vectric.sales_velocitytemplate\""
type vectric_sales_velocitytemplate_aggregate {
    aggregate: vectric_sales_velocitytemplate_aggregate_fields
    nodes: [vectric_sales_velocitytemplate!]!
}

"aggregate fields of \"vectric.sales_velocitytemplate\""
type vectric_sales_velocitytemplate_aggregate_fields {
    count(columns: [vectric_sales_velocitytemplate_select_column!], distinct: Boolean): Int!
    max: vectric_sales_velocitytemplate_max_fields
    min: vectric_sales_velocitytemplate_min_fields
}

"aggregate max on columns"
type vectric_sales_velocitytemplate_max_fields {
    lang: String
    sender: String
    signedBy: String
    subject: String
    template: String
    templateName: String
    templateTimestamp: timestamptz
}

"aggregate min on columns"
type vectric_sales_velocitytemplate_min_fields {
    lang: String
    sender: String
    signedBy: String
    subject: String
    template: String
    templateName: String
    templateTimestamp: timestamptz
}

"response of any mutation on the table \"vectric.sales_velocitytemplate\""
type vectric_sales_velocitytemplate_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_sales_velocitytemplate!]!
}

"columns and relationships of \"vectric.scheduled_emails\""
type vectric_scheduled_emails {
    createdOn: timestamp!
    customerId: bigint
    id: Int!
    processed: Boolean
    processedOn: timestamp
    sendTo: String!
    templateId: String!
    variables: String
}

"aggregated selection of \"vectric.scheduled_emails\""
type vectric_scheduled_emails_aggregate {
    aggregate: vectric_scheduled_emails_aggregate_fields
    nodes: [vectric_scheduled_emails!]!
}

"aggregate fields of \"vectric.scheduled_emails\""
type vectric_scheduled_emails_aggregate_fields {
    avg: vectric_scheduled_emails_avg_fields
    count(columns: [vectric_scheduled_emails_select_column!], distinct: Boolean): Int!
    max: vectric_scheduled_emails_max_fields
    min: vectric_scheduled_emails_min_fields
    stddev: vectric_scheduled_emails_stddev_fields
    stddev_pop: vectric_scheduled_emails_stddev_pop_fields
    stddev_samp: vectric_scheduled_emails_stddev_samp_fields
    sum: vectric_scheduled_emails_sum_fields
    var_pop: vectric_scheduled_emails_var_pop_fields
    var_samp: vectric_scheduled_emails_var_samp_fields
    variance: vectric_scheduled_emails_variance_fields
}

"aggregate avg on columns"
type vectric_scheduled_emails_avg_fields {
    customerId: Float
    id: Float
}

"aggregate max on columns"
type vectric_scheduled_emails_max_fields {
    createdOn: timestamp
    customerId: bigint
    id: Int
    processedOn: timestamp
    sendTo: String
    templateId: String
    variables: String
}

"aggregate min on columns"
type vectric_scheduled_emails_min_fields {
    createdOn: timestamp
    customerId: bigint
    id: Int
    processedOn: timestamp
    sendTo: String
    templateId: String
    variables: String
}

"response of any mutation on the table \"vectric.scheduled_emails\""
type vectric_scheduled_emails_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_scheduled_emails!]!
}

"aggregate stddev on columns"
type vectric_scheduled_emails_stddev_fields {
    customerId: Float
    id: Float
}

"aggregate stddev_pop on columns"
type vectric_scheduled_emails_stddev_pop_fields {
    customerId: Float
    id: Float
}

"aggregate stddev_samp on columns"
type vectric_scheduled_emails_stddev_samp_fields {
    customerId: Float
    id: Float
}

"aggregate sum on columns"
type vectric_scheduled_emails_sum_fields {
    customerId: bigint
    id: Int
}

"aggregate var_pop on columns"
type vectric_scheduled_emails_var_pop_fields {
    customerId: Float
    id: Float
}

"aggregate var_samp on columns"
type vectric_scheduled_emails_var_samp_fields {
    customerId: Float
    id: Float
}

"aggregate variance on columns"
type vectric_scheduled_emails_variance_fields {
    customerId: Float
    id: Float
}

"columns and relationships of \"vectric.security_emailverificationtokens\""
type vectric_security_emailverificationtokens {
    customerId: bigint
    expiryDate: timestamptz
    token: String!
    username: String!
}

"aggregated selection of \"vectric.security_emailverificationtokens\""
type vectric_security_emailverificationtokens_aggregate {
    aggregate: vectric_security_emailverificationtokens_aggregate_fields
    nodes: [vectric_security_emailverificationtokens!]!
}

"aggregate fields of \"vectric.security_emailverificationtokens\""
type vectric_security_emailverificationtokens_aggregate_fields {
    avg: vectric_security_emailverificationtokens_avg_fields
    count(columns: [vectric_security_emailverificationtokens_select_column!], distinct: Boolean): Int!
    max: vectric_security_emailverificationtokens_max_fields
    min: vectric_security_emailverificationtokens_min_fields
    stddev: vectric_security_emailverificationtokens_stddev_fields
    stddev_pop: vectric_security_emailverificationtokens_stddev_pop_fields
    stddev_samp: vectric_security_emailverificationtokens_stddev_samp_fields
    sum: vectric_security_emailverificationtokens_sum_fields
    var_pop: vectric_security_emailverificationtokens_var_pop_fields
    var_samp: vectric_security_emailverificationtokens_var_samp_fields
    variance: vectric_security_emailverificationtokens_variance_fields
}

"aggregate avg on columns"
type vectric_security_emailverificationtokens_avg_fields {
    customerId: Float
}

"aggregate max on columns"
type vectric_security_emailverificationtokens_max_fields {
    customerId: bigint
    expiryDate: timestamptz
    token: String
    username: String
}

"aggregate min on columns"
type vectric_security_emailverificationtokens_min_fields {
    customerId: bigint
    expiryDate: timestamptz
    token: String
    username: String
}

"response of any mutation on the table \"vectric.security_emailverificationtokens\""
type vectric_security_emailverificationtokens_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_security_emailverificationtokens!]!
}

"aggregate stddev on columns"
type vectric_security_emailverificationtokens_stddev_fields {
    customerId: Float
}

"aggregate stddev_pop on columns"
type vectric_security_emailverificationtokens_stddev_pop_fields {
    customerId: Float
}

"aggregate stddev_samp on columns"
type vectric_security_emailverificationtokens_stddev_samp_fields {
    customerId: Float
}

"aggregate sum on columns"
type vectric_security_emailverificationtokens_sum_fields {
    customerId: bigint
}

"aggregate var_pop on columns"
type vectric_security_emailverificationtokens_var_pop_fields {
    customerId: Float
}

"aggregate var_samp on columns"
type vectric_security_emailverificationtokens_var_samp_fields {
    customerId: Float
}

"aggregate variance on columns"
type vectric_security_emailverificationtokens_variance_fields {
    customerId: Float
}

"columns and relationships of \"vectric.security_group_authorities\""
type vectric_security_group_authorities {
    authority: String!
    groupId: bigint!
}

"aggregated selection of \"vectric.security_group_authorities\""
type vectric_security_group_authorities_aggregate {
    aggregate: vectric_security_group_authorities_aggregate_fields
    nodes: [vectric_security_group_authorities!]!
}

"aggregate fields of \"vectric.security_group_authorities\""
type vectric_security_group_authorities_aggregate_fields {
    avg: vectric_security_group_authorities_avg_fields
    count(columns: [vectric_security_group_authorities_select_column!], distinct: Boolean): Int!
    max: vectric_security_group_authorities_max_fields
    min: vectric_security_group_authorities_min_fields
    stddev: vectric_security_group_authorities_stddev_fields
    stddev_pop: vectric_security_group_authorities_stddev_pop_fields
    stddev_samp: vectric_security_group_authorities_stddev_samp_fields
    sum: vectric_security_group_authorities_sum_fields
    var_pop: vectric_security_group_authorities_var_pop_fields
    var_samp: vectric_security_group_authorities_var_samp_fields
    variance: vectric_security_group_authorities_variance_fields
}

"aggregate avg on columns"
type vectric_security_group_authorities_avg_fields {
    groupId: Float
}

"aggregate max on columns"
type vectric_security_group_authorities_max_fields {
    authority: String
    groupId: bigint
}

"aggregate min on columns"
type vectric_security_group_authorities_min_fields {
    authority: String
    groupId: bigint
}

"response of any mutation on the table \"vectric.security_group_authorities\""
type vectric_security_group_authorities_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_security_group_authorities!]!
}

"aggregate stddev on columns"
type vectric_security_group_authorities_stddev_fields {
    groupId: Float
}

"aggregate stddev_pop on columns"
type vectric_security_group_authorities_stddev_pop_fields {
    groupId: Float
}

"aggregate stddev_samp on columns"
type vectric_security_group_authorities_stddev_samp_fields {
    groupId: Float
}

"aggregate sum on columns"
type vectric_security_group_authorities_sum_fields {
    groupId: bigint
}

"aggregate var_pop on columns"
type vectric_security_group_authorities_var_pop_fields {
    groupId: Float
}

"aggregate var_samp on columns"
type vectric_security_group_authorities_var_samp_fields {
    groupId: Float
}

"aggregate variance on columns"
type vectric_security_group_authorities_variance_fields {
    groupId: Float
}

"columns and relationships of \"vectric.security_group_members\""
type vectric_security_group_members {
    "An array relationship"
    groupAuthorities(
        "distinct select on columns"
        distinct_on: [vectric_security_group_authorities_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_group_authorities_order_by!],
        "filter the rows returned"
        where: vectric_security_group_authorities_bool_exp
    ): [vectric_security_group_authorities!]!
    "An aggregate relationship"
    groupAuthorities_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_security_group_authorities_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_group_authorities_order_by!],
        "filter the rows returned"
        where: vectric_security_group_authorities_bool_exp
    ): vectric_security_group_authorities_aggregate!
    groupId: bigint!
    id: bigint!
    "An object relationship"
    securityUser: vectric_security_users
    username: String
}

"aggregated selection of \"vectric.security_group_members\""
type vectric_security_group_members_aggregate {
    aggregate: vectric_security_group_members_aggregate_fields
    nodes: [vectric_security_group_members!]!
}

"aggregate fields of \"vectric.security_group_members\""
type vectric_security_group_members_aggregate_fields {
    avg: vectric_security_group_members_avg_fields
    count(columns: [vectric_security_group_members_select_column!], distinct: Boolean): Int!
    max: vectric_security_group_members_max_fields
    min: vectric_security_group_members_min_fields
    stddev: vectric_security_group_members_stddev_fields
    stddev_pop: vectric_security_group_members_stddev_pop_fields
    stddev_samp: vectric_security_group_members_stddev_samp_fields
    sum: vectric_security_group_members_sum_fields
    var_pop: vectric_security_group_members_var_pop_fields
    var_samp: vectric_security_group_members_var_samp_fields
    variance: vectric_security_group_members_variance_fields
}

"aggregate avg on columns"
type vectric_security_group_members_avg_fields {
    groupId: Float
    id: Float
}

"aggregate max on columns"
type vectric_security_group_members_max_fields {
    groupId: bigint
    id: bigint
    username: String
}

"aggregate min on columns"
type vectric_security_group_members_min_fields {
    groupId: bigint
    id: bigint
    username: String
}

"response of any mutation on the table \"vectric.security_group_members\""
type vectric_security_group_members_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_security_group_members!]!
}

"aggregate stddev on columns"
type vectric_security_group_members_stddev_fields {
    groupId: Float
    id: Float
}

"aggregate stddev_pop on columns"
type vectric_security_group_members_stddev_pop_fields {
    groupId: Float
    id: Float
}

"aggregate stddev_samp on columns"
type vectric_security_group_members_stddev_samp_fields {
    groupId: Float
    id: Float
}

"aggregate sum on columns"
type vectric_security_group_members_sum_fields {
    groupId: bigint
    id: bigint
}

"aggregate var_pop on columns"
type vectric_security_group_members_var_pop_fields {
    groupId: Float
    id: Float
}

"aggregate var_samp on columns"
type vectric_security_group_members_var_samp_fields {
    groupId: Float
    id: Float
}

"aggregate variance on columns"
type vectric_security_group_members_variance_fields {
    groupId: Float
    id: Float
}

"columns and relationships of \"vectric.security_passwordresettokens\""
type vectric_security_passwordresettokens {
    expiryDate: timestamptz!
    token: String!
    username: String!
}

"aggregated selection of \"vectric.security_passwordresettokens\""
type vectric_security_passwordresettokens_aggregate {
    aggregate: vectric_security_passwordresettokens_aggregate_fields
    nodes: [vectric_security_passwordresettokens!]!
}

"aggregate fields of \"vectric.security_passwordresettokens\""
type vectric_security_passwordresettokens_aggregate_fields {
    count(columns: [vectric_security_passwordresettokens_select_column!], distinct: Boolean): Int!
    max: vectric_security_passwordresettokens_max_fields
    min: vectric_security_passwordresettokens_min_fields
}

"aggregate max on columns"
type vectric_security_passwordresettokens_max_fields {
    expiryDate: timestamptz
    token: String
    username: String
}

"aggregate min on columns"
type vectric_security_passwordresettokens_min_fields {
    expiryDate: timestamptz
    token: String
    username: String
}

"response of any mutation on the table \"vectric.security_passwordresettokens\""
type vectric_security_passwordresettokens_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_security_passwordresettokens!]!
}

"columns and relationships of \"vectric.security_userinvitations\""
type vectric_security_userinvitations {
    acceptedDate: timestamptz
    adminofid: bigint
    createDate: timestamptz
    customerId: bigint
    expirydate: timestamptz
    staffofid: bigint
    token: String!
    username: String!
}

"aggregated selection of \"vectric.security_userinvitations\""
type vectric_security_userinvitations_aggregate {
    aggregate: vectric_security_userinvitations_aggregate_fields
    nodes: [vectric_security_userinvitations!]!
}

"aggregate fields of \"vectric.security_userinvitations\""
type vectric_security_userinvitations_aggregate_fields {
    avg: vectric_security_userinvitations_avg_fields
    count(columns: [vectric_security_userinvitations_select_column!], distinct: Boolean): Int!
    max: vectric_security_userinvitations_max_fields
    min: vectric_security_userinvitations_min_fields
    stddev: vectric_security_userinvitations_stddev_fields
    stddev_pop: vectric_security_userinvitations_stddev_pop_fields
    stddev_samp: vectric_security_userinvitations_stddev_samp_fields
    sum: vectric_security_userinvitations_sum_fields
    var_pop: vectric_security_userinvitations_var_pop_fields
    var_samp: vectric_security_userinvitations_var_samp_fields
    variance: vectric_security_userinvitations_variance_fields
}

"aggregate avg on columns"
type vectric_security_userinvitations_avg_fields {
    adminofid: Float
    customerId: Float
    staffofid: Float
}

"aggregate max on columns"
type vectric_security_userinvitations_max_fields {
    acceptedDate: timestamptz
    adminofid: bigint
    createDate: timestamptz
    customerId: bigint
    expirydate: timestamptz
    staffofid: bigint
    token: String
    username: String
}

"aggregate min on columns"
type vectric_security_userinvitations_min_fields {
    acceptedDate: timestamptz
    adminofid: bigint
    createDate: timestamptz
    customerId: bigint
    expirydate: timestamptz
    staffofid: bigint
    token: String
    username: String
}

"response of any mutation on the table \"vectric.security_userinvitations\""
type vectric_security_userinvitations_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_security_userinvitations!]!
}

"aggregate stddev on columns"
type vectric_security_userinvitations_stddev_fields {
    adminofid: Float
    customerId: Float
    staffofid: Float
}

"aggregate stddev_pop on columns"
type vectric_security_userinvitations_stddev_pop_fields {
    adminofid: Float
    customerId: Float
    staffofid: Float
}

"aggregate stddev_samp on columns"
type vectric_security_userinvitations_stddev_samp_fields {
    adminofid: Float
    customerId: Float
    staffofid: Float
}

"aggregate sum on columns"
type vectric_security_userinvitations_sum_fields {
    adminofid: bigint
    customerId: bigint
    staffofid: bigint
}

"aggregate var_pop on columns"
type vectric_security_userinvitations_var_pop_fields {
    adminofid: Float
    customerId: Float
    staffofid: Float
}

"aggregate var_samp on columns"
type vectric_security_userinvitations_var_samp_fields {
    adminofid: Float
    customerId: Float
    staffofid: Float
}

"aggregate variance on columns"
type vectric_security_userinvitations_variance_fields {
    adminofid: Float
    customerId: Float
    staffofid: Float
}

"columns and relationships of \"vectric.security_users\""
type vectric_security_users {
    accountNonExpired: Boolean!
    credentialsNonExpired: Boolean!
    enabled: Boolean!
    password: String!
    salesCustomerId: bigint
    "An array relationship"
    securityGroups(
        "distinct select on columns"
        distinct_on: [vectric_security_group_members_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_group_members_order_by!],
        "filter the rows returned"
        where: vectric_security_group_members_bool_exp
    ): [vectric_security_group_members!]!
    "An aggregate relationship"
    securityGroups_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_security_group_members_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_security_group_members_order_by!],
        "filter the rows returned"
        where: vectric_security_group_members_bool_exp
    ): vectric_security_group_members_aggregate!
    username: String!
    voucherCode: String
}

"aggregated selection of \"vectric.security_users\""
type vectric_security_users_aggregate {
    aggregate: vectric_security_users_aggregate_fields
    nodes: [vectric_security_users!]!
}

"aggregate fields of \"vectric.security_users\""
type vectric_security_users_aggregate_fields {
    avg: vectric_security_users_avg_fields
    count(columns: [vectric_security_users_select_column!], distinct: Boolean): Int!
    max: vectric_security_users_max_fields
    min: vectric_security_users_min_fields
    stddev: vectric_security_users_stddev_fields
    stddev_pop: vectric_security_users_stddev_pop_fields
    stddev_samp: vectric_security_users_stddev_samp_fields
    sum: vectric_security_users_sum_fields
    var_pop: vectric_security_users_var_pop_fields
    var_samp: vectric_security_users_var_samp_fields
    variance: vectric_security_users_variance_fields
}

"aggregate avg on columns"
type vectric_security_users_avg_fields {
    salesCustomerId: Float
}

"aggregate max on columns"
type vectric_security_users_max_fields {
    password: String
    salesCustomerId: bigint
    username: String
    voucherCode: String
}

"aggregate min on columns"
type vectric_security_users_min_fields {
    password: String
    salesCustomerId: bigint
    username: String
    voucherCode: String
}

"response of any mutation on the table \"vectric.security_users\""
type vectric_security_users_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_security_users!]!
}

"aggregate stddev on columns"
type vectric_security_users_stddev_fields {
    salesCustomerId: Float
}

"aggregate stddev_pop on columns"
type vectric_security_users_stddev_pop_fields {
    salesCustomerId: Float
}

"aggregate stddev_samp on columns"
type vectric_security_users_stddev_samp_fields {
    salesCustomerId: Float
}

"aggregate sum on columns"
type vectric_security_users_sum_fields {
    salesCustomerId: bigint
}

"aggregate var_pop on columns"
type vectric_security_users_var_pop_fields {
    salesCustomerId: Float
}

"aggregate var_samp on columns"
type vectric_security_users_var_samp_fields {
    salesCustomerId: Float
}

"aggregate variance on columns"
type vectric_security_users_variance_fields {
    salesCustomerId: Float
}

"columns and relationships of \"vectric.site_option_location\""
type vectric_site_option_location {
    locationid: bigint!
    name: String
}

"aggregated selection of \"vectric.site_option_location\""
type vectric_site_option_location_aggregate {
    aggregate: vectric_site_option_location_aggregate_fields
    nodes: [vectric_site_option_location!]!
}

"aggregate fields of \"vectric.site_option_location\""
type vectric_site_option_location_aggregate_fields {
    avg: vectric_site_option_location_avg_fields
    count(columns: [vectric_site_option_location_select_column!], distinct: Boolean): Int!
    max: vectric_site_option_location_max_fields
    min: vectric_site_option_location_min_fields
    stddev: vectric_site_option_location_stddev_fields
    stddev_pop: vectric_site_option_location_stddev_pop_fields
    stddev_samp: vectric_site_option_location_stddev_samp_fields
    sum: vectric_site_option_location_sum_fields
    var_pop: vectric_site_option_location_var_pop_fields
    var_samp: vectric_site_option_location_var_samp_fields
    variance: vectric_site_option_location_variance_fields
}

"aggregate avg on columns"
type vectric_site_option_location_avg_fields {
    locationid: Float
}

"aggregate max on columns"
type vectric_site_option_location_max_fields {
    locationid: bigint
    name: String
}

"aggregate min on columns"
type vectric_site_option_location_min_fields {
    locationid: bigint
    name: String
}

"response of any mutation on the table \"vectric.site_option_location\""
type vectric_site_option_location_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_site_option_location!]!
}

"aggregate stddev on columns"
type vectric_site_option_location_stddev_fields {
    locationid: Float
}

"aggregate stddev_pop on columns"
type vectric_site_option_location_stddev_pop_fields {
    locationid: Float
}

"aggregate stddev_samp on columns"
type vectric_site_option_location_stddev_samp_fields {
    locationid: Float
}

"aggregate sum on columns"
type vectric_site_option_location_sum_fields {
    locationid: bigint
}

"aggregate var_pop on columns"
type vectric_site_option_location_var_pop_fields {
    locationid: Float
}

"aggregate var_samp on columns"
type vectric_site_option_location_var_samp_fields {
    locationid: Float
}

"aggregate variance on columns"
type vectric_site_option_location_variance_fields {
    locationid: Float
}

"columns and relationships of \"vectric.site_options\""
type vectric_site_options {
    description: String
    optionid: bigint!
    optionname: String!
    "An object relationship"
    site_optiositeOptionLocationn_location: vectric_site_option_location!
    siteid: bigint!
    stringval: String
    value: Boolean
}

"aggregated selection of \"vectric.site_options\""
type vectric_site_options_aggregate {
    aggregate: vectric_site_options_aggregate_fields
    nodes: [vectric_site_options!]!
}

"aggregate fields of \"vectric.site_options\""
type vectric_site_options_aggregate_fields {
    avg: vectric_site_options_avg_fields
    count(columns: [vectric_site_options_select_column!], distinct: Boolean): Int!
    max: vectric_site_options_max_fields
    min: vectric_site_options_min_fields
    stddev: vectric_site_options_stddev_fields
    stddev_pop: vectric_site_options_stddev_pop_fields
    stddev_samp: vectric_site_options_stddev_samp_fields
    sum: vectric_site_options_sum_fields
    var_pop: vectric_site_options_var_pop_fields
    var_samp: vectric_site_options_var_samp_fields
    variance: vectric_site_options_variance_fields
}

"aggregate avg on columns"
type vectric_site_options_avg_fields {
    optionid: Float
    siteid: Float
}

"aggregate max on columns"
type vectric_site_options_max_fields {
    description: String
    optionid: bigint
    optionname: String
    siteid: bigint
    stringval: String
}

"aggregate min on columns"
type vectric_site_options_min_fields {
    description: String
    optionid: bigint
    optionname: String
    siteid: bigint
    stringval: String
}

"response of any mutation on the table \"vectric.site_options\""
type vectric_site_options_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_site_options!]!
}

"aggregate stddev on columns"
type vectric_site_options_stddev_fields {
    optionid: Float
    siteid: Float
}

"aggregate stddev_pop on columns"
type vectric_site_options_stddev_pop_fields {
    optionid: Float
    siteid: Float
}

"aggregate stddev_samp on columns"
type vectric_site_options_stddev_samp_fields {
    optionid: Float
    siteid: Float
}

"aggregate sum on columns"
type vectric_site_options_sum_fields {
    optionid: bigint
    siteid: bigint
}

"aggregate var_pop on columns"
type vectric_site_options_var_pop_fields {
    optionid: Float
    siteid: Float
}

"aggregate var_samp on columns"
type vectric_site_options_var_samp_fields {
    optionid: Float
    siteid: Float
}

"aggregate variance on columns"
type vectric_site_options_variance_fields {
    optionid: Float
    siteid: Float
}

"columns and relationships of \"vectric.subscription_contract_status\""
type vectric_subscription_contract_status {
    status: String!
}

"aggregated selection of \"vectric.subscription_contract_status\""
type vectric_subscription_contract_status_aggregate {
    aggregate: vectric_subscription_contract_status_aggregate_fields
    nodes: [vectric_subscription_contract_status!]!
}

"aggregate fields of \"vectric.subscription_contract_status\""
type vectric_subscription_contract_status_aggregate_fields {
    count(columns: [vectric_subscription_contract_status_select_column!], distinct: Boolean): Int!
    max: vectric_subscription_contract_status_max_fields
    min: vectric_subscription_contract_status_min_fields
}

"aggregate max on columns"
type vectric_subscription_contract_status_max_fields {
    status: String
}

"aggregate min on columns"
type vectric_subscription_contract_status_min_fields {
    status: String
}

"response of any mutation on the table \"vectric.subscription_contract_status\""
type vectric_subscription_contract_status_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_subscription_contract_status!]!
}

"columns and relationships of \"vectric.subscription_contracts\""
type vectric_subscription_contracts {
    dateEnding: timestamp!
    dateStarted: timestamp!
    "An array relationship"
    events(
        "distinct select on columns"
        distinct_on: [vectric_subscription_events_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_subscription_events_order_by!],
        "filter the rows returned"
        where: vectric_subscription_events_bool_exp
    ): [vectric_subscription_events!]!
    "An aggregate relationship"
    events_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_subscription_events_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_subscription_events_order_by!],
        "filter the rows returned"
        where: vectric_subscription_events_bool_exp
    ): vectric_subscription_events_aggregate!
    "An object relationship"
    orderItem: vectric_organization_order_items!
    orderItemId: Int!
    status: String!
    subscriptionContractId: Int!
    subscriptionId: String!
}

"aggregated selection of \"vectric.subscription_contracts\""
type vectric_subscription_contracts_aggregate {
    aggregate: vectric_subscription_contracts_aggregate_fields
    nodes: [vectric_subscription_contracts!]!
}

"aggregate fields of \"vectric.subscription_contracts\""
type vectric_subscription_contracts_aggregate_fields {
    avg: vectric_subscription_contracts_avg_fields
    count(columns: [vectric_subscription_contracts_select_column!], distinct: Boolean): Int!
    max: vectric_subscription_contracts_max_fields
    min: vectric_subscription_contracts_min_fields
    stddev: vectric_subscription_contracts_stddev_fields
    stddev_pop: vectric_subscription_contracts_stddev_pop_fields
    stddev_samp: vectric_subscription_contracts_stddev_samp_fields
    sum: vectric_subscription_contracts_sum_fields
    var_pop: vectric_subscription_contracts_var_pop_fields
    var_samp: vectric_subscription_contracts_var_samp_fields
    variance: vectric_subscription_contracts_variance_fields
}

"aggregate avg on columns"
type vectric_subscription_contracts_avg_fields {
    orderItemId: Float
    subscriptionContractId: Float
}

"aggregate max on columns"
type vectric_subscription_contracts_max_fields {
    dateEnding: timestamp
    dateStarted: timestamp
    orderItemId: Int
    status: String
    subscriptionContractId: Int
    subscriptionId: String
}

"aggregate min on columns"
type vectric_subscription_contracts_min_fields {
    dateEnding: timestamp
    dateStarted: timestamp
    orderItemId: Int
    status: String
    subscriptionContractId: Int
    subscriptionId: String
}

"response of any mutation on the table \"vectric.subscription_contracts\""
type vectric_subscription_contracts_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_subscription_contracts!]!
}

"aggregate stddev on columns"
type vectric_subscription_contracts_stddev_fields {
    orderItemId: Float
    subscriptionContractId: Float
}

"aggregate stddev_pop on columns"
type vectric_subscription_contracts_stddev_pop_fields {
    orderItemId: Float
    subscriptionContractId: Float
}

"aggregate stddev_samp on columns"
type vectric_subscription_contracts_stddev_samp_fields {
    orderItemId: Float
    subscriptionContractId: Float
}

"aggregate sum on columns"
type vectric_subscription_contracts_sum_fields {
    orderItemId: Int
    subscriptionContractId: Int
}

"aggregate var_pop on columns"
type vectric_subscription_contracts_var_pop_fields {
    orderItemId: Float
    subscriptionContractId: Float
}

"aggregate var_samp on columns"
type vectric_subscription_contracts_var_samp_fields {
    orderItemId: Float
    subscriptionContractId: Float
}

"aggregate variance on columns"
type vectric_subscription_contracts_variance_fields {
    orderItemId: Float
    subscriptionContractId: Float
}

"columns and relationships of \"vectric.subscription_events\""
type vectric_subscription_events {
    actionTaken: String!
    dateCreated: timestamp!
    dateProcessed: timestamp
    eventId: Int!
    eventType: String!
    fastspringInternalOrderId: String
    fastspringOrderReference: String
    fastspringSubscriptionId: String!
    orderItemId: Int
    subscriptionContractId: Int
    subscriptionDateStarted: timestamp
    subscriptionDeactivationDate: timestamp
    subscriptionNextRebillDate: timestamp
}

"aggregated selection of \"vectric.subscription_events\""
type vectric_subscription_events_aggregate {
    aggregate: vectric_subscription_events_aggregate_fields
    nodes: [vectric_subscription_events!]!
}

"aggregate fields of \"vectric.subscription_events\""
type vectric_subscription_events_aggregate_fields {
    avg: vectric_subscription_events_avg_fields
    count(columns: [vectric_subscription_events_select_column!], distinct: Boolean): Int!
    max: vectric_subscription_events_max_fields
    min: vectric_subscription_events_min_fields
    stddev: vectric_subscription_events_stddev_fields
    stddev_pop: vectric_subscription_events_stddev_pop_fields
    stddev_samp: vectric_subscription_events_stddev_samp_fields
    sum: vectric_subscription_events_sum_fields
    var_pop: vectric_subscription_events_var_pop_fields
    var_samp: vectric_subscription_events_var_samp_fields
    variance: vectric_subscription_events_variance_fields
}

"aggregate avg on columns"
type vectric_subscription_events_avg_fields {
    eventId: Float
    orderItemId: Float
    subscriptionContractId: Float
}

"aggregate max on columns"
type vectric_subscription_events_max_fields {
    actionTaken: String
    dateCreated: timestamp
    dateProcessed: timestamp
    eventId: Int
    eventType: String
    fastspringInternalOrderId: String
    fastspringOrderReference: String
    fastspringSubscriptionId: String
    orderItemId: Int
    subscriptionContractId: Int
    subscriptionDateStarted: timestamp
    subscriptionDeactivationDate: timestamp
    subscriptionNextRebillDate: timestamp
}

"aggregate min on columns"
type vectric_subscription_events_min_fields {
    actionTaken: String
    dateCreated: timestamp
    dateProcessed: timestamp
    eventId: Int
    eventType: String
    fastspringInternalOrderId: String
    fastspringOrderReference: String
    fastspringSubscriptionId: String
    orderItemId: Int
    subscriptionContractId: Int
    subscriptionDateStarted: timestamp
    subscriptionDeactivationDate: timestamp
    subscriptionNextRebillDate: timestamp
}

"response of any mutation on the table \"vectric.subscription_events\""
type vectric_subscription_events_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_subscription_events!]!
}

"aggregate stddev on columns"
type vectric_subscription_events_stddev_fields {
    eventId: Float
    orderItemId: Float
    subscriptionContractId: Float
}

"aggregate stddev_pop on columns"
type vectric_subscription_events_stddev_pop_fields {
    eventId: Float
    orderItemId: Float
    subscriptionContractId: Float
}

"aggregate stddev_samp on columns"
type vectric_subscription_events_stddev_samp_fields {
    eventId: Float
    orderItemId: Float
    subscriptionContractId: Float
}

"aggregate sum on columns"
type vectric_subscription_events_sum_fields {
    eventId: Int
    orderItemId: Int
    subscriptionContractId: Int
}

"aggregate var_pop on columns"
type vectric_subscription_events_var_pop_fields {
    eventId: Float
    orderItemId: Float
    subscriptionContractId: Float
}

"aggregate var_samp on columns"
type vectric_subscription_events_var_samp_fields {
    eventId: Float
    orderItemId: Float
    subscriptionContractId: Float
}

"aggregate variance on columns"
type vectric_subscription_events_variance_fields {
    eventId: Float
    orderItemId: Float
    subscriptionContractId: Float
}

"columns and relationships of \"vectric.toolpath_saver_token\""
type vectric_toolpath_saver_token {
    "An object relationship"
    customer: vectric_sales_customers!
    customerId: bigint!
    dateExpired: timestamptz!
    dateGenerated: timestamptz!
    "An object relationship"
    product: vectric_products_products!
    productId: bigint!
    token: String!
    toolpathSaverTokenId: bigint!
    used: Int!
}

"aggregated selection of \"vectric.toolpath_saver_token\""
type vectric_toolpath_saver_token_aggregate {
    aggregate: vectric_toolpath_saver_token_aggregate_fields
    nodes: [vectric_toolpath_saver_token!]!
}

"aggregate fields of \"vectric.toolpath_saver_token\""
type vectric_toolpath_saver_token_aggregate_fields {
    avg: vectric_toolpath_saver_token_avg_fields
    count(columns: [vectric_toolpath_saver_token_select_column!], distinct: Boolean): Int!
    max: vectric_toolpath_saver_token_max_fields
    min: vectric_toolpath_saver_token_min_fields
    stddev: vectric_toolpath_saver_token_stddev_fields
    stddev_pop: vectric_toolpath_saver_token_stddev_pop_fields
    stddev_samp: vectric_toolpath_saver_token_stddev_samp_fields
    sum: vectric_toolpath_saver_token_sum_fields
    var_pop: vectric_toolpath_saver_token_var_pop_fields
    var_samp: vectric_toolpath_saver_token_var_samp_fields
    variance: vectric_toolpath_saver_token_variance_fields
}

"aggregate avg on columns"
type vectric_toolpath_saver_token_avg_fields {
    customerId: Float
    productId: Float
    toolpathSaverTokenId: Float
    used: Float
}

"aggregate max on columns"
type vectric_toolpath_saver_token_max_fields {
    customerId: bigint
    dateExpired: timestamptz
    dateGenerated: timestamptz
    productId: bigint
    token: String
    toolpathSaverTokenId: bigint
    used: Int
}

"aggregate min on columns"
type vectric_toolpath_saver_token_min_fields {
    customerId: bigint
    dateExpired: timestamptz
    dateGenerated: timestamptz
    productId: bigint
    token: String
    toolpathSaverTokenId: bigint
    used: Int
}

"response of any mutation on the table \"vectric.toolpath_saver_token\""
type vectric_toolpath_saver_token_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_toolpath_saver_token!]!
}

"aggregate stddev on columns"
type vectric_toolpath_saver_token_stddev_fields {
    customerId: Float
    productId: Float
    toolpathSaverTokenId: Float
    used: Float
}

"aggregate stddev_pop on columns"
type vectric_toolpath_saver_token_stddev_pop_fields {
    customerId: Float
    productId: Float
    toolpathSaverTokenId: Float
    used: Float
}

"aggregate stddev_samp on columns"
type vectric_toolpath_saver_token_stddev_samp_fields {
    customerId: Float
    productId: Float
    toolpathSaverTokenId: Float
    used: Float
}

"aggregate sum on columns"
type vectric_toolpath_saver_token_sum_fields {
    customerId: bigint
    productId: bigint
    toolpathSaverTokenId: bigint
    used: Int
}

"aggregate var_pop on columns"
type vectric_toolpath_saver_token_var_pop_fields {
    customerId: Float
    productId: Float
    toolpathSaverTokenId: Float
    used: Float
}

"aggregate var_samp on columns"
type vectric_toolpath_saver_token_var_samp_fields {
    customerId: Float
    productId: Float
    toolpathSaverTokenId: Float
    used: Float
}

"aggregate variance on columns"
type vectric_toolpath_saver_token_variance_fields {
    customerId: Float
    productId: Float
    toolpathSaverTokenId: Float
    used: Float
}

"columns and relationships of \"vectric.trial_order\""
type vectric_trial_order {
    "An object relationship"
    customer: vectric_sales_customers!
    customerId: bigint!
    endDate: timestamptz
    orderId: bigint!
    "An object relationship"
    product: vectric_products_products!
    productId: bigint!
    startDate: timestamptz
    valid: Boolean!
}

"aggregated selection of \"vectric.trial_order\""
type vectric_trial_order_aggregate {
    aggregate: vectric_trial_order_aggregate_fields
    nodes: [vectric_trial_order!]!
}

"aggregate fields of \"vectric.trial_order\""
type vectric_trial_order_aggregate_fields {
    avg: vectric_trial_order_avg_fields
    count(columns: [vectric_trial_order_select_column!], distinct: Boolean): Int!
    max: vectric_trial_order_max_fields
    min: vectric_trial_order_min_fields
    stddev: vectric_trial_order_stddev_fields
    stddev_pop: vectric_trial_order_stddev_pop_fields
    stddev_samp: vectric_trial_order_stddev_samp_fields
    sum: vectric_trial_order_sum_fields
    var_pop: vectric_trial_order_var_pop_fields
    var_samp: vectric_trial_order_var_samp_fields
    variance: vectric_trial_order_variance_fields
}

"aggregate avg on columns"
type vectric_trial_order_avg_fields {
    customerId: Float
    orderId: Float
    productId: Float
}

"aggregate max on columns"
type vectric_trial_order_max_fields {
    customerId: bigint
    endDate: timestamptz
    orderId: bigint
    productId: bigint
    startDate: timestamptz
}

"aggregate min on columns"
type vectric_trial_order_min_fields {
    customerId: bigint
    endDate: timestamptz
    orderId: bigint
    productId: bigint
    startDate: timestamptz
}

"response of any mutation on the table \"vectric.trial_order\""
type vectric_trial_order_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_trial_order!]!
}

"aggregate stddev on columns"
type vectric_trial_order_stddev_fields {
    customerId: Float
    orderId: Float
    productId: Float
}

"aggregate stddev_pop on columns"
type vectric_trial_order_stddev_pop_fields {
    customerId: Float
    orderId: Float
    productId: Float
}

"aggregate stddev_samp on columns"
type vectric_trial_order_stddev_samp_fields {
    customerId: Float
    orderId: Float
    productId: Float
}

"aggregate sum on columns"
type vectric_trial_order_sum_fields {
    customerId: bigint
    orderId: bigint
    productId: bigint
}

"aggregate var_pop on columns"
type vectric_trial_order_var_pop_fields {
    customerId: Float
    orderId: Float
    productId: Float
}

"aggregate var_samp on columns"
type vectric_trial_order_var_samp_fields {
    customerId: Float
    orderId: Float
    productId: Float
}

"aggregate variance on columns"
type vectric_trial_order_variance_fields {
    customerId: Float
    orderId: Float
    productId: Float
}

"columns and relationships of \"vectric.update_requests\""
type vectric_update_requests {
    dateAccessed: timestamptz
    ipAddress: String
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    osMajorVersion: bigint
    osMinorVersion: bigint
    productName: String
    requestId: bigint!
    wProcessorArch: bigint
}

"aggregated selection of \"vectric.update_requests\""
type vectric_update_requests_aggregate {
    aggregate: vectric_update_requests_aggregate_fields
    nodes: [vectric_update_requests!]!
}

"aggregate fields of \"vectric.update_requests\""
type vectric_update_requests_aggregate_fields {
    avg: vectric_update_requests_avg_fields
    count(columns: [vectric_update_requests_select_column!], distinct: Boolean): Int!
    max: vectric_update_requests_max_fields
    min: vectric_update_requests_min_fields
    stddev: vectric_update_requests_stddev_fields
    stddev_pop: vectric_update_requests_stddev_pop_fields
    stddev_samp: vectric_update_requests_stddev_samp_fields
    sum: vectric_update_requests_sum_fields
    var_pop: vectric_update_requests_var_pop_fields
    var_samp: vectric_update_requests_var_samp_fields
    variance: vectric_update_requests_variance_fields
}

"aggregate avg on columns"
type vectric_update_requests_avg_fields {
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    osMajorVersion: Float
    osMinorVersion: Float
    requestId: Float
    wProcessorArch: Float
}

"aggregate max on columns"
type vectric_update_requests_max_fields {
    dateAccessed: timestamptz
    ipAddress: String
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    osMajorVersion: bigint
    osMinorVersion: bigint
    productName: String
    requestId: bigint
    wProcessorArch: bigint
}

"aggregate min on columns"
type vectric_update_requests_min_fields {
    dateAccessed: timestamptz
    ipAddress: String
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    osMajorVersion: bigint
    osMinorVersion: bigint
    productName: String
    requestId: bigint
    wProcessorArch: bigint
}

"response of any mutation on the table \"vectric.update_requests\""
type vectric_update_requests_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_update_requests!]!
}

"aggregate stddev on columns"
type vectric_update_requests_stddev_fields {
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    osMajorVersion: Float
    osMinorVersion: Float
    requestId: Float
    wProcessorArch: Float
}

"aggregate stddev_pop on columns"
type vectric_update_requests_stddev_pop_fields {
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    osMajorVersion: Float
    osMinorVersion: Float
    requestId: Float
    wProcessorArch: Float
}

"aggregate stddev_samp on columns"
type vectric_update_requests_stddev_samp_fields {
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    osMajorVersion: Float
    osMinorVersion: Float
    requestId: Float
    wProcessorArch: Float
}

"aggregate sum on columns"
type vectric_update_requests_sum_fields {
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    osMajorVersion: bigint
    osMinorVersion: bigint
    requestId: bigint
    wProcessorArch: bigint
}

"aggregate var_pop on columns"
type vectric_update_requests_var_pop_fields {
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    osMajorVersion: Float
    osMinorVersion: Float
    requestId: Float
    wProcessorArch: Float
}

"aggregate var_samp on columns"
type vectric_update_requests_var_samp_fields {
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    osMajorVersion: Float
    osMinorVersion: Float
    requestId: Float
    wProcessorArch: Float
}

"aggregate variance on columns"
type vectric_update_requests_variance_fields {
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    osMajorVersion: Float
    osMinorVersion: Float
    requestId: Float
    wProcessorArch: Float
}

"columns and relationships of \"vectric.upgrade_tokens\""
type vectric_upgrade_tokens {
    customerId: bigint!
    dateCreated: timestamptz!
    dateUsed: timestamptz
    "An object relationship"
    fromProduct: vectric_sales_salesitem_products!
    orderItemProductId: bigint!
    "An object relationship"
    toProduct: vectric_products_upgrade_eligibility
    token: String!
    upgradeEligibilityId: bigint
    upgradedToOrderItemProduct: bigint
    used: Boolean!
}

"aggregated selection of \"vectric.upgrade_tokens\""
type vectric_upgrade_tokens_aggregate {
    aggregate: vectric_upgrade_tokens_aggregate_fields
    nodes: [vectric_upgrade_tokens!]!
}

"aggregate fields of \"vectric.upgrade_tokens\""
type vectric_upgrade_tokens_aggregate_fields {
    avg: vectric_upgrade_tokens_avg_fields
    count(columns: [vectric_upgrade_tokens_select_column!], distinct: Boolean): Int!
    max: vectric_upgrade_tokens_max_fields
    min: vectric_upgrade_tokens_min_fields
    stddev: vectric_upgrade_tokens_stddev_fields
    stddev_pop: vectric_upgrade_tokens_stddev_pop_fields
    stddev_samp: vectric_upgrade_tokens_stddev_samp_fields
    sum: vectric_upgrade_tokens_sum_fields
    var_pop: vectric_upgrade_tokens_var_pop_fields
    var_samp: vectric_upgrade_tokens_var_samp_fields
    variance: vectric_upgrade_tokens_variance_fields
}

"aggregate avg on columns"
type vectric_upgrade_tokens_avg_fields {
    customerId: Float
    orderItemProductId: Float
    upgradeEligibilityId: Float
    upgradedToOrderItemProduct: Float
}

"aggregate max on columns"
type vectric_upgrade_tokens_max_fields {
    customerId: bigint
    dateCreated: timestamptz
    dateUsed: timestamptz
    orderItemProductId: bigint
    token: String
    upgradeEligibilityId: bigint
    upgradedToOrderItemProduct: bigint
}

"aggregate min on columns"
type vectric_upgrade_tokens_min_fields {
    customerId: bigint
    dateCreated: timestamptz
    dateUsed: timestamptz
    orderItemProductId: bigint
    token: String
    upgradeEligibilityId: bigint
    upgradedToOrderItemProduct: bigint
}

"response of any mutation on the table \"vectric.upgrade_tokens\""
type vectric_upgrade_tokens_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_upgrade_tokens!]!
}

"aggregate stddev on columns"
type vectric_upgrade_tokens_stddev_fields {
    customerId: Float
    orderItemProductId: Float
    upgradeEligibilityId: Float
    upgradedToOrderItemProduct: Float
}

"aggregate stddev_pop on columns"
type vectric_upgrade_tokens_stddev_pop_fields {
    customerId: Float
    orderItemProductId: Float
    upgradeEligibilityId: Float
    upgradedToOrderItemProduct: Float
}

"aggregate stddev_samp on columns"
type vectric_upgrade_tokens_stddev_samp_fields {
    customerId: Float
    orderItemProductId: Float
    upgradeEligibilityId: Float
    upgradedToOrderItemProduct: Float
}

"aggregate sum on columns"
type vectric_upgrade_tokens_sum_fields {
    customerId: bigint
    orderItemProductId: bigint
    upgradeEligibilityId: bigint
    upgradedToOrderItemProduct: bigint
}

"aggregate var_pop on columns"
type vectric_upgrade_tokens_var_pop_fields {
    customerId: Float
    orderItemProductId: Float
    upgradeEligibilityId: Float
    upgradedToOrderItemProduct: Float
}

"aggregate var_samp on columns"
type vectric_upgrade_tokens_var_samp_fields {
    customerId: Float
    orderItemProductId: Float
    upgradeEligibilityId: Float
    upgradedToOrderItemProduct: Float
}

"aggregate variance on columns"
type vectric_upgrade_tokens_variance_fields {
    customerId: Float
    orderItemProductId: Float
    upgradeEligibilityId: Float
    upgradedToOrderItemProduct: Float
}

"columns and relationships of \"vectric.upgrades_feature\""
type vectric_upgrades_feature {
    enabled: Boolean!
    extendedDescription: String
    featureId: String!
    title: String
    "An array relationship"
    upgradeProductTypeFeatures(
        "distinct select on columns"
        distinct_on: [vectric_upgrades_product_type_feature_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrades_product_type_feature_order_by!],
        "filter the rows returned"
        where: vectric_upgrades_product_type_feature_bool_exp
    ): [vectric_upgrades_product_type_feature!]!
    "An aggregate relationship"
    upgradeProductTypeFeatures_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_upgrades_product_type_feature_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrades_product_type_feature_order_by!],
        "filter the rows returned"
        where: vectric_upgrades_product_type_feature_bool_exp
    ): vectric_upgrades_product_type_feature_aggregate!
    "fetch data from the table: \"vectric.upgrades_version_feature\""
    upgradeVersionFeatures(
        "distinct select on columns"
        distinct_on: [vectric_upgrades_version_feature_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrades_version_feature_order_by!],
        "filter the rows returned"
        where: vectric_upgrades_version_feature_bool_exp
    ): [vectric_upgrades_version_feature!]!
    "An aggregate relationship"
    upgradeVersionFeatures_aggregate(
        "distinct select on columns"
        distinct_on: [vectric_upgrades_version_feature_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [vectric_upgrades_version_feature_order_by!],
        "filter the rows returned"
        where: vectric_upgrades_version_feature_bool_exp
    ): vectric_upgrades_version_feature_aggregate!
}

"aggregated selection of \"vectric.upgrades_feature\""
type vectric_upgrades_feature_aggregate {
    aggregate: vectric_upgrades_feature_aggregate_fields
    nodes: [vectric_upgrades_feature!]!
}

"aggregate fields of \"vectric.upgrades_feature\""
type vectric_upgrades_feature_aggregate_fields {
    count(columns: [vectric_upgrades_feature_select_column!], distinct: Boolean): Int!
    max: vectric_upgrades_feature_max_fields
    min: vectric_upgrades_feature_min_fields
}

"aggregate max on columns"
type vectric_upgrades_feature_max_fields {
    extendedDescription: String
    featureId: String
    title: String
}

"aggregate min on columns"
type vectric_upgrades_feature_min_fields {
    extendedDescription: String
    featureId: String
    title: String
}

"response of any mutation on the table \"vectric.upgrades_feature\""
type vectric_upgrades_feature_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_upgrades_feature!]!
}

"columns and relationships of \"vectric.upgrades_product_type_feature\""
type vectric_upgrades_product_type_feature {
    feature: String
    fromProductType: bigint!
    "An object relationship"
    fromProductTypeObject: vectric_products_producttype!
    ranking: bigint
    toProductType: bigint!
    "An object relationship"
    toProductTypeObject: vectric_products_producttype!
    "An object relationship"
    upgradeFeatureObject: vectric_upgrades_feature
    upgradeId: bigint!
}

"aggregated selection of \"vectric.upgrades_product_type_feature\""
type vectric_upgrades_product_type_feature_aggregate {
    aggregate: vectric_upgrades_product_type_feature_aggregate_fields
    nodes: [vectric_upgrades_product_type_feature!]!
}

"aggregate fields of \"vectric.upgrades_product_type_feature\""
type vectric_upgrades_product_type_feature_aggregate_fields {
    avg: vectric_upgrades_product_type_feature_avg_fields
    count(columns: [vectric_upgrades_product_type_feature_select_column!], distinct: Boolean): Int!
    max: vectric_upgrades_product_type_feature_max_fields
    min: vectric_upgrades_product_type_feature_min_fields
    stddev: vectric_upgrades_product_type_feature_stddev_fields
    stddev_pop: vectric_upgrades_product_type_feature_stddev_pop_fields
    stddev_samp: vectric_upgrades_product_type_feature_stddev_samp_fields
    sum: vectric_upgrades_product_type_feature_sum_fields
    var_pop: vectric_upgrades_product_type_feature_var_pop_fields
    var_samp: vectric_upgrades_product_type_feature_var_samp_fields
    variance: vectric_upgrades_product_type_feature_variance_fields
}

"aggregate avg on columns"
type vectric_upgrades_product_type_feature_avg_fields {
    fromProductType: Float
    ranking: Float
    toProductType: Float
    upgradeId: Float
}

"aggregate max on columns"
type vectric_upgrades_product_type_feature_max_fields {
    feature: String
    fromProductType: bigint
    ranking: bigint
    toProductType: bigint
    upgradeId: bigint
}

"aggregate min on columns"
type vectric_upgrades_product_type_feature_min_fields {
    feature: String
    fromProductType: bigint
    ranking: bigint
    toProductType: bigint
    upgradeId: bigint
}

"response of any mutation on the table \"vectric.upgrades_product_type_feature\""
type vectric_upgrades_product_type_feature_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_upgrades_product_type_feature!]!
}

"aggregate stddev on columns"
type vectric_upgrades_product_type_feature_stddev_fields {
    fromProductType: Float
    ranking: Float
    toProductType: Float
    upgradeId: Float
}

"aggregate stddev_pop on columns"
type vectric_upgrades_product_type_feature_stddev_pop_fields {
    fromProductType: Float
    ranking: Float
    toProductType: Float
    upgradeId: Float
}

"aggregate stddev_samp on columns"
type vectric_upgrades_product_type_feature_stddev_samp_fields {
    fromProductType: Float
    ranking: Float
    toProductType: Float
    upgradeId: Float
}

"aggregate sum on columns"
type vectric_upgrades_product_type_feature_sum_fields {
    fromProductType: bigint
    ranking: bigint
    toProductType: bigint
    upgradeId: bigint
}

"aggregate var_pop on columns"
type vectric_upgrades_product_type_feature_var_pop_fields {
    fromProductType: Float
    ranking: Float
    toProductType: Float
    upgradeId: Float
}

"aggregate var_samp on columns"
type vectric_upgrades_product_type_feature_var_samp_fields {
    fromProductType: Float
    ranking: Float
    toProductType: Float
    upgradeId: Float
}

"aggregate variance on columns"
type vectric_upgrades_product_type_feature_variance_fields {
    fromProductType: Float
    ranking: Float
    toProductType: Float
    upgradeId: Float
}

"columns and relationships of \"vectric.upgrades_version_feature\""
type vectric_upgrades_version_feature {
    feature: String
    majorVersion: bigint
    minorVersion: bigint
    productType: bigint!
    "An object relationship"
    productTypeObject: vectric_products_producttype!
    ranking: bigint
    "An object relationship"
    upgradeFeatureObject: vectric_upgrades_feature
    upgradeId: bigint!
}

"aggregated selection of \"vectric.upgrades_version_feature\""
type vectric_upgrades_version_feature_aggregate {
    aggregate: vectric_upgrades_version_feature_aggregate_fields
    nodes: [vectric_upgrades_version_feature!]!
}

"aggregate fields of \"vectric.upgrades_version_feature\""
type vectric_upgrades_version_feature_aggregate_fields {
    avg: vectric_upgrades_version_feature_avg_fields
    count(columns: [vectric_upgrades_version_feature_select_column!], distinct: Boolean): Int!
    max: vectric_upgrades_version_feature_max_fields
    min: vectric_upgrades_version_feature_min_fields
    stddev: vectric_upgrades_version_feature_stddev_fields
    stddev_pop: vectric_upgrades_version_feature_stddev_pop_fields
    stddev_samp: vectric_upgrades_version_feature_stddev_samp_fields
    sum: vectric_upgrades_version_feature_sum_fields
    var_pop: vectric_upgrades_version_feature_var_pop_fields
    var_samp: vectric_upgrades_version_feature_var_samp_fields
    variance: vectric_upgrades_version_feature_variance_fields
}

"aggregate avg on columns"
type vectric_upgrades_version_feature_avg_fields {
    majorVersion: Float
    minorVersion: Float
    productType: Float
    ranking: Float
    upgradeId: Float
}

"aggregate max on columns"
type vectric_upgrades_version_feature_max_fields {
    feature: String
    majorVersion: bigint
    minorVersion: bigint
    productType: bigint
    ranking: bigint
    upgradeId: bigint
}

"aggregate min on columns"
type vectric_upgrades_version_feature_min_fields {
    feature: String
    majorVersion: bigint
    minorVersion: bigint
    productType: bigint
    ranking: bigint
    upgradeId: bigint
}

"response of any mutation on the table \"vectric.upgrades_version_feature\""
type vectric_upgrades_version_feature_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_upgrades_version_feature!]!
}

"aggregate stddev on columns"
type vectric_upgrades_version_feature_stddev_fields {
    majorVersion: Float
    minorVersion: Float
    productType: Float
    ranking: Float
    upgradeId: Float
}

"aggregate stddev_pop on columns"
type vectric_upgrades_version_feature_stddev_pop_fields {
    majorVersion: Float
    minorVersion: Float
    productType: Float
    ranking: Float
    upgradeId: Float
}

"aggregate stddev_samp on columns"
type vectric_upgrades_version_feature_stddev_samp_fields {
    majorVersion: Float
    minorVersion: Float
    productType: Float
    ranking: Float
    upgradeId: Float
}

"aggregate sum on columns"
type vectric_upgrades_version_feature_sum_fields {
    majorVersion: bigint
    minorVersion: bigint
    productType: bigint
    ranking: bigint
    upgradeId: bigint
}

"aggregate var_pop on columns"
type vectric_upgrades_version_feature_var_pop_fields {
    majorVersion: Float
    minorVersion: Float
    productType: Float
    ranking: Float
    upgradeId: Float
}

"aggregate var_samp on columns"
type vectric_upgrades_version_feature_var_samp_fields {
    majorVersion: Float
    minorVersion: Float
    productType: Float
    ranking: Float
    upgradeId: Float
}

"aggregate variance on columns"
type vectric_upgrades_version_feature_variance_fields {
    majorVersion: Float
    minorVersion: Float
    productType: Float
    ranking: Float
    upgradeId: Float
}

"columns and relationships of \"vectric.usergroup_2019_attendees\""
type vectric_usergroup_2019_attendees {
    attendeeid: bigint!
    bringingsample: Boolean
    company: String
    customerid: bigint
    diet: String
    email: String
    fastspringreference: String
    firstname: String
    forumname: String
    lastname: String
    notes: String
    productid: bigint
    purchasedate: timestamptz
    reference: String!
    state: String
    status: String
    tshirtsize: String
    uk: Boolean
}

"aggregated selection of \"vectric.usergroup_2019_attendees\""
type vectric_usergroup_2019_attendees_aggregate {
    aggregate: vectric_usergroup_2019_attendees_aggregate_fields
    nodes: [vectric_usergroup_2019_attendees!]!
}

"aggregate fields of \"vectric.usergroup_2019_attendees\""
type vectric_usergroup_2019_attendees_aggregate_fields {
    avg: vectric_usergroup_2019_attendees_avg_fields
    count(columns: [vectric_usergroup_2019_attendees_select_column!], distinct: Boolean): Int!
    max: vectric_usergroup_2019_attendees_max_fields
    min: vectric_usergroup_2019_attendees_min_fields
    stddev: vectric_usergroup_2019_attendees_stddev_fields
    stddev_pop: vectric_usergroup_2019_attendees_stddev_pop_fields
    stddev_samp: vectric_usergroup_2019_attendees_stddev_samp_fields
    sum: vectric_usergroup_2019_attendees_sum_fields
    var_pop: vectric_usergroup_2019_attendees_var_pop_fields
    var_samp: vectric_usergroup_2019_attendees_var_samp_fields
    variance: vectric_usergroup_2019_attendees_variance_fields
}

"aggregate avg on columns"
type vectric_usergroup_2019_attendees_avg_fields {
    attendeeid: Float
    customerid: Float
    productid: Float
}

"aggregate max on columns"
type vectric_usergroup_2019_attendees_max_fields {
    attendeeid: bigint
    company: String
    customerid: bigint
    diet: String
    email: String
    fastspringreference: String
    firstname: String
    forumname: String
    lastname: String
    notes: String
    productid: bigint
    purchasedate: timestamptz
    reference: String
    state: String
    status: String
    tshirtsize: String
}

"aggregate min on columns"
type vectric_usergroup_2019_attendees_min_fields {
    attendeeid: bigint
    company: String
    customerid: bigint
    diet: String
    email: String
    fastspringreference: String
    firstname: String
    forumname: String
    lastname: String
    notes: String
    productid: bigint
    purchasedate: timestamptz
    reference: String
    state: String
    status: String
    tshirtsize: String
}

"response of any mutation on the table \"vectric.usergroup_2019_attendees\""
type vectric_usergroup_2019_attendees_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_usergroup_2019_attendees!]!
}

"aggregate stddev on columns"
type vectric_usergroup_2019_attendees_stddev_fields {
    attendeeid: Float
    customerid: Float
    productid: Float
}

"aggregate stddev_pop on columns"
type vectric_usergroup_2019_attendees_stddev_pop_fields {
    attendeeid: Float
    customerid: Float
    productid: Float
}

"aggregate stddev_samp on columns"
type vectric_usergroup_2019_attendees_stddev_samp_fields {
    attendeeid: Float
    customerid: Float
    productid: Float
}

"aggregate sum on columns"
type vectric_usergroup_2019_attendees_sum_fields {
    attendeeid: bigint
    customerid: bigint
    productid: bigint
}

"aggregate var_pop on columns"
type vectric_usergroup_2019_attendees_var_pop_fields {
    attendeeid: Float
    customerid: Float
    productid: Float
}

"aggregate var_samp on columns"
type vectric_usergroup_2019_attendees_var_samp_fields {
    attendeeid: Float
    customerid: Float
    productid: Float
}

"aggregate variance on columns"
type vectric_usergroup_2019_attendees_variance_fields {
    attendeeid: Float
    customerid: Float
    productid: Float
}

"columns and relationships of \"vectric.usergroup_2019_waitlist\""
type vectric_usergroup_2019_waitlist {
    attendeeid: bigint!
    customerid: bigint
    desiredquantity: bigint!
    email: String
    invitationdate: timestamptz
    productid: bigint
    reference: String!
    status: String
}

"aggregated selection of \"vectric.usergroup_2019_waitlist\""
type vectric_usergroup_2019_waitlist_aggregate {
    aggregate: vectric_usergroup_2019_waitlist_aggregate_fields
    nodes: [vectric_usergroup_2019_waitlist!]!
}

"aggregate fields of \"vectric.usergroup_2019_waitlist\""
type vectric_usergroup_2019_waitlist_aggregate_fields {
    avg: vectric_usergroup_2019_waitlist_avg_fields
    count(columns: [vectric_usergroup_2019_waitlist_select_column!], distinct: Boolean): Int!
    max: vectric_usergroup_2019_waitlist_max_fields
    min: vectric_usergroup_2019_waitlist_min_fields
    stddev: vectric_usergroup_2019_waitlist_stddev_fields
    stddev_pop: vectric_usergroup_2019_waitlist_stddev_pop_fields
    stddev_samp: vectric_usergroup_2019_waitlist_stddev_samp_fields
    sum: vectric_usergroup_2019_waitlist_sum_fields
    var_pop: vectric_usergroup_2019_waitlist_var_pop_fields
    var_samp: vectric_usergroup_2019_waitlist_var_samp_fields
    variance: vectric_usergroup_2019_waitlist_variance_fields
}

"aggregate avg on columns"
type vectric_usergroup_2019_waitlist_avg_fields {
    attendeeid: Float
    customerid: Float
    desiredquantity: Float
    productid: Float
}

"aggregate max on columns"
type vectric_usergroup_2019_waitlist_max_fields {
    attendeeid: bigint
    customerid: bigint
    desiredquantity: bigint
    email: String
    invitationdate: timestamptz
    productid: bigint
    reference: String
    status: String
}

"aggregate min on columns"
type vectric_usergroup_2019_waitlist_min_fields {
    attendeeid: bigint
    customerid: bigint
    desiredquantity: bigint
    email: String
    invitationdate: timestamptz
    productid: bigint
    reference: String
    status: String
}

"response of any mutation on the table \"vectric.usergroup_2019_waitlist\""
type vectric_usergroup_2019_waitlist_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_usergroup_2019_waitlist!]!
}

"aggregate stddev on columns"
type vectric_usergroup_2019_waitlist_stddev_fields {
    attendeeid: Float
    customerid: Float
    desiredquantity: Float
    productid: Float
}

"aggregate stddev_pop on columns"
type vectric_usergroup_2019_waitlist_stddev_pop_fields {
    attendeeid: Float
    customerid: Float
    desiredquantity: Float
    productid: Float
}

"aggregate stddev_samp on columns"
type vectric_usergroup_2019_waitlist_stddev_samp_fields {
    attendeeid: Float
    customerid: Float
    desiredquantity: Float
    productid: Float
}

"aggregate sum on columns"
type vectric_usergroup_2019_waitlist_sum_fields {
    attendeeid: bigint
    customerid: bigint
    desiredquantity: bigint
    productid: bigint
}

"aggregate var_pop on columns"
type vectric_usergroup_2019_waitlist_var_pop_fields {
    attendeeid: Float
    customerid: Float
    desiredquantity: Float
    productid: Float
}

"aggregate var_samp on columns"
type vectric_usergroup_2019_waitlist_var_samp_fields {
    attendeeid: Float
    customerid: Float
    desiredquantity: Float
    productid: Float
}

"aggregate variance on columns"
type vectric_usergroup_2019_waitlist_variance_fields {
    attendeeid: Float
    customerid: Float
    desiredquantity: Float
    productid: Float
}

"columns and relationships of \"vectric.version_code\""
type vectric_version_code {
    displayVersion: String
    latest: Boolean!
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    notifying: Boolean
    patchUrl: String
    releaseDate: date
    url: String
    versionCodeId: bigint!
    visible: Boolean!
}

"aggregated selection of \"vectric.version_code\""
type vectric_version_code_aggregate {
    aggregate: vectric_version_code_aggregate_fields
    nodes: [vectric_version_code!]!
}

"aggregate fields of \"vectric.version_code\""
type vectric_version_code_aggregate_fields {
    avg: vectric_version_code_avg_fields
    count(columns: [vectric_version_code_select_column!], distinct: Boolean): Int!
    max: vectric_version_code_max_fields
    min: vectric_version_code_min_fields
    stddev: vectric_version_code_stddev_fields
    stddev_pop: vectric_version_code_stddev_pop_fields
    stddev_samp: vectric_version_code_stddev_samp_fields
    sum: vectric_version_code_sum_fields
    var_pop: vectric_version_code_var_pop_fields
    var_samp: vectric_version_code_var_samp_fields
    variance: vectric_version_code_variance_fields
}

"aggregate avg on columns"
type vectric_version_code_avg_fields {
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    versionCodeId: Float
}

"aggregate max on columns"
type vectric_version_code_max_fields {
    displayVersion: String
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    patchUrl: String
    releaseDate: date
    url: String
    versionCodeId: bigint
}

"aggregate min on columns"
type vectric_version_code_min_fields {
    displayVersion: String
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    patchUrl: String
    releaseDate: date
    url: String
    versionCodeId: bigint
}

"response of any mutation on the table \"vectric.version_code\""
type vectric_version_code_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [vectric_version_code!]!
}

"aggregate stddev on columns"
type vectric_version_code_stddev_fields {
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    versionCodeId: Float
}

"aggregate stddev_pop on columns"
type vectric_version_code_stddev_pop_fields {
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    versionCodeId: Float
}

"aggregate stddev_samp on columns"
type vectric_version_code_stddev_samp_fields {
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    versionCodeId: Float
}

"aggregate sum on columns"
type vectric_version_code_sum_fields {
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    versionCodeId: bigint
}

"aggregate var_pop on columns"
type vectric_version_code_var_pop_fields {
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    versionCodeId: Float
}

"aggregate var_samp on columns"
type vectric_version_code_var_samp_fields {
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    versionCodeId: Float
}

"aggregate variance on columns"
type vectric_version_code_variance_fields {
    majorVersion: Float
    minorVersionOOX: Float
    minorVersionOXO: Float
    minorVersionXOO: Float
    versionCodeId: Float
}

"column ordering options"
enum order_by {
    "in ascending order, nulls last"
    asc
    "in ascending order, nulls first"
    asc_nulls_first
    "in ascending order, nulls last"
    asc_nulls_last
    "in descending order, nulls first"
    desc
    "in descending order, nulls first"
    desc_nulls_first
    "in descending order, nulls last"
    desc_nulls_last
}

"select columns of table \"vectric.active_memberships\""
enum vectric_active_memberships_select_column {
    "column name"
    customerId
    "column name"
    isAdmin
    "column name"
    membershipId
    "column name"
    organizationId
    "column name"
    role
}

"select columns of table \"vectric.active_upgrades\""
enum vectric_active_upgrades_select_column {
    "column name"
    eligibility_id
    "column name"
    fastspring_id
    "column name"
    from_product_id
    "column name"
    from_product_name
    "column name"
    price
    "column name"
    summary
    "column name"
    to_product_id
    "column name"
    to_product_name
}

"select columns of table \"vectric.allocatable_bundles\""
enum vectric_allocatable_bundles_select_column {
    "column name"
    bundleId
    "column name"
    partnerId
    "column name"
    product
    "column name"
    productDisplayName
    "column name"
    typeDisplayName
}

"select columns of table \"vectric.allocatable_licence_count\""
enum vectric_allocatable_licence_count_select_column {
    "column name"
    availableCount
    "column name"
    oemPartnerId
    "column name"
    productId
}

"select columns of table \"vectric.allocated_bundles\""
enum vectric_allocated_bundles_select_column {
    "column name"
    allocatedby
    "column name"
    allocationbatch
    "column name"
    allocationtype
    "column name"
    bundleId
    "column name"
    dateAllocated
    "column name"
    dateCreated
    "column name"
    dateOriginallyRegistered
    "column name"
    notes
    "column name"
    partnerId
    "column name"
    product
    "column name"
    productDisplayName
    "column name"
    typeDisplayName
}

"unique or primary key constraints on table \"vectric.allocation_summary\""
enum vectric_allocation_summary_constraint {
    "unique or primary key constraint"
    allocation_summary_pkey
    "unique or primary key constraint"
    allocation_summary_type_batch_id_key
}

"unique or primary key constraints on table \"vectric.allocation_summary_file_type\""
enum vectric_allocation_summary_file_type_constraint {
    "unique or primary key constraint"
    allocation_summary_file_type_pkey
}

enum vectric_allocation_summary_file_type_enum {
    CSV
    TXT
}

"select columns of table \"vectric.allocation_summary_file_type\""
enum vectric_allocation_summary_file_type_select_column {
    "column name"
    type
}

"update columns of table \"vectric.allocation_summary_file_type\""
enum vectric_allocation_summary_file_type_update_column {
    "column name"
    type
}

"select columns of table \"vectric.allocation_summary\""
enum vectric_allocation_summary_select_column {
    "column name"
    batchId
    "column name"
    bucket
    "column name"
    id
    "column name"
    location
    "column name"
    partnerId
    "column name"
    signedUrl
    "column name"
    type
}

"update columns of table \"vectric.allocation_summary\""
enum vectric_allocation_summary_update_column {
    "column name"
    batchId
    "column name"
    bucket
    "column name"
    id
    "column name"
    location
    "column name"
    partnerId
    "column name"
    signedUrl
    "column name"
    type
}

"unique or primary key constraints on table \"vectric.continents\""
enum vectric_continents_constraint {
    "unique or primary key constraint"
    idx_109232_primary
}

"select columns of table \"vectric.continents\""
enum vectric_continents_select_column {
    "column name"
    code
    "column name"
    name
}

"update columns of table \"vectric.continents\""
enum vectric_continents_update_column {
    "column name"
    code
    "column name"
    name
}

"unique or primary key constraints on table \"vectric.countries\""
enum vectric_countries_constraint {
    "unique or primary key constraint"
    idx_109237_idx_code
    "unique or primary key constraint"
    idx_109237_primary
}

"select columns of table \"vectric.countries\""
enum vectric_countries_select_column {
    "column name"
    code
    "column name"
    continentcode
    "column name"
    countryid
    "column name"
    displayorder
    "column name"
    fullname
    "column name"
    iso3
    "column name"
    name
    "column name"
    number
}

"update columns of table \"vectric.countries\""
enum vectric_countries_update_column {
    "column name"
    code
    "column name"
    continentcode
    "column name"
    countryid
    "column name"
    displayorder
    "column name"
    fullname
    "column name"
    iso3
    "column name"
    name
    "column name"
    number
}

"unique or primary key constraints on table \"vectric.customer_area\""
enum vectric_customer_area_constraint {
    "unique or primary key constraint"
    customer_area_bucketname_objectname_key
    "unique or primary key constraint"
    idx_109244_customerid
    "unique or primary key constraint"
    idx_109244_primary
}

"unique or primary key constraints on table \"vectric.customer_area_file\""
enum vectric_customer_area_file_constraint {
    "unique or primary key constraint"
    customer_area_file_customerareaid_objectname_key
    "unique or primary key constraint"
    customer_area_file_customerareaid_productid_filekey_filename_ke
    "unique or primary key constraint"
    idx_109250_primary
}

"select columns of table \"vectric.customer_area_file\""
enum vectric_customer_area_file_select_column {
    "column name"
    customerAreaFileId
    "column name"
    customerAreaId
    "column name"
    dateUploaded
    "column name"
    fileKey
    "column name"
    fileName
    "column name"
    objectName
    "column name"
    productId
}

"update columns of table \"vectric.customer_area_file\""
enum vectric_customer_area_file_update_column {
    "column name"
    customerAreaFileId
    "column name"
    customerAreaId
    "column name"
    dateUploaded
    "column name"
    fileKey
    "column name"
    fileName
    "column name"
    objectName
    "column name"
    productId
}

"select columns of table \"vectric.customer_area\""
enum vectric_customer_area_select_column {
    "column name"
    bucketName
    "column name"
    customerAreaId
    "column name"
    customerId
    "column name"
    objectName
}

"update columns of table \"vectric.customer_area\""
enum vectric_customer_area_update_column {
    "column name"
    bucketName
    "column name"
    customerAreaId
    "column name"
    customerId
    "column name"
    objectName
}

"unique or primary key constraints on table \"vectric.customer_responses\""
enum vectric_customer_responses_constraint {
    "unique or primary key constraint"
    idx_109260_primary
}

"select columns of table \"vectric.customer_responses\""
enum vectric_customer_responses_select_column {
    "column name"
    customerid
    "column name"
    customerresponseid
    "column name"
    othertext
    "column name"
    questionid
    "column name"
    responseid
}

"update columns of table \"vectric.customer_responses\""
enum vectric_customer_responses_update_column {
    "column name"
    customerid
    "column name"
    customerresponseid
    "column name"
    othertext
    "column name"
    questionid
    "column name"
    responseid
}

"select columns of table \"vectric.customer_sales\""
enum vectric_customer_sales_select_column {
    "column name"
    customerId
    "column name"
    dateCreated
    "column name"
    orderDate
    "column name"
    orderId
    "column name"
    veccode
}

"unique or primary key constraints on table \"vectric.customer_status\""
enum vectric_customer_status_constraint {
    "unique or primary key constraint"
    idx_109269_primary
}

"select columns of table \"vectric.customer_status\""
enum vectric_customer_status_select_column {
    "column name"
    status
    "column name"
    statusId
}

"update columns of table \"vectric.customer_status\""
enum vectric_customer_status_update_column {
    "column name"
    status
    "column name"
    statusId
}

"unique or primary key constraints on table \"vectric.customer_zd_uploads\""
enum vectric_customer_zd_uploads_constraint {
    "unique or primary key constraint"
    idx_109281_primary
}

"select columns of table \"vectric.customer_zd_uploads\""
enum vectric_customer_zd_uploads_select_column {
    "column name"
    createdBy
    "column name"
    customerId
    "column name"
    dateCreated
    "column name"
    dateUploaded
    "column name"
    location
    "column name"
    objectName
    "column name"
    shorturlhash
    "column name"
    ticketId
    "column name"
    zdUploadId
}

"update columns of table \"vectric.customer_zd_uploads\""
enum vectric_customer_zd_uploads_update_column {
    "column name"
    createdBy
    "column name"
    customerId
    "column name"
    dateCreated
    "column name"
    dateUploaded
    "column name"
    location
    "column name"
    objectName
    "column name"
    shorturlhash
    "column name"
    ticketId
    "column name"
    zdUploadId
}

"unique or primary key constraints on table \"vectric.download\""
enum vectric_download_constraint {
    "unique or primary key constraint"
    idx_109322_primary
}

"unique or primary key constraints on table \"vectric.download_record\""
enum vectric_download_record_constraint {
    "unique or primary key constraint"
    idx_109334_primary
}

"select columns of table \"vectric.download_record\""
enum vectric_download_record_select_column {
    "column name"
    customerId
    "column name"
    downloadDate
    "column name"
    downloadId
    "column name"
    id
}

"update columns of table \"vectric.download_record\""
enum vectric_download_record_update_column {
    "column name"
    customerId
    "column name"
    downloadDate
    "column name"
    downloadId
    "column name"
    id
}

"select columns of table \"vectric.download\""
enum vectric_download_select_column {
    "column name"
    bucketName
    "column name"
    description
    "column name"
    downloadId
    "column name"
    downloadSize
    "column name"
    groupId
    "column name"
    name
    "column name"
    objectName
    "column name"
    previewImageUrl
    "column name"
    uploadDate
}

"update columns of table \"vectric.download\""
enum vectric_download_update_column {
    "column name"
    bucketName
    "column name"
    description
    "column name"
    downloadId
    "column name"
    downloadSize
    "column name"
    groupId
    "column name"
    name
    "column name"
    objectName
    "column name"
    previewImageUrl
    "column name"
    uploadDate
}

"unique or primary key constraints on table \"vectric.enhancement_tokens\""
enum vectric_enhancement_tokens_constraint {
    "unique or primary key constraint"
    idx_109359_primary
}

"select columns of table \"vectric.enhancement_tokens\""
enum vectric_enhancement_tokens_select_column {
    "column name"
    customerId
    "column name"
    dateCreated
    "column name"
    dateUsed
    "column name"
    enhancementEligibilityId
    "column name"
    enhancementOrderItemProductId
    "column name"
    orderItemProductId
    "column name"
    token
    "column name"
    used
}

"update columns of table \"vectric.enhancement_tokens\""
enum vectric_enhancement_tokens_update_column {
    "column name"
    customerId
    "column name"
    dateCreated
    "column name"
    dateUsed
    "column name"
    enhancementEligibilityId
    "column name"
    enhancementOrderItemProductId
    "column name"
    orderItemProductId
    "column name"
    token
    "column name"
    used
}

"select columns of table \"vectric.entitled_product_version_code_view\""
enum vectric_entitled_product_version_code_view_select_column {
    "column name"
    displayVersion
    "column name"
    entitled_product_id
    "column name"
    latest
    "column name"
    majorVersion
    "column name"
    minorVersionOOX
    "column name"
    minorVersionOXO
    "column name"
    minorVersionXOO
    "column name"
    notifying
    "column name"
    patchUrl
    "column name"
    releaseDate
    "column name"
    url
    "column name"
    versionCodeId
    "column name"
    visible
}

"unique or primary key constraints on table \"vectric.entitled_products\""
enum vectric_entitled_products_constraint {
    "unique or primary key constraint"
    entitled_products_pkey
    "unique or primary key constraint"
    entitled_products_product_name_key
}

"select columns of table \"vectric.entitled_products\""
enum vectric_entitled_products_select_column {
    "column name"
    enabled
    "column name"
    latestVersionId
    "column name"
    licenceType
    "column name"
    productId
    "column name"
    productName
    "column name"
    productTypeId
    "column name"
    releaseDate
    "column name"
    requiresLicence
}

"update columns of table \"vectric.entitled_products\""
enum vectric_entitled_products_update_column {
    "column name"
    enabled
    "column name"
    latestVersionId
    "column name"
    licenceType
    "column name"
    productId
    "column name"
    productName
    "column name"
    productTypeId
    "column name"
    releaseDate
    "column name"
    requiresLicence
}

"unique or primary key constraints on table \"vectric.entitlement_licences\""
enum vectric_entitlement_licences_constraint {
    "unique or primary key constraint"
    entitlement_licences_pkey
}

"select columns of table \"vectric.entitlement_licences\""
enum vectric_entitlement_licences_select_column {
    "column name"
    entitlementId
    "column name"
    entitlementLicenceId
    "column name"
    licenceCode
    "column name"
    licenceIdAsDisplay
    "column name"
    licenceType
    "column name"
    productId
    "column name"
    registeredUsername
}

"update columns of table \"vectric.entitlement_licences\""
enum vectric_entitlement_licences_update_column {
    "column name"
    entitlementId
    "column name"
    entitlementLicenceId
    "column name"
    licenceCode
    "column name"
    licenceIdAsDisplay
    "column name"
    licenceType
    "column name"
    productId
    "column name"
    registeredUsername
}

"unique or primary key constraints on table \"vectric.entitlements\""
enum vectric_entitlements_constraint {
    "unique or primary key constraint"
    entitlements_pkey
}

"select columns of table \"vectric.entitlements\""
enum vectric_entitlements_select_column {
    "column name"
    amendedBy
    "column name"
    createdBy
    "column name"
    dateAmended
    "column name"
    dateCreated
    "column name"
    entitledProductId
    "column name"
    entitlementId
    "column name"
    ownedItemId
    "column name"
    statusId
}

"update columns of table \"vectric.entitlements\""
enum vectric_entitlements_update_column {
    "column name"
    amendedBy
    "column name"
    createdBy
    "column name"
    dateAmended
    "column name"
    dateCreated
    "column name"
    entitledProductId
    "column name"
    entitlementId
    "column name"
    ownedItemId
    "column name"
    statusId
}

"unique or primary key constraints on table \"vectric.free_clipart_tokens\""
enum vectric_free_clipart_tokens_constraint {
    "unique or primary key constraint"
    idx_109428_primary
}

"select columns of table \"vectric.free_clipart_tokens\""
enum vectric_free_clipart_tokens_select_column {
    "column name"
    clipartToken
    "column name"
    completed
    "column name"
    customerId
    "column name"
    dateAdded
    "column name"
    dateSelected
    "column name"
    redeemableTokenOip
    "column name"
    replacementOip
    "column name"
    v10Product
}

"update columns of table \"vectric.free_clipart_tokens\""
enum vectric_free_clipart_tokens_update_column {
    "column name"
    clipartToken
    "column name"
    completed
    "column name"
    customerId
    "column name"
    dateAdded
    "column name"
    dateSelected
    "column name"
    redeemableTokenOip
    "column name"
    replacementOip
    "column name"
    v10Product
}

"unique or primary key constraints on table \"vectric.freeclipart_category\""
enum vectric_freeclipart_category_constraint {
    "unique or primary key constraint"
    idx_109411_name
    "unique or primary key constraint"
    idx_109411_primary
}

"select columns of table \"vectric.freeclipart_category\""
enum vectric_freeclipart_category_select_column {
    "column name"
    categoryId
    "column name"
    name
}

"update columns of table \"vectric.freeclipart_category\""
enum vectric_freeclipart_category_update_column {
    "column name"
    categoryId
    "column name"
    name
}

"unique or primary key constraints on table \"vectric.freeclipart\""
enum vectric_freeclipart_constraint {
    "unique or primary key constraint"
    idx_109402_accessid
    "unique or primary key constraint"
    idx_109402_primary
}

"unique or primary key constraints on table \"vectric.freeclipart_download_record\""
enum vectric_freeclipart_download_record_constraint {
    "unique or primary key constraint"
    idx_109417_primary
}

"select columns of table \"vectric.freeclipart_download_record\""
enum vectric_freeclipart_download_record_select_column {
    "column name"
    customerId
    "column name"
    downloadDate
    "column name"
    downloadId
    "column name"
    freeClipartResourceId
    "column name"
    ipAddress
}

"update columns of table \"vectric.freeclipart_download_record\""
enum vectric_freeclipart_download_record_update_column {
    "column name"
    customerId
    "column name"
    downloadDate
    "column name"
    downloadId
    "column name"
    freeClipartResourceId
    "column name"
    ipAddress
}

"select columns of table \"vectric.freeclipart\""
enum vectric_freeclipart_select_column {
    "column name"
    accessId
    "column name"
    categoryId
    "column name"
    freeClipartId
    "column name"
    location
    "column name"
    name
    "column name"
    objectName
    "column name"
    previewImgUrl
}

"update columns of table \"vectric.freeclipart\""
enum vectric_freeclipart_update_column {
    "column name"
    accessId
    "column name"
    categoryId
    "column name"
    freeClipartId
    "column name"
    location
    "column name"
    name
    "column name"
    objectName
    "column name"
    previewImgUrl
}

"select columns of table \"vectric.group_info\""
enum vectric_group_info_select_column {
    "column name"
    customerid
    "column name"
    group_id
    "column name"
    group_name
    "column name"
    role
}

"unique or primary key constraints on table \"vectric.group_roles\""
enum vectric_group_roles_constraint {
    "unique or primary key constraint"
    group_roles_pkey
}

"select columns of table \"vectric.group_roles\""
enum vectric_group_roles_select_column {
    "column name"
    id
    "column name"
    role
}

"update columns of table \"vectric.group_roles\""
enum vectric_group_roles_update_column {
    "column name"
    id
    "column name"
    role
}

"unique or primary key constraints on table \"vectric.group_user_role\""
enum vectric_group_user_role_constraint {
    "unique or primary key constraint"
    group_user_role_pkey
}

"select columns of table \"vectric.group_user_role\""
enum vectric_group_user_role_select_column {
    "column name"
    customer_id
    "column name"
    group_id
    "column name"
    role_id
}

"update columns of table \"vectric.group_user_role\""
enum vectric_group_user_role_update_column {
    "column name"
    customer_id
    "column name"
    group_id
    "column name"
    role_id
}

"unique or primary key constraints on table \"vectric.groups\""
enum vectric_groups_constraint {
    "unique or primary key constraint"
    groups_pkey
}

"select columns of table \"vectric.groups\""
enum vectric_groups_select_column {
    "column name"
    created_at
    "column name"
    group_name
    "column name"
    id
}

"update columns of table \"vectric.groups\""
enum vectric_groups_update_column {
    "column name"
    created_at
    "column name"
    group_name
    "column name"
    id
}

"unique or primary key constraints on table \"vectric.language_codes\""
enum vectric_language_codes_constraint {
    "unique or primary key constraint"
    idx_109432_primary
}

"select columns of table \"vectric.language_codes\""
enum vectric_language_codes_select_column {
    "column name"
    name
    "column name"
    threeLetterCode
    "column name"
    twoLetterCode
}

"update columns of table \"vectric.language_codes\""
enum vectric_language_codes_update_column {
    "column name"
    name
    "column name"
    threeLetterCode
    "column name"
    twoLetterCode
}

"unique or primary key constraints on table \"vectric.licence_log\""
enum vectric_licence_log_constraint {
    "unique or primary key constraint"
    idx_109437_primary
}

"select columns of table \"vectric.licence_log\""
enum vectric_licence_log_select_column {
    "column name"
    batchId
    "column name"
    createdBy
    "column name"
    dateCreated
    "column name"
    licenceCode
    "column name"
    licenceId
    "column name"
    oemLicenceId
    "column name"
    productName
    "column name"
    registeredUsername
    "column name"
    shortUrlHash
}

"update columns of table \"vectric.licence_log\""
enum vectric_licence_log_update_column {
    "column name"
    batchId
    "column name"
    createdBy
    "column name"
    dateCreated
    "column name"
    licenceCode
    "column name"
    licenceId
    "column name"
    oemLicenceId
    "column name"
    productName
    "column name"
    registeredUsername
    "column name"
    shortUrlHash
}

"unique or primary key constraints on table \"vectric.linkshortener_links\""
enum vectric_linkshortener_links_constraint {
    "unique or primary key constraint"
    idx_109444_primary
}

"select columns of table \"vectric.linkshortener_links\""
enum vectric_linkshortener_links_select_column {
    "column name"
    expiryDate
    "column name"
    limitDownloads
    "column name"
    longUrl
    "column name"
    remainingDownloads
    "column name"
    shortUrlHash
}

"update columns of table \"vectric.linkshortener_links\""
enum vectric_linkshortener_links_update_column {
    "column name"
    expiryDate
    "column name"
    limitDownloads
    "column name"
    longUrl
    "column name"
    remainingDownloads
    "column name"
    shortUrlHash
}

"unique or primary key constraints on table \"vectric.makerspace_requests\""
enum vectric_makerspace_requests_constraint {
    "unique or primary key constraint"
    idx_109453_primary
}

"select columns of table \"vectric.makerspace_requests\""
enum vectric_makerspace_requests_select_column {
    "column name"
    ipAddress
    "column name"
    licenceCode
    "column name"
    licenceGenerated
    "column name"
    makerspaceDiskId
    "column name"
    makerspaceId
    "column name"
    requestDate
    "column name"
    requestId
    "column name"
    salesItemProductId
    "column name"
    trialDiskId
    "column name"
    trialLayerUuid
}

"update columns of table \"vectric.makerspace_requests\""
enum vectric_makerspace_requests_update_column {
    "column name"
    ipAddress
    "column name"
    licenceCode
    "column name"
    licenceGenerated
    "column name"
    makerspaceDiskId
    "column name"
    makerspaceId
    "column name"
    requestDate
    "column name"
    requestId
    "column name"
    salesItemProductId
    "column name"
    trialDiskId
    "column name"
    trialLayerUuid
}

"unique or primary key constraints on table \"vectric.membership_invitation_status\""
enum vectric_membership_invitation_status_constraint {
    "unique or primary key constraint"
    membership_invitation_status_pkey
}

enum vectric_membership_invitation_status_enum {
    ACCEPTED
    DECLINED
    PENDING
}

"select columns of table \"vectric.membership_invitation_status\""
enum vectric_membership_invitation_status_select_column {
    "column name"
    status
}

"update columns of table \"vectric.membership_invitation_status\""
enum vectric_membership_invitation_status_update_column {
    "column name"
    status
}

"unique or primary key constraints on table \"vectric.membership_invitations\""
enum vectric_membership_invitations_constraint {
    "unique or primary key constraint"
    memberships_invitations_pkey
}

"select columns of table \"vectric.membership_invitations\""
enum vectric_membership_invitations_select_column {
    "column name"
    dateInvited
    "column name"
    dateProcessed
    "column name"
    email
    "column name"
    invitationId
    "column name"
    invitationStatus
    "column name"
    invitedBy
    "column name"
    membershipId
    "column name"
    organizationId
    "column name"
    token
}

"update columns of table \"vectric.membership_invitations\""
enum vectric_membership_invitations_update_column {
    "column name"
    dateInvited
    "column name"
    dateProcessed
    "column name"
    email
    "column name"
    invitationId
    "column name"
    invitationStatus
    "column name"
    invitedBy
    "column name"
    membershipId
    "column name"
    organizationId
    "column name"
    token
}

"unique or primary key constraints on table \"vectric.membership_roles\""
enum vectric_membership_roles_constraint {
    "unique or primary key constraint"
    membership_roles_pky
}

enum vectric_membership_roles_enum {
    ADMIN
    USER
}

"select columns of table \"vectric.membership_roles\""
enum vectric_membership_roles_select_column {
    "column name"
    role
}

"update columns of table \"vectric.membership_roles\""
enum vectric_membership_roles_update_column {
    "column name"
    role
}

"unique or primary key constraints on table \"vectric.membership_status\""
enum vectric_membership_status_constraint {
    "unique or primary key constraint"
    membership_status_pkey
}

enum vectric_membership_status_enum {
    ACTIVE
    DECLINED
    DISABLED
    PENDING
}

"select columns of table \"vectric.membership_status\""
enum vectric_membership_status_select_column {
    "column name"
    status
}

"update columns of table \"vectric.membership_status\""
enum vectric_membership_status_update_column {
    "column name"
    status
}

"unique or primary key constraints on table \"vectric.memberships\""
enum vectric_memberships_constraint {
    "unique or primary key constraint"
    group_users_pkey
    "unique or primary key constraint"
    memberships_organization_id_customer_id_key
}

"select columns of table \"vectric.memberships\""
enum vectric_memberships_select_column {
    "column name"
    addedBy
    "column name"
    amendedBy
    "column name"
    customerId
    "column name"
    dateAdded
    "column name"
    dateAmended
    "column name"
    membershipId
    "column name"
    organizationId
    "column name"
    role
    "column name"
    status
}

"update columns of table \"vectric.memberships\""
enum vectric_memberships_update_column {
    "column name"
    addedBy
    "column name"
    amendedBy
    "column name"
    customerId
    "column name"
    dateAdded
    "column name"
    dateAmended
    "column name"
    membershipId
    "column name"
    organizationId
    "column name"
    role
    "column name"
    status
}

"unique or primary key constraints on table \"vectric.oauth_client_details\""
enum vectric_oauth_client_details_constraint {
    "unique or primary key constraint"
    idx_109463_primary
}

"select columns of table \"vectric.oauth_client_details\""
enum vectric_oauth_client_details_select_column {
    "column name"
    access_token_validity
    "column name"
    additional_information
    "column name"
    authorities
    "column name"
    authorized_grant_types
    "column name"
    autoapprove
    "column name"
    client_id
    "column name"
    client_secret
    "column name"
    refresh_token_validity
    "column name"
    resource_ids
    "column name"
    scope
    "column name"
    web_server_redirect_uri
}

"update columns of table \"vectric.oauth_client_details\""
enum vectric_oauth_client_details_update_column {
    "column name"
    access_token_validity
    "column name"
    additional_information
    "column name"
    authorities
    "column name"
    authorized_grant_types
    "column name"
    autoapprove
    "column name"
    client_id
    "column name"
    client_secret
    "column name"
    refresh_token_validity
    "column name"
    resource_ids
    "column name"
    scope
    "column name"
    web_server_redirect_uri
}

"select columns of table \"vectric.oem_allocation_emails\""
enum vectric_oem_allocation_emails_select_column {
    "column name"
    bundle_id
    "column name"
    date
    "column name"
    email_to
    "column name"
    oem_customer_id
    "column name"
    partner_id
}

"unique or primary key constraints on table \"vectric.oem_detailed_products\""
enum vectric_oem_detailed_products_constraint {
    "unique or primary key constraint"
    idx_109483_primary
}

"select columns of table \"vectric.oem_detailed_products\""
enum vectric_oem_detailed_products_select_column {
    "column name"
    id
    "column name"
    oemProductId
    "column name"
    productId
}

"update columns of table \"vectric.oem_detailed_products\""
enum vectric_oem_detailed_products_update_column {
    "column name"
    id
    "column name"
    oemProductId
    "column name"
    productId
}

"unique or primary key constraints on table \"vectric.oem_eval_request\""
enum vectric_oem_eval_request_constraint {
    "unique or primary key constraint"
    idx_109510_primary
}

"select columns of table \"vectric.oem_eval_request\""
enum vectric_oem_eval_request_select_column {
    "column name"
    customerId
    "column name"
    dateProcessed
    "column name"
    dateRequested
    "column name"
    expired
    "column name"
    granted
    "column name"
    partnerId
    "column name"
    processed
    "column name"
    processedBy
    "column name"
    replacedBy
    "column name"
    requestId
    "column name"
    requestedBy
    "column name"
    vloggerId
}

"update columns of table \"vectric.oem_eval_request\""
enum vectric_oem_eval_request_update_column {
    "column name"
    customerId
    "column name"
    dateProcessed
    "column name"
    dateRequested
    "column name"
    expired
    "column name"
    granted
    "column name"
    partnerId
    "column name"
    processed
    "column name"
    processedBy
    "column name"
    replacedBy
    "column name"
    requestId
    "column name"
    requestedBy
    "column name"
    vloggerId
}

"unique or primary key constraints on table \"vectric.oem_fastspring_item_bundle\""
enum vectric_oem_fastspring_item_bundle_constraint {
    "unique or primary key constraint"
    idx_109525_bundleid_unique
    "unique or primary key constraint"
    idx_109525_primary
}

"select columns of table \"vectric.oem_fastspring_item_bundle\""
enum vectric_oem_fastspring_item_bundle_select_column {
    "column name"
    bundleId
    "column name"
    fastspringItemId
    "column name"
    itemBundleId
}

"update columns of table \"vectric.oem_fastspring_item_bundle\""
enum vectric_oem_fastspring_item_bundle_update_column {
    "column name"
    bundleId
    "column name"
    fastspringItemId
    "column name"
    itemBundleId
}

"unique or primary key constraints on table \"vectric.oem_fastspring_item\""
enum vectric_oem_fastspring_item_constraint {
    "unique or primary key constraint"
    idx_109519_primary
}

"select columns of table \"vectric.oem_fastspring_item\""
enum vectric_oem_fastspring_item_select_column {
    "column name"
    batchId
    "column name"
    discountValue
    "column name"
    itemId
    "column name"
    oemProductId
    "column name"
    orderId
    "column name"
    priceTotal
    "column name"
    productName
    "column name"
    quantity
}

"update columns of table \"vectric.oem_fastspring_item\""
enum vectric_oem_fastspring_item_update_column {
    "column name"
    batchId
    "column name"
    discountValue
    "column name"
    itemId
    "column name"
    oemProductId
    "column name"
    orderId
    "column name"
    priceTotal
    "column name"
    productName
    "column name"
    quantity
}

"unique or primary key constraints on table \"vectric.oem_fastspring_order\""
enum vectric_oem_fastspring_order_constraint {
    "unique or primary key constraint"
    idx_109531_orderreference
    "unique or primary key constraint"
    idx_109531_primary
}

"select columns of table \"vectric.oem_fastspring_order\""
enum vectric_oem_fastspring_order_select_column {
    "column name"
    actionTaken
    "column name"
    amendedBy
    "column name"
    city
    "column name"
    createdBy
    "column name"
    currency
    "column name"
    customerId
    "column name"
    dateAmended
    "column name"
    dateCreated
    "column name"
    dateProcessed
    "column name"
    fastSpringCustomerId
    "column name"
    language
    "column name"
    notes
    "column name"
    orderId
    "column name"
    orderReference
    "column name"
    partnerId
    "column name"
    postalCode
    "column name"
    processedBy
    "column name"
    region
    "column name"
    route
    "column name"
    subTotal
    "column name"
    tax
    "column name"
    total
}

"update columns of table \"vectric.oem_fastspring_order\""
enum vectric_oem_fastspring_order_update_column {
    "column name"
    actionTaken
    "column name"
    amendedBy
    "column name"
    city
    "column name"
    createdBy
    "column name"
    currency
    "column name"
    customerId
    "column name"
    dateAmended
    "column name"
    dateCreated
    "column name"
    dateProcessed
    "column name"
    fastSpringCustomerId
    "column name"
    language
    "column name"
    notes
    "column name"
    orderId
    "column name"
    orderReference
    "column name"
    partnerId
    "column name"
    postalCode
    "column name"
    processedBy
    "column name"
    region
    "column name"
    route
    "column name"
    subTotal
    "column name"
    tax
    "column name"
    total
}

"unique or primary key constraints on table \"vectric.oem_invite_status\""
enum vectric_oem_invite_status_constraint {
    "unique or primary key constraint"
    idx_109544_primary
}

"select columns of table \"vectric.oem_invite_status\""
enum vectric_oem_invite_status_select_column {
    "column name"
    status
    "column name"
    statusId
}

"update columns of table \"vectric.oem_invite_status\""
enum vectric_oem_invite_status_update_column {
    "column name"
    status
    "column name"
    statusId
}

"unique or primary key constraints on table \"vectric.oem_licence_allocation_type\""
enum vectric_oem_licence_allocation_type_constraint {
    "unique or primary key constraint"
    idx_109549_primary
}

"select columns of table \"vectric.oem_licence_allocation_type\""
enum vectric_oem_licence_allocation_type_select_column {
    "column name"
    allocationTypeId
    "column name"
    typeName
}

"update columns of table \"vectric.oem_licence_allocation_type\""
enum vectric_oem_licence_allocation_type_update_column {
    "column name"
    allocationTypeId
    "column name"
    typeName
}

"unique or primary key constraints on table \"vectric.oem_partners\""
enum vectric_oem_partners_constraint {
    "unique or primary key constraint"
    idx_109555_primary
}

"select columns of table \"vectric.oem_partners\""
enum vectric_oem_partners_select_column {
    "column name"
    codePrefix
    "column name"
    countrycode
    "column name"
    dateOfLastBatch
    "column name"
    displayName
    "column name"
    inactive
    "column name"
    nextIssue
    "column name"
    partnerId
}

"update columns of table \"vectric.oem_partners\""
enum vectric_oem_partners_update_column {
    "column name"
    codePrefix
    "column name"
    countrycode
    "column name"
    dateOfLastBatch
    "column name"
    displayName
    "column name"
    inactive
    "column name"
    nextIssue
    "column name"
    partnerId
}

"unique or primary key constraints on table \"vectric.oem_products\""
enum vectric_oem_products_constraint {
    "unique or primary key constraint"
    idx_109565_primary
}

"select columns of table \"vectric.oem_products\""
enum vectric_oem_products_select_column {
    "column name"
    enabled
    "column name"
    oemFastspringId
    "column name"
    oemProductId
    "column name"
    productId
}

"update columns of table \"vectric.oem_products\""
enum vectric_oem_products_update_column {
    "column name"
    enabled
    "column name"
    oemFastspringId
    "column name"
    oemProductId
    "column name"
    productId
}

"unique or primary key constraints on table \"vectric.oem_purchase_options\""
enum vectric_oem_purchase_options_constraint {
    "unique or primary key constraint"
    idx_109572_oem_purchase_options_partnerid_unique
    "unique or primary key constraint"
    idx_109572_primary
}

"select columns of table \"vectric.oem_purchase_options\""
enum vectric_oem_purchase_options_select_column {
    "column name"
    emailLicenceDetails
    "column name"
    maxQuantity
    "column name"
    minQuantity
    "column name"
    multipleLicences
    "column name"
    optionId
    "column name"
    partnerId
}

"update columns of table \"vectric.oem_purchase_options\""
enum vectric_oem_purchase_options_update_column {
    "column name"
    emailLicenceDetails
    "column name"
    maxQuantity
    "column name"
    minQuantity
    "column name"
    multipleLicences
    "column name"
    optionId
    "column name"
    partnerId
}

"select columns of table \"vectric.oem_staff_admin_ownership\""
enum vectric_oem_staff_admin_ownership_select_column {
    "column name"
    admin
    "column name"
    adminId
    "column name"
    customerId
    "column name"
    customerName
    "column name"
    dateAccepted
    "column name"
    displayStatus
    "column name"
    email
    "column name"
    partnerId
    "column name"
    status
}

"unique or primary key constraints on table \"vectric.oem_staff_customer\""
enum vectric_oem_staff_customer_constraint {
    "unique or primary key constraint"
    idx_109590_primary
}

"select columns of table \"vectric.oem_staff_customer\""
enum vectric_oem_staff_customer_select_column {
    "column name"
    admin
    "column name"
    customerId
    "column name"
    dataRequested
    "column name"
    dateAccepted
    "column name"
    dateUpdated
    "column name"
    partnerId
    "column name"
    staffId
    "column name"
    status
}

"update columns of table \"vectric.oem_staff_customer\""
enum vectric_oem_staff_customer_update_column {
    "column name"
    admin
    "column name"
    customerId
    "column name"
    dataRequested
    "column name"
    dateAccepted
    "column name"
    dateUpdated
    "column name"
    partnerId
    "column name"
    staffId
    "column name"
    status
}

"unique or primary key constraints on table \"vectric.organization_audit\""
enum vectric_organization_audit_constraint {
    "unique or primary key constraint"
    organization_audit_pkey
}

"select columns of table \"vectric.organization_audit\""
enum vectric_organization_audit_select_column {
    "column name"
    auditDate
    "column name"
    auditId
    "column name"
    auditPayload
    "column name"
    auditType
    "column name"
    author
    "column name"
    internalChange
    "column name"
    ipAddress
    "column name"
    organizationId
}

"update columns of table \"vectric.organization_audit\""
enum vectric_organization_audit_update_column {
    "column name"
    auditDate
    "column name"
    auditId
    "column name"
    auditPayload
    "column name"
    auditType
    "column name"
    author
    "column name"
    internalChange
    "column name"
    ipAddress
    "column name"
    organizationId
}

"unique or primary key constraints on table \"vectric.organization_licence_scope\""
enum vectric_organization_licence_scope_constraint {
    "unique or primary key constraint"
    organization_licence_scope_pkey
}

enum vectric_organization_licence_scope_enum {
    ALL_ORGANIZATION
    SINGLE_USER
}

"select columns of table \"vectric.organization_licence_scope\""
enum vectric_organization_licence_scope_select_column {
    "column name"
    scope
}

"update columns of table \"vectric.organization_licence_scope\""
enum vectric_organization_licence_scope_update_column {
    "column name"
    scope
}

"select columns of table \"vectric.organization_memberships_admin_access\""
enum vectric_organization_memberships_admin_access_select_column {
    "column name"
    addedBy
    "column name"
    amendedBy
    "column name"
    customerEmail
    "column name"
    customerId
    "column name"
    customerName
    "column name"
    customerRegisteredUsername
    "column name"
    dateAdded
    "column name"
    dateAmended
    "column name"
    membershipId
    "column name"
    membershipRole
    "column name"
    membershipStatus
    "column name"
    organizationCountryId
    "column name"
    organizationCountryName
    "column name"
    organizationId
    "column name"
    organizationName
    "column name"
    organizationType
}

"unique or primary key constraints on table \"vectric.organization_order_items\""
enum vectric_organization_order_items_constraint {
    "unique or primary key constraint"
    organization_order_items_pkey
}

"select columns of table \"vectric.organization_order_items\""
enum vectric_organization_order_items_select_column {
    "column name"
    orderId
    "column name"
    orderItemId
    "column name"
    saleableProductId
    "column name"
    subscription
}

"update columns of table \"vectric.organization_order_items\""
enum vectric_organization_order_items_update_column {
    "column name"
    orderId
    "column name"
    orderItemId
    "column name"
    saleableProductId
    "column name"
    subscription
}

"unique or primary key constraints on table \"vectric.organization_orders\""
enum vectric_organization_orders_constraint {
    "unique or primary key constraint"
    organization_orders_pkey
}

"select columns of table \"vectric.organization_orders\""
enum vectric_organization_orders_select_column {
    "column name"
    amendedBy
    "column name"
    createdBy
    "column name"
    dateAmended
    "column name"
    dateCreated
    "column name"
    externalReference
    "column name"
    notes
    "column name"
    orderDate
    "column name"
    orderId
    "column name"
    organizationId
    "column name"
    purchaserId
}

"update columns of table \"vectric.organization_orders\""
enum vectric_organization_orders_update_column {
    "column name"
    amendedBy
    "column name"
    createdBy
    "column name"
    dateAmended
    "column name"
    dateCreated
    "column name"
    externalReference
    "column name"
    notes
    "column name"
    orderDate
    "column name"
    orderId
    "column name"
    organizationId
    "column name"
    purchaserId
}

"unique or primary key constraints on table \"vectric.organization_types\""
enum vectric_organization_types_constraint {
    "unique or primary key constraint"
    organization_types_pkey
}

enum vectric_organization_types_enum {
    MAKERSPACE
    ORGANIZATION
    SCHOOL
}

"select columns of table \"vectric.organization_types\""
enum vectric_organization_types_select_column {
    "column name"
    type
}

"update columns of table \"vectric.organization_types\""
enum vectric_organization_types_update_column {
    "column name"
    type
}

"unique or primary key constraints on table \"vectric.organizations\""
enum vectric_organizations_constraint {
    "unique or primary key constraint"
    organizations_organization_name_key
    "unique or primary key constraint"
    organizations_organization_uuid_key
    "unique or primary key constraint"
    organizations_pkey
}

"select columns of table \"vectric.organizations\""
enum vectric_organizations_select_column {
    "column name"
    active
    "column name"
    amendedBy
    "column name"
    countryId
    "column name"
    createdBy
    "column name"
    dateAmended
    "column name"
    dateCreated
    "column name"
    internalNotes
    "column name"
    organizationId
    "column name"
    organizationName
    "column name"
    organizationUUID
    "column name"
    type
}

"update columns of table \"vectric.organizations\""
enum vectric_organizations_update_column {
    "column name"
    active
    "column name"
    amendedBy
    "column name"
    countryId
    "column name"
    createdBy
    "column name"
    dateAmended
    "column name"
    dateCreated
    "column name"
    internalNotes
    "column name"
    organizationId
    "column name"
    organizationName
    "column name"
    organizationUUID
    "column name"
    type
}

"unique or primary key constraints on table \"vectric.owned_item_assignments\""
enum vectric_owned_item_assignments_constraint {
    "unique or primary key constraint"
    owned_item_assignments_pkey
}

"select columns of table \"vectric.owned_item_assignments\""
enum vectric_owned_item_assignments_select_column {
    "column name"
    assignedBy
    "column name"
    assignedTo
    "column name"
    assignment_id
    "column name"
    dateAssigned
    "column name"
    ownedItemId
}

"update columns of table \"vectric.owned_item_assignments\""
enum vectric_owned_item_assignments_update_column {
    "column name"
    assignedBy
    "column name"
    assignedTo
    "column name"
    assignment_id
    "column name"
    dateAssigned
    "column name"
    ownedItemId
}

"unique or primary key constraints on table \"vectric.owned_items\""
enum vectric_owned_items_constraint {
    "unique or primary key constraint"
    oowned_items_pkey
}

"select columns of table \"vectric.owned_items\""
enum vectric_owned_items_select_column {
    "column name"
    amendedBy
    "column name"
    createdBy
    "column name"
    customerId
    "column name"
    dateAmended
    "column name"
    dateCreated
    "column name"
    notes
    "column name"
    orderItemId
    "column name"
    organizationId
    "column name"
    ownedItemId
    "column name"
    ownedProductId
    "column name"
    record_date
    "column name"
    scope
    "column name"
    status
    "column name"
    subscription
}

"update columns of table \"vectric.owned_items\""
enum vectric_owned_items_update_column {
    "column name"
    amendedBy
    "column name"
    createdBy
    "column name"
    customerId
    "column name"
    dateAmended
    "column name"
    dateCreated
    "column name"
    notes
    "column name"
    orderItemId
    "column name"
    organizationId
    "column name"
    ownedItemId
    "column name"
    ownedProductId
    "column name"
    record_date
    "column name"
    scope
    "column name"
    status
    "column name"
    subscription
}

"unique or primary key constraints on table \"vectric.owned_products\""
enum vectric_owned_products_constraint {
    "unique or primary key constraint"
    owned_products_pkey
    "unique or primary key constraint"
    owned_products_product_name_key
}

"select columns of table \"vectric.owned_products\""
enum vectric_owned_products_select_column {
    "column name"
    enabled
    "column name"
    enhancement
    "column name"
    productId
    "column name"
    productName
    "column name"
    productTypeId
    "column name"
    subscription
}

"update columns of table \"vectric.owned_products\""
enum vectric_owned_products_update_column {
    "column name"
    enabled
    "column name"
    enhancement
    "column name"
    productId
    "column name"
    productName
    "column name"
    productTypeId
    "column name"
    subscription
}

"unique or primary key constraints on table \"vectric.products_clipartcollection_links\""
enum vectric_products_clipartcollection_links_constraint {
    "unique or primary key constraint"
    idx_109653_primary
}

"select columns of table \"vectric.products_clipartcollection_links\""
enum vectric_products_clipartcollection_links_select_column {
    "column name"
    clipartChildId
    "column name"
    clipartCollectionLinkId
    "column name"
    clipartParentId
}

"update columns of table \"vectric.products_clipartcollection_links\""
enum vectric_products_clipartcollection_links_update_column {
    "column name"
    clipartChildId
    "column name"
    clipartCollectionLinkId
    "column name"
    clipartParentId
}

"unique or primary key constraints on table \"vectric.products_enhancement_eligibility\""
enum vectric_products_enhancement_eligibility_constraint {
    "unique or primary key constraint"
    idx_109662_primary
}

"select columns of table \"vectric.products_enhancement_eligibility\""
enum vectric_products_enhancement_eligibility_select_column {
    "column name"
    eligibilityId
    "column name"
    fastspringurl
    "column name"
    fromproduct
    "column name"
    moreinfolink
    "column name"
    price
    "column name"
    summary
    "column name"
    toproduct
    "column name"
    visibletocustomers
    "column name"
    visibletostaff
}

"update columns of table \"vectric.products_enhancement_eligibility\""
enum vectric_products_enhancement_eligibility_update_column {
    "column name"
    eligibilityId
    "column name"
    fastspringurl
    "column name"
    fromproduct
    "column name"
    moreinfolink
    "column name"
    price
    "column name"
    summary
    "column name"
    toproduct
    "column name"
    visibletocustomers
    "column name"
    visibletostaff
}

"unique or primary key constraints on table \"vectric.products_freeclipart\""
enum vectric_products_freeclipart_constraint {
    "unique or primary key constraint"
    idx_109673_primary
}

"select columns of table \"vectric.products_freeclipart\""
enum vectric_products_freeclipart_select_column {
    "column name"
    freeClipartId
    "column name"
    productFreeClipartId
    "column name"
    productId
}

"update columns of table \"vectric.products_freeclipart\""
enum vectric_products_freeclipart_update_column {
    "column name"
    freeClipartId
    "column name"
    productFreeClipartId
    "column name"
    productId
}

"unique or primary key constraints on table \"vectric.products_fulfilments\""
enum vectric_products_fulfilments_constraint {
    "unique or primary key constraint"
    idx_109679_primary
}

"select columns of table \"vectric.products_fulfilments\""
enum vectric_products_fulfilments_select_column {
    "column name"
    description
    "column name"
    downloadSize
    "column name"
    fulfilmentId
    "column name"
    fulfilmentName
    "column name"
    fulfilmenttypeid
    "column name"
    location
    "column name"
    objectName
}

"update columns of table \"vectric.products_fulfilments\""
enum vectric_products_fulfilments_update_column {
    "column name"
    description
    "column name"
    downloadSize
    "column name"
    fulfilmentId
    "column name"
    fulfilmentName
    "column name"
    fulfilmenttypeid
    "column name"
    location
    "column name"
    objectName
}

"unique or primary key constraints on table \"vectric.products_fulfilmenttypes\""
enum vectric_products_fulfilmenttypes_constraint {
    "unique or primary key constraint"
    idx_109688_primary
}

"select columns of table \"vectric.products_fulfilmenttypes\""
enum vectric_products_fulfilmenttypes_select_column {
    "column name"
    fulfilmenttypeid
    "column name"
    typename
}

"update columns of table \"vectric.products_fulfilmenttypes\""
enum vectric_products_fulfilmenttypes_update_column {
    "column name"
    fulfilmenttypeid
    "column name"
    typename
}

"unique or primary key constraints on table \"vectric.products_product_fulfilments\""
enum vectric_products_product_fulfilments_constraint {
    "unique or primary key constraint"
    idx_109726_primary
}

"select columns of table \"vectric.products_product_fulfilments\""
enum vectric_products_product_fulfilments_select_column {
    "column name"
    fulfilmentid
    "column name"
    productfulfilmentid
    "column name"
    productid
}

"update columns of table \"vectric.products_product_fulfilments\""
enum vectric_products_product_fulfilments_update_column {
    "column name"
    fulfilmentid
    "column name"
    productfulfilmentid
    "column name"
    productid
}

"unique or primary key constraints on table \"vectric.products_product_licence_type\""
enum vectric_products_product_licence_type_constraint {
    "unique or primary key constraint"
    products_product_licence_type_pkey
}

enum vectric_products_product_licence_type_enum {
    JSON_V1
    NONE
    USER_CODE_PAIR
}

"select columns of table \"vectric.products_product_licence_type\""
enum vectric_products_product_licence_type_select_column {
    "column name"
    type
}

"update columns of table \"vectric.products_product_licence_type\""
enum vectric_products_product_licence_type_update_column {
    "column name"
    type
}

"unique or primary key constraints on table \"vectric.products_products\""
enum vectric_products_products_constraint {
    "unique or primary key constraint"
    idx_109708_fastspringid_unique
    "unique or primary key constraint"
    idx_109708_primary
    "unique or primary key constraint"
    products_products_productname_key
}

"select columns of table \"vectric.products_products\""
enum vectric_products_products_select_column {
    "column name"
    enabled
    "column name"
    externalid
    "column name"
    fastspringId
    "column name"
    free
    "column name"
    latestversion
    "column name"
    licenceType
    "column name"
    media
    "column name"
    productID
    "column name"
    productName
    "column name"
    receivesClipart
    "column name"
    releaseDate
    "column name"
    requireslicence
    "column name"
    type
    "column name"
    upgradefromtypeid
}

"update columns of table \"vectric.products_products\""
enum vectric_products_products_update_column {
    "column name"
    enabled
    "column name"
    externalid
    "column name"
    fastspringId
    "column name"
    free
    "column name"
    latestversion
    "column name"
    licenceType
    "column name"
    media
    "column name"
    productID
    "column name"
    productName
    "column name"
    receivesClipart
    "column name"
    releaseDate
    "column name"
    requireslicence
    "column name"
    type
    "column name"
    upgradefromtypeid
}

"unique or primary key constraints on table \"vectric.products_producttype\""
enum vectric_products_producttype_constraint {
    "unique or primary key constraint"
    idx_109720_primary
    "unique or primary key constraint"
    idx_109720_producttypename
}

"select columns of table \"vectric.products_producttype\""
enum vectric_products_producttype_select_column {
    "column name"
    productTypeId
    "column name"
    productTypeName
    "column name"
    seq
}

"update columns of table \"vectric.products_producttype\""
enum vectric_products_producttype_update_column {
    "column name"
    productTypeId
    "column name"
    productTypeName
    "column name"
    seq
}

"unique or primary key constraints on table \"vectric.products_upgrade_eligibility\""
enum vectric_products_upgrade_eligibility_constraint {
    "unique or primary key constraint"
    idx_109732_primary
}

"select columns of table \"vectric.products_upgrade_eligibility\""
enum vectric_products_upgrade_eligibility_select_column {
    "column name"
    eligibilityid
    "column name"
    fastspringproductid
    "column name"
    fastspringurl
    "column name"
    fromtype
    "column name"
    maxmajorversion
    "column name"
    minmajorversion
    "column name"
    price
    "column name"
    summary
    "column name"
    toproduct
    "column name"
    updatelink
    "column name"
    visibletocustomers
    "column name"
    visibletostaff
}

"update columns of table \"vectric.products_upgrade_eligibility\""
enum vectric_products_upgrade_eligibility_update_column {
    "column name"
    eligibilityid
    "column name"
    fastspringproductid
    "column name"
    fastspringurl
    "column name"
    fromtype
    "column name"
    maxmajorversion
    "column name"
    minmajorversion
    "column name"
    price
    "column name"
    summary
    "column name"
    toproduct
    "column name"
    updatelink
    "column name"
    visibletocustomers
    "column name"
    visibletostaff
}

"unique or primary key constraints on table \"vectric.products_versioncodes\""
enum vectric_products_versioncodes_constraint {
    "unique or primary key constraint"
    idx_109743_primary
}

"select columns of table \"vectric.products_versioncodes\""
enum vectric_products_versioncodes_select_column {
    "column name"
    displayVersion
    "column name"
    latest
    "column name"
    majorVersion
    "column name"
    minorVersionOOX
    "column name"
    minorVersionOXO
    "column name"
    minorVersionXOO
    "column name"
    notifying
    "column name"
    patchurl
    "column name"
    productid
    "column name"
    releaseDate
    "column name"
    url
    "column name"
    versioncodeid
    "column name"
    visible
}

"update columns of table \"vectric.products_versioncodes\""
enum vectric_products_versioncodes_update_column {
    "column name"
    displayVersion
    "column name"
    latest
    "column name"
    majorVersion
    "column name"
    minorVersionOOX
    "column name"
    minorVersionOXO
    "column name"
    minorVersionXOO
    "column name"
    notifying
    "column name"
    patchurl
    "column name"
    productid
    "column name"
    releaseDate
    "column name"
    url
    "column name"
    versioncodeid
    "column name"
    visible
}

"unique or primary key constraints on table \"vectric.questions\""
enum vectric_questions_constraint {
    "unique or primary key constraint"
    idx_109752_primary
}

"select columns of table \"vectric.questions\""
enum vectric_questions_select_column {
    "column name"
    multipleanswers
    "column name"
    questionid
    "column name"
    questiontext
}

"update columns of table \"vectric.questions\""
enum vectric_questions_update_column {
    "column name"
    multipleanswers
    "column name"
    questionid
    "column name"
    questiontext
}

"unique or primary key constraints on table \"vectric.responses\""
enum vectric_responses_constraint {
    "unique or primary key constraint"
    idx_109768_primary
}

"select columns of table \"vectric.responses\""
enum vectric_responses_select_column {
    "column name"
    questionid
    "column name"
    responseid
    "column name"
    responsetext
}

"update columns of table \"vectric.responses\""
enum vectric_responses_update_column {
    "column name"
    questionid
    "column name"
    responseid
    "column name"
    responsetext
}

"unique or primary key constraints on table \"vectric.saleable_products\""
enum vectric_saleable_products_constraint {
    "unique or primary key constraint"
    saleable_products_fastspring_id_key
    "unique or primary key constraint"
    saleable_products_pkey
    "unique or primary key constraint"
    saleable_products_product_name_key
}

"select columns of table \"vectric.saleable_products\""
enum vectric_saleable_products_select_column {
    "column name"
    enabled
    "column name"
    fastspringId
    "column name"
    free
    "column name"
    media
    "column name"
    productId
    "column name"
    productName
    "column name"
    productTypeId
    "column name"
    receivesClipart
    "column name"
    subscription
}

"update columns of table \"vectric.saleable_products\""
enum vectric_saleable_products_update_column {
    "column name"
    enabled
    "column name"
    fastspringId
    "column name"
    free
    "column name"
    media
    "column name"
    productId
    "column name"
    productName
    "column name"
    productTypeId
    "column name"
    receivesClipart
    "column name"
    subscription
}

"unique or primary key constraints on table \"vectric.sales_customer_downloads\""
enum vectric_sales_customer_downloads_constraint {
    "unique or primary key constraint"
    idx_109838_primary
}

"select columns of table \"vectric.sales_customer_downloads\""
enum vectric_sales_customer_downloads_select_column {
    "column name"
    customerId
    "column name"
    downloadDate
    "column name"
    downloadId
    "column name"
    fulfilmentId
    "column name"
    ipAddress
}

"update columns of table \"vectric.sales_customer_downloads\""
enum vectric_sales_customer_downloads_update_column {
    "column name"
    customerId
    "column name"
    downloadDate
    "column name"
    downloadId
    "column name"
    fulfilmentId
    "column name"
    ipAddress
}

"unique or primary key constraints on table \"vectric.sales_customers\""
enum vectric_sales_customers_constraint {
    "unique or primary key constraint"
    idx_109777_ix_customers_regusername
    "unique or primary key constraint"
    idx_109777_primary
    "unique or primary key constraint"
    idx_109777_sales_customers_regusernameemailaddress
    "unique or primary key constraint"
    sales_customers_customeruuid_key
}

"select columns of table \"vectric.sales_customers\""
enum vectric_sales_customers_select_column {
    "column name"
    acceptedTerms
    "column name"
    amendedby
    "column name"
    companyName
    "column name"
    countrycode
    "column name"
    createdby
    "column name"
    customerAddressLine
    "column name"
    customerId
    "column name"
    customerName
    "column name"
    customerTelephone
    "column name"
    customerType
    "column name"
    customerstatusid
    "column name"
    customeruuid
    "column name"
    dateAcceptedTerms
    "column name"
    dateCreated
    "column name"
    dateMarketingConsentUpdated
    "column name"
    dateUpgradeEmailConsentUpdates
    "column name"
    dateamended
    "column name"
    email
    "column name"
    language
    "column name"
    lastLogin
    "column name"
    lastipaddress
    "column name"
    location
    "column name"
    mergedfromcustomerid
    "column name"
    mergedtocustomerid
    "column name"
    notes
    "column name"
    receivingMarketingEmails
    "column name"
    receivingUpgradeEmails
    "column name"
    registeredUsername
    "column name"
    verified
}

"update columns of table \"vectric.sales_customers\""
enum vectric_sales_customers_update_column {
    "column name"
    acceptedTerms
    "column name"
    amendedby
    "column name"
    companyName
    "column name"
    countrycode
    "column name"
    createdby
    "column name"
    customerAddressLine
    "column name"
    customerId
    "column name"
    customerName
    "column name"
    customerTelephone
    "column name"
    customerType
    "column name"
    customerstatusid
    "column name"
    customeruuid
    "column name"
    dateAcceptedTerms
    "column name"
    dateCreated
    "column name"
    dateMarketingConsentUpdated
    "column name"
    dateUpgradeEmailConsentUpdates
    "column name"
    dateamended
    "column name"
    email
    "column name"
    language
    "column name"
    lastLogin
    "column name"
    lastipaddress
    "column name"
    location
    "column name"
    mergedfromcustomerid
    "column name"
    mergedtocustomerid
    "column name"
    notes
    "column name"
    receivingMarketingEmails
    "column name"
    receivingUpgradeEmails
    "column name"
    registeredUsername
    "column name"
    verified
}

"unique or primary key constraints on table \"vectric.sales_customerupdates\""
enum vectric_sales_customerupdates_constraint {
    "unique or primary key constraint"
    idx_109822_primary
}

"select columns of table \"vectric.sales_customerupdates\""
enum vectric_sales_customerupdates_select_column {
    "column name"
    changedBy
    "column name"
    customerId
    "column name"
    customerUpdateId
    "column name"
    dateChanged
    "column name"
    fieldName
    "column name"
    newValue
    "column name"
    oldValue
}

"update columns of table \"vectric.sales_customerupdates\""
enum vectric_sales_customerupdates_update_column {
    "column name"
    changedBy
    "column name"
    customerId
    "column name"
    customerUpdateId
    "column name"
    dateChanged
    "column name"
    fieldName
    "column name"
    newValue
    "column name"
    oldValue
}

"unique or primary key constraints on table \"vectric.sales_oem_bundles\""
enum vectric_sales_oem_bundles_constraint {
    "unique or primary key constraint"
    idx_109873_primary
}

"select columns of table \"vectric.sales_oem_bundles\""
enum vectric_sales_oem_bundles_select_column {
    "column name"
    allocatedBy
    "column name"
    allocationBatch
    "column name"
    allocationTypeId
    "column name"
    bundleId
    "column name"
    dateAllocated
    "column name"
    dateCreated
    "column name"
    notes
    "column name"
    partnerId
    "column name"
    product
    "column name"
    productDisplayName
    "column name"
    registrationDate
    "column name"
    typeDisplayName
}

"update columns of table \"vectric.sales_oem_bundles\""
enum vectric_sales_oem_bundles_update_column {
    "column name"
    allocatedBy
    "column name"
    allocationBatch
    "column name"
    allocationTypeId
    "column name"
    bundleId
    "column name"
    dateAllocated
    "column name"
    dateCreated
    "column name"
    notes
    "column name"
    partnerId
    "column name"
    product
    "column name"
    productDisplayName
    "column name"
    registrationDate
    "column name"
    typeDisplayName
}

"unique or primary key constraints on table \"vectric.sales_oemlicences\""
enum vectric_sales_oemlicences_constraint {
    "unique or primary key constraint"
    idx_109857_ix_oembundleid_licencecode
    "unique or primary key constraint"
    idx_109857_primary
}

"select columns of table \"vectric.sales_oemlicences\""
enum vectric_sales_oemlicences_select_column {
    "column name"
    allocatedBy
    "column name"
    allocationTypeId
    "column name"
    dateAllocated
    "column name"
    dateCreated
    "column name"
    disabled
    "column name"
    licenceCode
    "column name"
    mediaProvided
    "column name"
    oemBundleId
    "column name"
    oemLicenceId
    "column name"
    orderItemProductId
    "column name"
    partnerId
    "column name"
    productId
    "column name"
    productName
    "column name"
    registrationDate
    "column name"
    saleItemId
    "column name"
    version
}

"update columns of table \"vectric.sales_oemlicences\""
enum vectric_sales_oemlicences_update_column {
    "column name"
    allocatedBy
    "column name"
    allocationTypeId
    "column name"
    dateAllocated
    "column name"
    dateCreated
    "column name"
    disabled
    "column name"
    licenceCode
    "column name"
    mediaProvided
    "column name"
    oemBundleId
    "column name"
    oemLicenceId
    "column name"
    orderItemProductId
    "column name"
    partnerId
    "column name"
    productId
    "column name"
    productName
    "column name"
    registrationDate
    "column name"
    saleItemId
    "column name"
    version
}

"unique or primary key constraints on table \"vectric.sales_orders\""
enum vectric_sales_orders_constraint {
    "unique or primary key constraint"
    idx_109890_primary
}

"select columns of table \"vectric.sales_orders\""
enum vectric_sales_orders_select_column {
    "column name"
    amendedby
    "column name"
    createdby
    "column name"
    customerId
    "column name"
    dateCreated
    "column name"
    dateamended
    "column name"
    mergedfromcustomerid
    "column name"
    orderDate
    "column name"
    orderId
    "column name"
    purchaser
    "column name"
    registrationemailsent
    "column name"
    salenote
    "column name"
    salesdetails
    "column name"
    salesummary
    "column name"
    validationcomments
    "column name"
    veccode
}

"update columns of table \"vectric.sales_orders\""
enum vectric_sales_orders_update_column {
    "column name"
    amendedby
    "column name"
    createdby
    "column name"
    customerId
    "column name"
    dateCreated
    "column name"
    dateamended
    "column name"
    mergedfromcustomerid
    "column name"
    orderDate
    "column name"
    orderId
    "column name"
    purchaser
    "column name"
    registrationemailsent
    "column name"
    salenote
    "column name"
    salesdetails
    "column name"
    salesummary
    "column name"
    validationcomments
    "column name"
    veccode
}

"unique or primary key constraints on table \"vectric.sales_salesitem_products\""
enum vectric_sales_salesitem_products_constraint {
    "unique or primary key constraint"
    idx_109921_primary
}

"select columns of table \"vectric.sales_salesitem_products\""
enum vectric_sales_salesitem_products_select_column {
    "column name"
    amended
    "column name"
    amendedby
    "column name"
    emailsubject
    "column name"
    enhances
    "column name"
    licenceCode
    "column name"
    licenceIdAsDisplay
    "column name"
    licenceType
    "column name"
    oembundleid
    "column name"
    productId
    "column name"
    registeredUsername
    "column name"
    resentdate
    "column name"
    salesItemProductId
    "column name"
    salesitemid
    "column name"
    status
    "column name"
    transfersalesitem
    "column name"
    upgradesalesitem
    "column name"
    versioncodeid
}

"update columns of table \"vectric.sales_salesitem_products\""
enum vectric_sales_salesitem_products_update_column {
    "column name"
    amended
    "column name"
    amendedby
    "column name"
    emailsubject
    "column name"
    enhances
    "column name"
    licenceCode
    "column name"
    licenceIdAsDisplay
    "column name"
    licenceType
    "column name"
    oembundleid
    "column name"
    productId
    "column name"
    registeredUsername
    "column name"
    resentdate
    "column name"
    salesItemProductId
    "column name"
    salesitemid
    "column name"
    status
    "column name"
    transfersalesitem
    "column name"
    upgradesalesitem
    "column name"
    versioncodeid
}

"unique or primary key constraints on table \"vectric.sales_salesitemproduct_status\""
enum vectric_sales_salesitemproduct_status_constraint {
    "unique or primary key constraint"
    idx_109909_primary
}

"select columns of table \"vectric.sales_salesitemproduct_status\""
enum vectric_sales_salesitemproduct_status_select_column {
    "column name"
    status
    "column name"
    statusid
}

"update columns of table \"vectric.sales_salesitemproduct_status\""
enum vectric_sales_salesitemproduct_status_update_column {
    "column name"
    status
    "column name"
    statusid
}

"unique or primary key constraints on table \"vectric.sales_salesitems\""
enum vectric_sales_salesitems_constraint {
    "unique or primary key constraint"
    idx_109915_primary
}

"select columns of table \"vectric.sales_salesitems\""
enum vectric_sales_salesitems_select_column {
    "column name"
    amendedby
    "column name"
    dateamended
    "column name"
    orderid
    "column name"
    productid
    "column name"
    salesitemid
}

"update columns of table \"vectric.sales_salesitems\""
enum vectric_sales_salesitems_update_column {
    "column name"
    amendedby
    "column name"
    dateamended
    "column name"
    orderid
    "column name"
    productid
    "column name"
    salesitemid
}

"unique or primary key constraints on table \"vectric.sales_velocitytemplate\""
enum vectric_sales_velocitytemplate_constraint {
    "unique or primary key constraint"
    sales_velocitytemplate_pkey
}

"select columns of table \"vectric.sales_velocitytemplate\""
enum vectric_sales_velocitytemplate_select_column {
    "column name"
    lang
    "column name"
    sender
    "column name"
    signedBy
    "column name"
    subject
    "column name"
    template
    "column name"
    templateName
    "column name"
    templateTimestamp
}

"update columns of table \"vectric.sales_velocitytemplate\""
enum vectric_sales_velocitytemplate_update_column {
    "column name"
    lang
    "column name"
    sender
    "column name"
    signedBy
    "column name"
    subject
    "column name"
    template
    "column name"
    templateName
    "column name"
    templateTimestamp
}

"unique or primary key constraints on table \"vectric.scheduled_emails\""
enum vectric_scheduled_emails_constraint {
    "unique or primary key constraint"
    scheduled_emails_pkey
}

"select columns of table \"vectric.scheduled_emails\""
enum vectric_scheduled_emails_select_column {
    "column name"
    createdOn
    "column name"
    customerId
    "column name"
    id
    "column name"
    processed
    "column name"
    processedOn
    "column name"
    sendTo
    "column name"
    templateId
    "column name"
    variables
}

"update columns of table \"vectric.scheduled_emails\""
enum vectric_scheduled_emails_update_column {
    "column name"
    createdOn
    "column name"
    customerId
    "column name"
    id
    "column name"
    processed
    "column name"
    processedOn
    "column name"
    sendTo
    "column name"
    templateId
    "column name"
    variables
}

"unique or primary key constraints on table \"vectric.security_emailverificationtokens\""
enum vectric_security_emailverificationtokens_constraint {
    "unique or primary key constraint"
    email_verification_multiple_unique
    "unique or primary key constraint"
    idx_109959_customerid
    "unique or primary key constraint"
    idx_109959_primary
    "unique or primary key constraint"
    idx_109959_username
}

"select columns of table \"vectric.security_emailverificationtokens\""
enum vectric_security_emailverificationtokens_select_column {
    "column name"
    customerId
    "column name"
    expiryDate
    "column name"
    token
    "column name"
    username
}

"update columns of table \"vectric.security_emailverificationtokens\""
enum vectric_security_emailverificationtokens_update_column {
    "column name"
    customerId
    "column name"
    expiryDate
    "column name"
    token
    "column name"
    username
}

"select columns of table \"vectric.security_group_authorities\""
enum vectric_security_group_authorities_select_column {
    "column name"
    authority
    "column name"
    groupId
}

"unique or primary key constraints on table \"vectric.security_group_members\""
enum vectric_security_group_members_constraint {
    "unique or primary key constraint"
    idx_109976_primary
}

"select columns of table \"vectric.security_group_members\""
enum vectric_security_group_members_select_column {
    "column name"
    groupId
    "column name"
    id
    "column name"
    username
}

"update columns of table \"vectric.security_group_members\""
enum vectric_security_group_members_update_column {
    "column name"
    groupId
    "column name"
    id
    "column name"
    username
}

"unique or primary key constraints on table \"vectric.security_passwordresettokens\""
enum vectric_security_passwordresettokens_constraint {
    "unique or primary key constraint"
    idx_109980_primary
}

"select columns of table \"vectric.security_passwordresettokens\""
enum vectric_security_passwordresettokens_select_column {
    "column name"
    expiryDate
    "column name"
    token
    "column name"
    username
}

"update columns of table \"vectric.security_passwordresettokens\""
enum vectric_security_passwordresettokens_update_column {
    "column name"
    expiryDate
    "column name"
    token
    "column name"
    username
}

"unique or primary key constraints on table \"vectric.security_userinvitations\""
enum vectric_security_userinvitations_constraint {
    "unique or primary key constraint"
    idx_109987_customerid
    "unique or primary key constraint"
    idx_109987_primary
    "unique or primary key constraint"
    idx_109987_username
    "unique or primary key constraint"
    user_invitation_multiple_unique
}

"select columns of table \"vectric.security_userinvitations\""
enum vectric_security_userinvitations_select_column {
    "column name"
    acceptedDate
    "column name"
    adminofid
    "column name"
    createDate
    "column name"
    customerId
    "column name"
    expirydate
    "column name"
    staffofid
    "column name"
    token
    "column name"
    username
}

"update columns of table \"vectric.security_userinvitations\""
enum vectric_security_userinvitations_update_column {
    "column name"
    acceptedDate
    "column name"
    adminofid
    "column name"
    createDate
    "column name"
    customerId
    "column name"
    expirydate
    "column name"
    staffofid
    "column name"
    token
    "column name"
    username
}

"unique or primary key constraints on table \"vectric.security_users\""
enum vectric_security_users_constraint {
    "unique or primary key constraint"
    idx_109993_primary
}

"select columns of table \"vectric.security_users\""
enum vectric_security_users_select_column {
    "column name"
    accountNonExpired
    "column name"
    credentialsNonExpired
    "column name"
    enabled
    "column name"
    password
    "column name"
    salesCustomerId
    "column name"
    username
    "column name"
    voucherCode
}

"update columns of table \"vectric.security_users\""
enum vectric_security_users_update_column {
    "column name"
    accountNonExpired
    "column name"
    credentialsNonExpired
    "column name"
    enabled
    "column name"
    password
    "column name"
    salesCustomerId
    "column name"
    username
    "column name"
    voucherCode
}

"unique or primary key constraints on table \"vectric.site_option_location\""
enum vectric_site_option_location_constraint {
    "unique or primary key constraint"
    idx_110013_primary
}

"select columns of table \"vectric.site_option_location\""
enum vectric_site_option_location_select_column {
    "column name"
    locationid
    "column name"
    name
}

"update columns of table \"vectric.site_option_location\""
enum vectric_site_option_location_update_column {
    "column name"
    locationid
    "column name"
    name
}

"unique or primary key constraints on table \"vectric.site_options\""
enum vectric_site_options_constraint {
    "unique or primary key constraint"
    idx_110004_optionname
    "unique or primary key constraint"
    idx_110004_primary
}

"select columns of table \"vectric.site_options\""
enum vectric_site_options_select_column {
    "column name"
    description
    "column name"
    optionid
    "column name"
    optionname
    "column name"
    siteid
    "column name"
    stringval
    "column name"
    value
}

"update columns of table \"vectric.site_options\""
enum vectric_site_options_update_column {
    "column name"
    description
    "column name"
    optionid
    "column name"
    optionname
    "column name"
    siteid
    "column name"
    stringval
    "column name"
    value
}

"unique or primary key constraints on table \"vectric.subscription_contract_status\""
enum vectric_subscription_contract_status_constraint {
    "unique or primary key constraint"
    subscription_contract_status_pkey
}

"select columns of table \"vectric.subscription_contract_status\""
enum vectric_subscription_contract_status_select_column {
    "column name"
    status
}

"update columns of table \"vectric.subscription_contract_status\""
enum vectric_subscription_contract_status_update_column {
    "column name"
    status
}

"unique or primary key constraints on table \"vectric.subscription_contracts\""
enum vectric_subscription_contracts_constraint {
    "unique or primary key constraint"
    subscription_contracts_pkey
}

"select columns of table \"vectric.subscription_contracts\""
enum vectric_subscription_contracts_select_column {
    "column name"
    dateEnding
    "column name"
    dateStarted
    "column name"
    orderItemId
    "column name"
    status
    "column name"
    subscriptionContractId
    "column name"
    subscriptionId
}

"update columns of table \"vectric.subscription_contracts\""
enum vectric_subscription_contracts_update_column {
    "column name"
    dateEnding
    "column name"
    dateStarted
    "column name"
    orderItemId
    "column name"
    status
    "column name"
    subscriptionContractId
    "column name"
    subscriptionId
}

"unique or primary key constraints on table \"vectric.subscription_events\""
enum vectric_subscription_events_constraint {
    "unique or primary key constraint"
    subscription_events_pkey
}

"select columns of table \"vectric.subscription_events\""
enum vectric_subscription_events_select_column {
    "column name"
    actionTaken
    "column name"
    dateCreated
    "column name"
    dateProcessed
    "column name"
    eventId
    "column name"
    eventType
    "column name"
    fastspringInternalOrderId
    "column name"
    fastspringOrderReference
    "column name"
    fastspringSubscriptionId
    "column name"
    orderItemId
    "column name"
    subscriptionContractId
    "column name"
    subscriptionDateStarted
    "column name"
    subscriptionDeactivationDate
    "column name"
    subscriptionNextRebillDate
}

"update columns of table \"vectric.subscription_events\""
enum vectric_subscription_events_update_column {
    "column name"
    actionTaken
    "column name"
    dateCreated
    "column name"
    dateProcessed
    "column name"
    eventId
    "column name"
    eventType
    "column name"
    fastspringInternalOrderId
    "column name"
    fastspringOrderReference
    "column name"
    fastspringSubscriptionId
    "column name"
    orderItemId
    "column name"
    subscriptionContractId
    "column name"
    subscriptionDateStarted
    "column name"
    subscriptionDeactivationDate
    "column name"
    subscriptionNextRebillDate
}

"unique or primary key constraints on table \"vectric.toolpath_saver_token\""
enum vectric_toolpath_saver_token_constraint {
    "unique or primary key constraint"
    idx_110023_primary
    "unique or primary key constraint"
    idx_110023_unique_custom_product_token
}

"select columns of table \"vectric.toolpath_saver_token\""
enum vectric_toolpath_saver_token_select_column {
    "column name"
    customerId
    "column name"
    dateExpired
    "column name"
    dateGenerated
    "column name"
    productId
    "column name"
    token
    "column name"
    toolpathSaverTokenId
    "column name"
    used
}

"update columns of table \"vectric.toolpath_saver_token\""
enum vectric_toolpath_saver_token_update_column {
    "column name"
    customerId
    "column name"
    dateExpired
    "column name"
    dateGenerated
    "column name"
    productId
    "column name"
    token
    "column name"
    toolpathSaverTokenId
    "column name"
    used
}

"unique or primary key constraints on table \"vectric.trial_order\""
enum vectric_trial_order_constraint {
    "unique or primary key constraint"
    idx_110043_primary
}

"select columns of table \"vectric.trial_order\""
enum vectric_trial_order_select_column {
    "column name"
    customerId
    "column name"
    endDate
    "column name"
    orderId
    "column name"
    productId
    "column name"
    startDate
    "column name"
    valid
}

"update columns of table \"vectric.trial_order\""
enum vectric_trial_order_update_column {
    "column name"
    customerId
    "column name"
    endDate
    "column name"
    orderId
    "column name"
    productId
    "column name"
    startDate
    "column name"
    valid
}

"unique or primary key constraints on table \"vectric.update_requests\""
enum vectric_update_requests_constraint {
    "unique or primary key constraint"
    idx_110050_primary
}

"select columns of table \"vectric.update_requests\""
enum vectric_update_requests_select_column {
    "column name"
    dateAccessed
    "column name"
    ipAddress
    "column name"
    majorVersion
    "column name"
    minorVersionOOX
    "column name"
    minorVersionOXO
    "column name"
    minorVersionXOO
    "column name"
    osMajorVersion
    "column name"
    osMinorVersion
    "column name"
    productName
    "column name"
    requestId
    "column name"
    wProcessorArch
}

"update columns of table \"vectric.update_requests\""
enum vectric_update_requests_update_column {
    "column name"
    dateAccessed
    "column name"
    ipAddress
    "column name"
    majorVersion
    "column name"
    minorVersionOOX
    "column name"
    minorVersionOXO
    "column name"
    minorVersionXOO
    "column name"
    osMajorVersion
    "column name"
    osMinorVersion
    "column name"
    productName
    "column name"
    requestId
    "column name"
    wProcessorArch
}

"unique or primary key constraints on table \"vectric.upgrade_tokens\""
enum vectric_upgrade_tokens_constraint {
    "unique or primary key constraint"
    idx_110088_primary
}

"select columns of table \"vectric.upgrade_tokens\""
enum vectric_upgrade_tokens_select_column {
    "column name"
    customerId
    "column name"
    dateCreated
    "column name"
    dateUsed
    "column name"
    orderItemProductId
    "column name"
    token
    "column name"
    upgradeEligibilityId
    "column name"
    upgradedToOrderItemProduct
    "column name"
    used
}

"update columns of table \"vectric.upgrade_tokens\""
enum vectric_upgrade_tokens_update_column {
    "column name"
    customerId
    "column name"
    dateCreated
    "column name"
    dateUsed
    "column name"
    orderItemProductId
    "column name"
    token
    "column name"
    upgradeEligibilityId
    "column name"
    upgradedToOrderItemProduct
    "column name"
    used
}

"unique or primary key constraints on table \"vectric.upgrades_feature\""
enum vectric_upgrades_feature_constraint {
    "unique or primary key constraint"
    idx_110060_primary
}

"select columns of table \"vectric.upgrades_feature\""
enum vectric_upgrades_feature_select_column {
    "column name"
    enabled
    "column name"
    extendedDescription
    "column name"
    featureId
    "column name"
    title
}

"update columns of table \"vectric.upgrades_feature\""
enum vectric_upgrades_feature_update_column {
    "column name"
    enabled
    "column name"
    extendedDescription
    "column name"
    featureId
    "column name"
    title
}

"unique or primary key constraints on table \"vectric.upgrades_product_type_feature\""
enum vectric_upgrades_product_type_feature_constraint {
    "unique or primary key constraint"
    idx_110068_primary
}

"select columns of table \"vectric.upgrades_product_type_feature\""
enum vectric_upgrades_product_type_feature_select_column {
    "column name"
    feature
    "column name"
    fromProductType
    "column name"
    ranking
    "column name"
    toProductType
    "column name"
    upgradeId
}

"update columns of table \"vectric.upgrades_product_type_feature\""
enum vectric_upgrades_product_type_feature_update_column {
    "column name"
    feature
    "column name"
    fromProductType
    "column name"
    ranking
    "column name"
    toProductType
    "column name"
    upgradeId
}

"unique or primary key constraints on table \"vectric.upgrades_version_feature\""
enum vectric_upgrades_version_feature_constraint {
    "unique or primary key constraint"
    idx_110074_primary
}

"select columns of table \"vectric.upgrades_version_feature\""
enum vectric_upgrades_version_feature_select_column {
    "column name"
    feature
    "column name"
    majorVersion
    "column name"
    minorVersion
    "column name"
    productType
    "column name"
    ranking
    "column name"
    upgradeId
}

"update columns of table \"vectric.upgrades_version_feature\""
enum vectric_upgrades_version_feature_update_column {
    "column name"
    feature
    "column name"
    majorVersion
    "column name"
    minorVersion
    "column name"
    productType
    "column name"
    ranking
    "column name"
    upgradeId
}

"unique or primary key constraints on table \"vectric.usergroup_2019_attendees\""
enum vectric_usergroup_2019_attendees_constraint {
    "unique or primary key constraint"
    idx_110094_primary
}

"select columns of table \"vectric.usergroup_2019_attendees\""
enum vectric_usergroup_2019_attendees_select_column {
    "column name"
    attendeeid
    "column name"
    bringingsample
    "column name"
    company
    "column name"
    customerid
    "column name"
    diet
    "column name"
    email
    "column name"
    fastspringreference
    "column name"
    firstname
    "column name"
    forumname
    "column name"
    lastname
    "column name"
    notes
    "column name"
    productid
    "column name"
    purchasedate
    "column name"
    reference
    "column name"
    state
    "column name"
    status
    "column name"
    tshirtsize
    "column name"
    uk
}

"update columns of table \"vectric.usergroup_2019_attendees\""
enum vectric_usergroup_2019_attendees_update_column {
    "column name"
    attendeeid
    "column name"
    bringingsample
    "column name"
    company
    "column name"
    customerid
    "column name"
    diet
    "column name"
    email
    "column name"
    fastspringreference
    "column name"
    firstname
    "column name"
    forumname
    "column name"
    lastname
    "column name"
    notes
    "column name"
    productid
    "column name"
    purchasedate
    "column name"
    reference
    "column name"
    state
    "column name"
    status
    "column name"
    tshirtsize
    "column name"
    uk
}

"unique or primary key constraints on table \"vectric.usergroup_2019_waitlist\""
enum vectric_usergroup_2019_waitlist_constraint {
    "unique or primary key constraint"
    idx_110106_primary
}

"select columns of table \"vectric.usergroup_2019_waitlist\""
enum vectric_usergroup_2019_waitlist_select_column {
    "column name"
    attendeeid
    "column name"
    customerid
    "column name"
    desiredquantity
    "column name"
    email
    "column name"
    invitationdate
    "column name"
    productid
    "column name"
    reference
    "column name"
    status
}

"update columns of table \"vectric.usergroup_2019_waitlist\""
enum vectric_usergroup_2019_waitlist_update_column {
    "column name"
    attendeeid
    "column name"
    customerid
    "column name"
    desiredquantity
    "column name"
    email
    "column name"
    invitationdate
    "column name"
    productid
    "column name"
    reference
    "column name"
    status
}

"unique or primary key constraints on table \"vectric.version_code\""
enum vectric_version_code_constraint {
    "unique or primary key constraint"
    idx_version_code_id
}

"select columns of table \"vectric.version_code\""
enum vectric_version_code_select_column {
    "column name"
    displayVersion
    "column name"
    latest
    "column name"
    majorVersion
    "column name"
    minorVersionOOX
    "column name"
    minorVersionOXO
    "column name"
    minorVersionXOO
    "column name"
    notifying
    "column name"
    patchUrl
    "column name"
    releaseDate
    "column name"
    url
    "column name"
    versionCodeId
    "column name"
    visible
}

"update columns of table \"vectric.version_code\""
enum vectric_version_code_update_column {
    "column name"
    displayVersion
    "column name"
    latest
    "column name"
    majorVersion
    "column name"
    minorVersionOOX
    "column name"
    minorVersionOXO
    "column name"
    minorVersionXOO
    "column name"
    notifying
    "column name"
    patchUrl
    "column name"
    releaseDate
    "column name"
    url
    "column name"
    versionCodeId
    "column name"
    visible
}

scalar bigint

scalar bpchar

scalar date

scalar jsonb

scalar numeric

scalar smallint

scalar timestamp

scalar timestamptz

scalar uuid

input AddFreeClipartRequest {
    clipartToken: String!
    customerId: bigint!
    fastspringId: String!
    registeredUsername: String!
}

input AddLicenceInput {
    customerId: bigint!
    productName: String!
}

input AddTestBundleInput {
    partnerId: bigint!
    productName: String
    quantity: Int!
}

input AllocateLicenceRequest {
    allocatedBy: String!
    allocationType: String!
    customerId: bigint!
    notes: String
    partnerId: Int!
    productId: Int!
    quantity: Int!
}

input AssignmentInput {
    assignedBy: String!
    email: String!
    organizationId: Int!
    ownedItemId: Int!
}

"Boolean expression to compare columns of type \"Boolean\". All fields are combined with logical 'AND'."
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

input CheckEmailForSignUpInput {
    email: String!
}

input EvaluationLicenceRequest {
    customerId: bigint!
    days: Int!
    productName: String!
}

"Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'."
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

input OemFSRequest {
    quantity: Int!
    software: String!
}

input OrganizationAddNewMemberRequest {
    email: String!
    organizationId: Int!
    role: String!
}

input OrganizationEditMemberRequest {
    jobType: String!
    membershipId: Int!
    organizationId: Int!
    role: String!
    status: String!
}

input RegisterInviteInput {
    invitationToken: String!
    marketingEmails: Boolean!
    password: String!
    termsAndConditions: Boolean!
}

input SecureFSItemsInput {
    percentDiscount: Float!
    product: String!
}

input SignUpInput {
    captchaResponse: String!
    companyName: String
    customerName: String!
    email: String!
    marketingEmails: Boolean!
    membershipInvitationToken: String
    password: String!
    product: String
    termsAndConditions: Boolean!
}

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    "does the column match the given case-insensitive pattern"
    _ilike: String
    _in: [String!]
    "does the column match the given POSIX regular expression, case insensitive"
    _iregex: String
    _is_null: Boolean
    "does the column match the given pattern"
    _like: String
    _lt: String
    _lte: String
    _neq: String
    "does the column NOT match the given case-insensitive pattern"
    _nilike: String
    _nin: [String!]
    "does the column NOT match the given POSIX regular expression, case insensitive"
    _niregex: String
    "does the column NOT match the given pattern"
    _nlike: String
    "does the column NOT match the given POSIX regular expression, case sensitive"
    _nregex: String
    "does the column NOT match the given SQL regular expression"
    _nsimilar: String
    "does the column match the given POSIX regular expression, case sensitive"
    _regex: String
    "does the column match the given SQL regular expression"
    _similar: String
}

input TestOrderInput {
    customerId: Int!
    date: timestamptz
    licenceCode: String
    orderId: String
    productName: String!
    registeredUsername: String
    status: Int
}

input TransferInput {
    customerId: bigint!
    oipId: String!
    transferClipart: Boolean
}

input UnassignItemInput {
    ownedItemId: Int!
}

"Boolean expression to compare columns of type \"bigint\". All fields are combined with logical 'AND'."
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}

"Boolean expression to compare columns of type \"bpchar\". All fields are combined with logical 'AND'."
input bpchar_comparison_exp {
    _eq: bpchar
    _gt: bpchar
    _gte: bpchar
    "does the column match the given case-insensitive pattern"
    _ilike: bpchar
    _in: [bpchar!]
    "does the column match the given POSIX regular expression, case insensitive"
    _iregex: bpchar
    _is_null: Boolean
    "does the column match the given pattern"
    _like: bpchar
    _lt: bpchar
    _lte: bpchar
    _neq: bpchar
    "does the column NOT match the given case-insensitive pattern"
    _nilike: bpchar
    _nin: [bpchar!]
    "does the column NOT match the given POSIX regular expression, case insensitive"
    _niregex: bpchar
    "does the column NOT match the given pattern"
    _nlike: bpchar
    "does the column NOT match the given POSIX regular expression, case sensitive"
    _nregex: bpchar
    "does the column NOT match the given SQL regular expression"
    _nsimilar: bpchar
    "does the column match the given POSIX regular expression, case sensitive"
    _regex: bpchar
    "does the column match the given SQL regular expression"
    _similar: bpchar
}

"Boolean expression to compare columns of type \"date\". All fields are combined with logical 'AND'."
input date_comparison_exp {
    _eq: date
    _gt: date
    _gte: date
    _in: [date!]
    _is_null: Boolean
    _lt: date
    _lte: date
    _neq: date
    _nin: [date!]
}

"Boolean expression to compare columns of type \"jsonb\". All fields are combined with logical 'AND'."
input jsonb_comparison_exp {
    "is the column contained in the given json value"
    _contained_in: jsonb
    "does the column contain the given json value at the top level"
    _contains: jsonb
    _eq: jsonb
    _gt: jsonb
    _gte: jsonb
    "does the string exist as a top-level key in the column"
    _has_key: String
    "do all of these strings exist as top-level keys in the column"
    _has_keys_all: [String!]
    "do any of these strings exist as top-level keys in the column"
    _has_keys_any: [String!]
    _in: [jsonb!]
    _is_null: Boolean
    _lt: jsonb
    _lte: jsonb
    _neq: jsonb
    _nin: [jsonb!]
}

"Boolean expression to compare columns of type \"numeric\". All fields are combined with logical 'AND'."
input numeric_comparison_exp {
    _eq: numeric
    _gt: numeric
    _gte: numeric
    _in: [numeric!]
    _is_null: Boolean
    _lt: numeric
    _lte: numeric
    _neq: numeric
    _nin: [numeric!]
}

input sendLicenceAllocationEmailRequest {
    automated: Boolean!
    bundleId: String!
    email: String!
}

"Boolean expression to compare columns of type \"smallint\". All fields are combined with logical 'AND'."
input smallint_comparison_exp {
    _eq: smallint
    _gt: smallint
    _gte: smallint
    _in: [smallint!]
    _is_null: Boolean
    _lt: smallint
    _lte: smallint
    _neq: smallint
    _nin: [smallint!]
}

"Boolean expression to compare columns of type \"timestamp\". All fields are combined with logical 'AND'."
input timestamp_comparison_exp {
    _eq: timestamp
    _gt: timestamp
    _gte: timestamp
    _in: [timestamp!]
    _is_null: Boolean
    _lt: timestamp
    _lte: timestamp
    _neq: timestamp
    _nin: [timestamp!]
}

"Boolean expression to compare columns of type \"timestamptz\". All fields are combined with logical 'AND'."
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}

"Boolean expression to compare columns of type \"uuid\". All fields are combined with logical 'AND'."
input uuid_comparison_exp {
    _eq: uuid
    _gt: uuid
    _gte: uuid
    _in: [uuid!]
    _is_null: Boolean
    _lt: uuid
    _lte: uuid
    _neq: uuid
    _nin: [uuid!]
}

"order by aggregate values of table \"vectric.active_memberships\""
input vectric_active_memberships_aggregate_order_by {
    avg: vectric_active_memberships_avg_order_by
    count: order_by
    max: vectric_active_memberships_max_order_by
    min: vectric_active_memberships_min_order_by
    stddev: vectric_active_memberships_stddev_order_by
    stddev_pop: vectric_active_memberships_stddev_pop_order_by
    stddev_samp: vectric_active_memberships_stddev_samp_order_by
    sum: vectric_active_memberships_sum_order_by
    var_pop: vectric_active_memberships_var_pop_order_by
    var_samp: vectric_active_memberships_var_samp_order_by
    variance: vectric_active_memberships_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.active_memberships\""
input vectric_active_memberships_arr_rel_insert_input {
    data: [vectric_active_memberships_insert_input!]!
}

"order by avg() on columns of table \"vectric.active_memberships\""
input vectric_active_memberships_avg_order_by {
    customerId: order_by
    membershipId: order_by
    organizationId: order_by
}

"Boolean expression to filter rows from the table \"vectric.active_memberships\". All fields are combined with a logical 'AND'."
input vectric_active_memberships_bool_exp {
    _and: [vectric_active_memberships_bool_exp!]
    _not: vectric_active_memberships_bool_exp
    _or: [vectric_active_memberships_bool_exp!]
    customerId: bigint_comparison_exp
    isAdmin: Boolean_comparison_exp
    membershipId: Int_comparison_exp
    organization: vectric_organizations_bool_exp
    organizationId: Int_comparison_exp
    role: String_comparison_exp
}

"input type for inserting data into table \"vectric.active_memberships\""
input vectric_active_memberships_insert_input {
    customerId: bigint
    isAdmin: Boolean
    membershipId: Int
    organization: vectric_organizations_obj_rel_insert_input
    organizationId: Int
    role: String
}

"order by max() on columns of table \"vectric.active_memberships\""
input vectric_active_memberships_max_order_by {
    customerId: order_by
    membershipId: order_by
    organizationId: order_by
    role: order_by
}

"order by min() on columns of table \"vectric.active_memberships\""
input vectric_active_memberships_min_order_by {
    customerId: order_by
    membershipId: order_by
    organizationId: order_by
    role: order_by
}

"Ordering options when selecting data from \"vectric.active_memberships\"."
input vectric_active_memberships_order_by {
    customerId: order_by
    isAdmin: order_by
    membershipId: order_by
    organization: vectric_organizations_order_by
    organizationId: order_by
    role: order_by
}

"order by stddev() on columns of table \"vectric.active_memberships\""
input vectric_active_memberships_stddev_order_by {
    customerId: order_by
    membershipId: order_by
    organizationId: order_by
}

"order by stddev_pop() on columns of table \"vectric.active_memberships\""
input vectric_active_memberships_stddev_pop_order_by {
    customerId: order_by
    membershipId: order_by
    organizationId: order_by
}

"order by stddev_samp() on columns of table \"vectric.active_memberships\""
input vectric_active_memberships_stddev_samp_order_by {
    customerId: order_by
    membershipId: order_by
    organizationId: order_by
}

"order by sum() on columns of table \"vectric.active_memberships\""
input vectric_active_memberships_sum_order_by {
    customerId: order_by
    membershipId: order_by
    organizationId: order_by
}

"order by var_pop() on columns of table \"vectric.active_memberships\""
input vectric_active_memberships_var_pop_order_by {
    customerId: order_by
    membershipId: order_by
    organizationId: order_by
}

"order by var_samp() on columns of table \"vectric.active_memberships\""
input vectric_active_memberships_var_samp_order_by {
    customerId: order_by
    membershipId: order_by
    organizationId: order_by
}

"order by variance() on columns of table \"vectric.active_memberships\""
input vectric_active_memberships_variance_order_by {
    customerId: order_by
    membershipId: order_by
    organizationId: order_by
}

"order by aggregate values of table \"vectric.active_upgrades\""
input vectric_active_upgrades_aggregate_order_by {
    avg: vectric_active_upgrades_avg_order_by
    count: order_by
    max: vectric_active_upgrades_max_order_by
    min: vectric_active_upgrades_min_order_by
    stddev: vectric_active_upgrades_stddev_order_by
    stddev_pop: vectric_active_upgrades_stddev_pop_order_by
    stddev_samp: vectric_active_upgrades_stddev_samp_order_by
    sum: vectric_active_upgrades_sum_order_by
    var_pop: vectric_active_upgrades_var_pop_order_by
    var_samp: vectric_active_upgrades_var_samp_order_by
    variance: vectric_active_upgrades_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.active_upgrades\""
input vectric_active_upgrades_arr_rel_insert_input {
    data: [vectric_active_upgrades_insert_input!]!
}

"order by avg() on columns of table \"vectric.active_upgrades\""
input vectric_active_upgrades_avg_order_by {
    eligibility_id: order_by
    from_product_id: order_by
    price: order_by
    to_product_id: order_by
}

"Boolean expression to filter rows from the table \"vectric.active_upgrades\". All fields are combined with a logical 'AND'."
input vectric_active_upgrades_bool_exp {
    _and: [vectric_active_upgrades_bool_exp!]
    _not: vectric_active_upgrades_bool_exp
    _or: [vectric_active_upgrades_bool_exp!]
    eligibility_id: bigint_comparison_exp
    fastspring_id: String_comparison_exp
    fromProduct: vectric_products_products_bool_exp
    from_product_id: bigint_comparison_exp
    from_product_name: String_comparison_exp
    price: numeric_comparison_exp
    summary: String_comparison_exp
    toProduct: vectric_products_products_bool_exp
    to_product_id: bigint_comparison_exp
    to_product_name: String_comparison_exp
}

"input type for inserting data into table \"vectric.active_upgrades\""
input vectric_active_upgrades_insert_input {
    eligibility_id: bigint
    fastspring_id: String
    fromProduct: vectric_products_products_obj_rel_insert_input
    from_product_id: bigint
    from_product_name: String
    price: numeric
    summary: String
    toProduct: vectric_products_products_obj_rel_insert_input
    to_product_id: bigint
    to_product_name: String
}

"order by max() on columns of table \"vectric.active_upgrades\""
input vectric_active_upgrades_max_order_by {
    eligibility_id: order_by
    fastspring_id: order_by
    from_product_id: order_by
    from_product_name: order_by
    price: order_by
    summary: order_by
    to_product_id: order_by
    to_product_name: order_by
}

"order by min() on columns of table \"vectric.active_upgrades\""
input vectric_active_upgrades_min_order_by {
    eligibility_id: order_by
    fastspring_id: order_by
    from_product_id: order_by
    from_product_name: order_by
    price: order_by
    summary: order_by
    to_product_id: order_by
    to_product_name: order_by
}

"Ordering options when selecting data from \"vectric.active_upgrades\"."
input vectric_active_upgrades_order_by {
    eligibility_id: order_by
    fastspring_id: order_by
    fromProduct: vectric_products_products_order_by
    from_product_id: order_by
    from_product_name: order_by
    price: order_by
    summary: order_by
    toProduct: vectric_products_products_order_by
    to_product_id: order_by
    to_product_name: order_by
}

"order by stddev() on columns of table \"vectric.active_upgrades\""
input vectric_active_upgrades_stddev_order_by {
    eligibility_id: order_by
    from_product_id: order_by
    price: order_by
    to_product_id: order_by
}

"order by stddev_pop() on columns of table \"vectric.active_upgrades\""
input vectric_active_upgrades_stddev_pop_order_by {
    eligibility_id: order_by
    from_product_id: order_by
    price: order_by
    to_product_id: order_by
}

"order by stddev_samp() on columns of table \"vectric.active_upgrades\""
input vectric_active_upgrades_stddev_samp_order_by {
    eligibility_id: order_by
    from_product_id: order_by
    price: order_by
    to_product_id: order_by
}

"order by sum() on columns of table \"vectric.active_upgrades\""
input vectric_active_upgrades_sum_order_by {
    eligibility_id: order_by
    from_product_id: order_by
    price: order_by
    to_product_id: order_by
}

"order by var_pop() on columns of table \"vectric.active_upgrades\""
input vectric_active_upgrades_var_pop_order_by {
    eligibility_id: order_by
    from_product_id: order_by
    price: order_by
    to_product_id: order_by
}

"order by var_samp() on columns of table \"vectric.active_upgrades\""
input vectric_active_upgrades_var_samp_order_by {
    eligibility_id: order_by
    from_product_id: order_by
    price: order_by
    to_product_id: order_by
}

"order by variance() on columns of table \"vectric.active_upgrades\""
input vectric_active_upgrades_variance_order_by {
    eligibility_id: order_by
    from_product_id: order_by
    price: order_by
    to_product_id: order_by
}

"Boolean expression to filter rows from the table \"vectric.allocatable_bundles\". All fields are combined with a logical 'AND'."
input vectric_allocatable_bundles_bool_exp {
    _and: [vectric_allocatable_bundles_bool_exp!]
    _not: vectric_allocatable_bundles_bool_exp
    _or: [vectric_allocatable_bundles_bool_exp!]
    allocatableProduct: vectric_products_products_bool_exp
    bundleId: String_comparison_exp
    licences: vectric_sales_oemlicences_bool_exp
    partner: vectric_oem_partners_bool_exp
    partnerId: bigint_comparison_exp
    product: bigint_comparison_exp
    productDisplayName: String_comparison_exp
    typeDisplayName: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.allocatable_bundles\""
input vectric_allocatable_bundles_inc_input {
    partnerId: bigint
    product: bigint
}

"input type for inserting data into table \"vectric.allocatable_bundles\""
input vectric_allocatable_bundles_insert_input {
    allocatableProduct: vectric_products_products_obj_rel_insert_input
    bundleId: String
    licences: vectric_sales_oemlicences_arr_rel_insert_input
    partner: vectric_oem_partners_obj_rel_insert_input
    partnerId: bigint
    product: bigint
    productDisplayName: String
    typeDisplayName: String
}

"Ordering options when selecting data from \"vectric.allocatable_bundles\"."
input vectric_allocatable_bundles_order_by {
    allocatableProduct: vectric_products_products_order_by
    bundleId: order_by
    licences_aggregate: vectric_sales_oemlicences_aggregate_order_by
    partner: vectric_oem_partners_order_by
    partnerId: order_by
    product: order_by
    productDisplayName: order_by
    typeDisplayName: order_by
}

"input type for updating data in table \"vectric.allocatable_bundles\""
input vectric_allocatable_bundles_set_input {
    bundleId: String
    partnerId: bigint
    product: bigint
    productDisplayName: String
    typeDisplayName: String
}

"Boolean expression to filter rows from the table \"vectric.allocatable_licence_count\". All fields are combined with a logical 'AND'."
input vectric_allocatable_licence_count_bool_exp {
    _and: [vectric_allocatable_licence_count_bool_exp!]
    _not: vectric_allocatable_licence_count_bool_exp
    _or: [vectric_allocatable_licence_count_bool_exp!]
    allocatableProduct: vectric_products_products_bool_exp
    availableCount: bigint_comparison_exp
    oemPartnerId: bigint_comparison_exp
    partner: vectric_oem_partners_bool_exp
    productId: bigint_comparison_exp
}

"Ordering options when selecting data from \"vectric.allocatable_licence_count\"."
input vectric_allocatable_licence_count_order_by {
    allocatableProduct: vectric_products_products_order_by
    availableCount: order_by
    oemPartnerId: order_by
    partner: vectric_oem_partners_order_by
    productId: order_by
}

"order by aggregate values of table \"vectric.allocated_bundles\""
input vectric_allocated_bundles_aggregate_order_by {
    avg: vectric_allocated_bundles_avg_order_by
    count: order_by
    max: vectric_allocated_bundles_max_order_by
    min: vectric_allocated_bundles_min_order_by
    stddev: vectric_allocated_bundles_stddev_order_by
    stddev_pop: vectric_allocated_bundles_stddev_pop_order_by
    stddev_samp: vectric_allocated_bundles_stddev_samp_order_by
    sum: vectric_allocated_bundles_sum_order_by
    var_pop: vectric_allocated_bundles_var_pop_order_by
    var_samp: vectric_allocated_bundles_var_samp_order_by
    variance: vectric_allocated_bundles_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.allocated_bundles\""
input vectric_allocated_bundles_arr_rel_insert_input {
    data: [vectric_allocated_bundles_insert_input!]!
}

"order by avg() on columns of table \"vectric.allocated_bundles\""
input vectric_allocated_bundles_avg_order_by {
    allocationtype: order_by
    partnerId: order_by
    product: order_by
}

"Boolean expression to filter rows from the table \"vectric.allocated_bundles\". All fields are combined with a logical 'AND'."
input vectric_allocated_bundles_bool_exp {
    _and: [vectric_allocated_bundles_bool_exp!]
    _not: vectric_allocated_bundles_bool_exp
    _or: [vectric_allocated_bundles_bool_exp!]
    allocatedby: String_comparison_exp
    allocationbatch: String_comparison_exp
    allocationtype: bigint_comparison_exp
    bundleId: String_comparison_exp
    dateAllocated: timestamptz_comparison_exp
    dateCreated: timestamptz_comparison_exp
    dateOriginallyRegistered: timestamptz_comparison_exp
    licences: vectric_sales_oemlicences_bool_exp
    notes: String_comparison_exp
    partner: vectric_oem_partners_bool_exp
    partnerId: bigint_comparison_exp
    product: bigint_comparison_exp
    productDisplayName: String_comparison_exp
    typeDisplayName: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.allocated_bundles\""
input vectric_allocated_bundles_inc_input {
    allocationtype: bigint
    partnerId: bigint
    product: bigint
}

"input type for inserting data into table \"vectric.allocated_bundles\""
input vectric_allocated_bundles_insert_input {
    allocatedby: String
    allocationbatch: String
    allocationtype: bigint
    bundleId: String
    dateAllocated: timestamptz
    dateCreated: timestamptz
    dateOriginallyRegistered: timestamptz
    licences: vectric_sales_oemlicences_arr_rel_insert_input
    notes: String
    partner: vectric_oem_partners_obj_rel_insert_input
    partnerId: bigint
    product: bigint
    productDisplayName: String
    typeDisplayName: String
}

"order by max() on columns of table \"vectric.allocated_bundles\""
input vectric_allocated_bundles_max_order_by {
    allocatedby: order_by
    allocationbatch: order_by
    allocationtype: order_by
    bundleId: order_by
    dateAllocated: order_by
    dateCreated: order_by
    dateOriginallyRegistered: order_by
    notes: order_by
    partnerId: order_by
    product: order_by
    productDisplayName: order_by
    typeDisplayName: order_by
}

"order by min() on columns of table \"vectric.allocated_bundles\""
input vectric_allocated_bundles_min_order_by {
    allocatedby: order_by
    allocationbatch: order_by
    allocationtype: order_by
    bundleId: order_by
    dateAllocated: order_by
    dateCreated: order_by
    dateOriginallyRegistered: order_by
    notes: order_by
    partnerId: order_by
    product: order_by
    productDisplayName: order_by
    typeDisplayName: order_by
}

"Ordering options when selecting data from \"vectric.allocated_bundles\"."
input vectric_allocated_bundles_order_by {
    allocatedby: order_by
    allocationbatch: order_by
    allocationtype: order_by
    bundleId: order_by
    dateAllocated: order_by
    dateCreated: order_by
    dateOriginallyRegistered: order_by
    licences_aggregate: vectric_sales_oemlicences_aggregate_order_by
    notes: order_by
    partner: vectric_oem_partners_order_by
    partnerId: order_by
    product: order_by
    productDisplayName: order_by
    typeDisplayName: order_by
}

"input type for updating data in table \"vectric.allocated_bundles\""
input vectric_allocated_bundles_set_input {
    allocatedby: String
    allocationbatch: String
    allocationtype: bigint
    bundleId: String
    dateAllocated: timestamptz
    dateCreated: timestamptz
    dateOriginallyRegistered: timestamptz
    notes: String
    partnerId: bigint
    product: bigint
    productDisplayName: String
    typeDisplayName: String
}

"order by stddev() on columns of table \"vectric.allocated_bundles\""
input vectric_allocated_bundles_stddev_order_by {
    allocationtype: order_by
    partnerId: order_by
    product: order_by
}

"order by stddev_pop() on columns of table \"vectric.allocated_bundles\""
input vectric_allocated_bundles_stddev_pop_order_by {
    allocationtype: order_by
    partnerId: order_by
    product: order_by
}

"order by stddev_samp() on columns of table \"vectric.allocated_bundles\""
input vectric_allocated_bundles_stddev_samp_order_by {
    allocationtype: order_by
    partnerId: order_by
    product: order_by
}

"order by sum() on columns of table \"vectric.allocated_bundles\""
input vectric_allocated_bundles_sum_order_by {
    allocationtype: order_by
    partnerId: order_by
    product: order_by
}

"order by var_pop() on columns of table \"vectric.allocated_bundles\""
input vectric_allocated_bundles_var_pop_order_by {
    allocationtype: order_by
    partnerId: order_by
    product: order_by
}

"order by var_samp() on columns of table \"vectric.allocated_bundles\""
input vectric_allocated_bundles_var_samp_order_by {
    allocationtype: order_by
    partnerId: order_by
    product: order_by
}

"order by variance() on columns of table \"vectric.allocated_bundles\""
input vectric_allocated_bundles_variance_order_by {
    allocationtype: order_by
    partnerId: order_by
    product: order_by
}

"Boolean expression to filter rows from the table \"vectric.allocation_summary\". All fields are combined with a logical 'AND'."
input vectric_allocation_summary_bool_exp {
    _and: [vectric_allocation_summary_bool_exp!]
    _not: vectric_allocation_summary_bool_exp
    _or: [vectric_allocation_summary_bool_exp!]
    batch: vectric_allocated_bundles_bool_exp
    batchId: String_comparison_exp
    bucket: String_comparison_exp
    id: Int_comparison_exp
    location: String_comparison_exp
    partner: vectric_oem_partners_bool_exp
    partnerId: Int_comparison_exp
    signedUrl: String_comparison_exp
    type: vectric_allocation_summary_file_type_enum_comparison_exp
}

"Boolean expression to filter rows from the table \"vectric.allocation_summary_file_type\". All fields are combined with a logical 'AND'."
input vectric_allocation_summary_file_type_bool_exp {
    _and: [vectric_allocation_summary_file_type_bool_exp!]
    _not: vectric_allocation_summary_file_type_bool_exp
    _or: [vectric_allocation_summary_file_type_bool_exp!]
    type: String_comparison_exp
}

"Boolean expression to compare columns of type \"vectric_allocation_summary_file_type_enum\". All fields are combined with logical 'AND'."
input vectric_allocation_summary_file_type_enum_comparison_exp {
    _eq: vectric_allocation_summary_file_type_enum
    _in: [vectric_allocation_summary_file_type_enum!]
    _is_null: Boolean
    _neq: vectric_allocation_summary_file_type_enum
    _nin: [vectric_allocation_summary_file_type_enum!]
}

"input type for inserting data into table \"vectric.allocation_summary_file_type\""
input vectric_allocation_summary_file_type_insert_input {
    type: String
}

"on conflict condition type for table \"vectric.allocation_summary_file_type\""
input vectric_allocation_summary_file_type_on_conflict {
    constraint: vectric_allocation_summary_file_type_constraint!
    update_columns: [vectric_allocation_summary_file_type_update_column!]! = []
    where: vectric_allocation_summary_file_type_bool_exp
}

"Ordering options when selecting data from \"vectric.allocation_summary_file_type\"."
input vectric_allocation_summary_file_type_order_by {
    type: order_by
}

"primary key columns input for table: vectric_allocation_summary_file_type"
input vectric_allocation_summary_file_type_pk_columns_input {
    type: String!
}

"input type for updating data in table \"vectric.allocation_summary_file_type\""
input vectric_allocation_summary_file_type_set_input {
    type: String
}

"input type for incrementing numeric columns in table \"vectric.allocation_summary\""
input vectric_allocation_summary_inc_input {
    id: Int
    partnerId: Int
}

"input type for inserting data into table \"vectric.allocation_summary\""
input vectric_allocation_summary_insert_input {
    batch: vectric_allocated_bundles_arr_rel_insert_input
    batchId: String
    bucket: String
    id: Int
    location: String
    partner: vectric_oem_partners_obj_rel_insert_input
    partnerId: Int
    signedUrl: String
    type: vectric_allocation_summary_file_type_enum
}

"on conflict condition type for table \"vectric.allocation_summary\""
input vectric_allocation_summary_on_conflict {
    constraint: vectric_allocation_summary_constraint!
    update_columns: [vectric_allocation_summary_update_column!]! = []
    where: vectric_allocation_summary_bool_exp
}

"Ordering options when selecting data from \"vectric.allocation_summary\"."
input vectric_allocation_summary_order_by {
    batchId: order_by
    batch_aggregate: vectric_allocated_bundles_aggregate_order_by
    bucket: order_by
    id: order_by
    location: order_by
    partner: vectric_oem_partners_order_by
    partnerId: order_by
    signedUrl: order_by
    type: order_by
}

"primary key columns input for table: vectric_allocation_summary"
input vectric_allocation_summary_pk_columns_input {
    id: Int!
}

"input type for updating data in table \"vectric.allocation_summary\""
input vectric_allocation_summary_set_input {
    batchId: String
    bucket: String
    id: Int
    location: String
    partnerId: Int
    signedUrl: String
    type: vectric_allocation_summary_file_type_enum
}

"Boolean expression to filter rows from the table \"vectric.continents\". All fields are combined with a logical 'AND'."
input vectric_continents_bool_exp {
    _and: [vectric_continents_bool_exp!]
    _not: vectric_continents_bool_exp
    _or: [vectric_continents_bool_exp!]
    code: bpchar_comparison_exp
    name: String_comparison_exp
}

"input type for inserting data into table \"vectric.continents\""
input vectric_continents_insert_input {
    "Continent code"
    code: bpchar
    name: String
}

"input type for inserting object relation for remote table \"vectric.continents\""
input vectric_continents_obj_rel_insert_input {
    data: vectric_continents_insert_input!
    "on conflict condition"
    on_conflict: vectric_continents_on_conflict
}

"on conflict condition type for table \"vectric.continents\""
input vectric_continents_on_conflict {
    constraint: vectric_continents_constraint!
    update_columns: [vectric_continents_update_column!]! = []
    where: vectric_continents_bool_exp
}

"Ordering options when selecting data from \"vectric.continents\"."
input vectric_continents_order_by {
    code: order_by
    name: order_by
}

"primary key columns input for table: vectric_continents"
input vectric_continents_pk_columns_input {
    "Continent code"
    code: bpchar!
}

"input type for updating data in table \"vectric.continents\""
input vectric_continents_set_input {
    "Continent code"
    code: bpchar
    name: String
}

"Boolean expression to filter rows from the table \"vectric.countries\". All fields are combined with a logical 'AND'."
input vectric_countries_bool_exp {
    _and: [vectric_countries_bool_exp!]
    _not: vectric_countries_bool_exp
    _or: [vectric_countries_bool_exp!]
    code: bpchar_comparison_exp
    continent: vectric_continents_bool_exp
    continentcode: bpchar_comparison_exp
    countryid: bigint_comparison_exp
    displayorder: Int_comparison_exp
    fullname: String_comparison_exp
    iso3: bpchar_comparison_exp
    name: String_comparison_exp
    number: Int_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.countries\""
input vectric_countries_inc_input {
    countryid: bigint
    displayorder: Int
    "Three-digit country number (ISO 3166-1 numeric)"
    number: Int
}

"input type for inserting data into table \"vectric.countries\""
input vectric_countries_insert_input {
    "Two-letter country code (ISO 3166-1 alpha-2)"
    code: bpchar
    continent: vectric_continents_obj_rel_insert_input
    continentcode: bpchar
    countryid: bigint
    displayorder: Int
    "Full English country name"
    fullname: String
    "Three-letter country code (ISO 3166-1 alpha-3)"
    iso3: bpchar
    "English country name"
    name: String
    "Three-digit country number (ISO 3166-1 numeric)"
    number: Int
}

"input type for inserting object relation for remote table \"vectric.countries\""
input vectric_countries_obj_rel_insert_input {
    data: vectric_countries_insert_input!
    "on conflict condition"
    on_conflict: vectric_countries_on_conflict
}

"on conflict condition type for table \"vectric.countries\""
input vectric_countries_on_conflict {
    constraint: vectric_countries_constraint!
    update_columns: [vectric_countries_update_column!]! = []
    where: vectric_countries_bool_exp
}

"Ordering options when selecting data from \"vectric.countries\"."
input vectric_countries_order_by {
    code: order_by
    continent: vectric_continents_order_by
    continentcode: order_by
    countryid: order_by
    displayorder: order_by
    fullname: order_by
    iso3: order_by
    name: order_by
    number: order_by
}

"primary key columns input for table: vectric_countries"
input vectric_countries_pk_columns_input {
    countryid: bigint!
}

"input type for updating data in table \"vectric.countries\""
input vectric_countries_set_input {
    "Two-letter country code (ISO 3166-1 alpha-2)"
    code: bpchar
    continentcode: bpchar
    countryid: bigint
    displayorder: Int
    "Full English country name"
    fullname: String
    "Three-letter country code (ISO 3166-1 alpha-3)"
    iso3: bpchar
    "English country name"
    name: String
    "Three-digit country number (ISO 3166-1 numeric)"
    number: Int
}

"Boolean expression to filter rows from the table \"vectric.customer_area\". All fields are combined with a logical 'AND'."
input vectric_customer_area_bool_exp {
    _and: [vectric_customer_area_bool_exp!]
    _not: vectric_customer_area_bool_exp
    _or: [vectric_customer_area_bool_exp!]
    bucketName: String_comparison_exp
    customer: vectric_sales_customers_bool_exp
    customerAreaFiles: vectric_customer_area_file_bool_exp
    customerAreaId: bigint_comparison_exp
    customerId: bigint_comparison_exp
    objectName: String_comparison_exp
}

"order by aggregate values of table \"vectric.customer_area_file\""
input vectric_customer_area_file_aggregate_order_by {
    avg: vectric_customer_area_file_avg_order_by
    count: order_by
    max: vectric_customer_area_file_max_order_by
    min: vectric_customer_area_file_min_order_by
    stddev: vectric_customer_area_file_stddev_order_by
    stddev_pop: vectric_customer_area_file_stddev_pop_order_by
    stddev_samp: vectric_customer_area_file_stddev_samp_order_by
    sum: vectric_customer_area_file_sum_order_by
    var_pop: vectric_customer_area_file_var_pop_order_by
    var_samp: vectric_customer_area_file_var_samp_order_by
    variance: vectric_customer_area_file_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.customer_area_file\""
input vectric_customer_area_file_arr_rel_insert_input {
    data: [vectric_customer_area_file_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_customer_area_file_on_conflict
}

"order by avg() on columns of table \"vectric.customer_area_file\""
input vectric_customer_area_file_avg_order_by {
    customerAreaFileId: order_by
    customerAreaId: order_by
    productId: order_by
}

"Boolean expression to filter rows from the table \"vectric.customer_area_file\". All fields are combined with a logical 'AND'."
input vectric_customer_area_file_bool_exp {
    _and: [vectric_customer_area_file_bool_exp!]
    _not: vectric_customer_area_file_bool_exp
    _or: [vectric_customer_area_file_bool_exp!]
    customerArea: vectric_customer_area_bool_exp
    customerAreaFileId: bigint_comparison_exp
    customerAreaId: bigint_comparison_exp
    dateUploaded: timestamptz_comparison_exp
    fileKey: String_comparison_exp
    fileName: String_comparison_exp
    objectName: String_comparison_exp
    product: vectric_products_products_bool_exp
    productId: bigint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.customer_area_file\""
input vectric_customer_area_file_inc_input {
    customerAreaFileId: bigint
    customerAreaId: bigint
    productId: bigint
}

"input type for inserting data into table \"vectric.customer_area_file\""
input vectric_customer_area_file_insert_input {
    customerArea: vectric_customer_area_obj_rel_insert_input
    customerAreaFileId: bigint
    customerAreaId: bigint
    dateUploaded: timestamptz
    fileKey: String
    fileName: String
    objectName: String
    product: vectric_products_products_obj_rel_insert_input
    productId: bigint
}

"order by max() on columns of table \"vectric.customer_area_file\""
input vectric_customer_area_file_max_order_by {
    customerAreaFileId: order_by
    customerAreaId: order_by
    dateUploaded: order_by
    fileKey: order_by
    fileName: order_by
    objectName: order_by
    productId: order_by
}

"order by min() on columns of table \"vectric.customer_area_file\""
input vectric_customer_area_file_min_order_by {
    customerAreaFileId: order_by
    customerAreaId: order_by
    dateUploaded: order_by
    fileKey: order_by
    fileName: order_by
    objectName: order_by
    productId: order_by
}

"on conflict condition type for table \"vectric.customer_area_file\""
input vectric_customer_area_file_on_conflict {
    constraint: vectric_customer_area_file_constraint!
    update_columns: [vectric_customer_area_file_update_column!]! = []
    where: vectric_customer_area_file_bool_exp
}

"Ordering options when selecting data from \"vectric.customer_area_file\"."
input vectric_customer_area_file_order_by {
    customerArea: vectric_customer_area_order_by
    customerAreaFileId: order_by
    customerAreaId: order_by
    dateUploaded: order_by
    fileKey: order_by
    fileName: order_by
    objectName: order_by
    product: vectric_products_products_order_by
    productId: order_by
}

"primary key columns input for table: vectric_customer_area_file"
input vectric_customer_area_file_pk_columns_input {
    customerAreaFileId: bigint!
}

"input type for updating data in table \"vectric.customer_area_file\""
input vectric_customer_area_file_set_input {
    customerAreaFileId: bigint
    customerAreaId: bigint
    dateUploaded: timestamptz
    fileKey: String
    fileName: String
    objectName: String
    productId: bigint
}

"order by stddev() on columns of table \"vectric.customer_area_file\""
input vectric_customer_area_file_stddev_order_by {
    customerAreaFileId: order_by
    customerAreaId: order_by
    productId: order_by
}

"order by stddev_pop() on columns of table \"vectric.customer_area_file\""
input vectric_customer_area_file_stddev_pop_order_by {
    customerAreaFileId: order_by
    customerAreaId: order_by
    productId: order_by
}

"order by stddev_samp() on columns of table \"vectric.customer_area_file\""
input vectric_customer_area_file_stddev_samp_order_by {
    customerAreaFileId: order_by
    customerAreaId: order_by
    productId: order_by
}

"order by sum() on columns of table \"vectric.customer_area_file\""
input vectric_customer_area_file_sum_order_by {
    customerAreaFileId: order_by
    customerAreaId: order_by
    productId: order_by
}

"order by var_pop() on columns of table \"vectric.customer_area_file\""
input vectric_customer_area_file_var_pop_order_by {
    customerAreaFileId: order_by
    customerAreaId: order_by
    productId: order_by
}

"order by var_samp() on columns of table \"vectric.customer_area_file\""
input vectric_customer_area_file_var_samp_order_by {
    customerAreaFileId: order_by
    customerAreaId: order_by
    productId: order_by
}

"order by variance() on columns of table \"vectric.customer_area_file\""
input vectric_customer_area_file_variance_order_by {
    customerAreaFileId: order_by
    customerAreaId: order_by
    productId: order_by
}

"input type for incrementing numeric columns in table \"vectric.customer_area\""
input vectric_customer_area_inc_input {
    customerAreaId: bigint
    customerId: bigint
}

"input type for inserting data into table \"vectric.customer_area\""
input vectric_customer_area_insert_input {
    bucketName: String
    customer: vectric_sales_customers_obj_rel_insert_input
    customerAreaFiles: vectric_customer_area_file_arr_rel_insert_input
    customerAreaId: bigint
    customerId: bigint
    objectName: String
}

"input type for inserting object relation for remote table \"vectric.customer_area\""
input vectric_customer_area_obj_rel_insert_input {
    data: vectric_customer_area_insert_input!
    "on conflict condition"
    on_conflict: vectric_customer_area_on_conflict
}

"on conflict condition type for table \"vectric.customer_area\""
input vectric_customer_area_on_conflict {
    constraint: vectric_customer_area_constraint!
    update_columns: [vectric_customer_area_update_column!]! = []
    where: vectric_customer_area_bool_exp
}

"Ordering options when selecting data from \"vectric.customer_area\"."
input vectric_customer_area_order_by {
    bucketName: order_by
    customer: vectric_sales_customers_order_by
    customerAreaFiles_aggregate: vectric_customer_area_file_aggregate_order_by
    customerAreaId: order_by
    customerId: order_by
    objectName: order_by
}

"primary key columns input for table: vectric_customer_area"
input vectric_customer_area_pk_columns_input {
    customerAreaId: bigint!
}

"input type for updating data in table \"vectric.customer_area\""
input vectric_customer_area_set_input {
    bucketName: String
    customerAreaId: bigint
    customerId: bigint
    objectName: String
}

"order by aggregate values of table \"vectric.customer_responses\""
input vectric_customer_responses_aggregate_order_by {
    avg: vectric_customer_responses_avg_order_by
    count: order_by
    max: vectric_customer_responses_max_order_by
    min: vectric_customer_responses_min_order_by
    stddev: vectric_customer_responses_stddev_order_by
    stddev_pop: vectric_customer_responses_stddev_pop_order_by
    stddev_samp: vectric_customer_responses_stddev_samp_order_by
    sum: vectric_customer_responses_sum_order_by
    var_pop: vectric_customer_responses_var_pop_order_by
    var_samp: vectric_customer_responses_var_samp_order_by
    variance: vectric_customer_responses_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.customer_responses\""
input vectric_customer_responses_arr_rel_insert_input {
    data: [vectric_customer_responses_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_customer_responses_on_conflict
}

"order by avg() on columns of table \"vectric.customer_responses\""
input vectric_customer_responses_avg_order_by {
    customerid: order_by
    customerresponseid: order_by
    questionid: order_by
    responseid: order_by
}

"Boolean expression to filter rows from the table \"vectric.customer_responses\". All fields are combined with a logical 'AND'."
input vectric_customer_responses_bool_exp {
    _and: [vectric_customer_responses_bool_exp!]
    _not: vectric_customer_responses_bool_exp
    _or: [vectric_customer_responses_bool_exp!]
    customerid: bigint_comparison_exp
    customerresponseid: bigint_comparison_exp
    othertext: String_comparison_exp
    question: vectric_questions_bool_exp
    questionid: bigint_comparison_exp
    response: vectric_responses_bool_exp
    responseid: bigint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.customer_responses\""
input vectric_customer_responses_inc_input {
    customerid: bigint
    customerresponseid: bigint
    questionid: bigint
    responseid: bigint
}

"input type for inserting data into table \"vectric.customer_responses\""
input vectric_customer_responses_insert_input {
    customerid: bigint
    customerresponseid: bigint
    othertext: String
    question: vectric_questions_obj_rel_insert_input
    questionid: bigint
    response: vectric_responses_obj_rel_insert_input
    responseid: bigint
}

"order by max() on columns of table \"vectric.customer_responses\""
input vectric_customer_responses_max_order_by {
    customerid: order_by
    customerresponseid: order_by
    othertext: order_by
    questionid: order_by
    responseid: order_by
}

"order by min() on columns of table \"vectric.customer_responses\""
input vectric_customer_responses_min_order_by {
    customerid: order_by
    customerresponseid: order_by
    othertext: order_by
    questionid: order_by
    responseid: order_by
}

"on conflict condition type for table \"vectric.customer_responses\""
input vectric_customer_responses_on_conflict {
    constraint: vectric_customer_responses_constraint!
    update_columns: [vectric_customer_responses_update_column!]! = []
    where: vectric_customer_responses_bool_exp
}

"Ordering options when selecting data from \"vectric.customer_responses\"."
input vectric_customer_responses_order_by {
    customerid: order_by
    customerresponseid: order_by
    othertext: order_by
    question: vectric_questions_order_by
    questionid: order_by
    response: vectric_responses_order_by
    responseid: order_by
}

"primary key columns input for table: vectric_customer_responses"
input vectric_customer_responses_pk_columns_input {
    customerresponseid: bigint!
}

"input type for updating data in table \"vectric.customer_responses\""
input vectric_customer_responses_set_input {
    customerid: bigint
    customerresponseid: bigint
    othertext: String
    questionid: bigint
    responseid: bigint
}

"order by stddev() on columns of table \"vectric.customer_responses\""
input vectric_customer_responses_stddev_order_by {
    customerid: order_by
    customerresponseid: order_by
    questionid: order_by
    responseid: order_by
}

"order by stddev_pop() on columns of table \"vectric.customer_responses\""
input vectric_customer_responses_stddev_pop_order_by {
    customerid: order_by
    customerresponseid: order_by
    questionid: order_by
    responseid: order_by
}

"order by stddev_samp() on columns of table \"vectric.customer_responses\""
input vectric_customer_responses_stddev_samp_order_by {
    customerid: order_by
    customerresponseid: order_by
    questionid: order_by
    responseid: order_by
}

"order by sum() on columns of table \"vectric.customer_responses\""
input vectric_customer_responses_sum_order_by {
    customerid: order_by
    customerresponseid: order_by
    questionid: order_by
    responseid: order_by
}

"order by var_pop() on columns of table \"vectric.customer_responses\""
input vectric_customer_responses_var_pop_order_by {
    customerid: order_by
    customerresponseid: order_by
    questionid: order_by
    responseid: order_by
}

"order by var_samp() on columns of table \"vectric.customer_responses\""
input vectric_customer_responses_var_samp_order_by {
    customerid: order_by
    customerresponseid: order_by
    questionid: order_by
    responseid: order_by
}

"order by variance() on columns of table \"vectric.customer_responses\""
input vectric_customer_responses_variance_order_by {
    customerid: order_by
    customerresponseid: order_by
    questionid: order_by
    responseid: order_by
}

"order by aggregate values of table \"vectric.customer_sales\""
input vectric_customer_sales_aggregate_order_by {
    avg: vectric_customer_sales_avg_order_by
    count: order_by
    max: vectric_customer_sales_max_order_by
    min: vectric_customer_sales_min_order_by
    stddev: vectric_customer_sales_stddev_order_by
    stddev_pop: vectric_customer_sales_stddev_pop_order_by
    stddev_samp: vectric_customer_sales_stddev_samp_order_by
    sum: vectric_customer_sales_sum_order_by
    var_pop: vectric_customer_sales_var_pop_order_by
    var_samp: vectric_customer_sales_var_samp_order_by
    variance: vectric_customer_sales_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.customer_sales\""
input vectric_customer_sales_arr_rel_insert_input {
    data: [vectric_customer_sales_insert_input!]!
}

"order by avg() on columns of table \"vectric.customer_sales\""
input vectric_customer_sales_avg_order_by {
    customerId: order_by
}

"Boolean expression to filter rows from the table \"vectric.customer_sales\". All fields are combined with a logical 'AND'."
input vectric_customer_sales_bool_exp {
    _and: [vectric_customer_sales_bool_exp!]
    _not: vectric_customer_sales_bool_exp
    _or: [vectric_customer_sales_bool_exp!]
    customerId: bigint_comparison_exp
    dateCreated: timestamptz_comparison_exp
    orderDate: timestamptz_comparison_exp
    orderId: String_comparison_exp
    salesItems: vectric_sales_salesitems_bool_exp
    veccode: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.customer_sales\""
input vectric_customer_sales_inc_input {
    customerId: bigint
}

"input type for inserting data into table \"vectric.customer_sales\""
input vectric_customer_sales_insert_input {
    customerId: bigint
    dateCreated: timestamptz
    orderDate: timestamptz
    orderId: String
    salesItems: vectric_sales_salesitems_arr_rel_insert_input
    veccode: String
}

"order by max() on columns of table \"vectric.customer_sales\""
input vectric_customer_sales_max_order_by {
    customerId: order_by
    dateCreated: order_by
    orderDate: order_by
    orderId: order_by
    veccode: order_by
}

"order by min() on columns of table \"vectric.customer_sales\""
input vectric_customer_sales_min_order_by {
    customerId: order_by
    dateCreated: order_by
    orderDate: order_by
    orderId: order_by
    veccode: order_by
}

"input type for inserting object relation for remote table \"vectric.customer_sales\""
input vectric_customer_sales_obj_rel_insert_input {
    data: vectric_customer_sales_insert_input!
}

"Ordering options when selecting data from \"vectric.customer_sales\"."
input vectric_customer_sales_order_by {
    customerId: order_by
    dateCreated: order_by
    orderDate: order_by
    orderId: order_by
    salesItems_aggregate: vectric_sales_salesitems_aggregate_order_by
    veccode: order_by
}

"input type for updating data in table \"vectric.customer_sales\""
input vectric_customer_sales_set_input {
    customerId: bigint
    dateCreated: timestamptz
    orderDate: timestamptz
    orderId: String
    veccode: String
}

"order by stddev() on columns of table \"vectric.customer_sales\""
input vectric_customer_sales_stddev_order_by {
    customerId: order_by
}

"order by stddev_pop() on columns of table \"vectric.customer_sales\""
input vectric_customer_sales_stddev_pop_order_by {
    customerId: order_by
}

"order by stddev_samp() on columns of table \"vectric.customer_sales\""
input vectric_customer_sales_stddev_samp_order_by {
    customerId: order_by
}

"order by sum() on columns of table \"vectric.customer_sales\""
input vectric_customer_sales_sum_order_by {
    customerId: order_by
}

"order by var_pop() on columns of table \"vectric.customer_sales\""
input vectric_customer_sales_var_pop_order_by {
    customerId: order_by
}

"order by var_samp() on columns of table \"vectric.customer_sales\""
input vectric_customer_sales_var_samp_order_by {
    customerId: order_by
}

"order by variance() on columns of table \"vectric.customer_sales\""
input vectric_customer_sales_variance_order_by {
    customerId: order_by
}

"Boolean expression to filter rows from the table \"vectric.customer_status\". All fields are combined with a logical 'AND'."
input vectric_customer_status_bool_exp {
    _and: [vectric_customer_status_bool_exp!]
    _not: vectric_customer_status_bool_exp
    _or: [vectric_customer_status_bool_exp!]
    status: String_comparison_exp
    statusId: bigint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.customer_status\""
input vectric_customer_status_inc_input {
    statusId: bigint
}

"input type for inserting data into table \"vectric.customer_status\""
input vectric_customer_status_insert_input {
    status: String
    statusId: bigint
}

"on conflict condition type for table \"vectric.customer_status\""
input vectric_customer_status_on_conflict {
    constraint: vectric_customer_status_constraint!
    update_columns: [vectric_customer_status_update_column!]! = []
    where: vectric_customer_status_bool_exp
}

"Ordering options when selecting data from \"vectric.customer_status\"."
input vectric_customer_status_order_by {
    status: order_by
    statusId: order_by
}

"primary key columns input for table: vectric_customer_status"
input vectric_customer_status_pk_columns_input {
    statusId: bigint!
}

"input type for updating data in table \"vectric.customer_status\""
input vectric_customer_status_set_input {
    status: String
    statusId: bigint
}

"Boolean expression to filter rows from the table \"vectric.customer_zd_uploads\". All fields are combined with a logical 'AND'."
input vectric_customer_zd_uploads_bool_exp {
    _and: [vectric_customer_zd_uploads_bool_exp!]
    _not: vectric_customer_zd_uploads_bool_exp
    _or: [vectric_customer_zd_uploads_bool_exp!]
    createdBy: bigint_comparison_exp
    customer: vectric_sales_customers_bool_exp
    customerId: bigint_comparison_exp
    dateCreated: timestamptz_comparison_exp
    dateUploaded: timestamptz_comparison_exp
    location: String_comparison_exp
    objectName: String_comparison_exp
    shorturlhash: String_comparison_exp
    staff: vectric_sales_customers_bool_exp
    ticketId: String_comparison_exp
    zdUploadId: bigint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.customer_zd_uploads\""
input vectric_customer_zd_uploads_inc_input {
    createdBy: bigint
    customerId: bigint
    zdUploadId: bigint
}

"input type for inserting data into table \"vectric.customer_zd_uploads\""
input vectric_customer_zd_uploads_insert_input {
    createdBy: bigint
    customer: vectric_sales_customers_obj_rel_insert_input
    customerId: bigint
    dateCreated: timestamptz
    dateUploaded: timestamptz
    location: String
    objectName: String
    shorturlhash: String
    staff: vectric_sales_customers_obj_rel_insert_input
    ticketId: String
    zdUploadId: bigint
}

"on conflict condition type for table \"vectric.customer_zd_uploads\""
input vectric_customer_zd_uploads_on_conflict {
    constraint: vectric_customer_zd_uploads_constraint!
    update_columns: [vectric_customer_zd_uploads_update_column!]! = []
    where: vectric_customer_zd_uploads_bool_exp
}

"Ordering options when selecting data from \"vectric.customer_zd_uploads\"."
input vectric_customer_zd_uploads_order_by {
    createdBy: order_by
    customer: vectric_sales_customers_order_by
    customerId: order_by
    dateCreated: order_by
    dateUploaded: order_by
    location: order_by
    objectName: order_by
    shorturlhash: order_by
    staff: vectric_sales_customers_order_by
    ticketId: order_by
    zdUploadId: order_by
}

"primary key columns input for table: vectric_customer_zd_uploads"
input vectric_customer_zd_uploads_pk_columns_input {
    zdUploadId: bigint!
}

"input type for updating data in table \"vectric.customer_zd_uploads\""
input vectric_customer_zd_uploads_set_input {
    createdBy: bigint
    customerId: bigint
    dateCreated: timestamptz
    dateUploaded: timestamptz
    location: String
    objectName: String
    shorturlhash: String
    ticketId: String
    zdUploadId: bigint
}

"Boolean expression to filter rows from the table \"vectric.download\". All fields are combined with a logical 'AND'."
input vectric_download_bool_exp {
    _and: [vectric_download_bool_exp!]
    _not: vectric_download_bool_exp
    _or: [vectric_download_bool_exp!]
    bucketName: String_comparison_exp
    description: String_comparison_exp
    downloadId: String_comparison_exp
    downloadSize: String_comparison_exp
    groupId: String_comparison_exp
    name: String_comparison_exp
    objectName: String_comparison_exp
    previewImageUrl: String_comparison_exp
    uploadDate: timestamptz_comparison_exp
}

"input type for inserting data into table \"vectric.download\""
input vectric_download_insert_input {
    bucketName: String
    description: String
    downloadId: String
    downloadSize: String
    groupId: String
    name: String
    objectName: String
    previewImageUrl: String
    uploadDate: timestamptz
}

"on conflict condition type for table \"vectric.download\""
input vectric_download_on_conflict {
    constraint: vectric_download_constraint!
    update_columns: [vectric_download_update_column!]! = []
    where: vectric_download_bool_exp
}

"Ordering options when selecting data from \"vectric.download\"."
input vectric_download_order_by {
    bucketName: order_by
    description: order_by
    downloadId: order_by
    downloadSize: order_by
    groupId: order_by
    name: order_by
    objectName: order_by
    previewImageUrl: order_by
    uploadDate: order_by
}

"primary key columns input for table: vectric_download"
input vectric_download_pk_columns_input {
    downloadId: String!
}

"Boolean expression to filter rows from the table \"vectric.download_record\". All fields are combined with a logical 'AND'."
input vectric_download_record_bool_exp {
    _and: [vectric_download_record_bool_exp!]
    _not: vectric_download_record_bool_exp
    _or: [vectric_download_record_bool_exp!]
    customerId: bigint_comparison_exp
    downloadDate: timestamptz_comparison_exp
    downloadId: String_comparison_exp
    id: bigint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.download_record\""
input vectric_download_record_inc_input {
    customerId: bigint
    id: bigint
}

"input type for inserting data into table \"vectric.download_record\""
input vectric_download_record_insert_input {
    customerId: bigint
    downloadDate: timestamptz
    downloadId: String
    id: bigint
}

"on conflict condition type for table \"vectric.download_record\""
input vectric_download_record_on_conflict {
    constraint: vectric_download_record_constraint!
    update_columns: [vectric_download_record_update_column!]! = []
    where: vectric_download_record_bool_exp
}

"Ordering options when selecting data from \"vectric.download_record\"."
input vectric_download_record_order_by {
    customerId: order_by
    downloadDate: order_by
    downloadId: order_by
    id: order_by
}

"primary key columns input for table: vectric_download_record"
input vectric_download_record_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"vectric.download_record\""
input vectric_download_record_set_input {
    customerId: bigint
    downloadDate: timestamptz
    downloadId: String
    id: bigint
}

"input type for updating data in table \"vectric.download\""
input vectric_download_set_input {
    bucketName: String
    description: String
    downloadId: String
    downloadSize: String
    groupId: String
    name: String
    objectName: String
    previewImageUrl: String
    uploadDate: timestamptz
}

"order by aggregate values of table \"vectric.enhancement_tokens\""
input vectric_enhancement_tokens_aggregate_order_by {
    avg: vectric_enhancement_tokens_avg_order_by
    count: order_by
    max: vectric_enhancement_tokens_max_order_by
    min: vectric_enhancement_tokens_min_order_by
    stddev: vectric_enhancement_tokens_stddev_order_by
    stddev_pop: vectric_enhancement_tokens_stddev_pop_order_by
    stddev_samp: vectric_enhancement_tokens_stddev_samp_order_by
    sum: vectric_enhancement_tokens_sum_order_by
    var_pop: vectric_enhancement_tokens_var_pop_order_by
    var_samp: vectric_enhancement_tokens_var_samp_order_by
    variance: vectric_enhancement_tokens_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.enhancement_tokens\""
input vectric_enhancement_tokens_arr_rel_insert_input {
    data: [vectric_enhancement_tokens_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_enhancement_tokens_on_conflict
}

"order by avg() on columns of table \"vectric.enhancement_tokens\""
input vectric_enhancement_tokens_avg_order_by {
    customerId: order_by
    enhancementEligibilityId: order_by
    enhancementOrderItemProductId: order_by
    orderItemProductId: order_by
}

"Boolean expression to filter rows from the table \"vectric.enhancement_tokens\". All fields are combined with a logical 'AND'."
input vectric_enhancement_tokens_bool_exp {
    _and: [vectric_enhancement_tokens_bool_exp!]
    _not: vectric_enhancement_tokens_bool_exp
    _or: [vectric_enhancement_tokens_bool_exp!]
    customerId: bigint_comparison_exp
    dateCreated: timestamptz_comparison_exp
    dateUsed: timestamptz_comparison_exp
    enhancementEligibilityId: bigint_comparison_exp
    enhancementOrderItemProductId: bigint_comparison_exp
    orderItemProductId: bigint_comparison_exp
    token: String_comparison_exp
    used: Boolean_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.enhancement_tokens\""
input vectric_enhancement_tokens_inc_input {
    customerId: bigint
    enhancementEligibilityId: bigint
    enhancementOrderItemProductId: bigint
    orderItemProductId: bigint
}

"input type for inserting data into table \"vectric.enhancement_tokens\""
input vectric_enhancement_tokens_insert_input {
    customerId: bigint
    dateCreated: timestamptz
    dateUsed: timestamptz
    enhancementEligibilityId: bigint
    enhancementOrderItemProductId: bigint
    orderItemProductId: bigint
    token: String
    used: Boolean
}

"order by max() on columns of table \"vectric.enhancement_tokens\""
input vectric_enhancement_tokens_max_order_by {
    customerId: order_by
    dateCreated: order_by
    dateUsed: order_by
    enhancementEligibilityId: order_by
    enhancementOrderItemProductId: order_by
    orderItemProductId: order_by
    token: order_by
}

"order by min() on columns of table \"vectric.enhancement_tokens\""
input vectric_enhancement_tokens_min_order_by {
    customerId: order_by
    dateCreated: order_by
    dateUsed: order_by
    enhancementEligibilityId: order_by
    enhancementOrderItemProductId: order_by
    orderItemProductId: order_by
    token: order_by
}

"on conflict condition type for table \"vectric.enhancement_tokens\""
input vectric_enhancement_tokens_on_conflict {
    constraint: vectric_enhancement_tokens_constraint!
    update_columns: [vectric_enhancement_tokens_update_column!]! = []
    where: vectric_enhancement_tokens_bool_exp
}

"Ordering options when selecting data from \"vectric.enhancement_tokens\"."
input vectric_enhancement_tokens_order_by {
    customerId: order_by
    dateCreated: order_by
    dateUsed: order_by
    enhancementEligibilityId: order_by
    enhancementOrderItemProductId: order_by
    orderItemProductId: order_by
    token: order_by
    used: order_by
}

"primary key columns input for table: vectric_enhancement_tokens"
input vectric_enhancement_tokens_pk_columns_input {
    token: String!
}

"input type for updating data in table \"vectric.enhancement_tokens\""
input vectric_enhancement_tokens_set_input {
    customerId: bigint
    dateCreated: timestamptz
    dateUsed: timestamptz
    enhancementEligibilityId: bigint
    enhancementOrderItemProductId: bigint
    orderItemProductId: bigint
    token: String
    used: Boolean
}

"order by stddev() on columns of table \"vectric.enhancement_tokens\""
input vectric_enhancement_tokens_stddev_order_by {
    customerId: order_by
    enhancementEligibilityId: order_by
    enhancementOrderItemProductId: order_by
    orderItemProductId: order_by
}

"order by stddev_pop() on columns of table \"vectric.enhancement_tokens\""
input vectric_enhancement_tokens_stddev_pop_order_by {
    customerId: order_by
    enhancementEligibilityId: order_by
    enhancementOrderItemProductId: order_by
    orderItemProductId: order_by
}

"order by stddev_samp() on columns of table \"vectric.enhancement_tokens\""
input vectric_enhancement_tokens_stddev_samp_order_by {
    customerId: order_by
    enhancementEligibilityId: order_by
    enhancementOrderItemProductId: order_by
    orderItemProductId: order_by
}

"order by sum() on columns of table \"vectric.enhancement_tokens\""
input vectric_enhancement_tokens_sum_order_by {
    customerId: order_by
    enhancementEligibilityId: order_by
    enhancementOrderItemProductId: order_by
    orderItemProductId: order_by
}

"order by var_pop() on columns of table \"vectric.enhancement_tokens\""
input vectric_enhancement_tokens_var_pop_order_by {
    customerId: order_by
    enhancementEligibilityId: order_by
    enhancementOrderItemProductId: order_by
    orderItemProductId: order_by
}

"order by var_samp() on columns of table \"vectric.enhancement_tokens\""
input vectric_enhancement_tokens_var_samp_order_by {
    customerId: order_by
    enhancementEligibilityId: order_by
    enhancementOrderItemProductId: order_by
    orderItemProductId: order_by
}

"order by variance() on columns of table \"vectric.enhancement_tokens\""
input vectric_enhancement_tokens_variance_order_by {
    customerId: order_by
    enhancementEligibilityId: order_by
    enhancementOrderItemProductId: order_by
    orderItemProductId: order_by
}

"order by aggregate values of table \"vectric.entitled_product_version_code_view\""
input vectric_entitled_product_version_code_view_aggregate_order_by {
    avg: vectric_entitled_product_version_code_view_avg_order_by
    count: order_by
    max: vectric_entitled_product_version_code_view_max_order_by
    min: vectric_entitled_product_version_code_view_min_order_by
    stddev: vectric_entitled_product_version_code_view_stddev_order_by
    stddev_pop: vectric_entitled_product_version_code_view_stddev_pop_order_by
    stddev_samp: vectric_entitled_product_version_code_view_stddev_samp_order_by
    sum: vectric_entitled_product_version_code_view_sum_order_by
    var_pop: vectric_entitled_product_version_code_view_var_pop_order_by
    var_samp: vectric_entitled_product_version_code_view_var_samp_order_by
    variance: vectric_entitled_product_version_code_view_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.entitled_product_version_code_view\""
input vectric_entitled_product_version_code_view_arr_rel_insert_input {
    data: [vectric_entitled_product_version_code_view_insert_input!]!
}

"order by avg() on columns of table \"vectric.entitled_product_version_code_view\""
input vectric_entitled_product_version_code_view_avg_order_by {
    entitled_product_id: order_by
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    versionCodeId: order_by
}

"Boolean expression to filter rows from the table \"vectric.entitled_product_version_code_view\". All fields are combined with a logical 'AND'."
input vectric_entitled_product_version_code_view_bool_exp {
    _and: [vectric_entitled_product_version_code_view_bool_exp!]
    _not: vectric_entitled_product_version_code_view_bool_exp
    _or: [vectric_entitled_product_version_code_view_bool_exp!]
    displayVersion: String_comparison_exp
    entitled_product_id: bigint_comparison_exp
    latest: Boolean_comparison_exp
    majorVersion: bigint_comparison_exp
    minorVersionOOX: bigint_comparison_exp
    minorVersionOXO: bigint_comparison_exp
    minorVersionXOO: bigint_comparison_exp
    notifying: Boolean_comparison_exp
    patchUrl: String_comparison_exp
    releaseDate: date_comparison_exp
    url: String_comparison_exp
    versionCodeId: bigint_comparison_exp
    visible: Boolean_comparison_exp
}

"input type for inserting data into table \"vectric.entitled_product_version_code_view\""
input vectric_entitled_product_version_code_view_insert_input {
    displayVersion: String
    entitled_product_id: bigint
    latest: Boolean
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    notifying: Boolean
    patchUrl: String
    releaseDate: date
    url: String
    versionCodeId: bigint
    visible: Boolean
}

"order by max() on columns of table \"vectric.entitled_product_version_code_view\""
input vectric_entitled_product_version_code_view_max_order_by {
    displayVersion: order_by
    entitled_product_id: order_by
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    patchUrl: order_by
    releaseDate: order_by
    url: order_by
    versionCodeId: order_by
}

"order by min() on columns of table \"vectric.entitled_product_version_code_view\""
input vectric_entitled_product_version_code_view_min_order_by {
    displayVersion: order_by
    entitled_product_id: order_by
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    patchUrl: order_by
    releaseDate: order_by
    url: order_by
    versionCodeId: order_by
}

"Ordering options when selecting data from \"vectric.entitled_product_version_code_view\"."
input vectric_entitled_product_version_code_view_order_by {
    displayVersion: order_by
    entitled_product_id: order_by
    latest: order_by
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    notifying: order_by
    patchUrl: order_by
    releaseDate: order_by
    url: order_by
    versionCodeId: order_by
    visible: order_by
}

"order by stddev() on columns of table \"vectric.entitled_product_version_code_view\""
input vectric_entitled_product_version_code_view_stddev_order_by {
    entitled_product_id: order_by
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    versionCodeId: order_by
}

"order by stddev_pop() on columns of table \"vectric.entitled_product_version_code_view\""
input vectric_entitled_product_version_code_view_stddev_pop_order_by {
    entitled_product_id: order_by
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    versionCodeId: order_by
}

"order by stddev_samp() on columns of table \"vectric.entitled_product_version_code_view\""
input vectric_entitled_product_version_code_view_stddev_samp_order_by {
    entitled_product_id: order_by
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    versionCodeId: order_by
}

"order by sum() on columns of table \"vectric.entitled_product_version_code_view\""
input vectric_entitled_product_version_code_view_sum_order_by {
    entitled_product_id: order_by
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    versionCodeId: order_by
}

"order by var_pop() on columns of table \"vectric.entitled_product_version_code_view\""
input vectric_entitled_product_version_code_view_var_pop_order_by {
    entitled_product_id: order_by
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    versionCodeId: order_by
}

"order by var_samp() on columns of table \"vectric.entitled_product_version_code_view\""
input vectric_entitled_product_version_code_view_var_samp_order_by {
    entitled_product_id: order_by
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    versionCodeId: order_by
}

"order by variance() on columns of table \"vectric.entitled_product_version_code_view\""
input vectric_entitled_product_version_code_view_variance_order_by {
    entitled_product_id: order_by
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    versionCodeId: order_by
}

"Boolean expression to filter rows from the table \"vectric.entitled_products\". All fields are combined with a logical 'AND'."
input vectric_entitled_products_bool_exp {
    _and: [vectric_entitled_products_bool_exp!]
    _not: vectric_entitled_products_bool_exp
    _or: [vectric_entitled_products_bool_exp!]
    enabled: Boolean_comparison_exp
    latestVersion: vectric_products_versioncodes_bool_exp
    latestVersionId: Int_comparison_exp
    licenceType: vectric_products_product_licence_type_enum_comparison_exp
    productId: Int_comparison_exp
    productName: String_comparison_exp
    productType: vectric_products_producttype_bool_exp
    productTypeId: Int_comparison_exp
    releaseDate: timestamp_comparison_exp
    requiresLicence: Boolean_comparison_exp
    versions: vectric_entitled_product_version_code_view_bool_exp
}

"input type for incrementing numeric columns in table \"vectric.entitled_products\""
input vectric_entitled_products_inc_input {
    latestVersionId: Int
    productId: Int
    productTypeId: Int
}

"input type for inserting data into table \"vectric.entitled_products\""
input vectric_entitled_products_insert_input {
    enabled: Boolean
    latestVersion: vectric_products_versioncodes_obj_rel_insert_input
    latestVersionId: Int
    licenceType: vectric_products_product_licence_type_enum
    productId: Int
    productName: String
    productType: vectric_products_producttype_obj_rel_insert_input
    productTypeId: Int
    releaseDate: timestamp
    requiresLicence: Boolean
    versions: vectric_entitled_product_version_code_view_arr_rel_insert_input
}

"input type for inserting object relation for remote table \"vectric.entitled_products\""
input vectric_entitled_products_obj_rel_insert_input {
    data: vectric_entitled_products_insert_input!
    "on conflict condition"
    on_conflict: vectric_entitled_products_on_conflict
}

"on conflict condition type for table \"vectric.entitled_products\""
input vectric_entitled_products_on_conflict {
    constraint: vectric_entitled_products_constraint!
    update_columns: [vectric_entitled_products_update_column!]! = []
    where: vectric_entitled_products_bool_exp
}

"Ordering options when selecting data from \"vectric.entitled_products\"."
input vectric_entitled_products_order_by {
    enabled: order_by
    latestVersion: vectric_products_versioncodes_order_by
    latestVersionId: order_by
    licenceType: order_by
    productId: order_by
    productName: order_by
    productType: vectric_products_producttype_order_by
    productTypeId: order_by
    releaseDate: order_by
    requiresLicence: order_by
    versions_aggregate: vectric_entitled_product_version_code_view_aggregate_order_by
}

"primary key columns input for table: vectric_entitled_products"
input vectric_entitled_products_pk_columns_input {
    productId: Int!
}

"input type for updating data in table \"vectric.entitled_products\""
input vectric_entitled_products_set_input {
    enabled: Boolean
    latestVersionId: Int
    licenceType: vectric_products_product_licence_type_enum
    productId: Int
    productName: String
    productTypeId: Int
    releaseDate: timestamp
    requiresLicence: Boolean
}

"Boolean expression to filter rows from the table \"vectric.entitlement_licences\". All fields are combined with a logical 'AND'."
input vectric_entitlement_licences_bool_exp {
    _and: [vectric_entitlement_licences_bool_exp!]
    _not: vectric_entitlement_licences_bool_exp
    _or: [vectric_entitlement_licences_bool_exp!]
    entitledProduct: vectric_entitled_products_bool_exp
    entitlement: vectric_entitlements_bool_exp
    entitlementId: Int_comparison_exp
    entitlementLicenceId: Int_comparison_exp
    licenceCode: String_comparison_exp
    licenceIdAsDisplay: Boolean_comparison_exp
    licenceType: String_comparison_exp
    productId: Int_comparison_exp
    registeredUsername: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.entitlement_licences\""
input vectric_entitlement_licences_inc_input {
    entitlementId: Int
    entitlementLicenceId: Int
    productId: Int
}

"input type for inserting data into table \"vectric.entitlement_licences\""
input vectric_entitlement_licences_insert_input {
    entitledProduct: vectric_entitled_products_obj_rel_insert_input
    entitlement: vectric_entitlements_obj_rel_insert_input
    entitlementId: Int
    entitlementLicenceId: Int
    licenceCode: String
    licenceIdAsDisplay: Boolean
    licenceType: String
    productId: Int
    registeredUsername: String
}

"input type for inserting object relation for remote table \"vectric.entitlement_licences\""
input vectric_entitlement_licences_obj_rel_insert_input {
    data: vectric_entitlement_licences_insert_input!
    "on conflict condition"
    on_conflict: vectric_entitlement_licences_on_conflict
}

"on conflict condition type for table \"vectric.entitlement_licences\""
input vectric_entitlement_licences_on_conflict {
    constraint: vectric_entitlement_licences_constraint!
    update_columns: [vectric_entitlement_licences_update_column!]! = []
    where: vectric_entitlement_licences_bool_exp
}

"Ordering options when selecting data from \"vectric.entitlement_licences\"."
input vectric_entitlement_licences_order_by {
    entitledProduct: vectric_entitled_products_order_by
    entitlement: vectric_entitlements_order_by
    entitlementId: order_by
    entitlementLicenceId: order_by
    licenceCode: order_by
    licenceIdAsDisplay: order_by
    licenceType: order_by
    productId: order_by
    registeredUsername: order_by
}

"primary key columns input for table: vectric_entitlement_licences"
input vectric_entitlement_licences_pk_columns_input {
    entitlementLicenceId: Int!
}

"input type for updating data in table \"vectric.entitlement_licences\""
input vectric_entitlement_licences_set_input {
    entitlementId: Int
    entitlementLicenceId: Int
    licenceCode: String
    licenceIdAsDisplay: Boolean
    licenceType: String
    productId: Int
    registeredUsername: String
}

"order by aggregate values of table \"vectric.entitlements\""
input vectric_entitlements_aggregate_order_by {
    avg: vectric_entitlements_avg_order_by
    count: order_by
    max: vectric_entitlements_max_order_by
    min: vectric_entitlements_min_order_by
    stddev: vectric_entitlements_stddev_order_by
    stddev_pop: vectric_entitlements_stddev_pop_order_by
    stddev_samp: vectric_entitlements_stddev_samp_order_by
    sum: vectric_entitlements_sum_order_by
    var_pop: vectric_entitlements_var_pop_order_by
    var_samp: vectric_entitlements_var_samp_order_by
    variance: vectric_entitlements_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.entitlements\""
input vectric_entitlements_arr_rel_insert_input {
    data: [vectric_entitlements_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_entitlements_on_conflict
}

"order by avg() on columns of table \"vectric.entitlements\""
input vectric_entitlements_avg_order_by {
    entitledProductId: order_by
    entitlementId: order_by
    ownedItemId: order_by
    statusId: order_by
}

"Boolean expression to filter rows from the table \"vectric.entitlements\". All fields are combined with a logical 'AND'."
input vectric_entitlements_bool_exp {
    _and: [vectric_entitlements_bool_exp!]
    _not: vectric_entitlements_bool_exp
    _or: [vectric_entitlements_bool_exp!]
    amendedBy: String_comparison_exp
    createdBy: String_comparison_exp
    dateAmended: timestamp_comparison_exp
    dateCreated: timestamp_comparison_exp
    entitledProduct: vectric_entitled_products_bool_exp
    entitledProductId: Int_comparison_exp
    entitlementId: Int_comparison_exp
    licence: vectric_entitlement_licences_bool_exp
    ownedItem: vectric_owned_items_bool_exp
    ownedItemId: Int_comparison_exp
    statusId: Int_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.entitlements\""
input vectric_entitlements_inc_input {
    entitledProductId: Int
    entitlementId: Int
    ownedItemId: Int
    statusId: Int
}

"input type for inserting data into table \"vectric.entitlements\""
input vectric_entitlements_insert_input {
    amendedBy: String
    createdBy: String
    dateAmended: timestamp
    dateCreated: timestamp
    entitledProduct: vectric_entitled_products_obj_rel_insert_input
    entitledProductId: Int
    entitlementId: Int
    licence: vectric_entitlement_licences_obj_rel_insert_input
    ownedItem: vectric_owned_items_obj_rel_insert_input
    ownedItemId: Int
    statusId: Int
}

"order by max() on columns of table \"vectric.entitlements\""
input vectric_entitlements_max_order_by {
    amendedBy: order_by
    createdBy: order_by
    dateAmended: order_by
    dateCreated: order_by
    entitledProductId: order_by
    entitlementId: order_by
    ownedItemId: order_by
    statusId: order_by
}

"order by min() on columns of table \"vectric.entitlements\""
input vectric_entitlements_min_order_by {
    amendedBy: order_by
    createdBy: order_by
    dateAmended: order_by
    dateCreated: order_by
    entitledProductId: order_by
    entitlementId: order_by
    ownedItemId: order_by
    statusId: order_by
}

"input type for inserting object relation for remote table \"vectric.entitlements\""
input vectric_entitlements_obj_rel_insert_input {
    data: vectric_entitlements_insert_input!
    "on conflict condition"
    on_conflict: vectric_entitlements_on_conflict
}

"on conflict condition type for table \"vectric.entitlements\""
input vectric_entitlements_on_conflict {
    constraint: vectric_entitlements_constraint!
    update_columns: [vectric_entitlements_update_column!]! = []
    where: vectric_entitlements_bool_exp
}

"Ordering options when selecting data from \"vectric.entitlements\"."
input vectric_entitlements_order_by {
    amendedBy: order_by
    createdBy: order_by
    dateAmended: order_by
    dateCreated: order_by
    entitledProduct: vectric_entitled_products_order_by
    entitledProductId: order_by
    entitlementId: order_by
    licence: vectric_entitlement_licences_order_by
    ownedItem: vectric_owned_items_order_by
    ownedItemId: order_by
    statusId: order_by
}

"primary key columns input for table: vectric_entitlements"
input vectric_entitlements_pk_columns_input {
    entitlementId: Int!
}

"input type for updating data in table \"vectric.entitlements\""
input vectric_entitlements_set_input {
    amendedBy: String
    createdBy: String
    dateAmended: timestamp
    dateCreated: timestamp
    entitledProductId: Int
    entitlementId: Int
    ownedItemId: Int
    statusId: Int
}

"order by stddev() on columns of table \"vectric.entitlements\""
input vectric_entitlements_stddev_order_by {
    entitledProductId: order_by
    entitlementId: order_by
    ownedItemId: order_by
    statusId: order_by
}

"order by stddev_pop() on columns of table \"vectric.entitlements\""
input vectric_entitlements_stddev_pop_order_by {
    entitledProductId: order_by
    entitlementId: order_by
    ownedItemId: order_by
    statusId: order_by
}

"order by stddev_samp() on columns of table \"vectric.entitlements\""
input vectric_entitlements_stddev_samp_order_by {
    entitledProductId: order_by
    entitlementId: order_by
    ownedItemId: order_by
    statusId: order_by
}

"order by sum() on columns of table \"vectric.entitlements\""
input vectric_entitlements_sum_order_by {
    entitledProductId: order_by
    entitlementId: order_by
    ownedItemId: order_by
    statusId: order_by
}

"order by var_pop() on columns of table \"vectric.entitlements\""
input vectric_entitlements_var_pop_order_by {
    entitledProductId: order_by
    entitlementId: order_by
    ownedItemId: order_by
    statusId: order_by
}

"order by var_samp() on columns of table \"vectric.entitlements\""
input vectric_entitlements_var_samp_order_by {
    entitledProductId: order_by
    entitlementId: order_by
    ownedItemId: order_by
    statusId: order_by
}

"order by variance() on columns of table \"vectric.entitlements\""
input vectric_entitlements_variance_order_by {
    entitledProductId: order_by
    entitlementId: order_by
    ownedItemId: order_by
    statusId: order_by
}

"order by aggregate values of table \"vectric.free_clipart_tokens\""
input vectric_free_clipart_tokens_aggregate_order_by {
    avg: vectric_free_clipart_tokens_avg_order_by
    count: order_by
    max: vectric_free_clipart_tokens_max_order_by
    min: vectric_free_clipart_tokens_min_order_by
    stddev: vectric_free_clipart_tokens_stddev_order_by
    stddev_pop: vectric_free_clipart_tokens_stddev_pop_order_by
    stddev_samp: vectric_free_clipart_tokens_stddev_samp_order_by
    sum: vectric_free_clipart_tokens_sum_order_by
    var_pop: vectric_free_clipart_tokens_var_pop_order_by
    var_samp: vectric_free_clipart_tokens_var_samp_order_by
    variance: vectric_free_clipart_tokens_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.free_clipart_tokens\""
input vectric_free_clipart_tokens_arr_rel_insert_input {
    data: [vectric_free_clipart_tokens_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_free_clipart_tokens_on_conflict
}

"order by avg() on columns of table \"vectric.free_clipart_tokens\""
input vectric_free_clipart_tokens_avg_order_by {
    customerId: order_by
    redeemableTokenOip: order_by
    replacementOip: order_by
    v10Product: order_by
}

"Boolean expression to filter rows from the table \"vectric.free_clipart_tokens\". All fields are combined with a logical 'AND'."
input vectric_free_clipart_tokens_bool_exp {
    _and: [vectric_free_clipart_tokens_bool_exp!]
    _not: vectric_free_clipart_tokens_bool_exp
    _or: [vectric_free_clipart_tokens_bool_exp!]
    clipartToken: String_comparison_exp
    completed: Boolean_comparison_exp
    customerId: bigint_comparison_exp
    dateAdded: timestamptz_comparison_exp
    dateSelected: timestamptz_comparison_exp
    redeemableToken: vectric_sales_salesitem_products_bool_exp
    redeemableTokenOip: bigint_comparison_exp
    replacementOip: bigint_comparison_exp
    toV10Product: vectric_products_products_bool_exp
    v10Product: bigint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.free_clipart_tokens\""
input vectric_free_clipart_tokens_inc_input {
    customerId: bigint
    redeemableTokenOip: bigint
    replacementOip: bigint
    v10Product: bigint
}

"input type for inserting data into table \"vectric.free_clipart_tokens\""
input vectric_free_clipart_tokens_insert_input {
    clipartToken: String
    completed: Boolean
    customerId: bigint
    dateAdded: timestamptz
    dateSelected: timestamptz
    redeemableToken: vectric_sales_salesitem_products_obj_rel_insert_input
    redeemableTokenOip: bigint
    replacementOip: bigint
    toV10Product: vectric_products_products_obj_rel_insert_input
    v10Product: bigint
}

"order by max() on columns of table \"vectric.free_clipart_tokens\""
input vectric_free_clipart_tokens_max_order_by {
    clipartToken: order_by
    customerId: order_by
    dateAdded: order_by
    dateSelected: order_by
    redeemableTokenOip: order_by
    replacementOip: order_by
    v10Product: order_by
}

"order by min() on columns of table \"vectric.free_clipart_tokens\""
input vectric_free_clipart_tokens_min_order_by {
    clipartToken: order_by
    customerId: order_by
    dateAdded: order_by
    dateSelected: order_by
    redeemableTokenOip: order_by
    replacementOip: order_by
    v10Product: order_by
}

"on conflict condition type for table \"vectric.free_clipart_tokens\""
input vectric_free_clipart_tokens_on_conflict {
    constraint: vectric_free_clipart_tokens_constraint!
    update_columns: [vectric_free_clipart_tokens_update_column!]! = []
    where: vectric_free_clipart_tokens_bool_exp
}

"Ordering options when selecting data from \"vectric.free_clipart_tokens\"."
input vectric_free_clipart_tokens_order_by {
    clipartToken: order_by
    completed: order_by
    customerId: order_by
    dateAdded: order_by
    dateSelected: order_by
    redeemableToken: vectric_sales_salesitem_products_order_by
    redeemableTokenOip: order_by
    replacementOip: order_by
    toV10Product: vectric_products_products_order_by
    v10Product: order_by
}

"primary key columns input for table: vectric_free_clipart_tokens"
input vectric_free_clipart_tokens_pk_columns_input {
    clipartToken: String!
}

"input type for updating data in table \"vectric.free_clipart_tokens\""
input vectric_free_clipart_tokens_set_input {
    clipartToken: String
    completed: Boolean
    customerId: bigint
    dateAdded: timestamptz
    dateSelected: timestamptz
    redeemableTokenOip: bigint
    replacementOip: bigint
    v10Product: bigint
}

"order by stddev() on columns of table \"vectric.free_clipart_tokens\""
input vectric_free_clipart_tokens_stddev_order_by {
    customerId: order_by
    redeemableTokenOip: order_by
    replacementOip: order_by
    v10Product: order_by
}

"order by stddev_pop() on columns of table \"vectric.free_clipart_tokens\""
input vectric_free_clipart_tokens_stddev_pop_order_by {
    customerId: order_by
    redeemableTokenOip: order_by
    replacementOip: order_by
    v10Product: order_by
}

"order by stddev_samp() on columns of table \"vectric.free_clipart_tokens\""
input vectric_free_clipart_tokens_stddev_samp_order_by {
    customerId: order_by
    redeemableTokenOip: order_by
    replacementOip: order_by
    v10Product: order_by
}

"order by sum() on columns of table \"vectric.free_clipart_tokens\""
input vectric_free_clipart_tokens_sum_order_by {
    customerId: order_by
    redeemableTokenOip: order_by
    replacementOip: order_by
    v10Product: order_by
}

"order by var_pop() on columns of table \"vectric.free_clipart_tokens\""
input vectric_free_clipart_tokens_var_pop_order_by {
    customerId: order_by
    redeemableTokenOip: order_by
    replacementOip: order_by
    v10Product: order_by
}

"order by var_samp() on columns of table \"vectric.free_clipart_tokens\""
input vectric_free_clipart_tokens_var_samp_order_by {
    customerId: order_by
    redeemableTokenOip: order_by
    replacementOip: order_by
    v10Product: order_by
}

"order by variance() on columns of table \"vectric.free_clipart_tokens\""
input vectric_free_clipart_tokens_variance_order_by {
    customerId: order_by
    redeemableTokenOip: order_by
    replacementOip: order_by
    v10Product: order_by
}

"Boolean expression to filter rows from the table \"vectric.freeclipart\". All fields are combined with a logical 'AND'."
input vectric_freeclipart_bool_exp {
    _and: [vectric_freeclipart_bool_exp!]
    _not: vectric_freeclipart_bool_exp
    _or: [vectric_freeclipart_bool_exp!]
    accessId: String_comparison_exp
    category: vectric_freeclipart_category_bool_exp
    categoryId: bigint_comparison_exp
    freeClipartId: bigint_comparison_exp
    location: String_comparison_exp
    name: String_comparison_exp
    objectName: String_comparison_exp
    previewImgUrl: String_comparison_exp
}

"Boolean expression to filter rows from the table \"vectric.freeclipart_category\". All fields are combined with a logical 'AND'."
input vectric_freeclipart_category_bool_exp {
    _and: [vectric_freeclipart_category_bool_exp!]
    _not: vectric_freeclipart_category_bool_exp
    _or: [vectric_freeclipart_category_bool_exp!]
    categoryId: bigint_comparison_exp
    name: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.freeclipart_category\""
input vectric_freeclipart_category_inc_input {
    categoryId: bigint
}

"input type for inserting data into table \"vectric.freeclipart_category\""
input vectric_freeclipart_category_insert_input {
    categoryId: bigint
    name: String
}

"input type for inserting object relation for remote table \"vectric.freeclipart_category\""
input vectric_freeclipart_category_obj_rel_insert_input {
    data: vectric_freeclipart_category_insert_input!
    "on conflict condition"
    on_conflict: vectric_freeclipart_category_on_conflict
}

"on conflict condition type for table \"vectric.freeclipart_category\""
input vectric_freeclipart_category_on_conflict {
    constraint: vectric_freeclipart_category_constraint!
    update_columns: [vectric_freeclipart_category_update_column!]! = []
    where: vectric_freeclipart_category_bool_exp
}

"Ordering options when selecting data from \"vectric.freeclipart_category\"."
input vectric_freeclipart_category_order_by {
    categoryId: order_by
    name: order_by
}

"primary key columns input for table: vectric_freeclipart_category"
input vectric_freeclipart_category_pk_columns_input {
    categoryId: bigint!
}

"input type for updating data in table \"vectric.freeclipart_category\""
input vectric_freeclipart_category_set_input {
    categoryId: bigint
    name: String
}

"Boolean expression to filter rows from the table \"vectric.freeclipart_download_record\". All fields are combined with a logical 'AND'."
input vectric_freeclipart_download_record_bool_exp {
    _and: [vectric_freeclipart_download_record_bool_exp!]
    _not: vectric_freeclipart_download_record_bool_exp
    _or: [vectric_freeclipart_download_record_bool_exp!]
    customerId: bigint_comparison_exp
    downloadDate: timestamptz_comparison_exp
    downloadId: bigint_comparison_exp
    freeClipartResourceId: bigint_comparison_exp
    ipAddress: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.freeclipart_download_record\""
input vectric_freeclipart_download_record_inc_input {
    customerId: bigint
    downloadId: bigint
    freeClipartResourceId: bigint
}

"input type for inserting data into table \"vectric.freeclipart_download_record\""
input vectric_freeclipart_download_record_insert_input {
    customerId: bigint
    downloadDate: timestamptz
    downloadId: bigint
    freeClipartResourceId: bigint
    ipAddress: String
}

"on conflict condition type for table \"vectric.freeclipart_download_record\""
input vectric_freeclipart_download_record_on_conflict {
    constraint: vectric_freeclipart_download_record_constraint!
    update_columns: [vectric_freeclipart_download_record_update_column!]! = []
    where: vectric_freeclipart_download_record_bool_exp
}

"Ordering options when selecting data from \"vectric.freeclipart_download_record\"."
input vectric_freeclipart_download_record_order_by {
    customerId: order_by
    downloadDate: order_by
    downloadId: order_by
    freeClipartResourceId: order_by
    ipAddress: order_by
}

"primary key columns input for table: vectric_freeclipart_download_record"
input vectric_freeclipart_download_record_pk_columns_input {
    downloadId: bigint!
}

"input type for updating data in table \"vectric.freeclipart_download_record\""
input vectric_freeclipart_download_record_set_input {
    customerId: bigint
    downloadDate: timestamptz
    downloadId: bigint
    freeClipartResourceId: bigint
    ipAddress: String
}

"input type for incrementing numeric columns in table \"vectric.freeclipart\""
input vectric_freeclipart_inc_input {
    categoryId: bigint
    freeClipartId: bigint
}

"input type for inserting data into table \"vectric.freeclipart\""
input vectric_freeclipart_insert_input {
    accessId: String
    category: vectric_freeclipart_category_obj_rel_insert_input
    categoryId: bigint
    freeClipartId: bigint
    location: String
    name: String
    objectName: String
    previewImgUrl: String
}

"input type for inserting object relation for remote table \"vectric.freeclipart\""
input vectric_freeclipart_obj_rel_insert_input {
    data: vectric_freeclipart_insert_input!
    "on conflict condition"
    on_conflict: vectric_freeclipart_on_conflict
}

"on conflict condition type for table \"vectric.freeclipart\""
input vectric_freeclipart_on_conflict {
    constraint: vectric_freeclipart_constraint!
    update_columns: [vectric_freeclipart_update_column!]! = []
    where: vectric_freeclipart_bool_exp
}

"Ordering options when selecting data from \"vectric.freeclipart\"."
input vectric_freeclipart_order_by {
    accessId: order_by
    category: vectric_freeclipart_category_order_by
    categoryId: order_by
    freeClipartId: order_by
    location: order_by
    name: order_by
    objectName: order_by
    previewImgUrl: order_by
}

"primary key columns input for table: vectric_freeclipart"
input vectric_freeclipart_pk_columns_input {
    freeClipartId: bigint!
}

"input type for updating data in table \"vectric.freeclipart\""
input vectric_freeclipart_set_input {
    accessId: String
    categoryId: bigint
    freeClipartId: bigint
    location: String
    name: String
    objectName: String
    previewImgUrl: String
}

"Boolean expression to filter rows from the table \"vectric.group_info\". All fields are combined with a logical 'AND'."
input vectric_group_info_bool_exp {
    _and: [vectric_group_info_bool_exp!]
    _not: vectric_group_info_bool_exp
    _or: [vectric_group_info_bool_exp!]
    customerid: bigint_comparison_exp
    group_id: Int_comparison_exp
    group_name: String_comparison_exp
    role: String_comparison_exp
}

"Ordering options when selecting data from \"vectric.group_info\"."
input vectric_group_info_order_by {
    customerid: order_by
    group_id: order_by
    group_name: order_by
    role: order_by
}

"Boolean expression to filter rows from the table \"vectric.group_roles\". All fields are combined with a logical 'AND'."
input vectric_group_roles_bool_exp {
    _and: [vectric_group_roles_bool_exp!]
    _not: vectric_group_roles_bool_exp
    _or: [vectric_group_roles_bool_exp!]
    id: Int_comparison_exp
    role: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.group_roles\""
input vectric_group_roles_inc_input {
    id: Int
}

"input type for inserting data into table \"vectric.group_roles\""
input vectric_group_roles_insert_input {
    id: Int
    role: String
}

"input type for inserting object relation for remote table \"vectric.group_roles\""
input vectric_group_roles_obj_rel_insert_input {
    data: vectric_group_roles_insert_input!
    "on conflict condition"
    on_conflict: vectric_group_roles_on_conflict
}

"on conflict condition type for table \"vectric.group_roles\""
input vectric_group_roles_on_conflict {
    constraint: vectric_group_roles_constraint!
    update_columns: [vectric_group_roles_update_column!]! = []
    where: vectric_group_roles_bool_exp
}

"Ordering options when selecting data from \"vectric.group_roles\"."
input vectric_group_roles_order_by {
    id: order_by
    role: order_by
}

"primary key columns input for table: vectric_group_roles"
input vectric_group_roles_pk_columns_input {
    id: Int!
}

"input type for updating data in table \"vectric.group_roles\""
input vectric_group_roles_set_input {
    id: Int
    role: String
}

"order by aggregate values of table \"vectric.group_user_role\""
input vectric_group_user_role_aggregate_order_by {
    avg: vectric_group_user_role_avg_order_by
    count: order_by
    max: vectric_group_user_role_max_order_by
    min: vectric_group_user_role_min_order_by
    stddev: vectric_group_user_role_stddev_order_by
    stddev_pop: vectric_group_user_role_stddev_pop_order_by
    stddev_samp: vectric_group_user_role_stddev_samp_order_by
    sum: vectric_group_user_role_sum_order_by
    var_pop: vectric_group_user_role_var_pop_order_by
    var_samp: vectric_group_user_role_var_samp_order_by
    variance: vectric_group_user_role_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.group_user_role\""
input vectric_group_user_role_arr_rel_insert_input {
    data: [vectric_group_user_role_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_group_user_role_on_conflict
}

"order by avg() on columns of table \"vectric.group_user_role\""
input vectric_group_user_role_avg_order_by {
    customer_id: order_by
    group_id: order_by
    role_id: order_by
}

"Boolean expression to filter rows from the table \"vectric.group_user_role\". All fields are combined with a logical 'AND'."
input vectric_group_user_role_bool_exp {
    _and: [vectric_group_user_role_bool_exp!]
    _not: vectric_group_user_role_bool_exp
    _or: [vectric_group_user_role_bool_exp!]
    customer: vectric_sales_customers_bool_exp
    customer_id: bigint_comparison_exp
    group: vectric_groups_bool_exp
    group_id: Int_comparison_exp
    role: vectric_group_roles_bool_exp
    role_id: Int_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.group_user_role\""
input vectric_group_user_role_inc_input {
    customer_id: bigint
    group_id: Int
    role_id: Int
}

"input type for inserting data into table \"vectric.group_user_role\""
input vectric_group_user_role_insert_input {
    customer: vectric_sales_customers_obj_rel_insert_input
    customer_id: bigint
    group: vectric_groups_obj_rel_insert_input
    group_id: Int
    role: vectric_group_roles_obj_rel_insert_input
    role_id: Int
}

"order by max() on columns of table \"vectric.group_user_role\""
input vectric_group_user_role_max_order_by {
    customer_id: order_by
    group_id: order_by
    role_id: order_by
}

"order by min() on columns of table \"vectric.group_user_role\""
input vectric_group_user_role_min_order_by {
    customer_id: order_by
    group_id: order_by
    role_id: order_by
}

"on conflict condition type for table \"vectric.group_user_role\""
input vectric_group_user_role_on_conflict {
    constraint: vectric_group_user_role_constraint!
    update_columns: [vectric_group_user_role_update_column!]! = []
    where: vectric_group_user_role_bool_exp
}

"Ordering options when selecting data from \"vectric.group_user_role\"."
input vectric_group_user_role_order_by {
    customer: vectric_sales_customers_order_by
    customer_id: order_by
    group: vectric_groups_order_by
    group_id: order_by
    role: vectric_group_roles_order_by
    role_id: order_by
}

"primary key columns input for table: vectric_group_user_role"
input vectric_group_user_role_pk_columns_input {
    customer_id: bigint!
    group_id: Int!
}

"input type for updating data in table \"vectric.group_user_role\""
input vectric_group_user_role_set_input {
    customer_id: bigint
    group_id: Int
    role_id: Int
}

"order by stddev() on columns of table \"vectric.group_user_role\""
input vectric_group_user_role_stddev_order_by {
    customer_id: order_by
    group_id: order_by
    role_id: order_by
}

"order by stddev_pop() on columns of table \"vectric.group_user_role\""
input vectric_group_user_role_stddev_pop_order_by {
    customer_id: order_by
    group_id: order_by
    role_id: order_by
}

"order by stddev_samp() on columns of table \"vectric.group_user_role\""
input vectric_group_user_role_stddev_samp_order_by {
    customer_id: order_by
    group_id: order_by
    role_id: order_by
}

"order by sum() on columns of table \"vectric.group_user_role\""
input vectric_group_user_role_sum_order_by {
    customer_id: order_by
    group_id: order_by
    role_id: order_by
}

"order by var_pop() on columns of table \"vectric.group_user_role\""
input vectric_group_user_role_var_pop_order_by {
    customer_id: order_by
    group_id: order_by
    role_id: order_by
}

"order by var_samp() on columns of table \"vectric.group_user_role\""
input vectric_group_user_role_var_samp_order_by {
    customer_id: order_by
    group_id: order_by
    role_id: order_by
}

"order by variance() on columns of table \"vectric.group_user_role\""
input vectric_group_user_role_variance_order_by {
    customer_id: order_by
    group_id: order_by
    role_id: order_by
}

"Boolean expression to filter rows from the table \"vectric.groups\". All fields are combined with a logical 'AND'."
input vectric_groups_bool_exp {
    _and: [vectric_groups_bool_exp!]
    _not: vectric_groups_bool_exp
    _or: [vectric_groups_bool_exp!]
    created_at: timestamp_comparison_exp
    group_name: String_comparison_exp
    id: Int_comparison_exp
    members: vectric_group_user_role_bool_exp
}

"input type for incrementing numeric columns in table \"vectric.groups\""
input vectric_groups_inc_input {
    id: Int
}

"input type for inserting data into table \"vectric.groups\""
input vectric_groups_insert_input {
    created_at: timestamp
    group_name: String
    id: Int
    members: vectric_group_user_role_arr_rel_insert_input
}

"input type for inserting object relation for remote table \"vectric.groups\""
input vectric_groups_obj_rel_insert_input {
    data: vectric_groups_insert_input!
    "on conflict condition"
    on_conflict: vectric_groups_on_conflict
}

"on conflict condition type for table \"vectric.groups\""
input vectric_groups_on_conflict {
    constraint: vectric_groups_constraint!
    update_columns: [vectric_groups_update_column!]! = []
    where: vectric_groups_bool_exp
}

"Ordering options when selecting data from \"vectric.groups\"."
input vectric_groups_order_by {
    created_at: order_by
    group_name: order_by
    id: order_by
    members_aggregate: vectric_group_user_role_aggregate_order_by
}

"primary key columns input for table: vectric_groups"
input vectric_groups_pk_columns_input {
    id: Int!
}

"input type for updating data in table \"vectric.groups\""
input vectric_groups_set_input {
    created_at: timestamp
    group_name: String
    id: Int
}

"Boolean expression to filter rows from the table \"vectric.language_codes\". All fields are combined with a logical 'AND'."
input vectric_language_codes_bool_exp {
    _and: [vectric_language_codes_bool_exp!]
    _not: vectric_language_codes_bool_exp
    _or: [vectric_language_codes_bool_exp!]
    name: String_comparison_exp
    threeLetterCode: bpchar_comparison_exp
    twoLetterCode: String_comparison_exp
}

"input type for inserting data into table \"vectric.language_codes\""
input vectric_language_codes_insert_input {
    name: String
    "ISO 639-2 Code"
    threeLetterCode: bpchar
    "ISO 639-1 Code"
    twoLetterCode: String
}

"input type for inserting object relation for remote table \"vectric.language_codes\""
input vectric_language_codes_obj_rel_insert_input {
    data: vectric_language_codes_insert_input!
    "on conflict condition"
    on_conflict: vectric_language_codes_on_conflict
}

"on conflict condition type for table \"vectric.language_codes\""
input vectric_language_codes_on_conflict {
    constraint: vectric_language_codes_constraint!
    update_columns: [vectric_language_codes_update_column!]! = []
    where: vectric_language_codes_bool_exp
}

"Ordering options when selecting data from \"vectric.language_codes\"."
input vectric_language_codes_order_by {
    name: order_by
    threeLetterCode: order_by
    twoLetterCode: order_by
}

"primary key columns input for table: vectric_language_codes"
input vectric_language_codes_pk_columns_input {
    "ISO 639-2 Code"
    threeLetterCode: bpchar!
}

"input type for updating data in table \"vectric.language_codes\""
input vectric_language_codes_set_input {
    name: String
    "ISO 639-2 Code"
    threeLetterCode: bpchar
    "ISO 639-1 Code"
    twoLetterCode: String
}

"order by aggregate values of table \"vectric.licence_log\""
input vectric_licence_log_aggregate_order_by {
    avg: vectric_licence_log_avg_order_by
    count: order_by
    max: vectric_licence_log_max_order_by
    min: vectric_licence_log_min_order_by
    stddev: vectric_licence_log_stddev_order_by
    stddev_pop: vectric_licence_log_stddev_pop_order_by
    stddev_samp: vectric_licence_log_stddev_samp_order_by
    sum: vectric_licence_log_sum_order_by
    var_pop: vectric_licence_log_var_pop_order_by
    var_samp: vectric_licence_log_var_samp_order_by
    variance: vectric_licence_log_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.licence_log\""
input vectric_licence_log_arr_rel_insert_input {
    data: [vectric_licence_log_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_licence_log_on_conflict
}

"order by avg() on columns of table \"vectric.licence_log\""
input vectric_licence_log_avg_order_by {
    licenceId: order_by
    oemLicenceId: order_by
}

"Boolean expression to filter rows from the table \"vectric.licence_log\". All fields are combined with a logical 'AND'."
input vectric_licence_log_bool_exp {
    _and: [vectric_licence_log_bool_exp!]
    _not: vectric_licence_log_bool_exp
    _or: [vectric_licence_log_bool_exp!]
    batchId: String_comparison_exp
    createdBy: String_comparison_exp
    dateCreated: timestamptz_comparison_exp
    licenceCode: String_comparison_exp
    licenceId: bigint_comparison_exp
    oemLicenceId: bigint_comparison_exp
    productName: String_comparison_exp
    registeredUsername: String_comparison_exp
    shortUrlHash: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.licence_log\""
input vectric_licence_log_inc_input {
    licenceId: bigint
    oemLicenceId: bigint
}

"input type for inserting data into table \"vectric.licence_log\""
input vectric_licence_log_insert_input {
    batchId: String
    createdBy: String
    dateCreated: timestamptz
    licenceCode: String
    licenceId: bigint
    oemLicenceId: bigint
    productName: String
    registeredUsername: String
    shortUrlHash: String
}

"order by max() on columns of table \"vectric.licence_log\""
input vectric_licence_log_max_order_by {
    batchId: order_by
    createdBy: order_by
    dateCreated: order_by
    licenceCode: order_by
    licenceId: order_by
    oemLicenceId: order_by
    productName: order_by
    registeredUsername: order_by
    shortUrlHash: order_by
}

"order by min() on columns of table \"vectric.licence_log\""
input vectric_licence_log_min_order_by {
    batchId: order_by
    createdBy: order_by
    dateCreated: order_by
    licenceCode: order_by
    licenceId: order_by
    oemLicenceId: order_by
    productName: order_by
    registeredUsername: order_by
    shortUrlHash: order_by
}

"on conflict condition type for table \"vectric.licence_log\""
input vectric_licence_log_on_conflict {
    constraint: vectric_licence_log_constraint!
    update_columns: [vectric_licence_log_update_column!]! = []
    where: vectric_licence_log_bool_exp
}

"Ordering options when selecting data from \"vectric.licence_log\"."
input vectric_licence_log_order_by {
    batchId: order_by
    createdBy: order_by
    dateCreated: order_by
    licenceCode: order_by
    licenceId: order_by
    oemLicenceId: order_by
    productName: order_by
    registeredUsername: order_by
    shortUrlHash: order_by
}

"primary key columns input for table: vectric_licence_log"
input vectric_licence_log_pk_columns_input {
    licenceId: bigint!
}

"input type for updating data in table \"vectric.licence_log\""
input vectric_licence_log_set_input {
    batchId: String
    createdBy: String
    dateCreated: timestamptz
    licenceCode: String
    licenceId: bigint
    oemLicenceId: bigint
    productName: String
    registeredUsername: String
    shortUrlHash: String
}

"order by stddev() on columns of table \"vectric.licence_log\""
input vectric_licence_log_stddev_order_by {
    licenceId: order_by
    oemLicenceId: order_by
}

"order by stddev_pop() on columns of table \"vectric.licence_log\""
input vectric_licence_log_stddev_pop_order_by {
    licenceId: order_by
    oemLicenceId: order_by
}

"order by stddev_samp() on columns of table \"vectric.licence_log\""
input vectric_licence_log_stddev_samp_order_by {
    licenceId: order_by
    oemLicenceId: order_by
}

"order by sum() on columns of table \"vectric.licence_log\""
input vectric_licence_log_sum_order_by {
    licenceId: order_by
    oemLicenceId: order_by
}

"order by var_pop() on columns of table \"vectric.licence_log\""
input vectric_licence_log_var_pop_order_by {
    licenceId: order_by
    oemLicenceId: order_by
}

"order by var_samp() on columns of table \"vectric.licence_log\""
input vectric_licence_log_var_samp_order_by {
    licenceId: order_by
    oemLicenceId: order_by
}

"order by variance() on columns of table \"vectric.licence_log\""
input vectric_licence_log_variance_order_by {
    licenceId: order_by
    oemLicenceId: order_by
}

"Boolean expression to filter rows from the table \"vectric.linkshortener_links\". All fields are combined with a logical 'AND'."
input vectric_linkshortener_links_bool_exp {
    _and: [vectric_linkshortener_links_bool_exp!]
    _not: vectric_linkshortener_links_bool_exp
    _or: [vectric_linkshortener_links_bool_exp!]
    expiryDate: timestamptz_comparison_exp
    limitDownloads: Boolean_comparison_exp
    longUrl: String_comparison_exp
    remainingDownloads: smallint_comparison_exp
    shortUrlHash: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.linkshortener_links\""
input vectric_linkshortener_links_inc_input {
    remainingDownloads: smallint
}

"input type for inserting data into table \"vectric.linkshortener_links\""
input vectric_linkshortener_links_insert_input {
    expiryDate: timestamptz
    limitDownloads: Boolean
    longUrl: String
    remainingDownloads: smallint
    shortUrlHash: String
}

"on conflict condition type for table \"vectric.linkshortener_links\""
input vectric_linkshortener_links_on_conflict {
    constraint: vectric_linkshortener_links_constraint!
    update_columns: [vectric_linkshortener_links_update_column!]! = []
    where: vectric_linkshortener_links_bool_exp
}

"Ordering options when selecting data from \"vectric.linkshortener_links\"."
input vectric_linkshortener_links_order_by {
    expiryDate: order_by
    limitDownloads: order_by
    longUrl: order_by
    remainingDownloads: order_by
    shortUrlHash: order_by
}

"primary key columns input for table: vectric_linkshortener_links"
input vectric_linkshortener_links_pk_columns_input {
    shortUrlHash: String!
}

"input type for updating data in table \"vectric.linkshortener_links\""
input vectric_linkshortener_links_set_input {
    expiryDate: timestamptz
    limitDownloads: Boolean
    longUrl: String
    remainingDownloads: smallint
    shortUrlHash: String
}

"Boolean expression to filter rows from the table \"vectric.makerspace_requests\". All fields are combined with a logical 'AND'."
input vectric_makerspace_requests_bool_exp {
    _and: [vectric_makerspace_requests_bool_exp!]
    _not: vectric_makerspace_requests_bool_exp
    _or: [vectric_makerspace_requests_bool_exp!]
    ipAddress: String_comparison_exp
    licenceCode: String_comparison_exp
    licenceGenerated: String_comparison_exp
    makerspaceDiskId: String_comparison_exp
    makerspaceId: String_comparison_exp
    requestDate: timestamptz_comparison_exp
    requestId: bigint_comparison_exp
    salesItemProductId: bigint_comparison_exp
    trialDiskId: String_comparison_exp
    trialLayerUuid: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.makerspace_requests\""
input vectric_makerspace_requests_inc_input {
    requestId: bigint
    salesItemProductId: bigint
}

"input type for inserting data into table \"vectric.makerspace_requests\""
input vectric_makerspace_requests_insert_input {
    ipAddress: String
    licenceCode: String
    licenceGenerated: String
    makerspaceDiskId: String
    makerspaceId: String
    requestDate: timestamptz
    requestId: bigint
    salesItemProductId: bigint
    trialDiskId: String
    trialLayerUuid: String
}

"on conflict condition type for table \"vectric.makerspace_requests\""
input vectric_makerspace_requests_on_conflict {
    constraint: vectric_makerspace_requests_constraint!
    update_columns: [vectric_makerspace_requests_update_column!]! = []
    where: vectric_makerspace_requests_bool_exp
}

"Ordering options when selecting data from \"vectric.makerspace_requests\"."
input vectric_makerspace_requests_order_by {
    ipAddress: order_by
    licenceCode: order_by
    licenceGenerated: order_by
    makerspaceDiskId: order_by
    makerspaceId: order_by
    requestDate: order_by
    requestId: order_by
    salesItemProductId: order_by
    trialDiskId: order_by
    trialLayerUuid: order_by
}

"primary key columns input for table: vectric_makerspace_requests"
input vectric_makerspace_requests_pk_columns_input {
    requestId: bigint!
}

"input type for updating data in table \"vectric.makerspace_requests\""
input vectric_makerspace_requests_set_input {
    ipAddress: String
    licenceCode: String
    licenceGenerated: String
    makerspaceDiskId: String
    makerspaceId: String
    requestDate: timestamptz
    requestId: bigint
    salesItemProductId: bigint
    trialDiskId: String
    trialLayerUuid: String
}

"Boolean expression to filter rows from the table \"vectric.membership_invitation_status\". All fields are combined with a logical 'AND'."
input vectric_membership_invitation_status_bool_exp {
    _and: [vectric_membership_invitation_status_bool_exp!]
    _not: vectric_membership_invitation_status_bool_exp
    _or: [vectric_membership_invitation_status_bool_exp!]
    status: String_comparison_exp
}

"Boolean expression to compare columns of type \"vectric_membership_invitation_status_enum\". All fields are combined with logical 'AND'."
input vectric_membership_invitation_status_enum_comparison_exp {
    _eq: vectric_membership_invitation_status_enum
    _in: [vectric_membership_invitation_status_enum!]
    _is_null: Boolean
    _neq: vectric_membership_invitation_status_enum
    _nin: [vectric_membership_invitation_status_enum!]
}

"input type for inserting data into table \"vectric.membership_invitation_status\""
input vectric_membership_invitation_status_insert_input {
    status: String
}

"input type for inserting object relation for remote table \"vectric.membership_invitation_status\""
input vectric_membership_invitation_status_obj_rel_insert_input {
    data: vectric_membership_invitation_status_insert_input!
    "on conflict condition"
    on_conflict: vectric_membership_invitation_status_on_conflict
}

"on conflict condition type for table \"vectric.membership_invitation_status\""
input vectric_membership_invitation_status_on_conflict {
    constraint: vectric_membership_invitation_status_constraint!
    update_columns: [vectric_membership_invitation_status_update_column!]! = []
    where: vectric_membership_invitation_status_bool_exp
}

"Ordering options when selecting data from \"vectric.membership_invitation_status\"."
input vectric_membership_invitation_status_order_by {
    status: order_by
}

"primary key columns input for table: vectric_membership_invitation_status"
input vectric_membership_invitation_status_pk_columns_input {
    status: String!
}

"input type for updating data in table \"vectric.membership_invitation_status\""
input vectric_membership_invitation_status_set_input {
    status: String
}

"order by aggregate values of table \"vectric.membership_invitations\""
input vectric_membership_invitations_aggregate_order_by {
    avg: vectric_membership_invitations_avg_order_by
    count: order_by
    max: vectric_membership_invitations_max_order_by
    min: vectric_membership_invitations_min_order_by
    stddev: vectric_membership_invitations_stddev_order_by
    stddev_pop: vectric_membership_invitations_stddev_pop_order_by
    stddev_samp: vectric_membership_invitations_stddev_samp_order_by
    sum: vectric_membership_invitations_sum_order_by
    var_pop: vectric_membership_invitations_var_pop_order_by
    var_samp: vectric_membership_invitations_var_samp_order_by
    variance: vectric_membership_invitations_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.membership_invitations\""
input vectric_membership_invitations_arr_rel_insert_input {
    data: [vectric_membership_invitations_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_membership_invitations_on_conflict
}

"order by avg() on columns of table \"vectric.membership_invitations\""
input vectric_membership_invitations_avg_order_by {
    invitationId: order_by
    membershipId: order_by
    organizationId: order_by
}

"Boolean expression to filter rows from the table \"vectric.membership_invitations\". All fields are combined with a logical 'AND'."
input vectric_membership_invitations_bool_exp {
    _and: [vectric_membership_invitations_bool_exp!]
    _not: vectric_membership_invitations_bool_exp
    _or: [vectric_membership_invitations_bool_exp!]
    dateInvited: timestamp_comparison_exp
    dateProcessed: timestamp_comparison_exp
    email: String_comparison_exp
    invitationId: Int_comparison_exp
    invitationStatus: vectric_membership_invitation_status_enum_comparison_exp
    invitedBy: String_comparison_exp
    membership: vectric_memberships_bool_exp
    membershipId: Int_comparison_exp
    organization: vectric_organizations_bool_exp
    organizationId: Int_comparison_exp
    status: vectric_membership_invitation_status_bool_exp
    token: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.membership_invitations\""
input vectric_membership_invitations_inc_input {
    invitationId: Int
    membershipId: Int
    organizationId: Int
}

"input type for inserting data into table \"vectric.membership_invitations\""
input vectric_membership_invitations_insert_input {
    dateInvited: timestamp
    dateProcessed: timestamp
    email: String
    invitationId: Int
    invitationStatus: vectric_membership_invitation_status_enum
    invitedBy: String
    membership: vectric_memberships_obj_rel_insert_input
    membershipId: Int
    organization: vectric_organizations_obj_rel_insert_input
    organizationId: Int
    status: vectric_membership_invitation_status_obj_rel_insert_input
    token: String
}

"order by max() on columns of table \"vectric.membership_invitations\""
input vectric_membership_invitations_max_order_by {
    dateInvited: order_by
    dateProcessed: order_by
    email: order_by
    invitationId: order_by
    invitedBy: order_by
    membershipId: order_by
    organizationId: order_by
    token: order_by
}

"order by min() on columns of table \"vectric.membership_invitations\""
input vectric_membership_invitations_min_order_by {
    dateInvited: order_by
    dateProcessed: order_by
    email: order_by
    invitationId: order_by
    invitedBy: order_by
    membershipId: order_by
    organizationId: order_by
    token: order_by
}

"on conflict condition type for table \"vectric.membership_invitations\""
input vectric_membership_invitations_on_conflict {
    constraint: vectric_membership_invitations_constraint!
    update_columns: [vectric_membership_invitations_update_column!]! = []
    where: vectric_membership_invitations_bool_exp
}

"Ordering options when selecting data from \"vectric.membership_invitations\"."
input vectric_membership_invitations_order_by {
    dateInvited: order_by
    dateProcessed: order_by
    email: order_by
    invitationId: order_by
    invitationStatus: order_by
    invitedBy: order_by
    membership: vectric_memberships_order_by
    membershipId: order_by
    organization: vectric_organizations_order_by
    organizationId: order_by
    status: vectric_membership_invitation_status_order_by
    token: order_by
}

"primary key columns input for table: vectric_membership_invitations"
input vectric_membership_invitations_pk_columns_input {
    invitationId: Int!
}

"input type for updating data in table \"vectric.membership_invitations\""
input vectric_membership_invitations_set_input {
    dateInvited: timestamp
    dateProcessed: timestamp
    email: String
    invitationId: Int
    invitationStatus: vectric_membership_invitation_status_enum
    invitedBy: String
    membershipId: Int
    organizationId: Int
    token: String
}

"order by stddev() on columns of table \"vectric.membership_invitations\""
input vectric_membership_invitations_stddev_order_by {
    invitationId: order_by
    membershipId: order_by
    organizationId: order_by
}

"order by stddev_pop() on columns of table \"vectric.membership_invitations\""
input vectric_membership_invitations_stddev_pop_order_by {
    invitationId: order_by
    membershipId: order_by
    organizationId: order_by
}

"order by stddev_samp() on columns of table \"vectric.membership_invitations\""
input vectric_membership_invitations_stddev_samp_order_by {
    invitationId: order_by
    membershipId: order_by
    organizationId: order_by
}

"order by sum() on columns of table \"vectric.membership_invitations\""
input vectric_membership_invitations_sum_order_by {
    invitationId: order_by
    membershipId: order_by
    organizationId: order_by
}

"order by var_pop() on columns of table \"vectric.membership_invitations\""
input vectric_membership_invitations_var_pop_order_by {
    invitationId: order_by
    membershipId: order_by
    organizationId: order_by
}

"order by var_samp() on columns of table \"vectric.membership_invitations\""
input vectric_membership_invitations_var_samp_order_by {
    invitationId: order_by
    membershipId: order_by
    organizationId: order_by
}

"order by variance() on columns of table \"vectric.membership_invitations\""
input vectric_membership_invitations_variance_order_by {
    invitationId: order_by
    membershipId: order_by
    organizationId: order_by
}

"Boolean expression to filter rows from the table \"vectric.membership_roles\". All fields are combined with a logical 'AND'."
input vectric_membership_roles_bool_exp {
    _and: [vectric_membership_roles_bool_exp!]
    _not: vectric_membership_roles_bool_exp
    _or: [vectric_membership_roles_bool_exp!]
    role: String_comparison_exp
}

"Boolean expression to compare columns of type \"vectric_membership_roles_enum\". All fields are combined with logical 'AND'."
input vectric_membership_roles_enum_comparison_exp {
    _eq: vectric_membership_roles_enum
    _in: [vectric_membership_roles_enum!]
    _is_null: Boolean
    _neq: vectric_membership_roles_enum
    _nin: [vectric_membership_roles_enum!]
}

"input type for inserting data into table \"vectric.membership_roles\""
input vectric_membership_roles_insert_input {
    role: String
}

"input type for inserting object relation for remote table \"vectric.membership_roles\""
input vectric_membership_roles_obj_rel_insert_input {
    data: vectric_membership_roles_insert_input!
    "on conflict condition"
    on_conflict: vectric_membership_roles_on_conflict
}

"on conflict condition type for table \"vectric.membership_roles\""
input vectric_membership_roles_on_conflict {
    constraint: vectric_membership_roles_constraint!
    update_columns: [vectric_membership_roles_update_column!]! = []
    where: vectric_membership_roles_bool_exp
}

"Ordering options when selecting data from \"vectric.membership_roles\"."
input vectric_membership_roles_order_by {
    role: order_by
}

"primary key columns input for table: vectric_membership_roles"
input vectric_membership_roles_pk_columns_input {
    role: String!
}

"input type for updating data in table \"vectric.membership_roles\""
input vectric_membership_roles_set_input {
    role: String
}

"Boolean expression to filter rows from the table \"vectric.membership_status\". All fields are combined with a logical 'AND'."
input vectric_membership_status_bool_exp {
    _and: [vectric_membership_status_bool_exp!]
    _not: vectric_membership_status_bool_exp
    _or: [vectric_membership_status_bool_exp!]
    status: String_comparison_exp
}

"Boolean expression to compare columns of type \"vectric_membership_status_enum\". All fields are combined with logical 'AND'."
input vectric_membership_status_enum_comparison_exp {
    _eq: vectric_membership_status_enum
    _in: [vectric_membership_status_enum!]
    _is_null: Boolean
    _neq: vectric_membership_status_enum
    _nin: [vectric_membership_status_enum!]
}

"input type for inserting data into table \"vectric.membership_status\""
input vectric_membership_status_insert_input {
    status: String
}

"input type for inserting object relation for remote table \"vectric.membership_status\""
input vectric_membership_status_obj_rel_insert_input {
    data: vectric_membership_status_insert_input!
    "on conflict condition"
    on_conflict: vectric_membership_status_on_conflict
}

"on conflict condition type for table \"vectric.membership_status\""
input vectric_membership_status_on_conflict {
    constraint: vectric_membership_status_constraint!
    update_columns: [vectric_membership_status_update_column!]! = []
    where: vectric_membership_status_bool_exp
}

"Ordering options when selecting data from \"vectric.membership_status\"."
input vectric_membership_status_order_by {
    status: order_by
}

"primary key columns input for table: vectric_membership_status"
input vectric_membership_status_pk_columns_input {
    status: String!
}

"input type for updating data in table \"vectric.membership_status\""
input vectric_membership_status_set_input {
    status: String
}

"order by aggregate values of table \"vectric.memberships\""
input vectric_memberships_aggregate_order_by {
    avg: vectric_memberships_avg_order_by
    count: order_by
    max: vectric_memberships_max_order_by
    min: vectric_memberships_min_order_by
    stddev: vectric_memberships_stddev_order_by
    stddev_pop: vectric_memberships_stddev_pop_order_by
    stddev_samp: vectric_memberships_stddev_samp_order_by
    sum: vectric_memberships_sum_order_by
    var_pop: vectric_memberships_var_pop_order_by
    var_samp: vectric_memberships_var_samp_order_by
    variance: vectric_memberships_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.memberships\""
input vectric_memberships_arr_rel_insert_input {
    data: [vectric_memberships_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_memberships_on_conflict
}

"order by avg() on columns of table \"vectric.memberships\""
input vectric_memberships_avg_order_by {
    customerId: order_by
    membershipId: order_by
    organizationId: order_by
}

"Boolean expression to filter rows from the table \"vectric.memberships\". All fields are combined with a logical 'AND'."
input vectric_memberships_bool_exp {
    _and: [vectric_memberships_bool_exp!]
    _not: vectric_memberships_bool_exp
    _or: [vectric_memberships_bool_exp!]
    activeMembers: vectric_active_memberships_bool_exp
    addedBy: String_comparison_exp
    amendedBy: String_comparison_exp
    customer: vectric_sales_customers_bool_exp
    customerId: bigint_comparison_exp
    dateAdded: timestamp_comparison_exp
    dateAmended: timestamp_comparison_exp
    membershipId: Int_comparison_exp
    membershipInvitations: vectric_membership_invitations_bool_exp
    membershipRole: vectric_membership_roles_bool_exp
    membershipStatus: vectric_membership_status_bool_exp
    organization: vectric_organizations_bool_exp
    organizationId: Int_comparison_exp
    role: vectric_membership_roles_enum_comparison_exp
    status: vectric_membership_status_enum_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.memberships\""
input vectric_memberships_inc_input {
    customerId: bigint
    membershipId: Int
    organizationId: Int
}

"input type for inserting data into table \"vectric.memberships\""
input vectric_memberships_insert_input {
    activeMembers: vectric_active_memberships_arr_rel_insert_input
    addedBy: String
    amendedBy: String
    customer: vectric_sales_customers_obj_rel_insert_input
    customerId: bigint
    dateAdded: timestamp
    dateAmended: timestamp
    membershipId: Int
    membershipInvitations: vectric_membership_invitations_arr_rel_insert_input
    membershipRole: vectric_membership_roles_obj_rel_insert_input
    membershipStatus: vectric_membership_status_obj_rel_insert_input
    organization: vectric_organizations_obj_rel_insert_input
    organizationId: Int
    role: vectric_membership_roles_enum
    status: vectric_membership_status_enum
}

"order by max() on columns of table \"vectric.memberships\""
input vectric_memberships_max_order_by {
    addedBy: order_by
    amendedBy: order_by
    customerId: order_by
    dateAdded: order_by
    dateAmended: order_by
    membershipId: order_by
    organizationId: order_by
}

"order by min() on columns of table \"vectric.memberships\""
input vectric_memberships_min_order_by {
    addedBy: order_by
    amendedBy: order_by
    customerId: order_by
    dateAdded: order_by
    dateAmended: order_by
    membershipId: order_by
    organizationId: order_by
}

"input type for inserting object relation for remote table \"vectric.memberships\""
input vectric_memberships_obj_rel_insert_input {
    data: vectric_memberships_insert_input!
    "on conflict condition"
    on_conflict: vectric_memberships_on_conflict
}

"on conflict condition type for table \"vectric.memberships\""
input vectric_memberships_on_conflict {
    constraint: vectric_memberships_constraint!
    update_columns: [vectric_memberships_update_column!]! = []
    where: vectric_memberships_bool_exp
}

"Ordering options when selecting data from \"vectric.memberships\"."
input vectric_memberships_order_by {
    activeMembers_aggregate: vectric_active_memberships_aggregate_order_by
    addedBy: order_by
    amendedBy: order_by
    customer: vectric_sales_customers_order_by
    customerId: order_by
    dateAdded: order_by
    dateAmended: order_by
    membershipId: order_by
    membershipInvitations_aggregate: vectric_membership_invitations_aggregate_order_by
    membershipRole: vectric_membership_roles_order_by
    membershipStatus: vectric_membership_status_order_by
    organization: vectric_organizations_order_by
    organizationId: order_by
    role: order_by
    status: order_by
}

"primary key columns input for table: vectric_memberships"
input vectric_memberships_pk_columns_input {
    membershipId: Int!
}

"input type for updating data in table \"vectric.memberships\""
input vectric_memberships_set_input {
    addedBy: String
    amendedBy: String
    customerId: bigint
    dateAdded: timestamp
    dateAmended: timestamp
    membershipId: Int
    organizationId: Int
    role: vectric_membership_roles_enum
    status: vectric_membership_status_enum
}

"order by stddev() on columns of table \"vectric.memberships\""
input vectric_memberships_stddev_order_by {
    customerId: order_by
    membershipId: order_by
    organizationId: order_by
}

"order by stddev_pop() on columns of table \"vectric.memberships\""
input vectric_memberships_stddev_pop_order_by {
    customerId: order_by
    membershipId: order_by
    organizationId: order_by
}

"order by stddev_samp() on columns of table \"vectric.memberships\""
input vectric_memberships_stddev_samp_order_by {
    customerId: order_by
    membershipId: order_by
    organizationId: order_by
}

"order by sum() on columns of table \"vectric.memberships\""
input vectric_memberships_sum_order_by {
    customerId: order_by
    membershipId: order_by
    organizationId: order_by
}

"order by var_pop() on columns of table \"vectric.memberships\""
input vectric_memberships_var_pop_order_by {
    customerId: order_by
    membershipId: order_by
    organizationId: order_by
}

"order by var_samp() on columns of table \"vectric.memberships\""
input vectric_memberships_var_samp_order_by {
    customerId: order_by
    membershipId: order_by
    organizationId: order_by
}

"order by variance() on columns of table \"vectric.memberships\""
input vectric_memberships_variance_order_by {
    customerId: order_by
    membershipId: order_by
    organizationId: order_by
}

"Boolean expression to filter rows from the table \"vectric.oauth_client_details\". All fields are combined with a logical 'AND'."
input vectric_oauth_client_details_bool_exp {
    _and: [vectric_oauth_client_details_bool_exp!]
    _not: vectric_oauth_client_details_bool_exp
    _or: [vectric_oauth_client_details_bool_exp!]
    access_token_validity: bigint_comparison_exp
    additional_information: String_comparison_exp
    authorities: String_comparison_exp
    authorized_grant_types: String_comparison_exp
    autoapprove: String_comparison_exp
    client_id: String_comparison_exp
    client_secret: String_comparison_exp
    refresh_token_validity: bigint_comparison_exp
    resource_ids: String_comparison_exp
    scope: String_comparison_exp
    web_server_redirect_uri: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.oauth_client_details\""
input vectric_oauth_client_details_inc_input {
    access_token_validity: bigint
    refresh_token_validity: bigint
}

"input type for inserting data into table \"vectric.oauth_client_details\""
input vectric_oauth_client_details_insert_input {
    access_token_validity: bigint
    additional_information: String
    authorities: String
    authorized_grant_types: String
    autoapprove: String
    client_id: String
    client_secret: String
    refresh_token_validity: bigint
    resource_ids: String
    scope: String
    web_server_redirect_uri: String
}

"on conflict condition type for table \"vectric.oauth_client_details\""
input vectric_oauth_client_details_on_conflict {
    constraint: vectric_oauth_client_details_constraint!
    update_columns: [vectric_oauth_client_details_update_column!]! = []
    where: vectric_oauth_client_details_bool_exp
}

"Ordering options when selecting data from \"vectric.oauth_client_details\"."
input vectric_oauth_client_details_order_by {
    access_token_validity: order_by
    additional_information: order_by
    authorities: order_by
    authorized_grant_types: order_by
    autoapprove: order_by
    client_id: order_by
    client_secret: order_by
    refresh_token_validity: order_by
    resource_ids: order_by
    scope: order_by
    web_server_redirect_uri: order_by
}

"primary key columns input for table: vectric_oauth_client_details"
input vectric_oauth_client_details_pk_columns_input {
    client_id: String!
}

"input type for updating data in table \"vectric.oauth_client_details\""
input vectric_oauth_client_details_set_input {
    access_token_validity: bigint
    additional_information: String
    authorities: String
    authorized_grant_types: String
    autoapprove: String
    client_id: String
    client_secret: String
    refresh_token_validity: bigint
    resource_ids: String
    scope: String
    web_server_redirect_uri: String
}

"Boolean expression to filter rows from the table \"vectric.oem_allocation_emails\". All fields are combined with a logical 'AND'."
input vectric_oem_allocation_emails_bool_exp {
    _and: [vectric_oem_allocation_emails_bool_exp!]
    _not: vectric_oem_allocation_emails_bool_exp
    _or: [vectric_oem_allocation_emails_bool_exp!]
    bundle_id: String_comparison_exp
    date: timestamp_comparison_exp
    email_to: String_comparison_exp
    oem_customer: vectric_sales_customers_bool_exp
    oem_customer_id: bigint_comparison_exp
    oem_partner: vectric_oem_partners_bool_exp
    partner_id: bigint_comparison_exp
    sales_oem_bundle: vectric_sales_oem_bundles_bool_exp
}

"input type for incrementing numeric columns in table \"vectric.oem_allocation_emails\""
input vectric_oem_allocation_emails_inc_input {
    oem_customer_id: bigint
    partner_id: bigint
}

"input type for inserting data into table \"vectric.oem_allocation_emails\""
input vectric_oem_allocation_emails_insert_input {
    bundle_id: String
    date: timestamp
    email_to: String
    oem_customer: vectric_sales_customers_obj_rel_insert_input
    oem_customer_id: bigint
    oem_partner: vectric_oem_partners_obj_rel_insert_input
    partner_id: bigint
    sales_oem_bundle: vectric_sales_oem_bundles_obj_rel_insert_input
}

"Ordering options when selecting data from \"vectric.oem_allocation_emails\"."
input vectric_oem_allocation_emails_order_by {
    bundle_id: order_by
    date: order_by
    email_to: order_by
    oem_customer: vectric_sales_customers_order_by
    oem_customer_id: order_by
    oem_partner: vectric_oem_partners_order_by
    partner_id: order_by
    sales_oem_bundle: vectric_sales_oem_bundles_order_by
}

"input type for updating data in table \"vectric.oem_allocation_emails\""
input vectric_oem_allocation_emails_set_input {
    bundle_id: String
    date: timestamp
    email_to: String
    oem_customer_id: bigint
    partner_id: bigint
}

"order by aggregate values of table \"vectric.oem_detailed_products\""
input vectric_oem_detailed_products_aggregate_order_by {
    avg: vectric_oem_detailed_products_avg_order_by
    count: order_by
    max: vectric_oem_detailed_products_max_order_by
    min: vectric_oem_detailed_products_min_order_by
    stddev: vectric_oem_detailed_products_stddev_order_by
    stddev_pop: vectric_oem_detailed_products_stddev_pop_order_by
    stddev_samp: vectric_oem_detailed_products_stddev_samp_order_by
    sum: vectric_oem_detailed_products_sum_order_by
    var_pop: vectric_oem_detailed_products_var_pop_order_by
    var_samp: vectric_oem_detailed_products_var_samp_order_by
    variance: vectric_oem_detailed_products_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.oem_detailed_products\""
input vectric_oem_detailed_products_arr_rel_insert_input {
    data: [vectric_oem_detailed_products_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_oem_detailed_products_on_conflict
}

"order by avg() on columns of table \"vectric.oem_detailed_products\""
input vectric_oem_detailed_products_avg_order_by {
    id: order_by
    oemProductId: order_by
    productId: order_by
}

"Boolean expression to filter rows from the table \"vectric.oem_detailed_products\". All fields are combined with a logical 'AND'."
input vectric_oem_detailed_products_bool_exp {
    _and: [vectric_oem_detailed_products_bool_exp!]
    _not: vectric_oem_detailed_products_bool_exp
    _or: [vectric_oem_detailed_products_bool_exp!]
    id: bigint_comparison_exp
    oemProductId: bigint_comparison_exp
    product: vectric_products_products_bool_exp
    productId: bigint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.oem_detailed_products\""
input vectric_oem_detailed_products_inc_input {
    id: bigint
    oemProductId: bigint
    productId: bigint
}

"input type for inserting data into table \"vectric.oem_detailed_products\""
input vectric_oem_detailed_products_insert_input {
    id: bigint
    oemProductId: bigint
    product: vectric_products_products_obj_rel_insert_input
    productId: bigint
}

"order by max() on columns of table \"vectric.oem_detailed_products\""
input vectric_oem_detailed_products_max_order_by {
    id: order_by
    oemProductId: order_by
    productId: order_by
}

"order by min() on columns of table \"vectric.oem_detailed_products\""
input vectric_oem_detailed_products_min_order_by {
    id: order_by
    oemProductId: order_by
    productId: order_by
}

"on conflict condition type for table \"vectric.oem_detailed_products\""
input vectric_oem_detailed_products_on_conflict {
    constraint: vectric_oem_detailed_products_constraint!
    update_columns: [vectric_oem_detailed_products_update_column!]! = []
    where: vectric_oem_detailed_products_bool_exp
}

"Ordering options when selecting data from \"vectric.oem_detailed_products\"."
input vectric_oem_detailed_products_order_by {
    id: order_by
    oemProductId: order_by
    product: vectric_products_products_order_by
    productId: order_by
}

"primary key columns input for table: vectric_oem_detailed_products"
input vectric_oem_detailed_products_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"vectric.oem_detailed_products\""
input vectric_oem_detailed_products_set_input {
    id: bigint
    oemProductId: bigint
    productId: bigint
}

"order by stddev() on columns of table \"vectric.oem_detailed_products\""
input vectric_oem_detailed_products_stddev_order_by {
    id: order_by
    oemProductId: order_by
    productId: order_by
}

"order by stddev_pop() on columns of table \"vectric.oem_detailed_products\""
input vectric_oem_detailed_products_stddev_pop_order_by {
    id: order_by
    oemProductId: order_by
    productId: order_by
}

"order by stddev_samp() on columns of table \"vectric.oem_detailed_products\""
input vectric_oem_detailed_products_stddev_samp_order_by {
    id: order_by
    oemProductId: order_by
    productId: order_by
}

"order by sum() on columns of table \"vectric.oem_detailed_products\""
input vectric_oem_detailed_products_sum_order_by {
    id: order_by
    oemProductId: order_by
    productId: order_by
}

"order by var_pop() on columns of table \"vectric.oem_detailed_products\""
input vectric_oem_detailed_products_var_pop_order_by {
    id: order_by
    oemProductId: order_by
    productId: order_by
}

"order by var_samp() on columns of table \"vectric.oem_detailed_products\""
input vectric_oem_detailed_products_var_samp_order_by {
    id: order_by
    oemProductId: order_by
    productId: order_by
}

"order by variance() on columns of table \"vectric.oem_detailed_products\""
input vectric_oem_detailed_products_variance_order_by {
    id: order_by
    oemProductId: order_by
    productId: order_by
}

"Boolean expression to filter rows from the table \"vectric.oem_eval_request\". All fields are combined with a logical 'AND'."
input vectric_oem_eval_request_bool_exp {
    _and: [vectric_oem_eval_request_bool_exp!]
    _not: vectric_oem_eval_request_bool_exp
    _or: [vectric_oem_eval_request_bool_exp!]
    customer: vectric_sales_customers_bool_exp
    customerId: bigint_comparison_exp
    dateProcessed: timestamptz_comparison_exp
    dateRequested: timestamptz_comparison_exp
    expired: Boolean_comparison_exp
    granted: Boolean_comparison_exp
    partner: vectric_oem_partners_bool_exp
    partnerId: bigint_comparison_exp
    processed: Boolean_comparison_exp
    processedBy: String_comparison_exp
    replacedBy: bigint_comparison_exp
    replacementRequest: vectric_oem_eval_request_bool_exp
    requestId: bigint_comparison_exp
    requestedBy: bigint_comparison_exp
    requester: vectric_sales_customers_bool_exp
    vloggerId: Int_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.oem_eval_request\""
input vectric_oem_eval_request_inc_input {
    customerId: bigint
    partnerId: bigint
    replacedBy: bigint
    requestId: bigint
    requestedBy: bigint
    vloggerId: Int
}

"input type for inserting data into table \"vectric.oem_eval_request\""
input vectric_oem_eval_request_insert_input {
    customer: vectric_sales_customers_obj_rel_insert_input
    customerId: bigint
    dateProcessed: timestamptz
    dateRequested: timestamptz
    expired: Boolean
    granted: Boolean
    partner: vectric_oem_partners_obj_rel_insert_input
    partnerId: bigint
    processed: Boolean
    processedBy: String
    replacedBy: bigint
    replacementRequest: vectric_oem_eval_request_obj_rel_insert_input
    requestId: bigint
    requestedBy: bigint
    requester: vectric_sales_customers_obj_rel_insert_input
    vloggerId: Int
}

"input type for inserting object relation for remote table \"vectric.oem_eval_request\""
input vectric_oem_eval_request_obj_rel_insert_input {
    data: vectric_oem_eval_request_insert_input!
    "on conflict condition"
    on_conflict: vectric_oem_eval_request_on_conflict
}

"on conflict condition type for table \"vectric.oem_eval_request\""
input vectric_oem_eval_request_on_conflict {
    constraint: vectric_oem_eval_request_constraint!
    update_columns: [vectric_oem_eval_request_update_column!]! = []
    where: vectric_oem_eval_request_bool_exp
}

"Ordering options when selecting data from \"vectric.oem_eval_request\"."
input vectric_oem_eval_request_order_by {
    customer: vectric_sales_customers_order_by
    customerId: order_by
    dateProcessed: order_by
    dateRequested: order_by
    expired: order_by
    granted: order_by
    partner: vectric_oem_partners_order_by
    partnerId: order_by
    processed: order_by
    processedBy: order_by
    replacedBy: order_by
    replacementRequest: vectric_oem_eval_request_order_by
    requestId: order_by
    requestedBy: order_by
    requester: vectric_sales_customers_order_by
    vloggerId: order_by
}

"primary key columns input for table: vectric_oem_eval_request"
input vectric_oem_eval_request_pk_columns_input {
    requestId: bigint!
}

"input type for updating data in table \"vectric.oem_eval_request\""
input vectric_oem_eval_request_set_input {
    customerId: bigint
    dateProcessed: timestamptz
    dateRequested: timestamptz
    expired: Boolean
    granted: Boolean
    partnerId: bigint
    processed: Boolean
    processedBy: String
    replacedBy: bigint
    requestId: bigint
    requestedBy: bigint
    vloggerId: Int
}

"order by aggregate values of table \"vectric.oem_fastspring_item\""
input vectric_oem_fastspring_item_aggregate_order_by {
    avg: vectric_oem_fastspring_item_avg_order_by
    count: order_by
    max: vectric_oem_fastspring_item_max_order_by
    min: vectric_oem_fastspring_item_min_order_by
    stddev: vectric_oem_fastspring_item_stddev_order_by
    stddev_pop: vectric_oem_fastspring_item_stddev_pop_order_by
    stddev_samp: vectric_oem_fastspring_item_stddev_samp_order_by
    sum: vectric_oem_fastspring_item_sum_order_by
    var_pop: vectric_oem_fastspring_item_var_pop_order_by
    var_samp: vectric_oem_fastspring_item_var_samp_order_by
    variance: vectric_oem_fastspring_item_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.oem_fastspring_item\""
input vectric_oem_fastspring_item_arr_rel_insert_input {
    data: [vectric_oem_fastspring_item_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_oem_fastspring_item_on_conflict
}

"order by avg() on columns of table \"vectric.oem_fastspring_item\""
input vectric_oem_fastspring_item_avg_order_by {
    discountValue: order_by
    itemId: order_by
    oemProductId: order_by
    orderId: order_by
    priceTotal: order_by
    quantity: order_by
}

"Boolean expression to filter rows from the table \"vectric.oem_fastspring_item\". All fields are combined with a logical 'AND'."
input vectric_oem_fastspring_item_bool_exp {
    _and: [vectric_oem_fastspring_item_bool_exp!]
    _not: vectric_oem_fastspring_item_bool_exp
    _or: [vectric_oem_fastspring_item_bool_exp!]
    batchId: String_comparison_exp
    discountValue: numeric_comparison_exp
    itemBundle: vectric_oem_fastspring_item_bundle_bool_exp
    itemId: bigint_comparison_exp
    oemProduct: vectric_oem_products_bool_exp
    oemProductId: bigint_comparison_exp
    order: vectric_oem_fastspring_order_bool_exp
    orderId: bigint_comparison_exp
    priceTotal: numeric_comparison_exp
    productName: String_comparison_exp
    quantity: bigint_comparison_exp
}

"order by aggregate values of table \"vectric.oem_fastspring_item_bundle\""
input vectric_oem_fastspring_item_bundle_aggregate_order_by {
    avg: vectric_oem_fastspring_item_bundle_avg_order_by
    count: order_by
    max: vectric_oem_fastspring_item_bundle_max_order_by
    min: vectric_oem_fastspring_item_bundle_min_order_by
    stddev: vectric_oem_fastspring_item_bundle_stddev_order_by
    stddev_pop: vectric_oem_fastspring_item_bundle_stddev_pop_order_by
    stddev_samp: vectric_oem_fastspring_item_bundle_stddev_samp_order_by
    sum: vectric_oem_fastspring_item_bundle_sum_order_by
    var_pop: vectric_oem_fastspring_item_bundle_var_pop_order_by
    var_samp: vectric_oem_fastspring_item_bundle_var_samp_order_by
    variance: vectric_oem_fastspring_item_bundle_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.oem_fastspring_item_bundle\""
input vectric_oem_fastspring_item_bundle_arr_rel_insert_input {
    data: [vectric_oem_fastspring_item_bundle_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_oem_fastspring_item_bundle_on_conflict
}

"order by avg() on columns of table \"vectric.oem_fastspring_item_bundle\""
input vectric_oem_fastspring_item_bundle_avg_order_by {
    fastspringItemId: order_by
    itemBundleId: order_by
}

"Boolean expression to filter rows from the table \"vectric.oem_fastspring_item_bundle\". All fields are combined with a logical 'AND'."
input vectric_oem_fastspring_item_bundle_bool_exp {
    _and: [vectric_oem_fastspring_item_bundle_bool_exp!]
    _not: vectric_oem_fastspring_item_bundle_bool_exp
    _or: [vectric_oem_fastspring_item_bundle_bool_exp!]
    bundle: vectric_sales_oem_bundles_bool_exp
    bundleId: String_comparison_exp
    fastspringItem: vectric_oem_fastspring_item_bool_exp
    fastspringItemId: bigint_comparison_exp
    itemBundleId: bigint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.oem_fastspring_item_bundle\""
input vectric_oem_fastspring_item_bundle_inc_input {
    fastspringItemId: bigint
    itemBundleId: bigint
}

"input type for inserting data into table \"vectric.oem_fastspring_item_bundle\""
input vectric_oem_fastspring_item_bundle_insert_input {
    bundle: vectric_sales_oem_bundles_obj_rel_insert_input
    bundleId: String
    fastspringItem: vectric_oem_fastspring_item_obj_rel_insert_input
    fastspringItemId: bigint
    itemBundleId: bigint
}

"order by max() on columns of table \"vectric.oem_fastspring_item_bundle\""
input vectric_oem_fastspring_item_bundle_max_order_by {
    bundleId: order_by
    fastspringItemId: order_by
    itemBundleId: order_by
}

"order by min() on columns of table \"vectric.oem_fastspring_item_bundle\""
input vectric_oem_fastspring_item_bundle_min_order_by {
    bundleId: order_by
    fastspringItemId: order_by
    itemBundleId: order_by
}

"on conflict condition type for table \"vectric.oem_fastspring_item_bundle\""
input vectric_oem_fastspring_item_bundle_on_conflict {
    constraint: vectric_oem_fastspring_item_bundle_constraint!
    update_columns: [vectric_oem_fastspring_item_bundle_update_column!]! = []
    where: vectric_oem_fastspring_item_bundle_bool_exp
}

"Ordering options when selecting data from \"vectric.oem_fastspring_item_bundle\"."
input vectric_oem_fastspring_item_bundle_order_by {
    bundle: vectric_sales_oem_bundles_order_by
    bundleId: order_by
    fastspringItem: vectric_oem_fastspring_item_order_by
    fastspringItemId: order_by
    itemBundleId: order_by
}

"primary key columns input for table: vectric_oem_fastspring_item_bundle"
input vectric_oem_fastspring_item_bundle_pk_columns_input {
    itemBundleId: bigint!
}

"input type for updating data in table \"vectric.oem_fastspring_item_bundle\""
input vectric_oem_fastspring_item_bundle_set_input {
    bundleId: String
    fastspringItemId: bigint
    itemBundleId: bigint
}

"order by stddev() on columns of table \"vectric.oem_fastspring_item_bundle\""
input vectric_oem_fastspring_item_bundle_stddev_order_by {
    fastspringItemId: order_by
    itemBundleId: order_by
}

"order by stddev_pop() on columns of table \"vectric.oem_fastspring_item_bundle\""
input vectric_oem_fastspring_item_bundle_stddev_pop_order_by {
    fastspringItemId: order_by
    itemBundleId: order_by
}

"order by stddev_samp() on columns of table \"vectric.oem_fastspring_item_bundle\""
input vectric_oem_fastspring_item_bundle_stddev_samp_order_by {
    fastspringItemId: order_by
    itemBundleId: order_by
}

"order by sum() on columns of table \"vectric.oem_fastspring_item_bundle\""
input vectric_oem_fastspring_item_bundle_sum_order_by {
    fastspringItemId: order_by
    itemBundleId: order_by
}

"order by var_pop() on columns of table \"vectric.oem_fastspring_item_bundle\""
input vectric_oem_fastspring_item_bundle_var_pop_order_by {
    fastspringItemId: order_by
    itemBundleId: order_by
}

"order by var_samp() on columns of table \"vectric.oem_fastspring_item_bundle\""
input vectric_oem_fastspring_item_bundle_var_samp_order_by {
    fastspringItemId: order_by
    itemBundleId: order_by
}

"order by variance() on columns of table \"vectric.oem_fastspring_item_bundle\""
input vectric_oem_fastspring_item_bundle_variance_order_by {
    fastspringItemId: order_by
    itemBundleId: order_by
}

"input type for incrementing numeric columns in table \"vectric.oem_fastspring_item\""
input vectric_oem_fastspring_item_inc_input {
    discountValue: numeric
    itemId: bigint
    oemProductId: bigint
    orderId: bigint
    priceTotal: numeric
    quantity: bigint
}

"input type for inserting data into table \"vectric.oem_fastspring_item\""
input vectric_oem_fastspring_item_insert_input {
    batchId: String
    discountValue: numeric
    itemBundle: vectric_oem_fastspring_item_bundle_arr_rel_insert_input
    itemId: bigint
    oemProduct: vectric_oem_products_obj_rel_insert_input
    oemProductId: bigint
    order: vectric_oem_fastspring_order_obj_rel_insert_input
    orderId: bigint
    priceTotal: numeric
    productName: String
    quantity: bigint
}

"order by max() on columns of table \"vectric.oem_fastspring_item\""
input vectric_oem_fastspring_item_max_order_by {
    batchId: order_by
    discountValue: order_by
    itemId: order_by
    oemProductId: order_by
    orderId: order_by
    priceTotal: order_by
    productName: order_by
    quantity: order_by
}

"order by min() on columns of table \"vectric.oem_fastspring_item\""
input vectric_oem_fastspring_item_min_order_by {
    batchId: order_by
    discountValue: order_by
    itemId: order_by
    oemProductId: order_by
    orderId: order_by
    priceTotal: order_by
    productName: order_by
    quantity: order_by
}

"input type for inserting object relation for remote table \"vectric.oem_fastspring_item\""
input vectric_oem_fastspring_item_obj_rel_insert_input {
    data: vectric_oem_fastspring_item_insert_input!
    "on conflict condition"
    on_conflict: vectric_oem_fastspring_item_on_conflict
}

"on conflict condition type for table \"vectric.oem_fastspring_item\""
input vectric_oem_fastspring_item_on_conflict {
    constraint: vectric_oem_fastspring_item_constraint!
    update_columns: [vectric_oem_fastspring_item_update_column!]! = []
    where: vectric_oem_fastspring_item_bool_exp
}

"Ordering options when selecting data from \"vectric.oem_fastspring_item\"."
input vectric_oem_fastspring_item_order_by {
    batchId: order_by
    discountValue: order_by
    itemBundle_aggregate: vectric_oem_fastspring_item_bundle_aggregate_order_by
    itemId: order_by
    oemProduct: vectric_oem_products_order_by
    oemProductId: order_by
    order: vectric_oem_fastspring_order_order_by
    orderId: order_by
    priceTotal: order_by
    productName: order_by
    quantity: order_by
}

"primary key columns input for table: vectric_oem_fastspring_item"
input vectric_oem_fastspring_item_pk_columns_input {
    itemId: bigint!
}

"input type for updating data in table \"vectric.oem_fastspring_item\""
input vectric_oem_fastspring_item_set_input {
    batchId: String
    discountValue: numeric
    itemId: bigint
    oemProductId: bigint
    orderId: bigint
    priceTotal: numeric
    productName: String
    quantity: bigint
}

"order by stddev() on columns of table \"vectric.oem_fastspring_item\""
input vectric_oem_fastspring_item_stddev_order_by {
    discountValue: order_by
    itemId: order_by
    oemProductId: order_by
    orderId: order_by
    priceTotal: order_by
    quantity: order_by
}

"order by stddev_pop() on columns of table \"vectric.oem_fastspring_item\""
input vectric_oem_fastspring_item_stddev_pop_order_by {
    discountValue: order_by
    itemId: order_by
    oemProductId: order_by
    orderId: order_by
    priceTotal: order_by
    quantity: order_by
}

"order by stddev_samp() on columns of table \"vectric.oem_fastspring_item\""
input vectric_oem_fastspring_item_stddev_samp_order_by {
    discountValue: order_by
    itemId: order_by
    oemProductId: order_by
    orderId: order_by
    priceTotal: order_by
    quantity: order_by
}

"order by sum() on columns of table \"vectric.oem_fastspring_item\""
input vectric_oem_fastspring_item_sum_order_by {
    discountValue: order_by
    itemId: order_by
    oemProductId: order_by
    orderId: order_by
    priceTotal: order_by
    quantity: order_by
}

"order by var_pop() on columns of table \"vectric.oem_fastspring_item\""
input vectric_oem_fastspring_item_var_pop_order_by {
    discountValue: order_by
    itemId: order_by
    oemProductId: order_by
    orderId: order_by
    priceTotal: order_by
    quantity: order_by
}

"order by var_samp() on columns of table \"vectric.oem_fastspring_item\""
input vectric_oem_fastspring_item_var_samp_order_by {
    discountValue: order_by
    itemId: order_by
    oemProductId: order_by
    orderId: order_by
    priceTotal: order_by
    quantity: order_by
}

"order by variance() on columns of table \"vectric.oem_fastspring_item\""
input vectric_oem_fastspring_item_variance_order_by {
    discountValue: order_by
    itemId: order_by
    oemProductId: order_by
    orderId: order_by
    priceTotal: order_by
    quantity: order_by
}

"Boolean expression to filter rows from the table \"vectric.oem_fastspring_order\". All fields are combined with a logical 'AND'."
input vectric_oem_fastspring_order_bool_exp {
    _and: [vectric_oem_fastspring_order_bool_exp!]
    _not: vectric_oem_fastspring_order_bool_exp
    _or: [vectric_oem_fastspring_order_bool_exp!]
    actionTaken: bigint_comparison_exp
    amendedBy: String_comparison_exp
    city: String_comparison_exp
    createdBy: String_comparison_exp
    currency: String_comparison_exp
    customerId: bigint_comparison_exp
    dateAmended: timestamptz_comparison_exp
    dateCreated: timestamptz_comparison_exp
    dateProcessed: timestamptz_comparison_exp
    fastSpringCustomerId: bigint_comparison_exp
    items: vectric_oem_fastspring_item_bool_exp
    language: String_comparison_exp
    notes: String_comparison_exp
    orderId: bigint_comparison_exp
    orderReference: String_comparison_exp
    partner: vectric_oem_partners_bool_exp
    partnerId: bigint_comparison_exp
    postalCode: String_comparison_exp
    processedBy: String_comparison_exp
    region: String_comparison_exp
    route: String_comparison_exp
    subTotal: numeric_comparison_exp
    tax: numeric_comparison_exp
    total: numeric_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.oem_fastspring_order\""
input vectric_oem_fastspring_order_inc_input {
    actionTaken: bigint
    customerId: bigint
    fastSpringCustomerId: bigint
    orderId: bigint
    partnerId: bigint
    subTotal: numeric
    tax: numeric
    total: numeric
}

"input type for inserting data into table \"vectric.oem_fastspring_order\""
input vectric_oem_fastspring_order_insert_input {
    actionTaken: bigint
    amendedBy: String
    city: String
    createdBy: String
    currency: String
    customerId: bigint
    dateAmended: timestamptz
    dateCreated: timestamptz
    dateProcessed: timestamptz
    fastSpringCustomerId: bigint
    items: vectric_oem_fastspring_item_arr_rel_insert_input
    language: String
    notes: String
    orderId: bigint
    orderReference: String
    partner: vectric_oem_partners_obj_rel_insert_input
    partnerId: bigint
    postalCode: String
    processedBy: String
    region: String
    route: String
    subTotal: numeric
    tax: numeric
    total: numeric
}

"input type for inserting object relation for remote table \"vectric.oem_fastspring_order\""
input vectric_oem_fastspring_order_obj_rel_insert_input {
    data: vectric_oem_fastspring_order_insert_input!
    "on conflict condition"
    on_conflict: vectric_oem_fastspring_order_on_conflict
}

"on conflict condition type for table \"vectric.oem_fastspring_order\""
input vectric_oem_fastspring_order_on_conflict {
    constraint: vectric_oem_fastspring_order_constraint!
    update_columns: [vectric_oem_fastspring_order_update_column!]! = []
    where: vectric_oem_fastspring_order_bool_exp
}

"Ordering options when selecting data from \"vectric.oem_fastspring_order\"."
input vectric_oem_fastspring_order_order_by {
    actionTaken: order_by
    amendedBy: order_by
    city: order_by
    createdBy: order_by
    currency: order_by
    customerId: order_by
    dateAmended: order_by
    dateCreated: order_by
    dateProcessed: order_by
    fastSpringCustomerId: order_by
    items_aggregate: vectric_oem_fastspring_item_aggregate_order_by
    language: order_by
    notes: order_by
    orderId: order_by
    orderReference: order_by
    partner: vectric_oem_partners_order_by
    partnerId: order_by
    postalCode: order_by
    processedBy: order_by
    region: order_by
    route: order_by
    subTotal: order_by
    tax: order_by
    total: order_by
}

"primary key columns input for table: vectric_oem_fastspring_order"
input vectric_oem_fastspring_order_pk_columns_input {
    orderId: bigint!
}

"input type for updating data in table \"vectric.oem_fastspring_order\""
input vectric_oem_fastspring_order_set_input {
    actionTaken: bigint
    amendedBy: String
    city: String
    createdBy: String
    currency: String
    customerId: bigint
    dateAmended: timestamptz
    dateCreated: timestamptz
    dateProcessed: timestamptz
    fastSpringCustomerId: bigint
    language: String
    notes: String
    orderId: bigint
    orderReference: String
    partnerId: bigint
    postalCode: String
    processedBy: String
    region: String
    route: String
    subTotal: numeric
    tax: numeric
    total: numeric
}

"Boolean expression to filter rows from the table \"vectric.oem_invite_status\". All fields are combined with a logical 'AND'."
input vectric_oem_invite_status_bool_exp {
    _and: [vectric_oem_invite_status_bool_exp!]
    _not: vectric_oem_invite_status_bool_exp
    _or: [vectric_oem_invite_status_bool_exp!]
    status: String_comparison_exp
    statusId: bigint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.oem_invite_status\""
input vectric_oem_invite_status_inc_input {
    statusId: bigint
}

"input type for inserting data into table \"vectric.oem_invite_status\""
input vectric_oem_invite_status_insert_input {
    status: String
    statusId: bigint
}

"input type for inserting object relation for remote table \"vectric.oem_invite_status\""
input vectric_oem_invite_status_obj_rel_insert_input {
    data: vectric_oem_invite_status_insert_input!
    "on conflict condition"
    on_conflict: vectric_oem_invite_status_on_conflict
}

"on conflict condition type for table \"vectric.oem_invite_status\""
input vectric_oem_invite_status_on_conflict {
    constraint: vectric_oem_invite_status_constraint!
    update_columns: [vectric_oem_invite_status_update_column!]! = []
    where: vectric_oem_invite_status_bool_exp
}

"Ordering options when selecting data from \"vectric.oem_invite_status\"."
input vectric_oem_invite_status_order_by {
    status: order_by
    statusId: order_by
}

"primary key columns input for table: vectric_oem_invite_status"
input vectric_oem_invite_status_pk_columns_input {
    statusId: bigint!
}

"input type for updating data in table \"vectric.oem_invite_status\""
input vectric_oem_invite_status_set_input {
    status: String
    statusId: bigint
}

"Boolean expression to filter rows from the table \"vectric.oem_licence_allocation_type\". All fields are combined with a logical 'AND'."
input vectric_oem_licence_allocation_type_bool_exp {
    _and: [vectric_oem_licence_allocation_type_bool_exp!]
    _not: vectric_oem_licence_allocation_type_bool_exp
    _or: [vectric_oem_licence_allocation_type_bool_exp!]
    allocationTypeId: bigint_comparison_exp
    typeName: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.oem_licence_allocation_type\""
input vectric_oem_licence_allocation_type_inc_input {
    allocationTypeId: bigint
}

"input type for inserting data into table \"vectric.oem_licence_allocation_type\""
input vectric_oem_licence_allocation_type_insert_input {
    allocationTypeId: bigint
    typeName: String
}

"input type for inserting object relation for remote table \"vectric.oem_licence_allocation_type\""
input vectric_oem_licence_allocation_type_obj_rel_insert_input {
    data: vectric_oem_licence_allocation_type_insert_input!
    "on conflict condition"
    on_conflict: vectric_oem_licence_allocation_type_on_conflict
}

"on conflict condition type for table \"vectric.oem_licence_allocation_type\""
input vectric_oem_licence_allocation_type_on_conflict {
    constraint: vectric_oem_licence_allocation_type_constraint!
    update_columns: [vectric_oem_licence_allocation_type_update_column!]! = []
    where: vectric_oem_licence_allocation_type_bool_exp
}

"Ordering options when selecting data from \"vectric.oem_licence_allocation_type\"."
input vectric_oem_licence_allocation_type_order_by {
    allocationTypeId: order_by
    typeName: order_by
}

"primary key columns input for table: vectric_oem_licence_allocation_type"
input vectric_oem_licence_allocation_type_pk_columns_input {
    allocationTypeId: bigint!
}

"input type for updating data in table \"vectric.oem_licence_allocation_type\""
input vectric_oem_licence_allocation_type_set_input {
    allocationTypeId: bigint
    typeName: String
}

"Boolean expression to filter rows from the table \"vectric.oem_partners\". All fields are combined with a logical 'AND'."
input vectric_oem_partners_bool_exp {
    _and: [vectric_oem_partners_bool_exp!]
    _not: vectric_oem_partners_bool_exp
    _or: [vectric_oem_partners_bool_exp!]
    bundles: vectric_sales_oem_bundles_bool_exp
    codePrefix: String_comparison_exp
    countrycode: bigint_comparison_exp
    dateOfLastBatch: timestamptz_comparison_exp
    displayName: String_comparison_exp
    inactive: Boolean_comparison_exp
    nextIssue: bigint_comparison_exp
    partnerId: bigint_comparison_exp
    purchaseOptions: vectric_oem_purchase_options_bool_exp
    staff: vectric_oem_staff_customer_bool_exp
}

"input type for incrementing numeric columns in table \"vectric.oem_partners\""
input vectric_oem_partners_inc_input {
    countrycode: bigint
    nextIssue: bigint
    partnerId: bigint
}

"input type for inserting data into table \"vectric.oem_partners\""
input vectric_oem_partners_insert_input {
    bundles: vectric_sales_oem_bundles_arr_rel_insert_input
    codePrefix: String
    countrycode: bigint
    dateOfLastBatch: timestamptz
    displayName: String
    inactive: Boolean
    nextIssue: bigint
    partnerId: bigint
    purchaseOptions: vectric_oem_purchase_options_arr_rel_insert_input
    staff: vectric_oem_staff_customer_arr_rel_insert_input
}

"input type for inserting object relation for remote table \"vectric.oem_partners\""
input vectric_oem_partners_obj_rel_insert_input {
    data: vectric_oem_partners_insert_input!
    "on conflict condition"
    on_conflict: vectric_oem_partners_on_conflict
}

"on conflict condition type for table \"vectric.oem_partners\""
input vectric_oem_partners_on_conflict {
    constraint: vectric_oem_partners_constraint!
    update_columns: [vectric_oem_partners_update_column!]! = []
    where: vectric_oem_partners_bool_exp
}

"Ordering options when selecting data from \"vectric.oem_partners\"."
input vectric_oem_partners_order_by {
    bundles_aggregate: vectric_sales_oem_bundles_aggregate_order_by
    codePrefix: order_by
    countrycode: order_by
    dateOfLastBatch: order_by
    displayName: order_by
    inactive: order_by
    nextIssue: order_by
    partnerId: order_by
    purchaseOptions_aggregate: vectric_oem_purchase_options_aggregate_order_by
    staff_aggregate: vectric_oem_staff_customer_aggregate_order_by
}

"primary key columns input for table: vectric_oem_partners"
input vectric_oem_partners_pk_columns_input {
    partnerId: bigint!
}

"input type for updating data in table \"vectric.oem_partners\""
input vectric_oem_partners_set_input {
    codePrefix: String
    countrycode: bigint
    dateOfLastBatch: timestamptz
    displayName: String
    inactive: Boolean
    nextIssue: bigint
    partnerId: bigint
}

"Boolean expression to filter rows from the table \"vectric.oem_products\". All fields are combined with a logical 'AND'."
input vectric_oem_products_bool_exp {
    _and: [vectric_oem_products_bool_exp!]
    _not: vectric_oem_products_bool_exp
    _or: [vectric_oem_products_bool_exp!]
    detailedProducts: vectric_oem_detailed_products_bool_exp
    enabled: Boolean_comparison_exp
    oemFastspringId: String_comparison_exp
    oemProductId: bigint_comparison_exp
    product: vectric_products_products_bool_exp
    productId: bigint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.oem_products\""
input vectric_oem_products_inc_input {
    oemProductId: bigint
    productId: bigint
}

"input type for inserting data into table \"vectric.oem_products\""
input vectric_oem_products_insert_input {
    detailedProducts: vectric_oem_detailed_products_arr_rel_insert_input
    enabled: Boolean
    oemFastspringId: String
    oemProductId: bigint
    product: vectric_products_products_obj_rel_insert_input
    productId: bigint
}

"input type for inserting object relation for remote table \"vectric.oem_products\""
input vectric_oem_products_obj_rel_insert_input {
    data: vectric_oem_products_insert_input!
    "on conflict condition"
    on_conflict: vectric_oem_products_on_conflict
}

"on conflict condition type for table \"vectric.oem_products\""
input vectric_oem_products_on_conflict {
    constraint: vectric_oem_products_constraint!
    update_columns: [vectric_oem_products_update_column!]! = []
    where: vectric_oem_products_bool_exp
}

"Ordering options when selecting data from \"vectric.oem_products\"."
input vectric_oem_products_order_by {
    detailedProducts_aggregate: vectric_oem_detailed_products_aggregate_order_by
    enabled: order_by
    oemFastspringId: order_by
    oemProductId: order_by
    product: vectric_products_products_order_by
    productId: order_by
}

"primary key columns input for table: vectric_oem_products"
input vectric_oem_products_pk_columns_input {
    oemProductId: bigint!
}

"input type for updating data in table \"vectric.oem_products\""
input vectric_oem_products_set_input {
    enabled: Boolean
    oemFastspringId: String
    oemProductId: bigint
    productId: bigint
}

"order by aggregate values of table \"vectric.oem_purchase_options\""
input vectric_oem_purchase_options_aggregate_order_by {
    avg: vectric_oem_purchase_options_avg_order_by
    count: order_by
    max: vectric_oem_purchase_options_max_order_by
    min: vectric_oem_purchase_options_min_order_by
    stddev: vectric_oem_purchase_options_stddev_order_by
    stddev_pop: vectric_oem_purchase_options_stddev_pop_order_by
    stddev_samp: vectric_oem_purchase_options_stddev_samp_order_by
    sum: vectric_oem_purchase_options_sum_order_by
    var_pop: vectric_oem_purchase_options_var_pop_order_by
    var_samp: vectric_oem_purchase_options_var_samp_order_by
    variance: vectric_oem_purchase_options_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.oem_purchase_options\""
input vectric_oem_purchase_options_arr_rel_insert_input {
    data: [vectric_oem_purchase_options_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_oem_purchase_options_on_conflict
}

"order by avg() on columns of table \"vectric.oem_purchase_options\""
input vectric_oem_purchase_options_avg_order_by {
    maxQuantity: order_by
    minQuantity: order_by
    optionId: order_by
    partnerId: order_by
}

"Boolean expression to filter rows from the table \"vectric.oem_purchase_options\". All fields are combined with a logical 'AND'."
input vectric_oem_purchase_options_bool_exp {
    _and: [vectric_oem_purchase_options_bool_exp!]
    _not: vectric_oem_purchase_options_bool_exp
    _or: [vectric_oem_purchase_options_bool_exp!]
    emailLicenceDetails: Boolean_comparison_exp
    maxQuantity: bigint_comparison_exp
    minQuantity: bigint_comparison_exp
    multipleLicences: Boolean_comparison_exp
    optionId: bigint_comparison_exp
    partner: vectric_oem_partners_bool_exp
    partnerId: bigint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.oem_purchase_options\""
input vectric_oem_purchase_options_inc_input {
    maxQuantity: bigint
    minQuantity: bigint
    optionId: bigint
    partnerId: bigint
}

"input type for inserting data into table \"vectric.oem_purchase_options\""
input vectric_oem_purchase_options_insert_input {
    emailLicenceDetails: Boolean
    maxQuantity: bigint
    minQuantity: bigint
    multipleLicences: Boolean
    optionId: bigint
    partner: vectric_oem_partners_obj_rel_insert_input
    partnerId: bigint
}

"order by max() on columns of table \"vectric.oem_purchase_options\""
input vectric_oem_purchase_options_max_order_by {
    maxQuantity: order_by
    minQuantity: order_by
    optionId: order_by
    partnerId: order_by
}

"order by min() on columns of table \"vectric.oem_purchase_options\""
input vectric_oem_purchase_options_min_order_by {
    maxQuantity: order_by
    minQuantity: order_by
    optionId: order_by
    partnerId: order_by
}

"on conflict condition type for table \"vectric.oem_purchase_options\""
input vectric_oem_purchase_options_on_conflict {
    constraint: vectric_oem_purchase_options_constraint!
    update_columns: [vectric_oem_purchase_options_update_column!]! = []
    where: vectric_oem_purchase_options_bool_exp
}

"Ordering options when selecting data from \"vectric.oem_purchase_options\"."
input vectric_oem_purchase_options_order_by {
    emailLicenceDetails: order_by
    maxQuantity: order_by
    minQuantity: order_by
    multipleLicences: order_by
    optionId: order_by
    partner: vectric_oem_partners_order_by
    partnerId: order_by
}

"primary key columns input for table: vectric_oem_purchase_options"
input vectric_oem_purchase_options_pk_columns_input {
    optionId: bigint!
}

"input type for updating data in table \"vectric.oem_purchase_options\""
input vectric_oem_purchase_options_set_input {
    emailLicenceDetails: Boolean
    maxQuantity: bigint
    minQuantity: bigint
    multipleLicences: Boolean
    optionId: bigint
    partnerId: bigint
}

"order by stddev() on columns of table \"vectric.oem_purchase_options\""
input vectric_oem_purchase_options_stddev_order_by {
    maxQuantity: order_by
    minQuantity: order_by
    optionId: order_by
    partnerId: order_by
}

"order by stddev_pop() on columns of table \"vectric.oem_purchase_options\""
input vectric_oem_purchase_options_stddev_pop_order_by {
    maxQuantity: order_by
    minQuantity: order_by
    optionId: order_by
    partnerId: order_by
}

"order by stddev_samp() on columns of table \"vectric.oem_purchase_options\""
input vectric_oem_purchase_options_stddev_samp_order_by {
    maxQuantity: order_by
    minQuantity: order_by
    optionId: order_by
    partnerId: order_by
}

"order by sum() on columns of table \"vectric.oem_purchase_options\""
input vectric_oem_purchase_options_sum_order_by {
    maxQuantity: order_by
    minQuantity: order_by
    optionId: order_by
    partnerId: order_by
}

"order by var_pop() on columns of table \"vectric.oem_purchase_options\""
input vectric_oem_purchase_options_var_pop_order_by {
    maxQuantity: order_by
    minQuantity: order_by
    optionId: order_by
    partnerId: order_by
}

"order by var_samp() on columns of table \"vectric.oem_purchase_options\""
input vectric_oem_purchase_options_var_samp_order_by {
    maxQuantity: order_by
    minQuantity: order_by
    optionId: order_by
    partnerId: order_by
}

"order by variance() on columns of table \"vectric.oem_purchase_options\""
input vectric_oem_purchase_options_variance_order_by {
    maxQuantity: order_by
    minQuantity: order_by
    optionId: order_by
    partnerId: order_by
}

"Boolean expression to filter rows from the table \"vectric.oem_staff_admin_ownership\". All fields are combined with a logical 'AND'."
input vectric_oem_staff_admin_ownership_bool_exp {
    _and: [vectric_oem_staff_admin_ownership_bool_exp!]
    _not: vectric_oem_staff_admin_ownership_bool_exp
    _or: [vectric_oem_staff_admin_ownership_bool_exp!]
    admin: Boolean_comparison_exp
    adminId: bigint_comparison_exp
    customerId: bigint_comparison_exp
    customerName: String_comparison_exp
    dateAccepted: timestamptz_comparison_exp
    displayStatus: String_comparison_exp
    email: String_comparison_exp
    partnerId: bigint_comparison_exp
    status: bigint_comparison_exp
}

"Ordering options when selecting data from \"vectric.oem_staff_admin_ownership\"."
input vectric_oem_staff_admin_ownership_order_by {
    admin: order_by
    adminId: order_by
    customerId: order_by
    customerName: order_by
    dateAccepted: order_by
    displayStatus: order_by
    email: order_by
    partnerId: order_by
    status: order_by
}

"order by aggregate values of table \"vectric.oem_staff_customer\""
input vectric_oem_staff_customer_aggregate_order_by {
    avg: vectric_oem_staff_customer_avg_order_by
    count: order_by
    max: vectric_oem_staff_customer_max_order_by
    min: vectric_oem_staff_customer_min_order_by
    stddev: vectric_oem_staff_customer_stddev_order_by
    stddev_pop: vectric_oem_staff_customer_stddev_pop_order_by
    stddev_samp: vectric_oem_staff_customer_stddev_samp_order_by
    sum: vectric_oem_staff_customer_sum_order_by
    var_pop: vectric_oem_staff_customer_var_pop_order_by
    var_samp: vectric_oem_staff_customer_var_samp_order_by
    variance: vectric_oem_staff_customer_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.oem_staff_customer\""
input vectric_oem_staff_customer_arr_rel_insert_input {
    data: [vectric_oem_staff_customer_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_oem_staff_customer_on_conflict
}

"order by avg() on columns of table \"vectric.oem_staff_customer\""
input vectric_oem_staff_customer_avg_order_by {
    customerId: order_by
    partnerId: order_by
    staffId: order_by
    status: order_by
}

"Boolean expression to filter rows from the table \"vectric.oem_staff_customer\". All fields are combined with a logical 'AND'."
input vectric_oem_staff_customer_bool_exp {
    _and: [vectric_oem_staff_customer_bool_exp!]
    _not: vectric_oem_staff_customer_bool_exp
    _or: [vectric_oem_staff_customer_bool_exp!]
    admin: Boolean_comparison_exp
    customer: vectric_sales_customers_bool_exp
    customerId: bigint_comparison_exp
    dataRequested: timestamptz_comparison_exp
    dateAccepted: timestamptz_comparison_exp
    dateUpdated: timestamptz_comparison_exp
    inviteStatus: vectric_oem_invite_status_bool_exp
    partner: vectric_oem_partners_bool_exp
    partnerId: bigint_comparison_exp
    staffId: bigint_comparison_exp
    status: bigint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.oem_staff_customer\""
input vectric_oem_staff_customer_inc_input {
    customerId: bigint
    partnerId: bigint
    staffId: bigint
    status: bigint
}

"input type for inserting data into table \"vectric.oem_staff_customer\""
input vectric_oem_staff_customer_insert_input {
    admin: Boolean
    customer: vectric_sales_customers_obj_rel_insert_input
    customerId: bigint
    dataRequested: timestamptz
    dateAccepted: timestamptz
    dateUpdated: timestamptz
    inviteStatus: vectric_oem_invite_status_obj_rel_insert_input
    partner: vectric_oem_partners_obj_rel_insert_input
    partnerId: bigint
    staffId: bigint
    status: bigint
}

"order by max() on columns of table \"vectric.oem_staff_customer\""
input vectric_oem_staff_customer_max_order_by {
    customerId: order_by
    dataRequested: order_by
    dateAccepted: order_by
    dateUpdated: order_by
    partnerId: order_by
    staffId: order_by
    status: order_by
}

"order by min() on columns of table \"vectric.oem_staff_customer\""
input vectric_oem_staff_customer_min_order_by {
    customerId: order_by
    dataRequested: order_by
    dateAccepted: order_by
    dateUpdated: order_by
    partnerId: order_by
    staffId: order_by
    status: order_by
}

"on conflict condition type for table \"vectric.oem_staff_customer\""
input vectric_oem_staff_customer_on_conflict {
    constraint: vectric_oem_staff_customer_constraint!
    update_columns: [vectric_oem_staff_customer_update_column!]! = []
    where: vectric_oem_staff_customer_bool_exp
}

"Ordering options when selecting data from \"vectric.oem_staff_customer\"."
input vectric_oem_staff_customer_order_by {
    admin: order_by
    customer: vectric_sales_customers_order_by
    customerId: order_by
    dataRequested: order_by
    dateAccepted: order_by
    dateUpdated: order_by
    inviteStatus: vectric_oem_invite_status_order_by
    partner: vectric_oem_partners_order_by
    partnerId: order_by
    staffId: order_by
    status: order_by
}

"primary key columns input for table: vectric_oem_staff_customer"
input vectric_oem_staff_customer_pk_columns_input {
    staffId: bigint!
}

"input type for updating data in table \"vectric.oem_staff_customer\""
input vectric_oem_staff_customer_set_input {
    admin: Boolean
    customerId: bigint
    dataRequested: timestamptz
    dateAccepted: timestamptz
    dateUpdated: timestamptz
    partnerId: bigint
    staffId: bigint
    status: bigint
}

"order by stddev() on columns of table \"vectric.oem_staff_customer\""
input vectric_oem_staff_customer_stddev_order_by {
    customerId: order_by
    partnerId: order_by
    staffId: order_by
    status: order_by
}

"order by stddev_pop() on columns of table \"vectric.oem_staff_customer\""
input vectric_oem_staff_customer_stddev_pop_order_by {
    customerId: order_by
    partnerId: order_by
    staffId: order_by
    status: order_by
}

"order by stddev_samp() on columns of table \"vectric.oem_staff_customer\""
input vectric_oem_staff_customer_stddev_samp_order_by {
    customerId: order_by
    partnerId: order_by
    staffId: order_by
    status: order_by
}

"order by sum() on columns of table \"vectric.oem_staff_customer\""
input vectric_oem_staff_customer_sum_order_by {
    customerId: order_by
    partnerId: order_by
    staffId: order_by
    status: order_by
}

"order by var_pop() on columns of table \"vectric.oem_staff_customer\""
input vectric_oem_staff_customer_var_pop_order_by {
    customerId: order_by
    partnerId: order_by
    staffId: order_by
    status: order_by
}

"order by var_samp() on columns of table \"vectric.oem_staff_customer\""
input vectric_oem_staff_customer_var_samp_order_by {
    customerId: order_by
    partnerId: order_by
    staffId: order_by
    status: order_by
}

"order by variance() on columns of table \"vectric.oem_staff_customer\""
input vectric_oem_staff_customer_variance_order_by {
    customerId: order_by
    partnerId: order_by
    staffId: order_by
    status: order_by
}

"order by aggregate values of table \"vectric.organization_audit\""
input vectric_organization_audit_aggregate_order_by {
    avg: vectric_organization_audit_avg_order_by
    count: order_by
    max: vectric_organization_audit_max_order_by
    min: vectric_organization_audit_min_order_by
    stddev: vectric_organization_audit_stddev_order_by
    stddev_pop: vectric_organization_audit_stddev_pop_order_by
    stddev_samp: vectric_organization_audit_stddev_samp_order_by
    sum: vectric_organization_audit_sum_order_by
    var_pop: vectric_organization_audit_var_pop_order_by
    var_samp: vectric_organization_audit_var_samp_order_by
    variance: vectric_organization_audit_variance_order_by
}

"append existing jsonb value of filtered columns with new jsonb value"
input vectric_organization_audit_append_input {
    auditPayload: jsonb
}

"input type for inserting array relation for remote table \"vectric.organization_audit\""
input vectric_organization_audit_arr_rel_insert_input {
    data: [vectric_organization_audit_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_organization_audit_on_conflict
}

"order by avg() on columns of table \"vectric.organization_audit\""
input vectric_organization_audit_avg_order_by {
    auditId: order_by
    organizationId: order_by
}

"Boolean expression to filter rows from the table \"vectric.organization_audit\". All fields are combined with a logical 'AND'."
input vectric_organization_audit_bool_exp {
    _and: [vectric_organization_audit_bool_exp!]
    _not: vectric_organization_audit_bool_exp
    _or: [vectric_organization_audit_bool_exp!]
    auditDate: timestamp_comparison_exp
    auditId: Int_comparison_exp
    auditPayload: jsonb_comparison_exp
    auditType: String_comparison_exp
    author: String_comparison_exp
    internalChange: Boolean_comparison_exp
    ipAddress: String_comparison_exp
    organizationId: Int_comparison_exp
}

"delete the field or element with specified path (for JSON arrays, negative integers count from the end)"
input vectric_organization_audit_delete_at_path_input {
    auditPayload: [String!]
}

"delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"
input vectric_organization_audit_delete_elem_input {
    auditPayload: Int
}

"delete key/value pair or string element. key/value pairs are matched based on their key value"
input vectric_organization_audit_delete_key_input {
    auditPayload: String
}

"input type for incrementing numeric columns in table \"vectric.organization_audit\""
input vectric_organization_audit_inc_input {
    auditId: Int
    organizationId: Int
}

"input type for inserting data into table \"vectric.organization_audit\""
input vectric_organization_audit_insert_input {
    auditDate: timestamp
    auditId: Int
    auditPayload: jsonb
    auditType: String
    author: String
    internalChange: Boolean
    ipAddress: String
    organizationId: Int
}

"order by max() on columns of table \"vectric.organization_audit\""
input vectric_organization_audit_max_order_by {
    auditDate: order_by
    auditId: order_by
    auditType: order_by
    author: order_by
    ipAddress: order_by
    organizationId: order_by
}

"order by min() on columns of table \"vectric.organization_audit\""
input vectric_organization_audit_min_order_by {
    auditDate: order_by
    auditId: order_by
    auditType: order_by
    author: order_by
    ipAddress: order_by
    organizationId: order_by
}

"on conflict condition type for table \"vectric.organization_audit\""
input vectric_organization_audit_on_conflict {
    constraint: vectric_organization_audit_constraint!
    update_columns: [vectric_organization_audit_update_column!]! = []
    where: vectric_organization_audit_bool_exp
}

"Ordering options when selecting data from \"vectric.organization_audit\"."
input vectric_organization_audit_order_by {
    auditDate: order_by
    auditId: order_by
    auditPayload: order_by
    auditType: order_by
    author: order_by
    internalChange: order_by
    ipAddress: order_by
    organizationId: order_by
}

"primary key columns input for table: vectric_organization_audit"
input vectric_organization_audit_pk_columns_input {
    auditId: Int!
}

"prepend existing jsonb value of filtered columns with new jsonb value"
input vectric_organization_audit_prepend_input {
    auditPayload: jsonb
}

"input type for updating data in table \"vectric.organization_audit\""
input vectric_organization_audit_set_input {
    auditDate: timestamp
    auditId: Int
    auditPayload: jsonb
    auditType: String
    author: String
    internalChange: Boolean
    ipAddress: String
    organizationId: Int
}

"order by stddev() on columns of table \"vectric.organization_audit\""
input vectric_organization_audit_stddev_order_by {
    auditId: order_by
    organizationId: order_by
}

"order by stddev_pop() on columns of table \"vectric.organization_audit\""
input vectric_organization_audit_stddev_pop_order_by {
    auditId: order_by
    organizationId: order_by
}

"order by stddev_samp() on columns of table \"vectric.organization_audit\""
input vectric_organization_audit_stddev_samp_order_by {
    auditId: order_by
    organizationId: order_by
}

"order by sum() on columns of table \"vectric.organization_audit\""
input vectric_organization_audit_sum_order_by {
    auditId: order_by
    organizationId: order_by
}

"order by var_pop() on columns of table \"vectric.organization_audit\""
input vectric_organization_audit_var_pop_order_by {
    auditId: order_by
    organizationId: order_by
}

"order by var_samp() on columns of table \"vectric.organization_audit\""
input vectric_organization_audit_var_samp_order_by {
    auditId: order_by
    organizationId: order_by
}

"order by variance() on columns of table \"vectric.organization_audit\""
input vectric_organization_audit_variance_order_by {
    auditId: order_by
    organizationId: order_by
}

"Boolean expression to filter rows from the table \"vectric.organization_licence_scope\". All fields are combined with a logical 'AND'."
input vectric_organization_licence_scope_bool_exp {
    _and: [vectric_organization_licence_scope_bool_exp!]
    _not: vectric_organization_licence_scope_bool_exp
    _or: [vectric_organization_licence_scope_bool_exp!]
    scope: String_comparison_exp
}

"Boolean expression to compare columns of type \"vectric_organization_licence_scope_enum\". All fields are combined with logical 'AND'."
input vectric_organization_licence_scope_enum_comparison_exp {
    _eq: vectric_organization_licence_scope_enum
    _in: [vectric_organization_licence_scope_enum!]
    _is_null: Boolean
    _neq: vectric_organization_licence_scope_enum
    _nin: [vectric_organization_licence_scope_enum!]
}

"input type for inserting data into table \"vectric.organization_licence_scope\""
input vectric_organization_licence_scope_insert_input {
    scope: String
}

"input type for inserting object relation for remote table \"vectric.organization_licence_scope\""
input vectric_organization_licence_scope_obj_rel_insert_input {
    data: vectric_organization_licence_scope_insert_input!
    "on conflict condition"
    on_conflict: vectric_organization_licence_scope_on_conflict
}

"on conflict condition type for table \"vectric.organization_licence_scope\""
input vectric_organization_licence_scope_on_conflict {
    constraint: vectric_organization_licence_scope_constraint!
    update_columns: [vectric_organization_licence_scope_update_column!]! = []
    where: vectric_organization_licence_scope_bool_exp
}

"Ordering options when selecting data from \"vectric.organization_licence_scope\"."
input vectric_organization_licence_scope_order_by {
    scope: order_by
}

"primary key columns input for table: vectric_organization_licence_scope"
input vectric_organization_licence_scope_pk_columns_input {
    scope: String!
}

"input type for updating data in table \"vectric.organization_licence_scope\""
input vectric_organization_licence_scope_set_input {
    scope: String
}

"Boolean expression to filter rows from the table \"vectric.organization_memberships_admin_access\". All fields are combined with a logical 'AND'."
input vectric_organization_memberships_admin_access_bool_exp {
    _and: [vectric_organization_memberships_admin_access_bool_exp!]
    _not: vectric_organization_memberships_admin_access_bool_exp
    _or: [vectric_organization_memberships_admin_access_bool_exp!]
    addedBy: String_comparison_exp
    amendedBy: String_comparison_exp
    customerEmail: String_comparison_exp
    customerId: bigint_comparison_exp
    customerName: String_comparison_exp
    customerRegisteredUsername: String_comparison_exp
    dateAdded: timestamp_comparison_exp
    dateAmended: timestamp_comparison_exp
    invitations: vectric_membership_invitations_bool_exp
    membershipId: Int_comparison_exp
    membershipRole: String_comparison_exp
    membershipStatus: String_comparison_exp
    organization: vectric_organizations_bool_exp
    organizationCountryId: bigint_comparison_exp
    organizationCountryName: String_comparison_exp
    organizationId: Int_comparison_exp
    organizationName: String_comparison_exp
    organizationType: String_comparison_exp
}

"input type for inserting data into table \"vectric.organization_memberships_admin_access\""
input vectric_organization_memberships_admin_access_insert_input {
    addedBy: String
    amendedBy: String
    customerEmail: String
    customerId: bigint
    customerName: String
    customerRegisteredUsername: String
    dateAdded: timestamp
    dateAmended: timestamp
    invitations: vectric_membership_invitations_arr_rel_insert_input
    membershipId: Int
    membershipRole: String
    membershipStatus: String
    organization: vectric_organizations_obj_rel_insert_input
    organizationCountryId: bigint
    organizationCountryName: String
    organizationId: Int
    organizationName: String
    organizationType: String
}

"input type for inserting object relation for remote table \"vectric.organization_memberships_admin_access\""
input vectric_organization_memberships_admin_access_obj_rel_insert_input {
    data: vectric_organization_memberships_admin_access_insert_input!
}

"Ordering options when selecting data from \"vectric.organization_memberships_admin_access\"."
input vectric_organization_memberships_admin_access_order_by {
    addedBy: order_by
    amendedBy: order_by
    customerEmail: order_by
    customerId: order_by
    customerName: order_by
    customerRegisteredUsername: order_by
    dateAdded: order_by
    dateAmended: order_by
    invitations_aggregate: vectric_membership_invitations_aggregate_order_by
    membershipId: order_by
    membershipRole: order_by
    membershipStatus: order_by
    organization: vectric_organizations_order_by
    organizationCountryId: order_by
    organizationCountryName: order_by
    organizationId: order_by
    organizationName: order_by
    organizationType: order_by
}

"order by aggregate values of table \"vectric.organization_order_items\""
input vectric_organization_order_items_aggregate_order_by {
    avg: vectric_organization_order_items_avg_order_by
    count: order_by
    max: vectric_organization_order_items_max_order_by
    min: vectric_organization_order_items_min_order_by
    stddev: vectric_organization_order_items_stddev_order_by
    stddev_pop: vectric_organization_order_items_stddev_pop_order_by
    stddev_samp: vectric_organization_order_items_stddev_samp_order_by
    sum: vectric_organization_order_items_sum_order_by
    var_pop: vectric_organization_order_items_var_pop_order_by
    var_samp: vectric_organization_order_items_var_samp_order_by
    variance: vectric_organization_order_items_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.organization_order_items\""
input vectric_organization_order_items_arr_rel_insert_input {
    data: [vectric_organization_order_items_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_organization_order_items_on_conflict
}

"order by avg() on columns of table \"vectric.organization_order_items\""
input vectric_organization_order_items_avg_order_by {
    orderItemId: order_by
    saleableProductId: order_by
}

"Boolean expression to filter rows from the table \"vectric.organization_order_items\". All fields are combined with a logical 'AND'."
input vectric_organization_order_items_bool_exp {
    _and: [vectric_organization_order_items_bool_exp!]
    _not: vectric_organization_order_items_bool_exp
    _or: [vectric_organization_order_items_bool_exp!]
    order: vectric_organization_orders_bool_exp
    orderId: String_comparison_exp
    orderItemId: Int_comparison_exp
    ownedItems: vectric_owned_items_bool_exp
    saleableProduct: vectric_saleable_products_bool_exp
    saleableProductId: Int_comparison_exp
    subscription: Boolean_comparison_exp
    subscriptionContract: vectric_subscription_contracts_bool_exp
    subscriptionEvents: vectric_subscription_events_bool_exp
}

"input type for incrementing numeric columns in table \"vectric.organization_order_items\""
input vectric_organization_order_items_inc_input {
    orderItemId: Int
    saleableProductId: Int
}

"input type for inserting data into table \"vectric.organization_order_items\""
input vectric_organization_order_items_insert_input {
    order: vectric_organization_orders_obj_rel_insert_input
    orderId: String
    orderItemId: Int
    ownedItems: vectric_owned_items_arr_rel_insert_input
    saleableProduct: vectric_saleable_products_obj_rel_insert_input
    saleableProductId: Int
    subscription: Boolean
    subscriptionContract: vectric_subscription_contracts_obj_rel_insert_input
    subscriptionEvents: vectric_subscription_events_arr_rel_insert_input
}

"order by max() on columns of table \"vectric.organization_order_items\""
input vectric_organization_order_items_max_order_by {
    orderId: order_by
    orderItemId: order_by
    saleableProductId: order_by
}

"order by min() on columns of table \"vectric.organization_order_items\""
input vectric_organization_order_items_min_order_by {
    orderId: order_by
    orderItemId: order_by
    saleableProductId: order_by
}

"input type for inserting object relation for remote table \"vectric.organization_order_items\""
input vectric_organization_order_items_obj_rel_insert_input {
    data: vectric_organization_order_items_insert_input!
    "on conflict condition"
    on_conflict: vectric_organization_order_items_on_conflict
}

"on conflict condition type for table \"vectric.organization_order_items\""
input vectric_organization_order_items_on_conflict {
    constraint: vectric_organization_order_items_constraint!
    update_columns: [vectric_organization_order_items_update_column!]! = []
    where: vectric_organization_order_items_bool_exp
}

"Ordering options when selecting data from \"vectric.organization_order_items\"."
input vectric_organization_order_items_order_by {
    order: vectric_organization_orders_order_by
    orderId: order_by
    orderItemId: order_by
    ownedItems_aggregate: vectric_owned_items_aggregate_order_by
    saleableProduct: vectric_saleable_products_order_by
    saleableProductId: order_by
    subscription: order_by
    subscriptionContract: vectric_subscription_contracts_order_by
    subscriptionEvents_aggregate: vectric_subscription_events_aggregate_order_by
}

"primary key columns input for table: vectric_organization_order_items"
input vectric_organization_order_items_pk_columns_input {
    orderItemId: Int!
}

"input type for updating data in table \"vectric.organization_order_items\""
input vectric_organization_order_items_set_input {
    orderId: String
    orderItemId: Int
    saleableProductId: Int
    subscription: Boolean
}

"order by stddev() on columns of table \"vectric.organization_order_items\""
input vectric_organization_order_items_stddev_order_by {
    orderItemId: order_by
    saleableProductId: order_by
}

"order by stddev_pop() on columns of table \"vectric.organization_order_items\""
input vectric_organization_order_items_stddev_pop_order_by {
    orderItemId: order_by
    saleableProductId: order_by
}

"order by stddev_samp() on columns of table \"vectric.organization_order_items\""
input vectric_organization_order_items_stddev_samp_order_by {
    orderItemId: order_by
    saleableProductId: order_by
}

"order by sum() on columns of table \"vectric.organization_order_items\""
input vectric_organization_order_items_sum_order_by {
    orderItemId: order_by
    saleableProductId: order_by
}

"order by var_pop() on columns of table \"vectric.organization_order_items\""
input vectric_organization_order_items_var_pop_order_by {
    orderItemId: order_by
    saleableProductId: order_by
}

"order by var_samp() on columns of table \"vectric.organization_order_items\""
input vectric_organization_order_items_var_samp_order_by {
    orderItemId: order_by
    saleableProductId: order_by
}

"order by variance() on columns of table \"vectric.organization_order_items\""
input vectric_organization_order_items_variance_order_by {
    orderItemId: order_by
    saleableProductId: order_by
}

"Boolean expression to filter rows from the table \"vectric.organization_orders\". All fields are combined with a logical 'AND'."
input vectric_organization_orders_bool_exp {
    _and: [vectric_organization_orders_bool_exp!]
    _not: vectric_organization_orders_bool_exp
    _or: [vectric_organization_orders_bool_exp!]
    amendedBy: String_comparison_exp
    createdBy: String_comparison_exp
    dateAmended: timestamp_comparison_exp
    dateCreated: timestamp_comparison_exp
    externalReference: String_comparison_exp
    items: vectric_organization_order_items_bool_exp
    notes: String_comparison_exp
    orderDate: timestamp_comparison_exp
    orderId: String_comparison_exp
    organization: vectric_organizations_bool_exp
    organizationId: Int_comparison_exp
    purchaser: vectric_sales_customers_bool_exp
    purchaserId: Int_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.organization_orders\""
input vectric_organization_orders_inc_input {
    organizationId: Int
    purchaserId: Int
}

"input type for inserting data into table \"vectric.organization_orders\""
input vectric_organization_orders_insert_input {
    amendedBy: String
    createdBy: String
    dateAmended: timestamp
    dateCreated: timestamp
    externalReference: String
    items: vectric_organization_order_items_arr_rel_insert_input
    notes: String
    orderDate: timestamp
    orderId: String
    organization: vectric_organizations_obj_rel_insert_input
    organizationId: Int
    purchaser: vectric_sales_customers_obj_rel_insert_input
    purchaserId: Int
}

"input type for inserting object relation for remote table \"vectric.organization_orders\""
input vectric_organization_orders_obj_rel_insert_input {
    data: vectric_organization_orders_insert_input!
    "on conflict condition"
    on_conflict: vectric_organization_orders_on_conflict
}

"on conflict condition type for table \"vectric.organization_orders\""
input vectric_organization_orders_on_conflict {
    constraint: vectric_organization_orders_constraint!
    update_columns: [vectric_organization_orders_update_column!]! = []
    where: vectric_organization_orders_bool_exp
}

"Ordering options when selecting data from \"vectric.organization_orders\"."
input vectric_organization_orders_order_by {
    amendedBy: order_by
    createdBy: order_by
    dateAmended: order_by
    dateCreated: order_by
    externalReference: order_by
    items_aggregate: vectric_organization_order_items_aggregate_order_by
    notes: order_by
    orderDate: order_by
    orderId: order_by
    organization: vectric_organizations_order_by
    organizationId: order_by
    purchaser: vectric_sales_customers_order_by
    purchaserId: order_by
}

"primary key columns input for table: vectric_organization_orders"
input vectric_organization_orders_pk_columns_input {
    orderId: String!
}

"input type for updating data in table \"vectric.organization_orders\""
input vectric_organization_orders_set_input {
    amendedBy: String
    createdBy: String
    dateAmended: timestamp
    dateCreated: timestamp
    externalReference: String
    notes: String
    orderDate: timestamp
    orderId: String
    organizationId: Int
    purchaserId: Int
}

"Boolean expression to filter rows from the table \"vectric.organization_types\". All fields are combined with a logical 'AND'."
input vectric_organization_types_bool_exp {
    _and: [vectric_organization_types_bool_exp!]
    _not: vectric_organization_types_bool_exp
    _or: [vectric_organization_types_bool_exp!]
    type: String_comparison_exp
}

"Boolean expression to compare columns of type \"vectric_organization_types_enum\". All fields are combined with logical 'AND'."
input vectric_organization_types_enum_comparison_exp {
    _eq: vectric_organization_types_enum
    _in: [vectric_organization_types_enum!]
    _is_null: Boolean
    _neq: vectric_organization_types_enum
    _nin: [vectric_organization_types_enum!]
}

"input type for inserting data into table \"vectric.organization_types\""
input vectric_organization_types_insert_input {
    type: String
}

"input type for inserting object relation for remote table \"vectric.organization_types\""
input vectric_organization_types_obj_rel_insert_input {
    data: vectric_organization_types_insert_input!
    "on conflict condition"
    on_conflict: vectric_organization_types_on_conflict
}

"on conflict condition type for table \"vectric.organization_types\""
input vectric_organization_types_on_conflict {
    constraint: vectric_organization_types_constraint!
    update_columns: [vectric_organization_types_update_column!]! = []
    where: vectric_organization_types_bool_exp
}

"Ordering options when selecting data from \"vectric.organization_types\"."
input vectric_organization_types_order_by {
    type: order_by
}

"primary key columns input for table: vectric_organization_types"
input vectric_organization_types_pk_columns_input {
    type: String!
}

"input type for updating data in table \"vectric.organization_types\""
input vectric_organization_types_set_input {
    type: String
}

"Boolean expression to filter rows from the table \"vectric.organizations\". All fields are combined with a logical 'AND'."
input vectric_organizations_bool_exp {
    _and: [vectric_organizations_bool_exp!]
    _not: vectric_organizations_bool_exp
    _or: [vectric_organizations_bool_exp!]
    active: Boolean_comparison_exp
    activeMembers: vectric_active_memberships_bool_exp
    amendedBy: String_comparison_exp
    auditLogs: vectric_organization_audit_bool_exp
    country: vectric_countries_bool_exp
    countryId: bigint_comparison_exp
    createdBy: String_comparison_exp
    dateAmended: timestamp_comparison_exp
    dateCreated: timestamp_comparison_exp
    internalNotes: String_comparison_exp
    invitations: vectric_membership_invitations_bool_exp
    memberships: vectric_memberships_bool_exp
    organizationId: Int_comparison_exp
    organizationName: String_comparison_exp
    organizationType: vectric_organization_types_bool_exp
    organizationUUID: uuid_comparison_exp
    type: vectric_organization_types_enum_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.organizations\""
input vectric_organizations_inc_input {
    countryId: bigint
    organizationId: Int
}

"input type for inserting data into table \"vectric.organizations\""
input vectric_organizations_insert_input {
    active: Boolean
    activeMembers: vectric_active_memberships_arr_rel_insert_input
    amendedBy: String
    auditLogs: vectric_organization_audit_arr_rel_insert_input
    country: vectric_countries_obj_rel_insert_input
    countryId: bigint
    createdBy: String
    dateAmended: timestamp
    dateCreated: timestamp
    internalNotes: String
    invitations: vectric_membership_invitations_arr_rel_insert_input
    memberships: vectric_memberships_arr_rel_insert_input
    organizationId: Int
    organizationName: String
    organizationType: vectric_organization_types_obj_rel_insert_input
    organizationUUID: uuid
    type: vectric_organization_types_enum
}

"input type for inserting object relation for remote table \"vectric.organizations\""
input vectric_organizations_obj_rel_insert_input {
    data: vectric_organizations_insert_input!
    "on conflict condition"
    on_conflict: vectric_organizations_on_conflict
}

"on conflict condition type for table \"vectric.organizations\""
input vectric_organizations_on_conflict {
    constraint: vectric_organizations_constraint!
    update_columns: [vectric_organizations_update_column!]! = []
    where: vectric_organizations_bool_exp
}

"Ordering options when selecting data from \"vectric.organizations\"."
input vectric_organizations_order_by {
    active: order_by
    activeMembers_aggregate: vectric_active_memberships_aggregate_order_by
    amendedBy: order_by
    auditLogs_aggregate: vectric_organization_audit_aggregate_order_by
    country: vectric_countries_order_by
    countryId: order_by
    createdBy: order_by
    dateAmended: order_by
    dateCreated: order_by
    internalNotes: order_by
    invitations_aggregate: vectric_membership_invitations_aggregate_order_by
    memberships_aggregate: vectric_memberships_aggregate_order_by
    organizationId: order_by
    organizationName: order_by
    organizationType: vectric_organization_types_order_by
    organizationUUID: order_by
    type: order_by
}

"primary key columns input for table: vectric_organizations"
input vectric_organizations_pk_columns_input {
    organizationId: Int!
}

"input type for updating data in table \"vectric.organizations\""
input vectric_organizations_set_input {
    active: Boolean
    amendedBy: String
    countryId: bigint
    createdBy: String
    dateAmended: timestamp
    dateCreated: timestamp
    internalNotes: String
    organizationId: Int
    organizationName: String
    organizationUUID: uuid
    type: vectric_organization_types_enum
}

"Boolean expression to filter rows from the table \"vectric.owned_item_assignments\". All fields are combined with a logical 'AND'."
input vectric_owned_item_assignments_bool_exp {
    _and: [vectric_owned_item_assignments_bool_exp!]
    _not: vectric_owned_item_assignments_bool_exp
    _or: [vectric_owned_item_assignments_bool_exp!]
    assignedBy: String_comparison_exp
    assignedTo: bigint_comparison_exp
    assignedToMember: vectric_memberships_bool_exp
    assignedToMemberAdminAccess: vectric_organization_memberships_admin_access_bool_exp
    assignment_id: Int_comparison_exp
    dateAssigned: timestamp_comparison_exp
    ownedItemId: Int_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.owned_item_assignments\""
input vectric_owned_item_assignments_inc_input {
    assignedTo: bigint
    assignment_id: Int
    ownedItemId: Int
}

"input type for inserting data into table \"vectric.owned_item_assignments\""
input vectric_owned_item_assignments_insert_input {
    assignedBy: String
    assignedTo: bigint
    assignedToMember: vectric_memberships_obj_rel_insert_input
    assignedToMemberAdminAccess: vectric_organization_memberships_admin_access_obj_rel_insert_input
    assignment_id: Int
    dateAssigned: timestamp
    ownedItemId: Int
}

"input type for inserting object relation for remote table \"vectric.owned_item_assignments\""
input vectric_owned_item_assignments_obj_rel_insert_input {
    data: vectric_owned_item_assignments_insert_input!
    "on conflict condition"
    on_conflict: vectric_owned_item_assignments_on_conflict
}

"on conflict condition type for table \"vectric.owned_item_assignments\""
input vectric_owned_item_assignments_on_conflict {
    constraint: vectric_owned_item_assignments_constraint!
    update_columns: [vectric_owned_item_assignments_update_column!]! = []
    where: vectric_owned_item_assignments_bool_exp
}

"Ordering options when selecting data from \"vectric.owned_item_assignments\"."
input vectric_owned_item_assignments_order_by {
    assignedBy: order_by
    assignedTo: order_by
    assignedToMember: vectric_memberships_order_by
    assignedToMemberAdminAccess: vectric_organization_memberships_admin_access_order_by
    assignment_id: order_by
    dateAssigned: order_by
    ownedItemId: order_by
}

"primary key columns input for table: vectric_owned_item_assignments"
input vectric_owned_item_assignments_pk_columns_input {
    assignment_id: Int!
}

"input type for updating data in table \"vectric.owned_item_assignments\""
input vectric_owned_item_assignments_set_input {
    assignedBy: String
    assignedTo: bigint
    assignment_id: Int
    dateAssigned: timestamp
    ownedItemId: Int
}

"order by aggregate values of table \"vectric.owned_items\""
input vectric_owned_items_aggregate_order_by {
    avg: vectric_owned_items_avg_order_by
    count: order_by
    max: vectric_owned_items_max_order_by
    min: vectric_owned_items_min_order_by
    stddev: vectric_owned_items_stddev_order_by
    stddev_pop: vectric_owned_items_stddev_pop_order_by
    stddev_samp: vectric_owned_items_stddev_samp_order_by
    sum: vectric_owned_items_sum_order_by
    var_pop: vectric_owned_items_var_pop_order_by
    var_samp: vectric_owned_items_var_samp_order_by
    variance: vectric_owned_items_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.owned_items\""
input vectric_owned_items_arr_rel_insert_input {
    data: [vectric_owned_items_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_owned_items_on_conflict
}

"order by avg() on columns of table \"vectric.owned_items\""
input vectric_owned_items_avg_order_by {
    customerId: order_by
    orderItemId: order_by
    organizationId: order_by
    ownedItemId: order_by
    ownedProductId: order_by
    status: order_by
}

"Boolean expression to filter rows from the table \"vectric.owned_items\". All fields are combined with a logical 'AND'."
input vectric_owned_items_bool_exp {
    _and: [vectric_owned_items_bool_exp!]
    _not: vectric_owned_items_bool_exp
    _or: [vectric_owned_items_bool_exp!]
    amendedBy: String_comparison_exp
    assignment: vectric_owned_item_assignments_bool_exp
    createdBy: String_comparison_exp
    customer: vectric_sales_customers_bool_exp
    customerId: bigint_comparison_exp
    dateAmended: timestamp_comparison_exp
    dateCreated: timestamp_comparison_exp
    entitlements: vectric_entitlements_bool_exp
    licenceScope: vectric_organization_licence_scope_bool_exp
    notes: String_comparison_exp
    orderItem: vectric_organization_order_items_bool_exp
    orderItemId: Int_comparison_exp
    organization: vectric_organizations_bool_exp
    organizationId: Int_comparison_exp
    ownedItemId: Int_comparison_exp
    ownedProduct: vectric_owned_products_bool_exp
    ownedProductId: Int_comparison_exp
    record_date: timestamp_comparison_exp
    scope: vectric_organization_licence_scope_enum_comparison_exp
    status: Int_comparison_exp
    subscription: Boolean_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.owned_items\""
input vectric_owned_items_inc_input {
    customerId: bigint
    orderItemId: Int
    organizationId: Int
    ownedItemId: Int
    ownedProductId: Int
    status: Int
}

"input type for inserting data into table \"vectric.owned_items\""
input vectric_owned_items_insert_input {
    amendedBy: String
    assignment: vectric_owned_item_assignments_obj_rel_insert_input
    createdBy: String
    customer: vectric_sales_customers_obj_rel_insert_input
    customerId: bigint
    dateAmended: timestamp
    dateCreated: timestamp
    entitlements: vectric_entitlements_arr_rel_insert_input
    licenceScope: vectric_organization_licence_scope_obj_rel_insert_input
    notes: String
    orderItem: vectric_organization_order_items_obj_rel_insert_input
    orderItemId: Int
    organization: vectric_organizations_obj_rel_insert_input
    organizationId: Int
    ownedItemId: Int
    ownedProduct: vectric_owned_products_obj_rel_insert_input
    ownedProductId: Int
    record_date: timestamp
    scope: vectric_organization_licence_scope_enum
    status: Int
    subscription: Boolean
}

"order by max() on columns of table \"vectric.owned_items\""
input vectric_owned_items_max_order_by {
    amendedBy: order_by
    createdBy: order_by
    customerId: order_by
    dateAmended: order_by
    dateCreated: order_by
    notes: order_by
    orderItemId: order_by
    organizationId: order_by
    ownedItemId: order_by
    ownedProductId: order_by
    record_date: order_by
    status: order_by
}

"order by min() on columns of table \"vectric.owned_items\""
input vectric_owned_items_min_order_by {
    amendedBy: order_by
    createdBy: order_by
    customerId: order_by
    dateAmended: order_by
    dateCreated: order_by
    notes: order_by
    orderItemId: order_by
    organizationId: order_by
    ownedItemId: order_by
    ownedProductId: order_by
    record_date: order_by
    status: order_by
}

"input type for inserting object relation for remote table \"vectric.owned_items\""
input vectric_owned_items_obj_rel_insert_input {
    data: vectric_owned_items_insert_input!
    "on conflict condition"
    on_conflict: vectric_owned_items_on_conflict
}

"on conflict condition type for table \"vectric.owned_items\""
input vectric_owned_items_on_conflict {
    constraint: vectric_owned_items_constraint!
    update_columns: [vectric_owned_items_update_column!]! = []
    where: vectric_owned_items_bool_exp
}

"Ordering options when selecting data from \"vectric.owned_items\"."
input vectric_owned_items_order_by {
    amendedBy: order_by
    assignment: vectric_owned_item_assignments_order_by
    createdBy: order_by
    customer: vectric_sales_customers_order_by
    customerId: order_by
    dateAmended: order_by
    dateCreated: order_by
    entitlements_aggregate: vectric_entitlements_aggregate_order_by
    licenceScope: vectric_organization_licence_scope_order_by
    notes: order_by
    orderItem: vectric_organization_order_items_order_by
    orderItemId: order_by
    organization: vectric_organizations_order_by
    organizationId: order_by
    ownedItemId: order_by
    ownedProduct: vectric_owned_products_order_by
    ownedProductId: order_by
    record_date: order_by
    scope: order_by
    status: order_by
    subscription: order_by
}

"primary key columns input for table: vectric_owned_items"
input vectric_owned_items_pk_columns_input {
    ownedItemId: Int!
}

"input type for updating data in table \"vectric.owned_items\""
input vectric_owned_items_set_input {
    amendedBy: String
    createdBy: String
    customerId: bigint
    dateAmended: timestamp
    dateCreated: timestamp
    notes: String
    orderItemId: Int
    organizationId: Int
    ownedItemId: Int
    ownedProductId: Int
    record_date: timestamp
    scope: vectric_organization_licence_scope_enum
    status: Int
    subscription: Boolean
}

"order by stddev() on columns of table \"vectric.owned_items\""
input vectric_owned_items_stddev_order_by {
    customerId: order_by
    orderItemId: order_by
    organizationId: order_by
    ownedItemId: order_by
    ownedProductId: order_by
    status: order_by
}

"order by stddev_pop() on columns of table \"vectric.owned_items\""
input vectric_owned_items_stddev_pop_order_by {
    customerId: order_by
    orderItemId: order_by
    organizationId: order_by
    ownedItemId: order_by
    ownedProductId: order_by
    status: order_by
}

"order by stddev_samp() on columns of table \"vectric.owned_items\""
input vectric_owned_items_stddev_samp_order_by {
    customerId: order_by
    orderItemId: order_by
    organizationId: order_by
    ownedItemId: order_by
    ownedProductId: order_by
    status: order_by
}

"order by sum() on columns of table \"vectric.owned_items\""
input vectric_owned_items_sum_order_by {
    customerId: order_by
    orderItemId: order_by
    organizationId: order_by
    ownedItemId: order_by
    ownedProductId: order_by
    status: order_by
}

"order by var_pop() on columns of table \"vectric.owned_items\""
input vectric_owned_items_var_pop_order_by {
    customerId: order_by
    orderItemId: order_by
    organizationId: order_by
    ownedItemId: order_by
    ownedProductId: order_by
    status: order_by
}

"order by var_samp() on columns of table \"vectric.owned_items\""
input vectric_owned_items_var_samp_order_by {
    customerId: order_by
    orderItemId: order_by
    organizationId: order_by
    ownedItemId: order_by
    ownedProductId: order_by
    status: order_by
}

"order by variance() on columns of table \"vectric.owned_items\""
input vectric_owned_items_variance_order_by {
    customerId: order_by
    orderItemId: order_by
    organizationId: order_by
    ownedItemId: order_by
    ownedProductId: order_by
    status: order_by
}

"Boolean expression to filter rows from the table \"vectric.owned_products\". All fields are combined with a logical 'AND'."
input vectric_owned_products_bool_exp {
    _and: [vectric_owned_products_bool_exp!]
    _not: vectric_owned_products_bool_exp
    _or: [vectric_owned_products_bool_exp!]
    enabled: Boolean_comparison_exp
    enhancement: Boolean_comparison_exp
    productId: Int_comparison_exp
    productName: String_comparison_exp
    productType: vectric_products_producttype_bool_exp
    productTypeId: Int_comparison_exp
    subscription: Boolean_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.owned_products\""
input vectric_owned_products_inc_input {
    productId: Int
    productTypeId: Int
}

"input type for inserting data into table \"vectric.owned_products\""
input vectric_owned_products_insert_input {
    enabled: Boolean
    enhancement: Boolean
    productId: Int
    productName: String
    productType: vectric_products_producttype_obj_rel_insert_input
    productTypeId: Int
    subscription: Boolean
}

"input type for inserting object relation for remote table \"vectric.owned_products\""
input vectric_owned_products_obj_rel_insert_input {
    data: vectric_owned_products_insert_input!
    "on conflict condition"
    on_conflict: vectric_owned_products_on_conflict
}

"on conflict condition type for table \"vectric.owned_products\""
input vectric_owned_products_on_conflict {
    constraint: vectric_owned_products_constraint!
    update_columns: [vectric_owned_products_update_column!]! = []
    where: vectric_owned_products_bool_exp
}

"Ordering options when selecting data from \"vectric.owned_products\"."
input vectric_owned_products_order_by {
    enabled: order_by
    enhancement: order_by
    productId: order_by
    productName: order_by
    productType: vectric_products_producttype_order_by
    productTypeId: order_by
    subscription: order_by
}

"primary key columns input for table: vectric_owned_products"
input vectric_owned_products_pk_columns_input {
    productId: Int!
}

"input type for updating data in table \"vectric.owned_products\""
input vectric_owned_products_set_input {
    enabled: Boolean
    enhancement: Boolean
    productId: Int
    productName: String
    productTypeId: Int
    subscription: Boolean
}

"Boolean expression to filter rows from the table \"vectric.products_clipartcollection_links\". All fields are combined with a logical 'AND'."
input vectric_products_clipartcollection_links_bool_exp {
    _and: [vectric_products_clipartcollection_links_bool_exp!]
    _not: vectric_products_clipartcollection_links_bool_exp
    _or: [vectric_products_clipartcollection_links_bool_exp!]
    clipartChildId: bigint_comparison_exp
    clipartCollectionLinkId: bigint_comparison_exp
    clipartParentId: bigint_comparison_exp
    collection: vectric_products_products_bool_exp
    project: vectric_products_products_bool_exp
}

"input type for incrementing numeric columns in table \"vectric.products_clipartcollection_links\""
input vectric_products_clipartcollection_links_inc_input {
    clipartChildId: bigint
    clipartCollectionLinkId: bigint
    clipartParentId: bigint
}

"input type for inserting data into table \"vectric.products_clipartcollection_links\""
input vectric_products_clipartcollection_links_insert_input {
    clipartChildId: bigint
    clipartCollectionLinkId: bigint
    clipartParentId: bigint
    collection: vectric_products_products_obj_rel_insert_input
    project: vectric_products_products_obj_rel_insert_input
}

"on conflict condition type for table \"vectric.products_clipartcollection_links\""
input vectric_products_clipartcollection_links_on_conflict {
    constraint: vectric_products_clipartcollection_links_constraint!
    update_columns: [vectric_products_clipartcollection_links_update_column!]! = []
    where: vectric_products_clipartcollection_links_bool_exp
}

"Ordering options when selecting data from \"vectric.products_clipartcollection_links\"."
input vectric_products_clipartcollection_links_order_by {
    clipartChildId: order_by
    clipartCollectionLinkId: order_by
    clipartParentId: order_by
    collection: vectric_products_products_order_by
    project: vectric_products_products_order_by
}

"primary key columns input for table: vectric_products_clipartcollection_links"
input vectric_products_clipartcollection_links_pk_columns_input {
    clipartCollectionLinkId: bigint!
}

"input type for updating data in table \"vectric.products_clipartcollection_links\""
input vectric_products_clipartcollection_links_set_input {
    clipartChildId: bigint
    clipartCollectionLinkId: bigint
    clipartParentId: bigint
}

"order by aggregate values of table \"vectric.products_enhancement_eligibility\""
input vectric_products_enhancement_eligibility_aggregate_order_by {
    avg: vectric_products_enhancement_eligibility_avg_order_by
    count: order_by
    max: vectric_products_enhancement_eligibility_max_order_by
    min: vectric_products_enhancement_eligibility_min_order_by
    stddev: vectric_products_enhancement_eligibility_stddev_order_by
    stddev_pop: vectric_products_enhancement_eligibility_stddev_pop_order_by
    stddev_samp: vectric_products_enhancement_eligibility_stddev_samp_order_by
    sum: vectric_products_enhancement_eligibility_sum_order_by
    var_pop: vectric_products_enhancement_eligibility_var_pop_order_by
    var_samp: vectric_products_enhancement_eligibility_var_samp_order_by
    variance: vectric_products_enhancement_eligibility_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.products_enhancement_eligibility\""
input vectric_products_enhancement_eligibility_arr_rel_insert_input {
    data: [vectric_products_enhancement_eligibility_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_products_enhancement_eligibility_on_conflict
}

"order by avg() on columns of table \"vectric.products_enhancement_eligibility\""
input vectric_products_enhancement_eligibility_avg_order_by {
    eligibilityId: order_by
    fromproduct: order_by
    price: order_by
    toproduct: order_by
}

"Boolean expression to filter rows from the table \"vectric.products_enhancement_eligibility\". All fields are combined with a logical 'AND'."
input vectric_products_enhancement_eligibility_bool_exp {
    _and: [vectric_products_enhancement_eligibility_bool_exp!]
    _not: vectric_products_enhancement_eligibility_bool_exp
    _or: [vectric_products_enhancement_eligibility_bool_exp!]
    eligibilityId: bigint_comparison_exp
    fastspringurl: String_comparison_exp
    fromProduct: vectric_products_products_bool_exp
    fromproduct: bigint_comparison_exp
    moreinfolink: String_comparison_exp
    price: numeric_comparison_exp
    summary: String_comparison_exp
    toProduct: vectric_products_products_bool_exp
    toproduct: bigint_comparison_exp
    visibletocustomers: Boolean_comparison_exp
    visibletostaff: Boolean_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.products_enhancement_eligibility\""
input vectric_products_enhancement_eligibility_inc_input {
    eligibilityId: bigint
    fromproduct: bigint
    price: numeric
    toproduct: bigint
}

"input type for inserting data into table \"vectric.products_enhancement_eligibility\""
input vectric_products_enhancement_eligibility_insert_input {
    eligibilityId: bigint
    fastspringurl: String
    fromProduct: vectric_products_products_obj_rel_insert_input
    fromproduct: bigint
    moreinfolink: String
    price: numeric
    summary: String
    toProduct: vectric_products_products_obj_rel_insert_input
    toproduct: bigint
    visibletocustomers: Boolean
    visibletostaff: Boolean
}

"order by max() on columns of table \"vectric.products_enhancement_eligibility\""
input vectric_products_enhancement_eligibility_max_order_by {
    eligibilityId: order_by
    fastspringurl: order_by
    fromproduct: order_by
    moreinfolink: order_by
    price: order_by
    summary: order_by
    toproduct: order_by
}

"order by min() on columns of table \"vectric.products_enhancement_eligibility\""
input vectric_products_enhancement_eligibility_min_order_by {
    eligibilityId: order_by
    fastspringurl: order_by
    fromproduct: order_by
    moreinfolink: order_by
    price: order_by
    summary: order_by
    toproduct: order_by
}

"on conflict condition type for table \"vectric.products_enhancement_eligibility\""
input vectric_products_enhancement_eligibility_on_conflict {
    constraint: vectric_products_enhancement_eligibility_constraint!
    update_columns: [vectric_products_enhancement_eligibility_update_column!]! = []
    where: vectric_products_enhancement_eligibility_bool_exp
}

"Ordering options when selecting data from \"vectric.products_enhancement_eligibility\"."
input vectric_products_enhancement_eligibility_order_by {
    eligibilityId: order_by
    fastspringurl: order_by
    fromProduct: vectric_products_products_order_by
    fromproduct: order_by
    moreinfolink: order_by
    price: order_by
    summary: order_by
    toProduct: vectric_products_products_order_by
    toproduct: order_by
    visibletocustomers: order_by
    visibletostaff: order_by
}

"primary key columns input for table: vectric_products_enhancement_eligibility"
input vectric_products_enhancement_eligibility_pk_columns_input {
    eligibilityId: bigint!
}

"input type for updating data in table \"vectric.products_enhancement_eligibility\""
input vectric_products_enhancement_eligibility_set_input {
    eligibilityId: bigint
    fastspringurl: String
    fromproduct: bigint
    moreinfolink: String
    price: numeric
    summary: String
    toproduct: bigint
    visibletocustomers: Boolean
    visibletostaff: Boolean
}

"order by stddev() on columns of table \"vectric.products_enhancement_eligibility\""
input vectric_products_enhancement_eligibility_stddev_order_by {
    eligibilityId: order_by
    fromproduct: order_by
    price: order_by
    toproduct: order_by
}

"order by stddev_pop() on columns of table \"vectric.products_enhancement_eligibility\""
input vectric_products_enhancement_eligibility_stddev_pop_order_by {
    eligibilityId: order_by
    fromproduct: order_by
    price: order_by
    toproduct: order_by
}

"order by stddev_samp() on columns of table \"vectric.products_enhancement_eligibility\""
input vectric_products_enhancement_eligibility_stddev_samp_order_by {
    eligibilityId: order_by
    fromproduct: order_by
    price: order_by
    toproduct: order_by
}

"order by sum() on columns of table \"vectric.products_enhancement_eligibility\""
input vectric_products_enhancement_eligibility_sum_order_by {
    eligibilityId: order_by
    fromproduct: order_by
    price: order_by
    toproduct: order_by
}

"order by var_pop() on columns of table \"vectric.products_enhancement_eligibility\""
input vectric_products_enhancement_eligibility_var_pop_order_by {
    eligibilityId: order_by
    fromproduct: order_by
    price: order_by
    toproduct: order_by
}

"order by var_samp() on columns of table \"vectric.products_enhancement_eligibility\""
input vectric_products_enhancement_eligibility_var_samp_order_by {
    eligibilityId: order_by
    fromproduct: order_by
    price: order_by
    toproduct: order_by
}

"order by variance() on columns of table \"vectric.products_enhancement_eligibility\""
input vectric_products_enhancement_eligibility_variance_order_by {
    eligibilityId: order_by
    fromproduct: order_by
    price: order_by
    toproduct: order_by
}

"Boolean expression to filter rows from the table \"vectric.products_freeclipart\". All fields are combined with a logical 'AND'."
input vectric_products_freeclipart_bool_exp {
    _and: [vectric_products_freeclipart_bool_exp!]
    _not: vectric_products_freeclipart_bool_exp
    _or: [vectric_products_freeclipart_bool_exp!]
    freeClipart: vectric_freeclipart_bool_exp
    freeClipartId: bigint_comparison_exp
    product: vectric_products_products_bool_exp
    productFreeClipartId: bigint_comparison_exp
    productId: bigint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.products_freeclipart\""
input vectric_products_freeclipart_inc_input {
    freeClipartId: bigint
    productFreeClipartId: bigint
    productId: bigint
}

"input type for inserting data into table \"vectric.products_freeclipart\""
input vectric_products_freeclipart_insert_input {
    freeClipart: vectric_freeclipart_obj_rel_insert_input
    freeClipartId: bigint
    product: vectric_products_products_obj_rel_insert_input
    productFreeClipartId: bigint
    productId: bigint
}

"on conflict condition type for table \"vectric.products_freeclipart\""
input vectric_products_freeclipart_on_conflict {
    constraint: vectric_products_freeclipart_constraint!
    update_columns: [vectric_products_freeclipart_update_column!]! = []
    where: vectric_products_freeclipart_bool_exp
}

"Ordering options when selecting data from \"vectric.products_freeclipart\"."
input vectric_products_freeclipart_order_by {
    freeClipart: vectric_freeclipart_order_by
    freeClipartId: order_by
    product: vectric_products_products_order_by
    productFreeClipartId: order_by
    productId: order_by
}

"primary key columns input for table: vectric_products_freeclipart"
input vectric_products_freeclipart_pk_columns_input {
    productFreeClipartId: bigint!
}

"input type for updating data in table \"vectric.products_freeclipart\""
input vectric_products_freeclipart_set_input {
    freeClipartId: bigint
    productFreeClipartId: bigint
    productId: bigint
}

"Boolean expression to filter rows from the table \"vectric.products_fulfilments\". All fields are combined with a logical 'AND'."
input vectric_products_fulfilments_bool_exp {
    _and: [vectric_products_fulfilments_bool_exp!]
    _not: vectric_products_fulfilments_bool_exp
    _or: [vectric_products_fulfilments_bool_exp!]
    description: String_comparison_exp
    downloadSize: String_comparison_exp
    fulfilmentId: bigint_comparison_exp
    fulfilmentName: String_comparison_exp
    fulfilmenttypeid: bigint_comparison_exp
    location: String_comparison_exp
    objectName: String_comparison_exp
    type: vectric_products_fulfilmenttypes_bool_exp
}

"input type for incrementing numeric columns in table \"vectric.products_fulfilments\""
input vectric_products_fulfilments_inc_input {
    fulfilmentId: bigint
    fulfilmenttypeid: bigint
}

"input type for inserting data into table \"vectric.products_fulfilments\""
input vectric_products_fulfilments_insert_input {
    description: String
    downloadSize: String
    fulfilmentId: bigint
    fulfilmentName: String
    fulfilmenttypeid: bigint
    location: String
    objectName: String
    type: vectric_products_fulfilmenttypes_obj_rel_insert_input
}

"input type for inserting object relation for remote table \"vectric.products_fulfilments\""
input vectric_products_fulfilments_obj_rel_insert_input {
    data: vectric_products_fulfilments_insert_input!
    "on conflict condition"
    on_conflict: vectric_products_fulfilments_on_conflict
}

"on conflict condition type for table \"vectric.products_fulfilments\""
input vectric_products_fulfilments_on_conflict {
    constraint: vectric_products_fulfilments_constraint!
    update_columns: [vectric_products_fulfilments_update_column!]! = []
    where: vectric_products_fulfilments_bool_exp
}

"Ordering options when selecting data from \"vectric.products_fulfilments\"."
input vectric_products_fulfilments_order_by {
    description: order_by
    downloadSize: order_by
    fulfilmentId: order_by
    fulfilmentName: order_by
    fulfilmenttypeid: order_by
    location: order_by
    objectName: order_by
    type: vectric_products_fulfilmenttypes_order_by
}

"primary key columns input for table: vectric_products_fulfilments"
input vectric_products_fulfilments_pk_columns_input {
    fulfilmentId: bigint!
}

"input type for updating data in table \"vectric.products_fulfilments\""
input vectric_products_fulfilments_set_input {
    description: String
    downloadSize: String
    fulfilmentId: bigint
    fulfilmentName: String
    fulfilmenttypeid: bigint
    location: String
    objectName: String
}

"Boolean expression to filter rows from the table \"vectric.products_fulfilmenttypes\". All fields are combined with a logical 'AND'."
input vectric_products_fulfilmenttypes_bool_exp {
    _and: [vectric_products_fulfilmenttypes_bool_exp!]
    _not: vectric_products_fulfilmenttypes_bool_exp
    _or: [vectric_products_fulfilmenttypes_bool_exp!]
    fulfilmenttypeid: bigint_comparison_exp
    typename: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.products_fulfilmenttypes\""
input vectric_products_fulfilmenttypes_inc_input {
    fulfilmenttypeid: bigint
}

"input type for inserting data into table \"vectric.products_fulfilmenttypes\""
input vectric_products_fulfilmenttypes_insert_input {
    fulfilmenttypeid: bigint
    typename: String
}

"input type for inserting object relation for remote table \"vectric.products_fulfilmenttypes\""
input vectric_products_fulfilmenttypes_obj_rel_insert_input {
    data: vectric_products_fulfilmenttypes_insert_input!
    "on conflict condition"
    on_conflict: vectric_products_fulfilmenttypes_on_conflict
}

"on conflict condition type for table \"vectric.products_fulfilmenttypes\""
input vectric_products_fulfilmenttypes_on_conflict {
    constraint: vectric_products_fulfilmenttypes_constraint!
    update_columns: [vectric_products_fulfilmenttypes_update_column!]! = []
    where: vectric_products_fulfilmenttypes_bool_exp
}

"Ordering options when selecting data from \"vectric.products_fulfilmenttypes\"."
input vectric_products_fulfilmenttypes_order_by {
    fulfilmenttypeid: order_by
    typename: order_by
}

"primary key columns input for table: vectric_products_fulfilmenttypes"
input vectric_products_fulfilmenttypes_pk_columns_input {
    fulfilmenttypeid: bigint!
}

"input type for updating data in table \"vectric.products_fulfilmenttypes\""
input vectric_products_fulfilmenttypes_set_input {
    fulfilmenttypeid: bigint
    typename: String
}

"order by aggregate values of table \"vectric.products_product_fulfilments\""
input vectric_products_product_fulfilments_aggregate_order_by {
    avg: vectric_products_product_fulfilments_avg_order_by
    count: order_by
    max: vectric_products_product_fulfilments_max_order_by
    min: vectric_products_product_fulfilments_min_order_by
    stddev: vectric_products_product_fulfilments_stddev_order_by
    stddev_pop: vectric_products_product_fulfilments_stddev_pop_order_by
    stddev_samp: vectric_products_product_fulfilments_stddev_samp_order_by
    sum: vectric_products_product_fulfilments_sum_order_by
    var_pop: vectric_products_product_fulfilments_var_pop_order_by
    var_samp: vectric_products_product_fulfilments_var_samp_order_by
    variance: vectric_products_product_fulfilments_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.products_product_fulfilments\""
input vectric_products_product_fulfilments_arr_rel_insert_input {
    data: [vectric_products_product_fulfilments_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_products_product_fulfilments_on_conflict
}

"order by avg() on columns of table \"vectric.products_product_fulfilments\""
input vectric_products_product_fulfilments_avg_order_by {
    fulfilmentid: order_by
    productfulfilmentid: order_by
    productid: order_by
}

"Boolean expression to filter rows from the table \"vectric.products_product_fulfilments\". All fields are combined with a logical 'AND'."
input vectric_products_product_fulfilments_bool_exp {
    _and: [vectric_products_product_fulfilments_bool_exp!]
    _not: vectric_products_product_fulfilments_bool_exp
    _or: [vectric_products_product_fulfilments_bool_exp!]
    fulfilment: vectric_products_fulfilments_bool_exp
    fulfilmentid: bigint_comparison_exp
    product: vectric_products_products_bool_exp
    productfulfilmentid: bigint_comparison_exp
    productid: bigint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.products_product_fulfilments\""
input vectric_products_product_fulfilments_inc_input {
    fulfilmentid: bigint
    productfulfilmentid: bigint
    productid: bigint
}

"input type for inserting data into table \"vectric.products_product_fulfilments\""
input vectric_products_product_fulfilments_insert_input {
    fulfilment: vectric_products_fulfilments_obj_rel_insert_input
    fulfilmentid: bigint
    product: vectric_products_products_obj_rel_insert_input
    productfulfilmentid: bigint
    productid: bigint
}

"order by max() on columns of table \"vectric.products_product_fulfilments\""
input vectric_products_product_fulfilments_max_order_by {
    fulfilmentid: order_by
    productfulfilmentid: order_by
    productid: order_by
}

"order by min() on columns of table \"vectric.products_product_fulfilments\""
input vectric_products_product_fulfilments_min_order_by {
    fulfilmentid: order_by
    productfulfilmentid: order_by
    productid: order_by
}

"on conflict condition type for table \"vectric.products_product_fulfilments\""
input vectric_products_product_fulfilments_on_conflict {
    constraint: vectric_products_product_fulfilments_constraint!
    update_columns: [vectric_products_product_fulfilments_update_column!]! = []
    where: vectric_products_product_fulfilments_bool_exp
}

"Ordering options when selecting data from \"vectric.products_product_fulfilments\"."
input vectric_products_product_fulfilments_order_by {
    fulfilment: vectric_products_fulfilments_order_by
    fulfilmentid: order_by
    product: vectric_products_products_order_by
    productfulfilmentid: order_by
    productid: order_by
}

"primary key columns input for table: vectric_products_product_fulfilments"
input vectric_products_product_fulfilments_pk_columns_input {
    productfulfilmentid: bigint!
}

"input type for updating data in table \"vectric.products_product_fulfilments\""
input vectric_products_product_fulfilments_set_input {
    fulfilmentid: bigint
    productfulfilmentid: bigint
    productid: bigint
}

"order by stddev() on columns of table \"vectric.products_product_fulfilments\""
input vectric_products_product_fulfilments_stddev_order_by {
    fulfilmentid: order_by
    productfulfilmentid: order_by
    productid: order_by
}

"order by stddev_pop() on columns of table \"vectric.products_product_fulfilments\""
input vectric_products_product_fulfilments_stddev_pop_order_by {
    fulfilmentid: order_by
    productfulfilmentid: order_by
    productid: order_by
}

"order by stddev_samp() on columns of table \"vectric.products_product_fulfilments\""
input vectric_products_product_fulfilments_stddev_samp_order_by {
    fulfilmentid: order_by
    productfulfilmentid: order_by
    productid: order_by
}

"order by sum() on columns of table \"vectric.products_product_fulfilments\""
input vectric_products_product_fulfilments_sum_order_by {
    fulfilmentid: order_by
    productfulfilmentid: order_by
    productid: order_by
}

"order by var_pop() on columns of table \"vectric.products_product_fulfilments\""
input vectric_products_product_fulfilments_var_pop_order_by {
    fulfilmentid: order_by
    productfulfilmentid: order_by
    productid: order_by
}

"order by var_samp() on columns of table \"vectric.products_product_fulfilments\""
input vectric_products_product_fulfilments_var_samp_order_by {
    fulfilmentid: order_by
    productfulfilmentid: order_by
    productid: order_by
}

"order by variance() on columns of table \"vectric.products_product_fulfilments\""
input vectric_products_product_fulfilments_variance_order_by {
    fulfilmentid: order_by
    productfulfilmentid: order_by
    productid: order_by
}

"Boolean expression to filter rows from the table \"vectric.products_product_licence_type\". All fields are combined with a logical 'AND'."
input vectric_products_product_licence_type_bool_exp {
    _and: [vectric_products_product_licence_type_bool_exp!]
    _not: vectric_products_product_licence_type_bool_exp
    _or: [vectric_products_product_licence_type_bool_exp!]
    type: String_comparison_exp
}

"Boolean expression to compare columns of type \"vectric_products_product_licence_type_enum\". All fields are combined with logical 'AND'."
input vectric_products_product_licence_type_enum_comparison_exp {
    _eq: vectric_products_product_licence_type_enum
    _in: [vectric_products_product_licence_type_enum!]
    _is_null: Boolean
    _neq: vectric_products_product_licence_type_enum
    _nin: [vectric_products_product_licence_type_enum!]
}

"input type for inserting data into table \"vectric.products_product_licence_type\""
input vectric_products_product_licence_type_insert_input {
    type: String
}

"on conflict condition type for table \"vectric.products_product_licence_type\""
input vectric_products_product_licence_type_on_conflict {
    constraint: vectric_products_product_licence_type_constraint!
    update_columns: [vectric_products_product_licence_type_update_column!]! = []
    where: vectric_products_product_licence_type_bool_exp
}

"Ordering options when selecting data from \"vectric.products_product_licence_type\"."
input vectric_products_product_licence_type_order_by {
    type: order_by
}

"primary key columns input for table: vectric_products_product_licence_type"
input vectric_products_product_licence_type_pk_columns_input {
    type: String!
}

"input type for updating data in table \"vectric.products_product_licence_type\""
input vectric_products_product_licence_type_set_input {
    type: String
}

"order by aggregate values of table \"vectric.products_products\""
input vectric_products_products_aggregate_order_by {
    avg: vectric_products_products_avg_order_by
    count: order_by
    max: vectric_products_products_max_order_by
    min: vectric_products_products_min_order_by
    stddev: vectric_products_products_stddev_order_by
    stddev_pop: vectric_products_products_stddev_pop_order_by
    stddev_samp: vectric_products_products_stddev_samp_order_by
    sum: vectric_products_products_sum_order_by
    var_pop: vectric_products_products_var_pop_order_by
    var_samp: vectric_products_products_var_samp_order_by
    variance: vectric_products_products_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.products_products\""
input vectric_products_products_arr_rel_insert_input {
    data: [vectric_products_products_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_products_products_on_conflict
}

"order by avg() on columns of table \"vectric.products_products\""
input vectric_products_products_avg_order_by {
    externalid: order_by
    latestversion: order_by
    productID: order_by
    type: order_by
    upgradefromtypeid: order_by
}

"Boolean expression to filter rows from the table \"vectric.products_products\". All fields are combined with a logical 'AND'."
input vectric_products_products_bool_exp {
    _and: [vectric_products_products_bool_exp!]
    _not: vectric_products_products_bool_exp
    _or: [vectric_products_products_bool_exp!]
    enabled: Boolean_comparison_exp
    externalid: bigint_comparison_exp
    fastspringId: String_comparison_exp
    free: Boolean_comparison_exp
    latestVersion: vectric_products_versioncodes_bool_exp
    latestversion: bigint_comparison_exp
    licenceType: vectric_products_product_licence_type_enum_comparison_exp
    media: Boolean_comparison_exp
    potentialEnhancements: vectric_products_enhancement_eligibility_bool_exp
    potentialUpgrades: vectric_active_upgrades_bool_exp
    productID: bigint_comparison_exp
    productName: String_comparison_exp
    productType: vectric_products_producttype_bool_exp
    product_fulfilments: vectric_products_product_fulfilments_bool_exp
    receivesClipart: Boolean_comparison_exp
    releaseDate: date_comparison_exp
    requireslicence: Boolean_comparison_exp
    type: bigint_comparison_exp
    upgradefromtypeid: bigint_comparison_exp
    versions: vectric_products_versioncodes_bool_exp
}

"input type for incrementing numeric columns in table \"vectric.products_products\""
input vectric_products_products_inc_input {
    externalid: bigint
    latestversion: bigint
    productID: bigint
    type: bigint
    upgradefromtypeid: bigint
}

"input type for inserting data into table \"vectric.products_products\""
input vectric_products_products_insert_input {
    enabled: Boolean
    externalid: bigint
    fastspringId: String
    free: Boolean
    latestVersion: vectric_products_versioncodes_obj_rel_insert_input
    latestversion: bigint
    licenceType: vectric_products_product_licence_type_enum
    media: Boolean
    potentialEnhancements: vectric_products_enhancement_eligibility_arr_rel_insert_input
    potentialUpgrades: vectric_active_upgrades_arr_rel_insert_input
    productID: bigint
    productName: String
    productType: vectric_products_producttype_obj_rel_insert_input
    product_fulfilments: vectric_products_product_fulfilments_arr_rel_insert_input
    receivesClipart: Boolean
    releaseDate: date
    requireslicence: Boolean
    type: bigint
    upgradefromtypeid: bigint
    versions: vectric_products_versioncodes_arr_rel_insert_input
}

"order by max() on columns of table \"vectric.products_products\""
input vectric_products_products_max_order_by {
    externalid: order_by
    fastspringId: order_by
    latestversion: order_by
    productID: order_by
    productName: order_by
    releaseDate: order_by
    type: order_by
    upgradefromtypeid: order_by
}

"order by min() on columns of table \"vectric.products_products\""
input vectric_products_products_min_order_by {
    externalid: order_by
    fastspringId: order_by
    latestversion: order_by
    productID: order_by
    productName: order_by
    releaseDate: order_by
    type: order_by
    upgradefromtypeid: order_by
}

"input type for inserting object relation for remote table \"vectric.products_products\""
input vectric_products_products_obj_rel_insert_input {
    data: vectric_products_products_insert_input!
    "on conflict condition"
    on_conflict: vectric_products_products_on_conflict
}

"on conflict condition type for table \"vectric.products_products\""
input vectric_products_products_on_conflict {
    constraint: vectric_products_products_constraint!
    update_columns: [vectric_products_products_update_column!]! = []
    where: vectric_products_products_bool_exp
}

"Ordering options when selecting data from \"vectric.products_products\"."
input vectric_products_products_order_by {
    enabled: order_by
    externalid: order_by
    fastspringId: order_by
    free: order_by
    latestVersion: vectric_products_versioncodes_order_by
    latestversion: order_by
    licenceType: order_by
    media: order_by
    potentialEnhancements_aggregate: vectric_products_enhancement_eligibility_aggregate_order_by
    potentialUpgrades_aggregate: vectric_active_upgrades_aggregate_order_by
    productID: order_by
    productName: order_by
    productType: vectric_products_producttype_order_by
    product_fulfilments_aggregate: vectric_products_product_fulfilments_aggregate_order_by
    receivesClipart: order_by
    releaseDate: order_by
    requireslicence: order_by
    type: order_by
    upgradefromtypeid: order_by
    versions_aggregate: vectric_products_versioncodes_aggregate_order_by
}

"primary key columns input for table: vectric_products_products"
input vectric_products_products_pk_columns_input {
    productID: bigint!
}

"input type for updating data in table \"vectric.products_products\""
input vectric_products_products_set_input {
    enabled: Boolean
    externalid: bigint
    fastspringId: String
    free: Boolean
    latestversion: bigint
    licenceType: vectric_products_product_licence_type_enum
    media: Boolean
    productID: bigint
    productName: String
    receivesClipart: Boolean
    releaseDate: date
    requireslicence: Boolean
    type: bigint
    upgradefromtypeid: bigint
}

"order by stddev() on columns of table \"vectric.products_products\""
input vectric_products_products_stddev_order_by {
    externalid: order_by
    latestversion: order_by
    productID: order_by
    type: order_by
    upgradefromtypeid: order_by
}

"order by stddev_pop() on columns of table \"vectric.products_products\""
input vectric_products_products_stddev_pop_order_by {
    externalid: order_by
    latestversion: order_by
    productID: order_by
    type: order_by
    upgradefromtypeid: order_by
}

"order by stddev_samp() on columns of table \"vectric.products_products\""
input vectric_products_products_stddev_samp_order_by {
    externalid: order_by
    latestversion: order_by
    productID: order_by
    type: order_by
    upgradefromtypeid: order_by
}

"order by sum() on columns of table \"vectric.products_products\""
input vectric_products_products_sum_order_by {
    externalid: order_by
    latestversion: order_by
    productID: order_by
    type: order_by
    upgradefromtypeid: order_by
}

"order by var_pop() on columns of table \"vectric.products_products\""
input vectric_products_products_var_pop_order_by {
    externalid: order_by
    latestversion: order_by
    productID: order_by
    type: order_by
    upgradefromtypeid: order_by
}

"order by var_samp() on columns of table \"vectric.products_products\""
input vectric_products_products_var_samp_order_by {
    externalid: order_by
    latestversion: order_by
    productID: order_by
    type: order_by
    upgradefromtypeid: order_by
}

"order by variance() on columns of table \"vectric.products_products\""
input vectric_products_products_variance_order_by {
    externalid: order_by
    latestversion: order_by
    productID: order_by
    type: order_by
    upgradefromtypeid: order_by
}

"Boolean expression to filter rows from the table \"vectric.products_producttype\". All fields are combined with a logical 'AND'."
input vectric_products_producttype_bool_exp {
    _and: [vectric_products_producttype_bool_exp!]
    _not: vectric_products_producttype_bool_exp
    _or: [vectric_products_producttype_bool_exp!]
    productTypeId: bigint_comparison_exp
    productTypeName: String_comparison_exp
    products: vectric_products_products_bool_exp
    seq: Int_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.products_producttype\""
input vectric_products_producttype_inc_input {
    productTypeId: bigint
    seq: Int
}

"input type for inserting data into table \"vectric.products_producttype\""
input vectric_products_producttype_insert_input {
    productTypeId: bigint
    productTypeName: String
    products: vectric_products_products_arr_rel_insert_input
    seq: Int
}

"input type for inserting object relation for remote table \"vectric.products_producttype\""
input vectric_products_producttype_obj_rel_insert_input {
    data: vectric_products_producttype_insert_input!
    "on conflict condition"
    on_conflict: vectric_products_producttype_on_conflict
}

"on conflict condition type for table \"vectric.products_producttype\""
input vectric_products_producttype_on_conflict {
    constraint: vectric_products_producttype_constraint!
    update_columns: [vectric_products_producttype_update_column!]! = []
    where: vectric_products_producttype_bool_exp
}

"Ordering options when selecting data from \"vectric.products_producttype\"."
input vectric_products_producttype_order_by {
    productTypeId: order_by
    productTypeName: order_by
    products_aggregate: vectric_products_products_aggregate_order_by
    seq: order_by
}

"primary key columns input for table: vectric_products_producttype"
input vectric_products_producttype_pk_columns_input {
    productTypeId: bigint!
}

"input type for updating data in table \"vectric.products_producttype\""
input vectric_products_producttype_set_input {
    productTypeId: bigint
    productTypeName: String
    seq: Int
}

"Boolean expression to filter rows from the table \"vectric.products_upgrade_eligibility\". All fields are combined with a logical 'AND'."
input vectric_products_upgrade_eligibility_bool_exp {
    _and: [vectric_products_upgrade_eligibility_bool_exp!]
    _not: vectric_products_upgrade_eligibility_bool_exp
    _or: [vectric_products_upgrade_eligibility_bool_exp!]
    eligibilityid: bigint_comparison_exp
    fastspringproductid: String_comparison_exp
    fastspringurl: String_comparison_exp
    fromtype: bigint_comparison_exp
    maxmajorversion: bigint_comparison_exp
    minmajorversion: bigint_comparison_exp
    price: numeric_comparison_exp
    productsUpgradeFromType: vectric_products_producttype_bool_exp
    productsUpgradeToProduct: vectric_products_products_bool_exp
    summary: String_comparison_exp
    toproduct: bigint_comparison_exp
    updatelink: String_comparison_exp
    visibletocustomers: Boolean_comparison_exp
    visibletostaff: Boolean_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.products_upgrade_eligibility\""
input vectric_products_upgrade_eligibility_inc_input {
    eligibilityid: bigint
    fromtype: bigint
    maxmajorversion: bigint
    minmajorversion: bigint
    price: numeric
    toproduct: bigint
}

"input type for inserting data into table \"vectric.products_upgrade_eligibility\""
input vectric_products_upgrade_eligibility_insert_input {
    eligibilityid: bigint
    fastspringproductid: String
    fastspringurl: String
    fromtype: bigint
    maxmajorversion: bigint
    minmajorversion: bigint
    price: numeric
    productsUpgradeFromType: vectric_products_producttype_obj_rel_insert_input
    productsUpgradeToProduct: vectric_products_products_obj_rel_insert_input
    summary: String
    toproduct: bigint
    updatelink: String
    visibletocustomers: Boolean
    visibletostaff: Boolean
}

"input type for inserting object relation for remote table \"vectric.products_upgrade_eligibility\""
input vectric_products_upgrade_eligibility_obj_rel_insert_input {
    data: vectric_products_upgrade_eligibility_insert_input!
    "on conflict condition"
    on_conflict: vectric_products_upgrade_eligibility_on_conflict
}

"on conflict condition type for table \"vectric.products_upgrade_eligibility\""
input vectric_products_upgrade_eligibility_on_conflict {
    constraint: vectric_products_upgrade_eligibility_constraint!
    update_columns: [vectric_products_upgrade_eligibility_update_column!]! = []
    where: vectric_products_upgrade_eligibility_bool_exp
}

"Ordering options when selecting data from \"vectric.products_upgrade_eligibility\"."
input vectric_products_upgrade_eligibility_order_by {
    eligibilityid: order_by
    fastspringproductid: order_by
    fastspringurl: order_by
    fromtype: order_by
    maxmajorversion: order_by
    minmajorversion: order_by
    price: order_by
    productsUpgradeFromType: vectric_products_producttype_order_by
    productsUpgradeToProduct: vectric_products_products_order_by
    summary: order_by
    toproduct: order_by
    updatelink: order_by
    visibletocustomers: order_by
    visibletostaff: order_by
}

"primary key columns input for table: vectric_products_upgrade_eligibility"
input vectric_products_upgrade_eligibility_pk_columns_input {
    eligibilityid: bigint!
}

"input type for updating data in table \"vectric.products_upgrade_eligibility\""
input vectric_products_upgrade_eligibility_set_input {
    eligibilityid: bigint
    fastspringproductid: String
    fastspringurl: String
    fromtype: bigint
    maxmajorversion: bigint
    minmajorversion: bigint
    price: numeric
    summary: String
    toproduct: bigint
    updatelink: String
    visibletocustomers: Boolean
    visibletostaff: Boolean
}

"order by aggregate values of table \"vectric.products_versioncodes\""
input vectric_products_versioncodes_aggregate_order_by {
    avg: vectric_products_versioncodes_avg_order_by
    count: order_by
    max: vectric_products_versioncodes_max_order_by
    min: vectric_products_versioncodes_min_order_by
    stddev: vectric_products_versioncodes_stddev_order_by
    stddev_pop: vectric_products_versioncodes_stddev_pop_order_by
    stddev_samp: vectric_products_versioncodes_stddev_samp_order_by
    sum: vectric_products_versioncodes_sum_order_by
    var_pop: vectric_products_versioncodes_var_pop_order_by
    var_samp: vectric_products_versioncodes_var_samp_order_by
    variance: vectric_products_versioncodes_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.products_versioncodes\""
input vectric_products_versioncodes_arr_rel_insert_input {
    data: [vectric_products_versioncodes_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_products_versioncodes_on_conflict
}

"order by avg() on columns of table \"vectric.products_versioncodes\""
input vectric_products_versioncodes_avg_order_by {
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    productid: order_by
    versioncodeid: order_by
}

"Boolean expression to filter rows from the table \"vectric.products_versioncodes\". All fields are combined with a logical 'AND'."
input vectric_products_versioncodes_bool_exp {
    _and: [vectric_products_versioncodes_bool_exp!]
    _not: vectric_products_versioncodes_bool_exp
    _or: [vectric_products_versioncodes_bool_exp!]
    displayVersion: String_comparison_exp
    latest: Boolean_comparison_exp
    majorVersion: bigint_comparison_exp
    minorVersionOOX: bigint_comparison_exp
    minorVersionOXO: bigint_comparison_exp
    minorVersionXOO: bigint_comparison_exp
    notifying: Boolean_comparison_exp
    patchurl: String_comparison_exp
    product: vectric_products_products_bool_exp
    productid: bigint_comparison_exp
    releaseDate: date_comparison_exp
    url: String_comparison_exp
    versioncodeid: bigint_comparison_exp
    visible: Boolean_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.products_versioncodes\""
input vectric_products_versioncodes_inc_input {
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    productid: bigint
    versioncodeid: bigint
}

"input type for inserting data into table \"vectric.products_versioncodes\""
input vectric_products_versioncodes_insert_input {
    displayVersion: String
    latest: Boolean
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    notifying: Boolean
    patchurl: String
    product: vectric_products_products_obj_rel_insert_input
    productid: bigint
    releaseDate: date
    url: String
    versioncodeid: bigint
    visible: Boolean
}

"order by max() on columns of table \"vectric.products_versioncodes\""
input vectric_products_versioncodes_max_order_by {
    displayVersion: order_by
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    patchurl: order_by
    productid: order_by
    releaseDate: order_by
    url: order_by
    versioncodeid: order_by
}

"order by min() on columns of table \"vectric.products_versioncodes\""
input vectric_products_versioncodes_min_order_by {
    displayVersion: order_by
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    patchurl: order_by
    productid: order_by
    releaseDate: order_by
    url: order_by
    versioncodeid: order_by
}

"input type for inserting object relation for remote table \"vectric.products_versioncodes\""
input vectric_products_versioncodes_obj_rel_insert_input {
    data: vectric_products_versioncodes_insert_input!
    "on conflict condition"
    on_conflict: vectric_products_versioncodes_on_conflict
}

"on conflict condition type for table \"vectric.products_versioncodes\""
input vectric_products_versioncodes_on_conflict {
    constraint: vectric_products_versioncodes_constraint!
    update_columns: [vectric_products_versioncodes_update_column!]! = []
    where: vectric_products_versioncodes_bool_exp
}

"Ordering options when selecting data from \"vectric.products_versioncodes\"."
input vectric_products_versioncodes_order_by {
    displayVersion: order_by
    latest: order_by
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    notifying: order_by
    patchurl: order_by
    product: vectric_products_products_order_by
    productid: order_by
    releaseDate: order_by
    url: order_by
    versioncodeid: order_by
    visible: order_by
}

"primary key columns input for table: vectric_products_versioncodes"
input vectric_products_versioncodes_pk_columns_input {
    versioncodeid: bigint!
}

"input type for updating data in table \"vectric.products_versioncodes\""
input vectric_products_versioncodes_set_input {
    displayVersion: String
    latest: Boolean
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    notifying: Boolean
    patchurl: String
    productid: bigint
    releaseDate: date
    url: String
    versioncodeid: bigint
    visible: Boolean
}

"order by stddev() on columns of table \"vectric.products_versioncodes\""
input vectric_products_versioncodes_stddev_order_by {
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    productid: order_by
    versioncodeid: order_by
}

"order by stddev_pop() on columns of table \"vectric.products_versioncodes\""
input vectric_products_versioncodes_stddev_pop_order_by {
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    productid: order_by
    versioncodeid: order_by
}

"order by stddev_samp() on columns of table \"vectric.products_versioncodes\""
input vectric_products_versioncodes_stddev_samp_order_by {
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    productid: order_by
    versioncodeid: order_by
}

"order by sum() on columns of table \"vectric.products_versioncodes\""
input vectric_products_versioncodes_sum_order_by {
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    productid: order_by
    versioncodeid: order_by
}

"order by var_pop() on columns of table \"vectric.products_versioncodes\""
input vectric_products_versioncodes_var_pop_order_by {
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    productid: order_by
    versioncodeid: order_by
}

"order by var_samp() on columns of table \"vectric.products_versioncodes\""
input vectric_products_versioncodes_var_samp_order_by {
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    productid: order_by
    versioncodeid: order_by
}

"order by variance() on columns of table \"vectric.products_versioncodes\""
input vectric_products_versioncodes_variance_order_by {
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    productid: order_by
    versioncodeid: order_by
}

"Boolean expression to filter rows from the table \"vectric.questions\". All fields are combined with a logical 'AND'."
input vectric_questions_bool_exp {
    _and: [vectric_questions_bool_exp!]
    _not: vectric_questions_bool_exp
    _or: [vectric_questions_bool_exp!]
    customer_responses: vectric_customer_responses_bool_exp
    multipleanswers: Boolean_comparison_exp
    questionid: bigint_comparison_exp
    questiontext: String_comparison_exp
    responses: vectric_responses_bool_exp
}

"input type for incrementing numeric columns in table \"vectric.questions\""
input vectric_questions_inc_input {
    questionid: bigint
}

"input type for inserting data into table \"vectric.questions\""
input vectric_questions_insert_input {
    customer_responses: vectric_customer_responses_arr_rel_insert_input
    multipleanswers: Boolean
    questionid: bigint
    questiontext: String
    responses: vectric_responses_arr_rel_insert_input
}

"input type for inserting object relation for remote table \"vectric.questions\""
input vectric_questions_obj_rel_insert_input {
    data: vectric_questions_insert_input!
    "on conflict condition"
    on_conflict: vectric_questions_on_conflict
}

"on conflict condition type for table \"vectric.questions\""
input vectric_questions_on_conflict {
    constraint: vectric_questions_constraint!
    update_columns: [vectric_questions_update_column!]! = []
    where: vectric_questions_bool_exp
}

"Ordering options when selecting data from \"vectric.questions\"."
input vectric_questions_order_by {
    customer_responses_aggregate: vectric_customer_responses_aggregate_order_by
    multipleanswers: order_by
    questionid: order_by
    questiontext: order_by
    responses_aggregate: vectric_responses_aggregate_order_by
}

"primary key columns input for table: vectric_questions"
input vectric_questions_pk_columns_input {
    questionid: bigint!
}

"input type for updating data in table \"vectric.questions\""
input vectric_questions_set_input {
    multipleanswers: Boolean
    questionid: bigint
    questiontext: String
}

"order by aggregate values of table \"vectric.responses\""
input vectric_responses_aggregate_order_by {
    avg: vectric_responses_avg_order_by
    count: order_by
    max: vectric_responses_max_order_by
    min: vectric_responses_min_order_by
    stddev: vectric_responses_stddev_order_by
    stddev_pop: vectric_responses_stddev_pop_order_by
    stddev_samp: vectric_responses_stddev_samp_order_by
    sum: vectric_responses_sum_order_by
    var_pop: vectric_responses_var_pop_order_by
    var_samp: vectric_responses_var_samp_order_by
    variance: vectric_responses_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.responses\""
input vectric_responses_arr_rel_insert_input {
    data: [vectric_responses_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_responses_on_conflict
}

"order by avg() on columns of table \"vectric.responses\""
input vectric_responses_avg_order_by {
    questionid: order_by
    responseid: order_by
}

"Boolean expression to filter rows from the table \"vectric.responses\". All fields are combined with a logical 'AND'."
input vectric_responses_bool_exp {
    _and: [vectric_responses_bool_exp!]
    _not: vectric_responses_bool_exp
    _or: [vectric_responses_bool_exp!]
    questionid: bigint_comparison_exp
    responseid: bigint_comparison_exp
    responsetext: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.responses\""
input vectric_responses_inc_input {
    questionid: bigint
    responseid: bigint
}

"input type for inserting data into table \"vectric.responses\""
input vectric_responses_insert_input {
    questionid: bigint
    responseid: bigint
    responsetext: String
}

"order by max() on columns of table \"vectric.responses\""
input vectric_responses_max_order_by {
    questionid: order_by
    responseid: order_by
    responsetext: order_by
}

"order by min() on columns of table \"vectric.responses\""
input vectric_responses_min_order_by {
    questionid: order_by
    responseid: order_by
    responsetext: order_by
}

"input type for inserting object relation for remote table \"vectric.responses\""
input vectric_responses_obj_rel_insert_input {
    data: vectric_responses_insert_input!
    "on conflict condition"
    on_conflict: vectric_responses_on_conflict
}

"on conflict condition type for table \"vectric.responses\""
input vectric_responses_on_conflict {
    constraint: vectric_responses_constraint!
    update_columns: [vectric_responses_update_column!]! = []
    where: vectric_responses_bool_exp
}

"Ordering options when selecting data from \"vectric.responses\"."
input vectric_responses_order_by {
    questionid: order_by
    responseid: order_by
    responsetext: order_by
}

"primary key columns input for table: vectric_responses"
input vectric_responses_pk_columns_input {
    responseid: bigint!
}

"input type for updating data in table \"vectric.responses\""
input vectric_responses_set_input {
    questionid: bigint
    responseid: bigint
    responsetext: String
}

"order by stddev() on columns of table \"vectric.responses\""
input vectric_responses_stddev_order_by {
    questionid: order_by
    responseid: order_by
}

"order by stddev_pop() on columns of table \"vectric.responses\""
input vectric_responses_stddev_pop_order_by {
    questionid: order_by
    responseid: order_by
}

"order by stddev_samp() on columns of table \"vectric.responses\""
input vectric_responses_stddev_samp_order_by {
    questionid: order_by
    responseid: order_by
}

"order by sum() on columns of table \"vectric.responses\""
input vectric_responses_sum_order_by {
    questionid: order_by
    responseid: order_by
}

"order by var_pop() on columns of table \"vectric.responses\""
input vectric_responses_var_pop_order_by {
    questionid: order_by
    responseid: order_by
}

"order by var_samp() on columns of table \"vectric.responses\""
input vectric_responses_var_samp_order_by {
    questionid: order_by
    responseid: order_by
}

"order by variance() on columns of table \"vectric.responses\""
input vectric_responses_variance_order_by {
    questionid: order_by
    responseid: order_by
}

"Boolean expression to filter rows from the table \"vectric.saleable_products\". All fields are combined with a logical 'AND'."
input vectric_saleable_products_bool_exp {
    _and: [vectric_saleable_products_bool_exp!]
    _not: vectric_saleable_products_bool_exp
    _or: [vectric_saleable_products_bool_exp!]
    enabled: Boolean_comparison_exp
    fastspringId: String_comparison_exp
    free: Boolean_comparison_exp
    media: Boolean_comparison_exp
    productId: Int_comparison_exp
    productName: String_comparison_exp
    productTypeId: Int_comparison_exp
    receivesClipart: Boolean_comparison_exp
    subscription: Boolean_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.saleable_products\""
input vectric_saleable_products_inc_input {
    productId: Int
    productTypeId: Int
}

"input type for inserting data into table \"vectric.saleable_products\""
input vectric_saleable_products_insert_input {
    enabled: Boolean
    fastspringId: String
    free: Boolean
    media: Boolean
    productId: Int
    productName: String
    productTypeId: Int
    receivesClipart: Boolean
    subscription: Boolean
}

"input type for inserting object relation for remote table \"vectric.saleable_products\""
input vectric_saleable_products_obj_rel_insert_input {
    data: vectric_saleable_products_insert_input!
    "on conflict condition"
    on_conflict: vectric_saleable_products_on_conflict
}

"on conflict condition type for table \"vectric.saleable_products\""
input vectric_saleable_products_on_conflict {
    constraint: vectric_saleable_products_constraint!
    update_columns: [vectric_saleable_products_update_column!]! = []
    where: vectric_saleable_products_bool_exp
}

"Ordering options when selecting data from \"vectric.saleable_products\"."
input vectric_saleable_products_order_by {
    enabled: order_by
    fastspringId: order_by
    free: order_by
    media: order_by
    productId: order_by
    productName: order_by
    productTypeId: order_by
    receivesClipart: order_by
    subscription: order_by
}

"primary key columns input for table: vectric_saleable_products"
input vectric_saleable_products_pk_columns_input {
    productId: Int!
}

"input type for updating data in table \"vectric.saleable_products\""
input vectric_saleable_products_set_input {
    enabled: Boolean
    fastspringId: String
    free: Boolean
    media: Boolean
    productId: Int
    productName: String
    productTypeId: Int
    receivesClipart: Boolean
    subscription: Boolean
}

"Boolean expression to filter rows from the table \"vectric.sales_customer_downloads\". All fields are combined with a logical 'AND'."
input vectric_sales_customer_downloads_bool_exp {
    _and: [vectric_sales_customer_downloads_bool_exp!]
    _not: vectric_sales_customer_downloads_bool_exp
    _or: [vectric_sales_customer_downloads_bool_exp!]
    customerId: bigint_comparison_exp
    downloadDate: timestamptz_comparison_exp
    downloadId: bigint_comparison_exp
    fulfilmentId: bigint_comparison_exp
    ipAddress: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.sales_customer_downloads\""
input vectric_sales_customer_downloads_inc_input {
    customerId: bigint
    downloadId: bigint
    fulfilmentId: bigint
}

"input type for inserting data into table \"vectric.sales_customer_downloads\""
input vectric_sales_customer_downloads_insert_input {
    customerId: bigint
    downloadDate: timestamptz
    downloadId: bigint
    fulfilmentId: bigint
    ipAddress: String
}

"on conflict condition type for table \"vectric.sales_customer_downloads\""
input vectric_sales_customer_downloads_on_conflict {
    constraint: vectric_sales_customer_downloads_constraint!
    update_columns: [vectric_sales_customer_downloads_update_column!]! = []
    where: vectric_sales_customer_downloads_bool_exp
}

"Ordering options when selecting data from \"vectric.sales_customer_downloads\"."
input vectric_sales_customer_downloads_order_by {
    customerId: order_by
    downloadDate: order_by
    downloadId: order_by
    fulfilmentId: order_by
    ipAddress: order_by
}

"primary key columns input for table: vectric_sales_customer_downloads"
input vectric_sales_customer_downloads_pk_columns_input {
    downloadId: bigint!
}

"input type for updating data in table \"vectric.sales_customer_downloads\""
input vectric_sales_customer_downloads_set_input {
    customerId: bigint
    downloadDate: timestamptz
    downloadId: bigint
    fulfilmentId: bigint
    ipAddress: String
}

"Boolean expression to filter rows from the table \"vectric.sales_customers\". All fields are combined with a logical 'AND'."
input vectric_sales_customers_bool_exp {
    _and: [vectric_sales_customers_bool_exp!]
    _not: vectric_sales_customers_bool_exp
    _or: [vectric_sales_customers_bool_exp!]
    acceptedTerms: Boolean_comparison_exp
    amendedby: String_comparison_exp
    companyName: String_comparison_exp
    country: vectric_countries_bool_exp
    countrycode: bigint_comparison_exp
    createdby: String_comparison_exp
    customerAddressLine: String_comparison_exp
    customerId: bigint_comparison_exp
    customerName: String_comparison_exp
    customerSales: vectric_customer_sales_bool_exp
    customerTelephone: String_comparison_exp
    customerType: String_comparison_exp
    customerstatusid: bigint_comparison_exp
    customeruuid: uuid_comparison_exp
    dateAcceptedTerms: timestamptz_comparison_exp
    dateCreated: timestamptz_comparison_exp
    dateMarketingConsentUpdated: timestamptz_comparison_exp
    dateUpgradeEmailConsentUpdates: timestamptz_comparison_exp
    dateamended: timestamptz_comparison_exp
    email: String_comparison_exp
    freeClipartTokens: vectric_free_clipart_tokens_bool_exp
    language: String_comparison_exp
    lastLogin: timestamptz_comparison_exp
    lastipaddress: String_comparison_exp
    location: String_comparison_exp
    memberships: vectric_group_user_role_bool_exp
    mergedfromcustomerid: bigint_comparison_exp
    mergedtocustomerid: bigint_comparison_exp
    notes: String_comparison_exp
    orders: vectric_sales_orders_bool_exp
    organizationMemberships: vectric_memberships_bool_exp
    partnerMemberships: vectric_oem_staff_customer_bool_exp
    receivingMarketingEmails: Boolean_comparison_exp
    receivingUpgradeEmails: Boolean_comparison_exp
    registeredUsername: String_comparison_exp
    user: vectric_security_users_bool_exp
    verified: Boolean_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.sales_customers\""
input vectric_sales_customers_inc_input {
    countrycode: bigint
    customerId: bigint
    customerstatusid: bigint
    mergedfromcustomerid: bigint
    mergedtocustomerid: bigint
}

"input type for inserting data into table \"vectric.sales_customers\""
input vectric_sales_customers_insert_input {
    acceptedTerms: Boolean
    amendedby: String
    companyName: String
    country: vectric_countries_obj_rel_insert_input
    countrycode: bigint
    createdby: String
    customerAddressLine: String
    customerId: bigint
    customerName: String
    customerSales: vectric_customer_sales_arr_rel_insert_input
    customerTelephone: String
    customerType: String
    customerstatusid: bigint
    customeruuid: uuid
    dateAcceptedTerms: timestamptz
    dateCreated: timestamptz
    dateMarketingConsentUpdated: timestamptz
    dateUpgradeEmailConsentUpdates: timestamptz
    dateamended: timestamptz
    email: String
    freeClipartTokens: vectric_free_clipart_tokens_arr_rel_insert_input
    language: String
    lastLogin: timestamptz
    lastipaddress: String
    location: String
    memberships: vectric_group_user_role_arr_rel_insert_input
    mergedfromcustomerid: bigint
    mergedtocustomerid: bigint
    notes: String
    orders: vectric_sales_orders_arr_rel_insert_input
    organizationMemberships: vectric_memberships_arr_rel_insert_input
    partnerMemberships: vectric_oem_staff_customer_arr_rel_insert_input
    receivingMarketingEmails: Boolean
    receivingUpgradeEmails: Boolean
    registeredUsername: String
    user: vectric_security_users_obj_rel_insert_input
    verified: Boolean
}

"input type for inserting object relation for remote table \"vectric.sales_customers\""
input vectric_sales_customers_obj_rel_insert_input {
    data: vectric_sales_customers_insert_input!
    "on conflict condition"
    on_conflict: vectric_sales_customers_on_conflict
}

"on conflict condition type for table \"vectric.sales_customers\""
input vectric_sales_customers_on_conflict {
    constraint: vectric_sales_customers_constraint!
    update_columns: [vectric_sales_customers_update_column!]! = []
    where: vectric_sales_customers_bool_exp
}

"Ordering options when selecting data from \"vectric.sales_customers\"."
input vectric_sales_customers_order_by {
    acceptedTerms: order_by
    amendedby: order_by
    companyName: order_by
    country: vectric_countries_order_by
    countrycode: order_by
    createdby: order_by
    customerAddressLine: order_by
    customerId: order_by
    customerName: order_by
    customerSales_aggregate: vectric_customer_sales_aggregate_order_by
    customerTelephone: order_by
    customerType: order_by
    customerstatusid: order_by
    customeruuid: order_by
    dateAcceptedTerms: order_by
    dateCreated: order_by
    dateMarketingConsentUpdated: order_by
    dateUpgradeEmailConsentUpdates: order_by
    dateamended: order_by
    email: order_by
    freeClipartTokens_aggregate: vectric_free_clipart_tokens_aggregate_order_by
    language: order_by
    lastLogin: order_by
    lastipaddress: order_by
    location: order_by
    memberships_aggregate: vectric_group_user_role_aggregate_order_by
    mergedfromcustomerid: order_by
    mergedtocustomerid: order_by
    notes: order_by
    orders_aggregate: vectric_sales_orders_aggregate_order_by
    organizationMemberships_aggregate: vectric_memberships_aggregate_order_by
    partnerMemberships_aggregate: vectric_oem_staff_customer_aggregate_order_by
    receivingMarketingEmails: order_by
    receivingUpgradeEmails: order_by
    registeredUsername: order_by
    user: vectric_security_users_order_by
    verified: order_by
}

"primary key columns input for table: vectric_sales_customers"
input vectric_sales_customers_pk_columns_input {
    customerId: bigint!
}

"input type for updating data in table \"vectric.sales_customers\""
input vectric_sales_customers_set_input {
    acceptedTerms: Boolean
    amendedby: String
    companyName: String
    countrycode: bigint
    createdby: String
    customerAddressLine: String
    customerId: bigint
    customerName: String
    customerTelephone: String
    customerType: String
    customerstatusid: bigint
    customeruuid: uuid
    dateAcceptedTerms: timestamptz
    dateCreated: timestamptz
    dateMarketingConsentUpdated: timestamptz
    dateUpgradeEmailConsentUpdates: timestamptz
    dateamended: timestamptz
    email: String
    language: String
    lastLogin: timestamptz
    lastipaddress: String
    location: String
    mergedfromcustomerid: bigint
    mergedtocustomerid: bigint
    notes: String
    receivingMarketingEmails: Boolean
    receivingUpgradeEmails: Boolean
    registeredUsername: String
    verified: Boolean
}

"Boolean expression to filter rows from the table \"vectric.sales_customerupdates\". All fields are combined with a logical 'AND'."
input vectric_sales_customerupdates_bool_exp {
    _and: [vectric_sales_customerupdates_bool_exp!]
    _not: vectric_sales_customerupdates_bool_exp
    _or: [vectric_sales_customerupdates_bool_exp!]
    changedBy: String_comparison_exp
    customerId: bigint_comparison_exp
    customerUpdateId: bigint_comparison_exp
    dateChanged: timestamptz_comparison_exp
    fieldName: String_comparison_exp
    newValue: String_comparison_exp
    oldValue: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.sales_customerupdates\""
input vectric_sales_customerupdates_inc_input {
    customerId: bigint
    customerUpdateId: bigint
}

"input type for inserting data into table \"vectric.sales_customerupdates\""
input vectric_sales_customerupdates_insert_input {
    changedBy: String
    customerId: bigint
    customerUpdateId: bigint
    dateChanged: timestamptz
    fieldName: String
    newValue: String
    oldValue: String
}

"on conflict condition type for table \"vectric.sales_customerupdates\""
input vectric_sales_customerupdates_on_conflict {
    constraint: vectric_sales_customerupdates_constraint!
    update_columns: [vectric_sales_customerupdates_update_column!]! = []
    where: vectric_sales_customerupdates_bool_exp
}

"Ordering options when selecting data from \"vectric.sales_customerupdates\"."
input vectric_sales_customerupdates_order_by {
    changedBy: order_by
    customerId: order_by
    customerUpdateId: order_by
    dateChanged: order_by
    fieldName: order_by
    newValue: order_by
    oldValue: order_by
}

"primary key columns input for table: vectric_sales_customerupdates"
input vectric_sales_customerupdates_pk_columns_input {
    customerUpdateId: bigint!
}

"input type for updating data in table \"vectric.sales_customerupdates\""
input vectric_sales_customerupdates_set_input {
    changedBy: String
    customerId: bigint
    customerUpdateId: bigint
    dateChanged: timestamptz
    fieldName: String
    newValue: String
    oldValue: String
}

"order by aggregate values of table \"vectric.sales_oem_bundles\""
input vectric_sales_oem_bundles_aggregate_order_by {
    avg: vectric_sales_oem_bundles_avg_order_by
    count: order_by
    max: vectric_sales_oem_bundles_max_order_by
    min: vectric_sales_oem_bundles_min_order_by
    stddev: vectric_sales_oem_bundles_stddev_order_by
    stddev_pop: vectric_sales_oem_bundles_stddev_pop_order_by
    stddev_samp: vectric_sales_oem_bundles_stddev_samp_order_by
    sum: vectric_sales_oem_bundles_sum_order_by
    var_pop: vectric_sales_oem_bundles_var_pop_order_by
    var_samp: vectric_sales_oem_bundles_var_samp_order_by
    variance: vectric_sales_oem_bundles_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.sales_oem_bundles\""
input vectric_sales_oem_bundles_arr_rel_insert_input {
    data: [vectric_sales_oem_bundles_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_sales_oem_bundles_on_conflict
}

"order by avg() on columns of table \"vectric.sales_oem_bundles\""
input vectric_sales_oem_bundles_avg_order_by {
    allocationTypeId: order_by
    partnerId: order_by
    product: order_by
}

"Boolean expression to filter rows from the table \"vectric.sales_oem_bundles\". All fields are combined with a logical 'AND'."
input vectric_sales_oem_bundles_bool_exp {
    _and: [vectric_sales_oem_bundles_bool_exp!]
    _not: vectric_sales_oem_bundles_bool_exp
    _or: [vectric_sales_oem_bundles_bool_exp!]
    allocatedBy: String_comparison_exp
    allocationBatch: String_comparison_exp
    allocationType: vectric_oem_licence_allocation_type_bool_exp
    allocationTypeId: bigint_comparison_exp
    bundleId: String_comparison_exp
    dateAllocated: timestamptz_comparison_exp
    dateCreated: timestamptz_comparison_exp
    licences: vectric_sales_oemlicences_bool_exp
    notes: String_comparison_exp
    partner: vectric_oem_partners_bool_exp
    partnerId: bigint_comparison_exp
    product: bigint_comparison_exp
    productDisplayName: String_comparison_exp
    registrationDate: timestamptz_comparison_exp
    typeDisplayName: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.sales_oem_bundles\""
input vectric_sales_oem_bundles_inc_input {
    allocationTypeId: bigint
    partnerId: bigint
    product: bigint
}

"input type for inserting data into table \"vectric.sales_oem_bundles\""
input vectric_sales_oem_bundles_insert_input {
    allocatedBy: String
    allocationBatch: String
    allocationType: vectric_oem_licence_allocation_type_obj_rel_insert_input
    allocationTypeId: bigint
    bundleId: String
    dateAllocated: timestamptz
    dateCreated: timestamptz
    licences: vectric_sales_oemlicences_arr_rel_insert_input
    notes: String
    partner: vectric_oem_partners_obj_rel_insert_input
    partnerId: bigint
    product: bigint
    productDisplayName: String
    registrationDate: timestamptz
    typeDisplayName: String
}

"order by max() on columns of table \"vectric.sales_oem_bundles\""
input vectric_sales_oem_bundles_max_order_by {
    allocatedBy: order_by
    allocationBatch: order_by
    allocationTypeId: order_by
    bundleId: order_by
    dateAllocated: order_by
    dateCreated: order_by
    notes: order_by
    partnerId: order_by
    product: order_by
    productDisplayName: order_by
    registrationDate: order_by
    typeDisplayName: order_by
}

"order by min() on columns of table \"vectric.sales_oem_bundles\""
input vectric_sales_oem_bundles_min_order_by {
    allocatedBy: order_by
    allocationBatch: order_by
    allocationTypeId: order_by
    bundleId: order_by
    dateAllocated: order_by
    dateCreated: order_by
    notes: order_by
    partnerId: order_by
    product: order_by
    productDisplayName: order_by
    registrationDate: order_by
    typeDisplayName: order_by
}

"input type for inserting object relation for remote table \"vectric.sales_oem_bundles\""
input vectric_sales_oem_bundles_obj_rel_insert_input {
    data: vectric_sales_oem_bundles_insert_input!
    "on conflict condition"
    on_conflict: vectric_sales_oem_bundles_on_conflict
}

"on conflict condition type for table \"vectric.sales_oem_bundles\""
input vectric_sales_oem_bundles_on_conflict {
    constraint: vectric_sales_oem_bundles_constraint!
    update_columns: [vectric_sales_oem_bundles_update_column!]! = []
    where: vectric_sales_oem_bundles_bool_exp
}

"Ordering options when selecting data from \"vectric.sales_oem_bundles\"."
input vectric_sales_oem_bundles_order_by {
    allocatedBy: order_by
    allocationBatch: order_by
    allocationType: vectric_oem_licence_allocation_type_order_by
    allocationTypeId: order_by
    bundleId: order_by
    dateAllocated: order_by
    dateCreated: order_by
    licences_aggregate: vectric_sales_oemlicences_aggregate_order_by
    notes: order_by
    partner: vectric_oem_partners_order_by
    partnerId: order_by
    product: order_by
    productDisplayName: order_by
    registrationDate: order_by
    typeDisplayName: order_by
}

"primary key columns input for table: vectric_sales_oem_bundles"
input vectric_sales_oem_bundles_pk_columns_input {
    bundleId: String!
}

"input type for updating data in table \"vectric.sales_oem_bundles\""
input vectric_sales_oem_bundles_set_input {
    allocatedBy: String
    allocationBatch: String
    allocationTypeId: bigint
    bundleId: String
    dateAllocated: timestamptz
    dateCreated: timestamptz
    notes: String
    partnerId: bigint
    product: bigint
    productDisplayName: String
    registrationDate: timestamptz
    typeDisplayName: String
}

"order by stddev() on columns of table \"vectric.sales_oem_bundles\""
input vectric_sales_oem_bundles_stddev_order_by {
    allocationTypeId: order_by
    partnerId: order_by
    product: order_by
}

"order by stddev_pop() on columns of table \"vectric.sales_oem_bundles\""
input vectric_sales_oem_bundles_stddev_pop_order_by {
    allocationTypeId: order_by
    partnerId: order_by
    product: order_by
}

"order by stddev_samp() on columns of table \"vectric.sales_oem_bundles\""
input vectric_sales_oem_bundles_stddev_samp_order_by {
    allocationTypeId: order_by
    partnerId: order_by
    product: order_by
}

"order by sum() on columns of table \"vectric.sales_oem_bundles\""
input vectric_sales_oem_bundles_sum_order_by {
    allocationTypeId: order_by
    partnerId: order_by
    product: order_by
}

"order by var_pop() on columns of table \"vectric.sales_oem_bundles\""
input vectric_sales_oem_bundles_var_pop_order_by {
    allocationTypeId: order_by
    partnerId: order_by
    product: order_by
}

"order by var_samp() on columns of table \"vectric.sales_oem_bundles\""
input vectric_sales_oem_bundles_var_samp_order_by {
    allocationTypeId: order_by
    partnerId: order_by
    product: order_by
}

"order by variance() on columns of table \"vectric.sales_oem_bundles\""
input vectric_sales_oem_bundles_variance_order_by {
    allocationTypeId: order_by
    partnerId: order_by
    product: order_by
}

"order by aggregate values of table \"vectric.sales_oemlicences\""
input vectric_sales_oemlicences_aggregate_order_by {
    avg: vectric_sales_oemlicences_avg_order_by
    count: order_by
    max: vectric_sales_oemlicences_max_order_by
    min: vectric_sales_oemlicences_min_order_by
    stddev: vectric_sales_oemlicences_stddev_order_by
    stddev_pop: vectric_sales_oemlicences_stddev_pop_order_by
    stddev_samp: vectric_sales_oemlicences_stddev_samp_order_by
    sum: vectric_sales_oemlicences_sum_order_by
    var_pop: vectric_sales_oemlicences_var_pop_order_by
    var_samp: vectric_sales_oemlicences_var_samp_order_by
    variance: vectric_sales_oemlicences_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.sales_oemlicences\""
input vectric_sales_oemlicences_arr_rel_insert_input {
    data: [vectric_sales_oemlicences_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_sales_oemlicences_on_conflict
}

"order by avg() on columns of table \"vectric.sales_oemlicences\""
input vectric_sales_oemlicences_avg_order_by {
    allocationTypeId: order_by
    oemLicenceId: order_by
    orderItemProductId: order_by
    partnerId: order_by
    productId: order_by
    saleItemId: order_by
    version: order_by
}

"Boolean expression to filter rows from the table \"vectric.sales_oemlicences\". All fields are combined with a logical 'AND'."
input vectric_sales_oemlicences_bool_exp {
    _and: [vectric_sales_oemlicences_bool_exp!]
    _not: vectric_sales_oemlicences_bool_exp
    _or: [vectric_sales_oemlicences_bool_exp!]
    allocatedBy: String_comparison_exp
    allocationType: vectric_oem_licence_allocation_type_bool_exp
    allocationTypeId: bigint_comparison_exp
    dateAllocated: timestamptz_comparison_exp
    dateCreated: timestamptz_comparison_exp
    disabled: Boolean_comparison_exp
    licenceCode: String_comparison_exp
    licenceLogRows: vectric_licence_log_bool_exp
    mediaProvided: Boolean_comparison_exp
    oemBundleId: String_comparison_exp
    oemLicenceId: bigint_comparison_exp
    orderItemProductId: bigint_comparison_exp
    partner: vectric_oem_partners_bool_exp
    partnerId: bigint_comparison_exp
    productId: bigint_comparison_exp
    productName: String_comparison_exp
    registrationDate: timestamptz_comparison_exp
    saleItemId: bigint_comparison_exp
    version: smallint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.sales_oemlicences\""
input vectric_sales_oemlicences_inc_input {
    allocationTypeId: bigint
    oemLicenceId: bigint
    orderItemProductId: bigint
    partnerId: bigint
    productId: bigint
    saleItemId: bigint
    version: smallint
}

"input type for inserting data into table \"vectric.sales_oemlicences\""
input vectric_sales_oemlicences_insert_input {
    allocatedBy: String
    allocationType: vectric_oem_licence_allocation_type_obj_rel_insert_input
    allocationTypeId: bigint
    dateAllocated: timestamptz
    dateCreated: timestamptz
    disabled: Boolean
    licenceCode: String
    licenceLogRows: vectric_licence_log_arr_rel_insert_input
    mediaProvided: Boolean
    oemBundleId: String
    oemLicenceId: bigint
    orderItemProductId: bigint
    partner: vectric_oem_partners_obj_rel_insert_input
    partnerId: bigint
    productId: bigint
    productName: String
    registrationDate: timestamptz
    saleItemId: bigint
    version: smallint
}

"order by max() on columns of table \"vectric.sales_oemlicences\""
input vectric_sales_oemlicences_max_order_by {
    allocatedBy: order_by
    allocationTypeId: order_by
    dateAllocated: order_by
    dateCreated: order_by
    licenceCode: order_by
    oemBundleId: order_by
    oemLicenceId: order_by
    orderItemProductId: order_by
    partnerId: order_by
    productId: order_by
    productName: order_by
    registrationDate: order_by
    saleItemId: order_by
    version: order_by
}

"order by min() on columns of table \"vectric.sales_oemlicences\""
input vectric_sales_oemlicences_min_order_by {
    allocatedBy: order_by
    allocationTypeId: order_by
    dateAllocated: order_by
    dateCreated: order_by
    licenceCode: order_by
    oemBundleId: order_by
    oemLicenceId: order_by
    orderItemProductId: order_by
    partnerId: order_by
    productId: order_by
    productName: order_by
    registrationDate: order_by
    saleItemId: order_by
    version: order_by
}

"on conflict condition type for table \"vectric.sales_oemlicences\""
input vectric_sales_oemlicences_on_conflict {
    constraint: vectric_sales_oemlicences_constraint!
    update_columns: [vectric_sales_oemlicences_update_column!]! = []
    where: vectric_sales_oemlicences_bool_exp
}

"Ordering options when selecting data from \"vectric.sales_oemlicences\"."
input vectric_sales_oemlicences_order_by {
    allocatedBy: order_by
    allocationType: vectric_oem_licence_allocation_type_order_by
    allocationTypeId: order_by
    dateAllocated: order_by
    dateCreated: order_by
    disabled: order_by
    licenceCode: order_by
    licenceLogRows_aggregate: vectric_licence_log_aggregate_order_by
    mediaProvided: order_by
    oemBundleId: order_by
    oemLicenceId: order_by
    orderItemProductId: order_by
    partner: vectric_oem_partners_order_by
    partnerId: order_by
    productId: order_by
    productName: order_by
    registrationDate: order_by
    saleItemId: order_by
    version: order_by
}

"primary key columns input for table: vectric_sales_oemlicences"
input vectric_sales_oemlicences_pk_columns_input {
    oemLicenceId: bigint!
}

"input type for updating data in table \"vectric.sales_oemlicences\""
input vectric_sales_oemlicences_set_input {
    allocatedBy: String
    allocationTypeId: bigint
    dateAllocated: timestamptz
    dateCreated: timestamptz
    disabled: Boolean
    licenceCode: String
    mediaProvided: Boolean
    oemBundleId: String
    oemLicenceId: bigint
    orderItemProductId: bigint
    partnerId: bigint
    productId: bigint
    productName: String
    registrationDate: timestamptz
    saleItemId: bigint
    version: smallint
}

"order by stddev() on columns of table \"vectric.sales_oemlicences\""
input vectric_sales_oemlicences_stddev_order_by {
    allocationTypeId: order_by
    oemLicenceId: order_by
    orderItemProductId: order_by
    partnerId: order_by
    productId: order_by
    saleItemId: order_by
    version: order_by
}

"order by stddev_pop() on columns of table \"vectric.sales_oemlicences\""
input vectric_sales_oemlicences_stddev_pop_order_by {
    allocationTypeId: order_by
    oemLicenceId: order_by
    orderItemProductId: order_by
    partnerId: order_by
    productId: order_by
    saleItemId: order_by
    version: order_by
}

"order by stddev_samp() on columns of table \"vectric.sales_oemlicences\""
input vectric_sales_oemlicences_stddev_samp_order_by {
    allocationTypeId: order_by
    oemLicenceId: order_by
    orderItemProductId: order_by
    partnerId: order_by
    productId: order_by
    saleItemId: order_by
    version: order_by
}

"order by sum() on columns of table \"vectric.sales_oemlicences\""
input vectric_sales_oemlicences_sum_order_by {
    allocationTypeId: order_by
    oemLicenceId: order_by
    orderItemProductId: order_by
    partnerId: order_by
    productId: order_by
    saleItemId: order_by
    version: order_by
}

"order by var_pop() on columns of table \"vectric.sales_oemlicences\""
input vectric_sales_oemlicences_var_pop_order_by {
    allocationTypeId: order_by
    oemLicenceId: order_by
    orderItemProductId: order_by
    partnerId: order_by
    productId: order_by
    saleItemId: order_by
    version: order_by
}

"order by var_samp() on columns of table \"vectric.sales_oemlicences\""
input vectric_sales_oemlicences_var_samp_order_by {
    allocationTypeId: order_by
    oemLicenceId: order_by
    orderItemProductId: order_by
    partnerId: order_by
    productId: order_by
    saleItemId: order_by
    version: order_by
}

"order by variance() on columns of table \"vectric.sales_oemlicences\""
input vectric_sales_oemlicences_variance_order_by {
    allocationTypeId: order_by
    oemLicenceId: order_by
    orderItemProductId: order_by
    partnerId: order_by
    productId: order_by
    saleItemId: order_by
    version: order_by
}

"order by aggregate values of table \"vectric.sales_orders\""
input vectric_sales_orders_aggregate_order_by {
    avg: vectric_sales_orders_avg_order_by
    count: order_by
    max: vectric_sales_orders_max_order_by
    min: vectric_sales_orders_min_order_by
    stddev: vectric_sales_orders_stddev_order_by
    stddev_pop: vectric_sales_orders_stddev_pop_order_by
    stddev_samp: vectric_sales_orders_stddev_samp_order_by
    sum: vectric_sales_orders_sum_order_by
    var_pop: vectric_sales_orders_var_pop_order_by
    var_samp: vectric_sales_orders_var_samp_order_by
    variance: vectric_sales_orders_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.sales_orders\""
input vectric_sales_orders_arr_rel_insert_input {
    data: [vectric_sales_orders_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_sales_orders_on_conflict
}

"order by avg() on columns of table \"vectric.sales_orders\""
input vectric_sales_orders_avg_order_by {
    customerId: order_by
    mergedfromcustomerid: order_by
}

"Boolean expression to filter rows from the table \"vectric.sales_orders\". All fields are combined with a logical 'AND'."
input vectric_sales_orders_bool_exp {
    _and: [vectric_sales_orders_bool_exp!]
    _not: vectric_sales_orders_bool_exp
    _or: [vectric_sales_orders_bool_exp!]
    amendedby: String_comparison_exp
    createdby: String_comparison_exp
    customerId: bigint_comparison_exp
    dateCreated: timestamptz_comparison_exp
    dateamended: timestamptz_comparison_exp
    mergedfromcustomerid: bigint_comparison_exp
    orderDate: timestamptz_comparison_exp
    orderId: String_comparison_exp
    purchaser: String_comparison_exp
    registrationemailsent: date_comparison_exp
    salenote: String_comparison_exp
    salesItems: vectric_sales_salesitems_bool_exp
    sales_customer: vectric_sales_customers_bool_exp
    salesdetails: String_comparison_exp
    salesummary: String_comparison_exp
    validationcomments: String_comparison_exp
    veccode: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.sales_orders\""
input vectric_sales_orders_inc_input {
    customerId: bigint
    mergedfromcustomerid: bigint
}

"input type for inserting data into table \"vectric.sales_orders\""
input vectric_sales_orders_insert_input {
    amendedby: String
    createdby: String
    customerId: bigint
    dateCreated: timestamptz
    dateamended: timestamptz
    mergedfromcustomerid: bigint
    orderDate: timestamptz
    orderId: String
    purchaser: String
    registrationemailsent: date
    salenote: String
    salesItems: vectric_sales_salesitems_arr_rel_insert_input
    sales_customer: vectric_sales_customers_obj_rel_insert_input
    salesdetails: String
    salesummary: String
    validationcomments: String
    veccode: String
}

"order by max() on columns of table \"vectric.sales_orders\""
input vectric_sales_orders_max_order_by {
    amendedby: order_by
    createdby: order_by
    customerId: order_by
    dateCreated: order_by
    dateamended: order_by
    mergedfromcustomerid: order_by
    orderDate: order_by
    orderId: order_by
    purchaser: order_by
    registrationemailsent: order_by
    salenote: order_by
    salesdetails: order_by
    salesummary: order_by
    validationcomments: order_by
    veccode: order_by
}

"order by min() on columns of table \"vectric.sales_orders\""
input vectric_sales_orders_min_order_by {
    amendedby: order_by
    createdby: order_by
    customerId: order_by
    dateCreated: order_by
    dateamended: order_by
    mergedfromcustomerid: order_by
    orderDate: order_by
    orderId: order_by
    purchaser: order_by
    registrationemailsent: order_by
    salenote: order_by
    salesdetails: order_by
    salesummary: order_by
    validationcomments: order_by
    veccode: order_by
}

"input type for inserting object relation for remote table \"vectric.sales_orders\""
input vectric_sales_orders_obj_rel_insert_input {
    data: vectric_sales_orders_insert_input!
    "on conflict condition"
    on_conflict: vectric_sales_orders_on_conflict
}

"on conflict condition type for table \"vectric.sales_orders\""
input vectric_sales_orders_on_conflict {
    constraint: vectric_sales_orders_constraint!
    update_columns: [vectric_sales_orders_update_column!]! = []
    where: vectric_sales_orders_bool_exp
}

"Ordering options when selecting data from \"vectric.sales_orders\"."
input vectric_sales_orders_order_by {
    amendedby: order_by
    createdby: order_by
    customerId: order_by
    dateCreated: order_by
    dateamended: order_by
    mergedfromcustomerid: order_by
    orderDate: order_by
    orderId: order_by
    purchaser: order_by
    registrationemailsent: order_by
    salenote: order_by
    salesItems_aggregate: vectric_sales_salesitems_aggregate_order_by
    sales_customer: vectric_sales_customers_order_by
    salesdetails: order_by
    salesummary: order_by
    validationcomments: order_by
    veccode: order_by
}

"primary key columns input for table: vectric_sales_orders"
input vectric_sales_orders_pk_columns_input {
    orderId: String!
}

"input type for updating data in table \"vectric.sales_orders\""
input vectric_sales_orders_set_input {
    amendedby: String
    createdby: String
    customerId: bigint
    dateCreated: timestamptz
    dateamended: timestamptz
    mergedfromcustomerid: bigint
    orderDate: timestamptz
    orderId: String
    purchaser: String
    registrationemailsent: date
    salenote: String
    salesdetails: String
    salesummary: String
    validationcomments: String
    veccode: String
}

"order by stddev() on columns of table \"vectric.sales_orders\""
input vectric_sales_orders_stddev_order_by {
    customerId: order_by
    mergedfromcustomerid: order_by
}

"order by stddev_pop() on columns of table \"vectric.sales_orders\""
input vectric_sales_orders_stddev_pop_order_by {
    customerId: order_by
    mergedfromcustomerid: order_by
}

"order by stddev_samp() on columns of table \"vectric.sales_orders\""
input vectric_sales_orders_stddev_samp_order_by {
    customerId: order_by
    mergedfromcustomerid: order_by
}

"order by sum() on columns of table \"vectric.sales_orders\""
input vectric_sales_orders_sum_order_by {
    customerId: order_by
    mergedfromcustomerid: order_by
}

"order by var_pop() on columns of table \"vectric.sales_orders\""
input vectric_sales_orders_var_pop_order_by {
    customerId: order_by
    mergedfromcustomerid: order_by
}

"order by var_samp() on columns of table \"vectric.sales_orders\""
input vectric_sales_orders_var_samp_order_by {
    customerId: order_by
    mergedfromcustomerid: order_by
}

"order by variance() on columns of table \"vectric.sales_orders\""
input vectric_sales_orders_variance_order_by {
    customerId: order_by
    mergedfromcustomerid: order_by
}

"order by aggregate values of table \"vectric.sales_salesitem_products\""
input vectric_sales_salesitem_products_aggregate_order_by {
    avg: vectric_sales_salesitem_products_avg_order_by
    count: order_by
    max: vectric_sales_salesitem_products_max_order_by
    min: vectric_sales_salesitem_products_min_order_by
    stddev: vectric_sales_salesitem_products_stddev_order_by
    stddev_pop: vectric_sales_salesitem_products_stddev_pop_order_by
    stddev_samp: vectric_sales_salesitem_products_stddev_samp_order_by
    sum: vectric_sales_salesitem_products_sum_order_by
    var_pop: vectric_sales_salesitem_products_var_pop_order_by
    var_samp: vectric_sales_salesitem_products_var_samp_order_by
    variance: vectric_sales_salesitem_products_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.sales_salesitem_products\""
input vectric_sales_salesitem_products_arr_rel_insert_input {
    data: [vectric_sales_salesitem_products_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_sales_salesitem_products_on_conflict
}

"order by avg() on columns of table \"vectric.sales_salesitem_products\""
input vectric_sales_salesitem_products_avg_order_by {
    enhances: order_by
    productId: order_by
    salesItemProductId: order_by
    salesitemid: order_by
    status: order_by
    transfersalesitem: order_by
    upgradesalesitem: order_by
    versioncodeid: order_by
}

"Boolean expression to filter rows from the table \"vectric.sales_salesitem_products\". All fields are combined with a logical 'AND'."
input vectric_sales_salesitem_products_bool_exp {
    _and: [vectric_sales_salesitem_products_bool_exp!]
    _not: vectric_sales_salesitem_products_bool_exp
    _or: [vectric_sales_salesitem_products_bool_exp!]
    addOns: vectric_sales_salesitem_products_bool_exp
    amended: timestamptz_comparison_exp
    amendedby: String_comparison_exp
    emailsubject: String_comparison_exp
    enhanceSalesItemProduct: vectric_sales_salesitem_products_bool_exp
    enhancementTokens: vectric_enhancement_tokens_bool_exp
    enhances: bigint_comparison_exp
    freeClipartTokens: vectric_free_clipart_tokens_bool_exp
    licenceCode: String_comparison_exp
    licenceIdAsDisplay: Boolean_comparison_exp
    licenceType: String_comparison_exp
    oembundleid: String_comparison_exp
    product: vectric_products_products_bool_exp
    productId: bigint_comparison_exp
    registeredUsername: String_comparison_exp
    resentdate: timestamptz_comparison_exp
    salesItem: vectric_sales_salesitems_bool_exp
    salesItemProductId: bigint_comparison_exp
    salesItemProductStatus: vectric_sales_salesitemproduct_status_bool_exp
    salesitemid: bigint_comparison_exp
    status: bigint_comparison_exp
    transfersalesitem: bigint_comparison_exp
    upgradeTokens: vectric_upgrade_tokens_bool_exp
    upgradesalesitem: bigint_comparison_exp
    versioncodeid: bigint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.sales_salesitem_products\""
input vectric_sales_salesitem_products_inc_input {
    enhances: bigint
    productId: bigint
    salesItemProductId: bigint
    salesitemid: bigint
    status: bigint
    transfersalesitem: bigint
    upgradesalesitem: bigint
    versioncodeid: bigint
}

"input type for inserting data into table \"vectric.sales_salesitem_products\""
input vectric_sales_salesitem_products_insert_input {
    addOns: vectric_sales_salesitem_products_arr_rel_insert_input
    amended: timestamptz
    amendedby: String
    emailsubject: String
    enhanceSalesItemProduct: vectric_sales_salesitem_products_obj_rel_insert_input
    enhancementTokens: vectric_enhancement_tokens_arr_rel_insert_input
    enhances: bigint
    freeClipartTokens: vectric_free_clipart_tokens_arr_rel_insert_input
    licenceCode: String
    licenceIdAsDisplay: Boolean
    licenceType: String
    oembundleid: String
    product: vectric_products_products_obj_rel_insert_input
    productId: bigint
    registeredUsername: String
    resentdate: timestamptz
    salesItem: vectric_sales_salesitems_obj_rel_insert_input
    salesItemProductId: bigint
    salesItemProductStatus: vectric_sales_salesitemproduct_status_obj_rel_insert_input
    salesitemid: bigint
    status: bigint
    transfersalesitem: bigint
    upgradeTokens: vectric_upgrade_tokens_arr_rel_insert_input
    upgradesalesitem: bigint
    versioncodeid: bigint
}

"order by max() on columns of table \"vectric.sales_salesitem_products\""
input vectric_sales_salesitem_products_max_order_by {
    amended: order_by
    amendedby: order_by
    emailsubject: order_by
    enhances: order_by
    licenceCode: order_by
    licenceType: order_by
    oembundleid: order_by
    productId: order_by
    registeredUsername: order_by
    resentdate: order_by
    salesItemProductId: order_by
    salesitemid: order_by
    status: order_by
    transfersalesitem: order_by
    upgradesalesitem: order_by
    versioncodeid: order_by
}

"order by min() on columns of table \"vectric.sales_salesitem_products\""
input vectric_sales_salesitem_products_min_order_by {
    amended: order_by
    amendedby: order_by
    emailsubject: order_by
    enhances: order_by
    licenceCode: order_by
    licenceType: order_by
    oembundleid: order_by
    productId: order_by
    registeredUsername: order_by
    resentdate: order_by
    salesItemProductId: order_by
    salesitemid: order_by
    status: order_by
    transfersalesitem: order_by
    upgradesalesitem: order_by
    versioncodeid: order_by
}

"input type for inserting object relation for remote table \"vectric.sales_salesitem_products\""
input vectric_sales_salesitem_products_obj_rel_insert_input {
    data: vectric_sales_salesitem_products_insert_input!
    "on conflict condition"
    on_conflict: vectric_sales_salesitem_products_on_conflict
}

"on conflict condition type for table \"vectric.sales_salesitem_products\""
input vectric_sales_salesitem_products_on_conflict {
    constraint: vectric_sales_salesitem_products_constraint!
    update_columns: [vectric_sales_salesitem_products_update_column!]! = []
    where: vectric_sales_salesitem_products_bool_exp
}

"Ordering options when selecting data from \"vectric.sales_salesitem_products\"."
input vectric_sales_salesitem_products_order_by {
    addOns_aggregate: vectric_sales_salesitem_products_aggregate_order_by
    amended: order_by
    amendedby: order_by
    emailsubject: order_by
    enhanceSalesItemProduct: vectric_sales_salesitem_products_order_by
    enhancementTokens_aggregate: vectric_enhancement_tokens_aggregate_order_by
    enhances: order_by
    freeClipartTokens_aggregate: vectric_free_clipart_tokens_aggregate_order_by
    licenceCode: order_by
    licenceIdAsDisplay: order_by
    licenceType: order_by
    oembundleid: order_by
    product: vectric_products_products_order_by
    productId: order_by
    registeredUsername: order_by
    resentdate: order_by
    salesItem: vectric_sales_salesitems_order_by
    salesItemProductId: order_by
    salesItemProductStatus: vectric_sales_salesitemproduct_status_order_by
    salesitemid: order_by
    status: order_by
    transfersalesitem: order_by
    upgradeTokens_aggregate: vectric_upgrade_tokens_aggregate_order_by
    upgradesalesitem: order_by
    versioncodeid: order_by
}

"primary key columns input for table: vectric_sales_salesitem_products"
input vectric_sales_salesitem_products_pk_columns_input {
    salesItemProductId: bigint!
}

"input type for updating data in table \"vectric.sales_salesitem_products\""
input vectric_sales_salesitem_products_set_input {
    amended: timestamptz
    amendedby: String
    emailsubject: String
    enhances: bigint
    licenceCode: String
    licenceIdAsDisplay: Boolean
    licenceType: String
    oembundleid: String
    productId: bigint
    registeredUsername: String
    resentdate: timestamptz
    salesItemProductId: bigint
    salesitemid: bigint
    status: bigint
    transfersalesitem: bigint
    upgradesalesitem: bigint
    versioncodeid: bigint
}

"order by stddev() on columns of table \"vectric.sales_salesitem_products\""
input vectric_sales_salesitem_products_stddev_order_by {
    enhances: order_by
    productId: order_by
    salesItemProductId: order_by
    salesitemid: order_by
    status: order_by
    transfersalesitem: order_by
    upgradesalesitem: order_by
    versioncodeid: order_by
}

"order by stddev_pop() on columns of table \"vectric.sales_salesitem_products\""
input vectric_sales_salesitem_products_stddev_pop_order_by {
    enhances: order_by
    productId: order_by
    salesItemProductId: order_by
    salesitemid: order_by
    status: order_by
    transfersalesitem: order_by
    upgradesalesitem: order_by
    versioncodeid: order_by
}

"order by stddev_samp() on columns of table \"vectric.sales_salesitem_products\""
input vectric_sales_salesitem_products_stddev_samp_order_by {
    enhances: order_by
    productId: order_by
    salesItemProductId: order_by
    salesitemid: order_by
    status: order_by
    transfersalesitem: order_by
    upgradesalesitem: order_by
    versioncodeid: order_by
}

"order by sum() on columns of table \"vectric.sales_salesitem_products\""
input vectric_sales_salesitem_products_sum_order_by {
    enhances: order_by
    productId: order_by
    salesItemProductId: order_by
    salesitemid: order_by
    status: order_by
    transfersalesitem: order_by
    upgradesalesitem: order_by
    versioncodeid: order_by
}

"order by var_pop() on columns of table \"vectric.sales_salesitem_products\""
input vectric_sales_salesitem_products_var_pop_order_by {
    enhances: order_by
    productId: order_by
    salesItemProductId: order_by
    salesitemid: order_by
    status: order_by
    transfersalesitem: order_by
    upgradesalesitem: order_by
    versioncodeid: order_by
}

"order by var_samp() on columns of table \"vectric.sales_salesitem_products\""
input vectric_sales_salesitem_products_var_samp_order_by {
    enhances: order_by
    productId: order_by
    salesItemProductId: order_by
    salesitemid: order_by
    status: order_by
    transfersalesitem: order_by
    upgradesalesitem: order_by
    versioncodeid: order_by
}

"order by variance() on columns of table \"vectric.sales_salesitem_products\""
input vectric_sales_salesitem_products_variance_order_by {
    enhances: order_by
    productId: order_by
    salesItemProductId: order_by
    salesitemid: order_by
    status: order_by
    transfersalesitem: order_by
    upgradesalesitem: order_by
    versioncodeid: order_by
}

"Boolean expression to filter rows from the table \"vectric.sales_salesitemproduct_status\". All fields are combined with a logical 'AND'."
input vectric_sales_salesitemproduct_status_bool_exp {
    _and: [vectric_sales_salesitemproduct_status_bool_exp!]
    _not: vectric_sales_salesitemproduct_status_bool_exp
    _or: [vectric_sales_salesitemproduct_status_bool_exp!]
    status: String_comparison_exp
    statusid: bigint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.sales_salesitemproduct_status\""
input vectric_sales_salesitemproduct_status_inc_input {
    statusid: bigint
}

"input type for inserting data into table \"vectric.sales_salesitemproduct_status\""
input vectric_sales_salesitemproduct_status_insert_input {
    status: String
    statusid: bigint
}

"input type for inserting object relation for remote table \"vectric.sales_salesitemproduct_status\""
input vectric_sales_salesitemproduct_status_obj_rel_insert_input {
    data: vectric_sales_salesitemproduct_status_insert_input!
    "on conflict condition"
    on_conflict: vectric_sales_salesitemproduct_status_on_conflict
}

"on conflict condition type for table \"vectric.sales_salesitemproduct_status\""
input vectric_sales_salesitemproduct_status_on_conflict {
    constraint: vectric_sales_salesitemproduct_status_constraint!
    update_columns: [vectric_sales_salesitemproduct_status_update_column!]! = []
    where: vectric_sales_salesitemproduct_status_bool_exp
}

"Ordering options when selecting data from \"vectric.sales_salesitemproduct_status\"."
input vectric_sales_salesitemproduct_status_order_by {
    status: order_by
    statusid: order_by
}

"primary key columns input for table: vectric_sales_salesitemproduct_status"
input vectric_sales_salesitemproduct_status_pk_columns_input {
    statusid: bigint!
}

"input type for updating data in table \"vectric.sales_salesitemproduct_status\""
input vectric_sales_salesitemproduct_status_set_input {
    status: String
    statusid: bigint
}

"order by aggregate values of table \"vectric.sales_salesitems\""
input vectric_sales_salesitems_aggregate_order_by {
    avg: vectric_sales_salesitems_avg_order_by
    count: order_by
    max: vectric_sales_salesitems_max_order_by
    min: vectric_sales_salesitems_min_order_by
    stddev: vectric_sales_salesitems_stddev_order_by
    stddev_pop: vectric_sales_salesitems_stddev_pop_order_by
    stddev_samp: vectric_sales_salesitems_stddev_samp_order_by
    sum: vectric_sales_salesitems_sum_order_by
    var_pop: vectric_sales_salesitems_var_pop_order_by
    var_samp: vectric_sales_salesitems_var_samp_order_by
    variance: vectric_sales_salesitems_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.sales_salesitems\""
input vectric_sales_salesitems_arr_rel_insert_input {
    data: [vectric_sales_salesitems_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_sales_salesitems_on_conflict
}

"order by avg() on columns of table \"vectric.sales_salesitems\""
input vectric_sales_salesitems_avg_order_by {
    productid: order_by
    salesitemid: order_by
}

"Boolean expression to filter rows from the table \"vectric.sales_salesitems\". All fields are combined with a logical 'AND'."
input vectric_sales_salesitems_bool_exp {
    _and: [vectric_sales_salesitems_bool_exp!]
    _not: vectric_sales_salesitems_bool_exp
    _or: [vectric_sales_salesitems_bool_exp!]
    amendedby: String_comparison_exp
    customerSale: vectric_customer_sales_bool_exp
    dateamended: timestamptz_comparison_exp
    orderid: String_comparison_exp
    product: vectric_products_products_bool_exp
    productid: bigint_comparison_exp
    salesItemProducts: vectric_sales_salesitem_products_bool_exp
    sales_order: vectric_sales_orders_bool_exp
    salesitemid: bigint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.sales_salesitems\""
input vectric_sales_salesitems_inc_input {
    productid: bigint
    salesitemid: bigint
}

"input type for inserting data into table \"vectric.sales_salesitems\""
input vectric_sales_salesitems_insert_input {
    amendedby: String
    customerSale: vectric_customer_sales_obj_rel_insert_input
    dateamended: timestamptz
    orderid: String
    product: vectric_products_products_obj_rel_insert_input
    productid: bigint
    salesItemProducts: vectric_sales_salesitem_products_arr_rel_insert_input
    sales_order: vectric_sales_orders_obj_rel_insert_input
    salesitemid: bigint
}

"order by max() on columns of table \"vectric.sales_salesitems\""
input vectric_sales_salesitems_max_order_by {
    amendedby: order_by
    dateamended: order_by
    orderid: order_by
    productid: order_by
    salesitemid: order_by
}

"order by min() on columns of table \"vectric.sales_salesitems\""
input vectric_sales_salesitems_min_order_by {
    amendedby: order_by
    dateamended: order_by
    orderid: order_by
    productid: order_by
    salesitemid: order_by
}

"input type for inserting object relation for remote table \"vectric.sales_salesitems\""
input vectric_sales_salesitems_obj_rel_insert_input {
    data: vectric_sales_salesitems_insert_input!
    "on conflict condition"
    on_conflict: vectric_sales_salesitems_on_conflict
}

"on conflict condition type for table \"vectric.sales_salesitems\""
input vectric_sales_salesitems_on_conflict {
    constraint: vectric_sales_salesitems_constraint!
    update_columns: [vectric_sales_salesitems_update_column!]! = []
    where: vectric_sales_salesitems_bool_exp
}

"Ordering options when selecting data from \"vectric.sales_salesitems\"."
input vectric_sales_salesitems_order_by {
    amendedby: order_by
    customerSale: vectric_customer_sales_order_by
    dateamended: order_by
    orderid: order_by
    product: vectric_products_products_order_by
    productid: order_by
    salesItemProducts_aggregate: vectric_sales_salesitem_products_aggregate_order_by
    sales_order: vectric_sales_orders_order_by
    salesitemid: order_by
}

"primary key columns input for table: vectric_sales_salesitems"
input vectric_sales_salesitems_pk_columns_input {
    salesitemid: bigint!
}

"input type for updating data in table \"vectric.sales_salesitems\""
input vectric_sales_salesitems_set_input {
    amendedby: String
    dateamended: timestamptz
    orderid: String
    productid: bigint
    salesitemid: bigint
}

"order by stddev() on columns of table \"vectric.sales_salesitems\""
input vectric_sales_salesitems_stddev_order_by {
    productid: order_by
    salesitemid: order_by
}

"order by stddev_pop() on columns of table \"vectric.sales_salesitems\""
input vectric_sales_salesitems_stddev_pop_order_by {
    productid: order_by
    salesitemid: order_by
}

"order by stddev_samp() on columns of table \"vectric.sales_salesitems\""
input vectric_sales_salesitems_stddev_samp_order_by {
    productid: order_by
    salesitemid: order_by
}

"order by sum() on columns of table \"vectric.sales_salesitems\""
input vectric_sales_salesitems_sum_order_by {
    productid: order_by
    salesitemid: order_by
}

"order by var_pop() on columns of table \"vectric.sales_salesitems\""
input vectric_sales_salesitems_var_pop_order_by {
    productid: order_by
    salesitemid: order_by
}

"order by var_samp() on columns of table \"vectric.sales_salesitems\""
input vectric_sales_salesitems_var_samp_order_by {
    productid: order_by
    salesitemid: order_by
}

"order by variance() on columns of table \"vectric.sales_salesitems\""
input vectric_sales_salesitems_variance_order_by {
    productid: order_by
    salesitemid: order_by
}

"Boolean expression to filter rows from the table \"vectric.sales_velocitytemplate\". All fields are combined with a logical 'AND'."
input vectric_sales_velocitytemplate_bool_exp {
    _and: [vectric_sales_velocitytemplate_bool_exp!]
    _not: vectric_sales_velocitytemplate_bool_exp
    _or: [vectric_sales_velocitytemplate_bool_exp!]
    lang: String_comparison_exp
    languageCode: vectric_language_codes_bool_exp
    sender: String_comparison_exp
    signedBy: String_comparison_exp
    subject: String_comparison_exp
    template: String_comparison_exp
    templateName: String_comparison_exp
    templateTimestamp: timestamptz_comparison_exp
}

"input type for inserting data into table \"vectric.sales_velocitytemplate\""
input vectric_sales_velocitytemplate_insert_input {
    lang: String
    languageCode: vectric_language_codes_obj_rel_insert_input
    sender: String
    signedBy: String
    subject: String
    template: String
    templateName: String
    templateTimestamp: timestamptz
}

"on conflict condition type for table \"vectric.sales_velocitytemplate\""
input vectric_sales_velocitytemplate_on_conflict {
    constraint: vectric_sales_velocitytemplate_constraint!
    update_columns: [vectric_sales_velocitytemplate_update_column!]! = []
    where: vectric_sales_velocitytemplate_bool_exp
}

"Ordering options when selecting data from \"vectric.sales_velocitytemplate\"."
input vectric_sales_velocitytemplate_order_by {
    lang: order_by
    languageCode: vectric_language_codes_order_by
    sender: order_by
    signedBy: order_by
    subject: order_by
    template: order_by
    templateName: order_by
    templateTimestamp: order_by
}

"primary key columns input for table: vectric_sales_velocitytemplate"
input vectric_sales_velocitytemplate_pk_columns_input {
    templateName: String!
}

"input type for updating data in table \"vectric.sales_velocitytemplate\""
input vectric_sales_velocitytemplate_set_input {
    lang: String
    sender: String
    signedBy: String
    subject: String
    template: String
    templateName: String
    templateTimestamp: timestamptz
}

"Boolean expression to filter rows from the table \"vectric.scheduled_emails\". All fields are combined with a logical 'AND'."
input vectric_scheduled_emails_bool_exp {
    _and: [vectric_scheduled_emails_bool_exp!]
    _not: vectric_scheduled_emails_bool_exp
    _or: [vectric_scheduled_emails_bool_exp!]
    createdOn: timestamp_comparison_exp
    customerId: bigint_comparison_exp
    id: Int_comparison_exp
    processed: Boolean_comparison_exp
    processedOn: timestamp_comparison_exp
    sendTo: String_comparison_exp
    templateId: String_comparison_exp
    variables: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.scheduled_emails\""
input vectric_scheduled_emails_inc_input {
    customerId: bigint
    id: Int
}

"input type for inserting data into table \"vectric.scheduled_emails\""
input vectric_scheduled_emails_insert_input {
    createdOn: timestamp
    customerId: bigint
    id: Int
    processed: Boolean
    processedOn: timestamp
    sendTo: String
    templateId: String
    variables: String
}

"on conflict condition type for table \"vectric.scheduled_emails\""
input vectric_scheduled_emails_on_conflict {
    constraint: vectric_scheduled_emails_constraint!
    update_columns: [vectric_scheduled_emails_update_column!]! = []
    where: vectric_scheduled_emails_bool_exp
}

"Ordering options when selecting data from \"vectric.scheduled_emails\"."
input vectric_scheduled_emails_order_by {
    createdOn: order_by
    customerId: order_by
    id: order_by
    processed: order_by
    processedOn: order_by
    sendTo: order_by
    templateId: order_by
    variables: order_by
}

"primary key columns input for table: vectric_scheduled_emails"
input vectric_scheduled_emails_pk_columns_input {
    id: Int!
}

"input type for updating data in table \"vectric.scheduled_emails\""
input vectric_scheduled_emails_set_input {
    createdOn: timestamp
    customerId: bigint
    id: Int
    processed: Boolean
    processedOn: timestamp
    sendTo: String
    templateId: String
    variables: String
}

"Boolean expression to filter rows from the table \"vectric.security_emailverificationtokens\". All fields are combined with a logical 'AND'."
input vectric_security_emailverificationtokens_bool_exp {
    _and: [vectric_security_emailverificationtokens_bool_exp!]
    _not: vectric_security_emailverificationtokens_bool_exp
    _or: [vectric_security_emailverificationtokens_bool_exp!]
    customerId: bigint_comparison_exp
    expiryDate: timestamptz_comparison_exp
    token: String_comparison_exp
    username: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.security_emailverificationtokens\""
input vectric_security_emailverificationtokens_inc_input {
    customerId: bigint
}

"input type for inserting data into table \"vectric.security_emailverificationtokens\""
input vectric_security_emailverificationtokens_insert_input {
    customerId: bigint
    expiryDate: timestamptz
    token: String
    username: String
}

"on conflict condition type for table \"vectric.security_emailverificationtokens\""
input vectric_security_emailverificationtokens_on_conflict {
    constraint: vectric_security_emailverificationtokens_constraint!
    update_columns: [vectric_security_emailverificationtokens_update_column!]! = []
    where: vectric_security_emailverificationtokens_bool_exp
}

"Ordering options when selecting data from \"vectric.security_emailverificationtokens\"."
input vectric_security_emailverificationtokens_order_by {
    customerId: order_by
    expiryDate: order_by
    token: order_by
    username: order_by
}

"primary key columns input for table: vectric_security_emailverificationtokens"
input vectric_security_emailverificationtokens_pk_columns_input {
    token: String!
}

"input type for updating data in table \"vectric.security_emailverificationtokens\""
input vectric_security_emailverificationtokens_set_input {
    customerId: bigint
    expiryDate: timestamptz
    token: String
    username: String
}

"order by aggregate values of table \"vectric.security_group_authorities\""
input vectric_security_group_authorities_aggregate_order_by {
    avg: vectric_security_group_authorities_avg_order_by
    count: order_by
    max: vectric_security_group_authorities_max_order_by
    min: vectric_security_group_authorities_min_order_by
    stddev: vectric_security_group_authorities_stddev_order_by
    stddev_pop: vectric_security_group_authorities_stddev_pop_order_by
    stddev_samp: vectric_security_group_authorities_stddev_samp_order_by
    sum: vectric_security_group_authorities_sum_order_by
    var_pop: vectric_security_group_authorities_var_pop_order_by
    var_samp: vectric_security_group_authorities_var_samp_order_by
    variance: vectric_security_group_authorities_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.security_group_authorities\""
input vectric_security_group_authorities_arr_rel_insert_input {
    data: [vectric_security_group_authorities_insert_input!]!
}

"order by avg() on columns of table \"vectric.security_group_authorities\""
input vectric_security_group_authorities_avg_order_by {
    groupId: order_by
}

"Boolean expression to filter rows from the table \"vectric.security_group_authorities\". All fields are combined with a logical 'AND'."
input vectric_security_group_authorities_bool_exp {
    _and: [vectric_security_group_authorities_bool_exp!]
    _not: vectric_security_group_authorities_bool_exp
    _or: [vectric_security_group_authorities_bool_exp!]
    authority: String_comparison_exp
    groupId: bigint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.security_group_authorities\""
input vectric_security_group_authorities_inc_input {
    groupId: bigint
}

"input type for inserting data into table \"vectric.security_group_authorities\""
input vectric_security_group_authorities_insert_input {
    authority: String
    groupId: bigint
}

"order by max() on columns of table \"vectric.security_group_authorities\""
input vectric_security_group_authorities_max_order_by {
    authority: order_by
    groupId: order_by
}

"order by min() on columns of table \"vectric.security_group_authorities\""
input vectric_security_group_authorities_min_order_by {
    authority: order_by
    groupId: order_by
}

"Ordering options when selecting data from \"vectric.security_group_authorities\"."
input vectric_security_group_authorities_order_by {
    authority: order_by
    groupId: order_by
}

"input type for updating data in table \"vectric.security_group_authorities\""
input vectric_security_group_authorities_set_input {
    authority: String
    groupId: bigint
}

"order by stddev() on columns of table \"vectric.security_group_authorities\""
input vectric_security_group_authorities_stddev_order_by {
    groupId: order_by
}

"order by stddev_pop() on columns of table \"vectric.security_group_authorities\""
input vectric_security_group_authorities_stddev_pop_order_by {
    groupId: order_by
}

"order by stddev_samp() on columns of table \"vectric.security_group_authorities\""
input vectric_security_group_authorities_stddev_samp_order_by {
    groupId: order_by
}

"order by sum() on columns of table \"vectric.security_group_authorities\""
input vectric_security_group_authorities_sum_order_by {
    groupId: order_by
}

"order by var_pop() on columns of table \"vectric.security_group_authorities\""
input vectric_security_group_authorities_var_pop_order_by {
    groupId: order_by
}

"order by var_samp() on columns of table \"vectric.security_group_authorities\""
input vectric_security_group_authorities_var_samp_order_by {
    groupId: order_by
}

"order by variance() on columns of table \"vectric.security_group_authorities\""
input vectric_security_group_authorities_variance_order_by {
    groupId: order_by
}

"order by aggregate values of table \"vectric.security_group_members\""
input vectric_security_group_members_aggregate_order_by {
    avg: vectric_security_group_members_avg_order_by
    count: order_by
    max: vectric_security_group_members_max_order_by
    min: vectric_security_group_members_min_order_by
    stddev: vectric_security_group_members_stddev_order_by
    stddev_pop: vectric_security_group_members_stddev_pop_order_by
    stddev_samp: vectric_security_group_members_stddev_samp_order_by
    sum: vectric_security_group_members_sum_order_by
    var_pop: vectric_security_group_members_var_pop_order_by
    var_samp: vectric_security_group_members_var_samp_order_by
    variance: vectric_security_group_members_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.security_group_members\""
input vectric_security_group_members_arr_rel_insert_input {
    data: [vectric_security_group_members_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_security_group_members_on_conflict
}

"order by avg() on columns of table \"vectric.security_group_members\""
input vectric_security_group_members_avg_order_by {
    groupId: order_by
    id: order_by
}

"Boolean expression to filter rows from the table \"vectric.security_group_members\". All fields are combined with a logical 'AND'."
input vectric_security_group_members_bool_exp {
    _and: [vectric_security_group_members_bool_exp!]
    _not: vectric_security_group_members_bool_exp
    _or: [vectric_security_group_members_bool_exp!]
    groupAuthorities: vectric_security_group_authorities_bool_exp
    groupId: bigint_comparison_exp
    id: bigint_comparison_exp
    securityUser: vectric_security_users_bool_exp
    username: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.security_group_members\""
input vectric_security_group_members_inc_input {
    groupId: bigint
    id: bigint
}

"input type for inserting data into table \"vectric.security_group_members\""
input vectric_security_group_members_insert_input {
    groupAuthorities: vectric_security_group_authorities_arr_rel_insert_input
    groupId: bigint
    id: bigint
    securityUser: vectric_security_users_obj_rel_insert_input
    username: String
}

"order by max() on columns of table \"vectric.security_group_members\""
input vectric_security_group_members_max_order_by {
    groupId: order_by
    id: order_by
    username: order_by
}

"order by min() on columns of table \"vectric.security_group_members\""
input vectric_security_group_members_min_order_by {
    groupId: order_by
    id: order_by
    username: order_by
}

"on conflict condition type for table \"vectric.security_group_members\""
input vectric_security_group_members_on_conflict {
    constraint: vectric_security_group_members_constraint!
    update_columns: [vectric_security_group_members_update_column!]! = []
    where: vectric_security_group_members_bool_exp
}

"Ordering options when selecting data from \"vectric.security_group_members\"."
input vectric_security_group_members_order_by {
    groupAuthorities_aggregate: vectric_security_group_authorities_aggregate_order_by
    groupId: order_by
    id: order_by
    securityUser: vectric_security_users_order_by
    username: order_by
}

"primary key columns input for table: vectric_security_group_members"
input vectric_security_group_members_pk_columns_input {
    id: bigint!
}

"input type for updating data in table \"vectric.security_group_members\""
input vectric_security_group_members_set_input {
    groupId: bigint
    id: bigint
    username: String
}

"order by stddev() on columns of table \"vectric.security_group_members\""
input vectric_security_group_members_stddev_order_by {
    groupId: order_by
    id: order_by
}

"order by stddev_pop() on columns of table \"vectric.security_group_members\""
input vectric_security_group_members_stddev_pop_order_by {
    groupId: order_by
    id: order_by
}

"order by stddev_samp() on columns of table \"vectric.security_group_members\""
input vectric_security_group_members_stddev_samp_order_by {
    groupId: order_by
    id: order_by
}

"order by sum() on columns of table \"vectric.security_group_members\""
input vectric_security_group_members_sum_order_by {
    groupId: order_by
    id: order_by
}

"order by var_pop() on columns of table \"vectric.security_group_members\""
input vectric_security_group_members_var_pop_order_by {
    groupId: order_by
    id: order_by
}

"order by var_samp() on columns of table \"vectric.security_group_members\""
input vectric_security_group_members_var_samp_order_by {
    groupId: order_by
    id: order_by
}

"order by variance() on columns of table \"vectric.security_group_members\""
input vectric_security_group_members_variance_order_by {
    groupId: order_by
    id: order_by
}

"Boolean expression to filter rows from the table \"vectric.security_passwordresettokens\". All fields are combined with a logical 'AND'."
input vectric_security_passwordresettokens_bool_exp {
    _and: [vectric_security_passwordresettokens_bool_exp!]
    _not: vectric_security_passwordresettokens_bool_exp
    _or: [vectric_security_passwordresettokens_bool_exp!]
    expiryDate: timestamptz_comparison_exp
    token: String_comparison_exp
    username: String_comparison_exp
}

"input type for inserting data into table \"vectric.security_passwordresettokens\""
input vectric_security_passwordresettokens_insert_input {
    expiryDate: timestamptz
    token: String
    username: String
}

"on conflict condition type for table \"vectric.security_passwordresettokens\""
input vectric_security_passwordresettokens_on_conflict {
    constraint: vectric_security_passwordresettokens_constraint!
    update_columns: [vectric_security_passwordresettokens_update_column!]! = []
    where: vectric_security_passwordresettokens_bool_exp
}

"Ordering options when selecting data from \"vectric.security_passwordresettokens\"."
input vectric_security_passwordresettokens_order_by {
    expiryDate: order_by
    token: order_by
    username: order_by
}

"primary key columns input for table: vectric_security_passwordresettokens"
input vectric_security_passwordresettokens_pk_columns_input {
    token: String!
}

"input type for updating data in table \"vectric.security_passwordresettokens\""
input vectric_security_passwordresettokens_set_input {
    expiryDate: timestamptz
    token: String
    username: String
}

"Boolean expression to filter rows from the table \"vectric.security_userinvitations\". All fields are combined with a logical 'AND'."
input vectric_security_userinvitations_bool_exp {
    _and: [vectric_security_userinvitations_bool_exp!]
    _not: vectric_security_userinvitations_bool_exp
    _or: [vectric_security_userinvitations_bool_exp!]
    acceptedDate: timestamptz_comparison_exp
    adminofid: bigint_comparison_exp
    createDate: timestamptz_comparison_exp
    customerId: bigint_comparison_exp
    expirydate: timestamptz_comparison_exp
    staffofid: bigint_comparison_exp
    token: String_comparison_exp
    username: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.security_userinvitations\""
input vectric_security_userinvitations_inc_input {
    adminofid: bigint
    customerId: bigint
    staffofid: bigint
}

"input type for inserting data into table \"vectric.security_userinvitations\""
input vectric_security_userinvitations_insert_input {
    acceptedDate: timestamptz
    adminofid: bigint
    createDate: timestamptz
    customerId: bigint
    expirydate: timestamptz
    staffofid: bigint
    token: String
    username: String
}

"on conflict condition type for table \"vectric.security_userinvitations\""
input vectric_security_userinvitations_on_conflict {
    constraint: vectric_security_userinvitations_constraint!
    update_columns: [vectric_security_userinvitations_update_column!]! = []
    where: vectric_security_userinvitations_bool_exp
}

"Ordering options when selecting data from \"vectric.security_userinvitations\"."
input vectric_security_userinvitations_order_by {
    acceptedDate: order_by
    adminofid: order_by
    createDate: order_by
    customerId: order_by
    expirydate: order_by
    staffofid: order_by
    token: order_by
    username: order_by
}

"primary key columns input for table: vectric_security_userinvitations"
input vectric_security_userinvitations_pk_columns_input {
    token: String!
}

"input type for updating data in table \"vectric.security_userinvitations\""
input vectric_security_userinvitations_set_input {
    acceptedDate: timestamptz
    adminofid: bigint
    createDate: timestamptz
    customerId: bigint
    expirydate: timestamptz
    staffofid: bigint
    token: String
    username: String
}

"Boolean expression to filter rows from the table \"vectric.security_users\". All fields are combined with a logical 'AND'."
input vectric_security_users_bool_exp {
    _and: [vectric_security_users_bool_exp!]
    _not: vectric_security_users_bool_exp
    _or: [vectric_security_users_bool_exp!]
    accountNonExpired: Boolean_comparison_exp
    credentialsNonExpired: Boolean_comparison_exp
    enabled: Boolean_comparison_exp
    password: String_comparison_exp
    salesCustomerId: bigint_comparison_exp
    securityGroups: vectric_security_group_members_bool_exp
    username: String_comparison_exp
    voucherCode: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.security_users\""
input vectric_security_users_inc_input {
    salesCustomerId: bigint
}

"input type for inserting data into table \"vectric.security_users\""
input vectric_security_users_insert_input {
    accountNonExpired: Boolean
    credentialsNonExpired: Boolean
    enabled: Boolean
    password: String
    salesCustomerId: bigint
    securityGroups: vectric_security_group_members_arr_rel_insert_input
    username: String
    voucherCode: String
}

"input type for inserting object relation for remote table \"vectric.security_users\""
input vectric_security_users_obj_rel_insert_input {
    data: vectric_security_users_insert_input!
    "on conflict condition"
    on_conflict: vectric_security_users_on_conflict
}

"on conflict condition type for table \"vectric.security_users\""
input vectric_security_users_on_conflict {
    constraint: vectric_security_users_constraint!
    update_columns: [vectric_security_users_update_column!]! = []
    where: vectric_security_users_bool_exp
}

"Ordering options when selecting data from \"vectric.security_users\"."
input vectric_security_users_order_by {
    accountNonExpired: order_by
    credentialsNonExpired: order_by
    enabled: order_by
    password: order_by
    salesCustomerId: order_by
    securityGroups_aggregate: vectric_security_group_members_aggregate_order_by
    username: order_by
    voucherCode: order_by
}

"primary key columns input for table: vectric_security_users"
input vectric_security_users_pk_columns_input {
    username: String!
}

"input type for updating data in table \"vectric.security_users\""
input vectric_security_users_set_input {
    accountNonExpired: Boolean
    credentialsNonExpired: Boolean
    enabled: Boolean
    password: String
    salesCustomerId: bigint
    username: String
    voucherCode: String
}

"Boolean expression to filter rows from the table \"vectric.site_option_location\". All fields are combined with a logical 'AND'."
input vectric_site_option_location_bool_exp {
    _and: [vectric_site_option_location_bool_exp!]
    _not: vectric_site_option_location_bool_exp
    _or: [vectric_site_option_location_bool_exp!]
    locationid: bigint_comparison_exp
    name: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.site_option_location\""
input vectric_site_option_location_inc_input {
    locationid: bigint
}

"input type for inserting data into table \"vectric.site_option_location\""
input vectric_site_option_location_insert_input {
    locationid: bigint
    name: String
}

"input type for inserting object relation for remote table \"vectric.site_option_location\""
input vectric_site_option_location_obj_rel_insert_input {
    data: vectric_site_option_location_insert_input!
    "on conflict condition"
    on_conflict: vectric_site_option_location_on_conflict
}

"on conflict condition type for table \"vectric.site_option_location\""
input vectric_site_option_location_on_conflict {
    constraint: vectric_site_option_location_constraint!
    update_columns: [vectric_site_option_location_update_column!]! = []
    where: vectric_site_option_location_bool_exp
}

"Ordering options when selecting data from \"vectric.site_option_location\"."
input vectric_site_option_location_order_by {
    locationid: order_by
    name: order_by
}

"primary key columns input for table: vectric_site_option_location"
input vectric_site_option_location_pk_columns_input {
    locationid: bigint!
}

"input type for updating data in table \"vectric.site_option_location\""
input vectric_site_option_location_set_input {
    locationid: bigint
    name: String
}

"Boolean expression to filter rows from the table \"vectric.site_options\". All fields are combined with a logical 'AND'."
input vectric_site_options_bool_exp {
    _and: [vectric_site_options_bool_exp!]
    _not: vectric_site_options_bool_exp
    _or: [vectric_site_options_bool_exp!]
    description: String_comparison_exp
    optionid: bigint_comparison_exp
    optionname: String_comparison_exp
    site_optiositeOptionLocationn_location: vectric_site_option_location_bool_exp
    siteid: bigint_comparison_exp
    stringval: String_comparison_exp
    value: Boolean_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.site_options\""
input vectric_site_options_inc_input {
    optionid: bigint
    siteid: bigint
}

"input type for inserting data into table \"vectric.site_options\""
input vectric_site_options_insert_input {
    description: String
    optionid: bigint
    optionname: String
    site_optiositeOptionLocationn_location: vectric_site_option_location_obj_rel_insert_input
    siteid: bigint
    stringval: String
    value: Boolean
}

"on conflict condition type for table \"vectric.site_options\""
input vectric_site_options_on_conflict {
    constraint: vectric_site_options_constraint!
    update_columns: [vectric_site_options_update_column!]! = []
    where: vectric_site_options_bool_exp
}

"Ordering options when selecting data from \"vectric.site_options\"."
input vectric_site_options_order_by {
    description: order_by
    optionid: order_by
    optionname: order_by
    site_optiositeOptionLocationn_location: vectric_site_option_location_order_by
    siteid: order_by
    stringval: order_by
    value: order_by
}

"primary key columns input for table: vectric_site_options"
input vectric_site_options_pk_columns_input {
    optionid: bigint!
}

"input type for updating data in table \"vectric.site_options\""
input vectric_site_options_set_input {
    description: String
    optionid: bigint
    optionname: String
    siteid: bigint
    stringval: String
    value: Boolean
}

"Boolean expression to filter rows from the table \"vectric.subscription_contract_status\". All fields are combined with a logical 'AND'."
input vectric_subscription_contract_status_bool_exp {
    _and: [vectric_subscription_contract_status_bool_exp!]
    _not: vectric_subscription_contract_status_bool_exp
    _or: [vectric_subscription_contract_status_bool_exp!]
    status: String_comparison_exp
}

"input type for inserting data into table \"vectric.subscription_contract_status\""
input vectric_subscription_contract_status_insert_input {
    status: String
}

"on conflict condition type for table \"vectric.subscription_contract_status\""
input vectric_subscription_contract_status_on_conflict {
    constraint: vectric_subscription_contract_status_constraint!
    update_columns: [vectric_subscription_contract_status_update_column!]! = []
    where: vectric_subscription_contract_status_bool_exp
}

"Ordering options when selecting data from \"vectric.subscription_contract_status\"."
input vectric_subscription_contract_status_order_by {
    status: order_by
}

"primary key columns input for table: vectric_subscription_contract_status"
input vectric_subscription_contract_status_pk_columns_input {
    status: String!
}

"input type for updating data in table \"vectric.subscription_contract_status\""
input vectric_subscription_contract_status_set_input {
    status: String
}

"Boolean expression to filter rows from the table \"vectric.subscription_contracts\". All fields are combined with a logical 'AND'."
input vectric_subscription_contracts_bool_exp {
    _and: [vectric_subscription_contracts_bool_exp!]
    _not: vectric_subscription_contracts_bool_exp
    _or: [vectric_subscription_contracts_bool_exp!]
    dateEnding: timestamp_comparison_exp
    dateStarted: timestamp_comparison_exp
    events: vectric_subscription_events_bool_exp
    orderItem: vectric_organization_order_items_bool_exp
    orderItemId: Int_comparison_exp
    status: String_comparison_exp
    subscriptionContractId: Int_comparison_exp
    subscriptionId: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.subscription_contracts\""
input vectric_subscription_contracts_inc_input {
    orderItemId: Int
    subscriptionContractId: Int
}

"input type for inserting data into table \"vectric.subscription_contracts\""
input vectric_subscription_contracts_insert_input {
    dateEnding: timestamp
    dateStarted: timestamp
    events: vectric_subscription_events_arr_rel_insert_input
    orderItem: vectric_organization_order_items_obj_rel_insert_input
    orderItemId: Int
    status: String
    subscriptionContractId: Int
    subscriptionId: String
}

"input type for inserting object relation for remote table \"vectric.subscription_contracts\""
input vectric_subscription_contracts_obj_rel_insert_input {
    data: vectric_subscription_contracts_insert_input!
    "on conflict condition"
    on_conflict: vectric_subscription_contracts_on_conflict
}

"on conflict condition type for table \"vectric.subscription_contracts\""
input vectric_subscription_contracts_on_conflict {
    constraint: vectric_subscription_contracts_constraint!
    update_columns: [vectric_subscription_contracts_update_column!]! = []
    where: vectric_subscription_contracts_bool_exp
}

"Ordering options when selecting data from \"vectric.subscription_contracts\"."
input vectric_subscription_contracts_order_by {
    dateEnding: order_by
    dateStarted: order_by
    events_aggregate: vectric_subscription_events_aggregate_order_by
    orderItem: vectric_organization_order_items_order_by
    orderItemId: order_by
    status: order_by
    subscriptionContractId: order_by
    subscriptionId: order_by
}

"primary key columns input for table: vectric_subscription_contracts"
input vectric_subscription_contracts_pk_columns_input {
    subscriptionContractId: Int!
}

"input type for updating data in table \"vectric.subscription_contracts\""
input vectric_subscription_contracts_set_input {
    dateEnding: timestamp
    dateStarted: timestamp
    orderItemId: Int
    status: String
    subscriptionContractId: Int
    subscriptionId: String
}

"order by aggregate values of table \"vectric.subscription_events\""
input vectric_subscription_events_aggregate_order_by {
    avg: vectric_subscription_events_avg_order_by
    count: order_by
    max: vectric_subscription_events_max_order_by
    min: vectric_subscription_events_min_order_by
    stddev: vectric_subscription_events_stddev_order_by
    stddev_pop: vectric_subscription_events_stddev_pop_order_by
    stddev_samp: vectric_subscription_events_stddev_samp_order_by
    sum: vectric_subscription_events_sum_order_by
    var_pop: vectric_subscription_events_var_pop_order_by
    var_samp: vectric_subscription_events_var_samp_order_by
    variance: vectric_subscription_events_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.subscription_events\""
input vectric_subscription_events_arr_rel_insert_input {
    data: [vectric_subscription_events_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_subscription_events_on_conflict
}

"order by avg() on columns of table \"vectric.subscription_events\""
input vectric_subscription_events_avg_order_by {
    eventId: order_by
    orderItemId: order_by
    subscriptionContractId: order_by
}

"Boolean expression to filter rows from the table \"vectric.subscription_events\". All fields are combined with a logical 'AND'."
input vectric_subscription_events_bool_exp {
    _and: [vectric_subscription_events_bool_exp!]
    _not: vectric_subscription_events_bool_exp
    _or: [vectric_subscription_events_bool_exp!]
    actionTaken: String_comparison_exp
    dateCreated: timestamp_comparison_exp
    dateProcessed: timestamp_comparison_exp
    eventId: Int_comparison_exp
    eventType: String_comparison_exp
    fastspringInternalOrderId: String_comparison_exp
    fastspringOrderReference: String_comparison_exp
    fastspringSubscriptionId: String_comparison_exp
    orderItemId: Int_comparison_exp
    subscriptionContractId: Int_comparison_exp
    subscriptionDateStarted: timestamp_comparison_exp
    subscriptionDeactivationDate: timestamp_comparison_exp
    subscriptionNextRebillDate: timestamp_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.subscription_events\""
input vectric_subscription_events_inc_input {
    eventId: Int
    orderItemId: Int
    subscriptionContractId: Int
}

"input type for inserting data into table \"vectric.subscription_events\""
input vectric_subscription_events_insert_input {
    actionTaken: String
    dateCreated: timestamp
    dateProcessed: timestamp
    eventId: Int
    eventType: String
    fastspringInternalOrderId: String
    fastspringOrderReference: String
    fastspringSubscriptionId: String
    orderItemId: Int
    subscriptionContractId: Int
    subscriptionDateStarted: timestamp
    subscriptionDeactivationDate: timestamp
    subscriptionNextRebillDate: timestamp
}

"order by max() on columns of table \"vectric.subscription_events\""
input vectric_subscription_events_max_order_by {
    actionTaken: order_by
    dateCreated: order_by
    dateProcessed: order_by
    eventId: order_by
    eventType: order_by
    fastspringInternalOrderId: order_by
    fastspringOrderReference: order_by
    fastspringSubscriptionId: order_by
    orderItemId: order_by
    subscriptionContractId: order_by
    subscriptionDateStarted: order_by
    subscriptionDeactivationDate: order_by
    subscriptionNextRebillDate: order_by
}

"order by min() on columns of table \"vectric.subscription_events\""
input vectric_subscription_events_min_order_by {
    actionTaken: order_by
    dateCreated: order_by
    dateProcessed: order_by
    eventId: order_by
    eventType: order_by
    fastspringInternalOrderId: order_by
    fastspringOrderReference: order_by
    fastspringSubscriptionId: order_by
    orderItemId: order_by
    subscriptionContractId: order_by
    subscriptionDateStarted: order_by
    subscriptionDeactivationDate: order_by
    subscriptionNextRebillDate: order_by
}

"on conflict condition type for table \"vectric.subscription_events\""
input vectric_subscription_events_on_conflict {
    constraint: vectric_subscription_events_constraint!
    update_columns: [vectric_subscription_events_update_column!]! = []
    where: vectric_subscription_events_bool_exp
}

"Ordering options when selecting data from \"vectric.subscription_events\"."
input vectric_subscription_events_order_by {
    actionTaken: order_by
    dateCreated: order_by
    dateProcessed: order_by
    eventId: order_by
    eventType: order_by
    fastspringInternalOrderId: order_by
    fastspringOrderReference: order_by
    fastspringSubscriptionId: order_by
    orderItemId: order_by
    subscriptionContractId: order_by
    subscriptionDateStarted: order_by
    subscriptionDeactivationDate: order_by
    subscriptionNextRebillDate: order_by
}

"primary key columns input for table: vectric_subscription_events"
input vectric_subscription_events_pk_columns_input {
    eventId: Int!
}

"input type for updating data in table \"vectric.subscription_events\""
input vectric_subscription_events_set_input {
    actionTaken: String
    dateCreated: timestamp
    dateProcessed: timestamp
    eventId: Int
    eventType: String
    fastspringInternalOrderId: String
    fastspringOrderReference: String
    fastspringSubscriptionId: String
    orderItemId: Int
    subscriptionContractId: Int
    subscriptionDateStarted: timestamp
    subscriptionDeactivationDate: timestamp
    subscriptionNextRebillDate: timestamp
}

"order by stddev() on columns of table \"vectric.subscription_events\""
input vectric_subscription_events_stddev_order_by {
    eventId: order_by
    orderItemId: order_by
    subscriptionContractId: order_by
}

"order by stddev_pop() on columns of table \"vectric.subscription_events\""
input vectric_subscription_events_stddev_pop_order_by {
    eventId: order_by
    orderItemId: order_by
    subscriptionContractId: order_by
}

"order by stddev_samp() on columns of table \"vectric.subscription_events\""
input vectric_subscription_events_stddev_samp_order_by {
    eventId: order_by
    orderItemId: order_by
    subscriptionContractId: order_by
}

"order by sum() on columns of table \"vectric.subscription_events\""
input vectric_subscription_events_sum_order_by {
    eventId: order_by
    orderItemId: order_by
    subscriptionContractId: order_by
}

"order by var_pop() on columns of table \"vectric.subscription_events\""
input vectric_subscription_events_var_pop_order_by {
    eventId: order_by
    orderItemId: order_by
    subscriptionContractId: order_by
}

"order by var_samp() on columns of table \"vectric.subscription_events\""
input vectric_subscription_events_var_samp_order_by {
    eventId: order_by
    orderItemId: order_by
    subscriptionContractId: order_by
}

"order by variance() on columns of table \"vectric.subscription_events\""
input vectric_subscription_events_variance_order_by {
    eventId: order_by
    orderItemId: order_by
    subscriptionContractId: order_by
}

"Boolean expression to filter rows from the table \"vectric.toolpath_saver_token\". All fields are combined with a logical 'AND'."
input vectric_toolpath_saver_token_bool_exp {
    _and: [vectric_toolpath_saver_token_bool_exp!]
    _not: vectric_toolpath_saver_token_bool_exp
    _or: [vectric_toolpath_saver_token_bool_exp!]
    customer: vectric_sales_customers_bool_exp
    customerId: bigint_comparison_exp
    dateExpired: timestamptz_comparison_exp
    dateGenerated: timestamptz_comparison_exp
    product: vectric_products_products_bool_exp
    productId: bigint_comparison_exp
    token: String_comparison_exp
    toolpathSaverTokenId: bigint_comparison_exp
    used: Int_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.toolpath_saver_token\""
input vectric_toolpath_saver_token_inc_input {
    customerId: bigint
    productId: bigint
    toolpathSaverTokenId: bigint
    used: Int
}

"input type for inserting data into table \"vectric.toolpath_saver_token\""
input vectric_toolpath_saver_token_insert_input {
    customer: vectric_sales_customers_obj_rel_insert_input
    customerId: bigint
    dateExpired: timestamptz
    dateGenerated: timestamptz
    product: vectric_products_products_obj_rel_insert_input
    productId: bigint
    token: String
    toolpathSaverTokenId: bigint
    used: Int
}

"on conflict condition type for table \"vectric.toolpath_saver_token\""
input vectric_toolpath_saver_token_on_conflict {
    constraint: vectric_toolpath_saver_token_constraint!
    update_columns: [vectric_toolpath_saver_token_update_column!]! = []
    where: vectric_toolpath_saver_token_bool_exp
}

"Ordering options when selecting data from \"vectric.toolpath_saver_token\"."
input vectric_toolpath_saver_token_order_by {
    customer: vectric_sales_customers_order_by
    customerId: order_by
    dateExpired: order_by
    dateGenerated: order_by
    product: vectric_products_products_order_by
    productId: order_by
    token: order_by
    toolpathSaverTokenId: order_by
    used: order_by
}

"primary key columns input for table: vectric_toolpath_saver_token"
input vectric_toolpath_saver_token_pk_columns_input {
    toolpathSaverTokenId: bigint!
}

"input type for updating data in table \"vectric.toolpath_saver_token\""
input vectric_toolpath_saver_token_set_input {
    customerId: bigint
    dateExpired: timestamptz
    dateGenerated: timestamptz
    productId: bigint
    token: String
    toolpathSaverTokenId: bigint
    used: Int
}

"Boolean expression to filter rows from the table \"vectric.trial_order\". All fields are combined with a logical 'AND'."
input vectric_trial_order_bool_exp {
    _and: [vectric_trial_order_bool_exp!]
    _not: vectric_trial_order_bool_exp
    _or: [vectric_trial_order_bool_exp!]
    customer: vectric_sales_customers_bool_exp
    customerId: bigint_comparison_exp
    endDate: timestamptz_comparison_exp
    orderId: bigint_comparison_exp
    product: vectric_products_products_bool_exp
    productId: bigint_comparison_exp
    startDate: timestamptz_comparison_exp
    valid: Boolean_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.trial_order\""
input vectric_trial_order_inc_input {
    customerId: bigint
    orderId: bigint
    productId: bigint
}

"input type for inserting data into table \"vectric.trial_order\""
input vectric_trial_order_insert_input {
    customer: vectric_sales_customers_obj_rel_insert_input
    customerId: bigint
    endDate: timestamptz
    orderId: bigint
    product: vectric_products_products_obj_rel_insert_input
    productId: bigint
    startDate: timestamptz
    valid: Boolean
}

"on conflict condition type for table \"vectric.trial_order\""
input vectric_trial_order_on_conflict {
    constraint: vectric_trial_order_constraint!
    update_columns: [vectric_trial_order_update_column!]! = []
    where: vectric_trial_order_bool_exp
}

"Ordering options when selecting data from \"vectric.trial_order\"."
input vectric_trial_order_order_by {
    customer: vectric_sales_customers_order_by
    customerId: order_by
    endDate: order_by
    orderId: order_by
    product: vectric_products_products_order_by
    productId: order_by
    startDate: order_by
    valid: order_by
}

"primary key columns input for table: vectric_trial_order"
input vectric_trial_order_pk_columns_input {
    orderId: bigint!
}

"input type for updating data in table \"vectric.trial_order\""
input vectric_trial_order_set_input {
    customerId: bigint
    endDate: timestamptz
    orderId: bigint
    productId: bigint
    startDate: timestamptz
    valid: Boolean
}

"Boolean expression to filter rows from the table \"vectric.update_requests\". All fields are combined with a logical 'AND'."
input vectric_update_requests_bool_exp {
    _and: [vectric_update_requests_bool_exp!]
    _not: vectric_update_requests_bool_exp
    _or: [vectric_update_requests_bool_exp!]
    dateAccessed: timestamptz_comparison_exp
    ipAddress: String_comparison_exp
    majorVersion: bigint_comparison_exp
    minorVersionOOX: bigint_comparison_exp
    minorVersionOXO: bigint_comparison_exp
    minorVersionXOO: bigint_comparison_exp
    osMajorVersion: bigint_comparison_exp
    osMinorVersion: bigint_comparison_exp
    productName: String_comparison_exp
    requestId: bigint_comparison_exp
    wProcessorArch: bigint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.update_requests\""
input vectric_update_requests_inc_input {
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    osMajorVersion: bigint
    osMinorVersion: bigint
    requestId: bigint
    wProcessorArch: bigint
}

"input type for inserting data into table \"vectric.update_requests\""
input vectric_update_requests_insert_input {
    dateAccessed: timestamptz
    ipAddress: String
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    osMajorVersion: bigint
    osMinorVersion: bigint
    productName: String
    requestId: bigint
    wProcessorArch: bigint
}

"on conflict condition type for table \"vectric.update_requests\""
input vectric_update_requests_on_conflict {
    constraint: vectric_update_requests_constraint!
    update_columns: [vectric_update_requests_update_column!]! = []
    where: vectric_update_requests_bool_exp
}

"Ordering options when selecting data from \"vectric.update_requests\"."
input vectric_update_requests_order_by {
    dateAccessed: order_by
    ipAddress: order_by
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    osMajorVersion: order_by
    osMinorVersion: order_by
    productName: order_by
    requestId: order_by
    wProcessorArch: order_by
}

"primary key columns input for table: vectric_update_requests"
input vectric_update_requests_pk_columns_input {
    requestId: bigint!
}

"input type for updating data in table \"vectric.update_requests\""
input vectric_update_requests_set_input {
    dateAccessed: timestamptz
    ipAddress: String
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    osMajorVersion: bigint
    osMinorVersion: bigint
    productName: String
    requestId: bigint
    wProcessorArch: bigint
}

"order by aggregate values of table \"vectric.upgrade_tokens\""
input vectric_upgrade_tokens_aggregate_order_by {
    avg: vectric_upgrade_tokens_avg_order_by
    count: order_by
    max: vectric_upgrade_tokens_max_order_by
    min: vectric_upgrade_tokens_min_order_by
    stddev: vectric_upgrade_tokens_stddev_order_by
    stddev_pop: vectric_upgrade_tokens_stddev_pop_order_by
    stddev_samp: vectric_upgrade_tokens_stddev_samp_order_by
    sum: vectric_upgrade_tokens_sum_order_by
    var_pop: vectric_upgrade_tokens_var_pop_order_by
    var_samp: vectric_upgrade_tokens_var_samp_order_by
    variance: vectric_upgrade_tokens_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.upgrade_tokens\""
input vectric_upgrade_tokens_arr_rel_insert_input {
    data: [vectric_upgrade_tokens_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_upgrade_tokens_on_conflict
}

"order by avg() on columns of table \"vectric.upgrade_tokens\""
input vectric_upgrade_tokens_avg_order_by {
    customerId: order_by
    orderItemProductId: order_by
    upgradeEligibilityId: order_by
    upgradedToOrderItemProduct: order_by
}

"Boolean expression to filter rows from the table \"vectric.upgrade_tokens\". All fields are combined with a logical 'AND'."
input vectric_upgrade_tokens_bool_exp {
    _and: [vectric_upgrade_tokens_bool_exp!]
    _not: vectric_upgrade_tokens_bool_exp
    _or: [vectric_upgrade_tokens_bool_exp!]
    customerId: bigint_comparison_exp
    dateCreated: timestamptz_comparison_exp
    dateUsed: timestamptz_comparison_exp
    fromProduct: vectric_sales_salesitem_products_bool_exp
    orderItemProductId: bigint_comparison_exp
    toProduct: vectric_products_upgrade_eligibility_bool_exp
    token: String_comparison_exp
    upgradeEligibilityId: bigint_comparison_exp
    upgradedToOrderItemProduct: bigint_comparison_exp
    used: Boolean_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.upgrade_tokens\""
input vectric_upgrade_tokens_inc_input {
    customerId: bigint
    orderItemProductId: bigint
    upgradeEligibilityId: bigint
    upgradedToOrderItemProduct: bigint
}

"input type for inserting data into table \"vectric.upgrade_tokens\""
input vectric_upgrade_tokens_insert_input {
    customerId: bigint
    dateCreated: timestamptz
    dateUsed: timestamptz
    fromProduct: vectric_sales_salesitem_products_obj_rel_insert_input
    orderItemProductId: bigint
    toProduct: vectric_products_upgrade_eligibility_obj_rel_insert_input
    token: String
    upgradeEligibilityId: bigint
    upgradedToOrderItemProduct: bigint
    used: Boolean
}

"order by max() on columns of table \"vectric.upgrade_tokens\""
input vectric_upgrade_tokens_max_order_by {
    customerId: order_by
    dateCreated: order_by
    dateUsed: order_by
    orderItemProductId: order_by
    token: order_by
    upgradeEligibilityId: order_by
    upgradedToOrderItemProduct: order_by
}

"order by min() on columns of table \"vectric.upgrade_tokens\""
input vectric_upgrade_tokens_min_order_by {
    customerId: order_by
    dateCreated: order_by
    dateUsed: order_by
    orderItemProductId: order_by
    token: order_by
    upgradeEligibilityId: order_by
    upgradedToOrderItemProduct: order_by
}

"on conflict condition type for table \"vectric.upgrade_tokens\""
input vectric_upgrade_tokens_on_conflict {
    constraint: vectric_upgrade_tokens_constraint!
    update_columns: [vectric_upgrade_tokens_update_column!]! = []
    where: vectric_upgrade_tokens_bool_exp
}

"Ordering options when selecting data from \"vectric.upgrade_tokens\"."
input vectric_upgrade_tokens_order_by {
    customerId: order_by
    dateCreated: order_by
    dateUsed: order_by
    fromProduct: vectric_sales_salesitem_products_order_by
    orderItemProductId: order_by
    toProduct: vectric_products_upgrade_eligibility_order_by
    token: order_by
    upgradeEligibilityId: order_by
    upgradedToOrderItemProduct: order_by
    used: order_by
}

"primary key columns input for table: vectric_upgrade_tokens"
input vectric_upgrade_tokens_pk_columns_input {
    token: String!
}

"input type for updating data in table \"vectric.upgrade_tokens\""
input vectric_upgrade_tokens_set_input {
    customerId: bigint
    dateCreated: timestamptz
    dateUsed: timestamptz
    orderItemProductId: bigint
    token: String
    upgradeEligibilityId: bigint
    upgradedToOrderItemProduct: bigint
    used: Boolean
}

"order by stddev() on columns of table \"vectric.upgrade_tokens\""
input vectric_upgrade_tokens_stddev_order_by {
    customerId: order_by
    orderItemProductId: order_by
    upgradeEligibilityId: order_by
    upgradedToOrderItemProduct: order_by
}

"order by stddev_pop() on columns of table \"vectric.upgrade_tokens\""
input vectric_upgrade_tokens_stddev_pop_order_by {
    customerId: order_by
    orderItemProductId: order_by
    upgradeEligibilityId: order_by
    upgradedToOrderItemProduct: order_by
}

"order by stddev_samp() on columns of table \"vectric.upgrade_tokens\""
input vectric_upgrade_tokens_stddev_samp_order_by {
    customerId: order_by
    orderItemProductId: order_by
    upgradeEligibilityId: order_by
    upgradedToOrderItemProduct: order_by
}

"order by sum() on columns of table \"vectric.upgrade_tokens\""
input vectric_upgrade_tokens_sum_order_by {
    customerId: order_by
    orderItemProductId: order_by
    upgradeEligibilityId: order_by
    upgradedToOrderItemProduct: order_by
}

"order by var_pop() on columns of table \"vectric.upgrade_tokens\""
input vectric_upgrade_tokens_var_pop_order_by {
    customerId: order_by
    orderItemProductId: order_by
    upgradeEligibilityId: order_by
    upgradedToOrderItemProduct: order_by
}

"order by var_samp() on columns of table \"vectric.upgrade_tokens\""
input vectric_upgrade_tokens_var_samp_order_by {
    customerId: order_by
    orderItemProductId: order_by
    upgradeEligibilityId: order_by
    upgradedToOrderItemProduct: order_by
}

"order by variance() on columns of table \"vectric.upgrade_tokens\""
input vectric_upgrade_tokens_variance_order_by {
    customerId: order_by
    orderItemProductId: order_by
    upgradeEligibilityId: order_by
    upgradedToOrderItemProduct: order_by
}

"Boolean expression to filter rows from the table \"vectric.upgrades_feature\". All fields are combined with a logical 'AND'."
input vectric_upgrades_feature_bool_exp {
    _and: [vectric_upgrades_feature_bool_exp!]
    _not: vectric_upgrades_feature_bool_exp
    _or: [vectric_upgrades_feature_bool_exp!]
    enabled: Boolean_comparison_exp
    extendedDescription: String_comparison_exp
    featureId: String_comparison_exp
    title: String_comparison_exp
    upgradeProductTypeFeatures: vectric_upgrades_product_type_feature_bool_exp
    upgradeVersionFeatures: vectric_upgrades_version_feature_bool_exp
}

"input type for inserting data into table \"vectric.upgrades_feature\""
input vectric_upgrades_feature_insert_input {
    enabled: Boolean
    extendedDescription: String
    featureId: String
    title: String
    upgradeProductTypeFeatures: vectric_upgrades_product_type_feature_arr_rel_insert_input
    upgradeVersionFeatures: vectric_upgrades_version_feature_arr_rel_insert_input
}

"input type for inserting object relation for remote table \"vectric.upgrades_feature\""
input vectric_upgrades_feature_obj_rel_insert_input {
    data: vectric_upgrades_feature_insert_input!
    "on conflict condition"
    on_conflict: vectric_upgrades_feature_on_conflict
}

"on conflict condition type for table \"vectric.upgrades_feature\""
input vectric_upgrades_feature_on_conflict {
    constraint: vectric_upgrades_feature_constraint!
    update_columns: [vectric_upgrades_feature_update_column!]! = []
    where: vectric_upgrades_feature_bool_exp
}

"Ordering options when selecting data from \"vectric.upgrades_feature\"."
input vectric_upgrades_feature_order_by {
    enabled: order_by
    extendedDescription: order_by
    featureId: order_by
    title: order_by
    upgradeProductTypeFeatures_aggregate: vectric_upgrades_product_type_feature_aggregate_order_by
    upgradeVersionFeatures_aggregate: vectric_upgrades_version_feature_aggregate_order_by
}

"primary key columns input for table: vectric_upgrades_feature"
input vectric_upgrades_feature_pk_columns_input {
    featureId: String!
}

"input type for updating data in table \"vectric.upgrades_feature\""
input vectric_upgrades_feature_set_input {
    enabled: Boolean
    extendedDescription: String
    featureId: String
    title: String
}

"order by aggregate values of table \"vectric.upgrades_product_type_feature\""
input vectric_upgrades_product_type_feature_aggregate_order_by {
    avg: vectric_upgrades_product_type_feature_avg_order_by
    count: order_by
    max: vectric_upgrades_product_type_feature_max_order_by
    min: vectric_upgrades_product_type_feature_min_order_by
    stddev: vectric_upgrades_product_type_feature_stddev_order_by
    stddev_pop: vectric_upgrades_product_type_feature_stddev_pop_order_by
    stddev_samp: vectric_upgrades_product_type_feature_stddev_samp_order_by
    sum: vectric_upgrades_product_type_feature_sum_order_by
    var_pop: vectric_upgrades_product_type_feature_var_pop_order_by
    var_samp: vectric_upgrades_product_type_feature_var_samp_order_by
    variance: vectric_upgrades_product_type_feature_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.upgrades_product_type_feature\""
input vectric_upgrades_product_type_feature_arr_rel_insert_input {
    data: [vectric_upgrades_product_type_feature_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_upgrades_product_type_feature_on_conflict
}

"order by avg() on columns of table \"vectric.upgrades_product_type_feature\""
input vectric_upgrades_product_type_feature_avg_order_by {
    fromProductType: order_by
    ranking: order_by
    toProductType: order_by
    upgradeId: order_by
}

"Boolean expression to filter rows from the table \"vectric.upgrades_product_type_feature\". All fields are combined with a logical 'AND'."
input vectric_upgrades_product_type_feature_bool_exp {
    _and: [vectric_upgrades_product_type_feature_bool_exp!]
    _not: vectric_upgrades_product_type_feature_bool_exp
    _or: [vectric_upgrades_product_type_feature_bool_exp!]
    feature: String_comparison_exp
    fromProductType: bigint_comparison_exp
    fromProductTypeObject: vectric_products_producttype_bool_exp
    ranking: bigint_comparison_exp
    toProductType: bigint_comparison_exp
    toProductTypeObject: vectric_products_producttype_bool_exp
    upgradeFeatureObject: vectric_upgrades_feature_bool_exp
    upgradeId: bigint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.upgrades_product_type_feature\""
input vectric_upgrades_product_type_feature_inc_input {
    fromProductType: bigint
    ranking: bigint
    toProductType: bigint
    upgradeId: bigint
}

"input type for inserting data into table \"vectric.upgrades_product_type_feature\""
input vectric_upgrades_product_type_feature_insert_input {
    feature: String
    fromProductType: bigint
    fromProductTypeObject: vectric_products_producttype_obj_rel_insert_input
    ranking: bigint
    toProductType: bigint
    toProductTypeObject: vectric_products_producttype_obj_rel_insert_input
    upgradeFeatureObject: vectric_upgrades_feature_obj_rel_insert_input
    upgradeId: bigint
}

"order by max() on columns of table \"vectric.upgrades_product_type_feature\""
input vectric_upgrades_product_type_feature_max_order_by {
    feature: order_by
    fromProductType: order_by
    ranking: order_by
    toProductType: order_by
    upgradeId: order_by
}

"order by min() on columns of table \"vectric.upgrades_product_type_feature\""
input vectric_upgrades_product_type_feature_min_order_by {
    feature: order_by
    fromProductType: order_by
    ranking: order_by
    toProductType: order_by
    upgradeId: order_by
}

"on conflict condition type for table \"vectric.upgrades_product_type_feature\""
input vectric_upgrades_product_type_feature_on_conflict {
    constraint: vectric_upgrades_product_type_feature_constraint!
    update_columns: [vectric_upgrades_product_type_feature_update_column!]! = []
    where: vectric_upgrades_product_type_feature_bool_exp
}

"Ordering options when selecting data from \"vectric.upgrades_product_type_feature\"."
input vectric_upgrades_product_type_feature_order_by {
    feature: order_by
    fromProductType: order_by
    fromProductTypeObject: vectric_products_producttype_order_by
    ranking: order_by
    toProductType: order_by
    toProductTypeObject: vectric_products_producttype_order_by
    upgradeFeatureObject: vectric_upgrades_feature_order_by
    upgradeId: order_by
}

"primary key columns input for table: vectric_upgrades_product_type_feature"
input vectric_upgrades_product_type_feature_pk_columns_input {
    upgradeId: bigint!
}

"input type for updating data in table \"vectric.upgrades_product_type_feature\""
input vectric_upgrades_product_type_feature_set_input {
    feature: String
    fromProductType: bigint
    ranking: bigint
    toProductType: bigint
    upgradeId: bigint
}

"order by stddev() on columns of table \"vectric.upgrades_product_type_feature\""
input vectric_upgrades_product_type_feature_stddev_order_by {
    fromProductType: order_by
    ranking: order_by
    toProductType: order_by
    upgradeId: order_by
}

"order by stddev_pop() on columns of table \"vectric.upgrades_product_type_feature\""
input vectric_upgrades_product_type_feature_stddev_pop_order_by {
    fromProductType: order_by
    ranking: order_by
    toProductType: order_by
    upgradeId: order_by
}

"order by stddev_samp() on columns of table \"vectric.upgrades_product_type_feature\""
input vectric_upgrades_product_type_feature_stddev_samp_order_by {
    fromProductType: order_by
    ranking: order_by
    toProductType: order_by
    upgradeId: order_by
}

"order by sum() on columns of table \"vectric.upgrades_product_type_feature\""
input vectric_upgrades_product_type_feature_sum_order_by {
    fromProductType: order_by
    ranking: order_by
    toProductType: order_by
    upgradeId: order_by
}

"order by var_pop() on columns of table \"vectric.upgrades_product_type_feature\""
input vectric_upgrades_product_type_feature_var_pop_order_by {
    fromProductType: order_by
    ranking: order_by
    toProductType: order_by
    upgradeId: order_by
}

"order by var_samp() on columns of table \"vectric.upgrades_product_type_feature\""
input vectric_upgrades_product_type_feature_var_samp_order_by {
    fromProductType: order_by
    ranking: order_by
    toProductType: order_by
    upgradeId: order_by
}

"order by variance() on columns of table \"vectric.upgrades_product_type_feature\""
input vectric_upgrades_product_type_feature_variance_order_by {
    fromProductType: order_by
    ranking: order_by
    toProductType: order_by
    upgradeId: order_by
}

"order by aggregate values of table \"vectric.upgrades_version_feature\""
input vectric_upgrades_version_feature_aggregate_order_by {
    avg: vectric_upgrades_version_feature_avg_order_by
    count: order_by
    max: vectric_upgrades_version_feature_max_order_by
    min: vectric_upgrades_version_feature_min_order_by
    stddev: vectric_upgrades_version_feature_stddev_order_by
    stddev_pop: vectric_upgrades_version_feature_stddev_pop_order_by
    stddev_samp: vectric_upgrades_version_feature_stddev_samp_order_by
    sum: vectric_upgrades_version_feature_sum_order_by
    var_pop: vectric_upgrades_version_feature_var_pop_order_by
    var_samp: vectric_upgrades_version_feature_var_samp_order_by
    variance: vectric_upgrades_version_feature_variance_order_by
}

"input type for inserting array relation for remote table \"vectric.upgrades_version_feature\""
input vectric_upgrades_version_feature_arr_rel_insert_input {
    data: [vectric_upgrades_version_feature_insert_input!]!
    "on conflict condition"
    on_conflict: vectric_upgrades_version_feature_on_conflict
}

"order by avg() on columns of table \"vectric.upgrades_version_feature\""
input vectric_upgrades_version_feature_avg_order_by {
    majorVersion: order_by
    minorVersion: order_by
    productType: order_by
    ranking: order_by
    upgradeId: order_by
}

"Boolean expression to filter rows from the table \"vectric.upgrades_version_feature\". All fields are combined with a logical 'AND'."
input vectric_upgrades_version_feature_bool_exp {
    _and: [vectric_upgrades_version_feature_bool_exp!]
    _not: vectric_upgrades_version_feature_bool_exp
    _or: [vectric_upgrades_version_feature_bool_exp!]
    feature: String_comparison_exp
    majorVersion: bigint_comparison_exp
    minorVersion: bigint_comparison_exp
    productType: bigint_comparison_exp
    productTypeObject: vectric_products_producttype_bool_exp
    ranking: bigint_comparison_exp
    upgradeFeatureObject: vectric_upgrades_feature_bool_exp
    upgradeId: bigint_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.upgrades_version_feature\""
input vectric_upgrades_version_feature_inc_input {
    majorVersion: bigint
    minorVersion: bigint
    productType: bigint
    ranking: bigint
    upgradeId: bigint
}

"input type for inserting data into table \"vectric.upgrades_version_feature\""
input vectric_upgrades_version_feature_insert_input {
    feature: String
    majorVersion: bigint
    minorVersion: bigint
    productType: bigint
    productTypeObject: vectric_products_producttype_obj_rel_insert_input
    ranking: bigint
    upgradeFeatureObject: vectric_upgrades_feature_obj_rel_insert_input
    upgradeId: bigint
}

"order by max() on columns of table \"vectric.upgrades_version_feature\""
input vectric_upgrades_version_feature_max_order_by {
    feature: order_by
    majorVersion: order_by
    minorVersion: order_by
    productType: order_by
    ranking: order_by
    upgradeId: order_by
}

"order by min() on columns of table \"vectric.upgrades_version_feature\""
input vectric_upgrades_version_feature_min_order_by {
    feature: order_by
    majorVersion: order_by
    minorVersion: order_by
    productType: order_by
    ranking: order_by
    upgradeId: order_by
}

"on conflict condition type for table \"vectric.upgrades_version_feature\""
input vectric_upgrades_version_feature_on_conflict {
    constraint: vectric_upgrades_version_feature_constraint!
    update_columns: [vectric_upgrades_version_feature_update_column!]! = []
    where: vectric_upgrades_version_feature_bool_exp
}

"Ordering options when selecting data from \"vectric.upgrades_version_feature\"."
input vectric_upgrades_version_feature_order_by {
    feature: order_by
    majorVersion: order_by
    minorVersion: order_by
    productType: order_by
    productTypeObject: vectric_products_producttype_order_by
    ranking: order_by
    upgradeFeatureObject: vectric_upgrades_feature_order_by
    upgradeId: order_by
}

"primary key columns input for table: vectric_upgrades_version_feature"
input vectric_upgrades_version_feature_pk_columns_input {
    upgradeId: bigint!
}

"input type for updating data in table \"vectric.upgrades_version_feature\""
input vectric_upgrades_version_feature_set_input {
    feature: String
    majorVersion: bigint
    minorVersion: bigint
    productType: bigint
    ranking: bigint
    upgradeId: bigint
}

"order by stddev() on columns of table \"vectric.upgrades_version_feature\""
input vectric_upgrades_version_feature_stddev_order_by {
    majorVersion: order_by
    minorVersion: order_by
    productType: order_by
    ranking: order_by
    upgradeId: order_by
}

"order by stddev_pop() on columns of table \"vectric.upgrades_version_feature\""
input vectric_upgrades_version_feature_stddev_pop_order_by {
    majorVersion: order_by
    minorVersion: order_by
    productType: order_by
    ranking: order_by
    upgradeId: order_by
}

"order by stddev_samp() on columns of table \"vectric.upgrades_version_feature\""
input vectric_upgrades_version_feature_stddev_samp_order_by {
    majorVersion: order_by
    minorVersion: order_by
    productType: order_by
    ranking: order_by
    upgradeId: order_by
}

"order by sum() on columns of table \"vectric.upgrades_version_feature\""
input vectric_upgrades_version_feature_sum_order_by {
    majorVersion: order_by
    minorVersion: order_by
    productType: order_by
    ranking: order_by
    upgradeId: order_by
}

"order by var_pop() on columns of table \"vectric.upgrades_version_feature\""
input vectric_upgrades_version_feature_var_pop_order_by {
    majorVersion: order_by
    minorVersion: order_by
    productType: order_by
    ranking: order_by
    upgradeId: order_by
}

"order by var_samp() on columns of table \"vectric.upgrades_version_feature\""
input vectric_upgrades_version_feature_var_samp_order_by {
    majorVersion: order_by
    minorVersion: order_by
    productType: order_by
    ranking: order_by
    upgradeId: order_by
}

"order by variance() on columns of table \"vectric.upgrades_version_feature\""
input vectric_upgrades_version_feature_variance_order_by {
    majorVersion: order_by
    minorVersion: order_by
    productType: order_by
    ranking: order_by
    upgradeId: order_by
}

"Boolean expression to filter rows from the table \"vectric.usergroup_2019_attendees\". All fields are combined with a logical 'AND'."
input vectric_usergroup_2019_attendees_bool_exp {
    _and: [vectric_usergroup_2019_attendees_bool_exp!]
    _not: vectric_usergroup_2019_attendees_bool_exp
    _or: [vectric_usergroup_2019_attendees_bool_exp!]
    attendeeid: bigint_comparison_exp
    bringingsample: Boolean_comparison_exp
    company: String_comparison_exp
    customerid: bigint_comparison_exp
    diet: String_comparison_exp
    email: String_comparison_exp
    fastspringreference: String_comparison_exp
    firstname: String_comparison_exp
    forumname: String_comparison_exp
    lastname: String_comparison_exp
    notes: String_comparison_exp
    productid: bigint_comparison_exp
    purchasedate: timestamptz_comparison_exp
    reference: String_comparison_exp
    state: String_comparison_exp
    status: String_comparison_exp
    tshirtsize: String_comparison_exp
    uk: Boolean_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.usergroup_2019_attendees\""
input vectric_usergroup_2019_attendees_inc_input {
    attendeeid: bigint
    customerid: bigint
    productid: bigint
}

"input type for inserting data into table \"vectric.usergroup_2019_attendees\""
input vectric_usergroup_2019_attendees_insert_input {
    attendeeid: bigint
    bringingsample: Boolean
    company: String
    customerid: bigint
    diet: String
    email: String
    fastspringreference: String
    firstname: String
    forumname: String
    lastname: String
    notes: String
    productid: bigint
    purchasedate: timestamptz
    reference: String
    state: String
    status: String
    tshirtsize: String
    uk: Boolean
}

"on conflict condition type for table \"vectric.usergroup_2019_attendees\""
input vectric_usergroup_2019_attendees_on_conflict {
    constraint: vectric_usergroup_2019_attendees_constraint!
    update_columns: [vectric_usergroup_2019_attendees_update_column!]! = []
    where: vectric_usergroup_2019_attendees_bool_exp
}

"Ordering options when selecting data from \"vectric.usergroup_2019_attendees\"."
input vectric_usergroup_2019_attendees_order_by {
    attendeeid: order_by
    bringingsample: order_by
    company: order_by
    customerid: order_by
    diet: order_by
    email: order_by
    fastspringreference: order_by
    firstname: order_by
    forumname: order_by
    lastname: order_by
    notes: order_by
    productid: order_by
    purchasedate: order_by
    reference: order_by
    state: order_by
    status: order_by
    tshirtsize: order_by
    uk: order_by
}

"primary key columns input for table: vectric_usergroup_2019_attendees"
input vectric_usergroup_2019_attendees_pk_columns_input {
    attendeeid: bigint!
}

"input type for updating data in table \"vectric.usergroup_2019_attendees\""
input vectric_usergroup_2019_attendees_set_input {
    attendeeid: bigint
    bringingsample: Boolean
    company: String
    customerid: bigint
    diet: String
    email: String
    fastspringreference: String
    firstname: String
    forumname: String
    lastname: String
    notes: String
    productid: bigint
    purchasedate: timestamptz
    reference: String
    state: String
    status: String
    tshirtsize: String
    uk: Boolean
}

"Boolean expression to filter rows from the table \"vectric.usergroup_2019_waitlist\". All fields are combined with a logical 'AND'."
input vectric_usergroup_2019_waitlist_bool_exp {
    _and: [vectric_usergroup_2019_waitlist_bool_exp!]
    _not: vectric_usergroup_2019_waitlist_bool_exp
    _or: [vectric_usergroup_2019_waitlist_bool_exp!]
    attendeeid: bigint_comparison_exp
    customerid: bigint_comparison_exp
    desiredquantity: bigint_comparison_exp
    email: String_comparison_exp
    invitationdate: timestamptz_comparison_exp
    productid: bigint_comparison_exp
    reference: String_comparison_exp
    status: String_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.usergroup_2019_waitlist\""
input vectric_usergroup_2019_waitlist_inc_input {
    attendeeid: bigint
    customerid: bigint
    desiredquantity: bigint
    productid: bigint
}

"input type for inserting data into table \"vectric.usergroup_2019_waitlist\""
input vectric_usergroup_2019_waitlist_insert_input {
    attendeeid: bigint
    customerid: bigint
    desiredquantity: bigint
    email: String
    invitationdate: timestamptz
    productid: bigint
    reference: String
    status: String
}

"on conflict condition type for table \"vectric.usergroup_2019_waitlist\""
input vectric_usergroup_2019_waitlist_on_conflict {
    constraint: vectric_usergroup_2019_waitlist_constraint!
    update_columns: [vectric_usergroup_2019_waitlist_update_column!]! = []
    where: vectric_usergroup_2019_waitlist_bool_exp
}

"Ordering options when selecting data from \"vectric.usergroup_2019_waitlist\"."
input vectric_usergroup_2019_waitlist_order_by {
    attendeeid: order_by
    customerid: order_by
    desiredquantity: order_by
    email: order_by
    invitationdate: order_by
    productid: order_by
    reference: order_by
    status: order_by
}

"primary key columns input for table: vectric_usergroup_2019_waitlist"
input vectric_usergroup_2019_waitlist_pk_columns_input {
    attendeeid: bigint!
}

"input type for updating data in table \"vectric.usergroup_2019_waitlist\""
input vectric_usergroup_2019_waitlist_set_input {
    attendeeid: bigint
    customerid: bigint
    desiredquantity: bigint
    email: String
    invitationdate: timestamptz
    productid: bigint
    reference: String
    status: String
}

"Boolean expression to filter rows from the table \"vectric.version_code\". All fields are combined with a logical 'AND'."
input vectric_version_code_bool_exp {
    _and: [vectric_version_code_bool_exp!]
    _not: vectric_version_code_bool_exp
    _or: [vectric_version_code_bool_exp!]
    displayVersion: String_comparison_exp
    latest: Boolean_comparison_exp
    majorVersion: bigint_comparison_exp
    minorVersionOOX: bigint_comparison_exp
    minorVersionOXO: bigint_comparison_exp
    minorVersionXOO: bigint_comparison_exp
    notifying: Boolean_comparison_exp
    patchUrl: String_comparison_exp
    releaseDate: date_comparison_exp
    url: String_comparison_exp
    versionCodeId: bigint_comparison_exp
    visible: Boolean_comparison_exp
}

"input type for incrementing numeric columns in table \"vectric.version_code\""
input vectric_version_code_inc_input {
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    versionCodeId: bigint
}

"input type for inserting data into table \"vectric.version_code\""
input vectric_version_code_insert_input {
    displayVersion: String
    latest: Boolean
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    notifying: Boolean
    patchUrl: String
    releaseDate: date
    url: String
    versionCodeId: bigint
    visible: Boolean
}

"on conflict condition type for table \"vectric.version_code\""
input vectric_version_code_on_conflict {
    constraint: vectric_version_code_constraint!
    update_columns: [vectric_version_code_update_column!]! = []
    where: vectric_version_code_bool_exp
}

"Ordering options when selecting data from \"vectric.version_code\"."
input vectric_version_code_order_by {
    displayVersion: order_by
    latest: order_by
    majorVersion: order_by
    minorVersionOOX: order_by
    minorVersionOXO: order_by
    minorVersionXOO: order_by
    notifying: order_by
    patchUrl: order_by
    releaseDate: order_by
    url: order_by
    versionCodeId: order_by
    visible: order_by
}

"primary key columns input for table: vectric_version_code"
input vectric_version_code_pk_columns_input {
    versionCodeId: bigint!
}

"input type for updating data in table \"vectric.version_code\""
input vectric_version_code_set_input {
    displayVersion: String
    latest: Boolean
    majorVersion: bigint
    minorVersionOOX: bigint
    minorVersionOXO: bigint
    minorVersionXOO: bigint
    notifying: Boolean
    patchUrl: String
    releaseDate: date
    url: String
    versionCodeId: bigint
    visible: Boolean
}
