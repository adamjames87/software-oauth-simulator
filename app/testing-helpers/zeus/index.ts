/* eslint-disable */

import { AllTypesProps, ReturnTypes } from './const';
type ZEUS_INTERFACES = never
type ZEUS_UNIONS = never

export type ValueTypes = {
    ["AcceptMembershipInvitationOutput"]: AliasType<{
	membershipId?:boolean,
	token?:boolean,
		__typename?: boolean
}>;
	["ActivateMembershipOutput"]: AliasType<{
	membershipId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	["AddEnhancementToken"]: AliasType<{
	token?:boolean,
		__typename?: boolean
}>;
	["AddFreeClipartResponse"]: AliasType<{
	salesItemProductId?:boolean,
		__typename?: boolean
}>;
	["AddLicenceOutput"]: AliasType<{
	orderId?:boolean,
		__typename?: boolean
}>;
	["AddTestBundleOutput"]: AliasType<{
	partnerId?:boolean,
		__typename?: boolean
}>;
	["AddTrialOrderAction"]: AliasType<{
	orderId?:boolean,
		__typename?: boolean
}>;
	["AddUpgradeToken"]: AliasType<{
	token?:boolean,
		__typename?: boolean
}>;
	["AllocateLicenceResponse"]: AliasType<{
allocationBatch?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_oem_bundles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_oem_bundles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_oem_bundles_bool_exp"] | null},ValueTypes["vectric_sales_oem_bundles"]],
allocationBatch_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_oem_bundles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_oem_bundles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_oem_bundles_bool_exp"] | null},ValueTypes["vectric_sales_oem_bundles_aggregate"]],
	batchId?:boolean,
		__typename?: boolean
}>;
	["AssignmentOutput"]: AliasType<{
	assigned?:boolean,
		__typename?: boolean
}>;
	["CheckEmailForSignUpOutput"]: AliasType<{
	error?:boolean,
		__typename?: boolean
}>;
	["DeactivateMembershipOutput"]: AliasType<{
	membershipId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	["DeclineMembershipInvitationOutput"]: AliasType<{
	accessToken?:boolean,
		__typename?: boolean
}>;
	["DeletedOutput"]: AliasType<{
	deleted?:boolean,
		__typename?: boolean
}>;
	["EmailVerificationOutput"]: AliasType<{
	verified?:boolean,
		__typename?: boolean
}>;
	["EvaluationLicenceOutput"]: AliasType<{
	orderId?:boolean,
		__typename?: boolean
}>;
	["FastspringSecureRequestOutput"]: AliasType<{
	key?:boolean,
	payload?:boolean,
		__typename?: boolean
}>;
	["ForgotPassword"]: AliasType<{
	completed?:boolean,
	username?:boolean,
		__typename?: boolean
}>;
	["GetDownloadLinkForContentProject"]: AliasType<{
	expires?:boolean,
	object?:boolean,
	url?:boolean,
		__typename?: boolean
}>;
	["GetDownloadLinkForFulfilmentOutput"]: AliasType<{
	expires?:boolean,
	object?:boolean,
	url?:boolean,
		__typename?: boolean
}>;
	["LicenceDetailsForProductOrderItem"]: AliasType<{
	licenceCode?:boolean,
	licenceData?:boolean,
	licenceType?:boolean,
	registeredUsername?:boolean,
	salesItemProductId?:boolean,
		__typename?: boolean
}>;
	["LicenceDetailsForProductOrderItemAndAddOns"]: AliasType<{
	licenceCode?:boolean,
	licenceData?:boolean,
	licenceType?:boolean,
	registeredUsername?:boolean,
	salesItemProductId?:boolean,
		__typename?: boolean
}>;
	["MembershipInvitationCheckResult"]: AliasType<{
	customerId?:boolean,
	existingCustomer?:boolean,
	existingUser?:boolean,
	used?:boolean,
	userInvitationToken?:boolean,
	valid?:boolean,
		__typename?: boolean
}>;
	["OemFastspringSecureRequestOutput"]: AliasType<{
	key?:boolean,
	payload?:boolean,
		__typename?: boolean
}>;
	["OrganizationAddNewMemberOutput"]: AliasType<{
	success?:boolean,
		__typename?: boolean
}>;
	["OrganizationEditMemberOutput"]: AliasType<{
	success?:boolean,
		__typename?: boolean
}>;
	["PasswordResetOutput"]: AliasType<{
	completed?:boolean,
		__typename?: boolean
}>;
	["ProcessOemStaffInvitationOutput"]: AliasType<{
	enabledEvaluations?:boolean,
	staffId?:boolean,
		__typename?: boolean
}>;
	["RegisterInvite"]: AliasType<{
	completed?:boolean,
		__typename?: boolean
}>;
	["RemoveMembershipInvitationOutput"]: AliasType<{
	membershipId?:boolean,
		__typename?: boolean
}>;
	["RemoveMembershipOutput"]: AliasType<{
	membershipId?:boolean,
		__typename?: boolean
}>;
	["RemovePartnerMemberOutput"]: AliasType<{
	removed?:boolean,
		__typename?: boolean
}>;
	["SampleOutput"]: AliasType<{
	output?:boolean,
		__typename?: boolean
}>;
	["SecureFSItemsOutput"]: AliasType<{
	key?:boolean,
	payload?:boolean,
		__typename?: boolean
}>;
	["SendEmailVerificationOutput"]: AliasType<{
	sentTo?:boolean,
		__typename?: boolean
}>;
	["SendLicenceAllocationEmailResponse"]: AliasType<{
	sentTo?:boolean,
		__typename?: boolean
}>;
	["SignUpOutput"]: AliasType<{
	email?:boolean,
	password?:boolean,
		__typename?: boolean
}>;
	["TestOrderOutput"]: AliasType<{
	orderId?:boolean,
		__typename?: boolean
}>;
	["UnassignItemOutput"]: AliasType<{
	unassigned?:boolean,
		__typename?: boolean
}>;
	["UpgradeDetails"]: AliasType<{
	customerId?:boolean,
	fromProductName?:boolean,
	fromProductVersion?:boolean,
	toProductClipart?:boolean,
	toProductFastspringId?:boolean,
	toProductId?:boolean,
	toProductName?:boolean,
	toProductVersion?:boolean,
	upgradeToken?:boolean,
		__typename?: boolean
}>;
	["ValidateInvitationToken"]: AliasType<{
	accepted?:boolean,
	valid?:boolean,
		__typename?: boolean
}>;
	["ValidateVerificationToken"]: AliasType<{
	valid?:boolean,
		__typename?: boolean
}>;
	["ZendeskUploadOutput"]: AliasType<{
	initialZendeskUploadId?:boolean,
		__typename?: boolean
}>;
	/** mutation root */
["mutation_root"]: AliasType<{
InsertSecurityEmailVerificationTokens?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_security_emailverificationtokens_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_security_emailverificationtokens_on_conflict"] | null},ValueTypes["vectric_security_emailverificationtokens_mutation_response"]],
acceptMembershipInvitation?: [{	token:string},ValueTypes["AcceptMembershipInvitationOutput"]],
activateMembership?: [{	membershipId:number},ValueTypes["ActivateMembershipOutput"]],
addEnhancementToken?: [{	customerId:ValueTypes["bigint"],	enhancementEligibilityId:ValueTypes["bigint"],	salesItemProductId:ValueTypes["bigint"]},ValueTypes["AddEnhancementToken"]],
addEvaluationLicence?: [{	data:ValueTypes["EvaluationLicenceRequest"]},ValueTypes["EvaluationLicenceOutput"]],
addFreeClipart?: [{	data:ValueTypes["AddFreeClipartRequest"]},ValueTypes["AddFreeClipartResponse"]],
addLicence?: [{	data:ValueTypes["AddLicenceInput"]},ValueTypes["AddLicenceOutput"]],
addTestBundles?: [{	data?:ValueTypes["AddTestBundleInput"] | null},ValueTypes["AddTestBundleOutput"]],
addTestOrder?: [{	data:ValueTypes["TestOrderInput"]},ValueTypes["TestOrderOutput"]],
addTrialOrderAction?: [{	customerId:ValueTypes["bigint"],	productName:string},ValueTypes["AddTrialOrderAction"]],
addUpgradeToken?: [{	customerId:ValueTypes["bigint"],	salesItemProductId:ValueTypes["bigint"],	upgradeEligibilityId:ValueTypes["bigint"]},ValueTypes["AddUpgradeToken"]],
allocateLicence?: [{	data:ValueTypes["AllocateLicenceRequest"]},ValueTypes["AllocateLicenceResponse"]],
assignItem?: [{	data:ValueTypes["AssignmentInput"]},ValueTypes["AssignmentOutput"]],
deactivateMembership?: [{	membershipId:number},ValueTypes["DeactivateMembershipOutput"]],
declineMembershipInvitation?: [{	token:string},ValueTypes["DeclineMembershipInvitationOutput"]],
deleteAllocationSummaries?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_allocation_summary_bool_exp"]},ValueTypes["vectric_allocation_summary_mutation_response"]],
deleteAllocationSummaryById?: [{	id:number},ValueTypes["vectric_allocation_summary"]],
deleteAssignment?: [{	assignment_id:number},ValueTypes["vectric_owned_item_assignments"]],
deleteAssignments?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_owned_item_assignments_bool_exp"]},ValueTypes["vectric_owned_item_assignments_mutation_response"]],
deleteCountries?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_countries_bool_exp"]},ValueTypes["vectric_countries_mutation_response"]],
deleteCountryById?: [{	countryid:ValueTypes["bigint"]},ValueTypes["vectric_countries"]],
deleteCustomerArea?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_customer_area_bool_exp"]},ValueTypes["vectric_customer_area_mutation_response"]],
deleteCustomerAreaByPk?: [{	customerAreaId:ValueTypes["bigint"]},ValueTypes["vectric_customer_area"]],
deleteCustomerAreaFile?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_customer_area_file_bool_exp"]},ValueTypes["vectric_customer_area_file_mutation_response"]],
deleteCustomerAreaFileByPk?: [{	customerAreaFileId:ValueTypes["bigint"]},ValueTypes["vectric_customer_area_file"]],
deleteCustomerDownloadById?: [{	downloadId:ValueTypes["bigint"]},ValueTypes["vectric_sales_customer_downloads"]],
deleteCustomerDownloads?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_sales_customer_downloads_bool_exp"]},ValueTypes["vectric_sales_customer_downloads_mutation_response"]],
deleteCustomerResponseById?: [{	customerresponseid:ValueTypes["bigint"]},ValueTypes["vectric_customer_responses"]],
deleteCustomerResponses?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_customer_responses_bool_exp"]},ValueTypes["vectric_customer_responses_mutation_response"]],
deleteEmailTemplate?: [{	templateName:string},ValueTypes["vectric_sales_velocitytemplate"]],
deleteEmailTemplates?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_sales_velocitytemplate_bool_exp"]},ValueTypes["vectric_sales_velocitytemplate_mutation_response"]],
deleteEntitledProduct?: [{	productId:number},ValueTypes["vectric_entitled_products"]],
deleteEntitledProducts?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_entitled_products_bool_exp"]},ValueTypes["vectric_entitled_products_mutation_response"]],
deleteEntitlement?: [{	entitlementId:number},ValueTypes["vectric_entitlements"]],
deleteEntitlementLicence?: [{	entitlementLicenceId:number},ValueTypes["vectric_entitlement_licences"]],
deleteEntitlementLicences?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_entitlement_licences_bool_exp"]},ValueTypes["vectric_entitlement_licences_mutation_response"]],
deleteEntitlements?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_entitlements_bool_exp"]},ValueTypes["vectric_entitlements_mutation_response"]],
deleteEvalRequests?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_oem_eval_request_bool_exp"]},ValueTypes["vectric_oem_eval_request_mutation_response"]],
deleteEvalRequestsById?: [{	requestId:ValueTypes["bigint"]},ValueTypes["vectric_oem_eval_request"]],
deleteMembershipById?: [{	membershipId:number},ValueTypes["vectric_memberships"]],
deleteMembershipInvitationById?: [{	invitationId:number},ValueTypes["vectric_membership_invitations"]],
deleteMembershipInvitations?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_membership_invitations_bool_exp"]},ValueTypes["vectric_membership_invitations_mutation_response"]],
deleteMemberships?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_memberships_bool_exp"]},ValueTypes["vectric_memberships_mutation_response"]],
deleteOemAllocationEmails?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_oem_allocation_emails_bool_exp"]},ValueTypes["vectric_oem_allocation_emails_mutation_response"]],
deleteOemPartner?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_oem_partners_bool_exp"]},ValueTypes["vectric_oem_partners_mutation_response"]],
deleteOemPartnerById?: [{	partnerId:ValueTypes["bigint"]},ValueTypes["vectric_oem_partners"]],
deleteOemStaffCustomerById?: [{	staffId:ValueTypes["bigint"]},ValueTypes["vectric_oem_staff_customer"]],
deleteOemStaffCustomers?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_oem_staff_customer_bool_exp"]},ValueTypes["vectric_oem_staff_customer_mutation_response"]],
deleteOrderTree?: [{	data:string[]},ValueTypes["DeletedOutput"]],
deleteOrders?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_sales_orders_bool_exp"]},ValueTypes["vectric_sales_orders_mutation_response"]],
deleteOrdersById?: [{	orderId:string},ValueTypes["vectric_sales_orders"]],
deleteOrganization?: [{	organizationId:number},ValueTypes["vectric_organizations"]],
deleteOrganizationAuditById?: [{	auditId:number},ValueTypes["vectric_organization_audit"]],
deleteOrganizationAudits?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_organization_audit_bool_exp"]},ValueTypes["vectric_organization_audit_mutation_response"]],
deleteOrganizationOrder?: [{	orderId:string},ValueTypes["vectric_organization_orders"]],
deleteOrganizationOrderItem?: [{	orderItemId:number},ValueTypes["vectric_organization_order_items"]],
deleteOrganizationOrderItems?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_organization_order_items_bool_exp"]},ValueTypes["vectric_organization_order_items_mutation_response"]],
deleteOrganizationOrders?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_organization_orders_bool_exp"]},ValueTypes["vectric_organization_orders_mutation_response"]],
deleteOrganizations?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_organizations_bool_exp"]},ValueTypes["vectric_organizations_mutation_response"]],
deleteOwnedItem?: [{	ownedItemId:number},ValueTypes["vectric_owned_items"]],
deleteOwnedItems?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_owned_items_bool_exp"]},ValueTypes["vectric_owned_items_mutation_response"]],
deleteOwnedProduct?: [{	productId:number},ValueTypes["vectric_owned_products"]],
deleteOwnedProducts?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_owned_products_bool_exp"]},ValueTypes["vectric_owned_products_mutation_response"]],
deletePasswordResetTokenByPk?: [{	token:string},ValueTypes["vectric_security_passwordresettokens"]],
deletePasswordResetTokens?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_security_passwordresettokens_bool_exp"]},ValueTypes["vectric_security_passwordresettokens_mutation_response"]],
deleteProduct?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_products_products_bool_exp"]},ValueTypes["vectric_products_products_mutation_response"]],
deleteProductById?: [{	productID:ValueTypes["bigint"]},ValueTypes["vectric_products_products"]],
deleteProductType?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_products_producttype_bool_exp"]},ValueTypes["vectric_products_producttype_mutation_response"]],
deleteProductTypeById?: [{	productTypeId:ValueTypes["bigint"]},ValueTypes["vectric_products_producttype"]],
deleteProductUpgradeEligibility?: [{	eligibilityid:ValueTypes["bigint"]},ValueTypes["vectric_products_upgrade_eligibility"]],
deleteProductsUpgradeEligibility?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_products_upgrade_eligibility_bool_exp"]},ValueTypes["vectric_products_upgrade_eligibility_mutation_response"]],
deletePurchaseOptionByOptionId?: [{	optionId:ValueTypes["bigint"]},ValueTypes["vectric_oem_purchase_options"]],
deletePurchaseOptions?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_oem_purchase_options_bool_exp"]},ValueTypes["vectric_oem_purchase_options_mutation_response"]],
deleteQuestionById?: [{	questionid:ValueTypes["bigint"]},ValueTypes["vectric_questions"]],
deleteQuestions?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_questions_bool_exp"]},ValueTypes["vectric_questions_mutation_response"]],
deleteResponseById?: [{	responseid:ValueTypes["bigint"]},ValueTypes["vectric_responses"]],
deleteResponses?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_responses_bool_exp"]},ValueTypes["vectric_responses_mutation_response"]],
deleteSaleableProduct?: [{	productId:number},ValueTypes["vectric_saleable_products"]],
deleteSaleableProducts?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_saleable_products_bool_exp"]},ValueTypes["vectric_saleable_products_mutation_response"]],
deleteSalesCustomerByPk?: [{	customerId:ValueTypes["bigint"]},ValueTypes["vectric_sales_customers"]],
deleteSalesCustomers?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_sales_customers_bool_exp"]},ValueTypes["vectric_sales_customers_mutation_response"]],
deleteSalesItemById?: [{	salesitemid:ValueTypes["bigint"]},ValueTypes["vectric_sales_salesitems"]],
deleteSalesItemProduct?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_sales_salesitem_products_bool_exp"]},ValueTypes["vectric_sales_salesitem_products_mutation_response"]],
deleteSalesItemProductById?: [{	salesItemProductId:ValueTypes["bigint"]},ValueTypes["vectric_sales_salesitem_products"]],
deleteSalesItems?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_sales_salesitems_bool_exp"]},ValueTypes["vectric_sales_salesitems_mutation_response"]],
deleteSalesOEMBundleById?: [{	bundleId:string},ValueTypes["vectric_sales_oem_bundles"]],
deleteSalesOemBundle?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_sales_oem_bundles_bool_exp"]},ValueTypes["vectric_sales_oem_bundles_mutation_response"]],
deleteSalesOemLicenceById?: [{	oemLicenceId:ValueTypes["bigint"]},ValueTypes["vectric_sales_oemlicences"]],
deleteSalesOemLicences?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_sales_oemlicences_bool_exp"]},ValueTypes["vectric_sales_oemlicences_mutation_response"]],
deleteScheduledEmailById?: [{	id:number},ValueTypes["vectric_scheduled_emails"]],
deleteScheduledEmails?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_scheduled_emails_bool_exp"]},ValueTypes["vectric_scheduled_emails_mutation_response"]],
deleteSecurityGroupMemberById?: [{	id:ValueTypes["bigint"]},ValueTypes["vectric_security_group_members"]],
deleteSecurityGroupMembers?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_security_group_members_bool_exp"]},ValueTypes["vectric_security_group_members_mutation_response"]],
deleteSiteOptionById?: [{	optionid:ValueTypes["bigint"]},ValueTypes["vectric_site_options"]],
deleteSiteOptionLocationById?: [{	locationid:ValueTypes["bigint"]},ValueTypes["vectric_site_option_location"]],
deleteSiteOptionLocations?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_site_option_location_bool_exp"]},ValueTypes["vectric_site_option_location_mutation_response"]],
deleteSiteOptions?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_site_options_bool_exp"]},ValueTypes["vectric_site_options_mutation_response"]],
deleteToolpathSaveTokenById?: [{	toolpathSaverTokenId:ValueTypes["bigint"]},ValueTypes["vectric_toolpath_saver_token"]],
deleteToolpathSaverTokens?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_toolpath_saver_token_bool_exp"]},ValueTypes["vectric_toolpath_saver_token_mutation_response"]],
deleteTrialOrderById?: [{	orderId:ValueTypes["bigint"]},ValueTypes["vectric_trial_order"]],
deleteTrialOrders?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_trial_order_bool_exp"]},ValueTypes["vectric_trial_order_mutation_response"]],
deleteUpdateRequestById?: [{	requestId:ValueTypes["bigint"]},ValueTypes["vectric_update_requests"]],
deleteUpdateRequests?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_update_requests_bool_exp"]},ValueTypes["vectric_update_requests_mutation_response"]],
deleteUpgradeFeatureById?: [{	featureId:string},ValueTypes["vectric_upgrades_feature"]],
deleteUpgradeFeatures?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_upgrades_feature_bool_exp"]},ValueTypes["vectric_upgrades_feature_mutation_response"]],
deleteUpgradeProductTypeFeatureById?: [{	upgradeId:ValueTypes["bigint"]},ValueTypes["vectric_upgrades_product_type_feature"]],
deleteUpgradeProductTypeFeatures?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_upgrades_product_type_feature_bool_exp"]},ValueTypes["vectric_upgrades_product_type_feature_mutation_response"]],
deleteUpgradeVersionFeatureById?: [{	upgradeId:ValueTypes["bigint"]},ValueTypes["vectric_upgrades_version_feature"]],
deleteUpgradeVersionFeatures?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_upgrades_version_feature_bool_exp"]},ValueTypes["vectric_upgrades_version_feature_mutation_response"]],
deleteUserGroupAttendeeById?: [{	attendeeid:ValueTypes["bigint"]},ValueTypes["vectric_usergroup_2019_attendees"]],
deleteUserGroupAttendees?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_usergroup_2019_attendees_bool_exp"]},ValueTypes["vectric_usergroup_2019_attendees_mutation_response"]],
deleteUserGroupWaitingListEntries?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_usergroup_2019_waitlist_bool_exp"]},ValueTypes["vectric_usergroup_2019_waitlist_mutation_response"]],
deleteUserGroupWaitingListEntryById?: [{	attendeeid:ValueTypes["bigint"]},ValueTypes["vectric_usergroup_2019_waitlist"]],
deleteVersionCodeById?: [{	versioncodeid:ValueTypes["bigint"]},ValueTypes["vectric_products_versioncodes"]],
deleteVersionCodes?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_products_versioncodes_bool_exp"]},ValueTypes["vectric_products_versioncodes_mutation_response"]],
deleteZendeskUploadById?: [{	zdUploadId:ValueTypes["bigint"]},ValueTypes["vectric_customer_zd_uploads"]],
deleteZendeskUploads?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_customer_zd_uploads_bool_exp"]},ValueTypes["vectric_customer_zd_uploads_mutation_response"]],
delete_vectric_allocatable_bundles?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_allocatable_bundles_bool_exp"]},ValueTypes["vectric_allocatable_bundles_mutation_response"]],
delete_vectric_allocated_bundles?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_allocated_bundles_bool_exp"]},ValueTypes["vectric_allocated_bundles_mutation_response"]],
delete_vectric_allocation_summary_file_type?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_allocation_summary_file_type_bool_exp"]},ValueTypes["vectric_allocation_summary_file_type_mutation_response"]],
delete_vectric_allocation_summary_file_type_by_pk?: [{	type:string},ValueTypes["vectric_allocation_summary_file_type"]],
delete_vectric_continents?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_continents_bool_exp"]},ValueTypes["vectric_continents_mutation_response"]],
delete_vectric_continents_by_pk?: [{	/** Continent code */
	code:ValueTypes["bpchar"]},ValueTypes["vectric_continents"]],
delete_vectric_customer_sales?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_customer_sales_bool_exp"]},ValueTypes["vectric_customer_sales_mutation_response"]],
delete_vectric_customer_status?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_customer_status_bool_exp"]},ValueTypes["vectric_customer_status_mutation_response"]],
delete_vectric_customer_status_by_pk?: [{	statusId:ValueTypes["bigint"]},ValueTypes["vectric_customer_status"]],
delete_vectric_download?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_download_bool_exp"]},ValueTypes["vectric_download_mutation_response"]],
delete_vectric_download_by_pk?: [{	downloadId:string},ValueTypes["vectric_download"]],
delete_vectric_download_record?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_download_record_bool_exp"]},ValueTypes["vectric_download_record_mutation_response"]],
delete_vectric_download_record_by_pk?: [{	id:ValueTypes["bigint"]},ValueTypes["vectric_download_record"]],
delete_vectric_enhancement_tokens?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_enhancement_tokens_bool_exp"]},ValueTypes["vectric_enhancement_tokens_mutation_response"]],
delete_vectric_enhancement_tokens_by_pk?: [{	token:string},ValueTypes["vectric_enhancement_tokens"]],
delete_vectric_free_clipart_tokens?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_free_clipart_tokens_bool_exp"]},ValueTypes["vectric_free_clipart_tokens_mutation_response"]],
delete_vectric_free_clipart_tokens_by_pk?: [{	clipartToken:string},ValueTypes["vectric_free_clipart_tokens"]],
delete_vectric_freeclipart?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_freeclipart_bool_exp"]},ValueTypes["vectric_freeclipart_mutation_response"]],
delete_vectric_freeclipart_by_pk?: [{	freeClipartId:ValueTypes["bigint"]},ValueTypes["vectric_freeclipart"]],
delete_vectric_freeclipart_category?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_freeclipart_category_bool_exp"]},ValueTypes["vectric_freeclipart_category_mutation_response"]],
delete_vectric_freeclipart_category_by_pk?: [{	categoryId:ValueTypes["bigint"]},ValueTypes["vectric_freeclipart_category"]],
delete_vectric_freeclipart_download_record?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_freeclipart_download_record_bool_exp"]},ValueTypes["vectric_freeclipart_download_record_mutation_response"]],
delete_vectric_freeclipart_download_record_by_pk?: [{	downloadId:ValueTypes["bigint"]},ValueTypes["vectric_freeclipart_download_record"]],
delete_vectric_group_roles?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_group_roles_bool_exp"]},ValueTypes["vectric_group_roles_mutation_response"]],
delete_vectric_group_roles_by_pk?: [{	id:number},ValueTypes["vectric_group_roles"]],
delete_vectric_group_user_role?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_group_user_role_bool_exp"]},ValueTypes["vectric_group_user_role_mutation_response"]],
delete_vectric_group_user_role_by_pk?: [{	customer_id:ValueTypes["bigint"],	group_id:number},ValueTypes["vectric_group_user_role"]],
delete_vectric_groups?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_groups_bool_exp"]},ValueTypes["vectric_groups_mutation_response"]],
delete_vectric_groups_by_pk?: [{	id:number},ValueTypes["vectric_groups"]],
delete_vectric_language_codes?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_language_codes_bool_exp"]},ValueTypes["vectric_language_codes_mutation_response"]],
delete_vectric_language_codes_by_pk?: [{	/** ISO 639-2 Code */
	threeLetterCode:ValueTypes["bpchar"]},ValueTypes["vectric_language_codes"]],
delete_vectric_licence_log?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_licence_log_bool_exp"]},ValueTypes["vectric_licence_log_mutation_response"]],
delete_vectric_licence_log_by_pk?: [{	licenceId:ValueTypes["bigint"]},ValueTypes["vectric_licence_log"]],
delete_vectric_linkshortener_links?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_linkshortener_links_bool_exp"]},ValueTypes["vectric_linkshortener_links_mutation_response"]],
delete_vectric_linkshortener_links_by_pk?: [{	shortUrlHash:string},ValueTypes["vectric_linkshortener_links"]],
delete_vectric_makerspace_requests?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_makerspace_requests_bool_exp"]},ValueTypes["vectric_makerspace_requests_mutation_response"]],
delete_vectric_makerspace_requests_by_pk?: [{	requestId:ValueTypes["bigint"]},ValueTypes["vectric_makerspace_requests"]],
delete_vectric_membership_invitation_status?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_membership_invitation_status_bool_exp"]},ValueTypes["vectric_membership_invitation_status_mutation_response"]],
delete_vectric_membership_invitation_status_by_pk?: [{	status:string},ValueTypes["vectric_membership_invitation_status"]],
delete_vectric_membership_roles?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_membership_roles_bool_exp"]},ValueTypes["vectric_membership_roles_mutation_response"]],
delete_vectric_membership_roles_by_pk?: [{	role:string},ValueTypes["vectric_membership_roles"]],
delete_vectric_membership_status?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_membership_status_bool_exp"]},ValueTypes["vectric_membership_status_mutation_response"]],
delete_vectric_membership_status_by_pk?: [{	status:string},ValueTypes["vectric_membership_status"]],
delete_vectric_oauth_client_details?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_oauth_client_details_bool_exp"]},ValueTypes["vectric_oauth_client_details_mutation_response"]],
delete_vectric_oauth_client_details_by_pk?: [{	client_id:string},ValueTypes["vectric_oauth_client_details"]],
delete_vectric_oem_detailed_products?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_oem_detailed_products_bool_exp"]},ValueTypes["vectric_oem_detailed_products_mutation_response"]],
delete_vectric_oem_detailed_products_by_pk?: [{	id:ValueTypes["bigint"]},ValueTypes["vectric_oem_detailed_products"]],
delete_vectric_oem_fastspring_item?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_oem_fastspring_item_bool_exp"]},ValueTypes["vectric_oem_fastspring_item_mutation_response"]],
delete_vectric_oem_fastspring_item_bundle?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_oem_fastspring_item_bundle_bool_exp"]},ValueTypes["vectric_oem_fastspring_item_bundle_mutation_response"]],
delete_vectric_oem_fastspring_item_bundle_by_pk?: [{	itemBundleId:ValueTypes["bigint"]},ValueTypes["vectric_oem_fastspring_item_bundle"]],
delete_vectric_oem_fastspring_item_by_pk?: [{	itemId:ValueTypes["bigint"]},ValueTypes["vectric_oem_fastspring_item"]],
delete_vectric_oem_fastspring_order?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_oem_fastspring_order_bool_exp"]},ValueTypes["vectric_oem_fastspring_order_mutation_response"]],
delete_vectric_oem_fastspring_order_by_pk?: [{	orderId:ValueTypes["bigint"]},ValueTypes["vectric_oem_fastspring_order"]],
delete_vectric_oem_invite_status?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_oem_invite_status_bool_exp"]},ValueTypes["vectric_oem_invite_status_mutation_response"]],
delete_vectric_oem_invite_status_by_pk?: [{	statusId:ValueTypes["bigint"]},ValueTypes["vectric_oem_invite_status"]],
delete_vectric_oem_licence_allocation_type?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_oem_licence_allocation_type_bool_exp"]},ValueTypes["vectric_oem_licence_allocation_type_mutation_response"]],
delete_vectric_oem_licence_allocation_type_by_pk?: [{	allocationTypeId:ValueTypes["bigint"]},ValueTypes["vectric_oem_licence_allocation_type"]],
delete_vectric_oem_products?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_oem_products_bool_exp"]},ValueTypes["vectric_oem_products_mutation_response"]],
delete_vectric_oem_products_by_pk?: [{	oemProductId:ValueTypes["bigint"]},ValueTypes["vectric_oem_products"]],
delete_vectric_organization_licence_scope?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_organization_licence_scope_bool_exp"]},ValueTypes["vectric_organization_licence_scope_mutation_response"]],
delete_vectric_organization_licence_scope_by_pk?: [{	scope:string},ValueTypes["vectric_organization_licence_scope"]],
delete_vectric_organization_types?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_organization_types_bool_exp"]},ValueTypes["vectric_organization_types_mutation_response"]],
delete_vectric_organization_types_by_pk?: [{	type:string},ValueTypes["vectric_organization_types"]],
delete_vectric_products_clipartcollection_links?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_products_clipartcollection_links_bool_exp"]},ValueTypes["vectric_products_clipartcollection_links_mutation_response"]],
delete_vectric_products_clipartcollection_links_by_pk?: [{	clipartCollectionLinkId:ValueTypes["bigint"]},ValueTypes["vectric_products_clipartcollection_links"]],
delete_vectric_products_enhancement_eligibility?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_products_enhancement_eligibility_bool_exp"]},ValueTypes["vectric_products_enhancement_eligibility_mutation_response"]],
delete_vectric_products_enhancement_eligibility_by_pk?: [{	eligibilityId:ValueTypes["bigint"]},ValueTypes["vectric_products_enhancement_eligibility"]],
delete_vectric_products_freeclipart?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_products_freeclipart_bool_exp"]},ValueTypes["vectric_products_freeclipart_mutation_response"]],
delete_vectric_products_freeclipart_by_pk?: [{	productFreeClipartId:ValueTypes["bigint"]},ValueTypes["vectric_products_freeclipart"]],
delete_vectric_products_fulfilments?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_products_fulfilments_bool_exp"]},ValueTypes["vectric_products_fulfilments_mutation_response"]],
delete_vectric_products_fulfilments_by_pk?: [{	fulfilmentId:ValueTypes["bigint"]},ValueTypes["vectric_products_fulfilments"]],
delete_vectric_products_fulfilmenttypes?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_products_fulfilmenttypes_bool_exp"]},ValueTypes["vectric_products_fulfilmenttypes_mutation_response"]],
delete_vectric_products_fulfilmenttypes_by_pk?: [{	fulfilmenttypeid:ValueTypes["bigint"]},ValueTypes["vectric_products_fulfilmenttypes"]],
delete_vectric_products_product_fulfilments?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_products_product_fulfilments_bool_exp"]},ValueTypes["vectric_products_product_fulfilments_mutation_response"]],
delete_vectric_products_product_fulfilments_by_pk?: [{	productfulfilmentid:ValueTypes["bigint"]},ValueTypes["vectric_products_product_fulfilments"]],
delete_vectric_products_product_licence_type?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_products_product_licence_type_bool_exp"]},ValueTypes["vectric_products_product_licence_type_mutation_response"]],
delete_vectric_products_product_licence_type_by_pk?: [{	type:string},ValueTypes["vectric_products_product_licence_type"]],
delete_vectric_sales_customerupdates?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_sales_customerupdates_bool_exp"]},ValueTypes["vectric_sales_customerupdates_mutation_response"]],
delete_vectric_sales_customerupdates_by_pk?: [{	customerUpdateId:ValueTypes["bigint"]},ValueTypes["vectric_sales_customerupdates"]],
delete_vectric_sales_salesitemproduct_status?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_sales_salesitemproduct_status_bool_exp"]},ValueTypes["vectric_sales_salesitemproduct_status_mutation_response"]],
delete_vectric_sales_salesitemproduct_status_by_pk?: [{	statusid:ValueTypes["bigint"]},ValueTypes["vectric_sales_salesitemproduct_status"]],
delete_vectric_security_emailverificationtokens?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_security_emailverificationtokens_bool_exp"]},ValueTypes["vectric_security_emailverificationtokens_mutation_response"]],
delete_vectric_security_emailverificationtokens_by_pk?: [{	token:string},ValueTypes["vectric_security_emailverificationtokens"]],
delete_vectric_security_group_authorities?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_security_group_authorities_bool_exp"]},ValueTypes["vectric_security_group_authorities_mutation_response"]],
delete_vectric_security_userinvitations?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_security_userinvitations_bool_exp"]},ValueTypes["vectric_security_userinvitations_mutation_response"]],
delete_vectric_security_userinvitations_by_pk?: [{	token:string},ValueTypes["vectric_security_userinvitations"]],
delete_vectric_security_users?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_security_users_bool_exp"]},ValueTypes["vectric_security_users_mutation_response"]],
delete_vectric_security_users_by_pk?: [{	username:string},ValueTypes["vectric_security_users"]],
delete_vectric_subscription_contract_status?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_subscription_contract_status_bool_exp"]},ValueTypes["vectric_subscription_contract_status_mutation_response"]],
delete_vectric_subscription_contract_status_by_pk?: [{	status:string},ValueTypes["vectric_subscription_contract_status"]],
delete_vectric_subscription_contracts?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_subscription_contracts_bool_exp"]},ValueTypes["vectric_subscription_contracts_mutation_response"]],
delete_vectric_subscription_contracts_by_pk?: [{	subscriptionContractId:number},ValueTypes["vectric_subscription_contracts"]],
delete_vectric_subscription_events?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_subscription_events_bool_exp"]},ValueTypes["vectric_subscription_events_mutation_response"]],
delete_vectric_subscription_events_by_pk?: [{	eventId:number},ValueTypes["vectric_subscription_events"]],
delete_vectric_upgrade_tokens?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_upgrade_tokens_bool_exp"]},ValueTypes["vectric_upgrade_tokens_mutation_response"]],
delete_vectric_upgrade_tokens_by_pk?: [{	token:string},ValueTypes["vectric_upgrade_tokens"]],
delete_vectric_version_code?: [{	/** filter the rows which have to be deleted */
	where:ValueTypes["vectric_version_code_bool_exp"]},ValueTypes["vectric_version_code_mutation_response"]],
delete_vectric_version_code_by_pk?: [{	versionCodeId:ValueTypes["bigint"]},ValueTypes["vectric_version_code"]],
forgotPassword?: [{	username:string},ValueTypes["ForgotPassword"]],
insertAllocationSummaries?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_allocation_summary_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_allocation_summary_on_conflict"] | null},ValueTypes["vectric_allocation_summary_mutation_response"]],
insertAssignment?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_owned_item_assignments_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_owned_item_assignments_on_conflict"] | null},ValueTypes["vectric_owned_item_assignments"]],
insertAssignments?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_owned_item_assignments_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_owned_item_assignments_on_conflict"] | null},ValueTypes["vectric_owned_item_assignments_mutation_response"]],
insertCountries?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_countries_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_countries_on_conflict"] | null},ValueTypes["vectric_countries_mutation_response"]],
insertCustomerArea?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_customer_area_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_customer_area_on_conflict"] | null},ValueTypes["vectric_customer_area"]],
insertCustomerAreaFile?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_customer_area_file_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_customer_area_file_on_conflict"] | null},ValueTypes["vectric_customer_area_file"]],
insertCustomerAreaFiles?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_customer_area_file_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_customer_area_file_on_conflict"] | null},ValueTypes["vectric_customer_area_file_mutation_response"]],
insertCustomerAreas?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_customer_area_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_customer_area_on_conflict"] | null},ValueTypes["vectric_customer_area_mutation_response"]],
insertCustomerDownloads?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_sales_customer_downloads_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_customer_downloads_on_conflict"] | null},ValueTypes["vectric_sales_customer_downloads_mutation_response"]],
insertCustomerResponses?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_customer_responses_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_customer_responses_on_conflict"] | null},ValueTypes["vectric_customer_responses_mutation_response"]],
insertDownload?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_download_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_download_on_conflict"] | null},ValueTypes["vectric_download"]],
insertDownloadRecord?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_download_record_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_download_record_on_conflict"] | null},ValueTypes["vectric_download_record"]],
insertEmailTemplate?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_sales_velocitytemplate_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_velocitytemplate_on_conflict"] | null},ValueTypes["vectric_sales_velocitytemplate"]],
insertEmailTemplates?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_sales_velocitytemplate_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_velocitytemplate_on_conflict"] | null},ValueTypes["vectric_sales_velocitytemplate_mutation_response"]],
insertEnhancementToken?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_enhancement_tokens_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_enhancement_tokens_on_conflict"] | null},ValueTypes["vectric_enhancement_tokens"]],
insertEnhancementTokens?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_enhancement_tokens_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_enhancement_tokens_on_conflict"] | null},ValueTypes["vectric_enhancement_tokens_mutation_response"]],
insertEntitledProduct?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_entitled_products_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_entitled_products_on_conflict"] | null},ValueTypes["vectric_entitled_products"]],
insertEntitledProducts?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_entitled_products_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_entitled_products_on_conflict"] | null},ValueTypes["vectric_entitled_products_mutation_response"]],
insertEntitlement?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_entitlements_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_entitlements_on_conflict"] | null},ValueTypes["vectric_entitlements"]],
insertEntitlementLicence?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_entitlement_licences_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_entitlement_licences_on_conflict"] | null},ValueTypes["vectric_entitlement_licences"]],
insertEntitlementLicences?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_entitlement_licences_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_entitlement_licences_on_conflict"] | null},ValueTypes["vectric_entitlement_licences_mutation_response"]],
insertEntitlements?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_entitlements_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_entitlements_on_conflict"] | null},ValueTypes["vectric_entitlements_mutation_response"]],
insertEvalRequests?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_oem_eval_request_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_eval_request_on_conflict"] | null},ValueTypes["vectric_oem_eval_request_mutation_response"]],
insertFreeClipartDownloadRecord?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_freeclipart_download_record_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_freeclipart_download_record_on_conflict"] | null},ValueTypes["vectric_freeclipart_download_record"]],
insertFreeClipartDownloadRecords?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_freeclipart_download_record_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_freeclipart_download_record_on_conflict"] | null},ValueTypes["vectric_freeclipart_download_record_mutation_response"]],
insertFreeClipartToken?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_free_clipart_tokens_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_free_clipart_tokens_on_conflict"] | null},ValueTypes["vectric_free_clipart_tokens"]],
insertFreeClipartTokens?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_free_clipart_tokens_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_free_clipart_tokens_on_conflict"] | null},ValueTypes["vectric_free_clipart_tokens_mutation_response"]],
insertLicenceScope?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_organization_licence_scope_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_organization_licence_scope_on_conflict"] | null},ValueTypes["vectric_organization_licence_scope"]],
insertLicenceScopes?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_organization_licence_scope_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_organization_licence_scope_on_conflict"] | null},ValueTypes["vectric_organization_licence_scope_mutation_response"]],
insertMakerspaceRequest?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_makerspace_requests_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_makerspace_requests_on_conflict"] | null},ValueTypes["vectric_makerspace_requests"]],
insertMembershipInvitations?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_membership_invitations_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_membership_invitations_on_conflict"] | null},ValueTypes["vectric_membership_invitations_mutation_response"]],
insertMemberships?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_memberships_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_memberships_on_conflict"] | null},ValueTypes["vectric_memberships_mutation_response"]],
insertOemAllocationEmails?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_oem_allocation_emails_insert_input"][]},ValueTypes["vectric_oem_allocation_emails_mutation_response"]],
insertOemPartner?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_oem_partners_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_partners_on_conflict"] | null},ValueTypes["vectric_oem_partners_mutation_response"]],
insertOemStaffCustomers?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_oem_staff_customer_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_staff_customer_on_conflict"] | null},ValueTypes["vectric_oem_staff_customer_mutation_response"]],
insertOneAllocationSummary?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_allocation_summary_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_allocation_summary_on_conflict"] | null},ValueTypes["vectric_allocation_summary"]],
insertOneCountry?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_countries_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_countries_on_conflict"] | null},ValueTypes["vectric_countries"]],
insertOneCustomerDownload?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_sales_customer_downloads_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_customer_downloads_on_conflict"] | null},ValueTypes["vectric_sales_customer_downloads"]],
insertOneCustomerResponse?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_customer_responses_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_customer_responses_on_conflict"] | null},ValueTypes["vectric_customer_responses"]],
insertOneEvalRequest?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_oem_eval_request_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_eval_request_on_conflict"] | null},ValueTypes["vectric_oem_eval_request"]],
insertOneMembership?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_memberships_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_memberships_on_conflict"] | null},ValueTypes["vectric_memberships"]],
insertOneMembershipInvitation?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_membership_invitations_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_membership_invitations_on_conflict"] | null},ValueTypes["vectric_membership_invitations"]],
insertOneOemAllocationEmail?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_oem_allocation_emails_insert_input"]},ValueTypes["vectric_oem_allocation_emails"]],
insertOneOemPartner?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_oem_partners_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_partners_on_conflict"] | null},ValueTypes["vectric_oem_partners"]],
insertOneOemStaffCustomer?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_oem_staff_customer_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_staff_customer_on_conflict"] | null},ValueTypes["vectric_oem_staff_customer"]],
insertOneOrder?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_sales_orders_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_orders_on_conflict"] | null},ValueTypes["vectric_sales_orders"]],
insertOneOrganizationAudit?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_organization_audit_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_organization_audit_on_conflict"] | null},ValueTypes["vectric_organization_audit"]],
insertOneOwnedItem?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_owned_items_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_owned_items_on_conflict"] | null},ValueTypes["vectric_owned_items"]],
insertOnePasswordResetToken?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_security_passwordresettokens_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_security_passwordresettokens_on_conflict"] | null},ValueTypes["vectric_security_passwordresettokens"]],
insertOneProduct?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_products_products_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_products_on_conflict"] | null},ValueTypes["vectric_products_products"]],
insertOneProductType?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_products_producttype_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_producttype_on_conflict"] | null},ValueTypes["vectric_products_producttype"]],
insertOneProductUpgradeEligibility?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_products_upgrade_eligibility_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_upgrade_eligibility_on_conflict"] | null},ValueTypes["vectric_products_upgrade_eligibility"]],
insertOnePurchaseOption?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_oem_purchase_options_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_purchase_options_on_conflict"] | null},ValueTypes["vectric_oem_purchase_options"]],
insertOneQuestion?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_questions_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_questions_on_conflict"] | null},ValueTypes["vectric_questions"]],
insertOneResponse?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_responses_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_responses_on_conflict"] | null},ValueTypes["vectric_responses"]],
insertOneSalesItem?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_sales_salesitems_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_salesitems_on_conflict"] | null},ValueTypes["vectric_sales_salesitems"]],
insertOneSalesItemProduct?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_sales_salesitem_products_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_salesitem_products_on_conflict"] | null},ValueTypes["vectric_sales_salesitem_products"]],
insertOneSalesOemBundle?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_sales_oem_bundles_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_oem_bundles_on_conflict"] | null},ValueTypes["vectric_sales_oem_bundles"]],
insertOneSiteOption?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_site_options_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_site_options_on_conflict"] | null},ValueTypes["vectric_site_options"]],
insertOneSiteOptionLocation?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_site_option_location_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_site_option_location_on_conflict"] | null},ValueTypes["vectric_site_option_location"]],
insertOneTrialOrder?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_trial_order_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_trial_order_on_conflict"] | null},ValueTypes["vectric_trial_order"]],
insertOneUpdateRequest?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_update_requests_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_update_requests_on_conflict"] | null},ValueTypes["vectric_update_requests"]],
insertOneUpgradeFeature?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_upgrades_feature_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_upgrades_feature_on_conflict"] | null},ValueTypes["vectric_upgrades_feature"]],
insertOneUpgradeProductTypeFeatureById?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_upgrades_product_type_feature_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_upgrades_product_type_feature_on_conflict"] | null},ValueTypes["vectric_upgrades_product_type_feature"]],
insertOneUpgradeVersionFeatureById?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_upgrades_version_feature_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_upgrades_version_feature_on_conflict"] | null},ValueTypes["vectric_upgrades_version_feature"]],
insertOneUserGroupAttendee?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_usergroup_2019_attendees_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_usergroup_2019_attendees_on_conflict"] | null},ValueTypes["vectric_usergroup_2019_attendees"]],
insertOneUserGroupWaitingListEntry?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_usergroup_2019_waitlist_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_usergroup_2019_waitlist_on_conflict"] | null},ValueTypes["vectric_usergroup_2019_waitlist"]],
insertOneVersionCode?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_products_versioncodes_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_versioncodes_on_conflict"] | null},ValueTypes["vectric_products_versioncodes"]],
insertOneZendeskUpload?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_customer_zd_uploads_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_customer_zd_uploads_on_conflict"] | null},ValueTypes["vectric_customer_zd_uploads"]],
insertOrders?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_sales_orders_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_orders_on_conflict"] | null},ValueTypes["vectric_sales_orders_mutation_response"]],
insertOrganization?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_organizations_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_organizations_on_conflict"] | null},ValueTypes["vectric_organizations"]],
insertOrganizationAudits?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_organization_audit_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_organization_audit_on_conflict"] | null},ValueTypes["vectric_organization_audit_mutation_response"]],
insertOrganizationOrder?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_organization_orders_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_organization_orders_on_conflict"] | null},ValueTypes["vectric_organization_orders"]],
insertOrganizationOrderItem?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_organization_order_items_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_organization_order_items_on_conflict"] | null},ValueTypes["vectric_organization_order_items"]],
insertOrganizationOrderItems?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_organization_order_items_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_organization_order_items_on_conflict"] | null},ValueTypes["vectric_organization_order_items_mutation_response"]],
insertOrganizationOrders?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_organization_orders_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_organization_orders_on_conflict"] | null},ValueTypes["vectric_organization_orders_mutation_response"]],
insertOrganizations?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_organizations_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_organizations_on_conflict"] | null},ValueTypes["vectric_organizations_mutation_response"]],
insertOwnedItem?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_owned_items_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_owned_items_on_conflict"] | null},ValueTypes["vectric_owned_items_mutation_response"]],
insertOwnedProduct?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_owned_products_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_owned_products_on_conflict"] | null},ValueTypes["vectric_owned_products"]],
insertOwnedProducts?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_owned_products_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_owned_products_on_conflict"] | null},ValueTypes["vectric_owned_products_mutation_response"]],
insertPasswordResetTokens?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_security_passwordresettokens_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_security_passwordresettokens_on_conflict"] | null},ValueTypes["vectric_security_passwordresettokens_mutation_response"]],
insertProductTypes?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_products_producttype_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_producttype_on_conflict"] | null},ValueTypes["vectric_products_producttype_mutation_response"]],
insertProducts?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_products_products_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_products_on_conflict"] | null},ValueTypes["vectric_products_products_mutation_response"]],
insertProductsUpgradeEligibility?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_products_upgrade_eligibility_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_upgrade_eligibility_on_conflict"] | null},ValueTypes["vectric_products_upgrade_eligibility_mutation_response"]],
insertPurchaseOptions?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_oem_purchase_options_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_purchase_options_on_conflict"] | null},ValueTypes["vectric_oem_purchase_options_mutation_response"]],
insertQuestions?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_questions_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_questions_on_conflict"] | null},ValueTypes["vectric_questions_mutation_response"]],
insertResponses?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_responses_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_responses_on_conflict"] | null},ValueTypes["vectric_responses_mutation_response"]],
insertSaleableProduct?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_saleable_products_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_saleable_products_on_conflict"] | null},ValueTypes["vectric_saleable_products"]],
insertSaleableProducts?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_saleable_products_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_saleable_products_on_conflict"] | null},ValueTypes["vectric_saleable_products_mutation_response"]],
insertSalesCustomer?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_sales_customers_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_customers_on_conflict"] | null},ValueTypes["vectric_sales_customers"]],
insertSalesCustomers?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_sales_customers_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_customers_on_conflict"] | null},ValueTypes["vectric_sales_customers_mutation_response"]],
insertSalesItemProducts?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_sales_salesitem_products_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_salesitem_products_on_conflict"] | null},ValueTypes["vectric_sales_salesitem_products_mutation_response"]],
insertSalesItems?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_sales_salesitems_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_salesitems_on_conflict"] | null},ValueTypes["vectric_sales_salesitems_mutation_response"]],
insertSalesOemBundle?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_sales_oem_bundles_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_oem_bundles_on_conflict"] | null},ValueTypes["vectric_sales_oem_bundles_mutation_response"]],
insertScheduledEmail?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_scheduled_emails_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_scheduled_emails_on_conflict"] | null},ValueTypes["vectric_scheduled_emails"]],
insertScheduledEmails?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_scheduled_emails_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_scheduled_emails_on_conflict"] | null},ValueTypes["vectric_scheduled_emails_mutation_response"]],
insertSecurityEmailVerificationToken?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_security_emailverificationtokens_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_security_emailverificationtokens_on_conflict"] | null},ValueTypes["vectric_security_emailverificationtokens"]],
insertSecurityGroupMember?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_security_group_members_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_security_group_members_on_conflict"] | null},ValueTypes["vectric_security_group_members"]],
insertSecurityGroupMembers?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_security_group_members_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_security_group_members_on_conflict"] | null},ValueTypes["vectric_security_group_members_mutation_response"]],
insertSecurityUser?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_security_users_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_security_users_on_conflict"] | null},ValueTypes["vectric_security_users"]],
insertSecurityUserInvitation?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_security_userinvitations_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_security_userinvitations_on_conflict"] | null},ValueTypes["vectric_security_userinvitations"]],
insertSecurityUserInvitations?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_security_userinvitations_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_security_userinvitations_on_conflict"] | null},ValueTypes["vectric_security_userinvitations_mutation_response"]],
insertSecurityUsers?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_security_users_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_security_users_on_conflict"] | null},ValueTypes["vectric_security_users_mutation_response"]],
insertShortLink?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_linkshortener_links_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_linkshortener_links_on_conflict"] | null},ValueTypes["vectric_linkshortener_links_mutation_response"]],
insertShortLinkOne?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_linkshortener_links_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_linkshortener_links_on_conflict"] | null},ValueTypes["vectric_linkshortener_links"]],
insertSiteOptionLocations?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_site_option_location_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_site_option_location_on_conflict"] | null},ValueTypes["vectric_site_option_location_mutation_response"]],
insertSiteOptions?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_site_options_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_site_options_on_conflict"] | null},ValueTypes["vectric_site_options_mutation_response"]],
insertToolpathSaverToken?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_toolpath_saver_token_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_toolpath_saver_token_on_conflict"] | null},ValueTypes["vectric_toolpath_saver_token"]],
insertToolpathSaverTokens?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_toolpath_saver_token_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_toolpath_saver_token_on_conflict"] | null},ValueTypes["vectric_toolpath_saver_token_mutation_response"]],
insertTrialOrders?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_trial_order_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_trial_order_on_conflict"] | null},ValueTypes["vectric_trial_order_mutation_response"]],
insertUpdateRequests?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_update_requests_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_update_requests_on_conflict"] | null},ValueTypes["vectric_update_requests_mutation_response"]],
insertUpgradeFeatures?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_upgrades_feature_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_upgrades_feature_on_conflict"] | null},ValueTypes["vectric_upgrades_feature_mutation_response"]],
insertUpgradeProductTypeFeatures?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_upgrades_product_type_feature_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_upgrades_product_type_feature_on_conflict"] | null},ValueTypes["vectric_upgrades_product_type_feature_mutation_response"]],
insertUpgradeToken?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_upgrade_tokens_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_upgrade_tokens_on_conflict"] | null},ValueTypes["vectric_upgrade_tokens"]],
insertUpgradeTokens?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_upgrade_tokens_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_upgrade_tokens_on_conflict"] | null},ValueTypes["vectric_upgrade_tokens_mutation_response"]],
insertUpgradeVersionFeatures?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_upgrades_version_feature_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_upgrades_version_feature_on_conflict"] | null},ValueTypes["vectric_upgrades_version_feature_mutation_response"]],
insertUserGroupAttendees?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_usergroup_2019_attendees_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_usergroup_2019_attendees_on_conflict"] | null},ValueTypes["vectric_usergroup_2019_attendees_mutation_response"]],
insertUserGroupWaitingListEntries?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_usergroup_2019_waitlist_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_usergroup_2019_waitlist_on_conflict"] | null},ValueTypes["vectric_usergroup_2019_waitlist_mutation_response"]],
insertVersionCode?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_products_versioncodes_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_versioncodes_on_conflict"] | null},ValueTypes["vectric_products_versioncodes_mutation_response"]],
insertZendeskUploads?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_customer_zd_uploads_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_customer_zd_uploads_on_conflict"] | null},ValueTypes["vectric_customer_zd_uploads_mutation_response"]],
insert_vectric_allocatable_bundles?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_allocatable_bundles_insert_input"][]},ValueTypes["vectric_allocatable_bundles_mutation_response"]],
insert_vectric_allocatable_bundles_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_allocatable_bundles_insert_input"]},ValueTypes["vectric_allocatable_bundles"]],
insert_vectric_allocated_bundles?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_allocated_bundles_insert_input"][]},ValueTypes["vectric_allocated_bundles_mutation_response"]],
insert_vectric_allocated_bundles_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_allocated_bundles_insert_input"]},ValueTypes["vectric_allocated_bundles"]],
insert_vectric_allocation_summary_file_type?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_allocation_summary_file_type_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_allocation_summary_file_type_on_conflict"] | null},ValueTypes["vectric_allocation_summary_file_type_mutation_response"]],
insert_vectric_allocation_summary_file_type_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_allocation_summary_file_type_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_allocation_summary_file_type_on_conflict"] | null},ValueTypes["vectric_allocation_summary_file_type"]],
insert_vectric_continents?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_continents_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_continents_on_conflict"] | null},ValueTypes["vectric_continents_mutation_response"]],
insert_vectric_continents_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_continents_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_continents_on_conflict"] | null},ValueTypes["vectric_continents"]],
insert_vectric_customer_sales?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_customer_sales_insert_input"][]},ValueTypes["vectric_customer_sales_mutation_response"]],
insert_vectric_customer_sales_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_customer_sales_insert_input"]},ValueTypes["vectric_customer_sales"]],
insert_vectric_customer_status?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_customer_status_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_customer_status_on_conflict"] | null},ValueTypes["vectric_customer_status_mutation_response"]],
insert_vectric_customer_status_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_customer_status_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_customer_status_on_conflict"] | null},ValueTypes["vectric_customer_status"]],
insert_vectric_download?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_download_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_download_on_conflict"] | null},ValueTypes["vectric_download_mutation_response"]],
insert_vectric_download_record?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_download_record_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_download_record_on_conflict"] | null},ValueTypes["vectric_download_record_mutation_response"]],
insert_vectric_freeclipart?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_freeclipart_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_freeclipart_on_conflict"] | null},ValueTypes["vectric_freeclipart_mutation_response"]],
insert_vectric_freeclipart_category?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_freeclipart_category_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_freeclipart_category_on_conflict"] | null},ValueTypes["vectric_freeclipart_category_mutation_response"]],
insert_vectric_freeclipart_category_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_freeclipart_category_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_freeclipart_category_on_conflict"] | null},ValueTypes["vectric_freeclipart_category"]],
insert_vectric_freeclipart_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_freeclipart_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_freeclipart_on_conflict"] | null},ValueTypes["vectric_freeclipart"]],
insert_vectric_group_roles?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_group_roles_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_group_roles_on_conflict"] | null},ValueTypes["vectric_group_roles_mutation_response"]],
insert_vectric_group_roles_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_group_roles_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_group_roles_on_conflict"] | null},ValueTypes["vectric_group_roles"]],
insert_vectric_group_user_role?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_group_user_role_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_group_user_role_on_conflict"] | null},ValueTypes["vectric_group_user_role_mutation_response"]],
insert_vectric_group_user_role_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_group_user_role_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_group_user_role_on_conflict"] | null},ValueTypes["vectric_group_user_role"]],
insert_vectric_groups?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_groups_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_groups_on_conflict"] | null},ValueTypes["vectric_groups_mutation_response"]],
insert_vectric_groups_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_groups_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_groups_on_conflict"] | null},ValueTypes["vectric_groups"]],
insert_vectric_language_codes?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_language_codes_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_language_codes_on_conflict"] | null},ValueTypes["vectric_language_codes_mutation_response"]],
insert_vectric_language_codes_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_language_codes_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_language_codes_on_conflict"] | null},ValueTypes["vectric_language_codes"]],
insert_vectric_licence_log?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_licence_log_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_licence_log_on_conflict"] | null},ValueTypes["vectric_licence_log_mutation_response"]],
insert_vectric_licence_log_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_licence_log_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_licence_log_on_conflict"] | null},ValueTypes["vectric_licence_log"]],
insert_vectric_makerspace_requests?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_makerspace_requests_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_makerspace_requests_on_conflict"] | null},ValueTypes["vectric_makerspace_requests_mutation_response"]],
insert_vectric_membership_invitation_status?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_membership_invitation_status_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_membership_invitation_status_on_conflict"] | null},ValueTypes["vectric_membership_invitation_status_mutation_response"]],
insert_vectric_membership_invitation_status_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_membership_invitation_status_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_membership_invitation_status_on_conflict"] | null},ValueTypes["vectric_membership_invitation_status"]],
insert_vectric_membership_roles?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_membership_roles_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_membership_roles_on_conflict"] | null},ValueTypes["vectric_membership_roles_mutation_response"]],
insert_vectric_membership_roles_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_membership_roles_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_membership_roles_on_conflict"] | null},ValueTypes["vectric_membership_roles"]],
insert_vectric_membership_status?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_membership_status_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_membership_status_on_conflict"] | null},ValueTypes["vectric_membership_status_mutation_response"]],
insert_vectric_membership_status_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_membership_status_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_membership_status_on_conflict"] | null},ValueTypes["vectric_membership_status"]],
insert_vectric_oauth_client_details?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_oauth_client_details_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oauth_client_details_on_conflict"] | null},ValueTypes["vectric_oauth_client_details_mutation_response"]],
insert_vectric_oauth_client_details_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_oauth_client_details_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oauth_client_details_on_conflict"] | null},ValueTypes["vectric_oauth_client_details"]],
insert_vectric_oem_detailed_products?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_oem_detailed_products_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_detailed_products_on_conflict"] | null},ValueTypes["vectric_oem_detailed_products_mutation_response"]],
insert_vectric_oem_detailed_products_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_oem_detailed_products_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_detailed_products_on_conflict"] | null},ValueTypes["vectric_oem_detailed_products"]],
insert_vectric_oem_fastspring_item?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_oem_fastspring_item_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_fastspring_item_on_conflict"] | null},ValueTypes["vectric_oem_fastspring_item_mutation_response"]],
insert_vectric_oem_fastspring_item_bundle?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_oem_fastspring_item_bundle_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_fastspring_item_bundle_on_conflict"] | null},ValueTypes["vectric_oem_fastspring_item_bundle_mutation_response"]],
insert_vectric_oem_fastspring_item_bundle_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_oem_fastspring_item_bundle_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_fastspring_item_bundle_on_conflict"] | null},ValueTypes["vectric_oem_fastspring_item_bundle"]],
insert_vectric_oem_fastspring_item_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_oem_fastspring_item_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_fastspring_item_on_conflict"] | null},ValueTypes["vectric_oem_fastspring_item"]],
insert_vectric_oem_fastspring_order?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_oem_fastspring_order_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_fastspring_order_on_conflict"] | null},ValueTypes["vectric_oem_fastspring_order_mutation_response"]],
insert_vectric_oem_fastspring_order_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_oem_fastspring_order_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_fastspring_order_on_conflict"] | null},ValueTypes["vectric_oem_fastspring_order"]],
insert_vectric_oem_invite_status?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_oem_invite_status_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_invite_status_on_conflict"] | null},ValueTypes["vectric_oem_invite_status_mutation_response"]],
insert_vectric_oem_invite_status_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_oem_invite_status_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_invite_status_on_conflict"] | null},ValueTypes["vectric_oem_invite_status"]],
insert_vectric_oem_licence_allocation_type?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_oem_licence_allocation_type_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_licence_allocation_type_on_conflict"] | null},ValueTypes["vectric_oem_licence_allocation_type_mutation_response"]],
insert_vectric_oem_licence_allocation_type_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_oem_licence_allocation_type_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_licence_allocation_type_on_conflict"] | null},ValueTypes["vectric_oem_licence_allocation_type"]],
insert_vectric_oem_products?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_oem_products_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_products_on_conflict"] | null},ValueTypes["vectric_oem_products_mutation_response"]],
insert_vectric_oem_products_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_oem_products_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_products_on_conflict"] | null},ValueTypes["vectric_oem_products"]],
insert_vectric_organization_types?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_organization_types_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_organization_types_on_conflict"] | null},ValueTypes["vectric_organization_types_mutation_response"]],
insert_vectric_organization_types_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_organization_types_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_organization_types_on_conflict"] | null},ValueTypes["vectric_organization_types"]],
insert_vectric_products_clipartcollection_links?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_products_clipartcollection_links_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_clipartcollection_links_on_conflict"] | null},ValueTypes["vectric_products_clipartcollection_links_mutation_response"]],
insert_vectric_products_clipartcollection_links_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_products_clipartcollection_links_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_clipartcollection_links_on_conflict"] | null},ValueTypes["vectric_products_clipartcollection_links"]],
insert_vectric_products_enhancement_eligibility?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_products_enhancement_eligibility_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_enhancement_eligibility_on_conflict"] | null},ValueTypes["vectric_products_enhancement_eligibility_mutation_response"]],
insert_vectric_products_enhancement_eligibility_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_products_enhancement_eligibility_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_enhancement_eligibility_on_conflict"] | null},ValueTypes["vectric_products_enhancement_eligibility"]],
insert_vectric_products_freeclipart?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_products_freeclipart_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_freeclipart_on_conflict"] | null},ValueTypes["vectric_products_freeclipart_mutation_response"]],
insert_vectric_products_freeclipart_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_products_freeclipart_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_freeclipart_on_conflict"] | null},ValueTypes["vectric_products_freeclipart"]],
insert_vectric_products_fulfilments?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_products_fulfilments_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_fulfilments_on_conflict"] | null},ValueTypes["vectric_products_fulfilments_mutation_response"]],
insert_vectric_products_fulfilments_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_products_fulfilments_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_fulfilments_on_conflict"] | null},ValueTypes["vectric_products_fulfilments"]],
insert_vectric_products_fulfilmenttypes?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_products_fulfilmenttypes_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_fulfilmenttypes_on_conflict"] | null},ValueTypes["vectric_products_fulfilmenttypes_mutation_response"]],
insert_vectric_products_fulfilmenttypes_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_products_fulfilmenttypes_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_fulfilmenttypes_on_conflict"] | null},ValueTypes["vectric_products_fulfilmenttypes"]],
insert_vectric_products_product_fulfilments?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_products_product_fulfilments_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_product_fulfilments_on_conflict"] | null},ValueTypes["vectric_products_product_fulfilments_mutation_response"]],
insert_vectric_products_product_fulfilments_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_products_product_fulfilments_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_product_fulfilments_on_conflict"] | null},ValueTypes["vectric_products_product_fulfilments"]],
insert_vectric_products_product_licence_type?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_products_product_licence_type_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_product_licence_type_on_conflict"] | null},ValueTypes["vectric_products_product_licence_type_mutation_response"]],
insert_vectric_products_product_licence_type_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_products_product_licence_type_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_product_licence_type_on_conflict"] | null},ValueTypes["vectric_products_product_licence_type"]],
insert_vectric_sales_customerupdates?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_sales_customerupdates_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_customerupdates_on_conflict"] | null},ValueTypes["vectric_sales_customerupdates_mutation_response"]],
insert_vectric_sales_customerupdates_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_sales_customerupdates_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_customerupdates_on_conflict"] | null},ValueTypes["vectric_sales_customerupdates"]],
insert_vectric_sales_oemlicences?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_sales_oemlicences_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_oemlicences_on_conflict"] | null},ValueTypes["vectric_sales_oemlicences_mutation_response"]],
insert_vectric_sales_oemlicences_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_sales_oemlicences_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_oemlicences_on_conflict"] | null},ValueTypes["vectric_sales_oemlicences"]],
insert_vectric_sales_salesitemproduct_status?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_sales_salesitemproduct_status_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_salesitemproduct_status_on_conflict"] | null},ValueTypes["vectric_sales_salesitemproduct_status_mutation_response"]],
insert_vectric_sales_salesitemproduct_status_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_sales_salesitemproduct_status_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_salesitemproduct_status_on_conflict"] | null},ValueTypes["vectric_sales_salesitemproduct_status"]],
insert_vectric_security_group_authorities?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_security_group_authorities_insert_input"][]},ValueTypes["vectric_security_group_authorities_mutation_response"]],
insert_vectric_security_group_authorities_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_security_group_authorities_insert_input"]},ValueTypes["vectric_security_group_authorities"]],
insert_vectric_subscription_contract_status?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_subscription_contract_status_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_subscription_contract_status_on_conflict"] | null},ValueTypes["vectric_subscription_contract_status_mutation_response"]],
insert_vectric_subscription_contract_status_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_subscription_contract_status_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_subscription_contract_status_on_conflict"] | null},ValueTypes["vectric_subscription_contract_status"]],
insert_vectric_subscription_contracts?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_subscription_contracts_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_subscription_contracts_on_conflict"] | null},ValueTypes["vectric_subscription_contracts_mutation_response"]],
insert_vectric_subscription_contracts_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_subscription_contracts_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_subscription_contracts_on_conflict"] | null},ValueTypes["vectric_subscription_contracts"]],
insert_vectric_subscription_events?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_subscription_events_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_subscription_events_on_conflict"] | null},ValueTypes["vectric_subscription_events_mutation_response"]],
insert_vectric_subscription_events_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_subscription_events_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_subscription_events_on_conflict"] | null},ValueTypes["vectric_subscription_events"]],
insert_vectric_version_code?: [{	/** the rows to be inserted */
	objects:ValueTypes["vectric_version_code_insert_input"][],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_version_code_on_conflict"] | null},ValueTypes["vectric_version_code_mutation_response"]],
insert_vectric_version_code_one?: [{	/** the row to be inserted */
	object:ValueTypes["vectric_version_code_insert_input"],	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_version_code_on_conflict"] | null},ValueTypes["vectric_version_code"]],
oemSecureFsRequest?: [{	partnerId:ValueTypes["bigint"],	request:ValueTypes["OemFSRequest"][],	requestId:string},ValueTypes["OemFastspringSecureRequestOutput"]],
organizationAddNewMember?: [{	data?:ValueTypes["OrganizationAddNewMemberRequest"] | null},ValueTypes["OrganizationAddNewMemberOutput"]],
organizationEditMember?: [{	data?:ValueTypes["OrganizationEditMemberRequest"] | null},ValueTypes["OrganizationEditMemberOutput"]],
passwordReset?: [{	password:string,	token:string},ValueTypes["PasswordResetOutput"]],
processOemStaffInvitation?: [{	customerId:ValueTypes["bigint"],	staffId:ValueTypes["bigint"],	status:ValueTypes["bigint"]},ValueTypes["ProcessOemStaffInvitationOutput"]],
registerInvite?: [{	data:ValueTypes["RegisterInviteInput"]},ValueTypes["RegisterInvite"]],
removeMembership?: [{	membershipId:number},ValueTypes["RemoveMembershipOutput"]],
removeMembershipInvitation?: [{	membershipId:number},ValueTypes["RemoveMembershipInvitationOutput"]],
removePartnerMember?: [{	memberId:ValueTypes["bigint"],	partnerId:ValueTypes["bigint"]},ValueTypes["RemovePartnerMemberOutput"]],
secureFSItems?: [{	toDiscount:ValueTypes["SecureFSItemsInput"]},ValueTypes["SecureFSItemsOutput"]],
sendEmailVerification?: [{	email:string},ValueTypes["SendEmailVerificationOutput"]],
sendLicenceAllocationEmail?: [{	data:ValueTypes["sendLicenceAllocationEmailRequest"]},ValueTypes["SendLicenceAllocationEmailResponse"]],
signUp?: [{	data:ValueTypes["SignUpInput"]},ValueTypes["SignUpOutput"]],
transferOrderItemProduct?: [{	data:ValueTypes["TransferInput"]},ValueTypes["SampleOutput"]],
unassignItem?: [{	data:ValueTypes["UnassignItemInput"]},ValueTypes["UnassignItemOutput"]],
updateAllocationSummaries?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_allocation_summary_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_allocation_summary_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_allocation_summary_bool_exp"]},ValueTypes["vectric_allocation_summary_mutation_response"]],
updateAllocationSummaryById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_allocation_summary_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_allocation_summary_set_input"] | null,	pk_columns:ValueTypes["vectric_allocation_summary_pk_columns_input"]},ValueTypes["vectric_allocation_summary"]],
updateAssignment?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_owned_item_assignments_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_owned_item_assignments_set_input"] | null,	pk_columns:ValueTypes["vectric_owned_item_assignments_pk_columns_input"]},ValueTypes["vectric_owned_item_assignments"]],
updateAssignments?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_owned_item_assignments_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_owned_item_assignments_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_owned_item_assignments_bool_exp"]},ValueTypes["vectric_owned_item_assignments_mutation_response"]],
updateCountries?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_countries_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_countries_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_countries_bool_exp"]},ValueTypes["vectric_countries_mutation_response"]],
updateCountryById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_countries_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_countries_set_input"] | null,	pk_columns:ValueTypes["vectric_countries_pk_columns_input"]},ValueTypes["vectric_countries"]],
updateCustomer?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_sales_customers_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_sales_customers_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_sales_customers_bool_exp"]},ValueTypes["vectric_sales_customers_mutation_response"]],
updateCustomerAreaFileByPk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_customer_area_file_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_customer_area_file_set_input"] | null,	pk_columns:ValueTypes["vectric_customer_area_file_pk_columns_input"]},ValueTypes["vectric_customer_area_file"]],
updateCustomerById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_sales_customers_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_sales_customers_set_input"] | null,	pk_columns:ValueTypes["vectric_sales_customers_pk_columns_input"]},ValueTypes["vectric_sales_customers"]],
updateCustomerDownloadById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_sales_customer_downloads_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_sales_customer_downloads_set_input"] | null,	pk_columns:ValueTypes["vectric_sales_customer_downloads_pk_columns_input"]},ValueTypes["vectric_sales_customer_downloads"]],
updateCustomerDownloads?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_sales_customer_downloads_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_sales_customer_downloads_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_sales_customer_downloads_bool_exp"]},ValueTypes["vectric_sales_customer_downloads_mutation_response"]],
updateCustomerResponseById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_customer_responses_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_customer_responses_set_input"] | null,	pk_columns:ValueTypes["vectric_customer_responses_pk_columns_input"]},ValueTypes["vectric_customer_responses"]],
updateCustomerResponses?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_customer_responses_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_customer_responses_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_customer_responses_bool_exp"]},ValueTypes["vectric_customer_responses_mutation_response"]],
updateEmailTemplate?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_sales_velocitytemplate_set_input"] | null,	pk_columns:ValueTypes["vectric_sales_velocitytemplate_pk_columns_input"]},ValueTypes["vectric_sales_velocitytemplate"]],
updateEmailTemplates?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_sales_velocitytemplate_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_sales_velocitytemplate_bool_exp"]},ValueTypes["vectric_sales_velocitytemplate_mutation_response"]],
updateEntitleProduct?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_entitled_products_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_entitled_products_set_input"] | null,	pk_columns:ValueTypes["vectric_entitled_products_pk_columns_input"]},ValueTypes["vectric_entitled_products"]],
updateEntitledProducts?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_entitled_products_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_entitled_products_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_entitled_products_bool_exp"]},ValueTypes["vectric_entitled_products_mutation_response"]],
updateEntitlement?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_entitlements_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_entitlements_set_input"] | null,	pk_columns:ValueTypes["vectric_entitlements_pk_columns_input"]},ValueTypes["vectric_entitlements"]],
updateEntitlementLicence?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_entitlement_licences_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_entitlement_licences_set_input"] | null,	pk_columns:ValueTypes["vectric_entitlement_licences_pk_columns_input"]},ValueTypes["vectric_entitlement_licences"]],
updateEntitlementLicences?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_entitlement_licences_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_entitlement_licences_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_entitlement_licences_bool_exp"]},ValueTypes["vectric_entitlement_licences_mutation_response"]],
updateEntitlements?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_entitlements_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_entitlements_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_entitlements_bool_exp"]},ValueTypes["vectric_entitlements_mutation_response"]],
updateEvalRequest?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_eval_request_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_eval_request_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_oem_eval_request_bool_exp"]},ValueTypes["vectric_oem_eval_request_mutation_response"]],
updateEvalRequestById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_eval_request_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_eval_request_set_input"] | null,	pk_columns:ValueTypes["vectric_oem_eval_request_pk_columns_input"]},ValueTypes["vectric_oem_eval_request"]],
updateFreeClipartTokenByPk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_free_clipart_tokens_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_free_clipart_tokens_set_input"] | null,	pk_columns:ValueTypes["vectric_free_clipart_tokens_pk_columns_input"]},ValueTypes["vectric_free_clipart_tokens"]],
updateLicenceScope?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_organization_licence_scope_set_input"] | null,	pk_columns:ValueTypes["vectric_organization_licence_scope_pk_columns_input"]},ValueTypes["vectric_organization_licence_scope"]],
updateLicenceScopes?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_organization_licence_scope_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_organization_licence_scope_bool_exp"]},ValueTypes["vectric_organization_licence_scope_mutation_response"]],
updateMembershipById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_memberships_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_memberships_set_input"] | null,	pk_columns:ValueTypes["vectric_memberships_pk_columns_input"]},ValueTypes["vectric_memberships"]],
updateMembershipInvitationById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_membership_invitations_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_membership_invitations_set_input"] | null,	pk_columns:ValueTypes["vectric_membership_invitations_pk_columns_input"]},ValueTypes["vectric_membership_invitations"]],
updateMembershipInvitations?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_membership_invitations_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_membership_invitations_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_membership_invitations_bool_exp"]},ValueTypes["vectric_membership_invitations_mutation_response"]],
updateMemberships?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_memberships_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_memberships_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_memberships_bool_exp"]},ValueTypes["vectric_memberships_mutation_response"]],
updateOemAllocationEmails?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_allocation_emails_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_allocation_emails_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_oem_allocation_emails_bool_exp"]},ValueTypes["vectric_oem_allocation_emails_mutation_response"]],
updateOemPartner?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_partners_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_partners_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_oem_partners_bool_exp"]},ValueTypes["vectric_oem_partners_mutation_response"]],
updateOemPartnerById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_partners_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_partners_set_input"] | null,	pk_columns:ValueTypes["vectric_oem_partners_pk_columns_input"]},ValueTypes["vectric_oem_partners"]],
updateOemStaffCustomerById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_staff_customer_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_staff_customer_set_input"] | null,	pk_columns:ValueTypes["vectric_oem_staff_customer_pk_columns_input"]},ValueTypes["vectric_oem_staff_customer"]],
updateOemStaffCustomers?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_staff_customer_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_staff_customer_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_oem_staff_customer_bool_exp"]},ValueTypes["vectric_oem_staff_customer_mutation_response"]],
updateOrder?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_sales_orders_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_sales_orders_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_sales_orders_bool_exp"]},ValueTypes["vectric_sales_orders_mutation_response"]],
updateOrderById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_sales_orders_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_sales_orders_set_input"] | null,	pk_columns:ValueTypes["vectric_sales_orders_pk_columns_input"]},ValueTypes["vectric_sales_orders"]],
updateOrganization?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_organizations_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_organizations_set_input"] | null,	pk_columns:ValueTypes["vectric_organizations_pk_columns_input"]},ValueTypes["vectric_organizations"]],
updateOrganizationAuditById?: [{	/** append existing jsonb value of filtered columns with new jsonb value */
	_append?:ValueTypes["vectric_organization_audit_append_input"] | null,	/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
	_delete_at_path?:ValueTypes["vectric_organization_audit_delete_at_path_input"] | null,	/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
	_delete_elem?:ValueTypes["vectric_organization_audit_delete_elem_input"] | null,	/** delete key/value pair or string element. key/value pairs are matched based on their key value */
	_delete_key?:ValueTypes["vectric_organization_audit_delete_key_input"] | null,	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_organization_audit_inc_input"] | null,	/** prepend existing jsonb value of filtered columns with new jsonb value */
	_prepend?:ValueTypes["vectric_organization_audit_prepend_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_organization_audit_set_input"] | null,	pk_columns:ValueTypes["vectric_organization_audit_pk_columns_input"]},ValueTypes["vectric_organization_audit"]],
updateOrganizationAudits?: [{	/** append existing jsonb value of filtered columns with new jsonb value */
	_append?:ValueTypes["vectric_organization_audit_append_input"] | null,	/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
	_delete_at_path?:ValueTypes["vectric_organization_audit_delete_at_path_input"] | null,	/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
	_delete_elem?:ValueTypes["vectric_organization_audit_delete_elem_input"] | null,	/** delete key/value pair or string element. key/value pairs are matched based on their key value */
	_delete_key?:ValueTypes["vectric_organization_audit_delete_key_input"] | null,	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_organization_audit_inc_input"] | null,	/** prepend existing jsonb value of filtered columns with new jsonb value */
	_prepend?:ValueTypes["vectric_organization_audit_prepend_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_organization_audit_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_organization_audit_bool_exp"]},ValueTypes["vectric_organization_audit_mutation_response"]],
updateOrganizationOrder?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_organization_orders_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_organization_orders_set_input"] | null,	pk_columns:ValueTypes["vectric_organization_orders_pk_columns_input"]},ValueTypes["vectric_organization_orders"]],
updateOrganizationOrderItem?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_organization_order_items_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_organization_order_items_set_input"] | null,	pk_columns:ValueTypes["vectric_organization_order_items_pk_columns_input"]},ValueTypes["vectric_organization_order_items"]],
updateOrganizationOrderItems?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_organization_order_items_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_organization_order_items_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_organization_order_items_bool_exp"]},ValueTypes["vectric_organization_order_items_mutation_response"]],
updateOrganizationOrders?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_organization_orders_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_organization_orders_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_organization_orders_bool_exp"]},ValueTypes["vectric_organization_orders_mutation_response"]],
updateOrganizations?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_organizations_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_organizations_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_organizations_bool_exp"]},ValueTypes["vectric_organizations_mutation_response"]],
updateOwnedItem?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_owned_items_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_owned_items_set_input"] | null,	pk_columns:ValueTypes["vectric_owned_items_pk_columns_input"]},ValueTypes["vectric_owned_items"]],
updateOwnedItems?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_owned_items_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_owned_items_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_owned_items_bool_exp"]},ValueTypes["vectric_owned_items_mutation_response"]],
updateOwnedProduct?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_owned_products_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_owned_products_set_input"] | null,	pk_columns:ValueTypes["vectric_owned_products_pk_columns_input"]},ValueTypes["vectric_owned_products"]],
updateOwnedProducts?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_owned_products_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_owned_products_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_owned_products_bool_exp"]},ValueTypes["vectric_owned_products_mutation_response"]],
updateProductById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_products_products_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_products_set_input"] | null,	pk_columns:ValueTypes["vectric_products_products_pk_columns_input"]},ValueTypes["vectric_products_products"]],
updateProductTypeById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_products_producttype_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_producttype_set_input"] | null,	pk_columns:ValueTypes["vectric_products_producttype_pk_columns_input"]},ValueTypes["vectric_products_producttype"]],
updateProductTypes?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_products_producttype_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_producttype_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_products_producttype_bool_exp"]},ValueTypes["vectric_products_producttype_mutation_response"]],
updateProductUpgradeEligibility?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_products_upgrade_eligibility_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_upgrade_eligibility_set_input"] | null,	pk_columns:ValueTypes["vectric_products_upgrade_eligibility_pk_columns_input"]},ValueTypes["vectric_products_upgrade_eligibility"]],
updateProducts?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_products_products_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_products_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_products_products_bool_exp"]},ValueTypes["vectric_products_products_mutation_response"]],
updateProductsUpgradeEligibility?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_products_upgrade_eligibility_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_upgrade_eligibility_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_products_upgrade_eligibility_bool_exp"]},ValueTypes["vectric_products_upgrade_eligibility_mutation_response"]],
updatePurchaseOptionByOptionId?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_purchase_options_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_purchase_options_set_input"] | null,	pk_columns:ValueTypes["vectric_oem_purchase_options_pk_columns_input"]},ValueTypes["vectric_oem_purchase_options"]],
updatePurchaseOptions?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_purchase_options_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_purchase_options_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_oem_purchase_options_bool_exp"]},ValueTypes["vectric_oem_purchase_options_mutation_response"]],
updateQuestionById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_questions_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_questions_set_input"] | null,	pk_columns:ValueTypes["vectric_questions_pk_columns_input"]},ValueTypes["vectric_questions"]],
updateQuestions?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_questions_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_questions_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_questions_bool_exp"]},ValueTypes["vectric_questions_mutation_response"]],
updateResponseById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_responses_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_responses_set_input"] | null,	pk_columns:ValueTypes["vectric_responses_pk_columns_input"]},ValueTypes["vectric_responses"]],
updateResponses?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_responses_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_responses_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_responses_bool_exp"]},ValueTypes["vectric_responses_mutation_response"]],
updateSaleableProduct?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_saleable_products_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_saleable_products_set_input"] | null,	pk_columns:ValueTypes["vectric_saleable_products_pk_columns_input"]},ValueTypes["vectric_saleable_products"]],
updateSaleableProducts?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_saleable_products_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_saleable_products_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_saleable_products_bool_exp"]},ValueTypes["vectric_saleable_products_mutation_response"]],
updateSalesItemById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_sales_salesitems_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_sales_salesitems_set_input"] | null,	pk_columns:ValueTypes["vectric_sales_salesitems_pk_columns_input"]},ValueTypes["vectric_sales_salesitems"]],
updateSalesItemProduces?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_sales_salesitem_products_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_sales_salesitem_products_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_sales_salesitem_products_bool_exp"]},ValueTypes["vectric_sales_salesitem_products_mutation_response"]],
updateSalesItemProductById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_sales_salesitem_products_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_sales_salesitem_products_set_input"] | null,	pk_columns:ValueTypes["vectric_sales_salesitem_products_pk_columns_input"]},ValueTypes["vectric_sales_salesitem_products"]],
updateSalesItems?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_sales_salesitems_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_sales_salesitems_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_sales_salesitems_bool_exp"]},ValueTypes["vectric_sales_salesitems_mutation_response"]],
updateSalesOemBundle?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_sales_oem_bundles_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_sales_oem_bundles_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_sales_oem_bundles_bool_exp"]},ValueTypes["vectric_sales_oem_bundles_mutation_response"]],
updateSalesOemBundleById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_sales_oem_bundles_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_sales_oem_bundles_set_input"] | null,	pk_columns:ValueTypes["vectric_sales_oem_bundles_pk_columns_input"]},ValueTypes["vectric_sales_oem_bundles"]],
updateScheduledEmails?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_scheduled_emails_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_scheduled_emails_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_scheduled_emails_bool_exp"]},ValueTypes["vectric_scheduled_emails_mutation_response"]],
updateScheduledEmailsById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_scheduled_emails_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_scheduled_emails_set_input"] | null,	pk_columns:ValueTypes["vectric_scheduled_emails_pk_columns_input"]},ValueTypes["vectric_scheduled_emails"]],
updateSecurityUserByPk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_security_users_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_security_users_set_input"] | null,	pk_columns:ValueTypes["vectric_security_users_pk_columns_input"]},ValueTypes["vectric_security_users"]],
updateSecurityUsers?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_security_users_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_security_users_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_security_users_bool_exp"]},ValueTypes["vectric_security_users_mutation_response"]],
updateShortLinkByHash?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_linkshortener_links_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_linkshortener_links_set_input"] | null,	pk_columns:ValueTypes["vectric_linkshortener_links_pk_columns_input"]},ValueTypes["vectric_linkshortener_links"]],
updateShortLinks?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_linkshortener_links_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_linkshortener_links_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_linkshortener_links_bool_exp"]},ValueTypes["vectric_linkshortener_links_mutation_response"]],
updateSiteOptionById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_site_options_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_site_options_set_input"] | null,	pk_columns:ValueTypes["vectric_site_options_pk_columns_input"]},ValueTypes["vectric_site_options"]],
updateSiteOptionLocationById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_site_option_location_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_site_option_location_set_input"] | null,	pk_columns:ValueTypes["vectric_site_option_location_pk_columns_input"]},ValueTypes["vectric_site_option_location"]],
updateSiteOptionLocations?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_site_option_location_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_site_option_location_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_site_option_location_bool_exp"]},ValueTypes["vectric_site_option_location_mutation_response"]],
updateSiteOptions?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_site_options_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_site_options_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_site_options_bool_exp"]},ValueTypes["vectric_site_options_mutation_response"]],
updateToolpathSaverTokenById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_toolpath_saver_token_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_toolpath_saver_token_set_input"] | null,	pk_columns:ValueTypes["vectric_toolpath_saver_token_pk_columns_input"]},ValueTypes["vectric_toolpath_saver_token"]],
updateToolpathSaverTokens?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_toolpath_saver_token_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_toolpath_saver_token_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_toolpath_saver_token_bool_exp"]},ValueTypes["vectric_toolpath_saver_token_mutation_response"]],
updateTrialOrderById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_trial_order_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_trial_order_set_input"] | null,	pk_columns:ValueTypes["vectric_trial_order_pk_columns_input"]},ValueTypes["vectric_trial_order"]],
updateTrialOrders?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_trial_order_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_trial_order_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_trial_order_bool_exp"]},ValueTypes["vectric_trial_order_mutation_response"]],
updateUpdateRequests?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_update_requests_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_update_requests_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_update_requests_bool_exp"]},ValueTypes["vectric_update_requests_mutation_response"]],
updateUpgradeFeatureById?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_upgrades_feature_set_input"] | null,	pk_columns:ValueTypes["vectric_upgrades_feature_pk_columns_input"]},ValueTypes["vectric_upgrades_feature"]],
updateUpgradeFeatures?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_upgrades_feature_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_upgrades_feature_bool_exp"]},ValueTypes["vectric_upgrades_feature_mutation_response"]],
updateUpgradeProductTypeFeatureById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_upgrades_product_type_feature_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_upgrades_product_type_feature_set_input"] | null,	pk_columns:ValueTypes["vectric_upgrades_product_type_feature_pk_columns_input"]},ValueTypes["vectric_upgrades_product_type_feature"]],
updateUpgradeProductTypeFeatures?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_upgrades_product_type_feature_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_upgrades_product_type_feature_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_upgrades_product_type_feature_bool_exp"]},ValueTypes["vectric_upgrades_product_type_feature_mutation_response"]],
updateUpgradeVersionFeatureById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_upgrades_version_feature_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_upgrades_version_feature_set_input"] | null,	pk_columns:ValueTypes["vectric_upgrades_version_feature_pk_columns_input"]},ValueTypes["vectric_upgrades_version_feature"]],
updateUpgradeVersionFeatures?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_upgrades_version_feature_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_upgrades_version_feature_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_upgrades_version_feature_bool_exp"]},ValueTypes["vectric_upgrades_version_feature_mutation_response"]],
updateUserGroupAttendeeById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_usergroup_2019_attendees_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_usergroup_2019_attendees_set_input"] | null,	pk_columns:ValueTypes["vectric_usergroup_2019_attendees_pk_columns_input"]},ValueTypes["vectric_usergroup_2019_attendees"]],
updateUserGroupAttendees?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_usergroup_2019_attendees_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_usergroup_2019_attendees_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_usergroup_2019_attendees_bool_exp"]},ValueTypes["vectric_usergroup_2019_attendees_mutation_response"]],
updateUserGroupWaitingListEntries?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_usergroup_2019_waitlist_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_usergroup_2019_waitlist_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_usergroup_2019_waitlist_bool_exp"]},ValueTypes["vectric_usergroup_2019_waitlist_mutation_response"]],
updateUserGroupWaitingListEntryById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_usergroup_2019_waitlist_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_usergroup_2019_waitlist_set_input"] | null,	pk_columns:ValueTypes["vectric_usergroup_2019_waitlist_pk_columns_input"]},ValueTypes["vectric_usergroup_2019_waitlist"]],
updateUserInvitationByToken?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_security_userinvitations_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_security_userinvitations_set_input"] | null,	pk_columns:ValueTypes["vectric_security_userinvitations_pk_columns_input"]},ValueTypes["vectric_security_userinvitations"]],
updateVersionCodeById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_products_versioncodes_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_versioncodes_set_input"] | null,	pk_columns:ValueTypes["vectric_products_versioncodes_pk_columns_input"]},ValueTypes["vectric_products_versioncodes"]],
updateVersionCodes?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_products_versioncodes_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_versioncodes_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_products_versioncodes_bool_exp"]},ValueTypes["vectric_products_versioncodes_mutation_response"]],
updateZendeskUploadById?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_customer_zd_uploads_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_customer_zd_uploads_set_input"] | null,	pk_columns:ValueTypes["vectric_customer_zd_uploads_pk_columns_input"]},ValueTypes["vectric_customer_zd_uploads"]],
updateZendeskUploads?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_customer_zd_uploads_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_customer_zd_uploads_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_customer_zd_uploads_bool_exp"]},ValueTypes["vectric_customer_zd_uploads_mutation_response"]],
update_vectric_allocatable_bundles?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_allocatable_bundles_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_allocatable_bundles_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_allocatable_bundles_bool_exp"]},ValueTypes["vectric_allocatable_bundles_mutation_response"]],
update_vectric_allocated_bundles?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_allocated_bundles_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_allocated_bundles_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_allocated_bundles_bool_exp"]},ValueTypes["vectric_allocated_bundles_mutation_response"]],
update_vectric_allocation_summary_file_type?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_allocation_summary_file_type_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_allocation_summary_file_type_bool_exp"]},ValueTypes["vectric_allocation_summary_file_type_mutation_response"]],
update_vectric_allocation_summary_file_type_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_allocation_summary_file_type_set_input"] | null,	pk_columns:ValueTypes["vectric_allocation_summary_file_type_pk_columns_input"]},ValueTypes["vectric_allocation_summary_file_type"]],
update_vectric_continents?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_continents_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_continents_bool_exp"]},ValueTypes["vectric_continents_mutation_response"]],
update_vectric_continents_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_continents_set_input"] | null,	pk_columns:ValueTypes["vectric_continents_pk_columns_input"]},ValueTypes["vectric_continents"]],
update_vectric_customer_area?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_customer_area_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_customer_area_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_customer_area_bool_exp"]},ValueTypes["vectric_customer_area_mutation_response"]],
update_vectric_customer_area_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_customer_area_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_customer_area_set_input"] | null,	pk_columns:ValueTypes["vectric_customer_area_pk_columns_input"]},ValueTypes["vectric_customer_area"]],
update_vectric_customer_area_file?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_customer_area_file_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_customer_area_file_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_customer_area_file_bool_exp"]},ValueTypes["vectric_customer_area_file_mutation_response"]],
update_vectric_customer_sales?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_customer_sales_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_customer_sales_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_customer_sales_bool_exp"]},ValueTypes["vectric_customer_sales_mutation_response"]],
update_vectric_customer_status?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_customer_status_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_customer_status_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_customer_status_bool_exp"]},ValueTypes["vectric_customer_status_mutation_response"]],
update_vectric_customer_status_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_customer_status_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_customer_status_set_input"] | null,	pk_columns:ValueTypes["vectric_customer_status_pk_columns_input"]},ValueTypes["vectric_customer_status"]],
update_vectric_download?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_download_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_download_bool_exp"]},ValueTypes["vectric_download_mutation_response"]],
update_vectric_download_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_download_set_input"] | null,	pk_columns:ValueTypes["vectric_download_pk_columns_input"]},ValueTypes["vectric_download"]],
update_vectric_download_record?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_download_record_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_download_record_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_download_record_bool_exp"]},ValueTypes["vectric_download_record_mutation_response"]],
update_vectric_download_record_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_download_record_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_download_record_set_input"] | null,	pk_columns:ValueTypes["vectric_download_record_pk_columns_input"]},ValueTypes["vectric_download_record"]],
update_vectric_enhancement_tokens?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_enhancement_tokens_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_enhancement_tokens_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_enhancement_tokens_bool_exp"]},ValueTypes["vectric_enhancement_tokens_mutation_response"]],
update_vectric_enhancement_tokens_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_enhancement_tokens_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_enhancement_tokens_set_input"] | null,	pk_columns:ValueTypes["vectric_enhancement_tokens_pk_columns_input"]},ValueTypes["vectric_enhancement_tokens"]],
update_vectric_free_clipart_tokens?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_free_clipart_tokens_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_free_clipart_tokens_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_free_clipart_tokens_bool_exp"]},ValueTypes["vectric_free_clipart_tokens_mutation_response"]],
update_vectric_freeclipart?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_freeclipart_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_freeclipart_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_freeclipart_bool_exp"]},ValueTypes["vectric_freeclipart_mutation_response"]],
update_vectric_freeclipart_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_freeclipart_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_freeclipart_set_input"] | null,	pk_columns:ValueTypes["vectric_freeclipart_pk_columns_input"]},ValueTypes["vectric_freeclipart"]],
update_vectric_freeclipart_category?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_freeclipart_category_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_freeclipart_category_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_freeclipart_category_bool_exp"]},ValueTypes["vectric_freeclipart_category_mutation_response"]],
update_vectric_freeclipart_category_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_freeclipart_category_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_freeclipart_category_set_input"] | null,	pk_columns:ValueTypes["vectric_freeclipart_category_pk_columns_input"]},ValueTypes["vectric_freeclipart_category"]],
update_vectric_freeclipart_download_record?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_freeclipart_download_record_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_freeclipart_download_record_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_freeclipart_download_record_bool_exp"]},ValueTypes["vectric_freeclipart_download_record_mutation_response"]],
update_vectric_freeclipart_download_record_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_freeclipart_download_record_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_freeclipart_download_record_set_input"] | null,	pk_columns:ValueTypes["vectric_freeclipart_download_record_pk_columns_input"]},ValueTypes["vectric_freeclipart_download_record"]],
update_vectric_group_roles?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_group_roles_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_group_roles_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_group_roles_bool_exp"]},ValueTypes["vectric_group_roles_mutation_response"]],
update_vectric_group_roles_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_group_roles_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_group_roles_set_input"] | null,	pk_columns:ValueTypes["vectric_group_roles_pk_columns_input"]},ValueTypes["vectric_group_roles"]],
update_vectric_group_user_role?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_group_user_role_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_group_user_role_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_group_user_role_bool_exp"]},ValueTypes["vectric_group_user_role_mutation_response"]],
update_vectric_group_user_role_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_group_user_role_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_group_user_role_set_input"] | null,	pk_columns:ValueTypes["vectric_group_user_role_pk_columns_input"]},ValueTypes["vectric_group_user_role"]],
update_vectric_groups?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_groups_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_groups_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_groups_bool_exp"]},ValueTypes["vectric_groups_mutation_response"]],
update_vectric_groups_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_groups_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_groups_set_input"] | null,	pk_columns:ValueTypes["vectric_groups_pk_columns_input"]},ValueTypes["vectric_groups"]],
update_vectric_language_codes?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_language_codes_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_language_codes_bool_exp"]},ValueTypes["vectric_language_codes_mutation_response"]],
update_vectric_language_codes_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_language_codes_set_input"] | null,	pk_columns:ValueTypes["vectric_language_codes_pk_columns_input"]},ValueTypes["vectric_language_codes"]],
update_vectric_licence_log?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_licence_log_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_licence_log_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_licence_log_bool_exp"]},ValueTypes["vectric_licence_log_mutation_response"]],
update_vectric_licence_log_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_licence_log_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_licence_log_set_input"] | null,	pk_columns:ValueTypes["vectric_licence_log_pk_columns_input"]},ValueTypes["vectric_licence_log"]],
update_vectric_makerspace_requests?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_makerspace_requests_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_makerspace_requests_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_makerspace_requests_bool_exp"]},ValueTypes["vectric_makerspace_requests_mutation_response"]],
update_vectric_makerspace_requests_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_makerspace_requests_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_makerspace_requests_set_input"] | null,	pk_columns:ValueTypes["vectric_makerspace_requests_pk_columns_input"]},ValueTypes["vectric_makerspace_requests"]],
update_vectric_membership_invitation_status?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_membership_invitation_status_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_membership_invitation_status_bool_exp"]},ValueTypes["vectric_membership_invitation_status_mutation_response"]],
update_vectric_membership_invitation_status_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_membership_invitation_status_set_input"] | null,	pk_columns:ValueTypes["vectric_membership_invitation_status_pk_columns_input"]},ValueTypes["vectric_membership_invitation_status"]],
update_vectric_membership_roles?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_membership_roles_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_membership_roles_bool_exp"]},ValueTypes["vectric_membership_roles_mutation_response"]],
update_vectric_membership_roles_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_membership_roles_set_input"] | null,	pk_columns:ValueTypes["vectric_membership_roles_pk_columns_input"]},ValueTypes["vectric_membership_roles"]],
update_vectric_membership_status?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_membership_status_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_membership_status_bool_exp"]},ValueTypes["vectric_membership_status_mutation_response"]],
update_vectric_membership_status_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_membership_status_set_input"] | null,	pk_columns:ValueTypes["vectric_membership_status_pk_columns_input"]},ValueTypes["vectric_membership_status"]],
update_vectric_oauth_client_details?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oauth_client_details_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oauth_client_details_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_oauth_client_details_bool_exp"]},ValueTypes["vectric_oauth_client_details_mutation_response"]],
update_vectric_oauth_client_details_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oauth_client_details_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oauth_client_details_set_input"] | null,	pk_columns:ValueTypes["vectric_oauth_client_details_pk_columns_input"]},ValueTypes["vectric_oauth_client_details"]],
update_vectric_oem_detailed_products?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_detailed_products_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_detailed_products_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_oem_detailed_products_bool_exp"]},ValueTypes["vectric_oem_detailed_products_mutation_response"]],
update_vectric_oem_detailed_products_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_detailed_products_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_detailed_products_set_input"] | null,	pk_columns:ValueTypes["vectric_oem_detailed_products_pk_columns_input"]},ValueTypes["vectric_oem_detailed_products"]],
update_vectric_oem_fastspring_item?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_fastspring_item_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_fastspring_item_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_oem_fastspring_item_bool_exp"]},ValueTypes["vectric_oem_fastspring_item_mutation_response"]],
update_vectric_oem_fastspring_item_bundle?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_fastspring_item_bundle_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_fastspring_item_bundle_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_oem_fastspring_item_bundle_bool_exp"]},ValueTypes["vectric_oem_fastspring_item_bundle_mutation_response"]],
update_vectric_oem_fastspring_item_bundle_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_fastspring_item_bundle_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_fastspring_item_bundle_set_input"] | null,	pk_columns:ValueTypes["vectric_oem_fastspring_item_bundle_pk_columns_input"]},ValueTypes["vectric_oem_fastspring_item_bundle"]],
update_vectric_oem_fastspring_item_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_fastspring_item_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_fastspring_item_set_input"] | null,	pk_columns:ValueTypes["vectric_oem_fastspring_item_pk_columns_input"]},ValueTypes["vectric_oem_fastspring_item"]],
update_vectric_oem_fastspring_order?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_fastspring_order_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_fastspring_order_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_oem_fastspring_order_bool_exp"]},ValueTypes["vectric_oem_fastspring_order_mutation_response"]],
update_vectric_oem_fastspring_order_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_fastspring_order_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_fastspring_order_set_input"] | null,	pk_columns:ValueTypes["vectric_oem_fastspring_order_pk_columns_input"]},ValueTypes["vectric_oem_fastspring_order"]],
update_vectric_oem_invite_status?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_invite_status_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_invite_status_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_oem_invite_status_bool_exp"]},ValueTypes["vectric_oem_invite_status_mutation_response"]],
update_vectric_oem_invite_status_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_invite_status_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_invite_status_set_input"] | null,	pk_columns:ValueTypes["vectric_oem_invite_status_pk_columns_input"]},ValueTypes["vectric_oem_invite_status"]],
update_vectric_oem_licence_allocation_type?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_licence_allocation_type_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_licence_allocation_type_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_oem_licence_allocation_type_bool_exp"]},ValueTypes["vectric_oem_licence_allocation_type_mutation_response"]],
update_vectric_oem_licence_allocation_type_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_licence_allocation_type_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_licence_allocation_type_set_input"] | null,	pk_columns:ValueTypes["vectric_oem_licence_allocation_type_pk_columns_input"]},ValueTypes["vectric_oem_licence_allocation_type"]],
update_vectric_oem_products?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_products_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_products_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_oem_products_bool_exp"]},ValueTypes["vectric_oem_products_mutation_response"]],
update_vectric_oem_products_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_oem_products_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_oem_products_set_input"] | null,	pk_columns:ValueTypes["vectric_oem_products_pk_columns_input"]},ValueTypes["vectric_oem_products"]],
update_vectric_organization_types?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_organization_types_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_organization_types_bool_exp"]},ValueTypes["vectric_organization_types_mutation_response"]],
update_vectric_organization_types_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_organization_types_set_input"] | null,	pk_columns:ValueTypes["vectric_organization_types_pk_columns_input"]},ValueTypes["vectric_organization_types"]],
update_vectric_products_clipartcollection_links?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_products_clipartcollection_links_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_clipartcollection_links_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_products_clipartcollection_links_bool_exp"]},ValueTypes["vectric_products_clipartcollection_links_mutation_response"]],
update_vectric_products_clipartcollection_links_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_products_clipartcollection_links_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_clipartcollection_links_set_input"] | null,	pk_columns:ValueTypes["vectric_products_clipartcollection_links_pk_columns_input"]},ValueTypes["vectric_products_clipartcollection_links"]],
update_vectric_products_enhancement_eligibility?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_products_enhancement_eligibility_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_enhancement_eligibility_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_products_enhancement_eligibility_bool_exp"]},ValueTypes["vectric_products_enhancement_eligibility_mutation_response"]],
update_vectric_products_enhancement_eligibility_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_products_enhancement_eligibility_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_enhancement_eligibility_set_input"] | null,	pk_columns:ValueTypes["vectric_products_enhancement_eligibility_pk_columns_input"]},ValueTypes["vectric_products_enhancement_eligibility"]],
update_vectric_products_freeclipart?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_products_freeclipart_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_freeclipart_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_products_freeclipart_bool_exp"]},ValueTypes["vectric_products_freeclipart_mutation_response"]],
update_vectric_products_freeclipart_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_products_freeclipart_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_freeclipart_set_input"] | null,	pk_columns:ValueTypes["vectric_products_freeclipart_pk_columns_input"]},ValueTypes["vectric_products_freeclipart"]],
update_vectric_products_fulfilments?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_products_fulfilments_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_fulfilments_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_products_fulfilments_bool_exp"]},ValueTypes["vectric_products_fulfilments_mutation_response"]],
update_vectric_products_fulfilments_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_products_fulfilments_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_fulfilments_set_input"] | null,	pk_columns:ValueTypes["vectric_products_fulfilments_pk_columns_input"]},ValueTypes["vectric_products_fulfilments"]],
update_vectric_products_fulfilmenttypes?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_products_fulfilmenttypes_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_fulfilmenttypes_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_products_fulfilmenttypes_bool_exp"]},ValueTypes["vectric_products_fulfilmenttypes_mutation_response"]],
update_vectric_products_fulfilmenttypes_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_products_fulfilmenttypes_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_fulfilmenttypes_set_input"] | null,	pk_columns:ValueTypes["vectric_products_fulfilmenttypes_pk_columns_input"]},ValueTypes["vectric_products_fulfilmenttypes"]],
update_vectric_products_product_fulfilments?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_products_product_fulfilments_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_product_fulfilments_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_products_product_fulfilments_bool_exp"]},ValueTypes["vectric_products_product_fulfilments_mutation_response"]],
update_vectric_products_product_fulfilments_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_products_product_fulfilments_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_product_fulfilments_set_input"] | null,	pk_columns:ValueTypes["vectric_products_product_fulfilments_pk_columns_input"]},ValueTypes["vectric_products_product_fulfilments"]],
update_vectric_products_product_licence_type?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_product_licence_type_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_products_product_licence_type_bool_exp"]},ValueTypes["vectric_products_product_licence_type_mutation_response"]],
update_vectric_products_product_licence_type_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_products_product_licence_type_set_input"] | null,	pk_columns:ValueTypes["vectric_products_product_licence_type_pk_columns_input"]},ValueTypes["vectric_products_product_licence_type"]],
update_vectric_sales_customerupdates?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_sales_customerupdates_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_sales_customerupdates_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_sales_customerupdates_bool_exp"]},ValueTypes["vectric_sales_customerupdates_mutation_response"]],
update_vectric_sales_customerupdates_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_sales_customerupdates_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_sales_customerupdates_set_input"] | null,	pk_columns:ValueTypes["vectric_sales_customerupdates_pk_columns_input"]},ValueTypes["vectric_sales_customerupdates"]],
update_vectric_sales_oemlicences?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_sales_oemlicences_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_sales_oemlicences_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_sales_oemlicences_bool_exp"]},ValueTypes["vectric_sales_oemlicences_mutation_response"]],
update_vectric_sales_oemlicences_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_sales_oemlicences_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_sales_oemlicences_set_input"] | null,	pk_columns:ValueTypes["vectric_sales_oemlicences_pk_columns_input"]},ValueTypes["vectric_sales_oemlicences"]],
update_vectric_sales_salesitemproduct_status?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_sales_salesitemproduct_status_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_sales_salesitemproduct_status_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_sales_salesitemproduct_status_bool_exp"]},ValueTypes["vectric_sales_salesitemproduct_status_mutation_response"]],
update_vectric_sales_salesitemproduct_status_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_sales_salesitemproduct_status_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_sales_salesitemproduct_status_set_input"] | null,	pk_columns:ValueTypes["vectric_sales_salesitemproduct_status_pk_columns_input"]},ValueTypes["vectric_sales_salesitemproduct_status"]],
update_vectric_security_emailverificationtokens?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_security_emailverificationtokens_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_security_emailverificationtokens_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_security_emailverificationtokens_bool_exp"]},ValueTypes["vectric_security_emailverificationtokens_mutation_response"]],
update_vectric_security_emailverificationtokens_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_security_emailverificationtokens_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_security_emailverificationtokens_set_input"] | null,	pk_columns:ValueTypes["vectric_security_emailverificationtokens_pk_columns_input"]},ValueTypes["vectric_security_emailverificationtokens"]],
update_vectric_security_group_authorities?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_security_group_authorities_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_security_group_authorities_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_security_group_authorities_bool_exp"]},ValueTypes["vectric_security_group_authorities_mutation_response"]],
update_vectric_security_group_members?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_security_group_members_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_security_group_members_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_security_group_members_bool_exp"]},ValueTypes["vectric_security_group_members_mutation_response"]],
update_vectric_security_group_members_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_security_group_members_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_security_group_members_set_input"] | null,	pk_columns:ValueTypes["vectric_security_group_members_pk_columns_input"]},ValueTypes["vectric_security_group_members"]],
update_vectric_security_passwordresettokens?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_security_passwordresettokens_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_security_passwordresettokens_bool_exp"]},ValueTypes["vectric_security_passwordresettokens_mutation_response"]],
update_vectric_security_passwordresettokens_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_security_passwordresettokens_set_input"] | null,	pk_columns:ValueTypes["vectric_security_passwordresettokens_pk_columns_input"]},ValueTypes["vectric_security_passwordresettokens"]],
update_vectric_security_userinvitations?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_security_userinvitations_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_security_userinvitations_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_security_userinvitations_bool_exp"]},ValueTypes["vectric_security_userinvitations_mutation_response"]],
update_vectric_subscription_contract_status?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_subscription_contract_status_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_subscription_contract_status_bool_exp"]},ValueTypes["vectric_subscription_contract_status_mutation_response"]],
update_vectric_subscription_contract_status_by_pk?: [{	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_subscription_contract_status_set_input"] | null,	pk_columns:ValueTypes["vectric_subscription_contract_status_pk_columns_input"]},ValueTypes["vectric_subscription_contract_status"]],
update_vectric_subscription_contracts?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_subscription_contracts_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_subscription_contracts_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_subscription_contracts_bool_exp"]},ValueTypes["vectric_subscription_contracts_mutation_response"]],
update_vectric_subscription_contracts_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_subscription_contracts_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_subscription_contracts_set_input"] | null,	pk_columns:ValueTypes["vectric_subscription_contracts_pk_columns_input"]},ValueTypes["vectric_subscription_contracts"]],
update_vectric_subscription_events?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_subscription_events_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_subscription_events_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_subscription_events_bool_exp"]},ValueTypes["vectric_subscription_events_mutation_response"]],
update_vectric_subscription_events_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_subscription_events_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_subscription_events_set_input"] | null,	pk_columns:ValueTypes["vectric_subscription_events_pk_columns_input"]},ValueTypes["vectric_subscription_events"]],
update_vectric_update_requests_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_update_requests_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_update_requests_set_input"] | null,	pk_columns:ValueTypes["vectric_update_requests_pk_columns_input"]},ValueTypes["vectric_update_requests"]],
update_vectric_upgrade_tokens?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_upgrade_tokens_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_upgrade_tokens_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_upgrade_tokens_bool_exp"]},ValueTypes["vectric_upgrade_tokens_mutation_response"]],
update_vectric_upgrade_tokens_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_upgrade_tokens_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_upgrade_tokens_set_input"] | null,	pk_columns:ValueTypes["vectric_upgrade_tokens_pk_columns_input"]},ValueTypes["vectric_upgrade_tokens"]],
update_vectric_version_code?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_version_code_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_version_code_set_input"] | null,	/** filter the rows which have to be updated */
	where:ValueTypes["vectric_version_code_bool_exp"]},ValueTypes["vectric_version_code_mutation_response"]],
update_vectric_version_code_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?:ValueTypes["vectric_version_code_inc_input"] | null,	/** sets the columns of the filtered rows to the given values */
	_set?:ValueTypes["vectric_version_code_set_input"] | null,	pk_columns:ValueTypes["vectric_version_code_pk_columns_input"]},ValueTypes["vectric_version_code"]],
upgradeDetailsFromToken?: [{	token:string},ValueTypes["UpgradeDetails"]],
validateFSRequest?: [{	addonOnly:boolean,	clipartLogID?:string | null,	email?:string | null,	firstName?:string | null,	lastName?:string | null,	modelCollection?:string | null,	modelProject:string,	otherModelCollections:string[],	software:string[],	upgradeToken?:string | null},ValueTypes["FastspringSecureRequestOutput"]],
verifyEmail?: [{	verificationToken:string},ValueTypes["EmailVerificationOutput"]],
zendeskUpload?: [{	customerId:ValueTypes["bigint"],	zdUploadedFiles:string[],	zendeskUploadId:ValueTypes["bigint"]},ValueTypes["ZendeskUploadOutput"]],
		__typename?: boolean
}>;
	["query_root"]: AliasType<{
UserGroupAttendeeById?: [{	attendeeid:ValueTypes["bigint"]},ValueTypes["vectric_usergroup_2019_attendees"]],
UserGroupAttendees?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_usergroup_2019_attendees_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_usergroup_2019_attendees_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_usergroup_2019_attendees_bool_exp"] | null},ValueTypes["vectric_usergroup_2019_attendees"]],
UserGroupAttendees_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_usergroup_2019_attendees_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_usergroup_2019_attendees_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_usergroup_2019_attendees_bool_exp"] | null},ValueTypes["vectric_usergroup_2019_attendees_aggregate"]],
allocatableBundles?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocatable_bundles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocatable_bundles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocatable_bundles_bool_exp"] | null},ValueTypes["vectric_allocatable_bundles"]],
allocatableLicenceCount?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocatable_licence_count_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocatable_licence_count_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocatable_licence_count_bool_exp"] | null},ValueTypes["vectric_allocatable_licence_count"]],
allocatableLicenceCount_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocatable_licence_count_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocatable_licence_count_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocatable_licence_count_bool_exp"] | null},ValueTypes["vectric_allocatable_licence_count_aggregate"]],
allocatedBundles?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocated_bundles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocated_bundles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocated_bundles_bool_exp"] | null},ValueTypes["vectric_allocated_bundles"]],
allocationSummaries?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocation_summary_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocation_summary_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocation_summary_bool_exp"] | null},ValueTypes["vectric_allocation_summary"]],
allocationSummaryById?: [{	id:number},ValueTypes["vectric_allocation_summary"]],
allocationSummary_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocation_summary_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocation_summary_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocation_summary_bool_exp"] | null},ValueTypes["vectric_allocation_summary_aggregate"]],
assignment?: [{	assignment_id:number},ValueTypes["vectric_owned_item_assignments"]],
assignments?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_owned_item_assignments_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_owned_item_assignments_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_owned_item_assignments_bool_exp"] | null},ValueTypes["vectric_owned_item_assignments"]],
assignments_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_owned_item_assignments_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_owned_item_assignments_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_owned_item_assignments_bool_exp"] | null},ValueTypes["vectric_owned_item_assignments_aggregate"]],
checkSignUpEmail?: [{	data:ValueTypes["CheckEmailForSignUpInput"]},ValueTypes["CheckEmailForSignUpOutput"]],
clipartCollection?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_clipartcollection_links_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_clipartcollection_links_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_clipartcollection_links_bool_exp"] | null},ValueTypes["vectric_products_clipartcollection_links"]],
countries?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_countries_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_countries_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_countries_bool_exp"] | null},ValueTypes["vectric_countries"]],
countries_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_countries_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_countries_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_countries_bool_exp"] | null},ValueTypes["vectric_countries_aggregate"]],
countryById?: [{	countryid:ValueTypes["bigint"]},ValueTypes["vectric_countries"]],
customerArea?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_area_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_area_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_area_bool_exp"] | null},ValueTypes["vectric_customer_area"]],
customerAreaByPk?: [{	customerAreaId:ValueTypes["bigint"]},ValueTypes["vectric_customer_area"]],
customerAreaFile?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_area_file_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_area_file_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_area_file_bool_exp"] | null},ValueTypes["vectric_customer_area_file"]],
customerAreaFileByPk?: [{	customerAreaFileId:ValueTypes["bigint"]},ValueTypes["vectric_customer_area_file"]],
customerById?: [{	customerId:ValueTypes["bigint"]},ValueTypes["vectric_sales_customers"]],
customerResponseById?: [{	customerresponseid:ValueTypes["bigint"]},ValueTypes["vectric_customer_responses"]],
customerResponses?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_responses_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_responses_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_responses_bool_exp"] | null},ValueTypes["vectric_customer_responses"]],
customerResponses_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_responses_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_responses_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_responses_bool_exp"] | null},ValueTypes["vectric_customer_responses_aggregate"]],
customerSales?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_sales_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_sales_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_sales_bool_exp"] | null},ValueTypes["vectric_customer_sales"]],
customerSales_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_sales_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_sales_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_sales_bool_exp"] | null},ValueTypes["vectric_customer_sales_aggregate"]],
customerStatus?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_status_bool_exp"] | null},ValueTypes["vectric_customer_status"]],
customerStatusById?: [{	statusId:ValueTypes["bigint"]},ValueTypes["vectric_customer_status"]],
customers?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_customers_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_customers_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_customers_bool_exp"] | null},ValueTypes["vectric_sales_customers"]],
downloadByPk?: [{	downloadId:string},ValueTypes["vectric_download"]],
emailTemplate?: [{	templateName:string},ValueTypes["vectric_sales_velocitytemplate"]],
emailTemplate_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_velocitytemplate_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_velocitytemplate_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_velocitytemplate_bool_exp"] | null},ValueTypes["vectric_sales_velocitytemplate_aggregate"]],
emailTemplates?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_velocitytemplate_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_velocitytemplate_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_velocitytemplate_bool_exp"] | null},ValueTypes["vectric_sales_velocitytemplate"]],
enhancementTokens?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_enhancement_tokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_enhancement_tokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_enhancement_tokens_bool_exp"] | null},ValueTypes["vectric_enhancement_tokens"]],
entitledProduct?: [{	productId:number},ValueTypes["vectric_entitled_products"]],
entitledProducts?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_entitled_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_entitled_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_entitled_products_bool_exp"] | null},ValueTypes["vectric_entitled_products"]],
entitledProducts_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_entitled_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_entitled_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_entitled_products_bool_exp"] | null},ValueTypes["vectric_entitled_products_aggregate"]],
entitlement?: [{	entitlementId:number},ValueTypes["vectric_entitlements"]],
entitlementLicence?: [{	entitlementLicenceId:number},ValueTypes["vectric_entitlement_licences"]],
entitlementLicence_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_entitlement_licences_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_entitlement_licences_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_entitlement_licences_bool_exp"] | null},ValueTypes["vectric_entitlement_licences_aggregate"]],
entitlementLicences?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_entitlement_licences_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_entitlement_licences_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_entitlement_licences_bool_exp"] | null},ValueTypes["vectric_entitlement_licences"]],
entitlements?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_entitlements_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_entitlements_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_entitlements_bool_exp"] | null},ValueTypes["vectric_entitlements"]],
entitlements_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_entitlements_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_entitlements_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_entitlements_bool_exp"] | null},ValueTypes["vectric_entitlements_aggregate"]],
evalRequestById?: [{	requestId:ValueTypes["bigint"]},ValueTypes["vectric_oem_eval_request"]],
evalRequest_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_eval_request_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_eval_request_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_eval_request_bool_exp"] | null},ValueTypes["vectric_oem_eval_request_aggregate"]],
evalRequests?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_eval_request_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_eval_request_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_eval_request_bool_exp"] | null},ValueTypes["vectric_oem_eval_request"]],
freeClipart?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_freeclipart_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_freeclipart_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_freeclipart_bool_exp"] | null},ValueTypes["vectric_freeclipart"]],
freeClipartCategory?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_freeclipart_category_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_freeclipart_category_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_freeclipart_category_bool_exp"] | null},ValueTypes["vectric_freeclipart_category"]],
freeClipartTokenByPk?: [{	clipartToken:string},ValueTypes["vectric_free_clipart_tokens"]],
freeClipartTokens?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_free_clipart_tokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_free_clipart_tokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_free_clipart_tokens_bool_exp"] | null},ValueTypes["vectric_free_clipart_tokens"]],
getAdminDownloadLinkForFulfilment?: [{	fulfilmentId:ValueTypes["bigint"]},ValueTypes["GetDownloadLinkForFulfilmentOutput"]],
getDownloadLinkForFulfilment?: [{	customerId:ValueTypes["bigint"],	fulfilmentId:ValueTypes["bigint"],	ipAddress?:string | null,	salesItemProductId:ValueTypes["bigint"]},ValueTypes["GetDownloadLinkForFulfilmentOutput"]],
getDownloadLinkForPrivateProject?: [{	downloadId:string},ValueTypes["GetDownloadLinkForContentProject"]],
getLicenceDetailsForProductOrderItemAndAddOns?: [{	salesItemProductId:ValueTypes["bigint"]},ValueTypes["LicenceDetailsForProductOrderItemAndAddOns"]],
getLicenceDetailsForProductOrderItems?: [{	salesItemProductIds?:ValueTypes["bigint"][]},ValueTypes["LicenceDetailsForProductOrderItem"]],
licenceScope?: [{	scope:string},ValueTypes["vectric_organization_licence_scope"]],
licenceScope_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_licence_scope_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_licence_scope_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_licence_scope_bool_exp"] | null},ValueTypes["vectric_organization_licence_scope_aggregate"]],
licenceScopes?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_licence_scope_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_licence_scope_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_licence_scope_bool_exp"] | null},ValueTypes["vectric_organization_licence_scope"]],
membershipById?: [{	membershipId:number},ValueTypes["vectric_memberships"]],
membershipInvitationById?: [{	invitationId:number},ValueTypes["vectric_membership_invitations"]],
membershipInvitationCheck?: [{	token:string},ValueTypes["MembershipInvitationCheckResult"]],
membershipInvitations?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_invitations_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_invitations_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_invitations_bool_exp"] | null},ValueTypes["vectric_membership_invitations"]],
membershipInvitations_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_invitations_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_invitations_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_invitations_bool_exp"] | null},ValueTypes["vectric_membership_invitations_aggregate"]],
memberships?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_memberships_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_memberships_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_memberships_bool_exp"] | null},ValueTypes["vectric_memberships"]],
memberships_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_memberships_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_memberships_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_memberships_bool_exp"] | null},ValueTypes["vectric_memberships_aggregate"]],
oemAllocationEmails?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_allocation_emails_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_allocation_emails_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_allocation_emails_bool_exp"] | null},ValueTypes["vectric_oem_allocation_emails"]],
oemAllocationEmails_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_allocation_emails_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_allocation_emails_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_allocation_emails_bool_exp"] | null},ValueTypes["vectric_oem_allocation_emails_aggregate"]],
oemBundles?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_oem_bundles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_oem_bundles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_oem_bundles_bool_exp"] | null},ValueTypes["vectric_sales_oem_bundles"]],
oemBundlesById?: [{	bundleId:string},ValueTypes["vectric_sales_oem_bundles"]],
oemBundles_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_oem_bundles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_oem_bundles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_oem_bundles_bool_exp"] | null},ValueTypes["vectric_sales_oem_bundles_aggregate"]],
oemFastspringItem?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_fastspring_item_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_fastspring_item_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_fastspring_item_bool_exp"] | null},ValueTypes["vectric_oem_fastspring_item"]],
oemFastspringItemById?: [{	itemId:ValueTypes["bigint"]},ValueTypes["vectric_oem_fastspring_item"]],
oemFastspringItem_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_fastspring_item_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_fastspring_item_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_fastspring_item_bool_exp"] | null},ValueTypes["vectric_oem_fastspring_item_aggregate"]],
oemFastspringOrder?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_fastspring_order_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_fastspring_order_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_fastspring_order_bool_exp"] | null},ValueTypes["vectric_oem_fastspring_order"]],
oemFastspringOrderById?: [{	orderId:ValueTypes["bigint"]},ValueTypes["vectric_oem_fastspring_order"]],
oemFastspringOrder_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_fastspring_order_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_fastspring_order_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_fastspring_order_bool_exp"] | null},ValueTypes["vectric_oem_fastspring_order_aggregate"]],
oemLicenceAllocationType?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_licence_allocation_type_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_licence_allocation_type_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_licence_allocation_type_bool_exp"] | null},ValueTypes["vectric_oem_licence_allocation_type"]],
oemLicences?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_oemlicences_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_oemlicences_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_oemlicences_bool_exp"] | null},ValueTypes["vectric_sales_oemlicences"]],
oemLicencesById?: [{	oemLicenceId:ValueTypes["bigint"]},ValueTypes["vectric_sales_oemlicences"]],
oemPartners?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_partners_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_partners_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_partners_bool_exp"] | null},ValueTypes["vectric_oem_partners"]],
oemPartnersById?: [{	partnerId:ValueTypes["bigint"]},ValueTypes["vectric_oem_partners"]],
oemProductByPk?: [{	oemProductId:ValueTypes["bigint"]},ValueTypes["vectric_oem_products"]],
oemProducts?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_products_bool_exp"] | null},ValueTypes["vectric_oem_products"]],
oemPurchaseOptions?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_purchase_options_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_purchase_options_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_purchase_options_bool_exp"] | null},ValueTypes["vectric_oem_purchase_options"]],
oemPurchaseOptionsByOptionId?: [{	optionId:ValueTypes["bigint"]},ValueTypes["vectric_oem_purchase_options"]],
oemPurchaseOptions_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_purchase_options_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_purchase_options_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_purchase_options_bool_exp"] | null},ValueTypes["vectric_oem_purchase_options_aggregate"]],
oemStaffCustomerById?: [{	staffId:ValueTypes["bigint"]},ValueTypes["vectric_oem_staff_customer"]],
oemStaffCustomers?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_staff_customer_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_staff_customer_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_staff_customer_bool_exp"] | null},ValueTypes["vectric_oem_staff_customer"]],
oemStaffCustomers_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_staff_customer_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_staff_customer_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_staff_customer_bool_exp"] | null},ValueTypes["vectric_oem_staff_customer_aggregate"]],
oemStaffMembershipDetails?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_staff_admin_ownership_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_staff_admin_ownership_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_staff_admin_ownership_bool_exp"] | null},ValueTypes["vectric_oem_staff_admin_ownership"]],
orders?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_orders_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_orders_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_orders_bool_exp"] | null},ValueTypes["vectric_sales_orders"]],
ordersByOrderId?: [{	orderId:string},ValueTypes["vectric_sales_orders"]],
organizationAuditById?: [{	auditId:number},ValueTypes["vectric_organization_audit"]],
organizationAudit_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_audit_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_audit_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_audit_bool_exp"] | null},ValueTypes["vectric_organization_audit_aggregate"]],
organizationById?: [{	organizationId:number},ValueTypes["vectric_organizations"]],
organizationMembershipsAdminAccess?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_memberships_admin_access_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_memberships_admin_access_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_memberships_admin_access_bool_exp"] | null},ValueTypes["vectric_organization_memberships_admin_access"]],
organizationOrder?: [{	orderId:string},ValueTypes["vectric_organization_orders"]],
organizationOrderItem?: [{	orderItemId:number},ValueTypes["vectric_organization_order_items"]],
organizationOrderItems?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_order_items_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_order_items_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_order_items_bool_exp"] | null},ValueTypes["vectric_organization_order_items"]],
organizationOrders?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_orders_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_orders_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_orders_bool_exp"] | null},ValueTypes["vectric_organization_orders"]],
organization_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organizations_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organizations_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organizations_bool_exp"] | null},ValueTypes["vectric_organizations_aggregate"]],
organizations?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organizations_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organizations_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organizations_bool_exp"] | null},ValueTypes["vectric_organizations"]],
organiztionAudits?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_audit_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_audit_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_audit_bool_exp"] | null},ValueTypes["vectric_organization_audit"]],
ownedItem?: [{	ownedItemId:number},ValueTypes["vectric_owned_items"]],
ownedItems?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_owned_items_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_owned_items_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_owned_items_bool_exp"] | null},ValueTypes["vectric_owned_items"]],
ownedItems_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_owned_items_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_owned_items_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_owned_items_bool_exp"] | null},ValueTypes["vectric_owned_items_aggregate"]],
ownedProduct?: [{	productId:number},ValueTypes["vectric_owned_products"]],
ownedProducts?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_owned_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_owned_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_owned_products_bool_exp"] | null},ValueTypes["vectric_owned_products"]],
ownedProducts_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_owned_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_owned_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_owned_products_bool_exp"] | null},ValueTypes["vectric_owned_products_aggregate"]],
passwordResetTokens?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_passwordresettokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_passwordresettokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_passwordresettokens_bool_exp"] | null},ValueTypes["vectric_security_passwordresettokens"]],
passwordResetTokensByPk?: [{	token:string},ValueTypes["vectric_security_passwordresettokens"]],
productById?: [{	productID:ValueTypes["bigint"]},ValueTypes["vectric_products_products"]],
productEnhancementEligibility?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_enhancement_eligibility_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_enhancement_eligibility_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_enhancement_eligibility_bool_exp"] | null},ValueTypes["vectric_products_enhancement_eligibility"]],
productTypes?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_producttype_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_producttype_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_producttype_bool_exp"] | null},ValueTypes["vectric_products_producttype"]],
productTypesById?: [{	productTypeId:ValueTypes["bigint"]},ValueTypes["vectric_products_producttype"]],
productUpgradeEligibilityById?: [{	eligibilityid:ValueTypes["bigint"]},ValueTypes["vectric_products_upgrade_eligibility"]],
products?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_products_bool_exp"] | null},ValueTypes["vectric_products_products"]],
productsFreeClipart?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_freeclipart_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_freeclipart_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_freeclipart_bool_exp"] | null},ValueTypes["vectric_products_freeclipart"]],
productsUpgradeEligibility?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_upgrade_eligibility_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_upgrade_eligibility_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_upgrade_eligibility_bool_exp"] | null},ValueTypes["vectric_products_upgrade_eligibility"]],
questionById?: [{	questionid:ValueTypes["bigint"]},ValueTypes["vectric_questions"]],
questions?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_questions_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_questions_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_questions_bool_exp"] | null},ValueTypes["vectric_questions"]],
questions_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_questions_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_questions_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_questions_bool_exp"] | null},ValueTypes["vectric_questions_aggregate"]],
responseById?: [{	responseid:ValueTypes["bigint"]},ValueTypes["vectric_responses"]],
responses?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_responses_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_responses_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_responses_bool_exp"] | null},ValueTypes["vectric_responses"]],
responses_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_responses_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_responses_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_responses_bool_exp"] | null},ValueTypes["vectric_responses_aggregate"]],
saleableProduct?: [{	productId:number},ValueTypes["vectric_saleable_products"]],
saleableProducts?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_saleable_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_saleable_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_saleable_products_bool_exp"] | null},ValueTypes["vectric_saleable_products"]],
saleableProducts_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_saleable_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_saleable_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_saleable_products_bool_exp"] | null},ValueTypes["vectric_saleable_products_aggregate"]],
salesCustomers_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_customers_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_customers_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_customers_bool_exp"] | null},ValueTypes["vectric_sales_customers_aggregate"]],
salesItemProduct?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_salesitem_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_salesitem_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_salesitem_products_bool_exp"] | null},ValueTypes["vectric_sales_salesitem_products"]],
salesItemProductById?: [{	salesItemProductId:ValueTypes["bigint"]},ValueTypes["vectric_sales_salesitem_products"]],
salesItems?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_salesitems_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_salesitems_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_salesitems_bool_exp"] | null},ValueTypes["vectric_sales_salesitems"]],
salesItemsById?: [{	salesitemid:ValueTypes["bigint"]},ValueTypes["vectric_sales_salesitems"]],
scheduledEmails?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_scheduled_emails_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_scheduled_emails_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_scheduled_emails_bool_exp"] | null},ValueTypes["vectric_scheduled_emails"]],
scheduledEmailsById?: [{	id:number},ValueTypes["vectric_scheduled_emails"]],
scheduledEmails_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_scheduled_emails_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_scheduled_emails_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_scheduled_emails_bool_exp"] | null},ValueTypes["vectric_scheduled_emails_aggregate"]],
securityEmailVerificationTokenByToken?: [{	token:string},ValueTypes["vectric_security_emailverificationtokens"]],
securityEmailVerificationTokens?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_emailverificationtokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_emailverificationtokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_emailverificationtokens_bool_exp"] | null},ValueTypes["vectric_security_emailverificationtokens"]],
securityUserInvitations?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_userinvitations_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_userinvitations_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_userinvitations_bool_exp"] | null},ValueTypes["vectric_security_userinvitations"]],
securityUsers?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_users_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_users_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_users_bool_exp"] | null},ValueTypes["vectric_security_users"]],
selectCustomerDownloads?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_customer_downloads_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_customer_downloads_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_customer_downloads_bool_exp"] | null},ValueTypes["vectric_sales_customer_downloads"]],
selectCustomerDownloadsById?: [{	downloadId:ValueTypes["bigint"]},ValueTypes["vectric_sales_customer_downloads"]],
selectCustomerDownloads_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_customer_downloads_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_customer_downloads_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_customer_downloads_bool_exp"] | null},ValueTypes["vectric_sales_customer_downloads_aggregate"]],
selectSecurityGroupMembersById?: [{	id:ValueTypes["bigint"]},ValueTypes["vectric_security_group_members"]],
selectSecurityGrupMemebers?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_group_members_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_group_members_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_group_members_bool_exp"] | null},ValueTypes["vectric_security_group_members"]],
shortLinks?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_linkshortener_links_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_linkshortener_links_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_linkshortener_links_bool_exp"] | null},ValueTypes["vectric_linkshortener_links"]],
shortLinksByHash?: [{	shortUrlHash:string},ValueTypes["vectric_linkshortener_links"]],
siteOptionLocation_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_site_option_location_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_site_option_location_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_site_option_location_bool_exp"] | null},ValueTypes["vectric_site_option_location_aggregate"]],
siteOptionLocations?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_site_option_location_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_site_option_location_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_site_option_location_bool_exp"] | null},ValueTypes["vectric_site_option_location"]],
siteOptionLocationsById?: [{	locationid:ValueTypes["bigint"]},ValueTypes["vectric_site_option_location"]],
siteOptions?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_site_options_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_site_options_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_site_options_bool_exp"] | null},ValueTypes["vectric_site_options"]],
siteOptionsById?: [{	optionid:ValueTypes["bigint"]},ValueTypes["vectric_site_options"]],
siteOptions_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_site_options_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_site_options_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_site_options_bool_exp"] | null},ValueTypes["vectric_site_options_aggregate"]],
testAction?: [{	input:string},ValueTypes["SampleOutput"]],
toolpathSaveToken_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_toolpath_saver_token_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_toolpath_saver_token_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_toolpath_saver_token_bool_exp"] | null},ValueTypes["vectric_toolpath_saver_token_aggregate"]],
toolpathSaverTokenById?: [{	toolpathSaverTokenId:ValueTypes["bigint"]},ValueTypes["vectric_toolpath_saver_token"]],
toolpathSaverTokens?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_toolpath_saver_token_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_toolpath_saver_token_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_toolpath_saver_token_bool_exp"] | null},ValueTypes["vectric_toolpath_saver_token"]],
trialOrderById?: [{	orderId:ValueTypes["bigint"]},ValueTypes["vectric_trial_order"]],
trialOrders?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_trial_order_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_trial_order_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_trial_order_bool_exp"] | null},ValueTypes["vectric_trial_order"]],
trialOrders_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_trial_order_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_trial_order_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_trial_order_bool_exp"] | null},ValueTypes["vectric_trial_order_aggregate"]],
updateRequestById?: [{	requestId:ValueTypes["bigint"]},ValueTypes["vectric_update_requests"]],
updateRequests?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_update_requests_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_update_requests_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_update_requests_bool_exp"] | null},ValueTypes["vectric_update_requests"]],
upgradeFeatureById?: [{	featureId:string},ValueTypes["vectric_upgrades_feature"]],
upgradeFeatures?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrades_feature_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrades_feature_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrades_feature_bool_exp"] | null},ValueTypes["vectric_upgrades_feature"]],
upgradeFeatures_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrades_feature_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrades_feature_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrades_feature_bool_exp"] | null},ValueTypes["vectric_upgrades_feature_aggregate"]],
upgradeProductTypeFeatureById?: [{	upgradeId:ValueTypes["bigint"]},ValueTypes["vectric_upgrades_product_type_feature"]],
upgradeProductTypeFeatures?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrades_product_type_feature_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrades_product_type_feature_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrades_product_type_feature_bool_exp"] | null},ValueTypes["vectric_upgrades_product_type_feature"]],
upgradeProductTypeFeatures_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrades_product_type_feature_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrades_product_type_feature_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrades_product_type_feature_bool_exp"] | null},ValueTypes["vectric_upgrades_product_type_feature_aggregate"]],
upgradeTokens?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrade_tokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrade_tokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrade_tokens_bool_exp"] | null},ValueTypes["vectric_upgrade_tokens"]],
upgradeTokensById?: [{	token:string},ValueTypes["vectric_upgrade_tokens"]],
upgradeVersionFeatureById?: [{	upgradeId:ValueTypes["bigint"]},ValueTypes["vectric_upgrades_version_feature"]],
upgradeVersionFeatures?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrades_version_feature_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrades_version_feature_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrades_version_feature_bool_exp"] | null},ValueTypes["vectric_upgrades_version_feature"]],
upgradeVersionFeatures_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrades_version_feature_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrades_version_feature_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrades_version_feature_bool_exp"] | null},ValueTypes["vectric_upgrades_version_feature_aggregate"]],
userGroupWaitingListEntries?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_usergroup_2019_waitlist_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_usergroup_2019_waitlist_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_usergroup_2019_waitlist_bool_exp"] | null},ValueTypes["vectric_usergroup_2019_waitlist"]],
userGroupWaitingListEntries_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_usergroup_2019_waitlist_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_usergroup_2019_waitlist_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_usergroup_2019_waitlist_bool_exp"] | null},ValueTypes["vectric_usergroup_2019_waitlist_aggregate"]],
userGroupWaitingListEntryById?: [{	attendeeid:ValueTypes["bigint"]},ValueTypes["vectric_usergroup_2019_waitlist"]],
validateInvitationToken?: [{	token:string},ValueTypes["ValidateInvitationToken"]],
validateVerificationToken?: [{	token:string},ValueTypes["ValidateVerificationToken"]],
vectric_active_memberships?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_active_memberships_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_active_memberships_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_active_memberships_bool_exp"] | null},ValueTypes["vectric_active_memberships"]],
vectric_active_memberships_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_active_memberships_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_active_memberships_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_active_memberships_bool_exp"] | null},ValueTypes["vectric_active_memberships_aggregate"]],
vectric_active_upgrades?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_active_upgrades_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_active_upgrades_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_active_upgrades_bool_exp"] | null},ValueTypes["vectric_active_upgrades"]],
vectric_active_upgrades_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_active_upgrades_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_active_upgrades_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_active_upgrades_bool_exp"] | null},ValueTypes["vectric_active_upgrades_aggregate"]],
vectric_allocatable_bundles_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocatable_bundles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocatable_bundles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocatable_bundles_bool_exp"] | null},ValueTypes["vectric_allocatable_bundles_aggregate"]],
vectric_allocated_bundles_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocated_bundles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocated_bundles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocated_bundles_bool_exp"] | null},ValueTypes["vectric_allocated_bundles_aggregate"]],
vectric_allocation_summary_file_type?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocation_summary_file_type_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocation_summary_file_type_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocation_summary_file_type_bool_exp"] | null},ValueTypes["vectric_allocation_summary_file_type"]],
vectric_allocation_summary_file_type_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocation_summary_file_type_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocation_summary_file_type_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocation_summary_file_type_bool_exp"] | null},ValueTypes["vectric_allocation_summary_file_type_aggregate"]],
vectric_allocation_summary_file_type_by_pk?: [{	type:string},ValueTypes["vectric_allocation_summary_file_type"]],
vectric_continents?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_continents_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_continents_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_continents_bool_exp"] | null},ValueTypes["vectric_continents"]],
vectric_continents_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_continents_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_continents_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_continents_bool_exp"] | null},ValueTypes["vectric_continents_aggregate"]],
vectric_continents_by_pk?: [{	/** Continent code */
	code:ValueTypes["bpchar"]},ValueTypes["vectric_continents"]],
vectric_customer_area_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_area_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_area_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_area_bool_exp"] | null},ValueTypes["vectric_customer_area_aggregate"]],
vectric_customer_area_file_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_area_file_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_area_file_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_area_file_bool_exp"] | null},ValueTypes["vectric_customer_area_file_aggregate"]],
vectric_customer_status_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_status_bool_exp"] | null},ValueTypes["vectric_customer_status_aggregate"]],
vectric_download?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_download_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_download_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_download_bool_exp"] | null},ValueTypes["vectric_download"]],
vectric_download_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_download_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_download_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_download_bool_exp"] | null},ValueTypes["vectric_download_aggregate"]],
vectric_download_record?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_download_record_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_download_record_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_download_record_bool_exp"] | null},ValueTypes["vectric_download_record"]],
vectric_download_record_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_download_record_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_download_record_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_download_record_bool_exp"] | null},ValueTypes["vectric_download_record_aggregate"]],
vectric_download_record_by_pk?: [{	id:ValueTypes["bigint"]},ValueTypes["vectric_download_record"]],
vectric_enhancement_tokens_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_enhancement_tokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_enhancement_tokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_enhancement_tokens_bool_exp"] | null},ValueTypes["vectric_enhancement_tokens_aggregate"]],
vectric_enhancement_tokens_by_pk?: [{	token:string},ValueTypes["vectric_enhancement_tokens"]],
vectric_entitled_product_version_code_view?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_entitled_product_version_code_view_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_entitled_product_version_code_view_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_entitled_product_version_code_view_bool_exp"] | null},ValueTypes["vectric_entitled_product_version_code_view"]],
vectric_entitled_product_version_code_view_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_entitled_product_version_code_view_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_entitled_product_version_code_view_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_entitled_product_version_code_view_bool_exp"] | null},ValueTypes["vectric_entitled_product_version_code_view_aggregate"]],
vectric_free_clipart_tokens_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_free_clipart_tokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_free_clipart_tokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_free_clipart_tokens_bool_exp"] | null},ValueTypes["vectric_free_clipart_tokens_aggregate"]],
vectric_freeclipart_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_freeclipart_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_freeclipart_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_freeclipart_bool_exp"] | null},ValueTypes["vectric_freeclipart_aggregate"]],
vectric_freeclipart_by_pk?: [{	freeClipartId:ValueTypes["bigint"]},ValueTypes["vectric_freeclipart"]],
vectric_freeclipart_category_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_freeclipart_category_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_freeclipart_category_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_freeclipart_category_bool_exp"] | null},ValueTypes["vectric_freeclipart_category_aggregate"]],
vectric_freeclipart_category_by_pk?: [{	categoryId:ValueTypes["bigint"]},ValueTypes["vectric_freeclipart_category"]],
vectric_freeclipart_download_record?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_freeclipart_download_record_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_freeclipart_download_record_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_freeclipart_download_record_bool_exp"] | null},ValueTypes["vectric_freeclipart_download_record"]],
vectric_freeclipart_download_record_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_freeclipart_download_record_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_freeclipart_download_record_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_freeclipart_download_record_bool_exp"] | null},ValueTypes["vectric_freeclipart_download_record_aggregate"]],
vectric_freeclipart_download_record_by_pk?: [{	downloadId:ValueTypes["bigint"]},ValueTypes["vectric_freeclipart_download_record"]],
vectric_group_info?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_group_info_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_group_info_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_group_info_bool_exp"] | null},ValueTypes["vectric_group_info"]],
vectric_group_info_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_group_info_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_group_info_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_group_info_bool_exp"] | null},ValueTypes["vectric_group_info_aggregate"]],
vectric_group_roles?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_group_roles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_group_roles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_group_roles_bool_exp"] | null},ValueTypes["vectric_group_roles"]],
vectric_group_roles_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_group_roles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_group_roles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_group_roles_bool_exp"] | null},ValueTypes["vectric_group_roles_aggregate"]],
vectric_group_roles_by_pk?: [{	id:number},ValueTypes["vectric_group_roles"]],
vectric_group_user_role?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_group_user_role_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_group_user_role_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_group_user_role_bool_exp"] | null},ValueTypes["vectric_group_user_role"]],
vectric_group_user_role_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_group_user_role_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_group_user_role_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_group_user_role_bool_exp"] | null},ValueTypes["vectric_group_user_role_aggregate"]],
vectric_group_user_role_by_pk?: [{	customer_id:ValueTypes["bigint"],	group_id:number},ValueTypes["vectric_group_user_role"]],
vectric_groups?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_groups_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_groups_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_groups_bool_exp"] | null},ValueTypes["vectric_groups"]],
vectric_groups_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_groups_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_groups_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_groups_bool_exp"] | null},ValueTypes["vectric_groups_aggregate"]],
vectric_groups_by_pk?: [{	id:number},ValueTypes["vectric_groups"]],
vectric_language_codes?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_language_codes_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_language_codes_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_language_codes_bool_exp"] | null},ValueTypes["vectric_language_codes"]],
vectric_language_codes_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_language_codes_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_language_codes_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_language_codes_bool_exp"] | null},ValueTypes["vectric_language_codes_aggregate"]],
vectric_language_codes_by_pk?: [{	/** ISO 639-2 Code */
	threeLetterCode:ValueTypes["bpchar"]},ValueTypes["vectric_language_codes"]],
vectric_licence_log?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_licence_log_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_licence_log_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_licence_log_bool_exp"] | null},ValueTypes["vectric_licence_log"]],
vectric_licence_log_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_licence_log_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_licence_log_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_licence_log_bool_exp"] | null},ValueTypes["vectric_licence_log_aggregate"]],
vectric_licence_log_by_pk?: [{	licenceId:ValueTypes["bigint"]},ValueTypes["vectric_licence_log"]],
vectric_linkshortener_links_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_linkshortener_links_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_linkshortener_links_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_linkshortener_links_bool_exp"] | null},ValueTypes["vectric_linkshortener_links_aggregate"]],
vectric_makerspace_requests?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_makerspace_requests_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_makerspace_requests_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_makerspace_requests_bool_exp"] | null},ValueTypes["vectric_makerspace_requests"]],
vectric_makerspace_requests_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_makerspace_requests_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_makerspace_requests_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_makerspace_requests_bool_exp"] | null},ValueTypes["vectric_makerspace_requests_aggregate"]],
vectric_makerspace_requests_by_pk?: [{	requestId:ValueTypes["bigint"]},ValueTypes["vectric_makerspace_requests"]],
vectric_membership_invitation_status?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_invitation_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_invitation_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_invitation_status_bool_exp"] | null},ValueTypes["vectric_membership_invitation_status"]],
vectric_membership_invitation_status_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_invitation_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_invitation_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_invitation_status_bool_exp"] | null},ValueTypes["vectric_membership_invitation_status_aggregate"]],
vectric_membership_invitation_status_by_pk?: [{	status:string},ValueTypes["vectric_membership_invitation_status"]],
vectric_membership_roles?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_roles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_roles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_roles_bool_exp"] | null},ValueTypes["vectric_membership_roles"]],
vectric_membership_roles_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_roles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_roles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_roles_bool_exp"] | null},ValueTypes["vectric_membership_roles_aggregate"]],
vectric_membership_roles_by_pk?: [{	role:string},ValueTypes["vectric_membership_roles"]],
vectric_membership_status?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_status_bool_exp"] | null},ValueTypes["vectric_membership_status"]],
vectric_membership_status_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_status_bool_exp"] | null},ValueTypes["vectric_membership_status_aggregate"]],
vectric_membership_status_by_pk?: [{	status:string},ValueTypes["vectric_membership_status"]],
vectric_oauth_client_details?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oauth_client_details_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oauth_client_details_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oauth_client_details_bool_exp"] | null},ValueTypes["vectric_oauth_client_details"]],
vectric_oauth_client_details_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oauth_client_details_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oauth_client_details_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oauth_client_details_bool_exp"] | null},ValueTypes["vectric_oauth_client_details_aggregate"]],
vectric_oauth_client_details_by_pk?: [{	client_id:string},ValueTypes["vectric_oauth_client_details"]],
vectric_oem_detailed_products?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_detailed_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_detailed_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_detailed_products_bool_exp"] | null},ValueTypes["vectric_oem_detailed_products"]],
vectric_oem_detailed_products_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_detailed_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_detailed_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_detailed_products_bool_exp"] | null},ValueTypes["vectric_oem_detailed_products_aggregate"]],
vectric_oem_detailed_products_by_pk?: [{	id:ValueTypes["bigint"]},ValueTypes["vectric_oem_detailed_products"]],
vectric_oem_fastspring_item_bundle?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_fastspring_item_bundle_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_fastspring_item_bundle_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_fastspring_item_bundle_bool_exp"] | null},ValueTypes["vectric_oem_fastspring_item_bundle"]],
vectric_oem_fastspring_item_bundle_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_fastspring_item_bundle_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_fastspring_item_bundle_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_fastspring_item_bundle_bool_exp"] | null},ValueTypes["vectric_oem_fastspring_item_bundle_aggregate"]],
vectric_oem_fastspring_item_bundle_by_pk?: [{	itemBundleId:ValueTypes["bigint"]},ValueTypes["vectric_oem_fastspring_item_bundle"]],
vectric_oem_invite_status?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_invite_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_invite_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_invite_status_bool_exp"] | null},ValueTypes["vectric_oem_invite_status"]],
vectric_oem_invite_status_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_invite_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_invite_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_invite_status_bool_exp"] | null},ValueTypes["vectric_oem_invite_status_aggregate"]],
vectric_oem_invite_status_by_pk?: [{	statusId:ValueTypes["bigint"]},ValueTypes["vectric_oem_invite_status"]],
vectric_oem_licence_allocation_type_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_licence_allocation_type_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_licence_allocation_type_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_licence_allocation_type_bool_exp"] | null},ValueTypes["vectric_oem_licence_allocation_type_aggregate"]],
vectric_oem_licence_allocation_type_by_pk?: [{	allocationTypeId:ValueTypes["bigint"]},ValueTypes["vectric_oem_licence_allocation_type"]],
vectric_oem_partners_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_partners_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_partners_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_partners_bool_exp"] | null},ValueTypes["vectric_oem_partners_aggregate"]],
vectric_oem_products_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_products_bool_exp"] | null},ValueTypes["vectric_oem_products_aggregate"]],
vectric_oem_staff_admin_ownership_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_staff_admin_ownership_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_staff_admin_ownership_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_staff_admin_ownership_bool_exp"] | null},ValueTypes["vectric_oem_staff_admin_ownership_aggregate"]],
vectric_organization_memberships_admin_access_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_memberships_admin_access_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_memberships_admin_access_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_memberships_admin_access_bool_exp"] | null},ValueTypes["vectric_organization_memberships_admin_access_aggregate"]],
vectric_organization_order_items_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_order_items_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_order_items_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_order_items_bool_exp"] | null},ValueTypes["vectric_organization_order_items_aggregate"]],
vectric_organization_orders_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_orders_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_orders_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_orders_bool_exp"] | null},ValueTypes["vectric_organization_orders_aggregate"]],
vectric_organization_types?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_types_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_types_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_types_bool_exp"] | null},ValueTypes["vectric_organization_types"]],
vectric_organization_types_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_types_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_types_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_types_bool_exp"] | null},ValueTypes["vectric_organization_types_aggregate"]],
vectric_organization_types_by_pk?: [{	type:string},ValueTypes["vectric_organization_types"]],
vectric_products_clipartcollection_links_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_clipartcollection_links_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_clipartcollection_links_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_clipartcollection_links_bool_exp"] | null},ValueTypes["vectric_products_clipartcollection_links_aggregate"]],
vectric_products_clipartcollection_links_by_pk?: [{	clipartCollectionLinkId:ValueTypes["bigint"]},ValueTypes["vectric_products_clipartcollection_links"]],
vectric_products_enhancement_eligibility_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_enhancement_eligibility_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_enhancement_eligibility_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_enhancement_eligibility_bool_exp"] | null},ValueTypes["vectric_products_enhancement_eligibility_aggregate"]],
vectric_products_enhancement_eligibility_by_pk?: [{	eligibilityId:ValueTypes["bigint"]},ValueTypes["vectric_products_enhancement_eligibility"]],
vectric_products_freeclipart_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_freeclipart_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_freeclipart_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_freeclipart_bool_exp"] | null},ValueTypes["vectric_products_freeclipart_aggregate"]],
vectric_products_freeclipart_by_pk?: [{	productFreeClipartId:ValueTypes["bigint"]},ValueTypes["vectric_products_freeclipart"]],
vectric_products_fulfilments?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_fulfilments_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_fulfilments_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_fulfilments_bool_exp"] | null},ValueTypes["vectric_products_fulfilments"]],
vectric_products_fulfilments_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_fulfilments_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_fulfilments_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_fulfilments_bool_exp"] | null},ValueTypes["vectric_products_fulfilments_aggregate"]],
vectric_products_fulfilments_by_pk?: [{	fulfilmentId:ValueTypes["bigint"]},ValueTypes["vectric_products_fulfilments"]],
vectric_products_fulfilmenttypes?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_fulfilmenttypes_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_fulfilmenttypes_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_fulfilmenttypes_bool_exp"] | null},ValueTypes["vectric_products_fulfilmenttypes"]],
vectric_products_fulfilmenttypes_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_fulfilmenttypes_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_fulfilmenttypes_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_fulfilmenttypes_bool_exp"] | null},ValueTypes["vectric_products_fulfilmenttypes_aggregate"]],
vectric_products_fulfilmenttypes_by_pk?: [{	fulfilmenttypeid:ValueTypes["bigint"]},ValueTypes["vectric_products_fulfilmenttypes"]],
vectric_products_product_fulfilments?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_product_fulfilments_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_product_fulfilments_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_product_fulfilments_bool_exp"] | null},ValueTypes["vectric_products_product_fulfilments"]],
vectric_products_product_fulfilments_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_product_fulfilments_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_product_fulfilments_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_product_fulfilments_bool_exp"] | null},ValueTypes["vectric_products_product_fulfilments_aggregate"]],
vectric_products_product_fulfilments_by_pk?: [{	productfulfilmentid:ValueTypes["bigint"]},ValueTypes["vectric_products_product_fulfilments"]],
vectric_products_product_licence_type?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_product_licence_type_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_product_licence_type_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_product_licence_type_bool_exp"] | null},ValueTypes["vectric_products_product_licence_type"]],
vectric_products_product_licence_type_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_product_licence_type_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_product_licence_type_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_product_licence_type_bool_exp"] | null},ValueTypes["vectric_products_product_licence_type_aggregate"]],
vectric_products_product_licence_type_by_pk?: [{	type:string},ValueTypes["vectric_products_product_licence_type"]],
vectric_products_products_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_products_bool_exp"] | null},ValueTypes["vectric_products_products_aggregate"]],
vectric_products_producttype_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_producttype_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_producttype_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_producttype_bool_exp"] | null},ValueTypes["vectric_products_producttype_aggregate"]],
vectric_products_upgrade_eligibility_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_upgrade_eligibility_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_upgrade_eligibility_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_upgrade_eligibility_bool_exp"] | null},ValueTypes["vectric_products_upgrade_eligibility_aggregate"]],
vectric_sales_customerupdates?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_customerupdates_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_customerupdates_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_customerupdates_bool_exp"] | null},ValueTypes["vectric_sales_customerupdates"]],
vectric_sales_customerupdates_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_customerupdates_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_customerupdates_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_customerupdates_bool_exp"] | null},ValueTypes["vectric_sales_customerupdates_aggregate"]],
vectric_sales_customerupdates_by_pk?: [{	customerUpdateId:ValueTypes["bigint"]},ValueTypes["vectric_sales_customerupdates"]],
vectric_sales_oemlicences_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_oemlicences_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_oemlicences_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_oemlicences_bool_exp"] | null},ValueTypes["vectric_sales_oemlicences_aggregate"]],
vectric_sales_orders_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_orders_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_orders_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_orders_bool_exp"] | null},ValueTypes["vectric_sales_orders_aggregate"]],
vectric_sales_salesitem_products_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_salesitem_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_salesitem_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_salesitem_products_bool_exp"] | null},ValueTypes["vectric_sales_salesitem_products_aggregate"]],
vectric_sales_salesitemproduct_status?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_salesitemproduct_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_salesitemproduct_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_salesitemproduct_status_bool_exp"] | null},ValueTypes["vectric_sales_salesitemproduct_status"]],
vectric_sales_salesitemproduct_status_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_salesitemproduct_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_salesitemproduct_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_salesitemproduct_status_bool_exp"] | null},ValueTypes["vectric_sales_salesitemproduct_status_aggregate"]],
vectric_sales_salesitemproduct_status_by_pk?: [{	statusid:ValueTypes["bigint"]},ValueTypes["vectric_sales_salesitemproduct_status"]],
vectric_sales_salesitems_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_salesitems_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_salesitems_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_salesitems_bool_exp"] | null},ValueTypes["vectric_sales_salesitems_aggregate"]],
vectric_security_emailverificationtokens_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_emailverificationtokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_emailverificationtokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_emailverificationtokens_bool_exp"] | null},ValueTypes["vectric_security_emailverificationtokens_aggregate"]],
vectric_security_group_authorities?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_group_authorities_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_group_authorities_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_group_authorities_bool_exp"] | null},ValueTypes["vectric_security_group_authorities"]],
vectric_security_group_authorities_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_group_authorities_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_group_authorities_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_group_authorities_bool_exp"] | null},ValueTypes["vectric_security_group_authorities_aggregate"]],
vectric_security_group_members_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_group_members_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_group_members_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_group_members_bool_exp"] | null},ValueTypes["vectric_security_group_members_aggregate"]],
vectric_security_passwordresettokens_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_passwordresettokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_passwordresettokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_passwordresettokens_bool_exp"] | null},ValueTypes["vectric_security_passwordresettokens_aggregate"]],
vectric_security_userinvitations_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_userinvitations_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_userinvitations_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_userinvitations_bool_exp"] | null},ValueTypes["vectric_security_userinvitations_aggregate"]],
vectric_security_userinvitations_by_pk?: [{	token:string},ValueTypes["vectric_security_userinvitations"]],
vectric_security_users_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_users_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_users_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_users_bool_exp"] | null},ValueTypes["vectric_security_users_aggregate"]],
vectric_security_users_by_pk?: [{	username:string},ValueTypes["vectric_security_users"]],
vectric_subscription_contract_status?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_subscription_contract_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_subscription_contract_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_subscription_contract_status_bool_exp"] | null},ValueTypes["vectric_subscription_contract_status"]],
vectric_subscription_contract_status_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_subscription_contract_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_subscription_contract_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_subscription_contract_status_bool_exp"] | null},ValueTypes["vectric_subscription_contract_status_aggregate"]],
vectric_subscription_contract_status_by_pk?: [{	status:string},ValueTypes["vectric_subscription_contract_status"]],
vectric_subscription_contracts?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_subscription_contracts_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_subscription_contracts_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_subscription_contracts_bool_exp"] | null},ValueTypes["vectric_subscription_contracts"]],
vectric_subscription_contracts_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_subscription_contracts_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_subscription_contracts_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_subscription_contracts_bool_exp"] | null},ValueTypes["vectric_subscription_contracts_aggregate"]],
vectric_subscription_contracts_by_pk?: [{	subscriptionContractId:number},ValueTypes["vectric_subscription_contracts"]],
vectric_subscription_events?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_subscription_events_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_subscription_events_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_subscription_events_bool_exp"] | null},ValueTypes["vectric_subscription_events"]],
vectric_subscription_events_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_subscription_events_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_subscription_events_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_subscription_events_bool_exp"] | null},ValueTypes["vectric_subscription_events_aggregate"]],
vectric_subscription_events_by_pk?: [{	eventId:number},ValueTypes["vectric_subscription_events"]],
vectric_update_requests_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_update_requests_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_update_requests_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_update_requests_bool_exp"] | null},ValueTypes["vectric_update_requests_aggregate"]],
vectric_upgrade_tokens_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrade_tokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrade_tokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrade_tokens_bool_exp"] | null},ValueTypes["vectric_upgrade_tokens_aggregate"]],
vectric_version_code?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_version_code_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_version_code_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_version_code_bool_exp"] | null},ValueTypes["vectric_version_code"]],
vectric_version_code_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_version_code_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_version_code_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_version_code_bool_exp"] | null},ValueTypes["vectric_version_code_aggregate"]],
vectric_version_code_by_pk?: [{	versionCodeId:ValueTypes["bigint"]},ValueTypes["vectric_version_code"]],
versionCodeById?: [{	versioncodeid:ValueTypes["bigint"]},ValueTypes["vectric_products_versioncodes"]],
versionCodes?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_versioncodes_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_versioncodes_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_versioncodes_bool_exp"] | null},ValueTypes["vectric_products_versioncodes"]],
versionCodes_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_versioncodes_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_versioncodes_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_versioncodes_bool_exp"] | null},ValueTypes["vectric_products_versioncodes_aggregate"]],
zendeskUploads?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_zd_uploads_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_zd_uploads_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_zd_uploads_bool_exp"] | null},ValueTypes["vectric_customer_zd_uploads"]],
zendeskUploadsById?: [{	zdUploadId:ValueTypes["bigint"]},ValueTypes["vectric_customer_zd_uploads"]],
zendeskUploads_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_zd_uploads_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_zd_uploads_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_zd_uploads_bool_exp"] | null},ValueTypes["vectric_customer_zd_uploads_aggregate"]],
		__typename?: boolean
}>;
	["subscription_root"]: AliasType<{
UserGroupAttendeeById?: [{	attendeeid:ValueTypes["bigint"]},ValueTypes["vectric_usergroup_2019_attendees"]],
UserGroupAttendees?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_usergroup_2019_attendees_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_usergroup_2019_attendees_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_usergroup_2019_attendees_bool_exp"] | null},ValueTypes["vectric_usergroup_2019_attendees"]],
UserGroupAttendees_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_usergroup_2019_attendees_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_usergroup_2019_attendees_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_usergroup_2019_attendees_bool_exp"] | null},ValueTypes["vectric_usergroup_2019_attendees_aggregate"]],
allocatableBundles?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocatable_bundles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocatable_bundles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocatable_bundles_bool_exp"] | null},ValueTypes["vectric_allocatable_bundles"]],
allocatableLicenceCount?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocatable_licence_count_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocatable_licence_count_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocatable_licence_count_bool_exp"] | null},ValueTypes["vectric_allocatable_licence_count"]],
allocatableLicenceCount_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocatable_licence_count_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocatable_licence_count_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocatable_licence_count_bool_exp"] | null},ValueTypes["vectric_allocatable_licence_count_aggregate"]],
allocatedBundles?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocated_bundles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocated_bundles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocated_bundles_bool_exp"] | null},ValueTypes["vectric_allocated_bundles"]],
allocationSummaries?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocation_summary_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocation_summary_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocation_summary_bool_exp"] | null},ValueTypes["vectric_allocation_summary"]],
allocationSummaryById?: [{	id:number},ValueTypes["vectric_allocation_summary"]],
allocationSummary_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocation_summary_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocation_summary_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocation_summary_bool_exp"] | null},ValueTypes["vectric_allocation_summary_aggregate"]],
assignment?: [{	assignment_id:number},ValueTypes["vectric_owned_item_assignments"]],
assignments?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_owned_item_assignments_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_owned_item_assignments_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_owned_item_assignments_bool_exp"] | null},ValueTypes["vectric_owned_item_assignments"]],
assignments_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_owned_item_assignments_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_owned_item_assignments_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_owned_item_assignments_bool_exp"] | null},ValueTypes["vectric_owned_item_assignments_aggregate"]],
clipartCollection?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_clipartcollection_links_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_clipartcollection_links_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_clipartcollection_links_bool_exp"] | null},ValueTypes["vectric_products_clipartcollection_links"]],
countries?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_countries_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_countries_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_countries_bool_exp"] | null},ValueTypes["vectric_countries"]],
countries_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_countries_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_countries_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_countries_bool_exp"] | null},ValueTypes["vectric_countries_aggregate"]],
countryById?: [{	countryid:ValueTypes["bigint"]},ValueTypes["vectric_countries"]],
customerArea?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_area_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_area_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_area_bool_exp"] | null},ValueTypes["vectric_customer_area"]],
customerAreaByPk?: [{	customerAreaId:ValueTypes["bigint"]},ValueTypes["vectric_customer_area"]],
customerAreaFile?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_area_file_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_area_file_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_area_file_bool_exp"] | null},ValueTypes["vectric_customer_area_file"]],
customerAreaFileByPk?: [{	customerAreaFileId:ValueTypes["bigint"]},ValueTypes["vectric_customer_area_file"]],
customerById?: [{	customerId:ValueTypes["bigint"]},ValueTypes["vectric_sales_customers"]],
customerResponseById?: [{	customerresponseid:ValueTypes["bigint"]},ValueTypes["vectric_customer_responses"]],
customerResponses?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_responses_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_responses_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_responses_bool_exp"] | null},ValueTypes["vectric_customer_responses"]],
customerResponses_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_responses_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_responses_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_responses_bool_exp"] | null},ValueTypes["vectric_customer_responses_aggregate"]],
customerSales?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_sales_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_sales_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_sales_bool_exp"] | null},ValueTypes["vectric_customer_sales"]],
customerSales_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_sales_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_sales_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_sales_bool_exp"] | null},ValueTypes["vectric_customer_sales_aggregate"]],
customerStatus?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_status_bool_exp"] | null},ValueTypes["vectric_customer_status"]],
customerStatusById?: [{	statusId:ValueTypes["bigint"]},ValueTypes["vectric_customer_status"]],
customers?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_customers_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_customers_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_customers_bool_exp"] | null},ValueTypes["vectric_sales_customers"]],
downloadByPk?: [{	downloadId:string},ValueTypes["vectric_download"]],
emailTemplate?: [{	templateName:string},ValueTypes["vectric_sales_velocitytemplate"]],
emailTemplate_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_velocitytemplate_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_velocitytemplate_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_velocitytemplate_bool_exp"] | null},ValueTypes["vectric_sales_velocitytemplate_aggregate"]],
emailTemplates?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_velocitytemplate_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_velocitytemplate_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_velocitytemplate_bool_exp"] | null},ValueTypes["vectric_sales_velocitytemplate"]],
enhancementTokens?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_enhancement_tokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_enhancement_tokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_enhancement_tokens_bool_exp"] | null},ValueTypes["vectric_enhancement_tokens"]],
entitledProduct?: [{	productId:number},ValueTypes["vectric_entitled_products"]],
entitledProducts?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_entitled_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_entitled_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_entitled_products_bool_exp"] | null},ValueTypes["vectric_entitled_products"]],
entitledProducts_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_entitled_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_entitled_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_entitled_products_bool_exp"] | null},ValueTypes["vectric_entitled_products_aggregate"]],
entitlement?: [{	entitlementId:number},ValueTypes["vectric_entitlements"]],
entitlementLicence?: [{	entitlementLicenceId:number},ValueTypes["vectric_entitlement_licences"]],
entitlementLicence_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_entitlement_licences_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_entitlement_licences_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_entitlement_licences_bool_exp"] | null},ValueTypes["vectric_entitlement_licences_aggregate"]],
entitlementLicences?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_entitlement_licences_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_entitlement_licences_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_entitlement_licences_bool_exp"] | null},ValueTypes["vectric_entitlement_licences"]],
entitlements?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_entitlements_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_entitlements_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_entitlements_bool_exp"] | null},ValueTypes["vectric_entitlements"]],
entitlements_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_entitlements_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_entitlements_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_entitlements_bool_exp"] | null},ValueTypes["vectric_entitlements_aggregate"]],
evalRequestById?: [{	requestId:ValueTypes["bigint"]},ValueTypes["vectric_oem_eval_request"]],
evalRequest_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_eval_request_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_eval_request_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_eval_request_bool_exp"] | null},ValueTypes["vectric_oem_eval_request_aggregate"]],
evalRequests?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_eval_request_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_eval_request_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_eval_request_bool_exp"] | null},ValueTypes["vectric_oem_eval_request"]],
freeClipart?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_freeclipart_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_freeclipart_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_freeclipart_bool_exp"] | null},ValueTypes["vectric_freeclipart"]],
freeClipartCategory?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_freeclipart_category_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_freeclipart_category_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_freeclipart_category_bool_exp"] | null},ValueTypes["vectric_freeclipart_category"]],
freeClipartTokenByPk?: [{	clipartToken:string},ValueTypes["vectric_free_clipart_tokens"]],
freeClipartTokens?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_free_clipart_tokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_free_clipart_tokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_free_clipart_tokens_bool_exp"] | null},ValueTypes["vectric_free_clipart_tokens"]],
licenceScope?: [{	scope:string},ValueTypes["vectric_organization_licence_scope"]],
licenceScope_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_licence_scope_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_licence_scope_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_licence_scope_bool_exp"] | null},ValueTypes["vectric_organization_licence_scope_aggregate"]],
licenceScopes?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_licence_scope_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_licence_scope_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_licence_scope_bool_exp"] | null},ValueTypes["vectric_organization_licence_scope"]],
membershipById?: [{	membershipId:number},ValueTypes["vectric_memberships"]],
membershipInvitationById?: [{	invitationId:number},ValueTypes["vectric_membership_invitations"]],
membershipInvitations?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_invitations_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_invitations_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_invitations_bool_exp"] | null},ValueTypes["vectric_membership_invitations"]],
membershipInvitations_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_invitations_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_invitations_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_invitations_bool_exp"] | null},ValueTypes["vectric_membership_invitations_aggregate"]],
memberships?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_memberships_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_memberships_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_memberships_bool_exp"] | null},ValueTypes["vectric_memberships"]],
memberships_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_memberships_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_memberships_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_memberships_bool_exp"] | null},ValueTypes["vectric_memberships_aggregate"]],
oemAllocationEmails?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_allocation_emails_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_allocation_emails_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_allocation_emails_bool_exp"] | null},ValueTypes["vectric_oem_allocation_emails"]],
oemAllocationEmails_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_allocation_emails_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_allocation_emails_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_allocation_emails_bool_exp"] | null},ValueTypes["vectric_oem_allocation_emails_aggregate"]],
oemBundles?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_oem_bundles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_oem_bundles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_oem_bundles_bool_exp"] | null},ValueTypes["vectric_sales_oem_bundles"]],
oemBundlesById?: [{	bundleId:string},ValueTypes["vectric_sales_oem_bundles"]],
oemBundles_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_oem_bundles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_oem_bundles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_oem_bundles_bool_exp"] | null},ValueTypes["vectric_sales_oem_bundles_aggregate"]],
oemFastspringItem?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_fastspring_item_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_fastspring_item_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_fastspring_item_bool_exp"] | null},ValueTypes["vectric_oem_fastspring_item"]],
oemFastspringItemById?: [{	itemId:ValueTypes["bigint"]},ValueTypes["vectric_oem_fastspring_item"]],
oemFastspringItem_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_fastspring_item_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_fastspring_item_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_fastspring_item_bool_exp"] | null},ValueTypes["vectric_oem_fastspring_item_aggregate"]],
oemFastspringOrder?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_fastspring_order_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_fastspring_order_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_fastspring_order_bool_exp"] | null},ValueTypes["vectric_oem_fastspring_order"]],
oemFastspringOrderById?: [{	orderId:ValueTypes["bigint"]},ValueTypes["vectric_oem_fastspring_order"]],
oemFastspringOrder_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_fastspring_order_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_fastspring_order_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_fastspring_order_bool_exp"] | null},ValueTypes["vectric_oem_fastspring_order_aggregate"]],
oemLicenceAllocationType?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_licence_allocation_type_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_licence_allocation_type_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_licence_allocation_type_bool_exp"] | null},ValueTypes["vectric_oem_licence_allocation_type"]],
oemLicences?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_oemlicences_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_oemlicences_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_oemlicences_bool_exp"] | null},ValueTypes["vectric_sales_oemlicences"]],
oemLicencesById?: [{	oemLicenceId:ValueTypes["bigint"]},ValueTypes["vectric_sales_oemlicences"]],
oemPartners?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_partners_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_partners_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_partners_bool_exp"] | null},ValueTypes["vectric_oem_partners"]],
oemPartnersById?: [{	partnerId:ValueTypes["bigint"]},ValueTypes["vectric_oem_partners"]],
oemProductByPk?: [{	oemProductId:ValueTypes["bigint"]},ValueTypes["vectric_oem_products"]],
oemProducts?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_products_bool_exp"] | null},ValueTypes["vectric_oem_products"]],
oemPurchaseOptions?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_purchase_options_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_purchase_options_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_purchase_options_bool_exp"] | null},ValueTypes["vectric_oem_purchase_options"]],
oemPurchaseOptionsByOptionId?: [{	optionId:ValueTypes["bigint"]},ValueTypes["vectric_oem_purchase_options"]],
oemPurchaseOptions_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_purchase_options_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_purchase_options_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_purchase_options_bool_exp"] | null},ValueTypes["vectric_oem_purchase_options_aggregate"]],
oemStaffCustomerById?: [{	staffId:ValueTypes["bigint"]},ValueTypes["vectric_oem_staff_customer"]],
oemStaffCustomers?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_staff_customer_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_staff_customer_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_staff_customer_bool_exp"] | null},ValueTypes["vectric_oem_staff_customer"]],
oemStaffCustomers_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_staff_customer_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_staff_customer_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_staff_customer_bool_exp"] | null},ValueTypes["vectric_oem_staff_customer_aggregate"]],
oemStaffMembershipDetails?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_staff_admin_ownership_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_staff_admin_ownership_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_staff_admin_ownership_bool_exp"] | null},ValueTypes["vectric_oem_staff_admin_ownership"]],
orders?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_orders_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_orders_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_orders_bool_exp"] | null},ValueTypes["vectric_sales_orders"]],
ordersByOrderId?: [{	orderId:string},ValueTypes["vectric_sales_orders"]],
organizationAuditById?: [{	auditId:number},ValueTypes["vectric_organization_audit"]],
organizationAudit_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_audit_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_audit_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_audit_bool_exp"] | null},ValueTypes["vectric_organization_audit_aggregate"]],
organizationById?: [{	organizationId:number},ValueTypes["vectric_organizations"]],
organizationMembershipsAdminAccess?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_memberships_admin_access_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_memberships_admin_access_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_memberships_admin_access_bool_exp"] | null},ValueTypes["vectric_organization_memberships_admin_access"]],
organizationOrder?: [{	orderId:string},ValueTypes["vectric_organization_orders"]],
organizationOrderItem?: [{	orderItemId:number},ValueTypes["vectric_organization_order_items"]],
organizationOrderItems?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_order_items_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_order_items_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_order_items_bool_exp"] | null},ValueTypes["vectric_organization_order_items"]],
organizationOrders?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_orders_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_orders_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_orders_bool_exp"] | null},ValueTypes["vectric_organization_orders"]],
organization_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organizations_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organizations_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organizations_bool_exp"] | null},ValueTypes["vectric_organizations_aggregate"]],
organizations?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organizations_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organizations_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organizations_bool_exp"] | null},ValueTypes["vectric_organizations"]],
organiztionAudits?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_audit_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_audit_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_audit_bool_exp"] | null},ValueTypes["vectric_organization_audit"]],
ownedItem?: [{	ownedItemId:number},ValueTypes["vectric_owned_items"]],
ownedItems?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_owned_items_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_owned_items_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_owned_items_bool_exp"] | null},ValueTypes["vectric_owned_items"]],
ownedItems_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_owned_items_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_owned_items_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_owned_items_bool_exp"] | null},ValueTypes["vectric_owned_items_aggregate"]],
ownedProduct?: [{	productId:number},ValueTypes["vectric_owned_products"]],
ownedProducts?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_owned_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_owned_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_owned_products_bool_exp"] | null},ValueTypes["vectric_owned_products"]],
ownedProducts_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_owned_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_owned_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_owned_products_bool_exp"] | null},ValueTypes["vectric_owned_products_aggregate"]],
passwordResetTokens?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_passwordresettokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_passwordresettokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_passwordresettokens_bool_exp"] | null},ValueTypes["vectric_security_passwordresettokens"]],
passwordResetTokensByPk?: [{	token:string},ValueTypes["vectric_security_passwordresettokens"]],
productById?: [{	productID:ValueTypes["bigint"]},ValueTypes["vectric_products_products"]],
productEnhancementEligibility?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_enhancement_eligibility_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_enhancement_eligibility_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_enhancement_eligibility_bool_exp"] | null},ValueTypes["vectric_products_enhancement_eligibility"]],
productTypes?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_producttype_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_producttype_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_producttype_bool_exp"] | null},ValueTypes["vectric_products_producttype"]],
productTypesById?: [{	productTypeId:ValueTypes["bigint"]},ValueTypes["vectric_products_producttype"]],
productUpgradeEligibilityById?: [{	eligibilityid:ValueTypes["bigint"]},ValueTypes["vectric_products_upgrade_eligibility"]],
products?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_products_bool_exp"] | null},ValueTypes["vectric_products_products"]],
productsFreeClipart?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_freeclipart_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_freeclipart_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_freeclipart_bool_exp"] | null},ValueTypes["vectric_products_freeclipart"]],
productsUpgradeEligibility?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_upgrade_eligibility_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_upgrade_eligibility_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_upgrade_eligibility_bool_exp"] | null},ValueTypes["vectric_products_upgrade_eligibility"]],
questionById?: [{	questionid:ValueTypes["bigint"]},ValueTypes["vectric_questions"]],
questions?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_questions_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_questions_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_questions_bool_exp"] | null},ValueTypes["vectric_questions"]],
questions_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_questions_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_questions_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_questions_bool_exp"] | null},ValueTypes["vectric_questions_aggregate"]],
responseById?: [{	responseid:ValueTypes["bigint"]},ValueTypes["vectric_responses"]],
responses?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_responses_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_responses_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_responses_bool_exp"] | null},ValueTypes["vectric_responses"]],
responses_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_responses_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_responses_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_responses_bool_exp"] | null},ValueTypes["vectric_responses_aggregate"]],
saleableProduct?: [{	productId:number},ValueTypes["vectric_saleable_products"]],
saleableProducts?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_saleable_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_saleable_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_saleable_products_bool_exp"] | null},ValueTypes["vectric_saleable_products"]],
saleableProducts_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_saleable_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_saleable_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_saleable_products_bool_exp"] | null},ValueTypes["vectric_saleable_products_aggregate"]],
salesCustomers_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_customers_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_customers_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_customers_bool_exp"] | null},ValueTypes["vectric_sales_customers_aggregate"]],
salesItemProduct?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_salesitem_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_salesitem_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_salesitem_products_bool_exp"] | null},ValueTypes["vectric_sales_salesitem_products"]],
salesItemProductById?: [{	salesItemProductId:ValueTypes["bigint"]},ValueTypes["vectric_sales_salesitem_products"]],
salesItems?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_salesitems_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_salesitems_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_salesitems_bool_exp"] | null},ValueTypes["vectric_sales_salesitems"]],
salesItemsById?: [{	salesitemid:ValueTypes["bigint"]},ValueTypes["vectric_sales_salesitems"]],
scheduledEmails?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_scheduled_emails_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_scheduled_emails_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_scheduled_emails_bool_exp"] | null},ValueTypes["vectric_scheduled_emails"]],
scheduledEmailsById?: [{	id:number},ValueTypes["vectric_scheduled_emails"]],
scheduledEmails_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_scheduled_emails_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_scheduled_emails_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_scheduled_emails_bool_exp"] | null},ValueTypes["vectric_scheduled_emails_aggregate"]],
securityEmailVerificationTokenByToken?: [{	token:string},ValueTypes["vectric_security_emailverificationtokens"]],
securityEmailVerificationTokens?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_emailverificationtokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_emailverificationtokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_emailverificationtokens_bool_exp"] | null},ValueTypes["vectric_security_emailverificationtokens"]],
securityUserInvitations?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_userinvitations_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_userinvitations_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_userinvitations_bool_exp"] | null},ValueTypes["vectric_security_userinvitations"]],
securityUsers?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_users_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_users_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_users_bool_exp"] | null},ValueTypes["vectric_security_users"]],
selectCustomerDownloads?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_customer_downloads_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_customer_downloads_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_customer_downloads_bool_exp"] | null},ValueTypes["vectric_sales_customer_downloads"]],
selectCustomerDownloadsById?: [{	downloadId:ValueTypes["bigint"]},ValueTypes["vectric_sales_customer_downloads"]],
selectCustomerDownloads_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_customer_downloads_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_customer_downloads_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_customer_downloads_bool_exp"] | null},ValueTypes["vectric_sales_customer_downloads_aggregate"]],
selectSecurityGroupMembersById?: [{	id:ValueTypes["bigint"]},ValueTypes["vectric_security_group_members"]],
selectSecurityGrupMemebers?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_group_members_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_group_members_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_group_members_bool_exp"] | null},ValueTypes["vectric_security_group_members"]],
shortLinks?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_linkshortener_links_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_linkshortener_links_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_linkshortener_links_bool_exp"] | null},ValueTypes["vectric_linkshortener_links"]],
shortLinksByHash?: [{	shortUrlHash:string},ValueTypes["vectric_linkshortener_links"]],
siteOptionLocation_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_site_option_location_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_site_option_location_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_site_option_location_bool_exp"] | null},ValueTypes["vectric_site_option_location_aggregate"]],
siteOptionLocations?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_site_option_location_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_site_option_location_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_site_option_location_bool_exp"] | null},ValueTypes["vectric_site_option_location"]],
siteOptionLocationsById?: [{	locationid:ValueTypes["bigint"]},ValueTypes["vectric_site_option_location"]],
siteOptions?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_site_options_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_site_options_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_site_options_bool_exp"] | null},ValueTypes["vectric_site_options"]],
siteOptionsById?: [{	optionid:ValueTypes["bigint"]},ValueTypes["vectric_site_options"]],
siteOptions_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_site_options_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_site_options_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_site_options_bool_exp"] | null},ValueTypes["vectric_site_options_aggregate"]],
toolpathSaveToken_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_toolpath_saver_token_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_toolpath_saver_token_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_toolpath_saver_token_bool_exp"] | null},ValueTypes["vectric_toolpath_saver_token_aggregate"]],
toolpathSaverTokenById?: [{	toolpathSaverTokenId:ValueTypes["bigint"]},ValueTypes["vectric_toolpath_saver_token"]],
toolpathSaverTokens?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_toolpath_saver_token_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_toolpath_saver_token_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_toolpath_saver_token_bool_exp"] | null},ValueTypes["vectric_toolpath_saver_token"]],
trialOrderById?: [{	orderId:ValueTypes["bigint"]},ValueTypes["vectric_trial_order"]],
trialOrders?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_trial_order_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_trial_order_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_trial_order_bool_exp"] | null},ValueTypes["vectric_trial_order"]],
trialOrders_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_trial_order_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_trial_order_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_trial_order_bool_exp"] | null},ValueTypes["vectric_trial_order_aggregate"]],
updateRequestById?: [{	requestId:ValueTypes["bigint"]},ValueTypes["vectric_update_requests"]],
updateRequests?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_update_requests_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_update_requests_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_update_requests_bool_exp"] | null},ValueTypes["vectric_update_requests"]],
upgradeFeatureById?: [{	featureId:string},ValueTypes["vectric_upgrades_feature"]],
upgradeFeatures?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrades_feature_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrades_feature_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrades_feature_bool_exp"] | null},ValueTypes["vectric_upgrades_feature"]],
upgradeFeatures_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrades_feature_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrades_feature_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrades_feature_bool_exp"] | null},ValueTypes["vectric_upgrades_feature_aggregate"]],
upgradeProductTypeFeatureById?: [{	upgradeId:ValueTypes["bigint"]},ValueTypes["vectric_upgrades_product_type_feature"]],
upgradeProductTypeFeatures?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrades_product_type_feature_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrades_product_type_feature_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrades_product_type_feature_bool_exp"] | null},ValueTypes["vectric_upgrades_product_type_feature"]],
upgradeProductTypeFeatures_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrades_product_type_feature_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrades_product_type_feature_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrades_product_type_feature_bool_exp"] | null},ValueTypes["vectric_upgrades_product_type_feature_aggregate"]],
upgradeTokens?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrade_tokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrade_tokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrade_tokens_bool_exp"] | null},ValueTypes["vectric_upgrade_tokens"]],
upgradeTokensById?: [{	token:string},ValueTypes["vectric_upgrade_tokens"]],
upgradeVersionFeatureById?: [{	upgradeId:ValueTypes["bigint"]},ValueTypes["vectric_upgrades_version_feature"]],
upgradeVersionFeatures?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrades_version_feature_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrades_version_feature_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrades_version_feature_bool_exp"] | null},ValueTypes["vectric_upgrades_version_feature"]],
upgradeVersionFeatures_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrades_version_feature_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrades_version_feature_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrades_version_feature_bool_exp"] | null},ValueTypes["vectric_upgrades_version_feature_aggregate"]],
userGroupWaitingListEntries?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_usergroup_2019_waitlist_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_usergroup_2019_waitlist_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_usergroup_2019_waitlist_bool_exp"] | null},ValueTypes["vectric_usergroup_2019_waitlist"]],
userGroupWaitingListEntries_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_usergroup_2019_waitlist_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_usergroup_2019_waitlist_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_usergroup_2019_waitlist_bool_exp"] | null},ValueTypes["vectric_usergroup_2019_waitlist_aggregate"]],
userGroupWaitingListEntryById?: [{	attendeeid:ValueTypes["bigint"]},ValueTypes["vectric_usergroup_2019_waitlist"]],
vectric_active_memberships?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_active_memberships_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_active_memberships_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_active_memberships_bool_exp"] | null},ValueTypes["vectric_active_memberships"]],
vectric_active_memberships_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_active_memberships_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_active_memberships_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_active_memberships_bool_exp"] | null},ValueTypes["vectric_active_memberships_aggregate"]],
vectric_active_upgrades?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_active_upgrades_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_active_upgrades_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_active_upgrades_bool_exp"] | null},ValueTypes["vectric_active_upgrades"]],
vectric_active_upgrades_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_active_upgrades_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_active_upgrades_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_active_upgrades_bool_exp"] | null},ValueTypes["vectric_active_upgrades_aggregate"]],
vectric_allocatable_bundles_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocatable_bundles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocatable_bundles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocatable_bundles_bool_exp"] | null},ValueTypes["vectric_allocatable_bundles_aggregate"]],
vectric_allocated_bundles_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocated_bundles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocated_bundles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocated_bundles_bool_exp"] | null},ValueTypes["vectric_allocated_bundles_aggregate"]],
vectric_allocation_summary_file_type?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocation_summary_file_type_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocation_summary_file_type_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocation_summary_file_type_bool_exp"] | null},ValueTypes["vectric_allocation_summary_file_type"]],
vectric_allocation_summary_file_type_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocation_summary_file_type_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocation_summary_file_type_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocation_summary_file_type_bool_exp"] | null},ValueTypes["vectric_allocation_summary_file_type_aggregate"]],
vectric_allocation_summary_file_type_by_pk?: [{	type:string},ValueTypes["vectric_allocation_summary_file_type"]],
vectric_continents?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_continents_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_continents_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_continents_bool_exp"] | null},ValueTypes["vectric_continents"]],
vectric_continents_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_continents_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_continents_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_continents_bool_exp"] | null},ValueTypes["vectric_continents_aggregate"]],
vectric_continents_by_pk?: [{	/** Continent code */
	code:ValueTypes["bpchar"]},ValueTypes["vectric_continents"]],
vectric_customer_area_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_area_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_area_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_area_bool_exp"] | null},ValueTypes["vectric_customer_area_aggregate"]],
vectric_customer_area_file_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_area_file_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_area_file_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_area_file_bool_exp"] | null},ValueTypes["vectric_customer_area_file_aggregate"]],
vectric_customer_status_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_status_bool_exp"] | null},ValueTypes["vectric_customer_status_aggregate"]],
vectric_download?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_download_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_download_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_download_bool_exp"] | null},ValueTypes["vectric_download"]],
vectric_download_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_download_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_download_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_download_bool_exp"] | null},ValueTypes["vectric_download_aggregate"]],
vectric_download_record?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_download_record_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_download_record_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_download_record_bool_exp"] | null},ValueTypes["vectric_download_record"]],
vectric_download_record_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_download_record_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_download_record_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_download_record_bool_exp"] | null},ValueTypes["vectric_download_record_aggregate"]],
vectric_download_record_by_pk?: [{	id:ValueTypes["bigint"]},ValueTypes["vectric_download_record"]],
vectric_enhancement_tokens_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_enhancement_tokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_enhancement_tokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_enhancement_tokens_bool_exp"] | null},ValueTypes["vectric_enhancement_tokens_aggregate"]],
vectric_enhancement_tokens_by_pk?: [{	token:string},ValueTypes["vectric_enhancement_tokens"]],
vectric_entitled_product_version_code_view?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_entitled_product_version_code_view_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_entitled_product_version_code_view_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_entitled_product_version_code_view_bool_exp"] | null},ValueTypes["vectric_entitled_product_version_code_view"]],
vectric_entitled_product_version_code_view_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_entitled_product_version_code_view_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_entitled_product_version_code_view_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_entitled_product_version_code_view_bool_exp"] | null},ValueTypes["vectric_entitled_product_version_code_view_aggregate"]],
vectric_free_clipart_tokens_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_free_clipart_tokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_free_clipart_tokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_free_clipart_tokens_bool_exp"] | null},ValueTypes["vectric_free_clipart_tokens_aggregate"]],
vectric_freeclipart_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_freeclipart_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_freeclipart_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_freeclipart_bool_exp"] | null},ValueTypes["vectric_freeclipart_aggregate"]],
vectric_freeclipart_by_pk?: [{	freeClipartId:ValueTypes["bigint"]},ValueTypes["vectric_freeclipart"]],
vectric_freeclipart_category_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_freeclipart_category_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_freeclipart_category_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_freeclipart_category_bool_exp"] | null},ValueTypes["vectric_freeclipart_category_aggregate"]],
vectric_freeclipart_category_by_pk?: [{	categoryId:ValueTypes["bigint"]},ValueTypes["vectric_freeclipart_category"]],
vectric_freeclipart_download_record?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_freeclipart_download_record_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_freeclipart_download_record_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_freeclipart_download_record_bool_exp"] | null},ValueTypes["vectric_freeclipart_download_record"]],
vectric_freeclipart_download_record_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_freeclipart_download_record_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_freeclipart_download_record_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_freeclipart_download_record_bool_exp"] | null},ValueTypes["vectric_freeclipart_download_record_aggregate"]],
vectric_freeclipart_download_record_by_pk?: [{	downloadId:ValueTypes["bigint"]},ValueTypes["vectric_freeclipart_download_record"]],
vectric_group_info?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_group_info_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_group_info_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_group_info_bool_exp"] | null},ValueTypes["vectric_group_info"]],
vectric_group_info_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_group_info_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_group_info_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_group_info_bool_exp"] | null},ValueTypes["vectric_group_info_aggregate"]],
vectric_group_roles?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_group_roles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_group_roles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_group_roles_bool_exp"] | null},ValueTypes["vectric_group_roles"]],
vectric_group_roles_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_group_roles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_group_roles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_group_roles_bool_exp"] | null},ValueTypes["vectric_group_roles_aggregate"]],
vectric_group_roles_by_pk?: [{	id:number},ValueTypes["vectric_group_roles"]],
vectric_group_user_role?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_group_user_role_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_group_user_role_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_group_user_role_bool_exp"] | null},ValueTypes["vectric_group_user_role"]],
vectric_group_user_role_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_group_user_role_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_group_user_role_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_group_user_role_bool_exp"] | null},ValueTypes["vectric_group_user_role_aggregate"]],
vectric_group_user_role_by_pk?: [{	customer_id:ValueTypes["bigint"],	group_id:number},ValueTypes["vectric_group_user_role"]],
vectric_groups?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_groups_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_groups_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_groups_bool_exp"] | null},ValueTypes["vectric_groups"]],
vectric_groups_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_groups_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_groups_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_groups_bool_exp"] | null},ValueTypes["vectric_groups_aggregate"]],
vectric_groups_by_pk?: [{	id:number},ValueTypes["vectric_groups"]],
vectric_language_codes?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_language_codes_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_language_codes_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_language_codes_bool_exp"] | null},ValueTypes["vectric_language_codes"]],
vectric_language_codes_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_language_codes_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_language_codes_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_language_codes_bool_exp"] | null},ValueTypes["vectric_language_codes_aggregate"]],
vectric_language_codes_by_pk?: [{	/** ISO 639-2 Code */
	threeLetterCode:ValueTypes["bpchar"]},ValueTypes["vectric_language_codes"]],
vectric_licence_log?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_licence_log_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_licence_log_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_licence_log_bool_exp"] | null},ValueTypes["vectric_licence_log"]],
vectric_licence_log_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_licence_log_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_licence_log_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_licence_log_bool_exp"] | null},ValueTypes["vectric_licence_log_aggregate"]],
vectric_licence_log_by_pk?: [{	licenceId:ValueTypes["bigint"]},ValueTypes["vectric_licence_log"]],
vectric_linkshortener_links_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_linkshortener_links_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_linkshortener_links_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_linkshortener_links_bool_exp"] | null},ValueTypes["vectric_linkshortener_links_aggregate"]],
vectric_makerspace_requests?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_makerspace_requests_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_makerspace_requests_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_makerspace_requests_bool_exp"] | null},ValueTypes["vectric_makerspace_requests"]],
vectric_makerspace_requests_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_makerspace_requests_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_makerspace_requests_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_makerspace_requests_bool_exp"] | null},ValueTypes["vectric_makerspace_requests_aggregate"]],
vectric_makerspace_requests_by_pk?: [{	requestId:ValueTypes["bigint"]},ValueTypes["vectric_makerspace_requests"]],
vectric_membership_invitation_status?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_invitation_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_invitation_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_invitation_status_bool_exp"] | null},ValueTypes["vectric_membership_invitation_status"]],
vectric_membership_invitation_status_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_invitation_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_invitation_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_invitation_status_bool_exp"] | null},ValueTypes["vectric_membership_invitation_status_aggregate"]],
vectric_membership_invitation_status_by_pk?: [{	status:string},ValueTypes["vectric_membership_invitation_status"]],
vectric_membership_roles?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_roles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_roles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_roles_bool_exp"] | null},ValueTypes["vectric_membership_roles"]],
vectric_membership_roles_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_roles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_roles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_roles_bool_exp"] | null},ValueTypes["vectric_membership_roles_aggregate"]],
vectric_membership_roles_by_pk?: [{	role:string},ValueTypes["vectric_membership_roles"]],
vectric_membership_status?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_status_bool_exp"] | null},ValueTypes["vectric_membership_status"]],
vectric_membership_status_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_status_bool_exp"] | null},ValueTypes["vectric_membership_status_aggregate"]],
vectric_membership_status_by_pk?: [{	status:string},ValueTypes["vectric_membership_status"]],
vectric_oauth_client_details?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oauth_client_details_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oauth_client_details_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oauth_client_details_bool_exp"] | null},ValueTypes["vectric_oauth_client_details"]],
vectric_oauth_client_details_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oauth_client_details_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oauth_client_details_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oauth_client_details_bool_exp"] | null},ValueTypes["vectric_oauth_client_details_aggregate"]],
vectric_oauth_client_details_by_pk?: [{	client_id:string},ValueTypes["vectric_oauth_client_details"]],
vectric_oem_detailed_products?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_detailed_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_detailed_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_detailed_products_bool_exp"] | null},ValueTypes["vectric_oem_detailed_products"]],
vectric_oem_detailed_products_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_detailed_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_detailed_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_detailed_products_bool_exp"] | null},ValueTypes["vectric_oem_detailed_products_aggregate"]],
vectric_oem_detailed_products_by_pk?: [{	id:ValueTypes["bigint"]},ValueTypes["vectric_oem_detailed_products"]],
vectric_oem_fastspring_item_bundle?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_fastspring_item_bundle_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_fastspring_item_bundle_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_fastspring_item_bundle_bool_exp"] | null},ValueTypes["vectric_oem_fastspring_item_bundle"]],
vectric_oem_fastspring_item_bundle_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_fastspring_item_bundle_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_fastspring_item_bundle_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_fastspring_item_bundle_bool_exp"] | null},ValueTypes["vectric_oem_fastspring_item_bundle_aggregate"]],
vectric_oem_fastspring_item_bundle_by_pk?: [{	itemBundleId:ValueTypes["bigint"]},ValueTypes["vectric_oem_fastspring_item_bundle"]],
vectric_oem_invite_status?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_invite_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_invite_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_invite_status_bool_exp"] | null},ValueTypes["vectric_oem_invite_status"]],
vectric_oem_invite_status_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_invite_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_invite_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_invite_status_bool_exp"] | null},ValueTypes["vectric_oem_invite_status_aggregate"]],
vectric_oem_invite_status_by_pk?: [{	statusId:ValueTypes["bigint"]},ValueTypes["vectric_oem_invite_status"]],
vectric_oem_licence_allocation_type_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_licence_allocation_type_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_licence_allocation_type_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_licence_allocation_type_bool_exp"] | null},ValueTypes["vectric_oem_licence_allocation_type_aggregate"]],
vectric_oem_licence_allocation_type_by_pk?: [{	allocationTypeId:ValueTypes["bigint"]},ValueTypes["vectric_oem_licence_allocation_type"]],
vectric_oem_partners_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_partners_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_partners_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_partners_bool_exp"] | null},ValueTypes["vectric_oem_partners_aggregate"]],
vectric_oem_products_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_products_bool_exp"] | null},ValueTypes["vectric_oem_products_aggregate"]],
vectric_oem_staff_admin_ownership_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_staff_admin_ownership_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_staff_admin_ownership_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_staff_admin_ownership_bool_exp"] | null},ValueTypes["vectric_oem_staff_admin_ownership_aggregate"]],
vectric_organization_memberships_admin_access_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_memberships_admin_access_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_memberships_admin_access_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_memberships_admin_access_bool_exp"] | null},ValueTypes["vectric_organization_memberships_admin_access_aggregate"]],
vectric_organization_order_items_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_order_items_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_order_items_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_order_items_bool_exp"] | null},ValueTypes["vectric_organization_order_items_aggregate"]],
vectric_organization_orders_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_orders_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_orders_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_orders_bool_exp"] | null},ValueTypes["vectric_organization_orders_aggregate"]],
vectric_organization_types?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_types_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_types_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_types_bool_exp"] | null},ValueTypes["vectric_organization_types"]],
vectric_organization_types_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_types_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_types_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_types_bool_exp"] | null},ValueTypes["vectric_organization_types_aggregate"]],
vectric_organization_types_by_pk?: [{	type:string},ValueTypes["vectric_organization_types"]],
vectric_products_clipartcollection_links_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_clipartcollection_links_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_clipartcollection_links_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_clipartcollection_links_bool_exp"] | null},ValueTypes["vectric_products_clipartcollection_links_aggregate"]],
vectric_products_clipartcollection_links_by_pk?: [{	clipartCollectionLinkId:ValueTypes["bigint"]},ValueTypes["vectric_products_clipartcollection_links"]],
vectric_products_enhancement_eligibility_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_enhancement_eligibility_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_enhancement_eligibility_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_enhancement_eligibility_bool_exp"] | null},ValueTypes["vectric_products_enhancement_eligibility_aggregate"]],
vectric_products_enhancement_eligibility_by_pk?: [{	eligibilityId:ValueTypes["bigint"]},ValueTypes["vectric_products_enhancement_eligibility"]],
vectric_products_freeclipart_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_freeclipart_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_freeclipart_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_freeclipart_bool_exp"] | null},ValueTypes["vectric_products_freeclipart_aggregate"]],
vectric_products_freeclipart_by_pk?: [{	productFreeClipartId:ValueTypes["bigint"]},ValueTypes["vectric_products_freeclipart"]],
vectric_products_fulfilments?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_fulfilments_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_fulfilments_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_fulfilments_bool_exp"] | null},ValueTypes["vectric_products_fulfilments"]],
vectric_products_fulfilments_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_fulfilments_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_fulfilments_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_fulfilments_bool_exp"] | null},ValueTypes["vectric_products_fulfilments_aggregate"]],
vectric_products_fulfilments_by_pk?: [{	fulfilmentId:ValueTypes["bigint"]},ValueTypes["vectric_products_fulfilments"]],
vectric_products_fulfilmenttypes?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_fulfilmenttypes_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_fulfilmenttypes_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_fulfilmenttypes_bool_exp"] | null},ValueTypes["vectric_products_fulfilmenttypes"]],
vectric_products_fulfilmenttypes_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_fulfilmenttypes_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_fulfilmenttypes_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_fulfilmenttypes_bool_exp"] | null},ValueTypes["vectric_products_fulfilmenttypes_aggregate"]],
vectric_products_fulfilmenttypes_by_pk?: [{	fulfilmenttypeid:ValueTypes["bigint"]},ValueTypes["vectric_products_fulfilmenttypes"]],
vectric_products_product_fulfilments?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_product_fulfilments_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_product_fulfilments_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_product_fulfilments_bool_exp"] | null},ValueTypes["vectric_products_product_fulfilments"]],
vectric_products_product_fulfilments_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_product_fulfilments_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_product_fulfilments_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_product_fulfilments_bool_exp"] | null},ValueTypes["vectric_products_product_fulfilments_aggregate"]],
vectric_products_product_fulfilments_by_pk?: [{	productfulfilmentid:ValueTypes["bigint"]},ValueTypes["vectric_products_product_fulfilments"]],
vectric_products_product_licence_type?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_product_licence_type_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_product_licence_type_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_product_licence_type_bool_exp"] | null},ValueTypes["vectric_products_product_licence_type"]],
vectric_products_product_licence_type_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_product_licence_type_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_product_licence_type_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_product_licence_type_bool_exp"] | null},ValueTypes["vectric_products_product_licence_type_aggregate"]],
vectric_products_product_licence_type_by_pk?: [{	type:string},ValueTypes["vectric_products_product_licence_type"]],
vectric_products_products_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_products_bool_exp"] | null},ValueTypes["vectric_products_products_aggregate"]],
vectric_products_producttype_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_producttype_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_producttype_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_producttype_bool_exp"] | null},ValueTypes["vectric_products_producttype_aggregate"]],
vectric_products_upgrade_eligibility_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_upgrade_eligibility_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_upgrade_eligibility_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_upgrade_eligibility_bool_exp"] | null},ValueTypes["vectric_products_upgrade_eligibility_aggregate"]],
vectric_sales_customerupdates?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_customerupdates_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_customerupdates_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_customerupdates_bool_exp"] | null},ValueTypes["vectric_sales_customerupdates"]],
vectric_sales_customerupdates_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_customerupdates_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_customerupdates_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_customerupdates_bool_exp"] | null},ValueTypes["vectric_sales_customerupdates_aggregate"]],
vectric_sales_customerupdates_by_pk?: [{	customerUpdateId:ValueTypes["bigint"]},ValueTypes["vectric_sales_customerupdates"]],
vectric_sales_oemlicences_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_oemlicences_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_oemlicences_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_oemlicences_bool_exp"] | null},ValueTypes["vectric_sales_oemlicences_aggregate"]],
vectric_sales_orders_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_orders_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_orders_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_orders_bool_exp"] | null},ValueTypes["vectric_sales_orders_aggregate"]],
vectric_sales_salesitem_products_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_salesitem_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_salesitem_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_salesitem_products_bool_exp"] | null},ValueTypes["vectric_sales_salesitem_products_aggregate"]],
vectric_sales_salesitemproduct_status?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_salesitemproduct_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_salesitemproduct_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_salesitemproduct_status_bool_exp"] | null},ValueTypes["vectric_sales_salesitemproduct_status"]],
vectric_sales_salesitemproduct_status_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_salesitemproduct_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_salesitemproduct_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_salesitemproduct_status_bool_exp"] | null},ValueTypes["vectric_sales_salesitemproduct_status_aggregate"]],
vectric_sales_salesitemproduct_status_by_pk?: [{	statusid:ValueTypes["bigint"]},ValueTypes["vectric_sales_salesitemproduct_status"]],
vectric_sales_salesitems_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_salesitems_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_salesitems_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_salesitems_bool_exp"] | null},ValueTypes["vectric_sales_salesitems_aggregate"]],
vectric_security_emailverificationtokens_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_emailverificationtokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_emailverificationtokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_emailverificationtokens_bool_exp"] | null},ValueTypes["vectric_security_emailverificationtokens_aggregate"]],
vectric_security_group_authorities?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_group_authorities_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_group_authorities_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_group_authorities_bool_exp"] | null},ValueTypes["vectric_security_group_authorities"]],
vectric_security_group_authorities_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_group_authorities_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_group_authorities_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_group_authorities_bool_exp"] | null},ValueTypes["vectric_security_group_authorities_aggregate"]],
vectric_security_group_members_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_group_members_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_group_members_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_group_members_bool_exp"] | null},ValueTypes["vectric_security_group_members_aggregate"]],
vectric_security_passwordresettokens_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_passwordresettokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_passwordresettokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_passwordresettokens_bool_exp"] | null},ValueTypes["vectric_security_passwordresettokens_aggregate"]],
vectric_security_userinvitations_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_userinvitations_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_userinvitations_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_userinvitations_bool_exp"] | null},ValueTypes["vectric_security_userinvitations_aggregate"]],
vectric_security_userinvitations_by_pk?: [{	token:string},ValueTypes["vectric_security_userinvitations"]],
vectric_security_users_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_users_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_users_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_users_bool_exp"] | null},ValueTypes["vectric_security_users_aggregate"]],
vectric_security_users_by_pk?: [{	username:string},ValueTypes["vectric_security_users"]],
vectric_subscription_contract_status?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_subscription_contract_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_subscription_contract_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_subscription_contract_status_bool_exp"] | null},ValueTypes["vectric_subscription_contract_status"]],
vectric_subscription_contract_status_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_subscription_contract_status_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_subscription_contract_status_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_subscription_contract_status_bool_exp"] | null},ValueTypes["vectric_subscription_contract_status_aggregate"]],
vectric_subscription_contract_status_by_pk?: [{	status:string},ValueTypes["vectric_subscription_contract_status"]],
vectric_subscription_contracts?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_subscription_contracts_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_subscription_contracts_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_subscription_contracts_bool_exp"] | null},ValueTypes["vectric_subscription_contracts"]],
vectric_subscription_contracts_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_subscription_contracts_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_subscription_contracts_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_subscription_contracts_bool_exp"] | null},ValueTypes["vectric_subscription_contracts_aggregate"]],
vectric_subscription_contracts_by_pk?: [{	subscriptionContractId:number},ValueTypes["vectric_subscription_contracts"]],
vectric_subscription_events?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_subscription_events_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_subscription_events_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_subscription_events_bool_exp"] | null},ValueTypes["vectric_subscription_events"]],
vectric_subscription_events_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_subscription_events_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_subscription_events_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_subscription_events_bool_exp"] | null},ValueTypes["vectric_subscription_events_aggregate"]],
vectric_subscription_events_by_pk?: [{	eventId:number},ValueTypes["vectric_subscription_events"]],
vectric_update_requests_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_update_requests_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_update_requests_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_update_requests_bool_exp"] | null},ValueTypes["vectric_update_requests_aggregate"]],
vectric_upgrade_tokens_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrade_tokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrade_tokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrade_tokens_bool_exp"] | null},ValueTypes["vectric_upgrade_tokens_aggregate"]],
vectric_version_code?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_version_code_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_version_code_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_version_code_bool_exp"] | null},ValueTypes["vectric_version_code"]],
vectric_version_code_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_version_code_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_version_code_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_version_code_bool_exp"] | null},ValueTypes["vectric_version_code_aggregate"]],
vectric_version_code_by_pk?: [{	versionCodeId:ValueTypes["bigint"]},ValueTypes["vectric_version_code"]],
versionCodeById?: [{	versioncodeid:ValueTypes["bigint"]},ValueTypes["vectric_products_versioncodes"]],
versionCodes?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_versioncodes_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_versioncodes_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_versioncodes_bool_exp"] | null},ValueTypes["vectric_products_versioncodes"]],
versionCodes_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_versioncodes_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_versioncodes_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_versioncodes_bool_exp"] | null},ValueTypes["vectric_products_versioncodes_aggregate"]],
zendeskUploads?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_zd_uploads_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_zd_uploads_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_zd_uploads_bool_exp"] | null},ValueTypes["vectric_customer_zd_uploads"]],
zendeskUploadsById?: [{	zdUploadId:ValueTypes["bigint"]},ValueTypes["vectric_customer_zd_uploads"]],
zendeskUploads_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_zd_uploads_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_zd_uploads_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_zd_uploads_bool_exp"] | null},ValueTypes["vectric_customer_zd_uploads_aggregate"]],
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.active_memberships" */
["vectric_active_memberships"]: AliasType<{
	customerId?:boolean,
	isAdmin?:boolean,
	membershipId?:boolean,
	/** An object relationship */
	organization?:ValueTypes["vectric_organizations"],
	organizationId?:boolean,
	role?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.active_memberships" */
["vectric_active_memberships_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_active_memberships_aggregate_fields"],
	nodes?:ValueTypes["vectric_active_memberships"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.active_memberships" */
["vectric_active_memberships_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_active_memberships_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_active_memberships_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_active_memberships_max_fields"],
	min?:ValueTypes["vectric_active_memberships_min_fields"],
	stddev?:ValueTypes["vectric_active_memberships_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_active_memberships_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_active_memberships_stddev_samp_fields"],
	sum?:ValueTypes["vectric_active_memberships_sum_fields"],
	var_pop?:ValueTypes["vectric_active_memberships_var_pop_fields"],
	var_samp?:ValueTypes["vectric_active_memberships_var_samp_fields"],
	variance?:ValueTypes["vectric_active_memberships_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_active_memberships_avg_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_active_memberships_max_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
	role?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_active_memberships_min_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
	role?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_active_memberships_stddev_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_active_memberships_stddev_pop_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_active_memberships_stddev_samp_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_active_memberships_sum_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_active_memberships_var_pop_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_active_memberships_var_samp_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_active_memberships_variance_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.active_upgrades" */
["vectric_active_upgrades"]: AliasType<{
	eligibility_id?:boolean,
	fastspring_id?:boolean,
	/** An object relationship */
	fromProduct?:ValueTypes["vectric_products_products"],
	from_product_id?:boolean,
	from_product_name?:boolean,
	price?:boolean,
	summary?:boolean,
	/** An object relationship */
	toProduct?:ValueTypes["vectric_products_products"],
	to_product_id?:boolean,
	to_product_name?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.active_upgrades" */
["vectric_active_upgrades_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_active_upgrades_aggregate_fields"],
	nodes?:ValueTypes["vectric_active_upgrades"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.active_upgrades" */
["vectric_active_upgrades_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_active_upgrades_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_active_upgrades_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_active_upgrades_max_fields"],
	min?:ValueTypes["vectric_active_upgrades_min_fields"],
	stddev?:ValueTypes["vectric_active_upgrades_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_active_upgrades_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_active_upgrades_stddev_samp_fields"],
	sum?:ValueTypes["vectric_active_upgrades_sum_fields"],
	var_pop?:ValueTypes["vectric_active_upgrades_var_pop_fields"],
	var_samp?:ValueTypes["vectric_active_upgrades_var_samp_fields"],
	variance?:ValueTypes["vectric_active_upgrades_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_active_upgrades_avg_fields"]: AliasType<{
	eligibility_id?:boolean,
	from_product_id?:boolean,
	price?:boolean,
	to_product_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_active_upgrades_max_fields"]: AliasType<{
	eligibility_id?:boolean,
	fastspring_id?:boolean,
	from_product_id?:boolean,
	from_product_name?:boolean,
	price?:boolean,
	summary?:boolean,
	to_product_id?:boolean,
	to_product_name?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_active_upgrades_min_fields"]: AliasType<{
	eligibility_id?:boolean,
	fastspring_id?:boolean,
	from_product_id?:boolean,
	from_product_name?:boolean,
	price?:boolean,
	summary?:boolean,
	to_product_id?:boolean,
	to_product_name?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_active_upgrades_stddev_fields"]: AliasType<{
	eligibility_id?:boolean,
	from_product_id?:boolean,
	price?:boolean,
	to_product_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_active_upgrades_stddev_pop_fields"]: AliasType<{
	eligibility_id?:boolean,
	from_product_id?:boolean,
	price?:boolean,
	to_product_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_active_upgrades_stddev_samp_fields"]: AliasType<{
	eligibility_id?:boolean,
	from_product_id?:boolean,
	price?:boolean,
	to_product_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_active_upgrades_sum_fields"]: AliasType<{
	eligibility_id?:boolean,
	from_product_id?:boolean,
	price?:boolean,
	to_product_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_active_upgrades_var_pop_fields"]: AliasType<{
	eligibility_id?:boolean,
	from_product_id?:boolean,
	price?:boolean,
	to_product_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_active_upgrades_var_samp_fields"]: AliasType<{
	eligibility_id?:boolean,
	from_product_id?:boolean,
	price?:boolean,
	to_product_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_active_upgrades_variance_fields"]: AliasType<{
	eligibility_id?:boolean,
	from_product_id?:boolean,
	price?:boolean,
	to_product_id?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.allocatable_bundles" */
["vectric_allocatable_bundles"]: AliasType<{
	/** An object relationship */
	allocatableProduct?:ValueTypes["vectric_products_products"],
	bundleId?:boolean,
licences?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_oemlicences_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_oemlicences_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_oemlicences_bool_exp"] | null},ValueTypes["vectric_sales_oemlicences"]],
licences_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_oemlicences_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_oemlicences_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_oemlicences_bool_exp"] | null},ValueTypes["vectric_sales_oemlicences_aggregate"]],
	/** An object relationship */
	partner?:ValueTypes["vectric_oem_partners"],
	partnerId?:boolean,
	product?:boolean,
	productDisplayName?:boolean,
	typeDisplayName?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.allocatable_bundles" */
["vectric_allocatable_bundles_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_allocatable_bundles_aggregate_fields"],
	nodes?:ValueTypes["vectric_allocatable_bundles"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.allocatable_bundles" */
["vectric_allocatable_bundles_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_allocatable_bundles_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_allocatable_bundles_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_allocatable_bundles_max_fields"],
	min?:ValueTypes["vectric_allocatable_bundles_min_fields"],
	stddev?:ValueTypes["vectric_allocatable_bundles_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_allocatable_bundles_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_allocatable_bundles_stddev_samp_fields"],
	sum?:ValueTypes["vectric_allocatable_bundles_sum_fields"],
	var_pop?:ValueTypes["vectric_allocatable_bundles_var_pop_fields"],
	var_samp?:ValueTypes["vectric_allocatable_bundles_var_samp_fields"],
	variance?:ValueTypes["vectric_allocatable_bundles_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_allocatable_bundles_avg_fields"]: AliasType<{
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_allocatable_bundles_max_fields"]: AliasType<{
	bundleId?:boolean,
	partnerId?:boolean,
	product?:boolean,
	productDisplayName?:boolean,
	typeDisplayName?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_allocatable_bundles_min_fields"]: AliasType<{
	bundleId?:boolean,
	partnerId?:boolean,
	product?:boolean,
	productDisplayName?:boolean,
	typeDisplayName?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.allocatable_bundles" */
["vectric_allocatable_bundles_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_allocatable_bundles"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_allocatable_bundles_stddev_fields"]: AliasType<{
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_allocatable_bundles_stddev_pop_fields"]: AliasType<{
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_allocatable_bundles_stddev_samp_fields"]: AliasType<{
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_allocatable_bundles_sum_fields"]: AliasType<{
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_allocatable_bundles_var_pop_fields"]: AliasType<{
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_allocatable_bundles_var_samp_fields"]: AliasType<{
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_allocatable_bundles_variance_fields"]: AliasType<{
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.allocatable_licence_count" */
["vectric_allocatable_licence_count"]: AliasType<{
	/** An object relationship */
	allocatableProduct?:ValueTypes["vectric_products_products"],
	availableCount?:boolean,
	oemPartnerId?:boolean,
	/** An object relationship */
	partner?:ValueTypes["vectric_oem_partners"],
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.allocatable_licence_count" */
["vectric_allocatable_licence_count_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_allocatable_licence_count_aggregate_fields"],
	nodes?:ValueTypes["vectric_allocatable_licence_count"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.allocatable_licence_count" */
["vectric_allocatable_licence_count_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_allocatable_licence_count_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_allocatable_licence_count_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_allocatable_licence_count_max_fields"],
	min?:ValueTypes["vectric_allocatable_licence_count_min_fields"],
	stddev?:ValueTypes["vectric_allocatable_licence_count_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_allocatable_licence_count_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_allocatable_licence_count_stddev_samp_fields"],
	sum?:ValueTypes["vectric_allocatable_licence_count_sum_fields"],
	var_pop?:ValueTypes["vectric_allocatable_licence_count_var_pop_fields"],
	var_samp?:ValueTypes["vectric_allocatable_licence_count_var_samp_fields"],
	variance?:ValueTypes["vectric_allocatable_licence_count_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_allocatable_licence_count_avg_fields"]: AliasType<{
	availableCount?:boolean,
	oemPartnerId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_allocatable_licence_count_max_fields"]: AliasType<{
	availableCount?:boolean,
	oemPartnerId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_allocatable_licence_count_min_fields"]: AliasType<{
	availableCount?:boolean,
	oemPartnerId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_allocatable_licence_count_stddev_fields"]: AliasType<{
	availableCount?:boolean,
	oemPartnerId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_allocatable_licence_count_stddev_pop_fields"]: AliasType<{
	availableCount?:boolean,
	oemPartnerId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_allocatable_licence_count_stddev_samp_fields"]: AliasType<{
	availableCount?:boolean,
	oemPartnerId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_allocatable_licence_count_sum_fields"]: AliasType<{
	availableCount?:boolean,
	oemPartnerId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_allocatable_licence_count_var_pop_fields"]: AliasType<{
	availableCount?:boolean,
	oemPartnerId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_allocatable_licence_count_var_samp_fields"]: AliasType<{
	availableCount?:boolean,
	oemPartnerId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_allocatable_licence_count_variance_fields"]: AliasType<{
	availableCount?:boolean,
	oemPartnerId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.allocated_bundles" */
["vectric_allocated_bundles"]: AliasType<{
	allocatedby?:boolean,
	allocationbatch?:boolean,
	allocationtype?:boolean,
	bundleId?:boolean,
	dateAllocated?:boolean,
	dateCreated?:boolean,
	dateOriginallyRegistered?:boolean,
licences?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_oemlicences_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_oemlicences_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_oemlicences_bool_exp"] | null},ValueTypes["vectric_sales_oemlicences"]],
licences_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_oemlicences_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_oemlicences_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_oemlicences_bool_exp"] | null},ValueTypes["vectric_sales_oemlicences_aggregate"]],
	notes?:boolean,
	/** An object relationship */
	partner?:ValueTypes["vectric_oem_partners"],
	partnerId?:boolean,
	product?:boolean,
	productDisplayName?:boolean,
	typeDisplayName?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.allocated_bundles" */
["vectric_allocated_bundles_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_allocated_bundles_aggregate_fields"],
	nodes?:ValueTypes["vectric_allocated_bundles"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.allocated_bundles" */
["vectric_allocated_bundles_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_allocated_bundles_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_allocated_bundles_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_allocated_bundles_max_fields"],
	min?:ValueTypes["vectric_allocated_bundles_min_fields"],
	stddev?:ValueTypes["vectric_allocated_bundles_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_allocated_bundles_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_allocated_bundles_stddev_samp_fields"],
	sum?:ValueTypes["vectric_allocated_bundles_sum_fields"],
	var_pop?:ValueTypes["vectric_allocated_bundles_var_pop_fields"],
	var_samp?:ValueTypes["vectric_allocated_bundles_var_samp_fields"],
	variance?:ValueTypes["vectric_allocated_bundles_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_allocated_bundles_avg_fields"]: AliasType<{
	allocationtype?:boolean,
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_allocated_bundles_max_fields"]: AliasType<{
	allocatedby?:boolean,
	allocationbatch?:boolean,
	allocationtype?:boolean,
	bundleId?:boolean,
	dateAllocated?:boolean,
	dateCreated?:boolean,
	dateOriginallyRegistered?:boolean,
	notes?:boolean,
	partnerId?:boolean,
	product?:boolean,
	productDisplayName?:boolean,
	typeDisplayName?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_allocated_bundles_min_fields"]: AliasType<{
	allocatedby?:boolean,
	allocationbatch?:boolean,
	allocationtype?:boolean,
	bundleId?:boolean,
	dateAllocated?:boolean,
	dateCreated?:boolean,
	dateOriginallyRegistered?:boolean,
	notes?:boolean,
	partnerId?:boolean,
	product?:boolean,
	productDisplayName?:boolean,
	typeDisplayName?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.allocated_bundles" */
["vectric_allocated_bundles_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_allocated_bundles"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_allocated_bundles_stddev_fields"]: AliasType<{
	allocationtype?:boolean,
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_allocated_bundles_stddev_pop_fields"]: AliasType<{
	allocationtype?:boolean,
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_allocated_bundles_stddev_samp_fields"]: AliasType<{
	allocationtype?:boolean,
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_allocated_bundles_sum_fields"]: AliasType<{
	allocationtype?:boolean,
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_allocated_bundles_var_pop_fields"]: AliasType<{
	allocationtype?:boolean,
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_allocated_bundles_var_samp_fields"]: AliasType<{
	allocationtype?:boolean,
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_allocated_bundles_variance_fields"]: AliasType<{
	allocationtype?:boolean,
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** File locations for batch summaries


columns and relationships of "vectric.allocation_summary" */
["vectric_allocation_summary"]: AliasType<{
batch?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocated_bundles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocated_bundles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocated_bundles_bool_exp"] | null},ValueTypes["vectric_allocated_bundles"]],
	batchId?:boolean,
batch_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_allocated_bundles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_allocated_bundles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_allocated_bundles_bool_exp"] | null},ValueTypes["vectric_allocated_bundles_aggregate"]],
	bucket?:boolean,
	id?:boolean,
	location?:boolean,
	/** An object relationship */
	partner?:ValueTypes["vectric_oem_partners"],
	partnerId?:boolean,
	signedUrl?:boolean,
	type?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.allocation_summary" */
["vectric_allocation_summary_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_allocation_summary_aggregate_fields"],
	nodes?:ValueTypes["vectric_allocation_summary"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.allocation_summary" */
["vectric_allocation_summary_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_allocation_summary_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_allocation_summary_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_allocation_summary_max_fields"],
	min?:ValueTypes["vectric_allocation_summary_min_fields"],
	stddev?:ValueTypes["vectric_allocation_summary_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_allocation_summary_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_allocation_summary_stddev_samp_fields"],
	sum?:ValueTypes["vectric_allocation_summary_sum_fields"],
	var_pop?:ValueTypes["vectric_allocation_summary_var_pop_fields"],
	var_samp?:ValueTypes["vectric_allocation_summary_var_samp_fields"],
	variance?:ValueTypes["vectric_allocation_summary_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_allocation_summary_avg_fields"]: AliasType<{
	id?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** File types for the summaries


columns and relationships of "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type"]: AliasType<{
	type?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_allocation_summary_file_type_aggregate_fields"],
	nodes?:ValueTypes["vectric_allocation_summary_file_type"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_aggregate_fields"]: AliasType<{
count?: [{	columns?:ValueTypes["vectric_allocation_summary_file_type_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_allocation_summary_file_type_max_fields"],
	min?:ValueTypes["vectric_allocation_summary_file_type_min_fields"],
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_allocation_summary_file_type_max_fields"]: AliasType<{
	type?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_allocation_summary_file_type_min_fields"]: AliasType<{
	type?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_allocation_summary_file_type"],
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_allocation_summary_max_fields"]: AliasType<{
	batchId?:boolean,
	bucket?:boolean,
	id?:boolean,
	location?:boolean,
	partnerId?:boolean,
	signedUrl?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_allocation_summary_min_fields"]: AliasType<{
	batchId?:boolean,
	bucket?:boolean,
	id?:boolean,
	location?:boolean,
	partnerId?:boolean,
	signedUrl?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.allocation_summary" */
["vectric_allocation_summary_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_allocation_summary"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_allocation_summary_stddev_fields"]: AliasType<{
	id?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_allocation_summary_stddev_pop_fields"]: AliasType<{
	id?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_allocation_summary_stddev_samp_fields"]: AliasType<{
	id?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_allocation_summary_sum_fields"]: AliasType<{
	id?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_allocation_summary_var_pop_fields"]: AliasType<{
	id?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_allocation_summary_var_samp_fields"]: AliasType<{
	id?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_allocation_summary_variance_fields"]: AliasType<{
	id?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.continents" */
["vectric_continents"]: AliasType<{
	/** Continent code */
	code?:boolean,
	name?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.continents" */
["vectric_continents_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_continents_aggregate_fields"],
	nodes?:ValueTypes["vectric_continents"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.continents" */
["vectric_continents_aggregate_fields"]: AliasType<{
count?: [{	columns?:ValueTypes["vectric_continents_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_continents_max_fields"],
	min?:ValueTypes["vectric_continents_min_fields"],
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_continents_max_fields"]: AliasType<{
	/** Continent code */
	code?:boolean,
	name?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_continents_min_fields"]: AliasType<{
	/** Continent code */
	code?:boolean,
	name?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.continents" */
["vectric_continents_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_continents"],
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.countries" */
["vectric_countries"]: AliasType<{
	/** Two-letter country code (ISO 3166-1 alpha-2) */
	code?:boolean,
	/** An object relationship */
	continent?:ValueTypes["vectric_continents"],
	continentcode?:boolean,
	countryid?:boolean,
	displayorder?:boolean,
	/** Full English country name */
	fullname?:boolean,
	/** Three-letter country code (ISO 3166-1 alpha-3) */
	iso3?:boolean,
	/** English country name */
	name?:boolean,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.countries" */
["vectric_countries_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_countries_aggregate_fields"],
	nodes?:ValueTypes["vectric_countries"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.countries" */
["vectric_countries_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_countries_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_countries_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_countries_max_fields"],
	min?:ValueTypes["vectric_countries_min_fields"],
	stddev?:ValueTypes["vectric_countries_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_countries_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_countries_stddev_samp_fields"],
	sum?:ValueTypes["vectric_countries_sum_fields"],
	var_pop?:ValueTypes["vectric_countries_var_pop_fields"],
	var_samp?:ValueTypes["vectric_countries_var_samp_fields"],
	variance?:ValueTypes["vectric_countries_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_countries_avg_fields"]: AliasType<{
	countryid?:boolean,
	displayorder?:boolean,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_countries_max_fields"]: AliasType<{
	/** Two-letter country code (ISO 3166-1 alpha-2) */
	code?:boolean,
	continentcode?:boolean,
	countryid?:boolean,
	displayorder?:boolean,
	/** Full English country name */
	fullname?:boolean,
	/** Three-letter country code (ISO 3166-1 alpha-3) */
	iso3?:boolean,
	/** English country name */
	name?:boolean,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_countries_min_fields"]: AliasType<{
	/** Two-letter country code (ISO 3166-1 alpha-2) */
	code?:boolean,
	continentcode?:boolean,
	countryid?:boolean,
	displayorder?:boolean,
	/** Full English country name */
	fullname?:boolean,
	/** Three-letter country code (ISO 3166-1 alpha-3) */
	iso3?:boolean,
	/** English country name */
	name?:boolean,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.countries" */
["vectric_countries_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_countries"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_countries_stddev_fields"]: AliasType<{
	countryid?:boolean,
	displayorder?:boolean,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_countries_stddev_pop_fields"]: AliasType<{
	countryid?:boolean,
	displayorder?:boolean,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_countries_stddev_samp_fields"]: AliasType<{
	countryid?:boolean,
	displayorder?:boolean,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_countries_sum_fields"]: AliasType<{
	countryid?:boolean,
	displayorder?:boolean,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_countries_var_pop_fields"]: AliasType<{
	countryid?:boolean,
	displayorder?:boolean,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_countries_var_samp_fields"]: AliasType<{
	countryid?:boolean,
	displayorder?:boolean,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_countries_variance_fields"]: AliasType<{
	countryid?:boolean,
	displayorder?:boolean,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.customer_area" */
["vectric_customer_area"]: AliasType<{
	bucketName?:boolean,
	/** An object relationship */
	customer?:ValueTypes["vectric_sales_customers"],
customerAreaFiles?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_area_file_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_area_file_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_area_file_bool_exp"] | null},ValueTypes["vectric_customer_area_file"]],
customerAreaFiles_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_area_file_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_area_file_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_area_file_bool_exp"] | null},ValueTypes["vectric_customer_area_file_aggregate"]],
	customerAreaId?:boolean,
	customerId?:boolean,
	objectName?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.customer_area" */
["vectric_customer_area_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_customer_area_aggregate_fields"],
	nodes?:ValueTypes["vectric_customer_area"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.customer_area" */
["vectric_customer_area_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_customer_area_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_customer_area_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_customer_area_max_fields"],
	min?:ValueTypes["vectric_customer_area_min_fields"],
	stddev?:ValueTypes["vectric_customer_area_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_customer_area_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_customer_area_stddev_samp_fields"],
	sum?:ValueTypes["vectric_customer_area_sum_fields"],
	var_pop?:ValueTypes["vectric_customer_area_var_pop_fields"],
	var_samp?:ValueTypes["vectric_customer_area_var_samp_fields"],
	variance?:ValueTypes["vectric_customer_area_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_customer_area_avg_fields"]: AliasType<{
	customerAreaId?:boolean,
	customerId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.customer_area_file" */
["vectric_customer_area_file"]: AliasType<{
	/** An object relationship */
	customerArea?:ValueTypes["vectric_customer_area"],
	customerAreaFileId?:boolean,
	customerAreaId?:boolean,
	dateUploaded?:boolean,
	fileKey?:boolean,
	fileName?:boolean,
	objectName?:boolean,
	/** An object relationship */
	product?:ValueTypes["vectric_products_products"],
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.customer_area_file" */
["vectric_customer_area_file_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_customer_area_file_aggregate_fields"],
	nodes?:ValueTypes["vectric_customer_area_file"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.customer_area_file" */
["vectric_customer_area_file_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_customer_area_file_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_customer_area_file_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_customer_area_file_max_fields"],
	min?:ValueTypes["vectric_customer_area_file_min_fields"],
	stddev?:ValueTypes["vectric_customer_area_file_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_customer_area_file_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_customer_area_file_stddev_samp_fields"],
	sum?:ValueTypes["vectric_customer_area_file_sum_fields"],
	var_pop?:ValueTypes["vectric_customer_area_file_var_pop_fields"],
	var_samp?:ValueTypes["vectric_customer_area_file_var_samp_fields"],
	variance?:ValueTypes["vectric_customer_area_file_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_customer_area_file_avg_fields"]: AliasType<{
	customerAreaFileId?:boolean,
	customerAreaId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_customer_area_file_max_fields"]: AliasType<{
	customerAreaFileId?:boolean,
	customerAreaId?:boolean,
	dateUploaded?:boolean,
	fileKey?:boolean,
	fileName?:boolean,
	objectName?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_customer_area_file_min_fields"]: AliasType<{
	customerAreaFileId?:boolean,
	customerAreaId?:boolean,
	dateUploaded?:boolean,
	fileKey?:boolean,
	fileName?:boolean,
	objectName?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.customer_area_file" */
["vectric_customer_area_file_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_customer_area_file"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_customer_area_file_stddev_fields"]: AliasType<{
	customerAreaFileId?:boolean,
	customerAreaId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_customer_area_file_stddev_pop_fields"]: AliasType<{
	customerAreaFileId?:boolean,
	customerAreaId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_customer_area_file_stddev_samp_fields"]: AliasType<{
	customerAreaFileId?:boolean,
	customerAreaId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_customer_area_file_sum_fields"]: AliasType<{
	customerAreaFileId?:boolean,
	customerAreaId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_customer_area_file_var_pop_fields"]: AliasType<{
	customerAreaFileId?:boolean,
	customerAreaId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_customer_area_file_var_samp_fields"]: AliasType<{
	customerAreaFileId?:boolean,
	customerAreaId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_customer_area_file_variance_fields"]: AliasType<{
	customerAreaFileId?:boolean,
	customerAreaId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_customer_area_max_fields"]: AliasType<{
	bucketName?:boolean,
	customerAreaId?:boolean,
	customerId?:boolean,
	objectName?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_customer_area_min_fields"]: AliasType<{
	bucketName?:boolean,
	customerAreaId?:boolean,
	customerId?:boolean,
	objectName?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.customer_area" */
["vectric_customer_area_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_customer_area"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_customer_area_stddev_fields"]: AliasType<{
	customerAreaId?:boolean,
	customerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_customer_area_stddev_pop_fields"]: AliasType<{
	customerAreaId?:boolean,
	customerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_customer_area_stddev_samp_fields"]: AliasType<{
	customerAreaId?:boolean,
	customerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_customer_area_sum_fields"]: AliasType<{
	customerAreaId?:boolean,
	customerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_customer_area_var_pop_fields"]: AliasType<{
	customerAreaId?:boolean,
	customerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_customer_area_var_samp_fields"]: AliasType<{
	customerAreaId?:boolean,
	customerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_customer_area_variance_fields"]: AliasType<{
	customerAreaId?:boolean,
	customerId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.customer_responses" */
["vectric_customer_responses"]: AliasType<{
	customerid?:boolean,
	customerresponseid?:boolean,
	othertext?:boolean,
	/** An object relationship */
	question?:ValueTypes["vectric_questions"],
	questionid?:boolean,
	/** An object relationship */
	response?:ValueTypes["vectric_responses"],
	responseid?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.customer_responses" */
["vectric_customer_responses_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_customer_responses_aggregate_fields"],
	nodes?:ValueTypes["vectric_customer_responses"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.customer_responses" */
["vectric_customer_responses_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_customer_responses_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_customer_responses_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_customer_responses_max_fields"],
	min?:ValueTypes["vectric_customer_responses_min_fields"],
	stddev?:ValueTypes["vectric_customer_responses_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_customer_responses_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_customer_responses_stddev_samp_fields"],
	sum?:ValueTypes["vectric_customer_responses_sum_fields"],
	var_pop?:ValueTypes["vectric_customer_responses_var_pop_fields"],
	var_samp?:ValueTypes["vectric_customer_responses_var_samp_fields"],
	variance?:ValueTypes["vectric_customer_responses_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_customer_responses_avg_fields"]: AliasType<{
	customerid?:boolean,
	customerresponseid?:boolean,
	questionid?:boolean,
	responseid?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_customer_responses_max_fields"]: AliasType<{
	customerid?:boolean,
	customerresponseid?:boolean,
	othertext?:boolean,
	questionid?:boolean,
	responseid?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_customer_responses_min_fields"]: AliasType<{
	customerid?:boolean,
	customerresponseid?:boolean,
	othertext?:boolean,
	questionid?:boolean,
	responseid?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.customer_responses" */
["vectric_customer_responses_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_customer_responses"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_customer_responses_stddev_fields"]: AliasType<{
	customerid?:boolean,
	customerresponseid?:boolean,
	questionid?:boolean,
	responseid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_customer_responses_stddev_pop_fields"]: AliasType<{
	customerid?:boolean,
	customerresponseid?:boolean,
	questionid?:boolean,
	responseid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_customer_responses_stddev_samp_fields"]: AliasType<{
	customerid?:boolean,
	customerresponseid?:boolean,
	questionid?:boolean,
	responseid?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_customer_responses_sum_fields"]: AliasType<{
	customerid?:boolean,
	customerresponseid?:boolean,
	questionid?:boolean,
	responseid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_customer_responses_var_pop_fields"]: AliasType<{
	customerid?:boolean,
	customerresponseid?:boolean,
	questionid?:boolean,
	responseid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_customer_responses_var_samp_fields"]: AliasType<{
	customerid?:boolean,
	customerresponseid?:boolean,
	questionid?:boolean,
	responseid?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_customer_responses_variance_fields"]: AliasType<{
	customerid?:boolean,
	customerresponseid?:boolean,
	questionid?:boolean,
	responseid?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.customer_sales" */
["vectric_customer_sales"]: AliasType<{
	customerId?:boolean,
	dateCreated?:boolean,
	orderDate?:boolean,
	orderId?:boolean,
salesItems?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_salesitems_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_salesitems_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_salesitems_bool_exp"] | null},ValueTypes["vectric_sales_salesitems"]],
salesItems_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_salesitems_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_salesitems_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_salesitems_bool_exp"] | null},ValueTypes["vectric_sales_salesitems_aggregate"]],
	veccode?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.customer_sales" */
["vectric_customer_sales_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_customer_sales_aggregate_fields"],
	nodes?:ValueTypes["vectric_customer_sales"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.customer_sales" */
["vectric_customer_sales_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_customer_sales_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_customer_sales_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_customer_sales_max_fields"],
	min?:ValueTypes["vectric_customer_sales_min_fields"],
	stddev?:ValueTypes["vectric_customer_sales_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_customer_sales_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_customer_sales_stddev_samp_fields"],
	sum?:ValueTypes["vectric_customer_sales_sum_fields"],
	var_pop?:ValueTypes["vectric_customer_sales_var_pop_fields"],
	var_samp?:ValueTypes["vectric_customer_sales_var_samp_fields"],
	variance?:ValueTypes["vectric_customer_sales_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_customer_sales_avg_fields"]: AliasType<{
	customerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_customer_sales_max_fields"]: AliasType<{
	customerId?:boolean,
	dateCreated?:boolean,
	orderDate?:boolean,
	orderId?:boolean,
	veccode?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_customer_sales_min_fields"]: AliasType<{
	customerId?:boolean,
	dateCreated?:boolean,
	orderDate?:boolean,
	orderId?:boolean,
	veccode?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.customer_sales" */
["vectric_customer_sales_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_customer_sales"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_customer_sales_stddev_fields"]: AliasType<{
	customerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_customer_sales_stddev_pop_fields"]: AliasType<{
	customerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_customer_sales_stddev_samp_fields"]: AliasType<{
	customerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_customer_sales_sum_fields"]: AliasType<{
	customerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_customer_sales_var_pop_fields"]: AliasType<{
	customerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_customer_sales_var_samp_fields"]: AliasType<{
	customerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_customer_sales_variance_fields"]: AliasType<{
	customerId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.customer_status" */
["vectric_customer_status"]: AliasType<{
	status?:boolean,
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.customer_status" */
["vectric_customer_status_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_customer_status_aggregate_fields"],
	nodes?:ValueTypes["vectric_customer_status"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.customer_status" */
["vectric_customer_status_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_customer_status_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_customer_status_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_customer_status_max_fields"],
	min?:ValueTypes["vectric_customer_status_min_fields"],
	stddev?:ValueTypes["vectric_customer_status_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_customer_status_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_customer_status_stddev_samp_fields"],
	sum?:ValueTypes["vectric_customer_status_sum_fields"],
	var_pop?:ValueTypes["vectric_customer_status_var_pop_fields"],
	var_samp?:ValueTypes["vectric_customer_status_var_samp_fields"],
	variance?:ValueTypes["vectric_customer_status_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_customer_status_avg_fields"]: AliasType<{
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_customer_status_max_fields"]: AliasType<{
	status?:boolean,
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_customer_status_min_fields"]: AliasType<{
	status?:boolean,
	statusId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.customer_status" */
["vectric_customer_status_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_customer_status"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_customer_status_stddev_fields"]: AliasType<{
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_customer_status_stddev_pop_fields"]: AliasType<{
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_customer_status_stddev_samp_fields"]: AliasType<{
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_customer_status_sum_fields"]: AliasType<{
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_customer_status_var_pop_fields"]: AliasType<{
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_customer_status_var_samp_fields"]: AliasType<{
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_customer_status_variance_fields"]: AliasType<{
	statusId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads"]: AliasType<{
	createdBy?:boolean,
	/** An object relationship */
	customer?:ValueTypes["vectric_sales_customers"],
	customerId?:boolean,
	dateCreated?:boolean,
	dateUploaded?:boolean,
	location?:boolean,
	objectName?:boolean,
	shorturlhash?:boolean,
	/** An object relationship */
	staff?:ValueTypes["vectric_sales_customers"],
	ticketId?:boolean,
	zdUploadId?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_customer_zd_uploads_aggregate_fields"],
	nodes?:ValueTypes["vectric_customer_zd_uploads"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_customer_zd_uploads_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_customer_zd_uploads_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_customer_zd_uploads_max_fields"],
	min?:ValueTypes["vectric_customer_zd_uploads_min_fields"],
	stddev?:ValueTypes["vectric_customer_zd_uploads_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_customer_zd_uploads_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_customer_zd_uploads_stddev_samp_fields"],
	sum?:ValueTypes["vectric_customer_zd_uploads_sum_fields"],
	var_pop?:ValueTypes["vectric_customer_zd_uploads_var_pop_fields"],
	var_samp?:ValueTypes["vectric_customer_zd_uploads_var_samp_fields"],
	variance?:ValueTypes["vectric_customer_zd_uploads_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_customer_zd_uploads_avg_fields"]: AliasType<{
	createdBy?:boolean,
	customerId?:boolean,
	zdUploadId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_customer_zd_uploads_max_fields"]: AliasType<{
	createdBy?:boolean,
	customerId?:boolean,
	dateCreated?:boolean,
	dateUploaded?:boolean,
	location?:boolean,
	objectName?:boolean,
	shorturlhash?:boolean,
	ticketId?:boolean,
	zdUploadId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_customer_zd_uploads_min_fields"]: AliasType<{
	createdBy?:boolean,
	customerId?:boolean,
	dateCreated?:boolean,
	dateUploaded?:boolean,
	location?:boolean,
	objectName?:boolean,
	shorturlhash?:boolean,
	ticketId?:boolean,
	zdUploadId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_customer_zd_uploads"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_customer_zd_uploads_stddev_fields"]: AliasType<{
	createdBy?:boolean,
	customerId?:boolean,
	zdUploadId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_customer_zd_uploads_stddev_pop_fields"]: AliasType<{
	createdBy?:boolean,
	customerId?:boolean,
	zdUploadId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_customer_zd_uploads_stddev_samp_fields"]: AliasType<{
	createdBy?:boolean,
	customerId?:boolean,
	zdUploadId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_customer_zd_uploads_sum_fields"]: AliasType<{
	createdBy?:boolean,
	customerId?:boolean,
	zdUploadId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_customer_zd_uploads_var_pop_fields"]: AliasType<{
	createdBy?:boolean,
	customerId?:boolean,
	zdUploadId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_customer_zd_uploads_var_samp_fields"]: AliasType<{
	createdBy?:boolean,
	customerId?:boolean,
	zdUploadId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_customer_zd_uploads_variance_fields"]: AliasType<{
	createdBy?:boolean,
	customerId?:boolean,
	zdUploadId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.download" */
["vectric_download"]: AliasType<{
	bucketName?:boolean,
	description?:boolean,
	downloadId?:boolean,
	downloadSize?:boolean,
	groupId?:boolean,
	name?:boolean,
	objectName?:boolean,
	previewImageUrl?:boolean,
	uploadDate?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.download" */
["vectric_download_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_download_aggregate_fields"],
	nodes?:ValueTypes["vectric_download"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.download" */
["vectric_download_aggregate_fields"]: AliasType<{
count?: [{	columns?:ValueTypes["vectric_download_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_download_max_fields"],
	min?:ValueTypes["vectric_download_min_fields"],
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_download_max_fields"]: AliasType<{
	bucketName?:boolean,
	description?:boolean,
	downloadId?:boolean,
	downloadSize?:boolean,
	groupId?:boolean,
	name?:boolean,
	objectName?:boolean,
	previewImageUrl?:boolean,
	uploadDate?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_download_min_fields"]: AliasType<{
	bucketName?:boolean,
	description?:boolean,
	downloadId?:boolean,
	downloadSize?:boolean,
	groupId?:boolean,
	name?:boolean,
	objectName?:boolean,
	previewImageUrl?:boolean,
	uploadDate?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.download" */
["vectric_download_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_download"],
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.download_record" */
["vectric_download_record"]: AliasType<{
	customerId?:boolean,
	downloadDate?:boolean,
	downloadId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.download_record" */
["vectric_download_record_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_download_record_aggregate_fields"],
	nodes?:ValueTypes["vectric_download_record"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.download_record" */
["vectric_download_record_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_download_record_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_download_record_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_download_record_max_fields"],
	min?:ValueTypes["vectric_download_record_min_fields"],
	stddev?:ValueTypes["vectric_download_record_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_download_record_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_download_record_stddev_samp_fields"],
	sum?:ValueTypes["vectric_download_record_sum_fields"],
	var_pop?:ValueTypes["vectric_download_record_var_pop_fields"],
	var_samp?:ValueTypes["vectric_download_record_var_samp_fields"],
	variance?:ValueTypes["vectric_download_record_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_download_record_avg_fields"]: AliasType<{
	customerId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_download_record_max_fields"]: AliasType<{
	customerId?:boolean,
	downloadDate?:boolean,
	downloadId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_download_record_min_fields"]: AliasType<{
	customerId?:boolean,
	downloadDate?:boolean,
	downloadId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.download_record" */
["vectric_download_record_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_download_record"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_download_record_stddev_fields"]: AliasType<{
	customerId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_download_record_stddev_pop_fields"]: AliasType<{
	customerId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_download_record_stddev_samp_fields"]: AliasType<{
	customerId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_download_record_sum_fields"]: AliasType<{
	customerId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_download_record_var_pop_fields"]: AliasType<{
	customerId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_download_record_var_samp_fields"]: AliasType<{
	customerId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_download_record_variance_fields"]: AliasType<{
	customerId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.enhancement_tokens" */
["vectric_enhancement_tokens"]: AliasType<{
	customerId?:boolean,
	dateCreated?:boolean,
	dateUsed?:boolean,
	enhancementEligibilityId?:boolean,
	enhancementOrderItemProductId?:boolean,
	orderItemProductId?:boolean,
	token?:boolean,
	used?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_enhancement_tokens_aggregate_fields"],
	nodes?:ValueTypes["vectric_enhancement_tokens"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_enhancement_tokens_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_enhancement_tokens_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_enhancement_tokens_max_fields"],
	min?:ValueTypes["vectric_enhancement_tokens_min_fields"],
	stddev?:ValueTypes["vectric_enhancement_tokens_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_enhancement_tokens_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_enhancement_tokens_stddev_samp_fields"],
	sum?:ValueTypes["vectric_enhancement_tokens_sum_fields"],
	var_pop?:ValueTypes["vectric_enhancement_tokens_var_pop_fields"],
	var_samp?:ValueTypes["vectric_enhancement_tokens_var_samp_fields"],
	variance?:ValueTypes["vectric_enhancement_tokens_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_enhancement_tokens_avg_fields"]: AliasType<{
	customerId?:boolean,
	enhancementEligibilityId?:boolean,
	enhancementOrderItemProductId?:boolean,
	orderItemProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_enhancement_tokens_max_fields"]: AliasType<{
	customerId?:boolean,
	dateCreated?:boolean,
	dateUsed?:boolean,
	enhancementEligibilityId?:boolean,
	enhancementOrderItemProductId?:boolean,
	orderItemProductId?:boolean,
	token?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_enhancement_tokens_min_fields"]: AliasType<{
	customerId?:boolean,
	dateCreated?:boolean,
	dateUsed?:boolean,
	enhancementEligibilityId?:boolean,
	enhancementOrderItemProductId?:boolean,
	orderItemProductId?:boolean,
	token?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_enhancement_tokens"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_enhancement_tokens_stddev_fields"]: AliasType<{
	customerId?:boolean,
	enhancementEligibilityId?:boolean,
	enhancementOrderItemProductId?:boolean,
	orderItemProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_enhancement_tokens_stddev_pop_fields"]: AliasType<{
	customerId?:boolean,
	enhancementEligibilityId?:boolean,
	enhancementOrderItemProductId?:boolean,
	orderItemProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_enhancement_tokens_stddev_samp_fields"]: AliasType<{
	customerId?:boolean,
	enhancementEligibilityId?:boolean,
	enhancementOrderItemProductId?:boolean,
	orderItemProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_enhancement_tokens_sum_fields"]: AliasType<{
	customerId?:boolean,
	enhancementEligibilityId?:boolean,
	enhancementOrderItemProductId?:boolean,
	orderItemProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_enhancement_tokens_var_pop_fields"]: AliasType<{
	customerId?:boolean,
	enhancementEligibilityId?:boolean,
	enhancementOrderItemProductId?:boolean,
	orderItemProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_enhancement_tokens_var_samp_fields"]: AliasType<{
	customerId?:boolean,
	enhancementEligibilityId?:boolean,
	enhancementOrderItemProductId?:boolean,
	orderItemProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_enhancement_tokens_variance_fields"]: AliasType<{
	customerId?:boolean,
	enhancementEligibilityId?:boolean,
	enhancementOrderItemProductId?:boolean,
	orderItemProductId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view"]: AliasType<{
	displayVersion?:boolean,
	entitled_product_id?:boolean,
	latest?:boolean,
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	notifying?:boolean,
	patchUrl?:boolean,
	releaseDate?:boolean,
	url?:boolean,
	versionCodeId?:boolean,
	visible?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_entitled_product_version_code_view_aggregate_fields"],
	nodes?:ValueTypes["vectric_entitled_product_version_code_view"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_entitled_product_version_code_view_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_entitled_product_version_code_view_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_entitled_product_version_code_view_max_fields"],
	min?:ValueTypes["vectric_entitled_product_version_code_view_min_fields"],
	stddev?:ValueTypes["vectric_entitled_product_version_code_view_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_entitled_product_version_code_view_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_entitled_product_version_code_view_stddev_samp_fields"],
	sum?:ValueTypes["vectric_entitled_product_version_code_view_sum_fields"],
	var_pop?:ValueTypes["vectric_entitled_product_version_code_view_var_pop_fields"],
	var_samp?:ValueTypes["vectric_entitled_product_version_code_view_var_samp_fields"],
	variance?:ValueTypes["vectric_entitled_product_version_code_view_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_entitled_product_version_code_view_avg_fields"]: AliasType<{
	entitled_product_id?:boolean,
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	versionCodeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_entitled_product_version_code_view_max_fields"]: AliasType<{
	displayVersion?:boolean,
	entitled_product_id?:boolean,
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	patchUrl?:boolean,
	releaseDate?:boolean,
	url?:boolean,
	versionCodeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_entitled_product_version_code_view_min_fields"]: AliasType<{
	displayVersion?:boolean,
	entitled_product_id?:boolean,
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	patchUrl?:boolean,
	releaseDate?:boolean,
	url?:boolean,
	versionCodeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_entitled_product_version_code_view_stddev_fields"]: AliasType<{
	entitled_product_id?:boolean,
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	versionCodeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_entitled_product_version_code_view_stddev_pop_fields"]: AliasType<{
	entitled_product_id?:boolean,
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	versionCodeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_entitled_product_version_code_view_stddev_samp_fields"]: AliasType<{
	entitled_product_id?:boolean,
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	versionCodeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_entitled_product_version_code_view_sum_fields"]: AliasType<{
	entitled_product_id?:boolean,
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	versionCodeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_entitled_product_version_code_view_var_pop_fields"]: AliasType<{
	entitled_product_id?:boolean,
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	versionCodeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_entitled_product_version_code_view_var_samp_fields"]: AliasType<{
	entitled_product_id?:boolean,
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	versionCodeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_entitled_product_version_code_view_variance_fields"]: AliasType<{
	entitled_product_id?:boolean,
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	versionCodeId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.entitled_products" */
["vectric_entitled_products"]: AliasType<{
	enabled?:boolean,
	/** An object relationship */
	latestVersion?:ValueTypes["vectric_products_versioncodes"],
	latestVersionId?:boolean,
	licenceType?:boolean,
	productId?:boolean,
	productName?:boolean,
	/** An object relationship */
	productType?:ValueTypes["vectric_products_producttype"],
	productTypeId?:boolean,
	releaseDate?:boolean,
	requiresLicence?:boolean,
versions?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_entitled_product_version_code_view_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_entitled_product_version_code_view_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_entitled_product_version_code_view_bool_exp"] | null},ValueTypes["vectric_entitled_product_version_code_view"]],
versions_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_entitled_product_version_code_view_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_entitled_product_version_code_view_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_entitled_product_version_code_view_bool_exp"] | null},ValueTypes["vectric_entitled_product_version_code_view_aggregate"]],
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.entitled_products" */
["vectric_entitled_products_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_entitled_products_aggregate_fields"],
	nodes?:ValueTypes["vectric_entitled_products"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.entitled_products" */
["vectric_entitled_products_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_entitled_products_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_entitled_products_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_entitled_products_max_fields"],
	min?:ValueTypes["vectric_entitled_products_min_fields"],
	stddev?:ValueTypes["vectric_entitled_products_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_entitled_products_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_entitled_products_stddev_samp_fields"],
	sum?:ValueTypes["vectric_entitled_products_sum_fields"],
	var_pop?:ValueTypes["vectric_entitled_products_var_pop_fields"],
	var_samp?:ValueTypes["vectric_entitled_products_var_samp_fields"],
	variance?:ValueTypes["vectric_entitled_products_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_entitled_products_avg_fields"]: AliasType<{
	latestVersionId?:boolean,
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_entitled_products_max_fields"]: AliasType<{
	latestVersionId?:boolean,
	productId?:boolean,
	productName?:boolean,
	productTypeId?:boolean,
	releaseDate?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_entitled_products_min_fields"]: AliasType<{
	latestVersionId?:boolean,
	productId?:boolean,
	productName?:boolean,
	productTypeId?:boolean,
	releaseDate?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.entitled_products" */
["vectric_entitled_products_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_entitled_products"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_entitled_products_stddev_fields"]: AliasType<{
	latestVersionId?:boolean,
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_entitled_products_stddev_pop_fields"]: AliasType<{
	latestVersionId?:boolean,
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_entitled_products_stddev_samp_fields"]: AliasType<{
	latestVersionId?:boolean,
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_entitled_products_sum_fields"]: AliasType<{
	latestVersionId?:boolean,
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_entitled_products_var_pop_fields"]: AliasType<{
	latestVersionId?:boolean,
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_entitled_products_var_samp_fields"]: AliasType<{
	latestVersionId?:boolean,
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_entitled_products_variance_fields"]: AliasType<{
	latestVersionId?:boolean,
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.entitlement_licences" */
["vectric_entitlement_licences"]: AliasType<{
	/** An object relationship */
	entitledProduct?:ValueTypes["vectric_entitled_products"],
	/** An object relationship */
	entitlement?:ValueTypes["vectric_entitlements"],
	entitlementId?:boolean,
	entitlementLicenceId?:boolean,
	licenceCode?:boolean,
	licenceIdAsDisplay?:boolean,
	licenceType?:boolean,
	productId?:boolean,
	registeredUsername?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.entitlement_licences" */
["vectric_entitlement_licences_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_entitlement_licences_aggregate_fields"],
	nodes?:ValueTypes["vectric_entitlement_licences"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.entitlement_licences" */
["vectric_entitlement_licences_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_entitlement_licences_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_entitlement_licences_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_entitlement_licences_max_fields"],
	min?:ValueTypes["vectric_entitlement_licences_min_fields"],
	stddev?:ValueTypes["vectric_entitlement_licences_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_entitlement_licences_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_entitlement_licences_stddev_samp_fields"],
	sum?:ValueTypes["vectric_entitlement_licences_sum_fields"],
	var_pop?:ValueTypes["vectric_entitlement_licences_var_pop_fields"],
	var_samp?:ValueTypes["vectric_entitlement_licences_var_samp_fields"],
	variance?:ValueTypes["vectric_entitlement_licences_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_entitlement_licences_avg_fields"]: AliasType<{
	entitlementId?:boolean,
	entitlementLicenceId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_entitlement_licences_max_fields"]: AliasType<{
	entitlementId?:boolean,
	entitlementLicenceId?:boolean,
	licenceCode?:boolean,
	licenceType?:boolean,
	productId?:boolean,
	registeredUsername?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_entitlement_licences_min_fields"]: AliasType<{
	entitlementId?:boolean,
	entitlementLicenceId?:boolean,
	licenceCode?:boolean,
	licenceType?:boolean,
	productId?:boolean,
	registeredUsername?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.entitlement_licences" */
["vectric_entitlement_licences_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_entitlement_licences"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_entitlement_licences_stddev_fields"]: AliasType<{
	entitlementId?:boolean,
	entitlementLicenceId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_entitlement_licences_stddev_pop_fields"]: AliasType<{
	entitlementId?:boolean,
	entitlementLicenceId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_entitlement_licences_stddev_samp_fields"]: AliasType<{
	entitlementId?:boolean,
	entitlementLicenceId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_entitlement_licences_sum_fields"]: AliasType<{
	entitlementId?:boolean,
	entitlementLicenceId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_entitlement_licences_var_pop_fields"]: AliasType<{
	entitlementId?:boolean,
	entitlementLicenceId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_entitlement_licences_var_samp_fields"]: AliasType<{
	entitlementId?:boolean,
	entitlementLicenceId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_entitlement_licences_variance_fields"]: AliasType<{
	entitlementId?:boolean,
	entitlementLicenceId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.entitlements" */
["vectric_entitlements"]: AliasType<{
	amendedBy?:boolean,
	createdBy?:boolean,
	dateAmended?:boolean,
	dateCreated?:boolean,
	/** An object relationship */
	entitledProduct?:ValueTypes["vectric_entitled_products"],
	entitledProductId?:boolean,
	entitlementId?:boolean,
	/** An object relationship */
	licence?:ValueTypes["vectric_entitlement_licences"],
	/** An object relationship */
	ownedItem?:ValueTypes["vectric_owned_items"],
	ownedItemId?:boolean,
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.entitlements" */
["vectric_entitlements_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_entitlements_aggregate_fields"],
	nodes?:ValueTypes["vectric_entitlements"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.entitlements" */
["vectric_entitlements_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_entitlements_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_entitlements_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_entitlements_max_fields"],
	min?:ValueTypes["vectric_entitlements_min_fields"],
	stddev?:ValueTypes["vectric_entitlements_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_entitlements_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_entitlements_stddev_samp_fields"],
	sum?:ValueTypes["vectric_entitlements_sum_fields"],
	var_pop?:ValueTypes["vectric_entitlements_var_pop_fields"],
	var_samp?:ValueTypes["vectric_entitlements_var_samp_fields"],
	variance?:ValueTypes["vectric_entitlements_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_entitlements_avg_fields"]: AliasType<{
	entitledProductId?:boolean,
	entitlementId?:boolean,
	ownedItemId?:boolean,
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_entitlements_max_fields"]: AliasType<{
	amendedBy?:boolean,
	createdBy?:boolean,
	dateAmended?:boolean,
	dateCreated?:boolean,
	entitledProductId?:boolean,
	entitlementId?:boolean,
	ownedItemId?:boolean,
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_entitlements_min_fields"]: AliasType<{
	amendedBy?:boolean,
	createdBy?:boolean,
	dateAmended?:boolean,
	dateCreated?:boolean,
	entitledProductId?:boolean,
	entitlementId?:boolean,
	ownedItemId?:boolean,
	statusId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.entitlements" */
["vectric_entitlements_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_entitlements"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_entitlements_stddev_fields"]: AliasType<{
	entitledProductId?:boolean,
	entitlementId?:boolean,
	ownedItemId?:boolean,
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_entitlements_stddev_pop_fields"]: AliasType<{
	entitledProductId?:boolean,
	entitlementId?:boolean,
	ownedItemId?:boolean,
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_entitlements_stddev_samp_fields"]: AliasType<{
	entitledProductId?:boolean,
	entitlementId?:boolean,
	ownedItemId?:boolean,
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_entitlements_sum_fields"]: AliasType<{
	entitledProductId?:boolean,
	entitlementId?:boolean,
	ownedItemId?:boolean,
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_entitlements_var_pop_fields"]: AliasType<{
	entitledProductId?:boolean,
	entitlementId?:boolean,
	ownedItemId?:boolean,
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_entitlements_var_samp_fields"]: AliasType<{
	entitledProductId?:boolean,
	entitlementId?:boolean,
	ownedItemId?:boolean,
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_entitlements_variance_fields"]: AliasType<{
	entitledProductId?:boolean,
	entitlementId?:boolean,
	ownedItemId?:boolean,
	statusId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens"]: AliasType<{
	clipartToken?:boolean,
	completed?:boolean,
	customerId?:boolean,
	dateAdded?:boolean,
	dateSelected?:boolean,
	/** An object relationship */
	redeemableToken?:ValueTypes["vectric_sales_salesitem_products"],
	redeemableTokenOip?:boolean,
	replacementOip?:boolean,
	/** An object relationship */
	toV10Product?:ValueTypes["vectric_products_products"],
	v10Product?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_free_clipart_tokens_aggregate_fields"],
	nodes?:ValueTypes["vectric_free_clipart_tokens"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_free_clipart_tokens_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_free_clipart_tokens_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_free_clipart_tokens_max_fields"],
	min?:ValueTypes["vectric_free_clipart_tokens_min_fields"],
	stddev?:ValueTypes["vectric_free_clipart_tokens_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_free_clipart_tokens_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_free_clipart_tokens_stddev_samp_fields"],
	sum?:ValueTypes["vectric_free_clipart_tokens_sum_fields"],
	var_pop?:ValueTypes["vectric_free_clipart_tokens_var_pop_fields"],
	var_samp?:ValueTypes["vectric_free_clipart_tokens_var_samp_fields"],
	variance?:ValueTypes["vectric_free_clipart_tokens_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_free_clipart_tokens_avg_fields"]: AliasType<{
	customerId?:boolean,
	redeemableTokenOip?:boolean,
	replacementOip?:boolean,
	v10Product?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_free_clipart_tokens_max_fields"]: AliasType<{
	clipartToken?:boolean,
	customerId?:boolean,
	dateAdded?:boolean,
	dateSelected?:boolean,
	redeemableTokenOip?:boolean,
	replacementOip?:boolean,
	v10Product?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_free_clipart_tokens_min_fields"]: AliasType<{
	clipartToken?:boolean,
	customerId?:boolean,
	dateAdded?:boolean,
	dateSelected?:boolean,
	redeemableTokenOip?:boolean,
	replacementOip?:boolean,
	v10Product?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_free_clipart_tokens"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_free_clipart_tokens_stddev_fields"]: AliasType<{
	customerId?:boolean,
	redeemableTokenOip?:boolean,
	replacementOip?:boolean,
	v10Product?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_free_clipart_tokens_stddev_pop_fields"]: AliasType<{
	customerId?:boolean,
	redeemableTokenOip?:boolean,
	replacementOip?:boolean,
	v10Product?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_free_clipart_tokens_stddev_samp_fields"]: AliasType<{
	customerId?:boolean,
	redeemableTokenOip?:boolean,
	replacementOip?:boolean,
	v10Product?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_free_clipart_tokens_sum_fields"]: AliasType<{
	customerId?:boolean,
	redeemableTokenOip?:boolean,
	replacementOip?:boolean,
	v10Product?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_free_clipart_tokens_var_pop_fields"]: AliasType<{
	customerId?:boolean,
	redeemableTokenOip?:boolean,
	replacementOip?:boolean,
	v10Product?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_free_clipart_tokens_var_samp_fields"]: AliasType<{
	customerId?:boolean,
	redeemableTokenOip?:boolean,
	replacementOip?:boolean,
	v10Product?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_free_clipart_tokens_variance_fields"]: AliasType<{
	customerId?:boolean,
	redeemableTokenOip?:boolean,
	replacementOip?:boolean,
	v10Product?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.freeclipart" */
["vectric_freeclipart"]: AliasType<{
	accessId?:boolean,
	/** An object relationship */
	category?:ValueTypes["vectric_freeclipart_category"],
	categoryId?:boolean,
	freeClipartId?:boolean,
	location?:boolean,
	name?:boolean,
	objectName?:boolean,
	previewImgUrl?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.freeclipart" */
["vectric_freeclipart_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_freeclipart_aggregate_fields"],
	nodes?:ValueTypes["vectric_freeclipart"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.freeclipart" */
["vectric_freeclipart_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_freeclipart_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_freeclipart_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_freeclipart_max_fields"],
	min?:ValueTypes["vectric_freeclipart_min_fields"],
	stddev?:ValueTypes["vectric_freeclipart_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_freeclipart_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_freeclipart_stddev_samp_fields"],
	sum?:ValueTypes["vectric_freeclipart_sum_fields"],
	var_pop?:ValueTypes["vectric_freeclipart_var_pop_fields"],
	var_samp?:ValueTypes["vectric_freeclipart_var_samp_fields"],
	variance?:ValueTypes["vectric_freeclipart_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_freeclipart_avg_fields"]: AliasType<{
	categoryId?:boolean,
	freeClipartId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.freeclipart_category" */
["vectric_freeclipart_category"]: AliasType<{
	categoryId?:boolean,
	name?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.freeclipart_category" */
["vectric_freeclipart_category_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_freeclipart_category_aggregate_fields"],
	nodes?:ValueTypes["vectric_freeclipart_category"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.freeclipart_category" */
["vectric_freeclipart_category_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_freeclipart_category_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_freeclipart_category_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_freeclipart_category_max_fields"],
	min?:ValueTypes["vectric_freeclipart_category_min_fields"],
	stddev?:ValueTypes["vectric_freeclipart_category_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_freeclipart_category_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_freeclipart_category_stddev_samp_fields"],
	sum?:ValueTypes["vectric_freeclipart_category_sum_fields"],
	var_pop?:ValueTypes["vectric_freeclipart_category_var_pop_fields"],
	var_samp?:ValueTypes["vectric_freeclipart_category_var_samp_fields"],
	variance?:ValueTypes["vectric_freeclipart_category_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_freeclipart_category_avg_fields"]: AliasType<{
	categoryId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_freeclipart_category_max_fields"]: AliasType<{
	categoryId?:boolean,
	name?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_freeclipart_category_min_fields"]: AliasType<{
	categoryId?:boolean,
	name?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.freeclipart_category" */
["vectric_freeclipart_category_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_freeclipart_category"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_freeclipart_category_stddev_fields"]: AliasType<{
	categoryId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_freeclipart_category_stddev_pop_fields"]: AliasType<{
	categoryId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_freeclipart_category_stddev_samp_fields"]: AliasType<{
	categoryId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_freeclipart_category_sum_fields"]: AliasType<{
	categoryId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_freeclipart_category_var_pop_fields"]: AliasType<{
	categoryId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_freeclipart_category_var_samp_fields"]: AliasType<{
	categoryId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_freeclipart_category_variance_fields"]: AliasType<{
	categoryId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record"]: AliasType<{
	customerId?:boolean,
	downloadDate?:boolean,
	downloadId?:boolean,
	freeClipartResourceId?:boolean,
	ipAddress?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_freeclipart_download_record_aggregate_fields"],
	nodes?:ValueTypes["vectric_freeclipart_download_record"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_freeclipart_download_record_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_freeclipart_download_record_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_freeclipart_download_record_max_fields"],
	min?:ValueTypes["vectric_freeclipart_download_record_min_fields"],
	stddev?:ValueTypes["vectric_freeclipart_download_record_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_freeclipart_download_record_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_freeclipart_download_record_stddev_samp_fields"],
	sum?:ValueTypes["vectric_freeclipart_download_record_sum_fields"],
	var_pop?:ValueTypes["vectric_freeclipart_download_record_var_pop_fields"],
	var_samp?:ValueTypes["vectric_freeclipart_download_record_var_samp_fields"],
	variance?:ValueTypes["vectric_freeclipart_download_record_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_freeclipart_download_record_avg_fields"]: AliasType<{
	customerId?:boolean,
	downloadId?:boolean,
	freeClipartResourceId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_freeclipart_download_record_max_fields"]: AliasType<{
	customerId?:boolean,
	downloadDate?:boolean,
	downloadId?:boolean,
	freeClipartResourceId?:boolean,
	ipAddress?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_freeclipart_download_record_min_fields"]: AliasType<{
	customerId?:boolean,
	downloadDate?:boolean,
	downloadId?:boolean,
	freeClipartResourceId?:boolean,
	ipAddress?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_freeclipart_download_record"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_freeclipart_download_record_stddev_fields"]: AliasType<{
	customerId?:boolean,
	downloadId?:boolean,
	freeClipartResourceId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_freeclipart_download_record_stddev_pop_fields"]: AliasType<{
	customerId?:boolean,
	downloadId?:boolean,
	freeClipartResourceId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_freeclipart_download_record_stddev_samp_fields"]: AliasType<{
	customerId?:boolean,
	downloadId?:boolean,
	freeClipartResourceId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_freeclipart_download_record_sum_fields"]: AliasType<{
	customerId?:boolean,
	downloadId?:boolean,
	freeClipartResourceId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_freeclipart_download_record_var_pop_fields"]: AliasType<{
	customerId?:boolean,
	downloadId?:boolean,
	freeClipartResourceId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_freeclipart_download_record_var_samp_fields"]: AliasType<{
	customerId?:boolean,
	downloadId?:boolean,
	freeClipartResourceId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_freeclipart_download_record_variance_fields"]: AliasType<{
	customerId?:boolean,
	downloadId?:boolean,
	freeClipartResourceId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_freeclipart_max_fields"]: AliasType<{
	accessId?:boolean,
	categoryId?:boolean,
	freeClipartId?:boolean,
	location?:boolean,
	name?:boolean,
	objectName?:boolean,
	previewImgUrl?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_freeclipart_min_fields"]: AliasType<{
	accessId?:boolean,
	categoryId?:boolean,
	freeClipartId?:boolean,
	location?:boolean,
	name?:boolean,
	objectName?:boolean,
	previewImgUrl?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.freeclipart" */
["vectric_freeclipart_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_freeclipart"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_freeclipart_stddev_fields"]: AliasType<{
	categoryId?:boolean,
	freeClipartId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_freeclipart_stddev_pop_fields"]: AliasType<{
	categoryId?:boolean,
	freeClipartId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_freeclipart_stddev_samp_fields"]: AliasType<{
	categoryId?:boolean,
	freeClipartId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_freeclipart_sum_fields"]: AliasType<{
	categoryId?:boolean,
	freeClipartId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_freeclipart_var_pop_fields"]: AliasType<{
	categoryId?:boolean,
	freeClipartId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_freeclipart_var_samp_fields"]: AliasType<{
	categoryId?:boolean,
	freeClipartId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_freeclipart_variance_fields"]: AliasType<{
	categoryId?:boolean,
	freeClipartId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.group_info" */
["vectric_group_info"]: AliasType<{
	customerid?:boolean,
	group_id?:boolean,
	group_name?:boolean,
	role?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.group_info" */
["vectric_group_info_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_group_info_aggregate_fields"],
	nodes?:ValueTypes["vectric_group_info"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.group_info" */
["vectric_group_info_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_group_info_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_group_info_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_group_info_max_fields"],
	min?:ValueTypes["vectric_group_info_min_fields"],
	stddev?:ValueTypes["vectric_group_info_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_group_info_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_group_info_stddev_samp_fields"],
	sum?:ValueTypes["vectric_group_info_sum_fields"],
	var_pop?:ValueTypes["vectric_group_info_var_pop_fields"],
	var_samp?:ValueTypes["vectric_group_info_var_samp_fields"],
	variance?:ValueTypes["vectric_group_info_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_group_info_avg_fields"]: AliasType<{
	customerid?:boolean,
	group_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_group_info_max_fields"]: AliasType<{
	customerid?:boolean,
	group_id?:boolean,
	group_name?:boolean,
	role?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_group_info_min_fields"]: AliasType<{
	customerid?:boolean,
	group_id?:boolean,
	group_name?:boolean,
	role?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_group_info_stddev_fields"]: AliasType<{
	customerid?:boolean,
	group_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_group_info_stddev_pop_fields"]: AliasType<{
	customerid?:boolean,
	group_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_group_info_stddev_samp_fields"]: AliasType<{
	customerid?:boolean,
	group_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_group_info_sum_fields"]: AliasType<{
	customerid?:boolean,
	group_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_group_info_var_pop_fields"]: AliasType<{
	customerid?:boolean,
	group_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_group_info_var_samp_fields"]: AliasType<{
	customerid?:boolean,
	group_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_group_info_variance_fields"]: AliasType<{
	customerid?:boolean,
	group_id?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.group_roles" */
["vectric_group_roles"]: AliasType<{
	id?:boolean,
	role?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.group_roles" */
["vectric_group_roles_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_group_roles_aggregate_fields"],
	nodes?:ValueTypes["vectric_group_roles"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.group_roles" */
["vectric_group_roles_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_group_roles_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_group_roles_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_group_roles_max_fields"],
	min?:ValueTypes["vectric_group_roles_min_fields"],
	stddev?:ValueTypes["vectric_group_roles_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_group_roles_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_group_roles_stddev_samp_fields"],
	sum?:ValueTypes["vectric_group_roles_sum_fields"],
	var_pop?:ValueTypes["vectric_group_roles_var_pop_fields"],
	var_samp?:ValueTypes["vectric_group_roles_var_samp_fields"],
	variance?:ValueTypes["vectric_group_roles_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_group_roles_avg_fields"]: AliasType<{
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_group_roles_max_fields"]: AliasType<{
	id?:boolean,
	role?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_group_roles_min_fields"]: AliasType<{
	id?:boolean,
	role?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.group_roles" */
["vectric_group_roles_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_group_roles"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_group_roles_stddev_fields"]: AliasType<{
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_group_roles_stddev_pop_fields"]: AliasType<{
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_group_roles_stddev_samp_fields"]: AliasType<{
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_group_roles_sum_fields"]: AliasType<{
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_group_roles_var_pop_fields"]: AliasType<{
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_group_roles_var_samp_fields"]: AliasType<{
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_group_roles_variance_fields"]: AliasType<{
	id?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.group_user_role" */
["vectric_group_user_role"]: AliasType<{
	/** An object relationship */
	customer?:ValueTypes["vectric_sales_customers"],
	customer_id?:boolean,
	/** An object relationship */
	group?:ValueTypes["vectric_groups"],
	group_id?:boolean,
	/** An object relationship */
	role?:ValueTypes["vectric_group_roles"],
	role_id?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.group_user_role" */
["vectric_group_user_role_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_group_user_role_aggregate_fields"],
	nodes?:ValueTypes["vectric_group_user_role"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.group_user_role" */
["vectric_group_user_role_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_group_user_role_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_group_user_role_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_group_user_role_max_fields"],
	min?:ValueTypes["vectric_group_user_role_min_fields"],
	stddev?:ValueTypes["vectric_group_user_role_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_group_user_role_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_group_user_role_stddev_samp_fields"],
	sum?:ValueTypes["vectric_group_user_role_sum_fields"],
	var_pop?:ValueTypes["vectric_group_user_role_var_pop_fields"],
	var_samp?:ValueTypes["vectric_group_user_role_var_samp_fields"],
	variance?:ValueTypes["vectric_group_user_role_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_group_user_role_avg_fields"]: AliasType<{
	customer_id?:boolean,
	group_id?:boolean,
	role_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_group_user_role_max_fields"]: AliasType<{
	customer_id?:boolean,
	group_id?:boolean,
	role_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_group_user_role_min_fields"]: AliasType<{
	customer_id?:boolean,
	group_id?:boolean,
	role_id?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.group_user_role" */
["vectric_group_user_role_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_group_user_role"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_group_user_role_stddev_fields"]: AliasType<{
	customer_id?:boolean,
	group_id?:boolean,
	role_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_group_user_role_stddev_pop_fields"]: AliasType<{
	customer_id?:boolean,
	group_id?:boolean,
	role_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_group_user_role_stddev_samp_fields"]: AliasType<{
	customer_id?:boolean,
	group_id?:boolean,
	role_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_group_user_role_sum_fields"]: AliasType<{
	customer_id?:boolean,
	group_id?:boolean,
	role_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_group_user_role_var_pop_fields"]: AliasType<{
	customer_id?:boolean,
	group_id?:boolean,
	role_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_group_user_role_var_samp_fields"]: AliasType<{
	customer_id?:boolean,
	group_id?:boolean,
	role_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_group_user_role_variance_fields"]: AliasType<{
	customer_id?:boolean,
	group_id?:boolean,
	role_id?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.groups" */
["vectric_groups"]: AliasType<{
	created_at?:boolean,
	group_name?:boolean,
	id?:boolean,
members?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_group_user_role_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_group_user_role_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_group_user_role_bool_exp"] | null},ValueTypes["vectric_group_user_role"]],
members_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_group_user_role_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_group_user_role_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_group_user_role_bool_exp"] | null},ValueTypes["vectric_group_user_role_aggregate"]],
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.groups" */
["vectric_groups_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_groups_aggregate_fields"],
	nodes?:ValueTypes["vectric_groups"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.groups" */
["vectric_groups_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_groups_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_groups_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_groups_max_fields"],
	min?:ValueTypes["vectric_groups_min_fields"],
	stddev?:ValueTypes["vectric_groups_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_groups_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_groups_stddev_samp_fields"],
	sum?:ValueTypes["vectric_groups_sum_fields"],
	var_pop?:ValueTypes["vectric_groups_var_pop_fields"],
	var_samp?:ValueTypes["vectric_groups_var_samp_fields"],
	variance?:ValueTypes["vectric_groups_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_groups_avg_fields"]: AliasType<{
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_groups_max_fields"]: AliasType<{
	created_at?:boolean,
	group_name?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_groups_min_fields"]: AliasType<{
	created_at?:boolean,
	group_name?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.groups" */
["vectric_groups_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_groups"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_groups_stddev_fields"]: AliasType<{
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_groups_stddev_pop_fields"]: AliasType<{
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_groups_stddev_samp_fields"]: AliasType<{
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_groups_sum_fields"]: AliasType<{
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_groups_var_pop_fields"]: AliasType<{
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_groups_var_samp_fields"]: AliasType<{
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_groups_variance_fields"]: AliasType<{
	id?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.language_codes" */
["vectric_language_codes"]: AliasType<{
	name?:boolean,
	/** ISO 639-2 Code */
	threeLetterCode?:boolean,
	/** ISO 639-1 Code */
	twoLetterCode?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.language_codes" */
["vectric_language_codes_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_language_codes_aggregate_fields"],
	nodes?:ValueTypes["vectric_language_codes"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.language_codes" */
["vectric_language_codes_aggregate_fields"]: AliasType<{
count?: [{	columns?:ValueTypes["vectric_language_codes_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_language_codes_max_fields"],
	min?:ValueTypes["vectric_language_codes_min_fields"],
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_language_codes_max_fields"]: AliasType<{
	name?:boolean,
	/** ISO 639-2 Code */
	threeLetterCode?:boolean,
	/** ISO 639-1 Code */
	twoLetterCode?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_language_codes_min_fields"]: AliasType<{
	name?:boolean,
	/** ISO 639-2 Code */
	threeLetterCode?:boolean,
	/** ISO 639-1 Code */
	twoLetterCode?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.language_codes" */
["vectric_language_codes_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_language_codes"],
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.licence_log" */
["vectric_licence_log"]: AliasType<{
	batchId?:boolean,
	createdBy?:boolean,
	dateCreated?:boolean,
	licenceCode?:boolean,
	licenceId?:boolean,
	oemLicenceId?:boolean,
	productName?:boolean,
	registeredUsername?:boolean,
	shortUrlHash?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.licence_log" */
["vectric_licence_log_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_licence_log_aggregate_fields"],
	nodes?:ValueTypes["vectric_licence_log"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.licence_log" */
["vectric_licence_log_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_licence_log_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_licence_log_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_licence_log_max_fields"],
	min?:ValueTypes["vectric_licence_log_min_fields"],
	stddev?:ValueTypes["vectric_licence_log_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_licence_log_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_licence_log_stddev_samp_fields"],
	sum?:ValueTypes["vectric_licence_log_sum_fields"],
	var_pop?:ValueTypes["vectric_licence_log_var_pop_fields"],
	var_samp?:ValueTypes["vectric_licence_log_var_samp_fields"],
	variance?:ValueTypes["vectric_licence_log_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_licence_log_avg_fields"]: AliasType<{
	licenceId?:boolean,
	oemLicenceId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_licence_log_max_fields"]: AliasType<{
	batchId?:boolean,
	createdBy?:boolean,
	dateCreated?:boolean,
	licenceCode?:boolean,
	licenceId?:boolean,
	oemLicenceId?:boolean,
	productName?:boolean,
	registeredUsername?:boolean,
	shortUrlHash?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_licence_log_min_fields"]: AliasType<{
	batchId?:boolean,
	createdBy?:boolean,
	dateCreated?:boolean,
	licenceCode?:boolean,
	licenceId?:boolean,
	oemLicenceId?:boolean,
	productName?:boolean,
	registeredUsername?:boolean,
	shortUrlHash?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.licence_log" */
["vectric_licence_log_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_licence_log"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_licence_log_stddev_fields"]: AliasType<{
	licenceId?:boolean,
	oemLicenceId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_licence_log_stddev_pop_fields"]: AliasType<{
	licenceId?:boolean,
	oemLicenceId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_licence_log_stddev_samp_fields"]: AliasType<{
	licenceId?:boolean,
	oemLicenceId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_licence_log_sum_fields"]: AliasType<{
	licenceId?:boolean,
	oemLicenceId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_licence_log_var_pop_fields"]: AliasType<{
	licenceId?:boolean,
	oemLicenceId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_licence_log_var_samp_fields"]: AliasType<{
	licenceId?:boolean,
	oemLicenceId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_licence_log_variance_fields"]: AliasType<{
	licenceId?:boolean,
	oemLicenceId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.linkshortener_links" */
["vectric_linkshortener_links"]: AliasType<{
	expiryDate?:boolean,
	limitDownloads?:boolean,
	longUrl?:boolean,
	remainingDownloads?:boolean,
	shortUrlHash?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.linkshortener_links" */
["vectric_linkshortener_links_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_linkshortener_links_aggregate_fields"],
	nodes?:ValueTypes["vectric_linkshortener_links"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.linkshortener_links" */
["vectric_linkshortener_links_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_linkshortener_links_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_linkshortener_links_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_linkshortener_links_max_fields"],
	min?:ValueTypes["vectric_linkshortener_links_min_fields"],
	stddev?:ValueTypes["vectric_linkshortener_links_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_linkshortener_links_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_linkshortener_links_stddev_samp_fields"],
	sum?:ValueTypes["vectric_linkshortener_links_sum_fields"],
	var_pop?:ValueTypes["vectric_linkshortener_links_var_pop_fields"],
	var_samp?:ValueTypes["vectric_linkshortener_links_var_samp_fields"],
	variance?:ValueTypes["vectric_linkshortener_links_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_linkshortener_links_avg_fields"]: AliasType<{
	remainingDownloads?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_linkshortener_links_max_fields"]: AliasType<{
	expiryDate?:boolean,
	longUrl?:boolean,
	remainingDownloads?:boolean,
	shortUrlHash?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_linkshortener_links_min_fields"]: AliasType<{
	expiryDate?:boolean,
	longUrl?:boolean,
	remainingDownloads?:boolean,
	shortUrlHash?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.linkshortener_links" */
["vectric_linkshortener_links_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_linkshortener_links"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_linkshortener_links_stddev_fields"]: AliasType<{
	remainingDownloads?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_linkshortener_links_stddev_pop_fields"]: AliasType<{
	remainingDownloads?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_linkshortener_links_stddev_samp_fields"]: AliasType<{
	remainingDownloads?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_linkshortener_links_sum_fields"]: AliasType<{
	remainingDownloads?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_linkshortener_links_var_pop_fields"]: AliasType<{
	remainingDownloads?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_linkshortener_links_var_samp_fields"]: AliasType<{
	remainingDownloads?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_linkshortener_links_variance_fields"]: AliasType<{
	remainingDownloads?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.makerspace_requests" */
["vectric_makerspace_requests"]: AliasType<{
	ipAddress?:boolean,
	licenceCode?:boolean,
	licenceGenerated?:boolean,
	makerspaceDiskId?:boolean,
	makerspaceId?:boolean,
	requestDate?:boolean,
	requestId?:boolean,
	salesItemProductId?:boolean,
	trialDiskId?:boolean,
	trialLayerUuid?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.makerspace_requests" */
["vectric_makerspace_requests_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_makerspace_requests_aggregate_fields"],
	nodes?:ValueTypes["vectric_makerspace_requests"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.makerspace_requests" */
["vectric_makerspace_requests_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_makerspace_requests_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_makerspace_requests_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_makerspace_requests_max_fields"],
	min?:ValueTypes["vectric_makerspace_requests_min_fields"],
	stddev?:ValueTypes["vectric_makerspace_requests_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_makerspace_requests_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_makerspace_requests_stddev_samp_fields"],
	sum?:ValueTypes["vectric_makerspace_requests_sum_fields"],
	var_pop?:ValueTypes["vectric_makerspace_requests_var_pop_fields"],
	var_samp?:ValueTypes["vectric_makerspace_requests_var_samp_fields"],
	variance?:ValueTypes["vectric_makerspace_requests_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_makerspace_requests_avg_fields"]: AliasType<{
	requestId?:boolean,
	salesItemProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_makerspace_requests_max_fields"]: AliasType<{
	ipAddress?:boolean,
	licenceCode?:boolean,
	licenceGenerated?:boolean,
	makerspaceDiskId?:boolean,
	makerspaceId?:boolean,
	requestDate?:boolean,
	requestId?:boolean,
	salesItemProductId?:boolean,
	trialDiskId?:boolean,
	trialLayerUuid?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_makerspace_requests_min_fields"]: AliasType<{
	ipAddress?:boolean,
	licenceCode?:boolean,
	licenceGenerated?:boolean,
	makerspaceDiskId?:boolean,
	makerspaceId?:boolean,
	requestDate?:boolean,
	requestId?:boolean,
	salesItemProductId?:boolean,
	trialDiskId?:boolean,
	trialLayerUuid?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.makerspace_requests" */
["vectric_makerspace_requests_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_makerspace_requests"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_makerspace_requests_stddev_fields"]: AliasType<{
	requestId?:boolean,
	salesItemProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_makerspace_requests_stddev_pop_fields"]: AliasType<{
	requestId?:boolean,
	salesItemProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_makerspace_requests_stddev_samp_fields"]: AliasType<{
	requestId?:boolean,
	salesItemProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_makerspace_requests_sum_fields"]: AliasType<{
	requestId?:boolean,
	salesItemProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_makerspace_requests_var_pop_fields"]: AliasType<{
	requestId?:boolean,
	salesItemProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_makerspace_requests_var_samp_fields"]: AliasType<{
	requestId?:boolean,
	salesItemProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_makerspace_requests_variance_fields"]: AliasType<{
	requestId?:boolean,
	salesItemProductId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.membership_invitation_status" */
["vectric_membership_invitation_status"]: AliasType<{
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_membership_invitation_status_aggregate_fields"],
	nodes?:ValueTypes["vectric_membership_invitation_status"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_aggregate_fields"]: AliasType<{
count?: [{	columns?:ValueTypes["vectric_membership_invitation_status_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_membership_invitation_status_max_fields"],
	min?:ValueTypes["vectric_membership_invitation_status_min_fields"],
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_membership_invitation_status_max_fields"]: AliasType<{
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_membership_invitation_status_min_fields"]: AliasType<{
	status?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_membership_invitation_status"],
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.membership_invitations" */
["vectric_membership_invitations"]: AliasType<{
	dateInvited?:boolean,
	dateProcessed?:boolean,
	email?:boolean,
	invitationId?:boolean,
	invitationStatus?:boolean,
	invitedBy?:boolean,
	/** An object relationship */
	membership?:ValueTypes["vectric_memberships"],
	membershipId?:boolean,
	/** An object relationship */
	organization?:ValueTypes["vectric_organizations"],
	organizationId?:boolean,
	/** An object relationship */
	status?:ValueTypes["vectric_membership_invitation_status"],
	token?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.membership_invitations" */
["vectric_membership_invitations_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_membership_invitations_aggregate_fields"],
	nodes?:ValueTypes["vectric_membership_invitations"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.membership_invitations" */
["vectric_membership_invitations_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_membership_invitations_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_membership_invitations_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_membership_invitations_max_fields"],
	min?:ValueTypes["vectric_membership_invitations_min_fields"],
	stddev?:ValueTypes["vectric_membership_invitations_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_membership_invitations_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_membership_invitations_stddev_samp_fields"],
	sum?:ValueTypes["vectric_membership_invitations_sum_fields"],
	var_pop?:ValueTypes["vectric_membership_invitations_var_pop_fields"],
	var_samp?:ValueTypes["vectric_membership_invitations_var_samp_fields"],
	variance?:ValueTypes["vectric_membership_invitations_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_membership_invitations_avg_fields"]: AliasType<{
	invitationId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_membership_invitations_max_fields"]: AliasType<{
	dateInvited?:boolean,
	dateProcessed?:boolean,
	email?:boolean,
	invitationId?:boolean,
	invitedBy?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
	token?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_membership_invitations_min_fields"]: AliasType<{
	dateInvited?:boolean,
	dateProcessed?:boolean,
	email?:boolean,
	invitationId?:boolean,
	invitedBy?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
	token?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.membership_invitations" */
["vectric_membership_invitations_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_membership_invitations"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_membership_invitations_stddev_fields"]: AliasType<{
	invitationId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_membership_invitations_stddev_pop_fields"]: AliasType<{
	invitationId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_membership_invitations_stddev_samp_fields"]: AliasType<{
	invitationId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_membership_invitations_sum_fields"]: AliasType<{
	invitationId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_membership_invitations_var_pop_fields"]: AliasType<{
	invitationId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_membership_invitations_var_samp_fields"]: AliasType<{
	invitationId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_membership_invitations_variance_fields"]: AliasType<{
	invitationId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.membership_roles" */
["vectric_membership_roles"]: AliasType<{
	role?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.membership_roles" */
["vectric_membership_roles_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_membership_roles_aggregate_fields"],
	nodes?:ValueTypes["vectric_membership_roles"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.membership_roles" */
["vectric_membership_roles_aggregate_fields"]: AliasType<{
count?: [{	columns?:ValueTypes["vectric_membership_roles_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_membership_roles_max_fields"],
	min?:ValueTypes["vectric_membership_roles_min_fields"],
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_membership_roles_max_fields"]: AliasType<{
	role?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_membership_roles_min_fields"]: AliasType<{
	role?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.membership_roles" */
["vectric_membership_roles_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_membership_roles"],
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.membership_status" */
["vectric_membership_status"]: AliasType<{
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.membership_status" */
["vectric_membership_status_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_membership_status_aggregate_fields"],
	nodes?:ValueTypes["vectric_membership_status"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.membership_status" */
["vectric_membership_status_aggregate_fields"]: AliasType<{
count?: [{	columns?:ValueTypes["vectric_membership_status_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_membership_status_max_fields"],
	min?:ValueTypes["vectric_membership_status_min_fields"],
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_membership_status_max_fields"]: AliasType<{
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_membership_status_min_fields"]: AliasType<{
	status?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.membership_status" */
["vectric_membership_status_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_membership_status"],
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.memberships" */
["vectric_memberships"]: AliasType<{
activeMembers?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_active_memberships_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_active_memberships_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_active_memberships_bool_exp"] | null},ValueTypes["vectric_active_memberships"]],
activeMembers_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_active_memberships_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_active_memberships_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_active_memberships_bool_exp"] | null},ValueTypes["vectric_active_memberships_aggregate"]],
	addedBy?:boolean,
	amendedBy?:boolean,
	/** An object relationship */
	customer?:ValueTypes["vectric_sales_customers"],
	customerId?:boolean,
	dateAdded?:boolean,
	dateAmended?:boolean,
	membershipId?:boolean,
membershipInvitations?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_invitations_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_invitations_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_invitations_bool_exp"] | null},ValueTypes["vectric_membership_invitations"]],
membershipInvitations_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_invitations_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_invitations_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_invitations_bool_exp"] | null},ValueTypes["vectric_membership_invitations_aggregate"]],
	/** An object relationship */
	membershipRole?:ValueTypes["vectric_membership_roles"],
	/** An object relationship */
	membershipStatus?:ValueTypes["vectric_membership_status"],
	/** An object relationship */
	organization?:ValueTypes["vectric_organizations"],
	organizationId?:boolean,
	role?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.memberships" */
["vectric_memberships_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_memberships_aggregate_fields"],
	nodes?:ValueTypes["vectric_memberships"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.memberships" */
["vectric_memberships_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_memberships_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_memberships_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_memberships_max_fields"],
	min?:ValueTypes["vectric_memberships_min_fields"],
	stddev?:ValueTypes["vectric_memberships_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_memberships_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_memberships_stddev_samp_fields"],
	sum?:ValueTypes["vectric_memberships_sum_fields"],
	var_pop?:ValueTypes["vectric_memberships_var_pop_fields"],
	var_samp?:ValueTypes["vectric_memberships_var_samp_fields"],
	variance?:ValueTypes["vectric_memberships_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_memberships_avg_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_memberships_max_fields"]: AliasType<{
	addedBy?:boolean,
	amendedBy?:boolean,
	customerId?:boolean,
	dateAdded?:boolean,
	dateAmended?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_memberships_min_fields"]: AliasType<{
	addedBy?:boolean,
	amendedBy?:boolean,
	customerId?:boolean,
	dateAdded?:boolean,
	dateAmended?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.memberships" */
["vectric_memberships_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_memberships"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_memberships_stddev_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_memberships_stddev_pop_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_memberships_stddev_samp_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_memberships_sum_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_memberships_var_pop_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_memberships_var_samp_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_memberships_variance_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.oauth_client_details" */
["vectric_oauth_client_details"]: AliasType<{
	access_token_validity?:boolean,
	additional_information?:boolean,
	authorities?:boolean,
	authorized_grant_types?:boolean,
	autoapprove?:boolean,
	client_id?:boolean,
	client_secret?:boolean,
	refresh_token_validity?:boolean,
	resource_ids?:boolean,
	scope?:boolean,
	web_server_redirect_uri?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.oauth_client_details" */
["vectric_oauth_client_details_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_oauth_client_details_aggregate_fields"],
	nodes?:ValueTypes["vectric_oauth_client_details"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.oauth_client_details" */
["vectric_oauth_client_details_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_oauth_client_details_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_oauth_client_details_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_oauth_client_details_max_fields"],
	min?:ValueTypes["vectric_oauth_client_details_min_fields"],
	stddev?:ValueTypes["vectric_oauth_client_details_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_oauth_client_details_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_oauth_client_details_stddev_samp_fields"],
	sum?:ValueTypes["vectric_oauth_client_details_sum_fields"],
	var_pop?:ValueTypes["vectric_oauth_client_details_var_pop_fields"],
	var_samp?:ValueTypes["vectric_oauth_client_details_var_samp_fields"],
	variance?:ValueTypes["vectric_oauth_client_details_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_oauth_client_details_avg_fields"]: AliasType<{
	access_token_validity?:boolean,
	refresh_token_validity?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_oauth_client_details_max_fields"]: AliasType<{
	access_token_validity?:boolean,
	additional_information?:boolean,
	authorities?:boolean,
	authorized_grant_types?:boolean,
	autoapprove?:boolean,
	client_id?:boolean,
	client_secret?:boolean,
	refresh_token_validity?:boolean,
	resource_ids?:boolean,
	scope?:boolean,
	web_server_redirect_uri?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_oauth_client_details_min_fields"]: AliasType<{
	access_token_validity?:boolean,
	additional_information?:boolean,
	authorities?:boolean,
	authorized_grant_types?:boolean,
	autoapprove?:boolean,
	client_id?:boolean,
	client_secret?:boolean,
	refresh_token_validity?:boolean,
	resource_ids?:boolean,
	scope?:boolean,
	web_server_redirect_uri?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.oauth_client_details" */
["vectric_oauth_client_details_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_oauth_client_details"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_oauth_client_details_stddev_fields"]: AliasType<{
	access_token_validity?:boolean,
	refresh_token_validity?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_oauth_client_details_stddev_pop_fields"]: AliasType<{
	access_token_validity?:boolean,
	refresh_token_validity?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_oauth_client_details_stddev_samp_fields"]: AliasType<{
	access_token_validity?:boolean,
	refresh_token_validity?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_oauth_client_details_sum_fields"]: AliasType<{
	access_token_validity?:boolean,
	refresh_token_validity?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_oauth_client_details_var_pop_fields"]: AliasType<{
	access_token_validity?:boolean,
	refresh_token_validity?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_oauth_client_details_var_samp_fields"]: AliasType<{
	access_token_validity?:boolean,
	refresh_token_validity?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_oauth_client_details_variance_fields"]: AliasType<{
	access_token_validity?:boolean,
	refresh_token_validity?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails"]: AliasType<{
	bundle_id?:boolean,
	date?:boolean,
	email_to?:boolean,
	/** An object relationship */
	oem_customer?:ValueTypes["vectric_sales_customers"],
	oem_customer_id?:boolean,
	/** An object relationship */
	oem_partner?:ValueTypes["vectric_oem_partners"],
	partner_id?:boolean,
	/** An object relationship */
	sales_oem_bundle?:ValueTypes["vectric_sales_oem_bundles"],
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_oem_allocation_emails_aggregate_fields"],
	nodes?:ValueTypes["vectric_oem_allocation_emails"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_oem_allocation_emails_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_oem_allocation_emails_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_oem_allocation_emails_max_fields"],
	min?:ValueTypes["vectric_oem_allocation_emails_min_fields"],
	stddev?:ValueTypes["vectric_oem_allocation_emails_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_oem_allocation_emails_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_oem_allocation_emails_stddev_samp_fields"],
	sum?:ValueTypes["vectric_oem_allocation_emails_sum_fields"],
	var_pop?:ValueTypes["vectric_oem_allocation_emails_var_pop_fields"],
	var_samp?:ValueTypes["vectric_oem_allocation_emails_var_samp_fields"],
	variance?:ValueTypes["vectric_oem_allocation_emails_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_oem_allocation_emails_avg_fields"]: AliasType<{
	oem_customer_id?:boolean,
	partner_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_oem_allocation_emails_max_fields"]: AliasType<{
	bundle_id?:boolean,
	date?:boolean,
	email_to?:boolean,
	oem_customer_id?:boolean,
	partner_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_oem_allocation_emails_min_fields"]: AliasType<{
	bundle_id?:boolean,
	date?:boolean,
	email_to?:boolean,
	oem_customer_id?:boolean,
	partner_id?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_oem_allocation_emails"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_oem_allocation_emails_stddev_fields"]: AliasType<{
	oem_customer_id?:boolean,
	partner_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_oem_allocation_emails_stddev_pop_fields"]: AliasType<{
	oem_customer_id?:boolean,
	partner_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_oem_allocation_emails_stddev_samp_fields"]: AliasType<{
	oem_customer_id?:boolean,
	partner_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_oem_allocation_emails_sum_fields"]: AliasType<{
	oem_customer_id?:boolean,
	partner_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_oem_allocation_emails_var_pop_fields"]: AliasType<{
	oem_customer_id?:boolean,
	partner_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_oem_allocation_emails_var_samp_fields"]: AliasType<{
	oem_customer_id?:boolean,
	partner_id?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_oem_allocation_emails_variance_fields"]: AliasType<{
	oem_customer_id?:boolean,
	partner_id?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.oem_detailed_products" */
["vectric_oem_detailed_products"]: AliasType<{
	id?:boolean,
	oemProductId?:boolean,
	/** An object relationship */
	product?:ValueTypes["vectric_products_products"],
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_oem_detailed_products_aggregate_fields"],
	nodes?:ValueTypes["vectric_oem_detailed_products"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_oem_detailed_products_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_oem_detailed_products_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_oem_detailed_products_max_fields"],
	min?:ValueTypes["vectric_oem_detailed_products_min_fields"],
	stddev?:ValueTypes["vectric_oem_detailed_products_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_oem_detailed_products_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_oem_detailed_products_stddev_samp_fields"],
	sum?:ValueTypes["vectric_oem_detailed_products_sum_fields"],
	var_pop?:ValueTypes["vectric_oem_detailed_products_var_pop_fields"],
	var_samp?:ValueTypes["vectric_oem_detailed_products_var_samp_fields"],
	variance?:ValueTypes["vectric_oem_detailed_products_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_oem_detailed_products_avg_fields"]: AliasType<{
	id?:boolean,
	oemProductId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_oem_detailed_products_max_fields"]: AliasType<{
	id?:boolean,
	oemProductId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_oem_detailed_products_min_fields"]: AliasType<{
	id?:boolean,
	oemProductId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_oem_detailed_products"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_oem_detailed_products_stddev_fields"]: AliasType<{
	id?:boolean,
	oemProductId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_oem_detailed_products_stddev_pop_fields"]: AliasType<{
	id?:boolean,
	oemProductId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_oem_detailed_products_stddev_samp_fields"]: AliasType<{
	id?:boolean,
	oemProductId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_oem_detailed_products_sum_fields"]: AliasType<{
	id?:boolean,
	oemProductId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_oem_detailed_products_var_pop_fields"]: AliasType<{
	id?:boolean,
	oemProductId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_oem_detailed_products_var_samp_fields"]: AliasType<{
	id?:boolean,
	oemProductId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_oem_detailed_products_variance_fields"]: AliasType<{
	id?:boolean,
	oemProductId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.oem_eval_request" */
["vectric_oem_eval_request"]: AliasType<{
	/** An object relationship */
	customer?:ValueTypes["vectric_sales_customers"],
	customerId?:boolean,
	dateProcessed?:boolean,
	dateRequested?:boolean,
	expired?:boolean,
	granted?:boolean,
	/** An object relationship */
	partner?:ValueTypes["vectric_oem_partners"],
	partnerId?:boolean,
	processed?:boolean,
	processedBy?:boolean,
	replacedBy?:boolean,
	/** An object relationship */
	replacementRequest?:ValueTypes["vectric_oem_eval_request"],
	requestId?:boolean,
	requestedBy?:boolean,
	/** An object relationship */
	requester?:ValueTypes["vectric_sales_customers"],
	vloggerId?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.oem_eval_request" */
["vectric_oem_eval_request_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_oem_eval_request_aggregate_fields"],
	nodes?:ValueTypes["vectric_oem_eval_request"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.oem_eval_request" */
["vectric_oem_eval_request_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_oem_eval_request_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_oem_eval_request_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_oem_eval_request_max_fields"],
	min?:ValueTypes["vectric_oem_eval_request_min_fields"],
	stddev?:ValueTypes["vectric_oem_eval_request_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_oem_eval_request_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_oem_eval_request_stddev_samp_fields"],
	sum?:ValueTypes["vectric_oem_eval_request_sum_fields"],
	var_pop?:ValueTypes["vectric_oem_eval_request_var_pop_fields"],
	var_samp?:ValueTypes["vectric_oem_eval_request_var_samp_fields"],
	variance?:ValueTypes["vectric_oem_eval_request_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_oem_eval_request_avg_fields"]: AliasType<{
	customerId?:boolean,
	partnerId?:boolean,
	replacedBy?:boolean,
	requestId?:boolean,
	requestedBy?:boolean,
	vloggerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_oem_eval_request_max_fields"]: AliasType<{
	customerId?:boolean,
	dateProcessed?:boolean,
	dateRequested?:boolean,
	partnerId?:boolean,
	processedBy?:boolean,
	replacedBy?:boolean,
	requestId?:boolean,
	requestedBy?:boolean,
	vloggerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_oem_eval_request_min_fields"]: AliasType<{
	customerId?:boolean,
	dateProcessed?:boolean,
	dateRequested?:boolean,
	partnerId?:boolean,
	processedBy?:boolean,
	replacedBy?:boolean,
	requestId?:boolean,
	requestedBy?:boolean,
	vloggerId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.oem_eval_request" */
["vectric_oem_eval_request_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_oem_eval_request"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_oem_eval_request_stddev_fields"]: AliasType<{
	customerId?:boolean,
	partnerId?:boolean,
	replacedBy?:boolean,
	requestId?:boolean,
	requestedBy?:boolean,
	vloggerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_oem_eval_request_stddev_pop_fields"]: AliasType<{
	customerId?:boolean,
	partnerId?:boolean,
	replacedBy?:boolean,
	requestId?:boolean,
	requestedBy?:boolean,
	vloggerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_oem_eval_request_stddev_samp_fields"]: AliasType<{
	customerId?:boolean,
	partnerId?:boolean,
	replacedBy?:boolean,
	requestId?:boolean,
	requestedBy?:boolean,
	vloggerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_oem_eval_request_sum_fields"]: AliasType<{
	customerId?:boolean,
	partnerId?:boolean,
	replacedBy?:boolean,
	requestId?:boolean,
	requestedBy?:boolean,
	vloggerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_oem_eval_request_var_pop_fields"]: AliasType<{
	customerId?:boolean,
	partnerId?:boolean,
	replacedBy?:boolean,
	requestId?:boolean,
	requestedBy?:boolean,
	vloggerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_oem_eval_request_var_samp_fields"]: AliasType<{
	customerId?:boolean,
	partnerId?:boolean,
	replacedBy?:boolean,
	requestId?:boolean,
	requestedBy?:boolean,
	vloggerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_oem_eval_request_variance_fields"]: AliasType<{
	customerId?:boolean,
	partnerId?:boolean,
	replacedBy?:boolean,
	requestId?:boolean,
	requestedBy?:boolean,
	vloggerId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item"]: AliasType<{
	batchId?:boolean,
	discountValue?:boolean,
itemBundle?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_fastspring_item_bundle_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_fastspring_item_bundle_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_fastspring_item_bundle_bool_exp"] | null},ValueTypes["vectric_oem_fastspring_item_bundle"]],
itemBundle_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_fastspring_item_bundle_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_fastspring_item_bundle_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_fastspring_item_bundle_bool_exp"] | null},ValueTypes["vectric_oem_fastspring_item_bundle_aggregate"]],
	itemId?:boolean,
	/** An object relationship */
	oemProduct?:ValueTypes["vectric_oem_products"],
	oemProductId?:boolean,
	/** An object relationship */
	order?:ValueTypes["vectric_oem_fastspring_order"],
	orderId?:boolean,
	priceTotal?:boolean,
	productName?:boolean,
	quantity?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_oem_fastspring_item_aggregate_fields"],
	nodes?:ValueTypes["vectric_oem_fastspring_item"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_oem_fastspring_item_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_oem_fastspring_item_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_oem_fastspring_item_max_fields"],
	min?:ValueTypes["vectric_oem_fastspring_item_min_fields"],
	stddev?:ValueTypes["vectric_oem_fastspring_item_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_oem_fastspring_item_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_oem_fastspring_item_stddev_samp_fields"],
	sum?:ValueTypes["vectric_oem_fastspring_item_sum_fields"],
	var_pop?:ValueTypes["vectric_oem_fastspring_item_var_pop_fields"],
	var_samp?:ValueTypes["vectric_oem_fastspring_item_var_samp_fields"],
	variance?:ValueTypes["vectric_oem_fastspring_item_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_oem_fastspring_item_avg_fields"]: AliasType<{
	discountValue?:boolean,
	itemId?:boolean,
	oemProductId?:boolean,
	orderId?:boolean,
	priceTotal?:boolean,
	quantity?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle"]: AliasType<{
	/** An object relationship */
	bundle?:ValueTypes["vectric_sales_oem_bundles"],
	bundleId?:boolean,
	/** An object relationship */
	fastspringItem?:ValueTypes["vectric_oem_fastspring_item"],
	fastspringItemId?:boolean,
	itemBundleId?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_oem_fastspring_item_bundle_aggregate_fields"],
	nodes?:ValueTypes["vectric_oem_fastspring_item_bundle"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_oem_fastspring_item_bundle_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_oem_fastspring_item_bundle_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_oem_fastspring_item_bundle_max_fields"],
	min?:ValueTypes["vectric_oem_fastspring_item_bundle_min_fields"],
	stddev?:ValueTypes["vectric_oem_fastspring_item_bundle_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_oem_fastspring_item_bundle_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_oem_fastspring_item_bundle_stddev_samp_fields"],
	sum?:ValueTypes["vectric_oem_fastspring_item_bundle_sum_fields"],
	var_pop?:ValueTypes["vectric_oem_fastspring_item_bundle_var_pop_fields"],
	var_samp?:ValueTypes["vectric_oem_fastspring_item_bundle_var_samp_fields"],
	variance?:ValueTypes["vectric_oem_fastspring_item_bundle_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_oem_fastspring_item_bundle_avg_fields"]: AliasType<{
	fastspringItemId?:boolean,
	itemBundleId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_oem_fastspring_item_bundle_max_fields"]: AliasType<{
	bundleId?:boolean,
	fastspringItemId?:boolean,
	itemBundleId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_oem_fastspring_item_bundle_min_fields"]: AliasType<{
	bundleId?:boolean,
	fastspringItemId?:boolean,
	itemBundleId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_oem_fastspring_item_bundle"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_oem_fastspring_item_bundle_stddev_fields"]: AliasType<{
	fastspringItemId?:boolean,
	itemBundleId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_oem_fastspring_item_bundle_stddev_pop_fields"]: AliasType<{
	fastspringItemId?:boolean,
	itemBundleId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_oem_fastspring_item_bundle_stddev_samp_fields"]: AliasType<{
	fastspringItemId?:boolean,
	itemBundleId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_oem_fastspring_item_bundle_sum_fields"]: AliasType<{
	fastspringItemId?:boolean,
	itemBundleId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_oem_fastspring_item_bundle_var_pop_fields"]: AliasType<{
	fastspringItemId?:boolean,
	itemBundleId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_oem_fastspring_item_bundle_var_samp_fields"]: AliasType<{
	fastspringItemId?:boolean,
	itemBundleId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_oem_fastspring_item_bundle_variance_fields"]: AliasType<{
	fastspringItemId?:boolean,
	itemBundleId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_oem_fastspring_item_max_fields"]: AliasType<{
	batchId?:boolean,
	discountValue?:boolean,
	itemId?:boolean,
	oemProductId?:boolean,
	orderId?:boolean,
	priceTotal?:boolean,
	productName?:boolean,
	quantity?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_oem_fastspring_item_min_fields"]: AliasType<{
	batchId?:boolean,
	discountValue?:boolean,
	itemId?:boolean,
	oemProductId?:boolean,
	orderId?:boolean,
	priceTotal?:boolean,
	productName?:boolean,
	quantity?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_oem_fastspring_item"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_oem_fastspring_item_stddev_fields"]: AliasType<{
	discountValue?:boolean,
	itemId?:boolean,
	oemProductId?:boolean,
	orderId?:boolean,
	priceTotal?:boolean,
	quantity?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_oem_fastspring_item_stddev_pop_fields"]: AliasType<{
	discountValue?:boolean,
	itemId?:boolean,
	oemProductId?:boolean,
	orderId?:boolean,
	priceTotal?:boolean,
	quantity?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_oem_fastspring_item_stddev_samp_fields"]: AliasType<{
	discountValue?:boolean,
	itemId?:boolean,
	oemProductId?:boolean,
	orderId?:boolean,
	priceTotal?:boolean,
	quantity?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_oem_fastspring_item_sum_fields"]: AliasType<{
	discountValue?:boolean,
	itemId?:boolean,
	oemProductId?:boolean,
	orderId?:boolean,
	priceTotal?:boolean,
	quantity?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_oem_fastspring_item_var_pop_fields"]: AliasType<{
	discountValue?:boolean,
	itemId?:boolean,
	oemProductId?:boolean,
	orderId?:boolean,
	priceTotal?:boolean,
	quantity?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_oem_fastspring_item_var_samp_fields"]: AliasType<{
	discountValue?:boolean,
	itemId?:boolean,
	oemProductId?:boolean,
	orderId?:boolean,
	priceTotal?:boolean,
	quantity?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_oem_fastspring_item_variance_fields"]: AliasType<{
	discountValue?:boolean,
	itemId?:boolean,
	oemProductId?:boolean,
	orderId?:boolean,
	priceTotal?:boolean,
	quantity?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order"]: AliasType<{
	actionTaken?:boolean,
	amendedBy?:boolean,
	city?:boolean,
	createdBy?:boolean,
	currency?:boolean,
	customerId?:boolean,
	dateAmended?:boolean,
	dateCreated?:boolean,
	dateProcessed?:boolean,
	fastSpringCustomerId?:boolean,
items?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_fastspring_item_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_fastspring_item_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_fastspring_item_bool_exp"] | null},ValueTypes["vectric_oem_fastspring_item"]],
items_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_fastspring_item_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_fastspring_item_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_fastspring_item_bool_exp"] | null},ValueTypes["vectric_oem_fastspring_item_aggregate"]],
	language?:boolean,
	notes?:boolean,
	orderId?:boolean,
	orderReference?:boolean,
	/** An object relationship */
	partner?:ValueTypes["vectric_oem_partners"],
	partnerId?:boolean,
	postalCode?:boolean,
	processedBy?:boolean,
	region?:boolean,
	route?:boolean,
	subTotal?:boolean,
	tax?:boolean,
	total?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_oem_fastspring_order_aggregate_fields"],
	nodes?:ValueTypes["vectric_oem_fastspring_order"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_oem_fastspring_order_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_oem_fastspring_order_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_oem_fastspring_order_max_fields"],
	min?:ValueTypes["vectric_oem_fastspring_order_min_fields"],
	stddev?:ValueTypes["vectric_oem_fastspring_order_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_oem_fastspring_order_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_oem_fastspring_order_stddev_samp_fields"],
	sum?:ValueTypes["vectric_oem_fastspring_order_sum_fields"],
	var_pop?:ValueTypes["vectric_oem_fastspring_order_var_pop_fields"],
	var_samp?:ValueTypes["vectric_oem_fastspring_order_var_samp_fields"],
	variance?:ValueTypes["vectric_oem_fastspring_order_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_oem_fastspring_order_avg_fields"]: AliasType<{
	actionTaken?:boolean,
	customerId?:boolean,
	fastSpringCustomerId?:boolean,
	orderId?:boolean,
	partnerId?:boolean,
	subTotal?:boolean,
	tax?:boolean,
	total?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_oem_fastspring_order_max_fields"]: AliasType<{
	actionTaken?:boolean,
	amendedBy?:boolean,
	city?:boolean,
	createdBy?:boolean,
	currency?:boolean,
	customerId?:boolean,
	dateAmended?:boolean,
	dateCreated?:boolean,
	dateProcessed?:boolean,
	fastSpringCustomerId?:boolean,
	language?:boolean,
	notes?:boolean,
	orderId?:boolean,
	orderReference?:boolean,
	partnerId?:boolean,
	postalCode?:boolean,
	processedBy?:boolean,
	region?:boolean,
	route?:boolean,
	subTotal?:boolean,
	tax?:boolean,
	total?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_oem_fastspring_order_min_fields"]: AliasType<{
	actionTaken?:boolean,
	amendedBy?:boolean,
	city?:boolean,
	createdBy?:boolean,
	currency?:boolean,
	customerId?:boolean,
	dateAmended?:boolean,
	dateCreated?:boolean,
	dateProcessed?:boolean,
	fastSpringCustomerId?:boolean,
	language?:boolean,
	notes?:boolean,
	orderId?:boolean,
	orderReference?:boolean,
	partnerId?:boolean,
	postalCode?:boolean,
	processedBy?:boolean,
	region?:boolean,
	route?:boolean,
	subTotal?:boolean,
	tax?:boolean,
	total?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_oem_fastspring_order"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_oem_fastspring_order_stddev_fields"]: AliasType<{
	actionTaken?:boolean,
	customerId?:boolean,
	fastSpringCustomerId?:boolean,
	orderId?:boolean,
	partnerId?:boolean,
	subTotal?:boolean,
	tax?:boolean,
	total?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_oem_fastspring_order_stddev_pop_fields"]: AliasType<{
	actionTaken?:boolean,
	customerId?:boolean,
	fastSpringCustomerId?:boolean,
	orderId?:boolean,
	partnerId?:boolean,
	subTotal?:boolean,
	tax?:boolean,
	total?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_oem_fastspring_order_stddev_samp_fields"]: AliasType<{
	actionTaken?:boolean,
	customerId?:boolean,
	fastSpringCustomerId?:boolean,
	orderId?:boolean,
	partnerId?:boolean,
	subTotal?:boolean,
	tax?:boolean,
	total?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_oem_fastspring_order_sum_fields"]: AliasType<{
	actionTaken?:boolean,
	customerId?:boolean,
	fastSpringCustomerId?:boolean,
	orderId?:boolean,
	partnerId?:boolean,
	subTotal?:boolean,
	tax?:boolean,
	total?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_oem_fastspring_order_var_pop_fields"]: AliasType<{
	actionTaken?:boolean,
	customerId?:boolean,
	fastSpringCustomerId?:boolean,
	orderId?:boolean,
	partnerId?:boolean,
	subTotal?:boolean,
	tax?:boolean,
	total?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_oem_fastspring_order_var_samp_fields"]: AliasType<{
	actionTaken?:boolean,
	customerId?:boolean,
	fastSpringCustomerId?:boolean,
	orderId?:boolean,
	partnerId?:boolean,
	subTotal?:boolean,
	tax?:boolean,
	total?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_oem_fastspring_order_variance_fields"]: AliasType<{
	actionTaken?:boolean,
	customerId?:boolean,
	fastSpringCustomerId?:boolean,
	orderId?:boolean,
	partnerId?:boolean,
	subTotal?:boolean,
	tax?:boolean,
	total?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.oem_invite_status" */
["vectric_oem_invite_status"]: AliasType<{
	status?:boolean,
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.oem_invite_status" */
["vectric_oem_invite_status_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_oem_invite_status_aggregate_fields"],
	nodes?:ValueTypes["vectric_oem_invite_status"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.oem_invite_status" */
["vectric_oem_invite_status_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_oem_invite_status_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_oem_invite_status_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_oem_invite_status_max_fields"],
	min?:ValueTypes["vectric_oem_invite_status_min_fields"],
	stddev?:ValueTypes["vectric_oem_invite_status_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_oem_invite_status_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_oem_invite_status_stddev_samp_fields"],
	sum?:ValueTypes["vectric_oem_invite_status_sum_fields"],
	var_pop?:ValueTypes["vectric_oem_invite_status_var_pop_fields"],
	var_samp?:ValueTypes["vectric_oem_invite_status_var_samp_fields"],
	variance?:ValueTypes["vectric_oem_invite_status_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_oem_invite_status_avg_fields"]: AliasType<{
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_oem_invite_status_max_fields"]: AliasType<{
	status?:boolean,
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_oem_invite_status_min_fields"]: AliasType<{
	status?:boolean,
	statusId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.oem_invite_status" */
["vectric_oem_invite_status_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_oem_invite_status"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_oem_invite_status_stddev_fields"]: AliasType<{
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_oem_invite_status_stddev_pop_fields"]: AliasType<{
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_oem_invite_status_stddev_samp_fields"]: AliasType<{
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_oem_invite_status_sum_fields"]: AliasType<{
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_oem_invite_status_var_pop_fields"]: AliasType<{
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_oem_invite_status_var_samp_fields"]: AliasType<{
	statusId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_oem_invite_status_variance_fields"]: AliasType<{
	statusId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type"]: AliasType<{
	allocationTypeId?:boolean,
	typeName?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_oem_licence_allocation_type_aggregate_fields"],
	nodes?:ValueTypes["vectric_oem_licence_allocation_type"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_oem_licence_allocation_type_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_oem_licence_allocation_type_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_oem_licence_allocation_type_max_fields"],
	min?:ValueTypes["vectric_oem_licence_allocation_type_min_fields"],
	stddev?:ValueTypes["vectric_oem_licence_allocation_type_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_oem_licence_allocation_type_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_oem_licence_allocation_type_stddev_samp_fields"],
	sum?:ValueTypes["vectric_oem_licence_allocation_type_sum_fields"],
	var_pop?:ValueTypes["vectric_oem_licence_allocation_type_var_pop_fields"],
	var_samp?:ValueTypes["vectric_oem_licence_allocation_type_var_samp_fields"],
	variance?:ValueTypes["vectric_oem_licence_allocation_type_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_oem_licence_allocation_type_avg_fields"]: AliasType<{
	allocationTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_oem_licence_allocation_type_max_fields"]: AliasType<{
	allocationTypeId?:boolean,
	typeName?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_oem_licence_allocation_type_min_fields"]: AliasType<{
	allocationTypeId?:boolean,
	typeName?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_oem_licence_allocation_type"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_oem_licence_allocation_type_stddev_fields"]: AliasType<{
	allocationTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_oem_licence_allocation_type_stddev_pop_fields"]: AliasType<{
	allocationTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_oem_licence_allocation_type_stddev_samp_fields"]: AliasType<{
	allocationTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_oem_licence_allocation_type_sum_fields"]: AliasType<{
	allocationTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_oem_licence_allocation_type_var_pop_fields"]: AliasType<{
	allocationTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_oem_licence_allocation_type_var_samp_fields"]: AliasType<{
	allocationTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_oem_licence_allocation_type_variance_fields"]: AliasType<{
	allocationTypeId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.oem_partners" */
["vectric_oem_partners"]: AliasType<{
bundles?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_oem_bundles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_oem_bundles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_oem_bundles_bool_exp"] | null},ValueTypes["vectric_sales_oem_bundles"]],
bundles_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_oem_bundles_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_oem_bundles_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_oem_bundles_bool_exp"] | null},ValueTypes["vectric_sales_oem_bundles_aggregate"]],
	codePrefix?:boolean,
	countrycode?:boolean,
	dateOfLastBatch?:boolean,
	displayName?:boolean,
	inactive?:boolean,
	nextIssue?:boolean,
	partnerId?:boolean,
purchaseOptions?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_purchase_options_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_purchase_options_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_purchase_options_bool_exp"] | null},ValueTypes["vectric_oem_purchase_options"]],
purchaseOptions_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_purchase_options_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_purchase_options_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_purchase_options_bool_exp"] | null},ValueTypes["vectric_oem_purchase_options_aggregate"]],
staff?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_staff_customer_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_staff_customer_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_staff_customer_bool_exp"] | null},ValueTypes["vectric_oem_staff_customer"]],
staff_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_staff_customer_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_staff_customer_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_staff_customer_bool_exp"] | null},ValueTypes["vectric_oem_staff_customer_aggregate"]],
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.oem_partners" */
["vectric_oem_partners_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_oem_partners_aggregate_fields"],
	nodes?:ValueTypes["vectric_oem_partners"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.oem_partners" */
["vectric_oem_partners_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_oem_partners_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_oem_partners_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_oem_partners_max_fields"],
	min?:ValueTypes["vectric_oem_partners_min_fields"],
	stddev?:ValueTypes["vectric_oem_partners_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_oem_partners_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_oem_partners_stddev_samp_fields"],
	sum?:ValueTypes["vectric_oem_partners_sum_fields"],
	var_pop?:ValueTypes["vectric_oem_partners_var_pop_fields"],
	var_samp?:ValueTypes["vectric_oem_partners_var_samp_fields"],
	variance?:ValueTypes["vectric_oem_partners_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_oem_partners_avg_fields"]: AliasType<{
	countrycode?:boolean,
	nextIssue?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_oem_partners_max_fields"]: AliasType<{
	codePrefix?:boolean,
	countrycode?:boolean,
	dateOfLastBatch?:boolean,
	displayName?:boolean,
	nextIssue?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_oem_partners_min_fields"]: AliasType<{
	codePrefix?:boolean,
	countrycode?:boolean,
	dateOfLastBatch?:boolean,
	displayName?:boolean,
	nextIssue?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.oem_partners" */
["vectric_oem_partners_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_oem_partners"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_oem_partners_stddev_fields"]: AliasType<{
	countrycode?:boolean,
	nextIssue?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_oem_partners_stddev_pop_fields"]: AliasType<{
	countrycode?:boolean,
	nextIssue?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_oem_partners_stddev_samp_fields"]: AliasType<{
	countrycode?:boolean,
	nextIssue?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_oem_partners_sum_fields"]: AliasType<{
	countrycode?:boolean,
	nextIssue?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_oem_partners_var_pop_fields"]: AliasType<{
	countrycode?:boolean,
	nextIssue?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_oem_partners_var_samp_fields"]: AliasType<{
	countrycode?:boolean,
	nextIssue?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_oem_partners_variance_fields"]: AliasType<{
	countrycode?:boolean,
	nextIssue?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.oem_products" */
["vectric_oem_products"]: AliasType<{
detailedProducts?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_detailed_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_detailed_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_detailed_products_bool_exp"] | null},ValueTypes["vectric_oem_detailed_products"]],
detailedProducts_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_detailed_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_detailed_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_detailed_products_bool_exp"] | null},ValueTypes["vectric_oem_detailed_products_aggregate"]],
	enabled?:boolean,
	oemFastspringId?:boolean,
	oemProductId?:boolean,
	/** An object relationship */
	product?:ValueTypes["vectric_products_products"],
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.oem_products" */
["vectric_oem_products_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_oem_products_aggregate_fields"],
	nodes?:ValueTypes["vectric_oem_products"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.oem_products" */
["vectric_oem_products_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_oem_products_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_oem_products_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_oem_products_max_fields"],
	min?:ValueTypes["vectric_oem_products_min_fields"],
	stddev?:ValueTypes["vectric_oem_products_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_oem_products_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_oem_products_stddev_samp_fields"],
	sum?:ValueTypes["vectric_oem_products_sum_fields"],
	var_pop?:ValueTypes["vectric_oem_products_var_pop_fields"],
	var_samp?:ValueTypes["vectric_oem_products_var_samp_fields"],
	variance?:ValueTypes["vectric_oem_products_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_oem_products_avg_fields"]: AliasType<{
	oemProductId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_oem_products_max_fields"]: AliasType<{
	oemFastspringId?:boolean,
	oemProductId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_oem_products_min_fields"]: AliasType<{
	oemFastspringId?:boolean,
	oemProductId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.oem_products" */
["vectric_oem_products_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_oem_products"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_oem_products_stddev_fields"]: AliasType<{
	oemProductId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_oem_products_stddev_pop_fields"]: AliasType<{
	oemProductId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_oem_products_stddev_samp_fields"]: AliasType<{
	oemProductId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_oem_products_sum_fields"]: AliasType<{
	oemProductId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_oem_products_var_pop_fields"]: AliasType<{
	oemProductId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_oem_products_var_samp_fields"]: AliasType<{
	oemProductId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_oem_products_variance_fields"]: AliasType<{
	oemProductId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.oem_purchase_options" */
["vectric_oem_purchase_options"]: AliasType<{
	emailLicenceDetails?:boolean,
	maxQuantity?:boolean,
	minQuantity?:boolean,
	multipleLicences?:boolean,
	optionId?:boolean,
	/** An object relationship */
	partner?:ValueTypes["vectric_oem_partners"],
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_oem_purchase_options_aggregate_fields"],
	nodes?:ValueTypes["vectric_oem_purchase_options"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_oem_purchase_options_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_oem_purchase_options_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_oem_purchase_options_max_fields"],
	min?:ValueTypes["vectric_oem_purchase_options_min_fields"],
	stddev?:ValueTypes["vectric_oem_purchase_options_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_oem_purchase_options_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_oem_purchase_options_stddev_samp_fields"],
	sum?:ValueTypes["vectric_oem_purchase_options_sum_fields"],
	var_pop?:ValueTypes["vectric_oem_purchase_options_var_pop_fields"],
	var_samp?:ValueTypes["vectric_oem_purchase_options_var_samp_fields"],
	variance?:ValueTypes["vectric_oem_purchase_options_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_oem_purchase_options_avg_fields"]: AliasType<{
	maxQuantity?:boolean,
	minQuantity?:boolean,
	optionId?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_oem_purchase_options_max_fields"]: AliasType<{
	maxQuantity?:boolean,
	minQuantity?:boolean,
	optionId?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_oem_purchase_options_min_fields"]: AliasType<{
	maxQuantity?:boolean,
	minQuantity?:boolean,
	optionId?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_oem_purchase_options"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_oem_purchase_options_stddev_fields"]: AliasType<{
	maxQuantity?:boolean,
	minQuantity?:boolean,
	optionId?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_oem_purchase_options_stddev_pop_fields"]: AliasType<{
	maxQuantity?:boolean,
	minQuantity?:boolean,
	optionId?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_oem_purchase_options_stddev_samp_fields"]: AliasType<{
	maxQuantity?:boolean,
	minQuantity?:boolean,
	optionId?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_oem_purchase_options_sum_fields"]: AliasType<{
	maxQuantity?:boolean,
	minQuantity?:boolean,
	optionId?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_oem_purchase_options_var_pop_fields"]: AliasType<{
	maxQuantity?:boolean,
	minQuantity?:boolean,
	optionId?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_oem_purchase_options_var_samp_fields"]: AliasType<{
	maxQuantity?:boolean,
	minQuantity?:boolean,
	optionId?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_oem_purchase_options_variance_fields"]: AliasType<{
	maxQuantity?:boolean,
	minQuantity?:boolean,
	optionId?:boolean,
	partnerId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.oem_staff_admin_ownership" */
["vectric_oem_staff_admin_ownership"]: AliasType<{
	admin?:boolean,
	adminId?:boolean,
	customerId?:boolean,
	customerName?:boolean,
	dateAccepted?:boolean,
	displayStatus?:boolean,
	email?:boolean,
	partnerId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.oem_staff_admin_ownership" */
["vectric_oem_staff_admin_ownership_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_oem_staff_admin_ownership_aggregate_fields"],
	nodes?:ValueTypes["vectric_oem_staff_admin_ownership"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.oem_staff_admin_ownership" */
["vectric_oem_staff_admin_ownership_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_oem_staff_admin_ownership_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_oem_staff_admin_ownership_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_oem_staff_admin_ownership_max_fields"],
	min?:ValueTypes["vectric_oem_staff_admin_ownership_min_fields"],
	stddev?:ValueTypes["vectric_oem_staff_admin_ownership_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_oem_staff_admin_ownership_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_oem_staff_admin_ownership_stddev_samp_fields"],
	sum?:ValueTypes["vectric_oem_staff_admin_ownership_sum_fields"],
	var_pop?:ValueTypes["vectric_oem_staff_admin_ownership_var_pop_fields"],
	var_samp?:ValueTypes["vectric_oem_staff_admin_ownership_var_samp_fields"],
	variance?:ValueTypes["vectric_oem_staff_admin_ownership_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_oem_staff_admin_ownership_avg_fields"]: AliasType<{
	adminId?:boolean,
	customerId?:boolean,
	partnerId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_oem_staff_admin_ownership_max_fields"]: AliasType<{
	adminId?:boolean,
	customerId?:boolean,
	customerName?:boolean,
	dateAccepted?:boolean,
	displayStatus?:boolean,
	email?:boolean,
	partnerId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_oem_staff_admin_ownership_min_fields"]: AliasType<{
	adminId?:boolean,
	customerId?:boolean,
	customerName?:boolean,
	dateAccepted?:boolean,
	displayStatus?:boolean,
	email?:boolean,
	partnerId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_oem_staff_admin_ownership_stddev_fields"]: AliasType<{
	adminId?:boolean,
	customerId?:boolean,
	partnerId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_oem_staff_admin_ownership_stddev_pop_fields"]: AliasType<{
	adminId?:boolean,
	customerId?:boolean,
	partnerId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_oem_staff_admin_ownership_stddev_samp_fields"]: AliasType<{
	adminId?:boolean,
	customerId?:boolean,
	partnerId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_oem_staff_admin_ownership_sum_fields"]: AliasType<{
	adminId?:boolean,
	customerId?:boolean,
	partnerId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_oem_staff_admin_ownership_var_pop_fields"]: AliasType<{
	adminId?:boolean,
	customerId?:boolean,
	partnerId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_oem_staff_admin_ownership_var_samp_fields"]: AliasType<{
	adminId?:boolean,
	customerId?:boolean,
	partnerId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_oem_staff_admin_ownership_variance_fields"]: AliasType<{
	adminId?:boolean,
	customerId?:boolean,
	partnerId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.oem_staff_customer" */
["vectric_oem_staff_customer"]: AliasType<{
	admin?:boolean,
	/** An object relationship */
	customer?:ValueTypes["vectric_sales_customers"],
	customerId?:boolean,
	dataRequested?:boolean,
	dateAccepted?:boolean,
	dateUpdated?:boolean,
	/** An object relationship */
	inviteStatus?:ValueTypes["vectric_oem_invite_status"],
	/** An object relationship */
	partner?:ValueTypes["vectric_oem_partners"],
	partnerId?:boolean,
	staffId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_oem_staff_customer_aggregate_fields"],
	nodes?:ValueTypes["vectric_oem_staff_customer"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_oem_staff_customer_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_oem_staff_customer_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_oem_staff_customer_max_fields"],
	min?:ValueTypes["vectric_oem_staff_customer_min_fields"],
	stddev?:ValueTypes["vectric_oem_staff_customer_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_oem_staff_customer_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_oem_staff_customer_stddev_samp_fields"],
	sum?:ValueTypes["vectric_oem_staff_customer_sum_fields"],
	var_pop?:ValueTypes["vectric_oem_staff_customer_var_pop_fields"],
	var_samp?:ValueTypes["vectric_oem_staff_customer_var_samp_fields"],
	variance?:ValueTypes["vectric_oem_staff_customer_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_oem_staff_customer_avg_fields"]: AliasType<{
	customerId?:boolean,
	partnerId?:boolean,
	staffId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_oem_staff_customer_max_fields"]: AliasType<{
	customerId?:boolean,
	dataRequested?:boolean,
	dateAccepted?:boolean,
	dateUpdated?:boolean,
	partnerId?:boolean,
	staffId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_oem_staff_customer_min_fields"]: AliasType<{
	customerId?:boolean,
	dataRequested?:boolean,
	dateAccepted?:boolean,
	dateUpdated?:boolean,
	partnerId?:boolean,
	staffId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_oem_staff_customer"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_oem_staff_customer_stddev_fields"]: AliasType<{
	customerId?:boolean,
	partnerId?:boolean,
	staffId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_oem_staff_customer_stddev_pop_fields"]: AliasType<{
	customerId?:boolean,
	partnerId?:boolean,
	staffId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_oem_staff_customer_stddev_samp_fields"]: AliasType<{
	customerId?:boolean,
	partnerId?:boolean,
	staffId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_oem_staff_customer_sum_fields"]: AliasType<{
	customerId?:boolean,
	partnerId?:boolean,
	staffId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_oem_staff_customer_var_pop_fields"]: AliasType<{
	customerId?:boolean,
	partnerId?:boolean,
	staffId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_oem_staff_customer_var_samp_fields"]: AliasType<{
	customerId?:boolean,
	partnerId?:boolean,
	staffId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_oem_staff_customer_variance_fields"]: AliasType<{
	customerId?:boolean,
	partnerId?:boolean,
	staffId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.organization_audit" */
["vectric_organization_audit"]: AliasType<{
	auditDate?:boolean,
	auditId?:boolean,
auditPayload?: [{	/** JSON select path */
	path?:string | null},boolean],
	auditType?:boolean,
	author?:boolean,
	internalChange?:boolean,
	ipAddress?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.organization_audit" */
["vectric_organization_audit_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_organization_audit_aggregate_fields"],
	nodes?:ValueTypes["vectric_organization_audit"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.organization_audit" */
["vectric_organization_audit_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_organization_audit_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_organization_audit_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_organization_audit_max_fields"],
	min?:ValueTypes["vectric_organization_audit_min_fields"],
	stddev?:ValueTypes["vectric_organization_audit_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_organization_audit_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_organization_audit_stddev_samp_fields"],
	sum?:ValueTypes["vectric_organization_audit_sum_fields"],
	var_pop?:ValueTypes["vectric_organization_audit_var_pop_fields"],
	var_samp?:ValueTypes["vectric_organization_audit_var_samp_fields"],
	variance?:ValueTypes["vectric_organization_audit_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_organization_audit_avg_fields"]: AliasType<{
	auditId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_organization_audit_max_fields"]: AliasType<{
	auditDate?:boolean,
	auditId?:boolean,
	auditType?:boolean,
	author?:boolean,
	ipAddress?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_organization_audit_min_fields"]: AliasType<{
	auditDate?:boolean,
	auditId?:boolean,
	auditType?:boolean,
	author?:boolean,
	ipAddress?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.organization_audit" */
["vectric_organization_audit_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_organization_audit"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_organization_audit_stddev_fields"]: AliasType<{
	auditId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_organization_audit_stddev_pop_fields"]: AliasType<{
	auditId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_organization_audit_stddev_samp_fields"]: AliasType<{
	auditId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_organization_audit_sum_fields"]: AliasType<{
	auditId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_organization_audit_var_pop_fields"]: AliasType<{
	auditId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_organization_audit_var_samp_fields"]: AliasType<{
	auditId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_organization_audit_variance_fields"]: AliasType<{
	auditId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.organization_licence_scope" */
["vectric_organization_licence_scope"]: AliasType<{
	scope?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_organization_licence_scope_aggregate_fields"],
	nodes?:ValueTypes["vectric_organization_licence_scope"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_aggregate_fields"]: AliasType<{
count?: [{	columns?:ValueTypes["vectric_organization_licence_scope_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_organization_licence_scope_max_fields"],
	min?:ValueTypes["vectric_organization_licence_scope_min_fields"],
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_organization_licence_scope_max_fields"]: AliasType<{
	scope?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_organization_licence_scope_min_fields"]: AliasType<{
	scope?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_organization_licence_scope"],
		__typename?: boolean
}>;
	/** The view is created for organization admins. Admins should not have access to customer information if the customer has not confirmed their invitation


columns and relationships of "vectric.organization_memberships_admin_access" */
["vectric_organization_memberships_admin_access"]: AliasType<{
	addedBy?:boolean,
	amendedBy?:boolean,
	customerEmail?:boolean,
	customerId?:boolean,
	customerName?:boolean,
	customerRegisteredUsername?:boolean,
	dateAdded?:boolean,
	dateAmended?:boolean,
invitations?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_invitations_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_invitations_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_invitations_bool_exp"] | null},ValueTypes["vectric_membership_invitations"]],
invitations_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_invitations_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_invitations_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_invitations_bool_exp"] | null},ValueTypes["vectric_membership_invitations_aggregate"]],
	membershipId?:boolean,
	membershipRole?:boolean,
	membershipStatus?:boolean,
	/** An object relationship */
	organization?:ValueTypes["vectric_organizations"],
	organizationCountryId?:boolean,
	organizationCountryName?:boolean,
	organizationId?:boolean,
	organizationName?:boolean,
	organizationType?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.organization_memberships_admin_access" */
["vectric_organization_memberships_admin_access_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_organization_memberships_admin_access_aggregate_fields"],
	nodes?:ValueTypes["vectric_organization_memberships_admin_access"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.organization_memberships_admin_access" */
["vectric_organization_memberships_admin_access_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_organization_memberships_admin_access_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_organization_memberships_admin_access_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_organization_memberships_admin_access_max_fields"],
	min?:ValueTypes["vectric_organization_memberships_admin_access_min_fields"],
	stddev?:ValueTypes["vectric_organization_memberships_admin_access_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_organization_memberships_admin_access_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_organization_memberships_admin_access_stddev_samp_fields"],
	sum?:ValueTypes["vectric_organization_memberships_admin_access_sum_fields"],
	var_pop?:ValueTypes["vectric_organization_memberships_admin_access_var_pop_fields"],
	var_samp?:ValueTypes["vectric_organization_memberships_admin_access_var_samp_fields"],
	variance?:ValueTypes["vectric_organization_memberships_admin_access_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_organization_memberships_admin_access_avg_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationCountryId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_organization_memberships_admin_access_max_fields"]: AliasType<{
	addedBy?:boolean,
	amendedBy?:boolean,
	customerEmail?:boolean,
	customerId?:boolean,
	customerName?:boolean,
	customerRegisteredUsername?:boolean,
	dateAdded?:boolean,
	dateAmended?:boolean,
	membershipId?:boolean,
	membershipRole?:boolean,
	membershipStatus?:boolean,
	organizationCountryId?:boolean,
	organizationCountryName?:boolean,
	organizationId?:boolean,
	organizationName?:boolean,
	organizationType?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_organization_memberships_admin_access_min_fields"]: AliasType<{
	addedBy?:boolean,
	amendedBy?:boolean,
	customerEmail?:boolean,
	customerId?:boolean,
	customerName?:boolean,
	customerRegisteredUsername?:boolean,
	dateAdded?:boolean,
	dateAmended?:boolean,
	membershipId?:boolean,
	membershipRole?:boolean,
	membershipStatus?:boolean,
	organizationCountryId?:boolean,
	organizationCountryName?:boolean,
	organizationId?:boolean,
	organizationName?:boolean,
	organizationType?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_organization_memberships_admin_access_stddev_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationCountryId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_organization_memberships_admin_access_stddev_pop_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationCountryId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_organization_memberships_admin_access_stddev_samp_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationCountryId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_organization_memberships_admin_access_sum_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationCountryId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_organization_memberships_admin_access_var_pop_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationCountryId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_organization_memberships_admin_access_var_samp_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationCountryId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_organization_memberships_admin_access_variance_fields"]: AliasType<{
	customerId?:boolean,
	membershipId?:boolean,
	organizationCountryId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.organization_order_items" */
["vectric_organization_order_items"]: AliasType<{
	/** An object relationship */
	order?:ValueTypes["vectric_organization_orders"],
	orderId?:boolean,
	orderItemId?:boolean,
ownedItems?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_owned_items_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_owned_items_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_owned_items_bool_exp"] | null},ValueTypes["vectric_owned_items"]],
ownedItems_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_owned_items_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_owned_items_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_owned_items_bool_exp"] | null},ValueTypes["vectric_owned_items_aggregate"]],
	/** An object relationship */
	saleableProduct?:ValueTypes["vectric_saleable_products"],
	saleableProductId?:boolean,
	subscription?:boolean,
	/** An object relationship */
	subscriptionContract?:ValueTypes["vectric_subscription_contracts"],
subscriptionEvents?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_subscription_events_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_subscription_events_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_subscription_events_bool_exp"] | null},ValueTypes["vectric_subscription_events"]],
subscriptionEvents_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_subscription_events_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_subscription_events_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_subscription_events_bool_exp"] | null},ValueTypes["vectric_subscription_events_aggregate"]],
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.organization_order_items" */
["vectric_organization_order_items_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_organization_order_items_aggregate_fields"],
	nodes?:ValueTypes["vectric_organization_order_items"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.organization_order_items" */
["vectric_organization_order_items_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_organization_order_items_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_organization_order_items_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_organization_order_items_max_fields"],
	min?:ValueTypes["vectric_organization_order_items_min_fields"],
	stddev?:ValueTypes["vectric_organization_order_items_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_organization_order_items_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_organization_order_items_stddev_samp_fields"],
	sum?:ValueTypes["vectric_organization_order_items_sum_fields"],
	var_pop?:ValueTypes["vectric_organization_order_items_var_pop_fields"],
	var_samp?:ValueTypes["vectric_organization_order_items_var_samp_fields"],
	variance?:ValueTypes["vectric_organization_order_items_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_organization_order_items_avg_fields"]: AliasType<{
	orderItemId?:boolean,
	saleableProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_organization_order_items_max_fields"]: AliasType<{
	orderId?:boolean,
	orderItemId?:boolean,
	saleableProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_organization_order_items_min_fields"]: AliasType<{
	orderId?:boolean,
	orderItemId?:boolean,
	saleableProductId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.organization_order_items" */
["vectric_organization_order_items_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_organization_order_items"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_organization_order_items_stddev_fields"]: AliasType<{
	orderItemId?:boolean,
	saleableProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_organization_order_items_stddev_pop_fields"]: AliasType<{
	orderItemId?:boolean,
	saleableProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_organization_order_items_stddev_samp_fields"]: AliasType<{
	orderItemId?:boolean,
	saleableProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_organization_order_items_sum_fields"]: AliasType<{
	orderItemId?:boolean,
	saleableProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_organization_order_items_var_pop_fields"]: AliasType<{
	orderItemId?:boolean,
	saleableProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_organization_order_items_var_samp_fields"]: AliasType<{
	orderItemId?:boolean,
	saleableProductId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_organization_order_items_variance_fields"]: AliasType<{
	orderItemId?:boolean,
	saleableProductId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.organization_orders" */
["vectric_organization_orders"]: AliasType<{
	amendedBy?:boolean,
	createdBy?:boolean,
	dateAmended?:boolean,
	dateCreated?:boolean,
	externalReference?:boolean,
items?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_order_items_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_order_items_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_order_items_bool_exp"] | null},ValueTypes["vectric_organization_order_items"]],
items_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_order_items_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_order_items_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_order_items_bool_exp"] | null},ValueTypes["vectric_organization_order_items_aggregate"]],
	notes?:boolean,
	orderDate?:boolean,
	orderId?:boolean,
	/** An object relationship */
	organization?:ValueTypes["vectric_organizations"],
	organizationId?:boolean,
	/** An object relationship */
	purchaser?:ValueTypes["vectric_sales_customers"],
	purchaserId?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.organization_orders" */
["vectric_organization_orders_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_organization_orders_aggregate_fields"],
	nodes?:ValueTypes["vectric_organization_orders"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.organization_orders" */
["vectric_organization_orders_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_organization_orders_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_organization_orders_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_organization_orders_max_fields"],
	min?:ValueTypes["vectric_organization_orders_min_fields"],
	stddev?:ValueTypes["vectric_organization_orders_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_organization_orders_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_organization_orders_stddev_samp_fields"],
	sum?:ValueTypes["vectric_organization_orders_sum_fields"],
	var_pop?:ValueTypes["vectric_organization_orders_var_pop_fields"],
	var_samp?:ValueTypes["vectric_organization_orders_var_samp_fields"],
	variance?:ValueTypes["vectric_organization_orders_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_organization_orders_avg_fields"]: AliasType<{
	organizationId?:boolean,
	purchaserId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_organization_orders_max_fields"]: AliasType<{
	amendedBy?:boolean,
	createdBy?:boolean,
	dateAmended?:boolean,
	dateCreated?:boolean,
	externalReference?:boolean,
	notes?:boolean,
	orderDate?:boolean,
	orderId?:boolean,
	organizationId?:boolean,
	purchaserId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_organization_orders_min_fields"]: AliasType<{
	amendedBy?:boolean,
	createdBy?:boolean,
	dateAmended?:boolean,
	dateCreated?:boolean,
	externalReference?:boolean,
	notes?:boolean,
	orderDate?:boolean,
	orderId?:boolean,
	organizationId?:boolean,
	purchaserId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.organization_orders" */
["vectric_organization_orders_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_organization_orders"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_organization_orders_stddev_fields"]: AliasType<{
	organizationId?:boolean,
	purchaserId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_organization_orders_stddev_pop_fields"]: AliasType<{
	organizationId?:boolean,
	purchaserId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_organization_orders_stddev_samp_fields"]: AliasType<{
	organizationId?:boolean,
	purchaserId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_organization_orders_sum_fields"]: AliasType<{
	organizationId?:boolean,
	purchaserId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_organization_orders_var_pop_fields"]: AliasType<{
	organizationId?:boolean,
	purchaserId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_organization_orders_var_samp_fields"]: AliasType<{
	organizationId?:boolean,
	purchaserId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_organization_orders_variance_fields"]: AliasType<{
	organizationId?:boolean,
	purchaserId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.organization_types" */
["vectric_organization_types"]: AliasType<{
	type?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.organization_types" */
["vectric_organization_types_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_organization_types_aggregate_fields"],
	nodes?:ValueTypes["vectric_organization_types"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.organization_types" */
["vectric_organization_types_aggregate_fields"]: AliasType<{
count?: [{	columns?:ValueTypes["vectric_organization_types_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_organization_types_max_fields"],
	min?:ValueTypes["vectric_organization_types_min_fields"],
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_organization_types_max_fields"]: AliasType<{
	type?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_organization_types_min_fields"]: AliasType<{
	type?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.organization_types" */
["vectric_organization_types_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_organization_types"],
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.organizations" */
["vectric_organizations"]: AliasType<{
	active?:boolean,
activeMembers?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_active_memberships_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_active_memberships_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_active_memberships_bool_exp"] | null},ValueTypes["vectric_active_memberships"]],
activeMembers_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_active_memberships_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_active_memberships_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_active_memberships_bool_exp"] | null},ValueTypes["vectric_active_memberships_aggregate"]],
	amendedBy?:boolean,
auditLogs?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_audit_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_audit_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_audit_bool_exp"] | null},ValueTypes["vectric_organization_audit"]],
auditLogs_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_organization_audit_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_organization_audit_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_organization_audit_bool_exp"] | null},ValueTypes["vectric_organization_audit_aggregate"]],
	/** An object relationship */
	country?:ValueTypes["vectric_countries"],
	countryId?:boolean,
	createdBy?:boolean,
	dateAmended?:boolean,
	dateCreated?:boolean,
	internalNotes?:boolean,
invitations?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_invitations_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_invitations_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_invitations_bool_exp"] | null},ValueTypes["vectric_membership_invitations"]],
invitations_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_membership_invitations_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_membership_invitations_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_membership_invitations_bool_exp"] | null},ValueTypes["vectric_membership_invitations_aggregate"]],
memberships?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_memberships_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_memberships_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_memberships_bool_exp"] | null},ValueTypes["vectric_memberships"]],
memberships_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_memberships_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_memberships_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_memberships_bool_exp"] | null},ValueTypes["vectric_memberships_aggregate"]],
	organizationId?:boolean,
	organizationName?:boolean,
	/** An object relationship */
	organizationType?:ValueTypes["vectric_organization_types"],
	organizationUUID?:boolean,
	type?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.organizations" */
["vectric_organizations_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_organizations_aggregate_fields"],
	nodes?:ValueTypes["vectric_organizations"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.organizations" */
["vectric_organizations_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_organizations_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_organizations_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_organizations_max_fields"],
	min?:ValueTypes["vectric_organizations_min_fields"],
	stddev?:ValueTypes["vectric_organizations_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_organizations_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_organizations_stddev_samp_fields"],
	sum?:ValueTypes["vectric_organizations_sum_fields"],
	var_pop?:ValueTypes["vectric_organizations_var_pop_fields"],
	var_samp?:ValueTypes["vectric_organizations_var_samp_fields"],
	variance?:ValueTypes["vectric_organizations_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_organizations_avg_fields"]: AliasType<{
	countryId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_organizations_max_fields"]: AliasType<{
	amendedBy?:boolean,
	countryId?:boolean,
	createdBy?:boolean,
	dateAmended?:boolean,
	dateCreated?:boolean,
	internalNotes?:boolean,
	organizationId?:boolean,
	organizationName?:boolean,
	organizationUUID?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_organizations_min_fields"]: AliasType<{
	amendedBy?:boolean,
	countryId?:boolean,
	createdBy?:boolean,
	dateAmended?:boolean,
	dateCreated?:boolean,
	internalNotes?:boolean,
	organizationId?:boolean,
	organizationName?:boolean,
	organizationUUID?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.organizations" */
["vectric_organizations_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_organizations"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_organizations_stddev_fields"]: AliasType<{
	countryId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_organizations_stddev_pop_fields"]: AliasType<{
	countryId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_organizations_stddev_samp_fields"]: AliasType<{
	countryId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_organizations_sum_fields"]: AliasType<{
	countryId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_organizations_var_pop_fields"]: AliasType<{
	countryId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_organizations_var_samp_fields"]: AliasType<{
	countryId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_organizations_variance_fields"]: AliasType<{
	countryId?:boolean,
	organizationId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.owned_item_assignments" */
["vectric_owned_item_assignments"]: AliasType<{
	assignedBy?:boolean,
	assignedTo?:boolean,
	/** An object relationship */
	assignedToMember?:ValueTypes["vectric_memberships"],
	/** An object relationship */
	assignedToMemberAdminAccess?:ValueTypes["vectric_organization_memberships_admin_access"],
	assignment_id?:boolean,
	dateAssigned?:boolean,
	ownedItemId?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_owned_item_assignments_aggregate_fields"],
	nodes?:ValueTypes["vectric_owned_item_assignments"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_owned_item_assignments_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_owned_item_assignments_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_owned_item_assignments_max_fields"],
	min?:ValueTypes["vectric_owned_item_assignments_min_fields"],
	stddev?:ValueTypes["vectric_owned_item_assignments_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_owned_item_assignments_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_owned_item_assignments_stddev_samp_fields"],
	sum?:ValueTypes["vectric_owned_item_assignments_sum_fields"],
	var_pop?:ValueTypes["vectric_owned_item_assignments_var_pop_fields"],
	var_samp?:ValueTypes["vectric_owned_item_assignments_var_samp_fields"],
	variance?:ValueTypes["vectric_owned_item_assignments_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_owned_item_assignments_avg_fields"]: AliasType<{
	assignedTo?:boolean,
	assignment_id?:boolean,
	ownedItemId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_owned_item_assignments_max_fields"]: AliasType<{
	assignedBy?:boolean,
	assignedTo?:boolean,
	assignment_id?:boolean,
	dateAssigned?:boolean,
	ownedItemId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_owned_item_assignments_min_fields"]: AliasType<{
	assignedBy?:boolean,
	assignedTo?:boolean,
	assignment_id?:boolean,
	dateAssigned?:boolean,
	ownedItemId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_owned_item_assignments"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_owned_item_assignments_stddev_fields"]: AliasType<{
	assignedTo?:boolean,
	assignment_id?:boolean,
	ownedItemId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_owned_item_assignments_stddev_pop_fields"]: AliasType<{
	assignedTo?:boolean,
	assignment_id?:boolean,
	ownedItemId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_owned_item_assignments_stddev_samp_fields"]: AliasType<{
	assignedTo?:boolean,
	assignment_id?:boolean,
	ownedItemId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_owned_item_assignments_sum_fields"]: AliasType<{
	assignedTo?:boolean,
	assignment_id?:boolean,
	ownedItemId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_owned_item_assignments_var_pop_fields"]: AliasType<{
	assignedTo?:boolean,
	assignment_id?:boolean,
	ownedItemId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_owned_item_assignments_var_samp_fields"]: AliasType<{
	assignedTo?:boolean,
	assignment_id?:boolean,
	ownedItemId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_owned_item_assignments_variance_fields"]: AliasType<{
	assignedTo?:boolean,
	assignment_id?:boolean,
	ownedItemId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.owned_items" */
["vectric_owned_items"]: AliasType<{
	amendedBy?:boolean,
	/** An object relationship */
	assignment?:ValueTypes["vectric_owned_item_assignments"],
	createdBy?:boolean,
	/** An object relationship */
	customer?:ValueTypes["vectric_sales_customers"],
	customerId?:boolean,
	dateAmended?:boolean,
	dateCreated?:boolean,
entitlements?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_entitlements_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_entitlements_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_entitlements_bool_exp"] | null},ValueTypes["vectric_entitlements"]],
entitlements_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_entitlements_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_entitlements_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_entitlements_bool_exp"] | null},ValueTypes["vectric_entitlements_aggregate"]],
	/** An object relationship */
	licenceScope?:ValueTypes["vectric_organization_licence_scope"],
	notes?:boolean,
	/** An object relationship */
	orderItem?:ValueTypes["vectric_organization_order_items"],
	orderItemId?:boolean,
	/** An object relationship */
	organization?:ValueTypes["vectric_organizations"],
	organizationId?:boolean,
	ownedItemId?:boolean,
	/** An object relationship */
	ownedProduct?:ValueTypes["vectric_owned_products"],
	ownedProductId?:boolean,
	record_date?:boolean,
	scope?:boolean,
	status?:boolean,
	subscription?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.owned_items" */
["vectric_owned_items_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_owned_items_aggregate_fields"],
	nodes?:ValueTypes["vectric_owned_items"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.owned_items" */
["vectric_owned_items_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_owned_items_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_owned_items_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_owned_items_max_fields"],
	min?:ValueTypes["vectric_owned_items_min_fields"],
	stddev?:ValueTypes["vectric_owned_items_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_owned_items_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_owned_items_stddev_samp_fields"],
	sum?:ValueTypes["vectric_owned_items_sum_fields"],
	var_pop?:ValueTypes["vectric_owned_items_var_pop_fields"],
	var_samp?:ValueTypes["vectric_owned_items_var_samp_fields"],
	variance?:ValueTypes["vectric_owned_items_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_owned_items_avg_fields"]: AliasType<{
	customerId?:boolean,
	orderItemId?:boolean,
	organizationId?:boolean,
	ownedItemId?:boolean,
	ownedProductId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_owned_items_max_fields"]: AliasType<{
	amendedBy?:boolean,
	createdBy?:boolean,
	customerId?:boolean,
	dateAmended?:boolean,
	dateCreated?:boolean,
	notes?:boolean,
	orderItemId?:boolean,
	organizationId?:boolean,
	ownedItemId?:boolean,
	ownedProductId?:boolean,
	record_date?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_owned_items_min_fields"]: AliasType<{
	amendedBy?:boolean,
	createdBy?:boolean,
	customerId?:boolean,
	dateAmended?:boolean,
	dateCreated?:boolean,
	notes?:boolean,
	orderItemId?:boolean,
	organizationId?:boolean,
	ownedItemId?:boolean,
	ownedProductId?:boolean,
	record_date?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.owned_items" */
["vectric_owned_items_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_owned_items"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_owned_items_stddev_fields"]: AliasType<{
	customerId?:boolean,
	orderItemId?:boolean,
	organizationId?:boolean,
	ownedItemId?:boolean,
	ownedProductId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_owned_items_stddev_pop_fields"]: AliasType<{
	customerId?:boolean,
	orderItemId?:boolean,
	organizationId?:boolean,
	ownedItemId?:boolean,
	ownedProductId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_owned_items_stddev_samp_fields"]: AliasType<{
	customerId?:boolean,
	orderItemId?:boolean,
	organizationId?:boolean,
	ownedItemId?:boolean,
	ownedProductId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_owned_items_sum_fields"]: AliasType<{
	customerId?:boolean,
	orderItemId?:boolean,
	organizationId?:boolean,
	ownedItemId?:boolean,
	ownedProductId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_owned_items_var_pop_fields"]: AliasType<{
	customerId?:boolean,
	orderItemId?:boolean,
	organizationId?:boolean,
	ownedItemId?:boolean,
	ownedProductId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_owned_items_var_samp_fields"]: AliasType<{
	customerId?:boolean,
	orderItemId?:boolean,
	organizationId?:boolean,
	ownedItemId?:boolean,
	ownedProductId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_owned_items_variance_fields"]: AliasType<{
	customerId?:boolean,
	orderItemId?:boolean,
	organizationId?:boolean,
	ownedItemId?:boolean,
	ownedProductId?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.owned_products" */
["vectric_owned_products"]: AliasType<{
	enabled?:boolean,
	enhancement?:boolean,
	productId?:boolean,
	productName?:boolean,
	/** An object relationship */
	productType?:ValueTypes["vectric_products_producttype"],
	productTypeId?:boolean,
	subscription?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.owned_products" */
["vectric_owned_products_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_owned_products_aggregate_fields"],
	nodes?:ValueTypes["vectric_owned_products"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.owned_products" */
["vectric_owned_products_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_owned_products_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_owned_products_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_owned_products_max_fields"],
	min?:ValueTypes["vectric_owned_products_min_fields"],
	stddev?:ValueTypes["vectric_owned_products_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_owned_products_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_owned_products_stddev_samp_fields"],
	sum?:ValueTypes["vectric_owned_products_sum_fields"],
	var_pop?:ValueTypes["vectric_owned_products_var_pop_fields"],
	var_samp?:ValueTypes["vectric_owned_products_var_samp_fields"],
	variance?:ValueTypes["vectric_owned_products_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_owned_products_avg_fields"]: AliasType<{
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_owned_products_max_fields"]: AliasType<{
	productId?:boolean,
	productName?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_owned_products_min_fields"]: AliasType<{
	productId?:boolean,
	productName?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.owned_products" */
["vectric_owned_products_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_owned_products"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_owned_products_stddev_fields"]: AliasType<{
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_owned_products_stddev_pop_fields"]: AliasType<{
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_owned_products_stddev_samp_fields"]: AliasType<{
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_owned_products_sum_fields"]: AliasType<{
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_owned_products_var_pop_fields"]: AliasType<{
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_owned_products_var_samp_fields"]: AliasType<{
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_owned_products_variance_fields"]: AliasType<{
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links"]: AliasType<{
	clipartChildId?:boolean,
	clipartCollectionLinkId?:boolean,
	clipartParentId?:boolean,
	/** An object relationship */
	collection?:ValueTypes["vectric_products_products"],
	/** An object relationship */
	project?:ValueTypes["vectric_products_products"],
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_products_clipartcollection_links_aggregate_fields"],
	nodes?:ValueTypes["vectric_products_clipartcollection_links"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_products_clipartcollection_links_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_products_clipartcollection_links_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_products_clipartcollection_links_max_fields"],
	min?:ValueTypes["vectric_products_clipartcollection_links_min_fields"],
	stddev?:ValueTypes["vectric_products_clipartcollection_links_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_products_clipartcollection_links_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_products_clipartcollection_links_stddev_samp_fields"],
	sum?:ValueTypes["vectric_products_clipartcollection_links_sum_fields"],
	var_pop?:ValueTypes["vectric_products_clipartcollection_links_var_pop_fields"],
	var_samp?:ValueTypes["vectric_products_clipartcollection_links_var_samp_fields"],
	variance?:ValueTypes["vectric_products_clipartcollection_links_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_products_clipartcollection_links_avg_fields"]: AliasType<{
	clipartChildId?:boolean,
	clipartCollectionLinkId?:boolean,
	clipartParentId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_products_clipartcollection_links_max_fields"]: AliasType<{
	clipartChildId?:boolean,
	clipartCollectionLinkId?:boolean,
	clipartParentId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_products_clipartcollection_links_min_fields"]: AliasType<{
	clipartChildId?:boolean,
	clipartCollectionLinkId?:boolean,
	clipartParentId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_products_clipartcollection_links"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_products_clipartcollection_links_stddev_fields"]: AliasType<{
	clipartChildId?:boolean,
	clipartCollectionLinkId?:boolean,
	clipartParentId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_products_clipartcollection_links_stddev_pop_fields"]: AliasType<{
	clipartChildId?:boolean,
	clipartCollectionLinkId?:boolean,
	clipartParentId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_products_clipartcollection_links_stddev_samp_fields"]: AliasType<{
	clipartChildId?:boolean,
	clipartCollectionLinkId?:boolean,
	clipartParentId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_products_clipartcollection_links_sum_fields"]: AliasType<{
	clipartChildId?:boolean,
	clipartCollectionLinkId?:boolean,
	clipartParentId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_products_clipartcollection_links_var_pop_fields"]: AliasType<{
	clipartChildId?:boolean,
	clipartCollectionLinkId?:boolean,
	clipartParentId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_products_clipartcollection_links_var_samp_fields"]: AliasType<{
	clipartChildId?:boolean,
	clipartCollectionLinkId?:boolean,
	clipartParentId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_products_clipartcollection_links_variance_fields"]: AliasType<{
	clipartChildId?:boolean,
	clipartCollectionLinkId?:boolean,
	clipartParentId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility"]: AliasType<{
	eligibilityId?:boolean,
	fastspringurl?:boolean,
	/** An object relationship */
	fromProduct?:ValueTypes["vectric_products_products"],
	fromproduct?:boolean,
	moreinfolink?:boolean,
	price?:boolean,
	summary?:boolean,
	/** An object relationship */
	toProduct?:ValueTypes["vectric_products_products"],
	toproduct?:boolean,
	visibletocustomers?:boolean,
	visibletostaff?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_products_enhancement_eligibility_aggregate_fields"],
	nodes?:ValueTypes["vectric_products_enhancement_eligibility"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_products_enhancement_eligibility_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_products_enhancement_eligibility_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_products_enhancement_eligibility_max_fields"],
	min?:ValueTypes["vectric_products_enhancement_eligibility_min_fields"],
	stddev?:ValueTypes["vectric_products_enhancement_eligibility_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_products_enhancement_eligibility_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_products_enhancement_eligibility_stddev_samp_fields"],
	sum?:ValueTypes["vectric_products_enhancement_eligibility_sum_fields"],
	var_pop?:ValueTypes["vectric_products_enhancement_eligibility_var_pop_fields"],
	var_samp?:ValueTypes["vectric_products_enhancement_eligibility_var_samp_fields"],
	variance?:ValueTypes["vectric_products_enhancement_eligibility_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_products_enhancement_eligibility_avg_fields"]: AliasType<{
	eligibilityId?:boolean,
	fromproduct?:boolean,
	price?:boolean,
	toproduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_products_enhancement_eligibility_max_fields"]: AliasType<{
	eligibilityId?:boolean,
	fastspringurl?:boolean,
	fromproduct?:boolean,
	moreinfolink?:boolean,
	price?:boolean,
	summary?:boolean,
	toproduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_products_enhancement_eligibility_min_fields"]: AliasType<{
	eligibilityId?:boolean,
	fastspringurl?:boolean,
	fromproduct?:boolean,
	moreinfolink?:boolean,
	price?:boolean,
	summary?:boolean,
	toproduct?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_products_enhancement_eligibility"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_products_enhancement_eligibility_stddev_fields"]: AliasType<{
	eligibilityId?:boolean,
	fromproduct?:boolean,
	price?:boolean,
	toproduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_products_enhancement_eligibility_stddev_pop_fields"]: AliasType<{
	eligibilityId?:boolean,
	fromproduct?:boolean,
	price?:boolean,
	toproduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_products_enhancement_eligibility_stddev_samp_fields"]: AliasType<{
	eligibilityId?:boolean,
	fromproduct?:boolean,
	price?:boolean,
	toproduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_products_enhancement_eligibility_sum_fields"]: AliasType<{
	eligibilityId?:boolean,
	fromproduct?:boolean,
	price?:boolean,
	toproduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_products_enhancement_eligibility_var_pop_fields"]: AliasType<{
	eligibilityId?:boolean,
	fromproduct?:boolean,
	price?:boolean,
	toproduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_products_enhancement_eligibility_var_samp_fields"]: AliasType<{
	eligibilityId?:boolean,
	fromproduct?:boolean,
	price?:boolean,
	toproduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_products_enhancement_eligibility_variance_fields"]: AliasType<{
	eligibilityId?:boolean,
	fromproduct?:boolean,
	price?:boolean,
	toproduct?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.products_freeclipart" */
["vectric_products_freeclipart"]: AliasType<{
	/** An object relationship */
	freeClipart?:ValueTypes["vectric_freeclipart"],
	freeClipartId?:boolean,
	/** An object relationship */
	product?:ValueTypes["vectric_products_products"],
	productFreeClipartId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.products_freeclipart" */
["vectric_products_freeclipart_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_products_freeclipart_aggregate_fields"],
	nodes?:ValueTypes["vectric_products_freeclipart"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.products_freeclipart" */
["vectric_products_freeclipart_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_products_freeclipart_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_products_freeclipart_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_products_freeclipart_max_fields"],
	min?:ValueTypes["vectric_products_freeclipart_min_fields"],
	stddev?:ValueTypes["vectric_products_freeclipart_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_products_freeclipart_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_products_freeclipart_stddev_samp_fields"],
	sum?:ValueTypes["vectric_products_freeclipart_sum_fields"],
	var_pop?:ValueTypes["vectric_products_freeclipart_var_pop_fields"],
	var_samp?:ValueTypes["vectric_products_freeclipart_var_samp_fields"],
	variance?:ValueTypes["vectric_products_freeclipart_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_products_freeclipart_avg_fields"]: AliasType<{
	freeClipartId?:boolean,
	productFreeClipartId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_products_freeclipart_max_fields"]: AliasType<{
	freeClipartId?:boolean,
	productFreeClipartId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_products_freeclipart_min_fields"]: AliasType<{
	freeClipartId?:boolean,
	productFreeClipartId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.products_freeclipart" */
["vectric_products_freeclipart_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_products_freeclipart"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_products_freeclipart_stddev_fields"]: AliasType<{
	freeClipartId?:boolean,
	productFreeClipartId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_products_freeclipart_stddev_pop_fields"]: AliasType<{
	freeClipartId?:boolean,
	productFreeClipartId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_products_freeclipart_stddev_samp_fields"]: AliasType<{
	freeClipartId?:boolean,
	productFreeClipartId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_products_freeclipart_sum_fields"]: AliasType<{
	freeClipartId?:boolean,
	productFreeClipartId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_products_freeclipart_var_pop_fields"]: AliasType<{
	freeClipartId?:boolean,
	productFreeClipartId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_products_freeclipart_var_samp_fields"]: AliasType<{
	freeClipartId?:boolean,
	productFreeClipartId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_products_freeclipart_variance_fields"]: AliasType<{
	freeClipartId?:boolean,
	productFreeClipartId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.products_fulfilments" */
["vectric_products_fulfilments"]: AliasType<{
	description?:boolean,
	downloadSize?:boolean,
	fulfilmentId?:boolean,
	fulfilmentName?:boolean,
	fulfilmenttypeid?:boolean,
	location?:boolean,
	objectName?:boolean,
	/** An object relationship */
	type?:ValueTypes["vectric_products_fulfilmenttypes"],
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.products_fulfilments" */
["vectric_products_fulfilments_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_products_fulfilments_aggregate_fields"],
	nodes?:ValueTypes["vectric_products_fulfilments"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.products_fulfilments" */
["vectric_products_fulfilments_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_products_fulfilments_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_products_fulfilments_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_products_fulfilments_max_fields"],
	min?:ValueTypes["vectric_products_fulfilments_min_fields"],
	stddev?:ValueTypes["vectric_products_fulfilments_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_products_fulfilments_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_products_fulfilments_stddev_samp_fields"],
	sum?:ValueTypes["vectric_products_fulfilments_sum_fields"],
	var_pop?:ValueTypes["vectric_products_fulfilments_var_pop_fields"],
	var_samp?:ValueTypes["vectric_products_fulfilments_var_samp_fields"],
	variance?:ValueTypes["vectric_products_fulfilments_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_products_fulfilments_avg_fields"]: AliasType<{
	fulfilmentId?:boolean,
	fulfilmenttypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_products_fulfilments_max_fields"]: AliasType<{
	description?:boolean,
	downloadSize?:boolean,
	fulfilmentId?:boolean,
	fulfilmentName?:boolean,
	fulfilmenttypeid?:boolean,
	location?:boolean,
	objectName?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_products_fulfilments_min_fields"]: AliasType<{
	description?:boolean,
	downloadSize?:boolean,
	fulfilmentId?:boolean,
	fulfilmentName?:boolean,
	fulfilmenttypeid?:boolean,
	location?:boolean,
	objectName?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.products_fulfilments" */
["vectric_products_fulfilments_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_products_fulfilments"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_products_fulfilments_stddev_fields"]: AliasType<{
	fulfilmentId?:boolean,
	fulfilmenttypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_products_fulfilments_stddev_pop_fields"]: AliasType<{
	fulfilmentId?:boolean,
	fulfilmenttypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_products_fulfilments_stddev_samp_fields"]: AliasType<{
	fulfilmentId?:boolean,
	fulfilmenttypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_products_fulfilments_sum_fields"]: AliasType<{
	fulfilmentId?:boolean,
	fulfilmenttypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_products_fulfilments_var_pop_fields"]: AliasType<{
	fulfilmentId?:boolean,
	fulfilmenttypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_products_fulfilments_var_samp_fields"]: AliasType<{
	fulfilmentId?:boolean,
	fulfilmenttypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_products_fulfilments_variance_fields"]: AliasType<{
	fulfilmentId?:boolean,
	fulfilmenttypeid?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes"]: AliasType<{
	fulfilmenttypeid?:boolean,
	typename?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_products_fulfilmenttypes_aggregate_fields"],
	nodes?:ValueTypes["vectric_products_fulfilmenttypes"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_products_fulfilmenttypes_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_products_fulfilmenttypes_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_products_fulfilmenttypes_max_fields"],
	min?:ValueTypes["vectric_products_fulfilmenttypes_min_fields"],
	stddev?:ValueTypes["vectric_products_fulfilmenttypes_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_products_fulfilmenttypes_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_products_fulfilmenttypes_stddev_samp_fields"],
	sum?:ValueTypes["vectric_products_fulfilmenttypes_sum_fields"],
	var_pop?:ValueTypes["vectric_products_fulfilmenttypes_var_pop_fields"],
	var_samp?:ValueTypes["vectric_products_fulfilmenttypes_var_samp_fields"],
	variance?:ValueTypes["vectric_products_fulfilmenttypes_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_products_fulfilmenttypes_avg_fields"]: AliasType<{
	fulfilmenttypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_products_fulfilmenttypes_max_fields"]: AliasType<{
	fulfilmenttypeid?:boolean,
	typename?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_products_fulfilmenttypes_min_fields"]: AliasType<{
	fulfilmenttypeid?:boolean,
	typename?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_products_fulfilmenttypes"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_products_fulfilmenttypes_stddev_fields"]: AliasType<{
	fulfilmenttypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_products_fulfilmenttypes_stddev_pop_fields"]: AliasType<{
	fulfilmenttypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_products_fulfilmenttypes_stddev_samp_fields"]: AliasType<{
	fulfilmenttypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_products_fulfilmenttypes_sum_fields"]: AliasType<{
	fulfilmenttypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_products_fulfilmenttypes_var_pop_fields"]: AliasType<{
	fulfilmenttypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_products_fulfilmenttypes_var_samp_fields"]: AliasType<{
	fulfilmenttypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_products_fulfilmenttypes_variance_fields"]: AliasType<{
	fulfilmenttypeid?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments"]: AliasType<{
	/** An object relationship */
	fulfilment?:ValueTypes["vectric_products_fulfilments"],
	fulfilmentid?:boolean,
	/** An object relationship */
	product?:ValueTypes["vectric_products_products"],
	productfulfilmentid?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_products_product_fulfilments_aggregate_fields"],
	nodes?:ValueTypes["vectric_products_product_fulfilments"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_products_product_fulfilments_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_products_product_fulfilments_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_products_product_fulfilments_max_fields"],
	min?:ValueTypes["vectric_products_product_fulfilments_min_fields"],
	stddev?:ValueTypes["vectric_products_product_fulfilments_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_products_product_fulfilments_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_products_product_fulfilments_stddev_samp_fields"],
	sum?:ValueTypes["vectric_products_product_fulfilments_sum_fields"],
	var_pop?:ValueTypes["vectric_products_product_fulfilments_var_pop_fields"],
	var_samp?:ValueTypes["vectric_products_product_fulfilments_var_samp_fields"],
	variance?:ValueTypes["vectric_products_product_fulfilments_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_products_product_fulfilments_avg_fields"]: AliasType<{
	fulfilmentid?:boolean,
	productfulfilmentid?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_products_product_fulfilments_max_fields"]: AliasType<{
	fulfilmentid?:boolean,
	productfulfilmentid?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_products_product_fulfilments_min_fields"]: AliasType<{
	fulfilmentid?:boolean,
	productfulfilmentid?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_products_product_fulfilments"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_products_product_fulfilments_stddev_fields"]: AliasType<{
	fulfilmentid?:boolean,
	productfulfilmentid?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_products_product_fulfilments_stddev_pop_fields"]: AliasType<{
	fulfilmentid?:boolean,
	productfulfilmentid?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_products_product_fulfilments_stddev_samp_fields"]: AliasType<{
	fulfilmentid?:boolean,
	productfulfilmentid?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_products_product_fulfilments_sum_fields"]: AliasType<{
	fulfilmentid?:boolean,
	productfulfilmentid?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_products_product_fulfilments_var_pop_fields"]: AliasType<{
	fulfilmentid?:boolean,
	productfulfilmentid?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_products_product_fulfilments_var_samp_fields"]: AliasType<{
	fulfilmentid?:boolean,
	productfulfilmentid?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_products_product_fulfilments_variance_fields"]: AliasType<{
	fulfilmentid?:boolean,
	productfulfilmentid?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.products_product_licence_type" */
["vectric_products_product_licence_type"]: AliasType<{
	type?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_products_product_licence_type_aggregate_fields"],
	nodes?:ValueTypes["vectric_products_product_licence_type"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_aggregate_fields"]: AliasType<{
count?: [{	columns?:ValueTypes["vectric_products_product_licence_type_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_products_product_licence_type_max_fields"],
	min?:ValueTypes["vectric_products_product_licence_type_min_fields"],
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_products_product_licence_type_max_fields"]: AliasType<{
	type?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_products_product_licence_type_min_fields"]: AliasType<{
	type?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_products_product_licence_type"],
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.products_products" */
["vectric_products_products"]: AliasType<{
	enabled?:boolean,
	externalid?:boolean,
	fastspringId?:boolean,
	free?:boolean,
	/** An object relationship */
	latestVersion?:ValueTypes["vectric_products_versioncodes"],
	latestversion?:boolean,
	licenceType?:boolean,
	media?:boolean,
potentialEnhancements?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_enhancement_eligibility_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_enhancement_eligibility_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_enhancement_eligibility_bool_exp"] | null},ValueTypes["vectric_products_enhancement_eligibility"]],
potentialEnhancements_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_enhancement_eligibility_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_enhancement_eligibility_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_enhancement_eligibility_bool_exp"] | null},ValueTypes["vectric_products_enhancement_eligibility_aggregate"]],
potentialUpgrades?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_active_upgrades_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_active_upgrades_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_active_upgrades_bool_exp"] | null},ValueTypes["vectric_active_upgrades"]],
potentialUpgrades_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_active_upgrades_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_active_upgrades_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_active_upgrades_bool_exp"] | null},ValueTypes["vectric_active_upgrades_aggregate"]],
	productID?:boolean,
	productName?:boolean,
	/** An object relationship */
	productType?:ValueTypes["vectric_products_producttype"],
product_fulfilments?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_product_fulfilments_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_product_fulfilments_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_product_fulfilments_bool_exp"] | null},ValueTypes["vectric_products_product_fulfilments"]],
product_fulfilments_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_product_fulfilments_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_product_fulfilments_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_product_fulfilments_bool_exp"] | null},ValueTypes["vectric_products_product_fulfilments_aggregate"]],
	receivesClipart?:boolean,
	releaseDate?:boolean,
	requireslicence?:boolean,
	type?:boolean,
	upgradefromtypeid?:boolean,
versions?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_versioncodes_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_versioncodes_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_versioncodes_bool_exp"] | null},ValueTypes["vectric_products_versioncodes"]],
versions_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_versioncodes_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_versioncodes_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_versioncodes_bool_exp"] | null},ValueTypes["vectric_products_versioncodes_aggregate"]],
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.products_products" */
["vectric_products_products_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_products_products_aggregate_fields"],
	nodes?:ValueTypes["vectric_products_products"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.products_products" */
["vectric_products_products_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_products_products_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_products_products_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_products_products_max_fields"],
	min?:ValueTypes["vectric_products_products_min_fields"],
	stddev?:ValueTypes["vectric_products_products_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_products_products_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_products_products_stddev_samp_fields"],
	sum?:ValueTypes["vectric_products_products_sum_fields"],
	var_pop?:ValueTypes["vectric_products_products_var_pop_fields"],
	var_samp?:ValueTypes["vectric_products_products_var_samp_fields"],
	variance?:ValueTypes["vectric_products_products_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_products_products_avg_fields"]: AliasType<{
	externalid?:boolean,
	latestversion?:boolean,
	productID?:boolean,
	type?:boolean,
	upgradefromtypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_products_products_max_fields"]: AliasType<{
	externalid?:boolean,
	fastspringId?:boolean,
	latestversion?:boolean,
	productID?:boolean,
	productName?:boolean,
	releaseDate?:boolean,
	type?:boolean,
	upgradefromtypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_products_products_min_fields"]: AliasType<{
	externalid?:boolean,
	fastspringId?:boolean,
	latestversion?:boolean,
	productID?:boolean,
	productName?:boolean,
	releaseDate?:boolean,
	type?:boolean,
	upgradefromtypeid?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.products_products" */
["vectric_products_products_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_products_products"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_products_products_stddev_fields"]: AliasType<{
	externalid?:boolean,
	latestversion?:boolean,
	productID?:boolean,
	type?:boolean,
	upgradefromtypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_products_products_stddev_pop_fields"]: AliasType<{
	externalid?:boolean,
	latestversion?:boolean,
	productID?:boolean,
	type?:boolean,
	upgradefromtypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_products_products_stddev_samp_fields"]: AliasType<{
	externalid?:boolean,
	latestversion?:boolean,
	productID?:boolean,
	type?:boolean,
	upgradefromtypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_products_products_sum_fields"]: AliasType<{
	externalid?:boolean,
	latestversion?:boolean,
	productID?:boolean,
	type?:boolean,
	upgradefromtypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_products_products_var_pop_fields"]: AliasType<{
	externalid?:boolean,
	latestversion?:boolean,
	productID?:boolean,
	type?:boolean,
	upgradefromtypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_products_products_var_samp_fields"]: AliasType<{
	externalid?:boolean,
	latestversion?:boolean,
	productID?:boolean,
	type?:boolean,
	upgradefromtypeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_products_products_variance_fields"]: AliasType<{
	externalid?:boolean,
	latestversion?:boolean,
	productID?:boolean,
	type?:boolean,
	upgradefromtypeid?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.products_producttype" */
["vectric_products_producttype"]: AliasType<{
	productTypeId?:boolean,
	productTypeName?:boolean,
products?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_products_bool_exp"] | null},ValueTypes["vectric_products_products"]],
products_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_products_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_products_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_products_products_bool_exp"] | null},ValueTypes["vectric_products_products_aggregate"]],
	seq?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.products_producttype" */
["vectric_products_producttype_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_products_producttype_aggregate_fields"],
	nodes?:ValueTypes["vectric_products_producttype"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.products_producttype" */
["vectric_products_producttype_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_products_producttype_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_products_producttype_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_products_producttype_max_fields"],
	min?:ValueTypes["vectric_products_producttype_min_fields"],
	stddev?:ValueTypes["vectric_products_producttype_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_products_producttype_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_products_producttype_stddev_samp_fields"],
	sum?:ValueTypes["vectric_products_producttype_sum_fields"],
	var_pop?:ValueTypes["vectric_products_producttype_var_pop_fields"],
	var_samp?:ValueTypes["vectric_products_producttype_var_samp_fields"],
	variance?:ValueTypes["vectric_products_producttype_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_products_producttype_avg_fields"]: AliasType<{
	productTypeId?:boolean,
	seq?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_products_producttype_max_fields"]: AliasType<{
	productTypeId?:boolean,
	productTypeName?:boolean,
	seq?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_products_producttype_min_fields"]: AliasType<{
	productTypeId?:boolean,
	productTypeName?:boolean,
	seq?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.products_producttype" */
["vectric_products_producttype_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_products_producttype"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_products_producttype_stddev_fields"]: AliasType<{
	productTypeId?:boolean,
	seq?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_products_producttype_stddev_pop_fields"]: AliasType<{
	productTypeId?:boolean,
	seq?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_products_producttype_stddev_samp_fields"]: AliasType<{
	productTypeId?:boolean,
	seq?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_products_producttype_sum_fields"]: AliasType<{
	productTypeId?:boolean,
	seq?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_products_producttype_var_pop_fields"]: AliasType<{
	productTypeId?:boolean,
	seq?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_products_producttype_var_samp_fields"]: AliasType<{
	productTypeId?:boolean,
	seq?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_products_producttype_variance_fields"]: AliasType<{
	productTypeId?:boolean,
	seq?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility"]: AliasType<{
	eligibilityid?:boolean,
	fastspringproductid?:boolean,
	fastspringurl?:boolean,
	fromtype?:boolean,
	maxmajorversion?:boolean,
	minmajorversion?:boolean,
	price?:boolean,
	/** An object relationship */
	productsUpgradeFromType?:ValueTypes["vectric_products_producttype"],
	/** An object relationship */
	productsUpgradeToProduct?:ValueTypes["vectric_products_products"],
	summary?:boolean,
	toproduct?:boolean,
	updatelink?:boolean,
	visibletocustomers?:boolean,
	visibletostaff?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_products_upgrade_eligibility_aggregate_fields"],
	nodes?:ValueTypes["vectric_products_upgrade_eligibility"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_products_upgrade_eligibility_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_products_upgrade_eligibility_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_products_upgrade_eligibility_max_fields"],
	min?:ValueTypes["vectric_products_upgrade_eligibility_min_fields"],
	stddev?:ValueTypes["vectric_products_upgrade_eligibility_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_products_upgrade_eligibility_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_products_upgrade_eligibility_stddev_samp_fields"],
	sum?:ValueTypes["vectric_products_upgrade_eligibility_sum_fields"],
	var_pop?:ValueTypes["vectric_products_upgrade_eligibility_var_pop_fields"],
	var_samp?:ValueTypes["vectric_products_upgrade_eligibility_var_samp_fields"],
	variance?:ValueTypes["vectric_products_upgrade_eligibility_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_products_upgrade_eligibility_avg_fields"]: AliasType<{
	eligibilityid?:boolean,
	fromtype?:boolean,
	maxmajorversion?:boolean,
	minmajorversion?:boolean,
	price?:boolean,
	toproduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_products_upgrade_eligibility_max_fields"]: AliasType<{
	eligibilityid?:boolean,
	fastspringproductid?:boolean,
	fastspringurl?:boolean,
	fromtype?:boolean,
	maxmajorversion?:boolean,
	minmajorversion?:boolean,
	price?:boolean,
	summary?:boolean,
	toproduct?:boolean,
	updatelink?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_products_upgrade_eligibility_min_fields"]: AliasType<{
	eligibilityid?:boolean,
	fastspringproductid?:boolean,
	fastspringurl?:boolean,
	fromtype?:boolean,
	maxmajorversion?:boolean,
	minmajorversion?:boolean,
	price?:boolean,
	summary?:boolean,
	toproduct?:boolean,
	updatelink?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_products_upgrade_eligibility"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_products_upgrade_eligibility_stddev_fields"]: AliasType<{
	eligibilityid?:boolean,
	fromtype?:boolean,
	maxmajorversion?:boolean,
	minmajorversion?:boolean,
	price?:boolean,
	toproduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_products_upgrade_eligibility_stddev_pop_fields"]: AliasType<{
	eligibilityid?:boolean,
	fromtype?:boolean,
	maxmajorversion?:boolean,
	minmajorversion?:boolean,
	price?:boolean,
	toproduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_products_upgrade_eligibility_stddev_samp_fields"]: AliasType<{
	eligibilityid?:boolean,
	fromtype?:boolean,
	maxmajorversion?:boolean,
	minmajorversion?:boolean,
	price?:boolean,
	toproduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_products_upgrade_eligibility_sum_fields"]: AliasType<{
	eligibilityid?:boolean,
	fromtype?:boolean,
	maxmajorversion?:boolean,
	minmajorversion?:boolean,
	price?:boolean,
	toproduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_products_upgrade_eligibility_var_pop_fields"]: AliasType<{
	eligibilityid?:boolean,
	fromtype?:boolean,
	maxmajorversion?:boolean,
	minmajorversion?:boolean,
	price?:boolean,
	toproduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_products_upgrade_eligibility_var_samp_fields"]: AliasType<{
	eligibilityid?:boolean,
	fromtype?:boolean,
	maxmajorversion?:boolean,
	minmajorversion?:boolean,
	price?:boolean,
	toproduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_products_upgrade_eligibility_variance_fields"]: AliasType<{
	eligibilityid?:boolean,
	fromtype?:boolean,
	maxmajorversion?:boolean,
	minmajorversion?:boolean,
	price?:boolean,
	toproduct?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.products_versioncodes" */
["vectric_products_versioncodes"]: AliasType<{
	displayVersion?:boolean,
	latest?:boolean,
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	notifying?:boolean,
	patchurl?:boolean,
	/** An object relationship */
	product?:ValueTypes["vectric_products_products"],
	productid?:boolean,
	releaseDate?:boolean,
	url?:boolean,
	versioncodeid?:boolean,
	visible?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.products_versioncodes" */
["vectric_products_versioncodes_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_products_versioncodes_aggregate_fields"],
	nodes?:ValueTypes["vectric_products_versioncodes"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.products_versioncodes" */
["vectric_products_versioncodes_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_products_versioncodes_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_products_versioncodes_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_products_versioncodes_max_fields"],
	min?:ValueTypes["vectric_products_versioncodes_min_fields"],
	stddev?:ValueTypes["vectric_products_versioncodes_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_products_versioncodes_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_products_versioncodes_stddev_samp_fields"],
	sum?:ValueTypes["vectric_products_versioncodes_sum_fields"],
	var_pop?:ValueTypes["vectric_products_versioncodes_var_pop_fields"],
	var_samp?:ValueTypes["vectric_products_versioncodes_var_samp_fields"],
	variance?:ValueTypes["vectric_products_versioncodes_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_products_versioncodes_avg_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	productid?:boolean,
	versioncodeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_products_versioncodes_max_fields"]: AliasType<{
	displayVersion?:boolean,
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	patchurl?:boolean,
	productid?:boolean,
	releaseDate?:boolean,
	url?:boolean,
	versioncodeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_products_versioncodes_min_fields"]: AliasType<{
	displayVersion?:boolean,
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	patchurl?:boolean,
	productid?:boolean,
	releaseDate?:boolean,
	url?:boolean,
	versioncodeid?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.products_versioncodes" */
["vectric_products_versioncodes_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_products_versioncodes"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_products_versioncodes_stddev_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	productid?:boolean,
	versioncodeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_products_versioncodes_stddev_pop_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	productid?:boolean,
	versioncodeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_products_versioncodes_stddev_samp_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	productid?:boolean,
	versioncodeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_products_versioncodes_sum_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	productid?:boolean,
	versioncodeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_products_versioncodes_var_pop_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	productid?:boolean,
	versioncodeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_products_versioncodes_var_samp_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	productid?:boolean,
	versioncodeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_products_versioncodes_variance_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	productid?:boolean,
	versioncodeid?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.questions" */
["vectric_questions"]: AliasType<{
customer_responses?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_responses_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_responses_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_responses_bool_exp"] | null},ValueTypes["vectric_customer_responses"]],
customer_responses_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_responses_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_responses_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_responses_bool_exp"] | null},ValueTypes["vectric_customer_responses_aggregate"]],
	multipleanswers?:boolean,
	questionid?:boolean,
	questiontext?:boolean,
responses?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_responses_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_responses_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_responses_bool_exp"] | null},ValueTypes["vectric_responses"]],
responses_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_responses_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_responses_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_responses_bool_exp"] | null},ValueTypes["vectric_responses_aggregate"]],
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.questions" */
["vectric_questions_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_questions_aggregate_fields"],
	nodes?:ValueTypes["vectric_questions"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.questions" */
["vectric_questions_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_questions_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_questions_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_questions_max_fields"],
	min?:ValueTypes["vectric_questions_min_fields"],
	stddev?:ValueTypes["vectric_questions_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_questions_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_questions_stddev_samp_fields"],
	sum?:ValueTypes["vectric_questions_sum_fields"],
	var_pop?:ValueTypes["vectric_questions_var_pop_fields"],
	var_samp?:ValueTypes["vectric_questions_var_samp_fields"],
	variance?:ValueTypes["vectric_questions_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_questions_avg_fields"]: AliasType<{
	questionid?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_questions_max_fields"]: AliasType<{
	questionid?:boolean,
	questiontext?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_questions_min_fields"]: AliasType<{
	questionid?:boolean,
	questiontext?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.questions" */
["vectric_questions_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_questions"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_questions_stddev_fields"]: AliasType<{
	questionid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_questions_stddev_pop_fields"]: AliasType<{
	questionid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_questions_stddev_samp_fields"]: AliasType<{
	questionid?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_questions_sum_fields"]: AliasType<{
	questionid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_questions_var_pop_fields"]: AliasType<{
	questionid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_questions_var_samp_fields"]: AliasType<{
	questionid?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_questions_variance_fields"]: AliasType<{
	questionid?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.responses" */
["vectric_responses"]: AliasType<{
	questionid?:boolean,
	responseid?:boolean,
	responsetext?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.responses" */
["vectric_responses_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_responses_aggregate_fields"],
	nodes?:ValueTypes["vectric_responses"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.responses" */
["vectric_responses_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_responses_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_responses_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_responses_max_fields"],
	min?:ValueTypes["vectric_responses_min_fields"],
	stddev?:ValueTypes["vectric_responses_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_responses_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_responses_stddev_samp_fields"],
	sum?:ValueTypes["vectric_responses_sum_fields"],
	var_pop?:ValueTypes["vectric_responses_var_pop_fields"],
	var_samp?:ValueTypes["vectric_responses_var_samp_fields"],
	variance?:ValueTypes["vectric_responses_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_responses_avg_fields"]: AliasType<{
	questionid?:boolean,
	responseid?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_responses_max_fields"]: AliasType<{
	questionid?:boolean,
	responseid?:boolean,
	responsetext?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_responses_min_fields"]: AliasType<{
	questionid?:boolean,
	responseid?:boolean,
	responsetext?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.responses" */
["vectric_responses_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_responses"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_responses_stddev_fields"]: AliasType<{
	questionid?:boolean,
	responseid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_responses_stddev_pop_fields"]: AliasType<{
	questionid?:boolean,
	responseid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_responses_stddev_samp_fields"]: AliasType<{
	questionid?:boolean,
	responseid?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_responses_sum_fields"]: AliasType<{
	questionid?:boolean,
	responseid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_responses_var_pop_fields"]: AliasType<{
	questionid?:boolean,
	responseid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_responses_var_samp_fields"]: AliasType<{
	questionid?:boolean,
	responseid?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_responses_variance_fields"]: AliasType<{
	questionid?:boolean,
	responseid?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.saleable_products" */
["vectric_saleable_products"]: AliasType<{
	enabled?:boolean,
	fastspringId?:boolean,
	free?:boolean,
	media?:boolean,
	productId?:boolean,
	productName?:boolean,
	productTypeId?:boolean,
	receivesClipart?:boolean,
	subscription?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.saleable_products" */
["vectric_saleable_products_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_saleable_products_aggregate_fields"],
	nodes?:ValueTypes["vectric_saleable_products"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.saleable_products" */
["vectric_saleable_products_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_saleable_products_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_saleable_products_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_saleable_products_max_fields"],
	min?:ValueTypes["vectric_saleable_products_min_fields"],
	stddev?:ValueTypes["vectric_saleable_products_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_saleable_products_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_saleable_products_stddev_samp_fields"],
	sum?:ValueTypes["vectric_saleable_products_sum_fields"],
	var_pop?:ValueTypes["vectric_saleable_products_var_pop_fields"],
	var_samp?:ValueTypes["vectric_saleable_products_var_samp_fields"],
	variance?:ValueTypes["vectric_saleable_products_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_saleable_products_avg_fields"]: AliasType<{
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_saleable_products_max_fields"]: AliasType<{
	fastspringId?:boolean,
	productId?:boolean,
	productName?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_saleable_products_min_fields"]: AliasType<{
	fastspringId?:boolean,
	productId?:boolean,
	productName?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.saleable_products" */
["vectric_saleable_products_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_saleable_products"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_saleable_products_stddev_fields"]: AliasType<{
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_saleable_products_stddev_pop_fields"]: AliasType<{
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_saleable_products_stddev_samp_fields"]: AliasType<{
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_saleable_products_sum_fields"]: AliasType<{
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_saleable_products_var_pop_fields"]: AliasType<{
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_saleable_products_var_samp_fields"]: AliasType<{
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_saleable_products_variance_fields"]: AliasType<{
	productId?:boolean,
	productTypeId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads"]: AliasType<{
	customerId?:boolean,
	downloadDate?:boolean,
	downloadId?:boolean,
	fulfilmentId?:boolean,
	ipAddress?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_sales_customer_downloads_aggregate_fields"],
	nodes?:ValueTypes["vectric_sales_customer_downloads"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_sales_customer_downloads_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_sales_customer_downloads_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_sales_customer_downloads_max_fields"],
	min?:ValueTypes["vectric_sales_customer_downloads_min_fields"],
	stddev?:ValueTypes["vectric_sales_customer_downloads_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_sales_customer_downloads_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_sales_customer_downloads_stddev_samp_fields"],
	sum?:ValueTypes["vectric_sales_customer_downloads_sum_fields"],
	var_pop?:ValueTypes["vectric_sales_customer_downloads_var_pop_fields"],
	var_samp?:ValueTypes["vectric_sales_customer_downloads_var_samp_fields"],
	variance?:ValueTypes["vectric_sales_customer_downloads_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_sales_customer_downloads_avg_fields"]: AliasType<{
	customerId?:boolean,
	downloadId?:boolean,
	fulfilmentId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_sales_customer_downloads_max_fields"]: AliasType<{
	customerId?:boolean,
	downloadDate?:boolean,
	downloadId?:boolean,
	fulfilmentId?:boolean,
	ipAddress?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_sales_customer_downloads_min_fields"]: AliasType<{
	customerId?:boolean,
	downloadDate?:boolean,
	downloadId?:boolean,
	fulfilmentId?:boolean,
	ipAddress?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_sales_customer_downloads"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_sales_customer_downloads_stddev_fields"]: AliasType<{
	customerId?:boolean,
	downloadId?:boolean,
	fulfilmentId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_sales_customer_downloads_stddev_pop_fields"]: AliasType<{
	customerId?:boolean,
	downloadId?:boolean,
	fulfilmentId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_sales_customer_downloads_stddev_samp_fields"]: AliasType<{
	customerId?:boolean,
	downloadId?:boolean,
	fulfilmentId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_sales_customer_downloads_sum_fields"]: AliasType<{
	customerId?:boolean,
	downloadId?:boolean,
	fulfilmentId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_sales_customer_downloads_var_pop_fields"]: AliasType<{
	customerId?:boolean,
	downloadId?:boolean,
	fulfilmentId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_sales_customer_downloads_var_samp_fields"]: AliasType<{
	customerId?:boolean,
	downloadId?:boolean,
	fulfilmentId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_sales_customer_downloads_variance_fields"]: AliasType<{
	customerId?:boolean,
	downloadId?:boolean,
	fulfilmentId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.sales_customers" */
["vectric_sales_customers"]: AliasType<{
	acceptedTerms?:boolean,
	amendedby?:boolean,
	companyName?:boolean,
	/** An object relationship */
	country?:ValueTypes["vectric_countries"],
	countrycode?:boolean,
	createdby?:boolean,
	customerAddressLine?:boolean,
	customerId?:boolean,
	customerName?:boolean,
customerSales?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_sales_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_sales_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_sales_bool_exp"] | null},ValueTypes["vectric_customer_sales"]],
customerSales_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_customer_sales_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_customer_sales_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_customer_sales_bool_exp"] | null},ValueTypes["vectric_customer_sales_aggregate"]],
	customerTelephone?:boolean,
	customerType?:boolean,
	customerstatusid?:boolean,
	customeruuid?:boolean,
	dateAcceptedTerms?:boolean,
	dateCreated?:boolean,
	dateMarketingConsentUpdated?:boolean,
	dateUpgradeEmailConsentUpdates?:boolean,
	dateamended?:boolean,
	email?:boolean,
freeClipartTokens?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_free_clipart_tokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_free_clipart_tokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_free_clipart_tokens_bool_exp"] | null},ValueTypes["vectric_free_clipart_tokens"]],
freeClipartTokens_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_free_clipart_tokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_free_clipart_tokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_free_clipart_tokens_bool_exp"] | null},ValueTypes["vectric_free_clipart_tokens_aggregate"]],
	language?:boolean,
	lastLogin?:boolean,
	lastipaddress?:boolean,
	location?:boolean,
memberships?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_group_user_role_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_group_user_role_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_group_user_role_bool_exp"] | null},ValueTypes["vectric_group_user_role"]],
memberships_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_group_user_role_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_group_user_role_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_group_user_role_bool_exp"] | null},ValueTypes["vectric_group_user_role_aggregate"]],
	mergedfromcustomerid?:boolean,
	mergedtocustomerid?:boolean,
	notes?:boolean,
orders?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_orders_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_orders_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_orders_bool_exp"] | null},ValueTypes["vectric_sales_orders"]],
orders_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_orders_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_orders_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_orders_bool_exp"] | null},ValueTypes["vectric_sales_orders_aggregate"]],
organizationMemberships?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_memberships_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_memberships_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_memberships_bool_exp"] | null},ValueTypes["vectric_memberships"]],
organizationMemberships_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_memberships_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_memberships_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_memberships_bool_exp"] | null},ValueTypes["vectric_memberships_aggregate"]],
partnerMemberships?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_staff_customer_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_staff_customer_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_staff_customer_bool_exp"] | null},ValueTypes["vectric_oem_staff_customer"]],
partnerMemberships_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_oem_staff_customer_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_oem_staff_customer_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_oem_staff_customer_bool_exp"] | null},ValueTypes["vectric_oem_staff_customer_aggregate"]],
	receivingMarketingEmails?:boolean,
	receivingUpgradeEmails?:boolean,
	registeredUsername?:boolean,
	/** An object relationship */
	user?:ValueTypes["vectric_security_users"],
	verified?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.sales_customers" */
["vectric_sales_customers_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_sales_customers_aggregate_fields"],
	nodes?:ValueTypes["vectric_sales_customers"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.sales_customers" */
["vectric_sales_customers_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_sales_customers_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_sales_customers_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_sales_customers_max_fields"],
	min?:ValueTypes["vectric_sales_customers_min_fields"],
	stddev?:ValueTypes["vectric_sales_customers_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_sales_customers_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_sales_customers_stddev_samp_fields"],
	sum?:ValueTypes["vectric_sales_customers_sum_fields"],
	var_pop?:ValueTypes["vectric_sales_customers_var_pop_fields"],
	var_samp?:ValueTypes["vectric_sales_customers_var_samp_fields"],
	variance?:ValueTypes["vectric_sales_customers_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_sales_customers_avg_fields"]: AliasType<{
	countrycode?:boolean,
	customerId?:boolean,
	customerstatusid?:boolean,
	mergedfromcustomerid?:boolean,
	mergedtocustomerid?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_sales_customers_max_fields"]: AliasType<{
	amendedby?:boolean,
	companyName?:boolean,
	countrycode?:boolean,
	createdby?:boolean,
	customerAddressLine?:boolean,
	customerId?:boolean,
	customerName?:boolean,
	customerTelephone?:boolean,
	customerType?:boolean,
	customerstatusid?:boolean,
	customeruuid?:boolean,
	dateAcceptedTerms?:boolean,
	dateCreated?:boolean,
	dateMarketingConsentUpdated?:boolean,
	dateUpgradeEmailConsentUpdates?:boolean,
	dateamended?:boolean,
	email?:boolean,
	language?:boolean,
	lastLogin?:boolean,
	lastipaddress?:boolean,
	location?:boolean,
	mergedfromcustomerid?:boolean,
	mergedtocustomerid?:boolean,
	notes?:boolean,
	registeredUsername?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_sales_customers_min_fields"]: AliasType<{
	amendedby?:boolean,
	companyName?:boolean,
	countrycode?:boolean,
	createdby?:boolean,
	customerAddressLine?:boolean,
	customerId?:boolean,
	customerName?:boolean,
	customerTelephone?:boolean,
	customerType?:boolean,
	customerstatusid?:boolean,
	customeruuid?:boolean,
	dateAcceptedTerms?:boolean,
	dateCreated?:boolean,
	dateMarketingConsentUpdated?:boolean,
	dateUpgradeEmailConsentUpdates?:boolean,
	dateamended?:boolean,
	email?:boolean,
	language?:boolean,
	lastLogin?:boolean,
	lastipaddress?:boolean,
	location?:boolean,
	mergedfromcustomerid?:boolean,
	mergedtocustomerid?:boolean,
	notes?:boolean,
	registeredUsername?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.sales_customers" */
["vectric_sales_customers_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_sales_customers"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_sales_customers_stddev_fields"]: AliasType<{
	countrycode?:boolean,
	customerId?:boolean,
	customerstatusid?:boolean,
	mergedfromcustomerid?:boolean,
	mergedtocustomerid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_sales_customers_stddev_pop_fields"]: AliasType<{
	countrycode?:boolean,
	customerId?:boolean,
	customerstatusid?:boolean,
	mergedfromcustomerid?:boolean,
	mergedtocustomerid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_sales_customers_stddev_samp_fields"]: AliasType<{
	countrycode?:boolean,
	customerId?:boolean,
	customerstatusid?:boolean,
	mergedfromcustomerid?:boolean,
	mergedtocustomerid?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_sales_customers_sum_fields"]: AliasType<{
	countrycode?:boolean,
	customerId?:boolean,
	customerstatusid?:boolean,
	mergedfromcustomerid?:boolean,
	mergedtocustomerid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_sales_customers_var_pop_fields"]: AliasType<{
	countrycode?:boolean,
	customerId?:boolean,
	customerstatusid?:boolean,
	mergedfromcustomerid?:boolean,
	mergedtocustomerid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_sales_customers_var_samp_fields"]: AliasType<{
	countrycode?:boolean,
	customerId?:boolean,
	customerstatusid?:boolean,
	mergedfromcustomerid?:boolean,
	mergedtocustomerid?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_sales_customers_variance_fields"]: AliasType<{
	countrycode?:boolean,
	customerId?:boolean,
	customerstatusid?:boolean,
	mergedfromcustomerid?:boolean,
	mergedtocustomerid?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.sales_customerupdates" */
["vectric_sales_customerupdates"]: AliasType<{
	changedBy?:boolean,
	customerId?:boolean,
	customerUpdateId?:boolean,
	dateChanged?:boolean,
	fieldName?:boolean,
	newValue?:boolean,
	oldValue?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_sales_customerupdates_aggregate_fields"],
	nodes?:ValueTypes["vectric_sales_customerupdates"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_sales_customerupdates_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_sales_customerupdates_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_sales_customerupdates_max_fields"],
	min?:ValueTypes["vectric_sales_customerupdates_min_fields"],
	stddev?:ValueTypes["vectric_sales_customerupdates_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_sales_customerupdates_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_sales_customerupdates_stddev_samp_fields"],
	sum?:ValueTypes["vectric_sales_customerupdates_sum_fields"],
	var_pop?:ValueTypes["vectric_sales_customerupdates_var_pop_fields"],
	var_samp?:ValueTypes["vectric_sales_customerupdates_var_samp_fields"],
	variance?:ValueTypes["vectric_sales_customerupdates_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_sales_customerupdates_avg_fields"]: AliasType<{
	customerId?:boolean,
	customerUpdateId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_sales_customerupdates_max_fields"]: AliasType<{
	changedBy?:boolean,
	customerId?:boolean,
	customerUpdateId?:boolean,
	dateChanged?:boolean,
	fieldName?:boolean,
	newValue?:boolean,
	oldValue?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_sales_customerupdates_min_fields"]: AliasType<{
	changedBy?:boolean,
	customerId?:boolean,
	customerUpdateId?:boolean,
	dateChanged?:boolean,
	fieldName?:boolean,
	newValue?:boolean,
	oldValue?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_sales_customerupdates"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_sales_customerupdates_stddev_fields"]: AliasType<{
	customerId?:boolean,
	customerUpdateId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_sales_customerupdates_stddev_pop_fields"]: AliasType<{
	customerId?:boolean,
	customerUpdateId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_sales_customerupdates_stddev_samp_fields"]: AliasType<{
	customerId?:boolean,
	customerUpdateId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_sales_customerupdates_sum_fields"]: AliasType<{
	customerId?:boolean,
	customerUpdateId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_sales_customerupdates_var_pop_fields"]: AliasType<{
	customerId?:boolean,
	customerUpdateId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_sales_customerupdates_var_samp_fields"]: AliasType<{
	customerId?:boolean,
	customerUpdateId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_sales_customerupdates_variance_fields"]: AliasType<{
	customerId?:boolean,
	customerUpdateId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles"]: AliasType<{
	allocatedBy?:boolean,
	allocationBatch?:boolean,
	/** An object relationship */
	allocationType?:ValueTypes["vectric_oem_licence_allocation_type"],
	allocationTypeId?:boolean,
	bundleId?:boolean,
	dateAllocated?:boolean,
	dateCreated?:boolean,
licences?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_oemlicences_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_oemlicences_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_oemlicences_bool_exp"] | null},ValueTypes["vectric_sales_oemlicences"]],
licences_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_oemlicences_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_oemlicences_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_oemlicences_bool_exp"] | null},ValueTypes["vectric_sales_oemlicences_aggregate"]],
	notes?:boolean,
	/** An object relationship */
	partner?:ValueTypes["vectric_oem_partners"],
	partnerId?:boolean,
	product?:boolean,
	productDisplayName?:boolean,
	registrationDate?:boolean,
	typeDisplayName?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_sales_oem_bundles_aggregate_fields"],
	nodes?:ValueTypes["vectric_sales_oem_bundles"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_sales_oem_bundles_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_sales_oem_bundles_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_sales_oem_bundles_max_fields"],
	min?:ValueTypes["vectric_sales_oem_bundles_min_fields"],
	stddev?:ValueTypes["vectric_sales_oem_bundles_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_sales_oem_bundles_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_sales_oem_bundles_stddev_samp_fields"],
	sum?:ValueTypes["vectric_sales_oem_bundles_sum_fields"],
	var_pop?:ValueTypes["vectric_sales_oem_bundles_var_pop_fields"],
	var_samp?:ValueTypes["vectric_sales_oem_bundles_var_samp_fields"],
	variance?:ValueTypes["vectric_sales_oem_bundles_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_sales_oem_bundles_avg_fields"]: AliasType<{
	allocationTypeId?:boolean,
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_sales_oem_bundles_max_fields"]: AliasType<{
	allocatedBy?:boolean,
	allocationBatch?:boolean,
	allocationTypeId?:boolean,
	bundleId?:boolean,
	dateAllocated?:boolean,
	dateCreated?:boolean,
	notes?:boolean,
	partnerId?:boolean,
	product?:boolean,
	productDisplayName?:boolean,
	registrationDate?:boolean,
	typeDisplayName?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_sales_oem_bundles_min_fields"]: AliasType<{
	allocatedBy?:boolean,
	allocationBatch?:boolean,
	allocationTypeId?:boolean,
	bundleId?:boolean,
	dateAllocated?:boolean,
	dateCreated?:boolean,
	notes?:boolean,
	partnerId?:boolean,
	product?:boolean,
	productDisplayName?:boolean,
	registrationDate?:boolean,
	typeDisplayName?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_sales_oem_bundles"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_sales_oem_bundles_stddev_fields"]: AliasType<{
	allocationTypeId?:boolean,
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_sales_oem_bundles_stddev_pop_fields"]: AliasType<{
	allocationTypeId?:boolean,
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_sales_oem_bundles_stddev_samp_fields"]: AliasType<{
	allocationTypeId?:boolean,
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_sales_oem_bundles_sum_fields"]: AliasType<{
	allocationTypeId?:boolean,
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_sales_oem_bundles_var_pop_fields"]: AliasType<{
	allocationTypeId?:boolean,
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_sales_oem_bundles_var_samp_fields"]: AliasType<{
	allocationTypeId?:boolean,
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_sales_oem_bundles_variance_fields"]: AliasType<{
	allocationTypeId?:boolean,
	partnerId?:boolean,
	product?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.sales_oemlicences" */
["vectric_sales_oemlicences"]: AliasType<{
	allocatedBy?:boolean,
	/** An object relationship */
	allocationType?:ValueTypes["vectric_oem_licence_allocation_type"],
	allocationTypeId?:boolean,
	dateAllocated?:boolean,
	dateCreated?:boolean,
	disabled?:boolean,
	licenceCode?:boolean,
licenceLogRows?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_licence_log_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_licence_log_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_licence_log_bool_exp"] | null},ValueTypes["vectric_licence_log"]],
licenceLogRows_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_licence_log_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_licence_log_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_licence_log_bool_exp"] | null},ValueTypes["vectric_licence_log_aggregate"]],
	mediaProvided?:boolean,
	oemBundleId?:boolean,
	oemLicenceId?:boolean,
	orderItemProductId?:boolean,
	/** An object relationship */
	partner?:ValueTypes["vectric_oem_partners"],
	partnerId?:boolean,
	productId?:boolean,
	productName?:boolean,
	registrationDate?:boolean,
	saleItemId?:boolean,
	version?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_sales_oemlicences_aggregate_fields"],
	nodes?:ValueTypes["vectric_sales_oemlicences"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_sales_oemlicences_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_sales_oemlicences_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_sales_oemlicences_max_fields"],
	min?:ValueTypes["vectric_sales_oemlicences_min_fields"],
	stddev?:ValueTypes["vectric_sales_oemlicences_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_sales_oemlicences_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_sales_oemlicences_stddev_samp_fields"],
	sum?:ValueTypes["vectric_sales_oemlicences_sum_fields"],
	var_pop?:ValueTypes["vectric_sales_oemlicences_var_pop_fields"],
	var_samp?:ValueTypes["vectric_sales_oemlicences_var_samp_fields"],
	variance?:ValueTypes["vectric_sales_oemlicences_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_sales_oemlicences_avg_fields"]: AliasType<{
	allocationTypeId?:boolean,
	oemLicenceId?:boolean,
	orderItemProductId?:boolean,
	partnerId?:boolean,
	productId?:boolean,
	saleItemId?:boolean,
	version?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_sales_oemlicences_max_fields"]: AliasType<{
	allocatedBy?:boolean,
	allocationTypeId?:boolean,
	dateAllocated?:boolean,
	dateCreated?:boolean,
	licenceCode?:boolean,
	oemBundleId?:boolean,
	oemLicenceId?:boolean,
	orderItemProductId?:boolean,
	partnerId?:boolean,
	productId?:boolean,
	productName?:boolean,
	registrationDate?:boolean,
	saleItemId?:boolean,
	version?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_sales_oemlicences_min_fields"]: AliasType<{
	allocatedBy?:boolean,
	allocationTypeId?:boolean,
	dateAllocated?:boolean,
	dateCreated?:boolean,
	licenceCode?:boolean,
	oemBundleId?:boolean,
	oemLicenceId?:boolean,
	orderItemProductId?:boolean,
	partnerId?:boolean,
	productId?:boolean,
	productName?:boolean,
	registrationDate?:boolean,
	saleItemId?:boolean,
	version?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_sales_oemlicences"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_sales_oemlicences_stddev_fields"]: AliasType<{
	allocationTypeId?:boolean,
	oemLicenceId?:boolean,
	orderItemProductId?:boolean,
	partnerId?:boolean,
	productId?:boolean,
	saleItemId?:boolean,
	version?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_sales_oemlicences_stddev_pop_fields"]: AliasType<{
	allocationTypeId?:boolean,
	oemLicenceId?:boolean,
	orderItemProductId?:boolean,
	partnerId?:boolean,
	productId?:boolean,
	saleItemId?:boolean,
	version?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_sales_oemlicences_stddev_samp_fields"]: AliasType<{
	allocationTypeId?:boolean,
	oemLicenceId?:boolean,
	orderItemProductId?:boolean,
	partnerId?:boolean,
	productId?:boolean,
	saleItemId?:boolean,
	version?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_sales_oemlicences_sum_fields"]: AliasType<{
	allocationTypeId?:boolean,
	oemLicenceId?:boolean,
	orderItemProductId?:boolean,
	partnerId?:boolean,
	productId?:boolean,
	saleItemId?:boolean,
	version?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_sales_oemlicences_var_pop_fields"]: AliasType<{
	allocationTypeId?:boolean,
	oemLicenceId?:boolean,
	orderItemProductId?:boolean,
	partnerId?:boolean,
	productId?:boolean,
	saleItemId?:boolean,
	version?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_sales_oemlicences_var_samp_fields"]: AliasType<{
	allocationTypeId?:boolean,
	oemLicenceId?:boolean,
	orderItemProductId?:boolean,
	partnerId?:boolean,
	productId?:boolean,
	saleItemId?:boolean,
	version?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_sales_oemlicences_variance_fields"]: AliasType<{
	allocationTypeId?:boolean,
	oemLicenceId?:boolean,
	orderItemProductId?:boolean,
	partnerId?:boolean,
	productId?:boolean,
	saleItemId?:boolean,
	version?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.sales_orders" */
["vectric_sales_orders"]: AliasType<{
	amendedby?:boolean,
	createdby?:boolean,
	customerId?:boolean,
	dateCreated?:boolean,
	dateamended?:boolean,
	mergedfromcustomerid?:boolean,
	orderDate?:boolean,
	orderId?:boolean,
	purchaser?:boolean,
	registrationemailsent?:boolean,
	salenote?:boolean,
salesItems?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_salesitems_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_salesitems_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_salesitems_bool_exp"] | null},ValueTypes["vectric_sales_salesitems"]],
salesItems_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_salesitems_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_salesitems_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_salesitems_bool_exp"] | null},ValueTypes["vectric_sales_salesitems_aggregate"]],
	/** An object relationship */
	sales_customer?:ValueTypes["vectric_sales_customers"],
	salesdetails?:boolean,
	salesummary?:boolean,
	validationcomments?:boolean,
	veccode?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.sales_orders" */
["vectric_sales_orders_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_sales_orders_aggregate_fields"],
	nodes?:ValueTypes["vectric_sales_orders"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.sales_orders" */
["vectric_sales_orders_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_sales_orders_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_sales_orders_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_sales_orders_max_fields"],
	min?:ValueTypes["vectric_sales_orders_min_fields"],
	stddev?:ValueTypes["vectric_sales_orders_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_sales_orders_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_sales_orders_stddev_samp_fields"],
	sum?:ValueTypes["vectric_sales_orders_sum_fields"],
	var_pop?:ValueTypes["vectric_sales_orders_var_pop_fields"],
	var_samp?:ValueTypes["vectric_sales_orders_var_samp_fields"],
	variance?:ValueTypes["vectric_sales_orders_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_sales_orders_avg_fields"]: AliasType<{
	customerId?:boolean,
	mergedfromcustomerid?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_sales_orders_max_fields"]: AliasType<{
	amendedby?:boolean,
	createdby?:boolean,
	customerId?:boolean,
	dateCreated?:boolean,
	dateamended?:boolean,
	mergedfromcustomerid?:boolean,
	orderDate?:boolean,
	orderId?:boolean,
	purchaser?:boolean,
	registrationemailsent?:boolean,
	salenote?:boolean,
	salesdetails?:boolean,
	salesummary?:boolean,
	validationcomments?:boolean,
	veccode?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_sales_orders_min_fields"]: AliasType<{
	amendedby?:boolean,
	createdby?:boolean,
	customerId?:boolean,
	dateCreated?:boolean,
	dateamended?:boolean,
	mergedfromcustomerid?:boolean,
	orderDate?:boolean,
	orderId?:boolean,
	purchaser?:boolean,
	registrationemailsent?:boolean,
	salenote?:boolean,
	salesdetails?:boolean,
	salesummary?:boolean,
	validationcomments?:boolean,
	veccode?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.sales_orders" */
["vectric_sales_orders_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_sales_orders"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_sales_orders_stddev_fields"]: AliasType<{
	customerId?:boolean,
	mergedfromcustomerid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_sales_orders_stddev_pop_fields"]: AliasType<{
	customerId?:boolean,
	mergedfromcustomerid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_sales_orders_stddev_samp_fields"]: AliasType<{
	customerId?:boolean,
	mergedfromcustomerid?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_sales_orders_sum_fields"]: AliasType<{
	customerId?:boolean,
	mergedfromcustomerid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_sales_orders_var_pop_fields"]: AliasType<{
	customerId?:boolean,
	mergedfromcustomerid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_sales_orders_var_samp_fields"]: AliasType<{
	customerId?:boolean,
	mergedfromcustomerid?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_sales_orders_variance_fields"]: AliasType<{
	customerId?:boolean,
	mergedfromcustomerid?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products"]: AliasType<{
addOns?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_salesitem_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_salesitem_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_salesitem_products_bool_exp"] | null},ValueTypes["vectric_sales_salesitem_products"]],
addOns_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_salesitem_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_salesitem_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_salesitem_products_bool_exp"] | null},ValueTypes["vectric_sales_salesitem_products_aggregate"]],
	amended?:boolean,
	amendedby?:boolean,
	emailsubject?:boolean,
	/** An object relationship */
	enhanceSalesItemProduct?:ValueTypes["vectric_sales_salesitem_products"],
enhancementTokens?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_enhancement_tokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_enhancement_tokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_enhancement_tokens_bool_exp"] | null},ValueTypes["vectric_enhancement_tokens"]],
enhancementTokens_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_enhancement_tokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_enhancement_tokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_enhancement_tokens_bool_exp"] | null},ValueTypes["vectric_enhancement_tokens_aggregate"]],
	enhances?:boolean,
freeClipartTokens?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_free_clipart_tokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_free_clipart_tokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_free_clipart_tokens_bool_exp"] | null},ValueTypes["vectric_free_clipart_tokens"]],
freeClipartTokens_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_free_clipart_tokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_free_clipart_tokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_free_clipart_tokens_bool_exp"] | null},ValueTypes["vectric_free_clipart_tokens_aggregate"]],
	licenceCode?:boolean,
	licenceIdAsDisplay?:boolean,
	licenceType?:boolean,
	oembundleid?:boolean,
	/** An object relationship */
	product?:ValueTypes["vectric_products_products"],
	productId?:boolean,
	registeredUsername?:boolean,
	resentdate?:boolean,
	/** An object relationship */
	salesItem?:ValueTypes["vectric_sales_salesitems"],
	salesItemProductId?:boolean,
	/** An object relationship */
	salesItemProductStatus?:ValueTypes["vectric_sales_salesitemproduct_status"],
	salesitemid?:boolean,
	status?:boolean,
	transfersalesitem?:boolean,
upgradeTokens?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrade_tokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrade_tokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrade_tokens_bool_exp"] | null},ValueTypes["vectric_upgrade_tokens"]],
upgradeTokens_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrade_tokens_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrade_tokens_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrade_tokens_bool_exp"] | null},ValueTypes["vectric_upgrade_tokens_aggregate"]],
	upgradesalesitem?:boolean,
	versioncodeid?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_sales_salesitem_products_aggregate_fields"],
	nodes?:ValueTypes["vectric_sales_salesitem_products"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_sales_salesitem_products_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_sales_salesitem_products_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_sales_salesitem_products_max_fields"],
	min?:ValueTypes["vectric_sales_salesitem_products_min_fields"],
	stddev?:ValueTypes["vectric_sales_salesitem_products_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_sales_salesitem_products_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_sales_salesitem_products_stddev_samp_fields"],
	sum?:ValueTypes["vectric_sales_salesitem_products_sum_fields"],
	var_pop?:ValueTypes["vectric_sales_salesitem_products_var_pop_fields"],
	var_samp?:ValueTypes["vectric_sales_salesitem_products_var_samp_fields"],
	variance?:ValueTypes["vectric_sales_salesitem_products_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_sales_salesitem_products_avg_fields"]: AliasType<{
	enhances?:boolean,
	productId?:boolean,
	salesItemProductId?:boolean,
	salesitemid?:boolean,
	status?:boolean,
	transfersalesitem?:boolean,
	upgradesalesitem?:boolean,
	versioncodeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_sales_salesitem_products_max_fields"]: AliasType<{
	amended?:boolean,
	amendedby?:boolean,
	emailsubject?:boolean,
	enhances?:boolean,
	licenceCode?:boolean,
	licenceType?:boolean,
	oembundleid?:boolean,
	productId?:boolean,
	registeredUsername?:boolean,
	resentdate?:boolean,
	salesItemProductId?:boolean,
	salesitemid?:boolean,
	status?:boolean,
	transfersalesitem?:boolean,
	upgradesalesitem?:boolean,
	versioncodeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_sales_salesitem_products_min_fields"]: AliasType<{
	amended?:boolean,
	amendedby?:boolean,
	emailsubject?:boolean,
	enhances?:boolean,
	licenceCode?:boolean,
	licenceType?:boolean,
	oembundleid?:boolean,
	productId?:boolean,
	registeredUsername?:boolean,
	resentdate?:boolean,
	salesItemProductId?:boolean,
	salesitemid?:boolean,
	status?:boolean,
	transfersalesitem?:boolean,
	upgradesalesitem?:boolean,
	versioncodeid?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_sales_salesitem_products"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_sales_salesitem_products_stddev_fields"]: AliasType<{
	enhances?:boolean,
	productId?:boolean,
	salesItemProductId?:boolean,
	salesitemid?:boolean,
	status?:boolean,
	transfersalesitem?:boolean,
	upgradesalesitem?:boolean,
	versioncodeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_sales_salesitem_products_stddev_pop_fields"]: AliasType<{
	enhances?:boolean,
	productId?:boolean,
	salesItemProductId?:boolean,
	salesitemid?:boolean,
	status?:boolean,
	transfersalesitem?:boolean,
	upgradesalesitem?:boolean,
	versioncodeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_sales_salesitem_products_stddev_samp_fields"]: AliasType<{
	enhances?:boolean,
	productId?:boolean,
	salesItemProductId?:boolean,
	salesitemid?:boolean,
	status?:boolean,
	transfersalesitem?:boolean,
	upgradesalesitem?:boolean,
	versioncodeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_sales_salesitem_products_sum_fields"]: AliasType<{
	enhances?:boolean,
	productId?:boolean,
	salesItemProductId?:boolean,
	salesitemid?:boolean,
	status?:boolean,
	transfersalesitem?:boolean,
	upgradesalesitem?:boolean,
	versioncodeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_sales_salesitem_products_var_pop_fields"]: AliasType<{
	enhances?:boolean,
	productId?:boolean,
	salesItemProductId?:boolean,
	salesitemid?:boolean,
	status?:boolean,
	transfersalesitem?:boolean,
	upgradesalesitem?:boolean,
	versioncodeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_sales_salesitem_products_var_samp_fields"]: AliasType<{
	enhances?:boolean,
	productId?:boolean,
	salesItemProductId?:boolean,
	salesitemid?:boolean,
	status?:boolean,
	transfersalesitem?:boolean,
	upgradesalesitem?:boolean,
	versioncodeid?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_sales_salesitem_products_variance_fields"]: AliasType<{
	enhances?:boolean,
	productId?:boolean,
	salesItemProductId?:boolean,
	salesitemid?:boolean,
	status?:boolean,
	transfersalesitem?:boolean,
	upgradesalesitem?:boolean,
	versioncodeid?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status"]: AliasType<{
	status?:boolean,
	statusid?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_sales_salesitemproduct_status_aggregate_fields"],
	nodes?:ValueTypes["vectric_sales_salesitemproduct_status"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_sales_salesitemproduct_status_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_sales_salesitemproduct_status_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_sales_salesitemproduct_status_max_fields"],
	min?:ValueTypes["vectric_sales_salesitemproduct_status_min_fields"],
	stddev?:ValueTypes["vectric_sales_salesitemproduct_status_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_sales_salesitemproduct_status_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_sales_salesitemproduct_status_stddev_samp_fields"],
	sum?:ValueTypes["vectric_sales_salesitemproduct_status_sum_fields"],
	var_pop?:ValueTypes["vectric_sales_salesitemproduct_status_var_pop_fields"],
	var_samp?:ValueTypes["vectric_sales_salesitemproduct_status_var_samp_fields"],
	variance?:ValueTypes["vectric_sales_salesitemproduct_status_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_sales_salesitemproduct_status_avg_fields"]: AliasType<{
	statusid?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_sales_salesitemproduct_status_max_fields"]: AliasType<{
	status?:boolean,
	statusid?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_sales_salesitemproduct_status_min_fields"]: AliasType<{
	status?:boolean,
	statusid?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_sales_salesitemproduct_status"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_sales_salesitemproduct_status_stddev_fields"]: AliasType<{
	statusid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_sales_salesitemproduct_status_stddev_pop_fields"]: AliasType<{
	statusid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_sales_salesitemproduct_status_stddev_samp_fields"]: AliasType<{
	statusid?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_sales_salesitemproduct_status_sum_fields"]: AliasType<{
	statusid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_sales_salesitemproduct_status_var_pop_fields"]: AliasType<{
	statusid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_sales_salesitemproduct_status_var_samp_fields"]: AliasType<{
	statusid?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_sales_salesitemproduct_status_variance_fields"]: AliasType<{
	statusid?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.sales_salesitems" */
["vectric_sales_salesitems"]: AliasType<{
	amendedby?:boolean,
	/** An object relationship */
	customerSale?:ValueTypes["vectric_customer_sales"],
	dateamended?:boolean,
	orderid?:boolean,
	/** An object relationship */
	product?:ValueTypes["vectric_products_products"],
	productid?:boolean,
salesItemProducts?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_salesitem_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_salesitem_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_salesitem_products_bool_exp"] | null},ValueTypes["vectric_sales_salesitem_products"]],
salesItemProducts_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_sales_salesitem_products_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_sales_salesitem_products_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_sales_salesitem_products_bool_exp"] | null},ValueTypes["vectric_sales_salesitem_products_aggregate"]],
	/** An object relationship */
	sales_order?:ValueTypes["vectric_sales_orders"],
	salesitemid?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.sales_salesitems" */
["vectric_sales_salesitems_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_sales_salesitems_aggregate_fields"],
	nodes?:ValueTypes["vectric_sales_salesitems"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.sales_salesitems" */
["vectric_sales_salesitems_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_sales_salesitems_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_sales_salesitems_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_sales_salesitems_max_fields"],
	min?:ValueTypes["vectric_sales_salesitems_min_fields"],
	stddev?:ValueTypes["vectric_sales_salesitems_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_sales_salesitems_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_sales_salesitems_stddev_samp_fields"],
	sum?:ValueTypes["vectric_sales_salesitems_sum_fields"],
	var_pop?:ValueTypes["vectric_sales_salesitems_var_pop_fields"],
	var_samp?:ValueTypes["vectric_sales_salesitems_var_samp_fields"],
	variance?:ValueTypes["vectric_sales_salesitems_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_sales_salesitems_avg_fields"]: AliasType<{
	productid?:boolean,
	salesitemid?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_sales_salesitems_max_fields"]: AliasType<{
	amendedby?:boolean,
	dateamended?:boolean,
	orderid?:boolean,
	productid?:boolean,
	salesitemid?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_sales_salesitems_min_fields"]: AliasType<{
	amendedby?:boolean,
	dateamended?:boolean,
	orderid?:boolean,
	productid?:boolean,
	salesitemid?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.sales_salesitems" */
["vectric_sales_salesitems_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_sales_salesitems"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_sales_salesitems_stddev_fields"]: AliasType<{
	productid?:boolean,
	salesitemid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_sales_salesitems_stddev_pop_fields"]: AliasType<{
	productid?:boolean,
	salesitemid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_sales_salesitems_stddev_samp_fields"]: AliasType<{
	productid?:boolean,
	salesitemid?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_sales_salesitems_sum_fields"]: AliasType<{
	productid?:boolean,
	salesitemid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_sales_salesitems_var_pop_fields"]: AliasType<{
	productid?:boolean,
	salesitemid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_sales_salesitems_var_samp_fields"]: AliasType<{
	productid?:boolean,
	salesitemid?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_sales_salesitems_variance_fields"]: AliasType<{
	productid?:boolean,
	salesitemid?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate"]: AliasType<{
	lang?:boolean,
	/** An object relationship */
	languageCode?:ValueTypes["vectric_language_codes"],
	sender?:boolean,
	signedBy?:boolean,
	subject?:boolean,
	template?:boolean,
	templateName?:boolean,
	templateTimestamp?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_sales_velocitytemplate_aggregate_fields"],
	nodes?:ValueTypes["vectric_sales_velocitytemplate"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_aggregate_fields"]: AliasType<{
count?: [{	columns?:ValueTypes["vectric_sales_velocitytemplate_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_sales_velocitytemplate_max_fields"],
	min?:ValueTypes["vectric_sales_velocitytemplate_min_fields"],
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_sales_velocitytemplate_max_fields"]: AliasType<{
	lang?:boolean,
	sender?:boolean,
	signedBy?:boolean,
	subject?:boolean,
	template?:boolean,
	templateName?:boolean,
	templateTimestamp?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_sales_velocitytemplate_min_fields"]: AliasType<{
	lang?:boolean,
	sender?:boolean,
	signedBy?:boolean,
	subject?:boolean,
	template?:boolean,
	templateName?:boolean,
	templateTimestamp?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_sales_velocitytemplate"],
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.scheduled_emails" */
["vectric_scheduled_emails"]: AliasType<{
	createdOn?:boolean,
	customerId?:boolean,
	id?:boolean,
	processed?:boolean,
	processedOn?:boolean,
	sendTo?:boolean,
	templateId?:boolean,
	variables?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.scheduled_emails" */
["vectric_scheduled_emails_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_scheduled_emails_aggregate_fields"],
	nodes?:ValueTypes["vectric_scheduled_emails"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.scheduled_emails" */
["vectric_scheduled_emails_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_scheduled_emails_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_scheduled_emails_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_scheduled_emails_max_fields"],
	min?:ValueTypes["vectric_scheduled_emails_min_fields"],
	stddev?:ValueTypes["vectric_scheduled_emails_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_scheduled_emails_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_scheduled_emails_stddev_samp_fields"],
	sum?:ValueTypes["vectric_scheduled_emails_sum_fields"],
	var_pop?:ValueTypes["vectric_scheduled_emails_var_pop_fields"],
	var_samp?:ValueTypes["vectric_scheduled_emails_var_samp_fields"],
	variance?:ValueTypes["vectric_scheduled_emails_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_scheduled_emails_avg_fields"]: AliasType<{
	customerId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_scheduled_emails_max_fields"]: AliasType<{
	createdOn?:boolean,
	customerId?:boolean,
	id?:boolean,
	processedOn?:boolean,
	sendTo?:boolean,
	templateId?:boolean,
	variables?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_scheduled_emails_min_fields"]: AliasType<{
	createdOn?:boolean,
	customerId?:boolean,
	id?:boolean,
	processedOn?:boolean,
	sendTo?:boolean,
	templateId?:boolean,
	variables?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.scheduled_emails" */
["vectric_scheduled_emails_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_scheduled_emails"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_scheduled_emails_stddev_fields"]: AliasType<{
	customerId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_scheduled_emails_stddev_pop_fields"]: AliasType<{
	customerId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_scheduled_emails_stddev_samp_fields"]: AliasType<{
	customerId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_scheduled_emails_sum_fields"]: AliasType<{
	customerId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_scheduled_emails_var_pop_fields"]: AliasType<{
	customerId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_scheduled_emails_var_samp_fields"]: AliasType<{
	customerId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_scheduled_emails_variance_fields"]: AliasType<{
	customerId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens"]: AliasType<{
	customerId?:boolean,
	expiryDate?:boolean,
	token?:boolean,
	username?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_security_emailverificationtokens_aggregate_fields"],
	nodes?:ValueTypes["vectric_security_emailverificationtokens"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_security_emailverificationtokens_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_security_emailverificationtokens_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_security_emailverificationtokens_max_fields"],
	min?:ValueTypes["vectric_security_emailverificationtokens_min_fields"],
	stddev?:ValueTypes["vectric_security_emailverificationtokens_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_security_emailverificationtokens_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_security_emailverificationtokens_stddev_samp_fields"],
	sum?:ValueTypes["vectric_security_emailverificationtokens_sum_fields"],
	var_pop?:ValueTypes["vectric_security_emailverificationtokens_var_pop_fields"],
	var_samp?:ValueTypes["vectric_security_emailverificationtokens_var_samp_fields"],
	variance?:ValueTypes["vectric_security_emailverificationtokens_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_security_emailverificationtokens_avg_fields"]: AliasType<{
	customerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_security_emailverificationtokens_max_fields"]: AliasType<{
	customerId?:boolean,
	expiryDate?:boolean,
	token?:boolean,
	username?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_security_emailverificationtokens_min_fields"]: AliasType<{
	customerId?:boolean,
	expiryDate?:boolean,
	token?:boolean,
	username?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_security_emailverificationtokens"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_security_emailverificationtokens_stddev_fields"]: AliasType<{
	customerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_security_emailverificationtokens_stddev_pop_fields"]: AliasType<{
	customerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_security_emailverificationtokens_stddev_samp_fields"]: AliasType<{
	customerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_security_emailverificationtokens_sum_fields"]: AliasType<{
	customerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_security_emailverificationtokens_var_pop_fields"]: AliasType<{
	customerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_security_emailverificationtokens_var_samp_fields"]: AliasType<{
	customerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_security_emailverificationtokens_variance_fields"]: AliasType<{
	customerId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.security_group_authorities" */
["vectric_security_group_authorities"]: AliasType<{
	authority?:boolean,
	groupId?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.security_group_authorities" */
["vectric_security_group_authorities_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_security_group_authorities_aggregate_fields"],
	nodes?:ValueTypes["vectric_security_group_authorities"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.security_group_authorities" */
["vectric_security_group_authorities_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_security_group_authorities_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_security_group_authorities_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_security_group_authorities_max_fields"],
	min?:ValueTypes["vectric_security_group_authorities_min_fields"],
	stddev?:ValueTypes["vectric_security_group_authorities_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_security_group_authorities_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_security_group_authorities_stddev_samp_fields"],
	sum?:ValueTypes["vectric_security_group_authorities_sum_fields"],
	var_pop?:ValueTypes["vectric_security_group_authorities_var_pop_fields"],
	var_samp?:ValueTypes["vectric_security_group_authorities_var_samp_fields"],
	variance?:ValueTypes["vectric_security_group_authorities_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_security_group_authorities_avg_fields"]: AliasType<{
	groupId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_security_group_authorities_max_fields"]: AliasType<{
	authority?:boolean,
	groupId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_security_group_authorities_min_fields"]: AliasType<{
	authority?:boolean,
	groupId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.security_group_authorities" */
["vectric_security_group_authorities_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_security_group_authorities"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_security_group_authorities_stddev_fields"]: AliasType<{
	groupId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_security_group_authorities_stddev_pop_fields"]: AliasType<{
	groupId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_security_group_authorities_stddev_samp_fields"]: AliasType<{
	groupId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_security_group_authorities_sum_fields"]: AliasType<{
	groupId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_security_group_authorities_var_pop_fields"]: AliasType<{
	groupId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_security_group_authorities_var_samp_fields"]: AliasType<{
	groupId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_security_group_authorities_variance_fields"]: AliasType<{
	groupId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.security_group_members" */
["vectric_security_group_members"]: AliasType<{
groupAuthorities?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_group_authorities_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_group_authorities_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_group_authorities_bool_exp"] | null},ValueTypes["vectric_security_group_authorities"]],
groupAuthorities_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_group_authorities_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_group_authorities_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_group_authorities_bool_exp"] | null},ValueTypes["vectric_security_group_authorities_aggregate"]],
	groupId?:boolean,
	id?:boolean,
	/** An object relationship */
	securityUser?:ValueTypes["vectric_security_users"],
	username?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.security_group_members" */
["vectric_security_group_members_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_security_group_members_aggregate_fields"],
	nodes?:ValueTypes["vectric_security_group_members"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.security_group_members" */
["vectric_security_group_members_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_security_group_members_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_security_group_members_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_security_group_members_max_fields"],
	min?:ValueTypes["vectric_security_group_members_min_fields"],
	stddev?:ValueTypes["vectric_security_group_members_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_security_group_members_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_security_group_members_stddev_samp_fields"],
	sum?:ValueTypes["vectric_security_group_members_sum_fields"],
	var_pop?:ValueTypes["vectric_security_group_members_var_pop_fields"],
	var_samp?:ValueTypes["vectric_security_group_members_var_samp_fields"],
	variance?:ValueTypes["vectric_security_group_members_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_security_group_members_avg_fields"]: AliasType<{
	groupId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_security_group_members_max_fields"]: AliasType<{
	groupId?:boolean,
	id?:boolean,
	username?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_security_group_members_min_fields"]: AliasType<{
	groupId?:boolean,
	id?:boolean,
	username?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.security_group_members" */
["vectric_security_group_members_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_security_group_members"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_security_group_members_stddev_fields"]: AliasType<{
	groupId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_security_group_members_stddev_pop_fields"]: AliasType<{
	groupId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_security_group_members_stddev_samp_fields"]: AliasType<{
	groupId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_security_group_members_sum_fields"]: AliasType<{
	groupId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_security_group_members_var_pop_fields"]: AliasType<{
	groupId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_security_group_members_var_samp_fields"]: AliasType<{
	groupId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_security_group_members_variance_fields"]: AliasType<{
	groupId?:boolean,
	id?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens"]: AliasType<{
	expiryDate?:boolean,
	token?:boolean,
	username?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_security_passwordresettokens_aggregate_fields"],
	nodes?:ValueTypes["vectric_security_passwordresettokens"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_aggregate_fields"]: AliasType<{
count?: [{	columns?:ValueTypes["vectric_security_passwordresettokens_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_security_passwordresettokens_max_fields"],
	min?:ValueTypes["vectric_security_passwordresettokens_min_fields"],
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_security_passwordresettokens_max_fields"]: AliasType<{
	expiryDate?:boolean,
	token?:boolean,
	username?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_security_passwordresettokens_min_fields"]: AliasType<{
	expiryDate?:boolean,
	token?:boolean,
	username?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_security_passwordresettokens"],
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.security_userinvitations" */
["vectric_security_userinvitations"]: AliasType<{
	acceptedDate?:boolean,
	adminofid?:boolean,
	createDate?:boolean,
	customerId?:boolean,
	expirydate?:boolean,
	staffofid?:boolean,
	token?:boolean,
	username?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.security_userinvitations" */
["vectric_security_userinvitations_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_security_userinvitations_aggregate_fields"],
	nodes?:ValueTypes["vectric_security_userinvitations"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.security_userinvitations" */
["vectric_security_userinvitations_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_security_userinvitations_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_security_userinvitations_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_security_userinvitations_max_fields"],
	min?:ValueTypes["vectric_security_userinvitations_min_fields"],
	stddev?:ValueTypes["vectric_security_userinvitations_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_security_userinvitations_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_security_userinvitations_stddev_samp_fields"],
	sum?:ValueTypes["vectric_security_userinvitations_sum_fields"],
	var_pop?:ValueTypes["vectric_security_userinvitations_var_pop_fields"],
	var_samp?:ValueTypes["vectric_security_userinvitations_var_samp_fields"],
	variance?:ValueTypes["vectric_security_userinvitations_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_security_userinvitations_avg_fields"]: AliasType<{
	adminofid?:boolean,
	customerId?:boolean,
	staffofid?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_security_userinvitations_max_fields"]: AliasType<{
	acceptedDate?:boolean,
	adminofid?:boolean,
	createDate?:boolean,
	customerId?:boolean,
	expirydate?:boolean,
	staffofid?:boolean,
	token?:boolean,
	username?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_security_userinvitations_min_fields"]: AliasType<{
	acceptedDate?:boolean,
	adminofid?:boolean,
	createDate?:boolean,
	customerId?:boolean,
	expirydate?:boolean,
	staffofid?:boolean,
	token?:boolean,
	username?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.security_userinvitations" */
["vectric_security_userinvitations_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_security_userinvitations"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_security_userinvitations_stddev_fields"]: AliasType<{
	adminofid?:boolean,
	customerId?:boolean,
	staffofid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_security_userinvitations_stddev_pop_fields"]: AliasType<{
	adminofid?:boolean,
	customerId?:boolean,
	staffofid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_security_userinvitations_stddev_samp_fields"]: AliasType<{
	adminofid?:boolean,
	customerId?:boolean,
	staffofid?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_security_userinvitations_sum_fields"]: AliasType<{
	adminofid?:boolean,
	customerId?:boolean,
	staffofid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_security_userinvitations_var_pop_fields"]: AliasType<{
	adminofid?:boolean,
	customerId?:boolean,
	staffofid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_security_userinvitations_var_samp_fields"]: AliasType<{
	adminofid?:boolean,
	customerId?:boolean,
	staffofid?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_security_userinvitations_variance_fields"]: AliasType<{
	adminofid?:boolean,
	customerId?:boolean,
	staffofid?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.security_users" */
["vectric_security_users"]: AliasType<{
	accountNonExpired?:boolean,
	credentialsNonExpired?:boolean,
	enabled?:boolean,
	password?:boolean,
	salesCustomerId?:boolean,
securityGroups?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_group_members_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_group_members_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_group_members_bool_exp"] | null},ValueTypes["vectric_security_group_members"]],
securityGroups_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_security_group_members_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_security_group_members_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_security_group_members_bool_exp"] | null},ValueTypes["vectric_security_group_members_aggregate"]],
	username?:boolean,
	voucherCode?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.security_users" */
["vectric_security_users_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_security_users_aggregate_fields"],
	nodes?:ValueTypes["vectric_security_users"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.security_users" */
["vectric_security_users_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_security_users_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_security_users_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_security_users_max_fields"],
	min?:ValueTypes["vectric_security_users_min_fields"],
	stddev?:ValueTypes["vectric_security_users_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_security_users_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_security_users_stddev_samp_fields"],
	sum?:ValueTypes["vectric_security_users_sum_fields"],
	var_pop?:ValueTypes["vectric_security_users_var_pop_fields"],
	var_samp?:ValueTypes["vectric_security_users_var_samp_fields"],
	variance?:ValueTypes["vectric_security_users_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_security_users_avg_fields"]: AliasType<{
	salesCustomerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_security_users_max_fields"]: AliasType<{
	password?:boolean,
	salesCustomerId?:boolean,
	username?:boolean,
	voucherCode?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_security_users_min_fields"]: AliasType<{
	password?:boolean,
	salesCustomerId?:boolean,
	username?:boolean,
	voucherCode?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.security_users" */
["vectric_security_users_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_security_users"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_security_users_stddev_fields"]: AliasType<{
	salesCustomerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_security_users_stddev_pop_fields"]: AliasType<{
	salesCustomerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_security_users_stddev_samp_fields"]: AliasType<{
	salesCustomerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_security_users_sum_fields"]: AliasType<{
	salesCustomerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_security_users_var_pop_fields"]: AliasType<{
	salesCustomerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_security_users_var_samp_fields"]: AliasType<{
	salesCustomerId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_security_users_variance_fields"]: AliasType<{
	salesCustomerId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.site_option_location" */
["vectric_site_option_location"]: AliasType<{
	locationid?:boolean,
	name?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.site_option_location" */
["vectric_site_option_location_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_site_option_location_aggregate_fields"],
	nodes?:ValueTypes["vectric_site_option_location"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.site_option_location" */
["vectric_site_option_location_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_site_option_location_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_site_option_location_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_site_option_location_max_fields"],
	min?:ValueTypes["vectric_site_option_location_min_fields"],
	stddev?:ValueTypes["vectric_site_option_location_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_site_option_location_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_site_option_location_stddev_samp_fields"],
	sum?:ValueTypes["vectric_site_option_location_sum_fields"],
	var_pop?:ValueTypes["vectric_site_option_location_var_pop_fields"],
	var_samp?:ValueTypes["vectric_site_option_location_var_samp_fields"],
	variance?:ValueTypes["vectric_site_option_location_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_site_option_location_avg_fields"]: AliasType<{
	locationid?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_site_option_location_max_fields"]: AliasType<{
	locationid?:boolean,
	name?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_site_option_location_min_fields"]: AliasType<{
	locationid?:boolean,
	name?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.site_option_location" */
["vectric_site_option_location_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_site_option_location"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_site_option_location_stddev_fields"]: AliasType<{
	locationid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_site_option_location_stddev_pop_fields"]: AliasType<{
	locationid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_site_option_location_stddev_samp_fields"]: AliasType<{
	locationid?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_site_option_location_sum_fields"]: AliasType<{
	locationid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_site_option_location_var_pop_fields"]: AliasType<{
	locationid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_site_option_location_var_samp_fields"]: AliasType<{
	locationid?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_site_option_location_variance_fields"]: AliasType<{
	locationid?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.site_options" */
["vectric_site_options"]: AliasType<{
	description?:boolean,
	optionid?:boolean,
	optionname?:boolean,
	/** An object relationship */
	site_optiositeOptionLocationn_location?:ValueTypes["vectric_site_option_location"],
	siteid?:boolean,
	stringval?:boolean,
	value?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.site_options" */
["vectric_site_options_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_site_options_aggregate_fields"],
	nodes?:ValueTypes["vectric_site_options"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.site_options" */
["vectric_site_options_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_site_options_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_site_options_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_site_options_max_fields"],
	min?:ValueTypes["vectric_site_options_min_fields"],
	stddev?:ValueTypes["vectric_site_options_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_site_options_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_site_options_stddev_samp_fields"],
	sum?:ValueTypes["vectric_site_options_sum_fields"],
	var_pop?:ValueTypes["vectric_site_options_var_pop_fields"],
	var_samp?:ValueTypes["vectric_site_options_var_samp_fields"],
	variance?:ValueTypes["vectric_site_options_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_site_options_avg_fields"]: AliasType<{
	optionid?:boolean,
	siteid?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_site_options_max_fields"]: AliasType<{
	description?:boolean,
	optionid?:boolean,
	optionname?:boolean,
	siteid?:boolean,
	stringval?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_site_options_min_fields"]: AliasType<{
	description?:boolean,
	optionid?:boolean,
	optionname?:boolean,
	siteid?:boolean,
	stringval?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.site_options" */
["vectric_site_options_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_site_options"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_site_options_stddev_fields"]: AliasType<{
	optionid?:boolean,
	siteid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_site_options_stddev_pop_fields"]: AliasType<{
	optionid?:boolean,
	siteid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_site_options_stddev_samp_fields"]: AliasType<{
	optionid?:boolean,
	siteid?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_site_options_sum_fields"]: AliasType<{
	optionid?:boolean,
	siteid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_site_options_var_pop_fields"]: AliasType<{
	optionid?:boolean,
	siteid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_site_options_var_samp_fields"]: AliasType<{
	optionid?:boolean,
	siteid?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_site_options_variance_fields"]: AliasType<{
	optionid?:boolean,
	siteid?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.subscription_contract_status" */
["vectric_subscription_contract_status"]: AliasType<{
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_subscription_contract_status_aggregate_fields"],
	nodes?:ValueTypes["vectric_subscription_contract_status"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_aggregate_fields"]: AliasType<{
count?: [{	columns?:ValueTypes["vectric_subscription_contract_status_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_subscription_contract_status_max_fields"],
	min?:ValueTypes["vectric_subscription_contract_status_min_fields"],
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_subscription_contract_status_max_fields"]: AliasType<{
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_subscription_contract_status_min_fields"]: AliasType<{
	status?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_subscription_contract_status"],
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.subscription_contracts" */
["vectric_subscription_contracts"]: AliasType<{
	dateEnding?:boolean,
	dateStarted?:boolean,
events?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_subscription_events_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_subscription_events_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_subscription_events_bool_exp"] | null},ValueTypes["vectric_subscription_events"]],
events_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_subscription_events_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_subscription_events_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_subscription_events_bool_exp"] | null},ValueTypes["vectric_subscription_events_aggregate"]],
	/** An object relationship */
	orderItem?:ValueTypes["vectric_organization_order_items"],
	orderItemId?:boolean,
	status?:boolean,
	subscriptionContractId?:boolean,
	subscriptionId?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.subscription_contracts" */
["vectric_subscription_contracts_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_subscription_contracts_aggregate_fields"],
	nodes?:ValueTypes["vectric_subscription_contracts"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.subscription_contracts" */
["vectric_subscription_contracts_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_subscription_contracts_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_subscription_contracts_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_subscription_contracts_max_fields"],
	min?:ValueTypes["vectric_subscription_contracts_min_fields"],
	stddev?:ValueTypes["vectric_subscription_contracts_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_subscription_contracts_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_subscription_contracts_stddev_samp_fields"],
	sum?:ValueTypes["vectric_subscription_contracts_sum_fields"],
	var_pop?:ValueTypes["vectric_subscription_contracts_var_pop_fields"],
	var_samp?:ValueTypes["vectric_subscription_contracts_var_samp_fields"],
	variance?:ValueTypes["vectric_subscription_contracts_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_subscription_contracts_avg_fields"]: AliasType<{
	orderItemId?:boolean,
	subscriptionContractId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_subscription_contracts_max_fields"]: AliasType<{
	dateEnding?:boolean,
	dateStarted?:boolean,
	orderItemId?:boolean,
	status?:boolean,
	subscriptionContractId?:boolean,
	subscriptionId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_subscription_contracts_min_fields"]: AliasType<{
	dateEnding?:boolean,
	dateStarted?:boolean,
	orderItemId?:boolean,
	status?:boolean,
	subscriptionContractId?:boolean,
	subscriptionId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.subscription_contracts" */
["vectric_subscription_contracts_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_subscription_contracts"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_subscription_contracts_stddev_fields"]: AliasType<{
	orderItemId?:boolean,
	subscriptionContractId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_subscription_contracts_stddev_pop_fields"]: AliasType<{
	orderItemId?:boolean,
	subscriptionContractId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_subscription_contracts_stddev_samp_fields"]: AliasType<{
	orderItemId?:boolean,
	subscriptionContractId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_subscription_contracts_sum_fields"]: AliasType<{
	orderItemId?:boolean,
	subscriptionContractId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_subscription_contracts_var_pop_fields"]: AliasType<{
	orderItemId?:boolean,
	subscriptionContractId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_subscription_contracts_var_samp_fields"]: AliasType<{
	orderItemId?:boolean,
	subscriptionContractId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_subscription_contracts_variance_fields"]: AliasType<{
	orderItemId?:boolean,
	subscriptionContractId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.subscription_events" */
["vectric_subscription_events"]: AliasType<{
	actionTaken?:boolean,
	dateCreated?:boolean,
	dateProcessed?:boolean,
	eventId?:boolean,
	eventType?:boolean,
	fastspringInternalOrderId?:boolean,
	fastspringOrderReference?:boolean,
	fastspringSubscriptionId?:boolean,
	orderItemId?:boolean,
	subscriptionContractId?:boolean,
	subscriptionDateStarted?:boolean,
	subscriptionDeactivationDate?:boolean,
	subscriptionNextRebillDate?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.subscription_events" */
["vectric_subscription_events_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_subscription_events_aggregate_fields"],
	nodes?:ValueTypes["vectric_subscription_events"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.subscription_events" */
["vectric_subscription_events_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_subscription_events_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_subscription_events_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_subscription_events_max_fields"],
	min?:ValueTypes["vectric_subscription_events_min_fields"],
	stddev?:ValueTypes["vectric_subscription_events_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_subscription_events_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_subscription_events_stddev_samp_fields"],
	sum?:ValueTypes["vectric_subscription_events_sum_fields"],
	var_pop?:ValueTypes["vectric_subscription_events_var_pop_fields"],
	var_samp?:ValueTypes["vectric_subscription_events_var_samp_fields"],
	variance?:ValueTypes["vectric_subscription_events_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_subscription_events_avg_fields"]: AliasType<{
	eventId?:boolean,
	orderItemId?:boolean,
	subscriptionContractId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_subscription_events_max_fields"]: AliasType<{
	actionTaken?:boolean,
	dateCreated?:boolean,
	dateProcessed?:boolean,
	eventId?:boolean,
	eventType?:boolean,
	fastspringInternalOrderId?:boolean,
	fastspringOrderReference?:boolean,
	fastspringSubscriptionId?:boolean,
	orderItemId?:boolean,
	subscriptionContractId?:boolean,
	subscriptionDateStarted?:boolean,
	subscriptionDeactivationDate?:boolean,
	subscriptionNextRebillDate?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_subscription_events_min_fields"]: AliasType<{
	actionTaken?:boolean,
	dateCreated?:boolean,
	dateProcessed?:boolean,
	eventId?:boolean,
	eventType?:boolean,
	fastspringInternalOrderId?:boolean,
	fastspringOrderReference?:boolean,
	fastspringSubscriptionId?:boolean,
	orderItemId?:boolean,
	subscriptionContractId?:boolean,
	subscriptionDateStarted?:boolean,
	subscriptionDeactivationDate?:boolean,
	subscriptionNextRebillDate?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.subscription_events" */
["vectric_subscription_events_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_subscription_events"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_subscription_events_stddev_fields"]: AliasType<{
	eventId?:boolean,
	orderItemId?:boolean,
	subscriptionContractId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_subscription_events_stddev_pop_fields"]: AliasType<{
	eventId?:boolean,
	orderItemId?:boolean,
	subscriptionContractId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_subscription_events_stddev_samp_fields"]: AliasType<{
	eventId?:boolean,
	orderItemId?:boolean,
	subscriptionContractId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_subscription_events_sum_fields"]: AliasType<{
	eventId?:boolean,
	orderItemId?:boolean,
	subscriptionContractId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_subscription_events_var_pop_fields"]: AliasType<{
	eventId?:boolean,
	orderItemId?:boolean,
	subscriptionContractId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_subscription_events_var_samp_fields"]: AliasType<{
	eventId?:boolean,
	orderItemId?:boolean,
	subscriptionContractId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_subscription_events_variance_fields"]: AliasType<{
	eventId?:boolean,
	orderItemId?:boolean,
	subscriptionContractId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token"]: AliasType<{
	/** An object relationship */
	customer?:ValueTypes["vectric_sales_customers"],
	customerId?:boolean,
	dateExpired?:boolean,
	dateGenerated?:boolean,
	/** An object relationship */
	product?:ValueTypes["vectric_products_products"],
	productId?:boolean,
	token?:boolean,
	toolpathSaverTokenId?:boolean,
	used?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_toolpath_saver_token_aggregate_fields"],
	nodes?:ValueTypes["vectric_toolpath_saver_token"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_toolpath_saver_token_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_toolpath_saver_token_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_toolpath_saver_token_max_fields"],
	min?:ValueTypes["vectric_toolpath_saver_token_min_fields"],
	stddev?:ValueTypes["vectric_toolpath_saver_token_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_toolpath_saver_token_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_toolpath_saver_token_stddev_samp_fields"],
	sum?:ValueTypes["vectric_toolpath_saver_token_sum_fields"],
	var_pop?:ValueTypes["vectric_toolpath_saver_token_var_pop_fields"],
	var_samp?:ValueTypes["vectric_toolpath_saver_token_var_samp_fields"],
	variance?:ValueTypes["vectric_toolpath_saver_token_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_toolpath_saver_token_avg_fields"]: AliasType<{
	customerId?:boolean,
	productId?:boolean,
	toolpathSaverTokenId?:boolean,
	used?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_toolpath_saver_token_max_fields"]: AliasType<{
	customerId?:boolean,
	dateExpired?:boolean,
	dateGenerated?:boolean,
	productId?:boolean,
	token?:boolean,
	toolpathSaverTokenId?:boolean,
	used?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_toolpath_saver_token_min_fields"]: AliasType<{
	customerId?:boolean,
	dateExpired?:boolean,
	dateGenerated?:boolean,
	productId?:boolean,
	token?:boolean,
	toolpathSaverTokenId?:boolean,
	used?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_toolpath_saver_token"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_toolpath_saver_token_stddev_fields"]: AliasType<{
	customerId?:boolean,
	productId?:boolean,
	toolpathSaverTokenId?:boolean,
	used?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_toolpath_saver_token_stddev_pop_fields"]: AliasType<{
	customerId?:boolean,
	productId?:boolean,
	toolpathSaverTokenId?:boolean,
	used?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_toolpath_saver_token_stddev_samp_fields"]: AliasType<{
	customerId?:boolean,
	productId?:boolean,
	toolpathSaverTokenId?:boolean,
	used?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_toolpath_saver_token_sum_fields"]: AliasType<{
	customerId?:boolean,
	productId?:boolean,
	toolpathSaverTokenId?:boolean,
	used?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_toolpath_saver_token_var_pop_fields"]: AliasType<{
	customerId?:boolean,
	productId?:boolean,
	toolpathSaverTokenId?:boolean,
	used?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_toolpath_saver_token_var_samp_fields"]: AliasType<{
	customerId?:boolean,
	productId?:boolean,
	toolpathSaverTokenId?:boolean,
	used?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_toolpath_saver_token_variance_fields"]: AliasType<{
	customerId?:boolean,
	productId?:boolean,
	toolpathSaverTokenId?:boolean,
	used?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.trial_order" */
["vectric_trial_order"]: AliasType<{
	/** An object relationship */
	customer?:ValueTypes["vectric_sales_customers"],
	customerId?:boolean,
	endDate?:boolean,
	orderId?:boolean,
	/** An object relationship */
	product?:ValueTypes["vectric_products_products"],
	productId?:boolean,
	startDate?:boolean,
	valid?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.trial_order" */
["vectric_trial_order_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_trial_order_aggregate_fields"],
	nodes?:ValueTypes["vectric_trial_order"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.trial_order" */
["vectric_trial_order_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_trial_order_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_trial_order_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_trial_order_max_fields"],
	min?:ValueTypes["vectric_trial_order_min_fields"],
	stddev?:ValueTypes["vectric_trial_order_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_trial_order_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_trial_order_stddev_samp_fields"],
	sum?:ValueTypes["vectric_trial_order_sum_fields"],
	var_pop?:ValueTypes["vectric_trial_order_var_pop_fields"],
	var_samp?:ValueTypes["vectric_trial_order_var_samp_fields"],
	variance?:ValueTypes["vectric_trial_order_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_trial_order_avg_fields"]: AliasType<{
	customerId?:boolean,
	orderId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_trial_order_max_fields"]: AliasType<{
	customerId?:boolean,
	endDate?:boolean,
	orderId?:boolean,
	productId?:boolean,
	startDate?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_trial_order_min_fields"]: AliasType<{
	customerId?:boolean,
	endDate?:boolean,
	orderId?:boolean,
	productId?:boolean,
	startDate?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.trial_order" */
["vectric_trial_order_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_trial_order"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_trial_order_stddev_fields"]: AliasType<{
	customerId?:boolean,
	orderId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_trial_order_stddev_pop_fields"]: AliasType<{
	customerId?:boolean,
	orderId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_trial_order_stddev_samp_fields"]: AliasType<{
	customerId?:boolean,
	orderId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_trial_order_sum_fields"]: AliasType<{
	customerId?:boolean,
	orderId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_trial_order_var_pop_fields"]: AliasType<{
	customerId?:boolean,
	orderId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_trial_order_var_samp_fields"]: AliasType<{
	customerId?:boolean,
	orderId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_trial_order_variance_fields"]: AliasType<{
	customerId?:boolean,
	orderId?:boolean,
	productId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.update_requests" */
["vectric_update_requests"]: AliasType<{
	dateAccessed?:boolean,
	ipAddress?:boolean,
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	osMajorVersion?:boolean,
	osMinorVersion?:boolean,
	productName?:boolean,
	requestId?:boolean,
	wProcessorArch?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.update_requests" */
["vectric_update_requests_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_update_requests_aggregate_fields"],
	nodes?:ValueTypes["vectric_update_requests"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.update_requests" */
["vectric_update_requests_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_update_requests_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_update_requests_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_update_requests_max_fields"],
	min?:ValueTypes["vectric_update_requests_min_fields"],
	stddev?:ValueTypes["vectric_update_requests_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_update_requests_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_update_requests_stddev_samp_fields"],
	sum?:ValueTypes["vectric_update_requests_sum_fields"],
	var_pop?:ValueTypes["vectric_update_requests_var_pop_fields"],
	var_samp?:ValueTypes["vectric_update_requests_var_samp_fields"],
	variance?:ValueTypes["vectric_update_requests_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_update_requests_avg_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	osMajorVersion?:boolean,
	osMinorVersion?:boolean,
	requestId?:boolean,
	wProcessorArch?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_update_requests_max_fields"]: AliasType<{
	dateAccessed?:boolean,
	ipAddress?:boolean,
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	osMajorVersion?:boolean,
	osMinorVersion?:boolean,
	productName?:boolean,
	requestId?:boolean,
	wProcessorArch?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_update_requests_min_fields"]: AliasType<{
	dateAccessed?:boolean,
	ipAddress?:boolean,
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	osMajorVersion?:boolean,
	osMinorVersion?:boolean,
	productName?:boolean,
	requestId?:boolean,
	wProcessorArch?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.update_requests" */
["vectric_update_requests_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_update_requests"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_update_requests_stddev_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	osMajorVersion?:boolean,
	osMinorVersion?:boolean,
	requestId?:boolean,
	wProcessorArch?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_update_requests_stddev_pop_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	osMajorVersion?:boolean,
	osMinorVersion?:boolean,
	requestId?:boolean,
	wProcessorArch?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_update_requests_stddev_samp_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	osMajorVersion?:boolean,
	osMinorVersion?:boolean,
	requestId?:boolean,
	wProcessorArch?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_update_requests_sum_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	osMajorVersion?:boolean,
	osMinorVersion?:boolean,
	requestId?:boolean,
	wProcessorArch?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_update_requests_var_pop_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	osMajorVersion?:boolean,
	osMinorVersion?:boolean,
	requestId?:boolean,
	wProcessorArch?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_update_requests_var_samp_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	osMajorVersion?:boolean,
	osMinorVersion?:boolean,
	requestId?:boolean,
	wProcessorArch?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_update_requests_variance_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	osMajorVersion?:boolean,
	osMinorVersion?:boolean,
	requestId?:boolean,
	wProcessorArch?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.upgrade_tokens" */
["vectric_upgrade_tokens"]: AliasType<{
	customerId?:boolean,
	dateCreated?:boolean,
	dateUsed?:boolean,
	/** An object relationship */
	fromProduct?:ValueTypes["vectric_sales_salesitem_products"],
	orderItemProductId?:boolean,
	/** An object relationship */
	toProduct?:ValueTypes["vectric_products_upgrade_eligibility"],
	token?:boolean,
	upgradeEligibilityId?:boolean,
	upgradedToOrderItemProduct?:boolean,
	used?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_upgrade_tokens_aggregate_fields"],
	nodes?:ValueTypes["vectric_upgrade_tokens"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_upgrade_tokens_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_upgrade_tokens_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_upgrade_tokens_max_fields"],
	min?:ValueTypes["vectric_upgrade_tokens_min_fields"],
	stddev?:ValueTypes["vectric_upgrade_tokens_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_upgrade_tokens_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_upgrade_tokens_stddev_samp_fields"],
	sum?:ValueTypes["vectric_upgrade_tokens_sum_fields"],
	var_pop?:ValueTypes["vectric_upgrade_tokens_var_pop_fields"],
	var_samp?:ValueTypes["vectric_upgrade_tokens_var_samp_fields"],
	variance?:ValueTypes["vectric_upgrade_tokens_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_upgrade_tokens_avg_fields"]: AliasType<{
	customerId?:boolean,
	orderItemProductId?:boolean,
	upgradeEligibilityId?:boolean,
	upgradedToOrderItemProduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_upgrade_tokens_max_fields"]: AliasType<{
	customerId?:boolean,
	dateCreated?:boolean,
	dateUsed?:boolean,
	orderItemProductId?:boolean,
	token?:boolean,
	upgradeEligibilityId?:boolean,
	upgradedToOrderItemProduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_upgrade_tokens_min_fields"]: AliasType<{
	customerId?:boolean,
	dateCreated?:boolean,
	dateUsed?:boolean,
	orderItemProductId?:boolean,
	token?:boolean,
	upgradeEligibilityId?:boolean,
	upgradedToOrderItemProduct?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_upgrade_tokens"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_upgrade_tokens_stddev_fields"]: AliasType<{
	customerId?:boolean,
	orderItemProductId?:boolean,
	upgradeEligibilityId?:boolean,
	upgradedToOrderItemProduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_upgrade_tokens_stddev_pop_fields"]: AliasType<{
	customerId?:boolean,
	orderItemProductId?:boolean,
	upgradeEligibilityId?:boolean,
	upgradedToOrderItemProduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_upgrade_tokens_stddev_samp_fields"]: AliasType<{
	customerId?:boolean,
	orderItemProductId?:boolean,
	upgradeEligibilityId?:boolean,
	upgradedToOrderItemProduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_upgrade_tokens_sum_fields"]: AliasType<{
	customerId?:boolean,
	orderItemProductId?:boolean,
	upgradeEligibilityId?:boolean,
	upgradedToOrderItemProduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_upgrade_tokens_var_pop_fields"]: AliasType<{
	customerId?:boolean,
	orderItemProductId?:boolean,
	upgradeEligibilityId?:boolean,
	upgradedToOrderItemProduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_upgrade_tokens_var_samp_fields"]: AliasType<{
	customerId?:boolean,
	orderItemProductId?:boolean,
	upgradeEligibilityId?:boolean,
	upgradedToOrderItemProduct?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_upgrade_tokens_variance_fields"]: AliasType<{
	customerId?:boolean,
	orderItemProductId?:boolean,
	upgradeEligibilityId?:boolean,
	upgradedToOrderItemProduct?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.upgrades_feature" */
["vectric_upgrades_feature"]: AliasType<{
	enabled?:boolean,
	extendedDescription?:boolean,
	featureId?:boolean,
	title?:boolean,
upgradeProductTypeFeatures?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrades_product_type_feature_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrades_product_type_feature_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrades_product_type_feature_bool_exp"] | null},ValueTypes["vectric_upgrades_product_type_feature"]],
upgradeProductTypeFeatures_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrades_product_type_feature_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrades_product_type_feature_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrades_product_type_feature_bool_exp"] | null},ValueTypes["vectric_upgrades_product_type_feature_aggregate"]],
upgradeVersionFeatures?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrades_version_feature_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrades_version_feature_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrades_version_feature_bool_exp"] | null},ValueTypes["vectric_upgrades_version_feature"]],
upgradeVersionFeatures_aggregate?: [{	/** distinct select on columns */
	distinct_on?:ValueTypes["vectric_upgrades_version_feature_select_column"][],	/** limit the number of rows returned */
	limit?:number | null,	/** skip the first n rows. Use only with order_by */
	offset?:number | null,	/** sort the rows by one or more columns */
	order_by?:ValueTypes["vectric_upgrades_version_feature_order_by"][],	/** filter the rows returned */
	where?:ValueTypes["vectric_upgrades_version_feature_bool_exp"] | null},ValueTypes["vectric_upgrades_version_feature_aggregate"]],
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.upgrades_feature" */
["vectric_upgrades_feature_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_upgrades_feature_aggregate_fields"],
	nodes?:ValueTypes["vectric_upgrades_feature"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.upgrades_feature" */
["vectric_upgrades_feature_aggregate_fields"]: AliasType<{
count?: [{	columns?:ValueTypes["vectric_upgrades_feature_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_upgrades_feature_max_fields"],
	min?:ValueTypes["vectric_upgrades_feature_min_fields"],
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_upgrades_feature_max_fields"]: AliasType<{
	extendedDescription?:boolean,
	featureId?:boolean,
	title?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_upgrades_feature_min_fields"]: AliasType<{
	extendedDescription?:boolean,
	featureId?:boolean,
	title?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.upgrades_feature" */
["vectric_upgrades_feature_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_upgrades_feature"],
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature"]: AliasType<{
	feature?:boolean,
	fromProductType?:boolean,
	/** An object relationship */
	fromProductTypeObject?:ValueTypes["vectric_products_producttype"],
	ranking?:boolean,
	toProductType?:boolean,
	/** An object relationship */
	toProductTypeObject?:ValueTypes["vectric_products_producttype"],
	/** An object relationship */
	upgradeFeatureObject?:ValueTypes["vectric_upgrades_feature"],
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_upgrades_product_type_feature_aggregate_fields"],
	nodes?:ValueTypes["vectric_upgrades_product_type_feature"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_upgrades_product_type_feature_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_upgrades_product_type_feature_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_upgrades_product_type_feature_max_fields"],
	min?:ValueTypes["vectric_upgrades_product_type_feature_min_fields"],
	stddev?:ValueTypes["vectric_upgrades_product_type_feature_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_upgrades_product_type_feature_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_upgrades_product_type_feature_stddev_samp_fields"],
	sum?:ValueTypes["vectric_upgrades_product_type_feature_sum_fields"],
	var_pop?:ValueTypes["vectric_upgrades_product_type_feature_var_pop_fields"],
	var_samp?:ValueTypes["vectric_upgrades_product_type_feature_var_samp_fields"],
	variance?:ValueTypes["vectric_upgrades_product_type_feature_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_upgrades_product_type_feature_avg_fields"]: AliasType<{
	fromProductType?:boolean,
	ranking?:boolean,
	toProductType?:boolean,
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_upgrades_product_type_feature_max_fields"]: AliasType<{
	feature?:boolean,
	fromProductType?:boolean,
	ranking?:boolean,
	toProductType?:boolean,
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_upgrades_product_type_feature_min_fields"]: AliasType<{
	feature?:boolean,
	fromProductType?:boolean,
	ranking?:boolean,
	toProductType?:boolean,
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_upgrades_product_type_feature"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_upgrades_product_type_feature_stddev_fields"]: AliasType<{
	fromProductType?:boolean,
	ranking?:boolean,
	toProductType?:boolean,
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_upgrades_product_type_feature_stddev_pop_fields"]: AliasType<{
	fromProductType?:boolean,
	ranking?:boolean,
	toProductType?:boolean,
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_upgrades_product_type_feature_stddev_samp_fields"]: AliasType<{
	fromProductType?:boolean,
	ranking?:boolean,
	toProductType?:boolean,
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_upgrades_product_type_feature_sum_fields"]: AliasType<{
	fromProductType?:boolean,
	ranking?:boolean,
	toProductType?:boolean,
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_upgrades_product_type_feature_var_pop_fields"]: AliasType<{
	fromProductType?:boolean,
	ranking?:boolean,
	toProductType?:boolean,
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_upgrades_product_type_feature_var_samp_fields"]: AliasType<{
	fromProductType?:boolean,
	ranking?:boolean,
	toProductType?:boolean,
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_upgrades_product_type_feature_variance_fields"]: AliasType<{
	fromProductType?:boolean,
	ranking?:boolean,
	toProductType?:boolean,
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature"]: AliasType<{
	feature?:boolean,
	majorVersion?:boolean,
	minorVersion?:boolean,
	productType?:boolean,
	/** An object relationship */
	productTypeObject?:ValueTypes["vectric_products_producttype"],
	ranking?:boolean,
	/** An object relationship */
	upgradeFeatureObject?:ValueTypes["vectric_upgrades_feature"],
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_upgrades_version_feature_aggregate_fields"],
	nodes?:ValueTypes["vectric_upgrades_version_feature"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_upgrades_version_feature_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_upgrades_version_feature_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_upgrades_version_feature_max_fields"],
	min?:ValueTypes["vectric_upgrades_version_feature_min_fields"],
	stddev?:ValueTypes["vectric_upgrades_version_feature_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_upgrades_version_feature_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_upgrades_version_feature_stddev_samp_fields"],
	sum?:ValueTypes["vectric_upgrades_version_feature_sum_fields"],
	var_pop?:ValueTypes["vectric_upgrades_version_feature_var_pop_fields"],
	var_samp?:ValueTypes["vectric_upgrades_version_feature_var_samp_fields"],
	variance?:ValueTypes["vectric_upgrades_version_feature_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_upgrades_version_feature_avg_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersion?:boolean,
	productType?:boolean,
	ranking?:boolean,
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_upgrades_version_feature_max_fields"]: AliasType<{
	feature?:boolean,
	majorVersion?:boolean,
	minorVersion?:boolean,
	productType?:boolean,
	ranking?:boolean,
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_upgrades_version_feature_min_fields"]: AliasType<{
	feature?:boolean,
	majorVersion?:boolean,
	minorVersion?:boolean,
	productType?:boolean,
	ranking?:boolean,
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_upgrades_version_feature"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_upgrades_version_feature_stddev_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersion?:boolean,
	productType?:boolean,
	ranking?:boolean,
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_upgrades_version_feature_stddev_pop_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersion?:boolean,
	productType?:boolean,
	ranking?:boolean,
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_upgrades_version_feature_stddev_samp_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersion?:boolean,
	productType?:boolean,
	ranking?:boolean,
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_upgrades_version_feature_sum_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersion?:boolean,
	productType?:boolean,
	ranking?:boolean,
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_upgrades_version_feature_var_pop_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersion?:boolean,
	productType?:boolean,
	ranking?:boolean,
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_upgrades_version_feature_var_samp_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersion?:boolean,
	productType?:boolean,
	ranking?:boolean,
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_upgrades_version_feature_variance_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersion?:boolean,
	productType?:boolean,
	ranking?:boolean,
	upgradeId?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees"]: AliasType<{
	attendeeid?:boolean,
	bringingsample?:boolean,
	company?:boolean,
	customerid?:boolean,
	diet?:boolean,
	email?:boolean,
	fastspringreference?:boolean,
	firstname?:boolean,
	forumname?:boolean,
	lastname?:boolean,
	notes?:boolean,
	productid?:boolean,
	purchasedate?:boolean,
	reference?:boolean,
	state?:boolean,
	status?:boolean,
	tshirtsize?:boolean,
	uk?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_usergroup_2019_attendees_aggregate_fields"],
	nodes?:ValueTypes["vectric_usergroup_2019_attendees"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_usergroup_2019_attendees_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_usergroup_2019_attendees_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_usergroup_2019_attendees_max_fields"],
	min?:ValueTypes["vectric_usergroup_2019_attendees_min_fields"],
	stddev?:ValueTypes["vectric_usergroup_2019_attendees_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_usergroup_2019_attendees_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_usergroup_2019_attendees_stddev_samp_fields"],
	sum?:ValueTypes["vectric_usergroup_2019_attendees_sum_fields"],
	var_pop?:ValueTypes["vectric_usergroup_2019_attendees_var_pop_fields"],
	var_samp?:ValueTypes["vectric_usergroup_2019_attendees_var_samp_fields"],
	variance?:ValueTypes["vectric_usergroup_2019_attendees_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_usergroup_2019_attendees_avg_fields"]: AliasType<{
	attendeeid?:boolean,
	customerid?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_usergroup_2019_attendees_max_fields"]: AliasType<{
	attendeeid?:boolean,
	company?:boolean,
	customerid?:boolean,
	diet?:boolean,
	email?:boolean,
	fastspringreference?:boolean,
	firstname?:boolean,
	forumname?:boolean,
	lastname?:boolean,
	notes?:boolean,
	productid?:boolean,
	purchasedate?:boolean,
	reference?:boolean,
	state?:boolean,
	status?:boolean,
	tshirtsize?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_usergroup_2019_attendees_min_fields"]: AliasType<{
	attendeeid?:boolean,
	company?:boolean,
	customerid?:boolean,
	diet?:boolean,
	email?:boolean,
	fastspringreference?:boolean,
	firstname?:boolean,
	forumname?:boolean,
	lastname?:boolean,
	notes?:boolean,
	productid?:boolean,
	purchasedate?:boolean,
	reference?:boolean,
	state?:boolean,
	status?:boolean,
	tshirtsize?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_usergroup_2019_attendees"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_usergroup_2019_attendees_stddev_fields"]: AliasType<{
	attendeeid?:boolean,
	customerid?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_usergroup_2019_attendees_stddev_pop_fields"]: AliasType<{
	attendeeid?:boolean,
	customerid?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_usergroup_2019_attendees_stddev_samp_fields"]: AliasType<{
	attendeeid?:boolean,
	customerid?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_usergroup_2019_attendees_sum_fields"]: AliasType<{
	attendeeid?:boolean,
	customerid?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_usergroup_2019_attendees_var_pop_fields"]: AliasType<{
	attendeeid?:boolean,
	customerid?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_usergroup_2019_attendees_var_samp_fields"]: AliasType<{
	attendeeid?:boolean,
	customerid?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_usergroup_2019_attendees_variance_fields"]: AliasType<{
	attendeeid?:boolean,
	customerid?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist"]: AliasType<{
	attendeeid?:boolean,
	customerid?:boolean,
	desiredquantity?:boolean,
	email?:boolean,
	invitationdate?:boolean,
	productid?:boolean,
	reference?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_usergroup_2019_waitlist_aggregate_fields"],
	nodes?:ValueTypes["vectric_usergroup_2019_waitlist"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_usergroup_2019_waitlist_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_usergroup_2019_waitlist_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_usergroup_2019_waitlist_max_fields"],
	min?:ValueTypes["vectric_usergroup_2019_waitlist_min_fields"],
	stddev?:ValueTypes["vectric_usergroup_2019_waitlist_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_usergroup_2019_waitlist_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_usergroup_2019_waitlist_stddev_samp_fields"],
	sum?:ValueTypes["vectric_usergroup_2019_waitlist_sum_fields"],
	var_pop?:ValueTypes["vectric_usergroup_2019_waitlist_var_pop_fields"],
	var_samp?:ValueTypes["vectric_usergroup_2019_waitlist_var_samp_fields"],
	variance?:ValueTypes["vectric_usergroup_2019_waitlist_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_usergroup_2019_waitlist_avg_fields"]: AliasType<{
	attendeeid?:boolean,
	customerid?:boolean,
	desiredquantity?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_usergroup_2019_waitlist_max_fields"]: AliasType<{
	attendeeid?:boolean,
	customerid?:boolean,
	desiredquantity?:boolean,
	email?:boolean,
	invitationdate?:boolean,
	productid?:boolean,
	reference?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_usergroup_2019_waitlist_min_fields"]: AliasType<{
	attendeeid?:boolean,
	customerid?:boolean,
	desiredquantity?:boolean,
	email?:boolean,
	invitationdate?:boolean,
	productid?:boolean,
	reference?:boolean,
	status?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_usergroup_2019_waitlist"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_usergroup_2019_waitlist_stddev_fields"]: AliasType<{
	attendeeid?:boolean,
	customerid?:boolean,
	desiredquantity?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_usergroup_2019_waitlist_stddev_pop_fields"]: AliasType<{
	attendeeid?:boolean,
	customerid?:boolean,
	desiredquantity?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_usergroup_2019_waitlist_stddev_samp_fields"]: AliasType<{
	attendeeid?:boolean,
	customerid?:boolean,
	desiredquantity?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_usergroup_2019_waitlist_sum_fields"]: AliasType<{
	attendeeid?:boolean,
	customerid?:boolean,
	desiredquantity?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_usergroup_2019_waitlist_var_pop_fields"]: AliasType<{
	attendeeid?:boolean,
	customerid?:boolean,
	desiredquantity?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_usergroup_2019_waitlist_var_samp_fields"]: AliasType<{
	attendeeid?:boolean,
	customerid?:boolean,
	desiredquantity?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_usergroup_2019_waitlist_variance_fields"]: AliasType<{
	attendeeid?:boolean,
	customerid?:boolean,
	desiredquantity?:boolean,
	productid?:boolean,
		__typename?: boolean
}>;
	/** columns and relationships of "vectric.version_code" */
["vectric_version_code"]: AliasType<{
	displayVersion?:boolean,
	latest?:boolean,
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	notifying?:boolean,
	patchUrl?:boolean,
	releaseDate?:boolean,
	url?:boolean,
	versionCodeId?:boolean,
	visible?:boolean,
		__typename?: boolean
}>;
	/** aggregated selection of "vectric.version_code" */
["vectric_version_code_aggregate"]: AliasType<{
	aggregate?:ValueTypes["vectric_version_code_aggregate_fields"],
	nodes?:ValueTypes["vectric_version_code"],
		__typename?: boolean
}>;
	/** aggregate fields of "vectric.version_code" */
["vectric_version_code_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["vectric_version_code_avg_fields"],
count?: [{	columns?:ValueTypes["vectric_version_code_select_column"][],	distinct?:boolean | null},boolean],
	max?:ValueTypes["vectric_version_code_max_fields"],
	min?:ValueTypes["vectric_version_code_min_fields"],
	stddev?:ValueTypes["vectric_version_code_stddev_fields"],
	stddev_pop?:ValueTypes["vectric_version_code_stddev_pop_fields"],
	stddev_samp?:ValueTypes["vectric_version_code_stddev_samp_fields"],
	sum?:ValueTypes["vectric_version_code_sum_fields"],
	var_pop?:ValueTypes["vectric_version_code_var_pop_fields"],
	var_samp?:ValueTypes["vectric_version_code_var_samp_fields"],
	variance?:ValueTypes["vectric_version_code_variance_fields"],
		__typename?: boolean
}>;
	/** aggregate avg on columns */
["vectric_version_code_avg_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	versionCodeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate max on columns */
["vectric_version_code_max_fields"]: AliasType<{
	displayVersion?:boolean,
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	patchUrl?:boolean,
	releaseDate?:boolean,
	url?:boolean,
	versionCodeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate min on columns */
["vectric_version_code_min_fields"]: AliasType<{
	displayVersion?:boolean,
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	patchUrl?:boolean,
	releaseDate?:boolean,
	url?:boolean,
	versionCodeId?:boolean,
		__typename?: boolean
}>;
	/** response of any mutation on the table "vectric.version_code" */
["vectric_version_code_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["vectric_version_code"],
		__typename?: boolean
}>;
	/** aggregate stddev on columns */
["vectric_version_code_stddev_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	versionCodeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_pop on columns */
["vectric_version_code_stddev_pop_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	versionCodeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate stddev_samp on columns */
["vectric_version_code_stddev_samp_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	versionCodeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate sum on columns */
["vectric_version_code_sum_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	versionCodeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_pop on columns */
["vectric_version_code_var_pop_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	versionCodeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate var_samp on columns */
["vectric_version_code_var_samp_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	versionCodeId?:boolean,
		__typename?: boolean
}>;
	/** aggregate variance on columns */
["vectric_version_code_variance_fields"]: AliasType<{
	majorVersion?:boolean,
	minorVersionOOX?:boolean,
	minorVersionOXO?:boolean,
	minorVersionXOO?:boolean,
	versionCodeId?:boolean,
		__typename?: boolean
}>;
	/** column ordering options */
["order_by"]:order_by;
	/** select columns of table "vectric.active_memberships" */
["vectric_active_memberships_select_column"]:vectric_active_memberships_select_column;
	/** select columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_select_column"]:vectric_active_upgrades_select_column;
	/** select columns of table "vectric.allocatable_bundles" */
["vectric_allocatable_bundles_select_column"]:vectric_allocatable_bundles_select_column;
	/** select columns of table "vectric.allocatable_licence_count" */
["vectric_allocatable_licence_count_select_column"]:vectric_allocatable_licence_count_select_column;
	/** select columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_select_column"]:vectric_allocated_bundles_select_column;
	/** unique or primary key constraints on table "vectric.allocation_summary" */
["vectric_allocation_summary_constraint"]:vectric_allocation_summary_constraint;
	/** unique or primary key constraints on table "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_constraint"]:vectric_allocation_summary_file_type_constraint;
	["vectric_allocation_summary_file_type_enum"]:vectric_allocation_summary_file_type_enum;
	/** select columns of table "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_select_column"]:vectric_allocation_summary_file_type_select_column;
	/** update columns of table "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_update_column"]:vectric_allocation_summary_file_type_update_column;
	/** select columns of table "vectric.allocation_summary" */
["vectric_allocation_summary_select_column"]:vectric_allocation_summary_select_column;
	/** update columns of table "vectric.allocation_summary" */
["vectric_allocation_summary_update_column"]:vectric_allocation_summary_update_column;
	/** unique or primary key constraints on table "vectric.continents" */
["vectric_continents_constraint"]:vectric_continents_constraint;
	/** select columns of table "vectric.continents" */
["vectric_continents_select_column"]:vectric_continents_select_column;
	/** update columns of table "vectric.continents" */
["vectric_continents_update_column"]:vectric_continents_update_column;
	/** unique or primary key constraints on table "vectric.countries" */
["vectric_countries_constraint"]:vectric_countries_constraint;
	/** select columns of table "vectric.countries" */
["vectric_countries_select_column"]:vectric_countries_select_column;
	/** update columns of table "vectric.countries" */
["vectric_countries_update_column"]:vectric_countries_update_column;
	/** unique or primary key constraints on table "vectric.customer_area" */
["vectric_customer_area_constraint"]:vectric_customer_area_constraint;
	/** unique or primary key constraints on table "vectric.customer_area_file" */
["vectric_customer_area_file_constraint"]:vectric_customer_area_file_constraint;
	/** select columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_select_column"]:vectric_customer_area_file_select_column;
	/** update columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_update_column"]:vectric_customer_area_file_update_column;
	/** select columns of table "vectric.customer_area" */
["vectric_customer_area_select_column"]:vectric_customer_area_select_column;
	/** update columns of table "vectric.customer_area" */
["vectric_customer_area_update_column"]:vectric_customer_area_update_column;
	/** unique or primary key constraints on table "vectric.customer_responses" */
["vectric_customer_responses_constraint"]:vectric_customer_responses_constraint;
	/** select columns of table "vectric.customer_responses" */
["vectric_customer_responses_select_column"]:vectric_customer_responses_select_column;
	/** update columns of table "vectric.customer_responses" */
["vectric_customer_responses_update_column"]:vectric_customer_responses_update_column;
	/** select columns of table "vectric.customer_sales" */
["vectric_customer_sales_select_column"]:vectric_customer_sales_select_column;
	/** unique or primary key constraints on table "vectric.customer_status" */
["vectric_customer_status_constraint"]:vectric_customer_status_constraint;
	/** select columns of table "vectric.customer_status" */
["vectric_customer_status_select_column"]:vectric_customer_status_select_column;
	/** update columns of table "vectric.customer_status" */
["vectric_customer_status_update_column"]:vectric_customer_status_update_column;
	/** unique or primary key constraints on table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_constraint"]:vectric_customer_zd_uploads_constraint;
	/** select columns of table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_select_column"]:vectric_customer_zd_uploads_select_column;
	/** update columns of table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_update_column"]:vectric_customer_zd_uploads_update_column;
	/** unique or primary key constraints on table "vectric.download" */
["vectric_download_constraint"]:vectric_download_constraint;
	/** unique or primary key constraints on table "vectric.download_record" */
["vectric_download_record_constraint"]:vectric_download_record_constraint;
	/** select columns of table "vectric.download_record" */
["vectric_download_record_select_column"]:vectric_download_record_select_column;
	/** update columns of table "vectric.download_record" */
["vectric_download_record_update_column"]:vectric_download_record_update_column;
	/** select columns of table "vectric.download" */
["vectric_download_select_column"]:vectric_download_select_column;
	/** update columns of table "vectric.download" */
["vectric_download_update_column"]:vectric_download_update_column;
	/** unique or primary key constraints on table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_constraint"]:vectric_enhancement_tokens_constraint;
	/** select columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_select_column"]:vectric_enhancement_tokens_select_column;
	/** update columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_update_column"]:vectric_enhancement_tokens_update_column;
	/** select columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_select_column"]:vectric_entitled_product_version_code_view_select_column;
	/** unique or primary key constraints on table "vectric.entitled_products" */
["vectric_entitled_products_constraint"]:vectric_entitled_products_constraint;
	/** select columns of table "vectric.entitled_products" */
["vectric_entitled_products_select_column"]:vectric_entitled_products_select_column;
	/** update columns of table "vectric.entitled_products" */
["vectric_entitled_products_update_column"]:vectric_entitled_products_update_column;
	/** unique or primary key constraints on table "vectric.entitlement_licences" */
["vectric_entitlement_licences_constraint"]:vectric_entitlement_licences_constraint;
	/** select columns of table "vectric.entitlement_licences" */
["vectric_entitlement_licences_select_column"]:vectric_entitlement_licences_select_column;
	/** update columns of table "vectric.entitlement_licences" */
["vectric_entitlement_licences_update_column"]:vectric_entitlement_licences_update_column;
	/** unique or primary key constraints on table "vectric.entitlements" */
["vectric_entitlements_constraint"]:vectric_entitlements_constraint;
	/** select columns of table "vectric.entitlements" */
["vectric_entitlements_select_column"]:vectric_entitlements_select_column;
	/** update columns of table "vectric.entitlements" */
["vectric_entitlements_update_column"]:vectric_entitlements_update_column;
	/** unique or primary key constraints on table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_constraint"]:vectric_free_clipart_tokens_constraint;
	/** select columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_select_column"]:vectric_free_clipart_tokens_select_column;
	/** update columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_update_column"]:vectric_free_clipart_tokens_update_column;
	/** unique or primary key constraints on table "vectric.freeclipart_category" */
["vectric_freeclipart_category_constraint"]:vectric_freeclipart_category_constraint;
	/** select columns of table "vectric.freeclipart_category" */
["vectric_freeclipart_category_select_column"]:vectric_freeclipart_category_select_column;
	/** update columns of table "vectric.freeclipart_category" */
["vectric_freeclipart_category_update_column"]:vectric_freeclipart_category_update_column;
	/** unique or primary key constraints on table "vectric.freeclipart" */
["vectric_freeclipart_constraint"]:vectric_freeclipart_constraint;
	/** unique or primary key constraints on table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_constraint"]:vectric_freeclipart_download_record_constraint;
	/** select columns of table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_select_column"]:vectric_freeclipart_download_record_select_column;
	/** update columns of table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_update_column"]:vectric_freeclipart_download_record_update_column;
	/** select columns of table "vectric.freeclipart" */
["vectric_freeclipart_select_column"]:vectric_freeclipart_select_column;
	/** update columns of table "vectric.freeclipart" */
["vectric_freeclipart_update_column"]:vectric_freeclipart_update_column;
	/** select columns of table "vectric.group_info" */
["vectric_group_info_select_column"]:vectric_group_info_select_column;
	/** unique or primary key constraints on table "vectric.group_roles" */
["vectric_group_roles_constraint"]:vectric_group_roles_constraint;
	/** select columns of table "vectric.group_roles" */
["vectric_group_roles_select_column"]:vectric_group_roles_select_column;
	/** update columns of table "vectric.group_roles" */
["vectric_group_roles_update_column"]:vectric_group_roles_update_column;
	/** unique or primary key constraints on table "vectric.group_user_role" */
["vectric_group_user_role_constraint"]:vectric_group_user_role_constraint;
	/** select columns of table "vectric.group_user_role" */
["vectric_group_user_role_select_column"]:vectric_group_user_role_select_column;
	/** update columns of table "vectric.group_user_role" */
["vectric_group_user_role_update_column"]:vectric_group_user_role_update_column;
	/** unique or primary key constraints on table "vectric.groups" */
["vectric_groups_constraint"]:vectric_groups_constraint;
	/** select columns of table "vectric.groups" */
["vectric_groups_select_column"]:vectric_groups_select_column;
	/** update columns of table "vectric.groups" */
["vectric_groups_update_column"]:vectric_groups_update_column;
	/** unique or primary key constraints on table "vectric.language_codes" */
["vectric_language_codes_constraint"]:vectric_language_codes_constraint;
	/** select columns of table "vectric.language_codes" */
["vectric_language_codes_select_column"]:vectric_language_codes_select_column;
	/** update columns of table "vectric.language_codes" */
["vectric_language_codes_update_column"]:vectric_language_codes_update_column;
	/** unique or primary key constraints on table "vectric.licence_log" */
["vectric_licence_log_constraint"]:vectric_licence_log_constraint;
	/** select columns of table "vectric.licence_log" */
["vectric_licence_log_select_column"]:vectric_licence_log_select_column;
	/** update columns of table "vectric.licence_log" */
["vectric_licence_log_update_column"]:vectric_licence_log_update_column;
	/** unique or primary key constraints on table "vectric.linkshortener_links" */
["vectric_linkshortener_links_constraint"]:vectric_linkshortener_links_constraint;
	/** select columns of table "vectric.linkshortener_links" */
["vectric_linkshortener_links_select_column"]:vectric_linkshortener_links_select_column;
	/** update columns of table "vectric.linkshortener_links" */
["vectric_linkshortener_links_update_column"]:vectric_linkshortener_links_update_column;
	/** unique or primary key constraints on table "vectric.makerspace_requests" */
["vectric_makerspace_requests_constraint"]:vectric_makerspace_requests_constraint;
	/** select columns of table "vectric.makerspace_requests" */
["vectric_makerspace_requests_select_column"]:vectric_makerspace_requests_select_column;
	/** update columns of table "vectric.makerspace_requests" */
["vectric_makerspace_requests_update_column"]:vectric_makerspace_requests_update_column;
	/** unique or primary key constraints on table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_constraint"]:vectric_membership_invitation_status_constraint;
	["vectric_membership_invitation_status_enum"]:vectric_membership_invitation_status_enum;
	/** select columns of table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_select_column"]:vectric_membership_invitation_status_select_column;
	/** update columns of table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_update_column"]:vectric_membership_invitation_status_update_column;
	/** unique or primary key constraints on table "vectric.membership_invitations" */
["vectric_membership_invitations_constraint"]:vectric_membership_invitations_constraint;
	/** select columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_select_column"]:vectric_membership_invitations_select_column;
	/** update columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_update_column"]:vectric_membership_invitations_update_column;
	/** unique or primary key constraints on table "vectric.membership_roles" */
["vectric_membership_roles_constraint"]:vectric_membership_roles_constraint;
	["vectric_membership_roles_enum"]:vectric_membership_roles_enum;
	/** select columns of table "vectric.membership_roles" */
["vectric_membership_roles_select_column"]:vectric_membership_roles_select_column;
	/** update columns of table "vectric.membership_roles" */
["vectric_membership_roles_update_column"]:vectric_membership_roles_update_column;
	/** unique or primary key constraints on table "vectric.membership_status" */
["vectric_membership_status_constraint"]:vectric_membership_status_constraint;
	["vectric_membership_status_enum"]:vectric_membership_status_enum;
	/** select columns of table "vectric.membership_status" */
["vectric_membership_status_select_column"]:vectric_membership_status_select_column;
	/** update columns of table "vectric.membership_status" */
["vectric_membership_status_update_column"]:vectric_membership_status_update_column;
	/** unique or primary key constraints on table "vectric.memberships" */
["vectric_memberships_constraint"]:vectric_memberships_constraint;
	/** select columns of table "vectric.memberships" */
["vectric_memberships_select_column"]:vectric_memberships_select_column;
	/** update columns of table "vectric.memberships" */
["vectric_memberships_update_column"]:vectric_memberships_update_column;
	/** unique or primary key constraints on table "vectric.oauth_client_details" */
["vectric_oauth_client_details_constraint"]:vectric_oauth_client_details_constraint;
	/** select columns of table "vectric.oauth_client_details" */
["vectric_oauth_client_details_select_column"]:vectric_oauth_client_details_select_column;
	/** update columns of table "vectric.oauth_client_details" */
["vectric_oauth_client_details_update_column"]:vectric_oauth_client_details_update_column;
	/** select columns of table "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails_select_column"]:vectric_oem_allocation_emails_select_column;
	/** unique or primary key constraints on table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_constraint"]:vectric_oem_detailed_products_constraint;
	/** select columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_select_column"]:vectric_oem_detailed_products_select_column;
	/** update columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_update_column"]:vectric_oem_detailed_products_update_column;
	/** unique or primary key constraints on table "vectric.oem_eval_request" */
["vectric_oem_eval_request_constraint"]:vectric_oem_eval_request_constraint;
	/** select columns of table "vectric.oem_eval_request" */
["vectric_oem_eval_request_select_column"]:vectric_oem_eval_request_select_column;
	/** update columns of table "vectric.oem_eval_request" */
["vectric_oem_eval_request_update_column"]:vectric_oem_eval_request_update_column;
	/** unique or primary key constraints on table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_constraint"]:vectric_oem_fastspring_item_bundle_constraint;
	/** select columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_select_column"]:vectric_oem_fastspring_item_bundle_select_column;
	/** update columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_update_column"]:vectric_oem_fastspring_item_bundle_update_column;
	/** unique or primary key constraints on table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_constraint"]:vectric_oem_fastspring_item_constraint;
	/** select columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_select_column"]:vectric_oem_fastspring_item_select_column;
	/** update columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_update_column"]:vectric_oem_fastspring_item_update_column;
	/** unique or primary key constraints on table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_constraint"]:vectric_oem_fastspring_order_constraint;
	/** select columns of table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_select_column"]:vectric_oem_fastspring_order_select_column;
	/** update columns of table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_update_column"]:vectric_oem_fastspring_order_update_column;
	/** unique or primary key constraints on table "vectric.oem_invite_status" */
["vectric_oem_invite_status_constraint"]:vectric_oem_invite_status_constraint;
	/** select columns of table "vectric.oem_invite_status" */
["vectric_oem_invite_status_select_column"]:vectric_oem_invite_status_select_column;
	/** update columns of table "vectric.oem_invite_status" */
["vectric_oem_invite_status_update_column"]:vectric_oem_invite_status_update_column;
	/** unique or primary key constraints on table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_constraint"]:vectric_oem_licence_allocation_type_constraint;
	/** select columns of table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_select_column"]:vectric_oem_licence_allocation_type_select_column;
	/** update columns of table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_update_column"]:vectric_oem_licence_allocation_type_update_column;
	/** unique or primary key constraints on table "vectric.oem_partners" */
["vectric_oem_partners_constraint"]:vectric_oem_partners_constraint;
	/** select columns of table "vectric.oem_partners" */
["vectric_oem_partners_select_column"]:vectric_oem_partners_select_column;
	/** update columns of table "vectric.oem_partners" */
["vectric_oem_partners_update_column"]:vectric_oem_partners_update_column;
	/** unique or primary key constraints on table "vectric.oem_products" */
["vectric_oem_products_constraint"]:vectric_oem_products_constraint;
	/** select columns of table "vectric.oem_products" */
["vectric_oem_products_select_column"]:vectric_oem_products_select_column;
	/** update columns of table "vectric.oem_products" */
["vectric_oem_products_update_column"]:vectric_oem_products_update_column;
	/** unique or primary key constraints on table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_constraint"]:vectric_oem_purchase_options_constraint;
	/** select columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_select_column"]:vectric_oem_purchase_options_select_column;
	/** update columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_update_column"]:vectric_oem_purchase_options_update_column;
	/** select columns of table "vectric.oem_staff_admin_ownership" */
["vectric_oem_staff_admin_ownership_select_column"]:vectric_oem_staff_admin_ownership_select_column;
	/** unique or primary key constraints on table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_constraint"]:vectric_oem_staff_customer_constraint;
	/** select columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_select_column"]:vectric_oem_staff_customer_select_column;
	/** update columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_update_column"]:vectric_oem_staff_customer_update_column;
	/** unique or primary key constraints on table "vectric.organization_audit" */
["vectric_organization_audit_constraint"]:vectric_organization_audit_constraint;
	/** select columns of table "vectric.organization_audit" */
["vectric_organization_audit_select_column"]:vectric_organization_audit_select_column;
	/** update columns of table "vectric.organization_audit" */
["vectric_organization_audit_update_column"]:vectric_organization_audit_update_column;
	/** unique or primary key constraints on table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_constraint"]:vectric_organization_licence_scope_constraint;
	["vectric_organization_licence_scope_enum"]:vectric_organization_licence_scope_enum;
	/** select columns of table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_select_column"]:vectric_organization_licence_scope_select_column;
	/** update columns of table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_update_column"]:vectric_organization_licence_scope_update_column;
	/** select columns of table "vectric.organization_memberships_admin_access" */
["vectric_organization_memberships_admin_access_select_column"]:vectric_organization_memberships_admin_access_select_column;
	/** unique or primary key constraints on table "vectric.organization_order_items" */
["vectric_organization_order_items_constraint"]:vectric_organization_order_items_constraint;
	/** select columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_select_column"]:vectric_organization_order_items_select_column;
	/** update columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_update_column"]:vectric_organization_order_items_update_column;
	/** unique or primary key constraints on table "vectric.organization_orders" */
["vectric_organization_orders_constraint"]:vectric_organization_orders_constraint;
	/** select columns of table "vectric.organization_orders" */
["vectric_organization_orders_select_column"]:vectric_organization_orders_select_column;
	/** update columns of table "vectric.organization_orders" */
["vectric_organization_orders_update_column"]:vectric_organization_orders_update_column;
	/** unique or primary key constraints on table "vectric.organization_types" */
["vectric_organization_types_constraint"]:vectric_organization_types_constraint;
	["vectric_organization_types_enum"]:vectric_organization_types_enum;
	/** select columns of table "vectric.organization_types" */
["vectric_organization_types_select_column"]:vectric_organization_types_select_column;
	/** update columns of table "vectric.organization_types" */
["vectric_organization_types_update_column"]:vectric_organization_types_update_column;
	/** unique or primary key constraints on table "vectric.organizations" */
["vectric_organizations_constraint"]:vectric_organizations_constraint;
	/** select columns of table "vectric.organizations" */
["vectric_organizations_select_column"]:vectric_organizations_select_column;
	/** update columns of table "vectric.organizations" */
["vectric_organizations_update_column"]:vectric_organizations_update_column;
	/** unique or primary key constraints on table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_constraint"]:vectric_owned_item_assignments_constraint;
	/** select columns of table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_select_column"]:vectric_owned_item_assignments_select_column;
	/** update columns of table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_update_column"]:vectric_owned_item_assignments_update_column;
	/** unique or primary key constraints on table "vectric.owned_items" */
["vectric_owned_items_constraint"]:vectric_owned_items_constraint;
	/** select columns of table "vectric.owned_items" */
["vectric_owned_items_select_column"]:vectric_owned_items_select_column;
	/** update columns of table "vectric.owned_items" */
["vectric_owned_items_update_column"]:vectric_owned_items_update_column;
	/** unique or primary key constraints on table "vectric.owned_products" */
["vectric_owned_products_constraint"]:vectric_owned_products_constraint;
	/** select columns of table "vectric.owned_products" */
["vectric_owned_products_select_column"]:vectric_owned_products_select_column;
	/** update columns of table "vectric.owned_products" */
["vectric_owned_products_update_column"]:vectric_owned_products_update_column;
	/** unique or primary key constraints on table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_constraint"]:vectric_products_clipartcollection_links_constraint;
	/** select columns of table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_select_column"]:vectric_products_clipartcollection_links_select_column;
	/** update columns of table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_update_column"]:vectric_products_clipartcollection_links_update_column;
	/** unique or primary key constraints on table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_constraint"]:vectric_products_enhancement_eligibility_constraint;
	/** select columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_select_column"]:vectric_products_enhancement_eligibility_select_column;
	/** update columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_update_column"]:vectric_products_enhancement_eligibility_update_column;
	/** unique or primary key constraints on table "vectric.products_freeclipart" */
["vectric_products_freeclipart_constraint"]:vectric_products_freeclipart_constraint;
	/** select columns of table "vectric.products_freeclipart" */
["vectric_products_freeclipart_select_column"]:vectric_products_freeclipart_select_column;
	/** update columns of table "vectric.products_freeclipart" */
["vectric_products_freeclipart_update_column"]:vectric_products_freeclipart_update_column;
	/** unique or primary key constraints on table "vectric.products_fulfilments" */
["vectric_products_fulfilments_constraint"]:vectric_products_fulfilments_constraint;
	/** select columns of table "vectric.products_fulfilments" */
["vectric_products_fulfilments_select_column"]:vectric_products_fulfilments_select_column;
	/** update columns of table "vectric.products_fulfilments" */
["vectric_products_fulfilments_update_column"]:vectric_products_fulfilments_update_column;
	/** unique or primary key constraints on table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_constraint"]:vectric_products_fulfilmenttypes_constraint;
	/** select columns of table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_select_column"]:vectric_products_fulfilmenttypes_select_column;
	/** update columns of table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_update_column"]:vectric_products_fulfilmenttypes_update_column;
	/** unique or primary key constraints on table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_constraint"]:vectric_products_product_fulfilments_constraint;
	/** select columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_select_column"]:vectric_products_product_fulfilments_select_column;
	/** update columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_update_column"]:vectric_products_product_fulfilments_update_column;
	/** unique or primary key constraints on table "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_constraint"]:vectric_products_product_licence_type_constraint;
	["vectric_products_product_licence_type_enum"]:vectric_products_product_licence_type_enum;
	/** select columns of table "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_select_column"]:vectric_products_product_licence_type_select_column;
	/** update columns of table "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_update_column"]:vectric_products_product_licence_type_update_column;
	/** unique or primary key constraints on table "vectric.products_products" */
["vectric_products_products_constraint"]:vectric_products_products_constraint;
	/** select columns of table "vectric.products_products" */
["vectric_products_products_select_column"]:vectric_products_products_select_column;
	/** update columns of table "vectric.products_products" */
["vectric_products_products_update_column"]:vectric_products_products_update_column;
	/** unique or primary key constraints on table "vectric.products_producttype" */
["vectric_products_producttype_constraint"]:vectric_products_producttype_constraint;
	/** select columns of table "vectric.products_producttype" */
["vectric_products_producttype_select_column"]:vectric_products_producttype_select_column;
	/** update columns of table "vectric.products_producttype" */
["vectric_products_producttype_update_column"]:vectric_products_producttype_update_column;
	/** unique or primary key constraints on table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_constraint"]:vectric_products_upgrade_eligibility_constraint;
	/** select columns of table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_select_column"]:vectric_products_upgrade_eligibility_select_column;
	/** update columns of table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_update_column"]:vectric_products_upgrade_eligibility_update_column;
	/** unique or primary key constraints on table "vectric.products_versioncodes" */
["vectric_products_versioncodes_constraint"]:vectric_products_versioncodes_constraint;
	/** select columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_select_column"]:vectric_products_versioncodes_select_column;
	/** update columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_update_column"]:vectric_products_versioncodes_update_column;
	/** unique or primary key constraints on table "vectric.questions" */
["vectric_questions_constraint"]:vectric_questions_constraint;
	/** select columns of table "vectric.questions" */
["vectric_questions_select_column"]:vectric_questions_select_column;
	/** update columns of table "vectric.questions" */
["vectric_questions_update_column"]:vectric_questions_update_column;
	/** unique or primary key constraints on table "vectric.responses" */
["vectric_responses_constraint"]:vectric_responses_constraint;
	/** select columns of table "vectric.responses" */
["vectric_responses_select_column"]:vectric_responses_select_column;
	/** update columns of table "vectric.responses" */
["vectric_responses_update_column"]:vectric_responses_update_column;
	/** unique or primary key constraints on table "vectric.saleable_products" */
["vectric_saleable_products_constraint"]:vectric_saleable_products_constraint;
	/** select columns of table "vectric.saleable_products" */
["vectric_saleable_products_select_column"]:vectric_saleable_products_select_column;
	/** update columns of table "vectric.saleable_products" */
["vectric_saleable_products_update_column"]:vectric_saleable_products_update_column;
	/** unique or primary key constraints on table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_constraint"]:vectric_sales_customer_downloads_constraint;
	/** select columns of table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_select_column"]:vectric_sales_customer_downloads_select_column;
	/** update columns of table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_update_column"]:vectric_sales_customer_downloads_update_column;
	/** unique or primary key constraints on table "vectric.sales_customers" */
["vectric_sales_customers_constraint"]:vectric_sales_customers_constraint;
	/** select columns of table "vectric.sales_customers" */
["vectric_sales_customers_select_column"]:vectric_sales_customers_select_column;
	/** update columns of table "vectric.sales_customers" */
["vectric_sales_customers_update_column"]:vectric_sales_customers_update_column;
	/** unique or primary key constraints on table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_constraint"]:vectric_sales_customerupdates_constraint;
	/** select columns of table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_select_column"]:vectric_sales_customerupdates_select_column;
	/** update columns of table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_update_column"]:vectric_sales_customerupdates_update_column;
	/** unique or primary key constraints on table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_constraint"]:vectric_sales_oem_bundles_constraint;
	/** select columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_select_column"]:vectric_sales_oem_bundles_select_column;
	/** update columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_update_column"]:vectric_sales_oem_bundles_update_column;
	/** unique or primary key constraints on table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_constraint"]:vectric_sales_oemlicences_constraint;
	/** select columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_select_column"]:vectric_sales_oemlicences_select_column;
	/** update columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_update_column"]:vectric_sales_oemlicences_update_column;
	/** unique or primary key constraints on table "vectric.sales_orders" */
["vectric_sales_orders_constraint"]:vectric_sales_orders_constraint;
	/** select columns of table "vectric.sales_orders" */
["vectric_sales_orders_select_column"]:vectric_sales_orders_select_column;
	/** update columns of table "vectric.sales_orders" */
["vectric_sales_orders_update_column"]:vectric_sales_orders_update_column;
	/** unique or primary key constraints on table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_constraint"]:vectric_sales_salesitem_products_constraint;
	/** select columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_select_column"]:vectric_sales_salesitem_products_select_column;
	/** update columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_update_column"]:vectric_sales_salesitem_products_update_column;
	/** unique or primary key constraints on table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_constraint"]:vectric_sales_salesitemproduct_status_constraint;
	/** select columns of table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_select_column"]:vectric_sales_salesitemproduct_status_select_column;
	/** update columns of table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_update_column"]:vectric_sales_salesitemproduct_status_update_column;
	/** unique or primary key constraints on table "vectric.sales_salesitems" */
["vectric_sales_salesitems_constraint"]:vectric_sales_salesitems_constraint;
	/** select columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_select_column"]:vectric_sales_salesitems_select_column;
	/** update columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_update_column"]:vectric_sales_salesitems_update_column;
	/** unique or primary key constraints on table "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_constraint"]:vectric_sales_velocitytemplate_constraint;
	/** select columns of table "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_select_column"]:vectric_sales_velocitytemplate_select_column;
	/** update columns of table "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_update_column"]:vectric_sales_velocitytemplate_update_column;
	/** unique or primary key constraints on table "vectric.scheduled_emails" */
["vectric_scheduled_emails_constraint"]:vectric_scheduled_emails_constraint;
	/** select columns of table "vectric.scheduled_emails" */
["vectric_scheduled_emails_select_column"]:vectric_scheduled_emails_select_column;
	/** update columns of table "vectric.scheduled_emails" */
["vectric_scheduled_emails_update_column"]:vectric_scheduled_emails_update_column;
	/** unique or primary key constraints on table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_constraint"]:vectric_security_emailverificationtokens_constraint;
	/** select columns of table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_select_column"]:vectric_security_emailverificationtokens_select_column;
	/** update columns of table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_update_column"]:vectric_security_emailverificationtokens_update_column;
	/** select columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_select_column"]:vectric_security_group_authorities_select_column;
	/** unique or primary key constraints on table "vectric.security_group_members" */
["vectric_security_group_members_constraint"]:vectric_security_group_members_constraint;
	/** select columns of table "vectric.security_group_members" */
["vectric_security_group_members_select_column"]:vectric_security_group_members_select_column;
	/** update columns of table "vectric.security_group_members" */
["vectric_security_group_members_update_column"]:vectric_security_group_members_update_column;
	/** unique or primary key constraints on table "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_constraint"]:vectric_security_passwordresettokens_constraint;
	/** select columns of table "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_select_column"]:vectric_security_passwordresettokens_select_column;
	/** update columns of table "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_update_column"]:vectric_security_passwordresettokens_update_column;
	/** unique or primary key constraints on table "vectric.security_userinvitations" */
["vectric_security_userinvitations_constraint"]:vectric_security_userinvitations_constraint;
	/** select columns of table "vectric.security_userinvitations" */
["vectric_security_userinvitations_select_column"]:vectric_security_userinvitations_select_column;
	/** update columns of table "vectric.security_userinvitations" */
["vectric_security_userinvitations_update_column"]:vectric_security_userinvitations_update_column;
	/** unique or primary key constraints on table "vectric.security_users" */
["vectric_security_users_constraint"]:vectric_security_users_constraint;
	/** select columns of table "vectric.security_users" */
["vectric_security_users_select_column"]:vectric_security_users_select_column;
	/** update columns of table "vectric.security_users" */
["vectric_security_users_update_column"]:vectric_security_users_update_column;
	/** unique or primary key constraints on table "vectric.site_option_location" */
["vectric_site_option_location_constraint"]:vectric_site_option_location_constraint;
	/** select columns of table "vectric.site_option_location" */
["vectric_site_option_location_select_column"]:vectric_site_option_location_select_column;
	/** update columns of table "vectric.site_option_location" */
["vectric_site_option_location_update_column"]:vectric_site_option_location_update_column;
	/** unique or primary key constraints on table "vectric.site_options" */
["vectric_site_options_constraint"]:vectric_site_options_constraint;
	/** select columns of table "vectric.site_options" */
["vectric_site_options_select_column"]:vectric_site_options_select_column;
	/** update columns of table "vectric.site_options" */
["vectric_site_options_update_column"]:vectric_site_options_update_column;
	/** unique or primary key constraints on table "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_constraint"]:vectric_subscription_contract_status_constraint;
	/** select columns of table "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_select_column"]:vectric_subscription_contract_status_select_column;
	/** update columns of table "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_update_column"]:vectric_subscription_contract_status_update_column;
	/** unique or primary key constraints on table "vectric.subscription_contracts" */
["vectric_subscription_contracts_constraint"]:vectric_subscription_contracts_constraint;
	/** select columns of table "vectric.subscription_contracts" */
["vectric_subscription_contracts_select_column"]:vectric_subscription_contracts_select_column;
	/** update columns of table "vectric.subscription_contracts" */
["vectric_subscription_contracts_update_column"]:vectric_subscription_contracts_update_column;
	/** unique or primary key constraints on table "vectric.subscription_events" */
["vectric_subscription_events_constraint"]:vectric_subscription_events_constraint;
	/** select columns of table "vectric.subscription_events" */
["vectric_subscription_events_select_column"]:vectric_subscription_events_select_column;
	/** update columns of table "vectric.subscription_events" */
["vectric_subscription_events_update_column"]:vectric_subscription_events_update_column;
	/** unique or primary key constraints on table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_constraint"]:vectric_toolpath_saver_token_constraint;
	/** select columns of table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_select_column"]:vectric_toolpath_saver_token_select_column;
	/** update columns of table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_update_column"]:vectric_toolpath_saver_token_update_column;
	/** unique or primary key constraints on table "vectric.trial_order" */
["vectric_trial_order_constraint"]:vectric_trial_order_constraint;
	/** select columns of table "vectric.trial_order" */
["vectric_trial_order_select_column"]:vectric_trial_order_select_column;
	/** update columns of table "vectric.trial_order" */
["vectric_trial_order_update_column"]:vectric_trial_order_update_column;
	/** unique or primary key constraints on table "vectric.update_requests" */
["vectric_update_requests_constraint"]:vectric_update_requests_constraint;
	/** select columns of table "vectric.update_requests" */
["vectric_update_requests_select_column"]:vectric_update_requests_select_column;
	/** update columns of table "vectric.update_requests" */
["vectric_update_requests_update_column"]:vectric_update_requests_update_column;
	/** unique or primary key constraints on table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_constraint"]:vectric_upgrade_tokens_constraint;
	/** select columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_select_column"]:vectric_upgrade_tokens_select_column;
	/** update columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_update_column"]:vectric_upgrade_tokens_update_column;
	/** unique or primary key constraints on table "vectric.upgrades_feature" */
["vectric_upgrades_feature_constraint"]:vectric_upgrades_feature_constraint;
	/** select columns of table "vectric.upgrades_feature" */
["vectric_upgrades_feature_select_column"]:vectric_upgrades_feature_select_column;
	/** update columns of table "vectric.upgrades_feature" */
["vectric_upgrades_feature_update_column"]:vectric_upgrades_feature_update_column;
	/** unique or primary key constraints on table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_constraint"]:vectric_upgrades_product_type_feature_constraint;
	/** select columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_select_column"]:vectric_upgrades_product_type_feature_select_column;
	/** update columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_update_column"]:vectric_upgrades_product_type_feature_update_column;
	/** unique or primary key constraints on table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_constraint"]:vectric_upgrades_version_feature_constraint;
	/** select columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_select_column"]:vectric_upgrades_version_feature_select_column;
	/** update columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_update_column"]:vectric_upgrades_version_feature_update_column;
	/** unique or primary key constraints on table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_constraint"]:vectric_usergroup_2019_attendees_constraint;
	/** select columns of table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_select_column"]:vectric_usergroup_2019_attendees_select_column;
	/** update columns of table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_update_column"]:vectric_usergroup_2019_attendees_update_column;
	/** unique or primary key constraints on table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_constraint"]:vectric_usergroup_2019_waitlist_constraint;
	/** select columns of table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_select_column"]:vectric_usergroup_2019_waitlist_select_column;
	/** update columns of table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_update_column"]:vectric_usergroup_2019_waitlist_update_column;
	/** unique or primary key constraints on table "vectric.version_code" */
["vectric_version_code_constraint"]:vectric_version_code_constraint;
	/** select columns of table "vectric.version_code" */
["vectric_version_code_select_column"]:vectric_version_code_select_column;
	/** update columns of table "vectric.version_code" */
["vectric_version_code_update_column"]:vectric_version_code_update_column;
	["bigint"]:unknown;
	["bpchar"]:unknown;
	["date"]:unknown;
	["jsonb"]:unknown;
	["numeric"]:unknown;
	["smallint"]:unknown;
	["timestamp"]:unknown;
	["timestamptz"]:unknown;
	["uuid"]:unknown;
	["AddFreeClipartRequest"]: {
	clipartToken:string,
	customerId:ValueTypes["bigint"],
	fastspringId:string,
	registeredUsername:string
};
	["AddLicenceInput"]: {
	customerId:ValueTypes["bigint"],
	productName:string
};
	["AddTestBundleInput"]: {
	partnerId:ValueTypes["bigint"],
	productName?:string | null,
	quantity:number
};
	["AllocateLicenceRequest"]: {
	allocatedBy:string,
	allocationType:string,
	customerId:ValueTypes["bigint"],
	notes?:string | null,
	partnerId:number,
	productId:number,
	quantity:number
};
	["AssignmentInput"]: {
	assignedBy:string,
	email:string,
	organizationId:number,
	ownedItemId:number
};
	/** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
["Boolean_comparison_exp"]: {
	_eq?:boolean | null,
	_gt?:boolean | null,
	_gte?:boolean | null,
	_in?:boolean[],
	_is_null?:boolean | null,
	_lt?:boolean | null,
	_lte?:boolean | null,
	_neq?:boolean | null,
	_nin?:boolean[]
};
	["CheckEmailForSignUpInput"]: {
	email:string
};
	["EvaluationLicenceRequest"]: {
	customerId:ValueTypes["bigint"],
	days:number,
	productName:string
};
	/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
["Int_comparison_exp"]: {
	_eq?:number | null,
	_gt?:number | null,
	_gte?:number | null,
	_in?:number[],
	_is_null?:boolean | null,
	_lt?:number | null,
	_lte?:number | null,
	_neq?:number | null,
	_nin?:number[]
};
	["OemFSRequest"]: {
	quantity:number,
	software:string
};
	["OrganizationAddNewMemberRequest"]: {
	email:string,
	organizationId:number,
	role:string
};
	["OrganizationEditMemberRequest"]: {
	jobType:string,
	membershipId:number,
	organizationId:number,
	role:string,
	status:string
};
	["RegisterInviteInput"]: {
	invitationToken:string,
	marketingEmails:boolean,
	password:string,
	termsAndConditions:boolean
};
	["SecureFSItemsInput"]: {
	percentDiscount:number,
	product:string
};
	["SignUpInput"]: {
	captchaResponse:string,
	companyName?:string | null,
	customerName:string,
	email:string,
	marketingEmails:boolean,
	membershipInvitationToken?:string | null,
	password:string,
	product?:string | null,
	termsAndConditions:boolean
};
	/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
["String_comparison_exp"]: {
	_eq?:string | null,
	_gt?:string | null,
	_gte?:string | null,
	/** does the column match the given case-insensitive pattern */
	_ilike?:string | null,
	_in?:string[],
	/** does the column match the given POSIX regular expression, case insensitive */
	_iregex?:string | null,
	_is_null?:boolean | null,
	/** does the column match the given pattern */
	_like?:string | null,
	_lt?:string | null,
	_lte?:string | null,
	_neq?:string | null,
	/** does the column NOT match the given case-insensitive pattern */
	_nilike?:string | null,
	_nin?:string[],
	/** does the column NOT match the given POSIX regular expression, case insensitive */
	_niregex?:string | null,
	/** does the column NOT match the given pattern */
	_nlike?:string | null,
	/** does the column NOT match the given POSIX regular expression, case sensitive */
	_nregex?:string | null,
	/** does the column NOT match the given SQL regular expression */
	_nsimilar?:string | null,
	/** does the column match the given POSIX regular expression, case sensitive */
	_regex?:string | null,
	/** does the column match the given SQL regular expression */
	_similar?:string | null
};
	["TestOrderInput"]: {
	customerId:number,
	date?:ValueTypes["timestamptz"] | null,
	licenceCode?:string | null,
	orderId?:string | null,
	productName:string,
	registeredUsername?:string | null,
	status?:number | null
};
	["TransferInput"]: {
	customerId:ValueTypes["bigint"],
	oipId:string,
	transferClipart?:boolean | null
};
	["UnassignItemInput"]: {
	ownedItemId:number
};
	/** Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'. */
["bigint_comparison_exp"]: {
	_eq?:ValueTypes["bigint"] | null,
	_gt?:ValueTypes["bigint"] | null,
	_gte?:ValueTypes["bigint"] | null,
	_in?:ValueTypes["bigint"][],
	_is_null?:boolean | null,
	_lt?:ValueTypes["bigint"] | null,
	_lte?:ValueTypes["bigint"] | null,
	_neq?:ValueTypes["bigint"] | null,
	_nin?:ValueTypes["bigint"][]
};
	/** Boolean expression to compare columns of type "bpchar". All fields are combined with logical 'AND'. */
["bpchar_comparison_exp"]: {
	_eq?:ValueTypes["bpchar"] | null,
	_gt?:ValueTypes["bpchar"] | null,
	_gte?:ValueTypes["bpchar"] | null,
	/** does the column match the given case-insensitive pattern */
	_ilike?:ValueTypes["bpchar"] | null,
	_in?:ValueTypes["bpchar"][],
	/** does the column match the given POSIX regular expression, case insensitive */
	_iregex?:ValueTypes["bpchar"] | null,
	_is_null?:boolean | null,
	/** does the column match the given pattern */
	_like?:ValueTypes["bpchar"] | null,
	_lt?:ValueTypes["bpchar"] | null,
	_lte?:ValueTypes["bpchar"] | null,
	_neq?:ValueTypes["bpchar"] | null,
	/** does the column NOT match the given case-insensitive pattern */
	_nilike?:ValueTypes["bpchar"] | null,
	_nin?:ValueTypes["bpchar"][],
	/** does the column NOT match the given POSIX regular expression, case insensitive */
	_niregex?:ValueTypes["bpchar"] | null,
	/** does the column NOT match the given pattern */
	_nlike?:ValueTypes["bpchar"] | null,
	/** does the column NOT match the given POSIX regular expression, case sensitive */
	_nregex?:ValueTypes["bpchar"] | null,
	/** does the column NOT match the given SQL regular expression */
	_nsimilar?:ValueTypes["bpchar"] | null,
	/** does the column match the given POSIX regular expression, case sensitive */
	_regex?:ValueTypes["bpchar"] | null,
	/** does the column match the given SQL regular expression */
	_similar?:ValueTypes["bpchar"] | null
};
	/** Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'. */
["date_comparison_exp"]: {
	_eq?:ValueTypes["date"] | null,
	_gt?:ValueTypes["date"] | null,
	_gte?:ValueTypes["date"] | null,
	_in?:ValueTypes["date"][],
	_is_null?:boolean | null,
	_lt?:ValueTypes["date"] | null,
	_lte?:ValueTypes["date"] | null,
	_neq?:ValueTypes["date"] | null,
	_nin?:ValueTypes["date"][]
};
	/** Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'. */
["jsonb_comparison_exp"]: {
	/** is the column contained in the given json value */
	_contained_in?:ValueTypes["jsonb"] | null,
	/** does the column contain the given json value at the top level */
	_contains?:ValueTypes["jsonb"] | null,
	_eq?:ValueTypes["jsonb"] | null,
	_gt?:ValueTypes["jsonb"] | null,
	_gte?:ValueTypes["jsonb"] | null,
	/** does the string exist as a top-level key in the column */
	_has_key?:string | null,
	/** do all of these strings exist as top-level keys in the column */
	_has_keys_all?:string[],
	/** do any of these strings exist as top-level keys in the column */
	_has_keys_any?:string[],
	_in?:ValueTypes["jsonb"][],
	_is_null?:boolean | null,
	_lt?:ValueTypes["jsonb"] | null,
	_lte?:ValueTypes["jsonb"] | null,
	_neq?:ValueTypes["jsonb"] | null,
	_nin?:ValueTypes["jsonb"][]
};
	/** Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'. */
["numeric_comparison_exp"]: {
	_eq?:ValueTypes["numeric"] | null,
	_gt?:ValueTypes["numeric"] | null,
	_gte?:ValueTypes["numeric"] | null,
	_in?:ValueTypes["numeric"][],
	_is_null?:boolean | null,
	_lt?:ValueTypes["numeric"] | null,
	_lte?:ValueTypes["numeric"] | null,
	_neq?:ValueTypes["numeric"] | null,
	_nin?:ValueTypes["numeric"][]
};
	["sendLicenceAllocationEmailRequest"]: {
	automated:boolean,
	bundleId:string,
	email:string
};
	/** Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'. */
["smallint_comparison_exp"]: {
	_eq?:ValueTypes["smallint"] | null,
	_gt?:ValueTypes["smallint"] | null,
	_gte?:ValueTypes["smallint"] | null,
	_in?:ValueTypes["smallint"][],
	_is_null?:boolean | null,
	_lt?:ValueTypes["smallint"] | null,
	_lte?:ValueTypes["smallint"] | null,
	_neq?:ValueTypes["smallint"] | null,
	_nin?:ValueTypes["smallint"][]
};
	/** Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'. */
["timestamp_comparison_exp"]: {
	_eq?:ValueTypes["timestamp"] | null,
	_gt?:ValueTypes["timestamp"] | null,
	_gte?:ValueTypes["timestamp"] | null,
	_in?:ValueTypes["timestamp"][],
	_is_null?:boolean | null,
	_lt?:ValueTypes["timestamp"] | null,
	_lte?:ValueTypes["timestamp"] | null,
	_neq?:ValueTypes["timestamp"] | null,
	_nin?:ValueTypes["timestamp"][]
};
	/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
["timestamptz_comparison_exp"]: {
	_eq?:ValueTypes["timestamptz"] | null,
	_gt?:ValueTypes["timestamptz"] | null,
	_gte?:ValueTypes["timestamptz"] | null,
	_in?:ValueTypes["timestamptz"][],
	_is_null?:boolean | null,
	_lt?:ValueTypes["timestamptz"] | null,
	_lte?:ValueTypes["timestamptz"] | null,
	_neq?:ValueTypes["timestamptz"] | null,
	_nin?:ValueTypes["timestamptz"][]
};
	/** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
["uuid_comparison_exp"]: {
	_eq?:ValueTypes["uuid"] | null,
	_gt?:ValueTypes["uuid"] | null,
	_gte?:ValueTypes["uuid"] | null,
	_in?:ValueTypes["uuid"][],
	_is_null?:boolean | null,
	_lt?:ValueTypes["uuid"] | null,
	_lte?:ValueTypes["uuid"] | null,
	_neq?:ValueTypes["uuid"] | null,
	_nin?:ValueTypes["uuid"][]
};
	/** order by aggregate values of table "vectric.active_memberships" */
["vectric_active_memberships_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_active_memberships_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_active_memberships_max_order_by"] | null,
	min?:ValueTypes["vectric_active_memberships_min_order_by"] | null,
	stddev?:ValueTypes["vectric_active_memberships_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_active_memberships_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_active_memberships_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_active_memberships_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_active_memberships_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_active_memberships_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_active_memberships_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.active_memberships" */
["vectric_active_memberships_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_active_memberships_insert_input"][]
};
	/** order by avg() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_avg_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.active_memberships". All fields are combined with a logical 'AND'. */
["vectric_active_memberships_bool_exp"]: {
	_and?:ValueTypes["vectric_active_memberships_bool_exp"][],
	_not?:ValueTypes["vectric_active_memberships_bool_exp"] | null,
	_or?:ValueTypes["vectric_active_memberships_bool_exp"][],
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	isAdmin?:ValueTypes["Boolean_comparison_exp"] | null,
	membershipId?:ValueTypes["Int_comparison_exp"] | null,
	organization?:ValueTypes["vectric_organizations_bool_exp"] | null,
	organizationId?:ValueTypes["Int_comparison_exp"] | null,
	role?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for inserting data into table "vectric.active_memberships" */
["vectric_active_memberships_insert_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	isAdmin?:boolean | null,
	membershipId?:number | null,
	organization?:ValueTypes["vectric_organizations_obj_rel_insert_input"] | null,
	organizationId?:number | null,
	role?:string | null
};
	/** order by max() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_max_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null,
	role?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_min_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null,
	role?:ValueTypes["order_by"] | null
};
	/** Ordering options when selecting data from "vectric.active_memberships". */
["vectric_active_memberships_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	isAdmin?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organization?:ValueTypes["vectric_organizations_order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null,
	role?:ValueTypes["order_by"] | null
};
	/** order by stddev() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_stddev_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_stddev_pop_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_stddev_samp_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_sum_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_var_pop_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_var_samp_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_variance_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by aggregate values of table "vectric.active_upgrades" */
["vectric_active_upgrades_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_active_upgrades_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_active_upgrades_max_order_by"] | null,
	min?:ValueTypes["vectric_active_upgrades_min_order_by"] | null,
	stddev?:ValueTypes["vectric_active_upgrades_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_active_upgrades_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_active_upgrades_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_active_upgrades_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_active_upgrades_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_active_upgrades_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_active_upgrades_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.active_upgrades" */
["vectric_active_upgrades_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_active_upgrades_insert_input"][]
};
	/** order by avg() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_avg_order_by"]: {
	eligibility_id?:ValueTypes["order_by"] | null,
	from_product_id?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	to_product_id?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.active_upgrades". All fields are combined with a logical 'AND'. */
["vectric_active_upgrades_bool_exp"]: {
	_and?:ValueTypes["vectric_active_upgrades_bool_exp"][],
	_not?:ValueTypes["vectric_active_upgrades_bool_exp"] | null,
	_or?:ValueTypes["vectric_active_upgrades_bool_exp"][],
	eligibility_id?:ValueTypes["bigint_comparison_exp"] | null,
	fastspring_id?:ValueTypes["String_comparison_exp"] | null,
	fromProduct?:ValueTypes["vectric_products_products_bool_exp"] | null,
	from_product_id?:ValueTypes["bigint_comparison_exp"] | null,
	from_product_name?:ValueTypes["String_comparison_exp"] | null,
	price?:ValueTypes["numeric_comparison_exp"] | null,
	summary?:ValueTypes["String_comparison_exp"] | null,
	toProduct?:ValueTypes["vectric_products_products_bool_exp"] | null,
	to_product_id?:ValueTypes["bigint_comparison_exp"] | null,
	to_product_name?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for inserting data into table "vectric.active_upgrades" */
["vectric_active_upgrades_insert_input"]: {
	eligibility_id?:ValueTypes["bigint"] | null,
	fastspring_id?:string | null,
	fromProduct?:ValueTypes["vectric_products_products_obj_rel_insert_input"] | null,
	from_product_id?:ValueTypes["bigint"] | null,
	from_product_name?:string | null,
	price?:ValueTypes["numeric"] | null,
	summary?:string | null,
	toProduct?:ValueTypes["vectric_products_products_obj_rel_insert_input"] | null,
	to_product_id?:ValueTypes["bigint"] | null,
	to_product_name?:string | null
};
	/** order by max() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_max_order_by"]: {
	eligibility_id?:ValueTypes["order_by"] | null,
	fastspring_id?:ValueTypes["order_by"] | null,
	from_product_id?:ValueTypes["order_by"] | null,
	from_product_name?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	summary?:ValueTypes["order_by"] | null,
	to_product_id?:ValueTypes["order_by"] | null,
	to_product_name?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_min_order_by"]: {
	eligibility_id?:ValueTypes["order_by"] | null,
	fastspring_id?:ValueTypes["order_by"] | null,
	from_product_id?:ValueTypes["order_by"] | null,
	from_product_name?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	summary?:ValueTypes["order_by"] | null,
	to_product_id?:ValueTypes["order_by"] | null,
	to_product_name?:ValueTypes["order_by"] | null
};
	/** Ordering options when selecting data from "vectric.active_upgrades". */
["vectric_active_upgrades_order_by"]: {
	eligibility_id?:ValueTypes["order_by"] | null,
	fastspring_id?:ValueTypes["order_by"] | null,
	fromProduct?:ValueTypes["vectric_products_products_order_by"] | null,
	from_product_id?:ValueTypes["order_by"] | null,
	from_product_name?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	summary?:ValueTypes["order_by"] | null,
	toProduct?:ValueTypes["vectric_products_products_order_by"] | null,
	to_product_id?:ValueTypes["order_by"] | null,
	to_product_name?:ValueTypes["order_by"] | null
};
	/** order by stddev() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_stddev_order_by"]: {
	eligibility_id?:ValueTypes["order_by"] | null,
	from_product_id?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	to_product_id?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_stddev_pop_order_by"]: {
	eligibility_id?:ValueTypes["order_by"] | null,
	from_product_id?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	to_product_id?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_stddev_samp_order_by"]: {
	eligibility_id?:ValueTypes["order_by"] | null,
	from_product_id?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	to_product_id?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_sum_order_by"]: {
	eligibility_id?:ValueTypes["order_by"] | null,
	from_product_id?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	to_product_id?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_var_pop_order_by"]: {
	eligibility_id?:ValueTypes["order_by"] | null,
	from_product_id?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	to_product_id?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_var_samp_order_by"]: {
	eligibility_id?:ValueTypes["order_by"] | null,
	from_product_id?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	to_product_id?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_variance_order_by"]: {
	eligibility_id?:ValueTypes["order_by"] | null,
	from_product_id?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	to_product_id?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.allocatable_bundles". All fields are combined with a logical 'AND'. */
["vectric_allocatable_bundles_bool_exp"]: {
	_and?:ValueTypes["vectric_allocatable_bundles_bool_exp"][],
	_not?:ValueTypes["vectric_allocatable_bundles_bool_exp"] | null,
	_or?:ValueTypes["vectric_allocatable_bundles_bool_exp"][],
	allocatableProduct?:ValueTypes["vectric_products_products_bool_exp"] | null,
	bundleId?:ValueTypes["String_comparison_exp"] | null,
	licences?:ValueTypes["vectric_sales_oemlicences_bool_exp"] | null,
	partner?:ValueTypes["vectric_oem_partners_bool_exp"] | null,
	partnerId?:ValueTypes["bigint_comparison_exp"] | null,
	product?:ValueTypes["bigint_comparison_exp"] | null,
	productDisplayName?:ValueTypes["String_comparison_exp"] | null,
	typeDisplayName?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.allocatable_bundles" */
["vectric_allocatable_bundles_inc_input"]: {
	partnerId?:ValueTypes["bigint"] | null,
	product?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.allocatable_bundles" */
["vectric_allocatable_bundles_insert_input"]: {
	allocatableProduct?:ValueTypes["vectric_products_products_obj_rel_insert_input"] | null,
	bundleId?:string | null,
	licences?:ValueTypes["vectric_sales_oemlicences_arr_rel_insert_input"] | null,
	partner?:ValueTypes["vectric_oem_partners_obj_rel_insert_input"] | null,
	partnerId?:ValueTypes["bigint"] | null,
	product?:ValueTypes["bigint"] | null,
	productDisplayName?:string | null,
	typeDisplayName?:string | null
};
	/** Ordering options when selecting data from "vectric.allocatable_bundles". */
["vectric_allocatable_bundles_order_by"]: {
	allocatableProduct?:ValueTypes["vectric_products_products_order_by"] | null,
	bundleId?:ValueTypes["order_by"] | null,
	licences_aggregate?:ValueTypes["vectric_sales_oemlicences_aggregate_order_by"] | null,
	partner?:ValueTypes["vectric_oem_partners_order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null,
	productDisplayName?:ValueTypes["order_by"] | null,
	typeDisplayName?:ValueTypes["order_by"] | null
};
	/** input type for updating data in table "vectric.allocatable_bundles" */
["vectric_allocatable_bundles_set_input"]: {
	bundleId?:string | null,
	partnerId?:ValueTypes["bigint"] | null,
	product?:ValueTypes["bigint"] | null,
	productDisplayName?:string | null,
	typeDisplayName?:string | null
};
	/** Boolean expression to filter rows from the table "vectric.allocatable_licence_count". All fields are combined with a logical 'AND'. */
["vectric_allocatable_licence_count_bool_exp"]: {
	_and?:ValueTypes["vectric_allocatable_licence_count_bool_exp"][],
	_not?:ValueTypes["vectric_allocatable_licence_count_bool_exp"] | null,
	_or?:ValueTypes["vectric_allocatable_licence_count_bool_exp"][],
	allocatableProduct?:ValueTypes["vectric_products_products_bool_exp"] | null,
	availableCount?:ValueTypes["bigint_comparison_exp"] | null,
	oemPartnerId?:ValueTypes["bigint_comparison_exp"] | null,
	partner?:ValueTypes["vectric_oem_partners_bool_exp"] | null,
	productId?:ValueTypes["bigint_comparison_exp"] | null
};
	/** Ordering options when selecting data from "vectric.allocatable_licence_count". */
["vectric_allocatable_licence_count_order_by"]: {
	allocatableProduct?:ValueTypes["vectric_products_products_order_by"] | null,
	availableCount?:ValueTypes["order_by"] | null,
	oemPartnerId?:ValueTypes["order_by"] | null,
	partner?:ValueTypes["vectric_oem_partners_order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** order by aggregate values of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_allocated_bundles_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_allocated_bundles_max_order_by"] | null,
	min?:ValueTypes["vectric_allocated_bundles_min_order_by"] | null,
	stddev?:ValueTypes["vectric_allocated_bundles_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_allocated_bundles_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_allocated_bundles_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_allocated_bundles_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_allocated_bundles_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_allocated_bundles_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_allocated_bundles_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.allocated_bundles" */
["vectric_allocated_bundles_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_allocated_bundles_insert_input"][]
};
	/** order by avg() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_avg_order_by"]: {
	allocationtype?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.allocated_bundles". All fields are combined with a logical 'AND'. */
["vectric_allocated_bundles_bool_exp"]: {
	_and?:ValueTypes["vectric_allocated_bundles_bool_exp"][],
	_not?:ValueTypes["vectric_allocated_bundles_bool_exp"] | null,
	_or?:ValueTypes["vectric_allocated_bundles_bool_exp"][],
	allocatedby?:ValueTypes["String_comparison_exp"] | null,
	allocationbatch?:ValueTypes["String_comparison_exp"] | null,
	allocationtype?:ValueTypes["bigint_comparison_exp"] | null,
	bundleId?:ValueTypes["String_comparison_exp"] | null,
	dateAllocated?:ValueTypes["timestamptz_comparison_exp"] | null,
	dateCreated?:ValueTypes["timestamptz_comparison_exp"] | null,
	dateOriginallyRegistered?:ValueTypes["timestamptz_comparison_exp"] | null,
	licences?:ValueTypes["vectric_sales_oemlicences_bool_exp"] | null,
	notes?:ValueTypes["String_comparison_exp"] | null,
	partner?:ValueTypes["vectric_oem_partners_bool_exp"] | null,
	partnerId?:ValueTypes["bigint_comparison_exp"] | null,
	product?:ValueTypes["bigint_comparison_exp"] | null,
	productDisplayName?:ValueTypes["String_comparison_exp"] | null,
	typeDisplayName?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.allocated_bundles" */
["vectric_allocated_bundles_inc_input"]: {
	allocationtype?:ValueTypes["bigint"] | null,
	partnerId?:ValueTypes["bigint"] | null,
	product?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.allocated_bundles" */
["vectric_allocated_bundles_insert_input"]: {
	allocatedby?:string | null,
	allocationbatch?:string | null,
	allocationtype?:ValueTypes["bigint"] | null,
	bundleId?:string | null,
	dateAllocated?:ValueTypes["timestamptz"] | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	dateOriginallyRegistered?:ValueTypes["timestamptz"] | null,
	licences?:ValueTypes["vectric_sales_oemlicences_arr_rel_insert_input"] | null,
	notes?:string | null,
	partner?:ValueTypes["vectric_oem_partners_obj_rel_insert_input"] | null,
	partnerId?:ValueTypes["bigint"] | null,
	product?:ValueTypes["bigint"] | null,
	productDisplayName?:string | null,
	typeDisplayName?:string | null
};
	/** order by max() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_max_order_by"]: {
	allocatedby?:ValueTypes["order_by"] | null,
	allocationbatch?:ValueTypes["order_by"] | null,
	allocationtype?:ValueTypes["order_by"] | null,
	bundleId?:ValueTypes["order_by"] | null,
	dateAllocated?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	dateOriginallyRegistered?:ValueTypes["order_by"] | null,
	notes?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null,
	productDisplayName?:ValueTypes["order_by"] | null,
	typeDisplayName?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_min_order_by"]: {
	allocatedby?:ValueTypes["order_by"] | null,
	allocationbatch?:ValueTypes["order_by"] | null,
	allocationtype?:ValueTypes["order_by"] | null,
	bundleId?:ValueTypes["order_by"] | null,
	dateAllocated?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	dateOriginallyRegistered?:ValueTypes["order_by"] | null,
	notes?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null,
	productDisplayName?:ValueTypes["order_by"] | null,
	typeDisplayName?:ValueTypes["order_by"] | null
};
	/** Ordering options when selecting data from "vectric.allocated_bundles". */
["vectric_allocated_bundles_order_by"]: {
	allocatedby?:ValueTypes["order_by"] | null,
	allocationbatch?:ValueTypes["order_by"] | null,
	allocationtype?:ValueTypes["order_by"] | null,
	bundleId?:ValueTypes["order_by"] | null,
	dateAllocated?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	dateOriginallyRegistered?:ValueTypes["order_by"] | null,
	licences_aggregate?:ValueTypes["vectric_sales_oemlicences_aggregate_order_by"] | null,
	notes?:ValueTypes["order_by"] | null,
	partner?:ValueTypes["vectric_oem_partners_order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null,
	productDisplayName?:ValueTypes["order_by"] | null,
	typeDisplayName?:ValueTypes["order_by"] | null
};
	/** input type for updating data in table "vectric.allocated_bundles" */
["vectric_allocated_bundles_set_input"]: {
	allocatedby?:string | null,
	allocationbatch?:string | null,
	allocationtype?:ValueTypes["bigint"] | null,
	bundleId?:string | null,
	dateAllocated?:ValueTypes["timestamptz"] | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	dateOriginallyRegistered?:ValueTypes["timestamptz"] | null,
	notes?:string | null,
	partnerId?:ValueTypes["bigint"] | null,
	product?:ValueTypes["bigint"] | null,
	productDisplayName?:string | null,
	typeDisplayName?:string | null
};
	/** order by stddev() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_stddev_order_by"]: {
	allocationtype?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_stddev_pop_order_by"]: {
	allocationtype?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_stddev_samp_order_by"]: {
	allocationtype?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_sum_order_by"]: {
	allocationtype?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_var_pop_order_by"]: {
	allocationtype?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_var_samp_order_by"]: {
	allocationtype?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_variance_order_by"]: {
	allocationtype?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.allocation_summary". All fields are combined with a logical 'AND'. */
["vectric_allocation_summary_bool_exp"]: {
	_and?:ValueTypes["vectric_allocation_summary_bool_exp"][],
	_not?:ValueTypes["vectric_allocation_summary_bool_exp"] | null,
	_or?:ValueTypes["vectric_allocation_summary_bool_exp"][],
	batch?:ValueTypes["vectric_allocated_bundles_bool_exp"] | null,
	batchId?:ValueTypes["String_comparison_exp"] | null,
	bucket?:ValueTypes["String_comparison_exp"] | null,
	id?:ValueTypes["Int_comparison_exp"] | null,
	location?:ValueTypes["String_comparison_exp"] | null,
	partner?:ValueTypes["vectric_oem_partners_bool_exp"] | null,
	partnerId?:ValueTypes["Int_comparison_exp"] | null,
	signedUrl?:ValueTypes["String_comparison_exp"] | null,
	type?:ValueTypes["vectric_allocation_summary_file_type_enum_comparison_exp"] | null
};
	/** Boolean expression to filter rows from the table "vectric.allocation_summary_file_type". All fields are combined with a logical 'AND'. */
["vectric_allocation_summary_file_type_bool_exp"]: {
	_and?:ValueTypes["vectric_allocation_summary_file_type_bool_exp"][],
	_not?:ValueTypes["vectric_allocation_summary_file_type_bool_exp"] | null,
	_or?:ValueTypes["vectric_allocation_summary_file_type_bool_exp"][],
	type?:ValueTypes["String_comparison_exp"] | null
};
	/** Boolean expression to compare columns of type "vectric_allocation_summary_file_type_enum". All fields are combined with logical 'AND'. */
["vectric_allocation_summary_file_type_enum_comparison_exp"]: {
	_eq?:ValueTypes["vectric_allocation_summary_file_type_enum"] | null,
	_in?:ValueTypes["vectric_allocation_summary_file_type_enum"][],
	_is_null?:boolean | null,
	_neq?:ValueTypes["vectric_allocation_summary_file_type_enum"] | null,
	_nin?:ValueTypes["vectric_allocation_summary_file_type_enum"][]
};
	/** input type for inserting data into table "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_insert_input"]: {
	type?:string | null
};
	/** on conflict condition type for table "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_on_conflict"]: {
	constraint:ValueTypes["vectric_allocation_summary_file_type_constraint"],
	update_columns:ValueTypes["vectric_allocation_summary_file_type_update_column"][],
	where?:ValueTypes["vectric_allocation_summary_file_type_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.allocation_summary_file_type". */
["vectric_allocation_summary_file_type_order_by"]: {
	type?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_allocation_summary_file_type */
["vectric_allocation_summary_file_type_pk_columns_input"]: {
	type:string
};
	/** input type for updating data in table "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_set_input"]: {
	type?:string | null
};
	/** input type for incrementing numeric columns in table "vectric.allocation_summary" */
["vectric_allocation_summary_inc_input"]: {
	id?:number | null,
	partnerId?:number | null
};
	/** input type for inserting data into table "vectric.allocation_summary" */
["vectric_allocation_summary_insert_input"]: {
	batch?:ValueTypes["vectric_allocated_bundles_arr_rel_insert_input"] | null,
	batchId?:string | null,
	bucket?:string | null,
	id?:number | null,
	location?:string | null,
	partner?:ValueTypes["vectric_oem_partners_obj_rel_insert_input"] | null,
	partnerId?:number | null,
	signedUrl?:string | null,
	type?:ValueTypes["vectric_allocation_summary_file_type_enum"] | null
};
	/** on conflict condition type for table "vectric.allocation_summary" */
["vectric_allocation_summary_on_conflict"]: {
	constraint:ValueTypes["vectric_allocation_summary_constraint"],
	update_columns:ValueTypes["vectric_allocation_summary_update_column"][],
	where?:ValueTypes["vectric_allocation_summary_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.allocation_summary". */
["vectric_allocation_summary_order_by"]: {
	batchId?:ValueTypes["order_by"] | null,
	batch_aggregate?:ValueTypes["vectric_allocated_bundles_aggregate_order_by"] | null,
	bucket?:ValueTypes["order_by"] | null,
	id?:ValueTypes["order_by"] | null,
	location?:ValueTypes["order_by"] | null,
	partner?:ValueTypes["vectric_oem_partners_order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	signedUrl?:ValueTypes["order_by"] | null,
	type?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_allocation_summary */
["vectric_allocation_summary_pk_columns_input"]: {
	id:number
};
	/** input type for updating data in table "vectric.allocation_summary" */
["vectric_allocation_summary_set_input"]: {
	batchId?:string | null,
	bucket?:string | null,
	id?:number | null,
	location?:string | null,
	partnerId?:number | null,
	signedUrl?:string | null,
	type?:ValueTypes["vectric_allocation_summary_file_type_enum"] | null
};
	/** Boolean expression to filter rows from the table "vectric.continents". All fields are combined with a logical 'AND'. */
["vectric_continents_bool_exp"]: {
	_and?:ValueTypes["vectric_continents_bool_exp"][],
	_not?:ValueTypes["vectric_continents_bool_exp"] | null,
	_or?:ValueTypes["vectric_continents_bool_exp"][],
	code?:ValueTypes["bpchar_comparison_exp"] | null,
	name?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for inserting data into table "vectric.continents" */
["vectric_continents_insert_input"]: {
	/** Continent code */
	code?:ValueTypes["bpchar"] | null,
	name?:string | null
};
	/** input type for inserting object relation for remote table "vectric.continents" */
["vectric_continents_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_continents_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_continents_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.continents" */
["vectric_continents_on_conflict"]: {
	constraint:ValueTypes["vectric_continents_constraint"],
	update_columns:ValueTypes["vectric_continents_update_column"][],
	where?:ValueTypes["vectric_continents_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.continents". */
["vectric_continents_order_by"]: {
	code?:ValueTypes["order_by"] | null,
	name?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_continents */
["vectric_continents_pk_columns_input"]: {
	/** Continent code */
	code:ValueTypes["bpchar"]
};
	/** input type for updating data in table "vectric.continents" */
["vectric_continents_set_input"]: {
	/** Continent code */
	code?:ValueTypes["bpchar"] | null,
	name?:string | null
};
	/** Boolean expression to filter rows from the table "vectric.countries". All fields are combined with a logical 'AND'. */
["vectric_countries_bool_exp"]: {
	_and?:ValueTypes["vectric_countries_bool_exp"][],
	_not?:ValueTypes["vectric_countries_bool_exp"] | null,
	_or?:ValueTypes["vectric_countries_bool_exp"][],
	code?:ValueTypes["bpchar_comparison_exp"] | null,
	continent?:ValueTypes["vectric_continents_bool_exp"] | null,
	continentcode?:ValueTypes["bpchar_comparison_exp"] | null,
	countryid?:ValueTypes["bigint_comparison_exp"] | null,
	displayorder?:ValueTypes["Int_comparison_exp"] | null,
	fullname?:ValueTypes["String_comparison_exp"] | null,
	iso3?:ValueTypes["bpchar_comparison_exp"] | null,
	name?:ValueTypes["String_comparison_exp"] | null,
	number?:ValueTypes["Int_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.countries" */
["vectric_countries_inc_input"]: {
	countryid?:ValueTypes["bigint"] | null,
	displayorder?:number | null,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:number | null
};
	/** input type for inserting data into table "vectric.countries" */
["vectric_countries_insert_input"]: {
	/** Two-letter country code (ISO 3166-1 alpha-2) */
	code?:ValueTypes["bpchar"] | null,
	continent?:ValueTypes["vectric_continents_obj_rel_insert_input"] | null,
	continentcode?:ValueTypes["bpchar"] | null,
	countryid?:ValueTypes["bigint"] | null,
	displayorder?:number | null,
	/** Full English country name */
	fullname?:string | null,
	/** Three-letter country code (ISO 3166-1 alpha-3) */
	iso3?:ValueTypes["bpchar"] | null,
	/** English country name */
	name?:string | null,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:number | null
};
	/** input type for inserting object relation for remote table "vectric.countries" */
["vectric_countries_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_countries_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_countries_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.countries" */
["vectric_countries_on_conflict"]: {
	constraint:ValueTypes["vectric_countries_constraint"],
	update_columns:ValueTypes["vectric_countries_update_column"][],
	where?:ValueTypes["vectric_countries_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.countries". */
["vectric_countries_order_by"]: {
	code?:ValueTypes["order_by"] | null,
	continent?:ValueTypes["vectric_continents_order_by"] | null,
	continentcode?:ValueTypes["order_by"] | null,
	countryid?:ValueTypes["order_by"] | null,
	displayorder?:ValueTypes["order_by"] | null,
	fullname?:ValueTypes["order_by"] | null,
	iso3?:ValueTypes["order_by"] | null,
	name?:ValueTypes["order_by"] | null,
	number?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_countries */
["vectric_countries_pk_columns_input"]: {
	countryid:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.countries" */
["vectric_countries_set_input"]: {
	/** Two-letter country code (ISO 3166-1 alpha-2) */
	code?:ValueTypes["bpchar"] | null,
	continentcode?:ValueTypes["bpchar"] | null,
	countryid?:ValueTypes["bigint"] | null,
	displayorder?:number | null,
	/** Full English country name */
	fullname?:string | null,
	/** Three-letter country code (ISO 3166-1 alpha-3) */
	iso3?:ValueTypes["bpchar"] | null,
	/** English country name */
	name?:string | null,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:number | null
};
	/** Boolean expression to filter rows from the table "vectric.customer_area". All fields are combined with a logical 'AND'. */
["vectric_customer_area_bool_exp"]: {
	_and?:ValueTypes["vectric_customer_area_bool_exp"][],
	_not?:ValueTypes["vectric_customer_area_bool_exp"] | null,
	_or?:ValueTypes["vectric_customer_area_bool_exp"][],
	bucketName?:ValueTypes["String_comparison_exp"] | null,
	customer?:ValueTypes["vectric_sales_customers_bool_exp"] | null,
	customerAreaFiles?:ValueTypes["vectric_customer_area_file_bool_exp"] | null,
	customerAreaId?:ValueTypes["bigint_comparison_exp"] | null,
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	objectName?:ValueTypes["String_comparison_exp"] | null
};
	/** order by aggregate values of table "vectric.customer_area_file" */
["vectric_customer_area_file_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_customer_area_file_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_customer_area_file_max_order_by"] | null,
	min?:ValueTypes["vectric_customer_area_file_min_order_by"] | null,
	stddev?:ValueTypes["vectric_customer_area_file_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_customer_area_file_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_customer_area_file_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_customer_area_file_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_customer_area_file_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_customer_area_file_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_customer_area_file_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.customer_area_file" */
["vectric_customer_area_file_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_customer_area_file_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_customer_area_file_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_avg_order_by"]: {
	customerAreaFileId?:ValueTypes["order_by"] | null,
	customerAreaId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.customer_area_file". All fields are combined with a logical 'AND'. */
["vectric_customer_area_file_bool_exp"]: {
	_and?:ValueTypes["vectric_customer_area_file_bool_exp"][],
	_not?:ValueTypes["vectric_customer_area_file_bool_exp"] | null,
	_or?:ValueTypes["vectric_customer_area_file_bool_exp"][],
	customerArea?:ValueTypes["vectric_customer_area_bool_exp"] | null,
	customerAreaFileId?:ValueTypes["bigint_comparison_exp"] | null,
	customerAreaId?:ValueTypes["bigint_comparison_exp"] | null,
	dateUploaded?:ValueTypes["timestamptz_comparison_exp"] | null,
	fileKey?:ValueTypes["String_comparison_exp"] | null,
	fileName?:ValueTypes["String_comparison_exp"] | null,
	objectName?:ValueTypes["String_comparison_exp"] | null,
	product?:ValueTypes["vectric_products_products_bool_exp"] | null,
	productId?:ValueTypes["bigint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.customer_area_file" */
["vectric_customer_area_file_inc_input"]: {
	customerAreaFileId?:ValueTypes["bigint"] | null,
	customerAreaId?:ValueTypes["bigint"] | null,
	productId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.customer_area_file" */
["vectric_customer_area_file_insert_input"]: {
	customerArea?:ValueTypes["vectric_customer_area_obj_rel_insert_input"] | null,
	customerAreaFileId?:ValueTypes["bigint"] | null,
	customerAreaId?:ValueTypes["bigint"] | null,
	dateUploaded?:ValueTypes["timestamptz"] | null,
	fileKey?:string | null,
	fileName?:string | null,
	objectName?:string | null,
	product?:ValueTypes["vectric_products_products_obj_rel_insert_input"] | null,
	productId?:ValueTypes["bigint"] | null
};
	/** order by max() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_max_order_by"]: {
	customerAreaFileId?:ValueTypes["order_by"] | null,
	customerAreaId?:ValueTypes["order_by"] | null,
	dateUploaded?:ValueTypes["order_by"] | null,
	fileKey?:ValueTypes["order_by"] | null,
	fileName?:ValueTypes["order_by"] | null,
	objectName?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_min_order_by"]: {
	customerAreaFileId?:ValueTypes["order_by"] | null,
	customerAreaId?:ValueTypes["order_by"] | null,
	dateUploaded?:ValueTypes["order_by"] | null,
	fileKey?:ValueTypes["order_by"] | null,
	fileName?:ValueTypes["order_by"] | null,
	objectName?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** on conflict condition type for table "vectric.customer_area_file" */
["vectric_customer_area_file_on_conflict"]: {
	constraint:ValueTypes["vectric_customer_area_file_constraint"],
	update_columns:ValueTypes["vectric_customer_area_file_update_column"][],
	where?:ValueTypes["vectric_customer_area_file_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.customer_area_file". */
["vectric_customer_area_file_order_by"]: {
	customerArea?:ValueTypes["vectric_customer_area_order_by"] | null,
	customerAreaFileId?:ValueTypes["order_by"] | null,
	customerAreaId?:ValueTypes["order_by"] | null,
	dateUploaded?:ValueTypes["order_by"] | null,
	fileKey?:ValueTypes["order_by"] | null,
	fileName?:ValueTypes["order_by"] | null,
	objectName?:ValueTypes["order_by"] | null,
	product?:ValueTypes["vectric_products_products_order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_customer_area_file */
["vectric_customer_area_file_pk_columns_input"]: {
	customerAreaFileId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.customer_area_file" */
["vectric_customer_area_file_set_input"]: {
	customerAreaFileId?:ValueTypes["bigint"] | null,
	customerAreaId?:ValueTypes["bigint"] | null,
	dateUploaded?:ValueTypes["timestamptz"] | null,
	fileKey?:string | null,
	fileName?:string | null,
	objectName?:string | null,
	productId?:ValueTypes["bigint"] | null
};
	/** order by stddev() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_stddev_order_by"]: {
	customerAreaFileId?:ValueTypes["order_by"] | null,
	customerAreaId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_stddev_pop_order_by"]: {
	customerAreaFileId?:ValueTypes["order_by"] | null,
	customerAreaId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_stddev_samp_order_by"]: {
	customerAreaFileId?:ValueTypes["order_by"] | null,
	customerAreaId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_sum_order_by"]: {
	customerAreaFileId?:ValueTypes["order_by"] | null,
	customerAreaId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_var_pop_order_by"]: {
	customerAreaFileId?:ValueTypes["order_by"] | null,
	customerAreaId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_var_samp_order_by"]: {
	customerAreaFileId?:ValueTypes["order_by"] | null,
	customerAreaId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_variance_order_by"]: {
	customerAreaFileId?:ValueTypes["order_by"] | null,
	customerAreaId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** input type for incrementing numeric columns in table "vectric.customer_area" */
["vectric_customer_area_inc_input"]: {
	customerAreaId?:ValueTypes["bigint"] | null,
	customerId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.customer_area" */
["vectric_customer_area_insert_input"]: {
	bucketName?:string | null,
	customer?:ValueTypes["vectric_sales_customers_obj_rel_insert_input"] | null,
	customerAreaFiles?:ValueTypes["vectric_customer_area_file_arr_rel_insert_input"] | null,
	customerAreaId?:ValueTypes["bigint"] | null,
	customerId?:ValueTypes["bigint"] | null,
	objectName?:string | null
};
	/** input type for inserting object relation for remote table "vectric.customer_area" */
["vectric_customer_area_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_customer_area_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_customer_area_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.customer_area" */
["vectric_customer_area_on_conflict"]: {
	constraint:ValueTypes["vectric_customer_area_constraint"],
	update_columns:ValueTypes["vectric_customer_area_update_column"][],
	where?:ValueTypes["vectric_customer_area_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.customer_area". */
["vectric_customer_area_order_by"]: {
	bucketName?:ValueTypes["order_by"] | null,
	customer?:ValueTypes["vectric_sales_customers_order_by"] | null,
	customerAreaFiles_aggregate?:ValueTypes["vectric_customer_area_file_aggregate_order_by"] | null,
	customerAreaId?:ValueTypes["order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	objectName?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_customer_area */
["vectric_customer_area_pk_columns_input"]: {
	customerAreaId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.customer_area" */
["vectric_customer_area_set_input"]: {
	bucketName?:string | null,
	customerAreaId?:ValueTypes["bigint"] | null,
	customerId?:ValueTypes["bigint"] | null,
	objectName?:string | null
};
	/** order by aggregate values of table "vectric.customer_responses" */
["vectric_customer_responses_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_customer_responses_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_customer_responses_max_order_by"] | null,
	min?:ValueTypes["vectric_customer_responses_min_order_by"] | null,
	stddev?:ValueTypes["vectric_customer_responses_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_customer_responses_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_customer_responses_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_customer_responses_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_customer_responses_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_customer_responses_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_customer_responses_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.customer_responses" */
["vectric_customer_responses_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_customer_responses_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_customer_responses_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_avg_order_by"]: {
	customerid?:ValueTypes["order_by"] | null,
	customerresponseid?:ValueTypes["order_by"] | null,
	questionid?:ValueTypes["order_by"] | null,
	responseid?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.customer_responses". All fields are combined with a logical 'AND'. */
["vectric_customer_responses_bool_exp"]: {
	_and?:ValueTypes["vectric_customer_responses_bool_exp"][],
	_not?:ValueTypes["vectric_customer_responses_bool_exp"] | null,
	_or?:ValueTypes["vectric_customer_responses_bool_exp"][],
	customerid?:ValueTypes["bigint_comparison_exp"] | null,
	customerresponseid?:ValueTypes["bigint_comparison_exp"] | null,
	othertext?:ValueTypes["String_comparison_exp"] | null,
	question?:ValueTypes["vectric_questions_bool_exp"] | null,
	questionid?:ValueTypes["bigint_comparison_exp"] | null,
	response?:ValueTypes["vectric_responses_bool_exp"] | null,
	responseid?:ValueTypes["bigint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.customer_responses" */
["vectric_customer_responses_inc_input"]: {
	customerid?:ValueTypes["bigint"] | null,
	customerresponseid?:ValueTypes["bigint"] | null,
	questionid?:ValueTypes["bigint"] | null,
	responseid?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.customer_responses" */
["vectric_customer_responses_insert_input"]: {
	customerid?:ValueTypes["bigint"] | null,
	customerresponseid?:ValueTypes["bigint"] | null,
	othertext?:string | null,
	question?:ValueTypes["vectric_questions_obj_rel_insert_input"] | null,
	questionid?:ValueTypes["bigint"] | null,
	response?:ValueTypes["vectric_responses_obj_rel_insert_input"] | null,
	responseid?:ValueTypes["bigint"] | null
};
	/** order by max() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_max_order_by"]: {
	customerid?:ValueTypes["order_by"] | null,
	customerresponseid?:ValueTypes["order_by"] | null,
	othertext?:ValueTypes["order_by"] | null,
	questionid?:ValueTypes["order_by"] | null,
	responseid?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_min_order_by"]: {
	customerid?:ValueTypes["order_by"] | null,
	customerresponseid?:ValueTypes["order_by"] | null,
	othertext?:ValueTypes["order_by"] | null,
	questionid?:ValueTypes["order_by"] | null,
	responseid?:ValueTypes["order_by"] | null
};
	/** on conflict condition type for table "vectric.customer_responses" */
["vectric_customer_responses_on_conflict"]: {
	constraint:ValueTypes["vectric_customer_responses_constraint"],
	update_columns:ValueTypes["vectric_customer_responses_update_column"][],
	where?:ValueTypes["vectric_customer_responses_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.customer_responses". */
["vectric_customer_responses_order_by"]: {
	customerid?:ValueTypes["order_by"] | null,
	customerresponseid?:ValueTypes["order_by"] | null,
	othertext?:ValueTypes["order_by"] | null,
	question?:ValueTypes["vectric_questions_order_by"] | null,
	questionid?:ValueTypes["order_by"] | null,
	response?:ValueTypes["vectric_responses_order_by"] | null,
	responseid?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_customer_responses */
["vectric_customer_responses_pk_columns_input"]: {
	customerresponseid:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.customer_responses" */
["vectric_customer_responses_set_input"]: {
	customerid?:ValueTypes["bigint"] | null,
	customerresponseid?:ValueTypes["bigint"] | null,
	othertext?:string | null,
	questionid?:ValueTypes["bigint"] | null,
	responseid?:ValueTypes["bigint"] | null
};
	/** order by stddev() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_stddev_order_by"]: {
	customerid?:ValueTypes["order_by"] | null,
	customerresponseid?:ValueTypes["order_by"] | null,
	questionid?:ValueTypes["order_by"] | null,
	responseid?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_stddev_pop_order_by"]: {
	customerid?:ValueTypes["order_by"] | null,
	customerresponseid?:ValueTypes["order_by"] | null,
	questionid?:ValueTypes["order_by"] | null,
	responseid?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_stddev_samp_order_by"]: {
	customerid?:ValueTypes["order_by"] | null,
	customerresponseid?:ValueTypes["order_by"] | null,
	questionid?:ValueTypes["order_by"] | null,
	responseid?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_sum_order_by"]: {
	customerid?:ValueTypes["order_by"] | null,
	customerresponseid?:ValueTypes["order_by"] | null,
	questionid?:ValueTypes["order_by"] | null,
	responseid?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_var_pop_order_by"]: {
	customerid?:ValueTypes["order_by"] | null,
	customerresponseid?:ValueTypes["order_by"] | null,
	questionid?:ValueTypes["order_by"] | null,
	responseid?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_var_samp_order_by"]: {
	customerid?:ValueTypes["order_by"] | null,
	customerresponseid?:ValueTypes["order_by"] | null,
	questionid?:ValueTypes["order_by"] | null,
	responseid?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_variance_order_by"]: {
	customerid?:ValueTypes["order_by"] | null,
	customerresponseid?:ValueTypes["order_by"] | null,
	questionid?:ValueTypes["order_by"] | null,
	responseid?:ValueTypes["order_by"] | null
};
	/** order by aggregate values of table "vectric.customer_sales" */
["vectric_customer_sales_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_customer_sales_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_customer_sales_max_order_by"] | null,
	min?:ValueTypes["vectric_customer_sales_min_order_by"] | null,
	stddev?:ValueTypes["vectric_customer_sales_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_customer_sales_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_customer_sales_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_customer_sales_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_customer_sales_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_customer_sales_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_customer_sales_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.customer_sales" */
["vectric_customer_sales_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_customer_sales_insert_input"][]
};
	/** order by avg() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_avg_order_by"]: {
	customerId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.customer_sales". All fields are combined with a logical 'AND'. */
["vectric_customer_sales_bool_exp"]: {
	_and?:ValueTypes["vectric_customer_sales_bool_exp"][],
	_not?:ValueTypes["vectric_customer_sales_bool_exp"] | null,
	_or?:ValueTypes["vectric_customer_sales_bool_exp"][],
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	dateCreated?:ValueTypes["timestamptz_comparison_exp"] | null,
	orderDate?:ValueTypes["timestamptz_comparison_exp"] | null,
	orderId?:ValueTypes["String_comparison_exp"] | null,
	salesItems?:ValueTypes["vectric_sales_salesitems_bool_exp"] | null,
	veccode?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.customer_sales" */
["vectric_customer_sales_inc_input"]: {
	customerId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.customer_sales" */
["vectric_customer_sales_insert_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	orderDate?:ValueTypes["timestamptz"] | null,
	orderId?:string | null,
	salesItems?:ValueTypes["vectric_sales_salesitems_arr_rel_insert_input"] | null,
	veccode?:string | null
};
	/** order by max() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_max_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	orderDate?:ValueTypes["order_by"] | null,
	orderId?:ValueTypes["order_by"] | null,
	veccode?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_min_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	orderDate?:ValueTypes["order_by"] | null,
	orderId?:ValueTypes["order_by"] | null,
	veccode?:ValueTypes["order_by"] | null
};
	/** input type for inserting object relation for remote table "vectric.customer_sales" */
["vectric_customer_sales_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_customer_sales_insert_input"]
};
	/** Ordering options when selecting data from "vectric.customer_sales". */
["vectric_customer_sales_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	orderDate?:ValueTypes["order_by"] | null,
	orderId?:ValueTypes["order_by"] | null,
	salesItems_aggregate?:ValueTypes["vectric_sales_salesitems_aggregate_order_by"] | null,
	veccode?:ValueTypes["order_by"] | null
};
	/** input type for updating data in table "vectric.customer_sales" */
["vectric_customer_sales_set_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	orderDate?:ValueTypes["timestamptz"] | null,
	orderId?:string | null,
	veccode?:string | null
};
	/** order by stddev() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_stddev_order_by"]: {
	customerId?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_stddev_pop_order_by"]: {
	customerId?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_stddev_samp_order_by"]: {
	customerId?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_sum_order_by"]: {
	customerId?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_var_pop_order_by"]: {
	customerId?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_var_samp_order_by"]: {
	customerId?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_variance_order_by"]: {
	customerId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.customer_status". All fields are combined with a logical 'AND'. */
["vectric_customer_status_bool_exp"]: {
	_and?:ValueTypes["vectric_customer_status_bool_exp"][],
	_not?:ValueTypes["vectric_customer_status_bool_exp"] | null,
	_or?:ValueTypes["vectric_customer_status_bool_exp"][],
	status?:ValueTypes["String_comparison_exp"] | null,
	statusId?:ValueTypes["bigint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.customer_status" */
["vectric_customer_status_inc_input"]: {
	statusId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.customer_status" */
["vectric_customer_status_insert_input"]: {
	status?:string | null,
	statusId?:ValueTypes["bigint"] | null
};
	/** on conflict condition type for table "vectric.customer_status" */
["vectric_customer_status_on_conflict"]: {
	constraint:ValueTypes["vectric_customer_status_constraint"],
	update_columns:ValueTypes["vectric_customer_status_update_column"][],
	where?:ValueTypes["vectric_customer_status_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.customer_status". */
["vectric_customer_status_order_by"]: {
	status?:ValueTypes["order_by"] | null,
	statusId?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_customer_status */
["vectric_customer_status_pk_columns_input"]: {
	statusId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.customer_status" */
["vectric_customer_status_set_input"]: {
	status?:string | null,
	statusId?:ValueTypes["bigint"] | null
};
	/** Boolean expression to filter rows from the table "vectric.customer_zd_uploads". All fields are combined with a logical 'AND'. */
["vectric_customer_zd_uploads_bool_exp"]: {
	_and?:ValueTypes["vectric_customer_zd_uploads_bool_exp"][],
	_not?:ValueTypes["vectric_customer_zd_uploads_bool_exp"] | null,
	_or?:ValueTypes["vectric_customer_zd_uploads_bool_exp"][],
	createdBy?:ValueTypes["bigint_comparison_exp"] | null,
	customer?:ValueTypes["vectric_sales_customers_bool_exp"] | null,
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	dateCreated?:ValueTypes["timestamptz_comparison_exp"] | null,
	dateUploaded?:ValueTypes["timestamptz_comparison_exp"] | null,
	location?:ValueTypes["String_comparison_exp"] | null,
	objectName?:ValueTypes["String_comparison_exp"] | null,
	shorturlhash?:ValueTypes["String_comparison_exp"] | null,
	staff?:ValueTypes["vectric_sales_customers_bool_exp"] | null,
	ticketId?:ValueTypes["String_comparison_exp"] | null,
	zdUploadId?:ValueTypes["bigint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_inc_input"]: {
	createdBy?:ValueTypes["bigint"] | null,
	customerId?:ValueTypes["bigint"] | null,
	zdUploadId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_insert_input"]: {
	createdBy?:ValueTypes["bigint"] | null,
	customer?:ValueTypes["vectric_sales_customers_obj_rel_insert_input"] | null,
	customerId?:ValueTypes["bigint"] | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	dateUploaded?:ValueTypes["timestamptz"] | null,
	location?:string | null,
	objectName?:string | null,
	shorturlhash?:string | null,
	staff?:ValueTypes["vectric_sales_customers_obj_rel_insert_input"] | null,
	ticketId?:string | null,
	zdUploadId?:ValueTypes["bigint"] | null
};
	/** on conflict condition type for table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_on_conflict"]: {
	constraint:ValueTypes["vectric_customer_zd_uploads_constraint"],
	update_columns:ValueTypes["vectric_customer_zd_uploads_update_column"][],
	where?:ValueTypes["vectric_customer_zd_uploads_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.customer_zd_uploads". */
["vectric_customer_zd_uploads_order_by"]: {
	createdBy?:ValueTypes["order_by"] | null,
	customer?:ValueTypes["vectric_sales_customers_order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	dateUploaded?:ValueTypes["order_by"] | null,
	location?:ValueTypes["order_by"] | null,
	objectName?:ValueTypes["order_by"] | null,
	shorturlhash?:ValueTypes["order_by"] | null,
	staff?:ValueTypes["vectric_sales_customers_order_by"] | null,
	ticketId?:ValueTypes["order_by"] | null,
	zdUploadId?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_customer_zd_uploads */
["vectric_customer_zd_uploads_pk_columns_input"]: {
	zdUploadId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_set_input"]: {
	createdBy?:ValueTypes["bigint"] | null,
	customerId?:ValueTypes["bigint"] | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	dateUploaded?:ValueTypes["timestamptz"] | null,
	location?:string | null,
	objectName?:string | null,
	shorturlhash?:string | null,
	ticketId?:string | null,
	zdUploadId?:ValueTypes["bigint"] | null
};
	/** Boolean expression to filter rows from the table "vectric.download". All fields are combined with a logical 'AND'. */
["vectric_download_bool_exp"]: {
	_and?:ValueTypes["vectric_download_bool_exp"][],
	_not?:ValueTypes["vectric_download_bool_exp"] | null,
	_or?:ValueTypes["vectric_download_bool_exp"][],
	bucketName?:ValueTypes["String_comparison_exp"] | null,
	description?:ValueTypes["String_comparison_exp"] | null,
	downloadId?:ValueTypes["String_comparison_exp"] | null,
	downloadSize?:ValueTypes["String_comparison_exp"] | null,
	groupId?:ValueTypes["String_comparison_exp"] | null,
	name?:ValueTypes["String_comparison_exp"] | null,
	objectName?:ValueTypes["String_comparison_exp"] | null,
	previewImageUrl?:ValueTypes["String_comparison_exp"] | null,
	uploadDate?:ValueTypes["timestamptz_comparison_exp"] | null
};
	/** input type for inserting data into table "vectric.download" */
["vectric_download_insert_input"]: {
	bucketName?:string | null,
	description?:string | null,
	downloadId?:string | null,
	downloadSize?:string | null,
	groupId?:string | null,
	name?:string | null,
	objectName?:string | null,
	previewImageUrl?:string | null,
	uploadDate?:ValueTypes["timestamptz"] | null
};
	/** on conflict condition type for table "vectric.download" */
["vectric_download_on_conflict"]: {
	constraint:ValueTypes["vectric_download_constraint"],
	update_columns:ValueTypes["vectric_download_update_column"][],
	where?:ValueTypes["vectric_download_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.download". */
["vectric_download_order_by"]: {
	bucketName?:ValueTypes["order_by"] | null,
	description?:ValueTypes["order_by"] | null,
	downloadId?:ValueTypes["order_by"] | null,
	downloadSize?:ValueTypes["order_by"] | null,
	groupId?:ValueTypes["order_by"] | null,
	name?:ValueTypes["order_by"] | null,
	objectName?:ValueTypes["order_by"] | null,
	previewImageUrl?:ValueTypes["order_by"] | null,
	uploadDate?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_download */
["vectric_download_pk_columns_input"]: {
	downloadId:string
};
	/** Boolean expression to filter rows from the table "vectric.download_record". All fields are combined with a logical 'AND'. */
["vectric_download_record_bool_exp"]: {
	_and?:ValueTypes["vectric_download_record_bool_exp"][],
	_not?:ValueTypes["vectric_download_record_bool_exp"] | null,
	_or?:ValueTypes["vectric_download_record_bool_exp"][],
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	downloadDate?:ValueTypes["timestamptz_comparison_exp"] | null,
	downloadId?:ValueTypes["String_comparison_exp"] | null,
	id?:ValueTypes["bigint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.download_record" */
["vectric_download_record_inc_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	id?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.download_record" */
["vectric_download_record_insert_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	downloadDate?:ValueTypes["timestamptz"] | null,
	downloadId?:string | null,
	id?:ValueTypes["bigint"] | null
};
	/** on conflict condition type for table "vectric.download_record" */
["vectric_download_record_on_conflict"]: {
	constraint:ValueTypes["vectric_download_record_constraint"],
	update_columns:ValueTypes["vectric_download_record_update_column"][],
	where?:ValueTypes["vectric_download_record_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.download_record". */
["vectric_download_record_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	downloadDate?:ValueTypes["order_by"] | null,
	downloadId?:ValueTypes["order_by"] | null,
	id?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_download_record */
["vectric_download_record_pk_columns_input"]: {
	id:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.download_record" */
["vectric_download_record_set_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	downloadDate?:ValueTypes["timestamptz"] | null,
	downloadId?:string | null,
	id?:ValueTypes["bigint"] | null
};
	/** input type for updating data in table "vectric.download" */
["vectric_download_set_input"]: {
	bucketName?:string | null,
	description?:string | null,
	downloadId?:string | null,
	downloadSize?:string | null,
	groupId?:string | null,
	name?:string | null,
	objectName?:string | null,
	previewImageUrl?:string | null,
	uploadDate?:ValueTypes["timestamptz"] | null
};
	/** order by aggregate values of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_enhancement_tokens_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_enhancement_tokens_max_order_by"] | null,
	min?:ValueTypes["vectric_enhancement_tokens_min_order_by"] | null,
	stddev?:ValueTypes["vectric_enhancement_tokens_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_enhancement_tokens_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_enhancement_tokens_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_enhancement_tokens_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_enhancement_tokens_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_enhancement_tokens_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_enhancement_tokens_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_enhancement_tokens_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_enhancement_tokens_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_avg_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	enhancementEligibilityId?:ValueTypes["order_by"] | null,
	enhancementOrderItemProductId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.enhancement_tokens". All fields are combined with a logical 'AND'. */
["vectric_enhancement_tokens_bool_exp"]: {
	_and?:ValueTypes["vectric_enhancement_tokens_bool_exp"][],
	_not?:ValueTypes["vectric_enhancement_tokens_bool_exp"] | null,
	_or?:ValueTypes["vectric_enhancement_tokens_bool_exp"][],
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	dateCreated?:ValueTypes["timestamptz_comparison_exp"] | null,
	dateUsed?:ValueTypes["timestamptz_comparison_exp"] | null,
	enhancementEligibilityId?:ValueTypes["bigint_comparison_exp"] | null,
	enhancementOrderItemProductId?:ValueTypes["bigint_comparison_exp"] | null,
	orderItemProductId?:ValueTypes["bigint_comparison_exp"] | null,
	token?:ValueTypes["String_comparison_exp"] | null,
	used?:ValueTypes["Boolean_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_inc_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	enhancementEligibilityId?:ValueTypes["bigint"] | null,
	enhancementOrderItemProductId?:ValueTypes["bigint"] | null,
	orderItemProductId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_insert_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	dateUsed?:ValueTypes["timestamptz"] | null,
	enhancementEligibilityId?:ValueTypes["bigint"] | null,
	enhancementOrderItemProductId?:ValueTypes["bigint"] | null,
	orderItemProductId?:ValueTypes["bigint"] | null,
	token?:string | null,
	used?:boolean | null
};
	/** order by max() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_max_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	dateUsed?:ValueTypes["order_by"] | null,
	enhancementEligibilityId?:ValueTypes["order_by"] | null,
	enhancementOrderItemProductId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	token?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_min_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	dateUsed?:ValueTypes["order_by"] | null,
	enhancementEligibilityId?:ValueTypes["order_by"] | null,
	enhancementOrderItemProductId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	token?:ValueTypes["order_by"] | null
};
	/** on conflict condition type for table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_on_conflict"]: {
	constraint:ValueTypes["vectric_enhancement_tokens_constraint"],
	update_columns:ValueTypes["vectric_enhancement_tokens_update_column"][],
	where?:ValueTypes["vectric_enhancement_tokens_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.enhancement_tokens". */
["vectric_enhancement_tokens_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	dateUsed?:ValueTypes["order_by"] | null,
	enhancementEligibilityId?:ValueTypes["order_by"] | null,
	enhancementOrderItemProductId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	token?:ValueTypes["order_by"] | null,
	used?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_enhancement_tokens */
["vectric_enhancement_tokens_pk_columns_input"]: {
	token:string
};
	/** input type for updating data in table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_set_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	dateUsed?:ValueTypes["timestamptz"] | null,
	enhancementEligibilityId?:ValueTypes["bigint"] | null,
	enhancementOrderItemProductId?:ValueTypes["bigint"] | null,
	orderItemProductId?:ValueTypes["bigint"] | null,
	token?:string | null,
	used?:boolean | null
};
	/** order by stddev() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_stddev_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	enhancementEligibilityId?:ValueTypes["order_by"] | null,
	enhancementOrderItemProductId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_stddev_pop_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	enhancementEligibilityId?:ValueTypes["order_by"] | null,
	enhancementOrderItemProductId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_stddev_samp_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	enhancementEligibilityId?:ValueTypes["order_by"] | null,
	enhancementOrderItemProductId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_sum_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	enhancementEligibilityId?:ValueTypes["order_by"] | null,
	enhancementOrderItemProductId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_var_pop_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	enhancementEligibilityId?:ValueTypes["order_by"] | null,
	enhancementOrderItemProductId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_var_samp_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	enhancementEligibilityId?:ValueTypes["order_by"] | null,
	enhancementOrderItemProductId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_variance_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	enhancementEligibilityId?:ValueTypes["order_by"] | null,
	enhancementOrderItemProductId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null
};
	/** order by aggregate values of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_entitled_product_version_code_view_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_entitled_product_version_code_view_max_order_by"] | null,
	min?:ValueTypes["vectric_entitled_product_version_code_view_min_order_by"] | null,
	stddev?:ValueTypes["vectric_entitled_product_version_code_view_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_entitled_product_version_code_view_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_entitled_product_version_code_view_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_entitled_product_version_code_view_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_entitled_product_version_code_view_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_entitled_product_version_code_view_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_entitled_product_version_code_view_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_entitled_product_version_code_view_insert_input"][]
};
	/** order by avg() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_avg_order_by"]: {
	entitled_product_id?:ValueTypes["order_by"] | null,
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	versionCodeId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.entitled_product_version_code_view". All fields are combined with a logical 'AND'. */
["vectric_entitled_product_version_code_view_bool_exp"]: {
	_and?:ValueTypes["vectric_entitled_product_version_code_view_bool_exp"][],
	_not?:ValueTypes["vectric_entitled_product_version_code_view_bool_exp"] | null,
	_or?:ValueTypes["vectric_entitled_product_version_code_view_bool_exp"][],
	displayVersion?:ValueTypes["String_comparison_exp"] | null,
	entitled_product_id?:ValueTypes["bigint_comparison_exp"] | null,
	latest?:ValueTypes["Boolean_comparison_exp"] | null,
	majorVersion?:ValueTypes["bigint_comparison_exp"] | null,
	minorVersionOOX?:ValueTypes["bigint_comparison_exp"] | null,
	minorVersionOXO?:ValueTypes["bigint_comparison_exp"] | null,
	minorVersionXOO?:ValueTypes["bigint_comparison_exp"] | null,
	notifying?:ValueTypes["Boolean_comparison_exp"] | null,
	patchUrl?:ValueTypes["String_comparison_exp"] | null,
	releaseDate?:ValueTypes["date_comparison_exp"] | null,
	url?:ValueTypes["String_comparison_exp"] | null,
	versionCodeId?:ValueTypes["bigint_comparison_exp"] | null,
	visible?:ValueTypes["Boolean_comparison_exp"] | null
};
	/** input type for inserting data into table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_insert_input"]: {
	displayVersion?:string | null,
	entitled_product_id?:ValueTypes["bigint"] | null,
	latest?:boolean | null,
	majorVersion?:ValueTypes["bigint"] | null,
	minorVersionOOX?:ValueTypes["bigint"] | null,
	minorVersionOXO?:ValueTypes["bigint"] | null,
	minorVersionXOO?:ValueTypes["bigint"] | null,
	notifying?:boolean | null,
	patchUrl?:string | null,
	releaseDate?:ValueTypes["date"] | null,
	url?:string | null,
	versionCodeId?:ValueTypes["bigint"] | null,
	visible?:boolean | null
};
	/** order by max() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_max_order_by"]: {
	displayVersion?:ValueTypes["order_by"] | null,
	entitled_product_id?:ValueTypes["order_by"] | null,
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	patchUrl?:ValueTypes["order_by"] | null,
	releaseDate?:ValueTypes["order_by"] | null,
	url?:ValueTypes["order_by"] | null,
	versionCodeId?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_min_order_by"]: {
	displayVersion?:ValueTypes["order_by"] | null,
	entitled_product_id?:ValueTypes["order_by"] | null,
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	patchUrl?:ValueTypes["order_by"] | null,
	releaseDate?:ValueTypes["order_by"] | null,
	url?:ValueTypes["order_by"] | null,
	versionCodeId?:ValueTypes["order_by"] | null
};
	/** Ordering options when selecting data from "vectric.entitled_product_version_code_view". */
["vectric_entitled_product_version_code_view_order_by"]: {
	displayVersion?:ValueTypes["order_by"] | null,
	entitled_product_id?:ValueTypes["order_by"] | null,
	latest?:ValueTypes["order_by"] | null,
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	notifying?:ValueTypes["order_by"] | null,
	patchUrl?:ValueTypes["order_by"] | null,
	releaseDate?:ValueTypes["order_by"] | null,
	url?:ValueTypes["order_by"] | null,
	versionCodeId?:ValueTypes["order_by"] | null,
	visible?:ValueTypes["order_by"] | null
};
	/** order by stddev() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_stddev_order_by"]: {
	entitled_product_id?:ValueTypes["order_by"] | null,
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	versionCodeId?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_stddev_pop_order_by"]: {
	entitled_product_id?:ValueTypes["order_by"] | null,
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	versionCodeId?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_stddev_samp_order_by"]: {
	entitled_product_id?:ValueTypes["order_by"] | null,
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	versionCodeId?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_sum_order_by"]: {
	entitled_product_id?:ValueTypes["order_by"] | null,
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	versionCodeId?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_var_pop_order_by"]: {
	entitled_product_id?:ValueTypes["order_by"] | null,
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	versionCodeId?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_var_samp_order_by"]: {
	entitled_product_id?:ValueTypes["order_by"] | null,
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	versionCodeId?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_variance_order_by"]: {
	entitled_product_id?:ValueTypes["order_by"] | null,
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	versionCodeId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.entitled_products". All fields are combined with a logical 'AND'. */
["vectric_entitled_products_bool_exp"]: {
	_and?:ValueTypes["vectric_entitled_products_bool_exp"][],
	_not?:ValueTypes["vectric_entitled_products_bool_exp"] | null,
	_or?:ValueTypes["vectric_entitled_products_bool_exp"][],
	enabled?:ValueTypes["Boolean_comparison_exp"] | null,
	latestVersion?:ValueTypes["vectric_products_versioncodes_bool_exp"] | null,
	latestVersionId?:ValueTypes["Int_comparison_exp"] | null,
	licenceType?:ValueTypes["vectric_products_product_licence_type_enum_comparison_exp"] | null,
	productId?:ValueTypes["Int_comparison_exp"] | null,
	productName?:ValueTypes["String_comparison_exp"] | null,
	productType?:ValueTypes["vectric_products_producttype_bool_exp"] | null,
	productTypeId?:ValueTypes["Int_comparison_exp"] | null,
	releaseDate?:ValueTypes["timestamp_comparison_exp"] | null,
	requiresLicence?:ValueTypes["Boolean_comparison_exp"] | null,
	versions?:ValueTypes["vectric_entitled_product_version_code_view_bool_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.entitled_products" */
["vectric_entitled_products_inc_input"]: {
	latestVersionId?:number | null,
	productId?:number | null,
	productTypeId?:number | null
};
	/** input type for inserting data into table "vectric.entitled_products" */
["vectric_entitled_products_insert_input"]: {
	enabled?:boolean | null,
	latestVersion?:ValueTypes["vectric_products_versioncodes_obj_rel_insert_input"] | null,
	latestVersionId?:number | null,
	licenceType?:ValueTypes["vectric_products_product_licence_type_enum"] | null,
	productId?:number | null,
	productName?:string | null,
	productType?:ValueTypes["vectric_products_producttype_obj_rel_insert_input"] | null,
	productTypeId?:number | null,
	releaseDate?:ValueTypes["timestamp"] | null,
	requiresLicence?:boolean | null,
	versions?:ValueTypes["vectric_entitled_product_version_code_view_arr_rel_insert_input"] | null
};
	/** input type for inserting object relation for remote table "vectric.entitled_products" */
["vectric_entitled_products_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_entitled_products_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_entitled_products_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.entitled_products" */
["vectric_entitled_products_on_conflict"]: {
	constraint:ValueTypes["vectric_entitled_products_constraint"],
	update_columns:ValueTypes["vectric_entitled_products_update_column"][],
	where?:ValueTypes["vectric_entitled_products_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.entitled_products". */
["vectric_entitled_products_order_by"]: {
	enabled?:ValueTypes["order_by"] | null,
	latestVersion?:ValueTypes["vectric_products_versioncodes_order_by"] | null,
	latestVersionId?:ValueTypes["order_by"] | null,
	licenceType?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	productName?:ValueTypes["order_by"] | null,
	productType?:ValueTypes["vectric_products_producttype_order_by"] | null,
	productTypeId?:ValueTypes["order_by"] | null,
	releaseDate?:ValueTypes["order_by"] | null,
	requiresLicence?:ValueTypes["order_by"] | null,
	versions_aggregate?:ValueTypes["vectric_entitled_product_version_code_view_aggregate_order_by"] | null
};
	/** primary key columns input for table: vectric_entitled_products */
["vectric_entitled_products_pk_columns_input"]: {
	productId:number
};
	/** input type for updating data in table "vectric.entitled_products" */
["vectric_entitled_products_set_input"]: {
	enabled?:boolean | null,
	latestVersionId?:number | null,
	licenceType?:ValueTypes["vectric_products_product_licence_type_enum"] | null,
	productId?:number | null,
	productName?:string | null,
	productTypeId?:number | null,
	releaseDate?:ValueTypes["timestamp"] | null,
	requiresLicence?:boolean | null
};
	/** Boolean expression to filter rows from the table "vectric.entitlement_licences". All fields are combined with a logical 'AND'. */
["vectric_entitlement_licences_bool_exp"]: {
	_and?:ValueTypes["vectric_entitlement_licences_bool_exp"][],
	_not?:ValueTypes["vectric_entitlement_licences_bool_exp"] | null,
	_or?:ValueTypes["vectric_entitlement_licences_bool_exp"][],
	entitledProduct?:ValueTypes["vectric_entitled_products_bool_exp"] | null,
	entitlement?:ValueTypes["vectric_entitlements_bool_exp"] | null,
	entitlementId?:ValueTypes["Int_comparison_exp"] | null,
	entitlementLicenceId?:ValueTypes["Int_comparison_exp"] | null,
	licenceCode?:ValueTypes["String_comparison_exp"] | null,
	licenceIdAsDisplay?:ValueTypes["Boolean_comparison_exp"] | null,
	licenceType?:ValueTypes["String_comparison_exp"] | null,
	productId?:ValueTypes["Int_comparison_exp"] | null,
	registeredUsername?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.entitlement_licences" */
["vectric_entitlement_licences_inc_input"]: {
	entitlementId?:number | null,
	entitlementLicenceId?:number | null,
	productId?:number | null
};
	/** input type for inserting data into table "vectric.entitlement_licences" */
["vectric_entitlement_licences_insert_input"]: {
	entitledProduct?:ValueTypes["vectric_entitled_products_obj_rel_insert_input"] | null,
	entitlement?:ValueTypes["vectric_entitlements_obj_rel_insert_input"] | null,
	entitlementId?:number | null,
	entitlementLicenceId?:number | null,
	licenceCode?:string | null,
	licenceIdAsDisplay?:boolean | null,
	licenceType?:string | null,
	productId?:number | null,
	registeredUsername?:string | null
};
	/** input type for inserting object relation for remote table "vectric.entitlement_licences" */
["vectric_entitlement_licences_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_entitlement_licences_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_entitlement_licences_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.entitlement_licences" */
["vectric_entitlement_licences_on_conflict"]: {
	constraint:ValueTypes["vectric_entitlement_licences_constraint"],
	update_columns:ValueTypes["vectric_entitlement_licences_update_column"][],
	where?:ValueTypes["vectric_entitlement_licences_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.entitlement_licences". */
["vectric_entitlement_licences_order_by"]: {
	entitledProduct?:ValueTypes["vectric_entitled_products_order_by"] | null,
	entitlement?:ValueTypes["vectric_entitlements_order_by"] | null,
	entitlementId?:ValueTypes["order_by"] | null,
	entitlementLicenceId?:ValueTypes["order_by"] | null,
	licenceCode?:ValueTypes["order_by"] | null,
	licenceIdAsDisplay?:ValueTypes["order_by"] | null,
	licenceType?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	registeredUsername?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_entitlement_licences */
["vectric_entitlement_licences_pk_columns_input"]: {
	entitlementLicenceId:number
};
	/** input type for updating data in table "vectric.entitlement_licences" */
["vectric_entitlement_licences_set_input"]: {
	entitlementId?:number | null,
	entitlementLicenceId?:number | null,
	licenceCode?:string | null,
	licenceIdAsDisplay?:boolean | null,
	licenceType?:string | null,
	productId?:number | null,
	registeredUsername?:string | null
};
	/** order by aggregate values of table "vectric.entitlements" */
["vectric_entitlements_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_entitlements_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_entitlements_max_order_by"] | null,
	min?:ValueTypes["vectric_entitlements_min_order_by"] | null,
	stddev?:ValueTypes["vectric_entitlements_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_entitlements_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_entitlements_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_entitlements_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_entitlements_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_entitlements_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_entitlements_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.entitlements" */
["vectric_entitlements_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_entitlements_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_entitlements_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.entitlements" */
["vectric_entitlements_avg_order_by"]: {
	entitledProductId?:ValueTypes["order_by"] | null,
	entitlementId?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	statusId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.entitlements". All fields are combined with a logical 'AND'. */
["vectric_entitlements_bool_exp"]: {
	_and?:ValueTypes["vectric_entitlements_bool_exp"][],
	_not?:ValueTypes["vectric_entitlements_bool_exp"] | null,
	_or?:ValueTypes["vectric_entitlements_bool_exp"][],
	amendedBy?:ValueTypes["String_comparison_exp"] | null,
	createdBy?:ValueTypes["String_comparison_exp"] | null,
	dateAmended?:ValueTypes["timestamp_comparison_exp"] | null,
	dateCreated?:ValueTypes["timestamp_comparison_exp"] | null,
	entitledProduct?:ValueTypes["vectric_entitled_products_bool_exp"] | null,
	entitledProductId?:ValueTypes["Int_comparison_exp"] | null,
	entitlementId?:ValueTypes["Int_comparison_exp"] | null,
	licence?:ValueTypes["vectric_entitlement_licences_bool_exp"] | null,
	ownedItem?:ValueTypes["vectric_owned_items_bool_exp"] | null,
	ownedItemId?:ValueTypes["Int_comparison_exp"] | null,
	statusId?:ValueTypes["Int_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.entitlements" */
["vectric_entitlements_inc_input"]: {
	entitledProductId?:number | null,
	entitlementId?:number | null,
	ownedItemId?:number | null,
	statusId?:number | null
};
	/** input type for inserting data into table "vectric.entitlements" */
["vectric_entitlements_insert_input"]: {
	amendedBy?:string | null,
	createdBy?:string | null,
	dateAmended?:ValueTypes["timestamp"] | null,
	dateCreated?:ValueTypes["timestamp"] | null,
	entitledProduct?:ValueTypes["vectric_entitled_products_obj_rel_insert_input"] | null,
	entitledProductId?:number | null,
	entitlementId?:number | null,
	licence?:ValueTypes["vectric_entitlement_licences_obj_rel_insert_input"] | null,
	ownedItem?:ValueTypes["vectric_owned_items_obj_rel_insert_input"] | null,
	ownedItemId?:number | null,
	statusId?:number | null
};
	/** order by max() on columns of table "vectric.entitlements" */
["vectric_entitlements_max_order_by"]: {
	amendedBy?:ValueTypes["order_by"] | null,
	createdBy?:ValueTypes["order_by"] | null,
	dateAmended?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	entitledProductId?:ValueTypes["order_by"] | null,
	entitlementId?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	statusId?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.entitlements" */
["vectric_entitlements_min_order_by"]: {
	amendedBy?:ValueTypes["order_by"] | null,
	createdBy?:ValueTypes["order_by"] | null,
	dateAmended?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	entitledProductId?:ValueTypes["order_by"] | null,
	entitlementId?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	statusId?:ValueTypes["order_by"] | null
};
	/** input type for inserting object relation for remote table "vectric.entitlements" */
["vectric_entitlements_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_entitlements_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_entitlements_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.entitlements" */
["vectric_entitlements_on_conflict"]: {
	constraint:ValueTypes["vectric_entitlements_constraint"],
	update_columns:ValueTypes["vectric_entitlements_update_column"][],
	where?:ValueTypes["vectric_entitlements_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.entitlements". */
["vectric_entitlements_order_by"]: {
	amendedBy?:ValueTypes["order_by"] | null,
	createdBy?:ValueTypes["order_by"] | null,
	dateAmended?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	entitledProduct?:ValueTypes["vectric_entitled_products_order_by"] | null,
	entitledProductId?:ValueTypes["order_by"] | null,
	entitlementId?:ValueTypes["order_by"] | null,
	licence?:ValueTypes["vectric_entitlement_licences_order_by"] | null,
	ownedItem?:ValueTypes["vectric_owned_items_order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	statusId?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_entitlements */
["vectric_entitlements_pk_columns_input"]: {
	entitlementId:number
};
	/** input type for updating data in table "vectric.entitlements" */
["vectric_entitlements_set_input"]: {
	amendedBy?:string | null,
	createdBy?:string | null,
	dateAmended?:ValueTypes["timestamp"] | null,
	dateCreated?:ValueTypes["timestamp"] | null,
	entitledProductId?:number | null,
	entitlementId?:number | null,
	ownedItemId?:number | null,
	statusId?:number | null
};
	/** order by stddev() on columns of table "vectric.entitlements" */
["vectric_entitlements_stddev_order_by"]: {
	entitledProductId?:ValueTypes["order_by"] | null,
	entitlementId?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	statusId?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.entitlements" */
["vectric_entitlements_stddev_pop_order_by"]: {
	entitledProductId?:ValueTypes["order_by"] | null,
	entitlementId?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	statusId?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.entitlements" */
["vectric_entitlements_stddev_samp_order_by"]: {
	entitledProductId?:ValueTypes["order_by"] | null,
	entitlementId?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	statusId?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.entitlements" */
["vectric_entitlements_sum_order_by"]: {
	entitledProductId?:ValueTypes["order_by"] | null,
	entitlementId?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	statusId?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.entitlements" */
["vectric_entitlements_var_pop_order_by"]: {
	entitledProductId?:ValueTypes["order_by"] | null,
	entitlementId?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	statusId?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.entitlements" */
["vectric_entitlements_var_samp_order_by"]: {
	entitledProductId?:ValueTypes["order_by"] | null,
	entitlementId?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	statusId?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.entitlements" */
["vectric_entitlements_variance_order_by"]: {
	entitledProductId?:ValueTypes["order_by"] | null,
	entitlementId?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	statusId?:ValueTypes["order_by"] | null
};
	/** order by aggregate values of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_free_clipart_tokens_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_free_clipart_tokens_max_order_by"] | null,
	min?:ValueTypes["vectric_free_clipart_tokens_min_order_by"] | null,
	stddev?:ValueTypes["vectric_free_clipart_tokens_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_free_clipart_tokens_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_free_clipart_tokens_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_free_clipart_tokens_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_free_clipart_tokens_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_free_clipart_tokens_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_free_clipart_tokens_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_free_clipart_tokens_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_free_clipart_tokens_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_avg_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	redeemableTokenOip?:ValueTypes["order_by"] | null,
	replacementOip?:ValueTypes["order_by"] | null,
	v10Product?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.free_clipart_tokens". All fields are combined with a logical 'AND'. */
["vectric_free_clipart_tokens_bool_exp"]: {
	_and?:ValueTypes["vectric_free_clipart_tokens_bool_exp"][],
	_not?:ValueTypes["vectric_free_clipart_tokens_bool_exp"] | null,
	_or?:ValueTypes["vectric_free_clipart_tokens_bool_exp"][],
	clipartToken?:ValueTypes["String_comparison_exp"] | null,
	completed?:ValueTypes["Boolean_comparison_exp"] | null,
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	dateAdded?:ValueTypes["timestamptz_comparison_exp"] | null,
	dateSelected?:ValueTypes["timestamptz_comparison_exp"] | null,
	redeemableToken?:ValueTypes["vectric_sales_salesitem_products_bool_exp"] | null,
	redeemableTokenOip?:ValueTypes["bigint_comparison_exp"] | null,
	replacementOip?:ValueTypes["bigint_comparison_exp"] | null,
	toV10Product?:ValueTypes["vectric_products_products_bool_exp"] | null,
	v10Product?:ValueTypes["bigint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_inc_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	redeemableTokenOip?:ValueTypes["bigint"] | null,
	replacementOip?:ValueTypes["bigint"] | null,
	v10Product?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_insert_input"]: {
	clipartToken?:string | null,
	completed?:boolean | null,
	customerId?:ValueTypes["bigint"] | null,
	dateAdded?:ValueTypes["timestamptz"] | null,
	dateSelected?:ValueTypes["timestamptz"] | null,
	redeemableToken?:ValueTypes["vectric_sales_salesitem_products_obj_rel_insert_input"] | null,
	redeemableTokenOip?:ValueTypes["bigint"] | null,
	replacementOip?:ValueTypes["bigint"] | null,
	toV10Product?:ValueTypes["vectric_products_products_obj_rel_insert_input"] | null,
	v10Product?:ValueTypes["bigint"] | null
};
	/** order by max() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_max_order_by"]: {
	clipartToken?:ValueTypes["order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	dateAdded?:ValueTypes["order_by"] | null,
	dateSelected?:ValueTypes["order_by"] | null,
	redeemableTokenOip?:ValueTypes["order_by"] | null,
	replacementOip?:ValueTypes["order_by"] | null,
	v10Product?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_min_order_by"]: {
	clipartToken?:ValueTypes["order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	dateAdded?:ValueTypes["order_by"] | null,
	dateSelected?:ValueTypes["order_by"] | null,
	redeemableTokenOip?:ValueTypes["order_by"] | null,
	replacementOip?:ValueTypes["order_by"] | null,
	v10Product?:ValueTypes["order_by"] | null
};
	/** on conflict condition type for table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_on_conflict"]: {
	constraint:ValueTypes["vectric_free_clipart_tokens_constraint"],
	update_columns:ValueTypes["vectric_free_clipart_tokens_update_column"][],
	where?:ValueTypes["vectric_free_clipart_tokens_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.free_clipart_tokens". */
["vectric_free_clipart_tokens_order_by"]: {
	clipartToken?:ValueTypes["order_by"] | null,
	completed?:ValueTypes["order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	dateAdded?:ValueTypes["order_by"] | null,
	dateSelected?:ValueTypes["order_by"] | null,
	redeemableToken?:ValueTypes["vectric_sales_salesitem_products_order_by"] | null,
	redeemableTokenOip?:ValueTypes["order_by"] | null,
	replacementOip?:ValueTypes["order_by"] | null,
	toV10Product?:ValueTypes["vectric_products_products_order_by"] | null,
	v10Product?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_free_clipart_tokens */
["vectric_free_clipart_tokens_pk_columns_input"]: {
	clipartToken:string
};
	/** input type for updating data in table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_set_input"]: {
	clipartToken?:string | null,
	completed?:boolean | null,
	customerId?:ValueTypes["bigint"] | null,
	dateAdded?:ValueTypes["timestamptz"] | null,
	dateSelected?:ValueTypes["timestamptz"] | null,
	redeemableTokenOip?:ValueTypes["bigint"] | null,
	replacementOip?:ValueTypes["bigint"] | null,
	v10Product?:ValueTypes["bigint"] | null
};
	/** order by stddev() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_stddev_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	redeemableTokenOip?:ValueTypes["order_by"] | null,
	replacementOip?:ValueTypes["order_by"] | null,
	v10Product?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_stddev_pop_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	redeemableTokenOip?:ValueTypes["order_by"] | null,
	replacementOip?:ValueTypes["order_by"] | null,
	v10Product?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_stddev_samp_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	redeemableTokenOip?:ValueTypes["order_by"] | null,
	replacementOip?:ValueTypes["order_by"] | null,
	v10Product?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_sum_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	redeemableTokenOip?:ValueTypes["order_by"] | null,
	replacementOip?:ValueTypes["order_by"] | null,
	v10Product?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_var_pop_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	redeemableTokenOip?:ValueTypes["order_by"] | null,
	replacementOip?:ValueTypes["order_by"] | null,
	v10Product?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_var_samp_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	redeemableTokenOip?:ValueTypes["order_by"] | null,
	replacementOip?:ValueTypes["order_by"] | null,
	v10Product?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_variance_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	redeemableTokenOip?:ValueTypes["order_by"] | null,
	replacementOip?:ValueTypes["order_by"] | null,
	v10Product?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.freeclipart". All fields are combined with a logical 'AND'. */
["vectric_freeclipart_bool_exp"]: {
	_and?:ValueTypes["vectric_freeclipart_bool_exp"][],
	_not?:ValueTypes["vectric_freeclipart_bool_exp"] | null,
	_or?:ValueTypes["vectric_freeclipart_bool_exp"][],
	accessId?:ValueTypes["String_comparison_exp"] | null,
	category?:ValueTypes["vectric_freeclipart_category_bool_exp"] | null,
	categoryId?:ValueTypes["bigint_comparison_exp"] | null,
	freeClipartId?:ValueTypes["bigint_comparison_exp"] | null,
	location?:ValueTypes["String_comparison_exp"] | null,
	name?:ValueTypes["String_comparison_exp"] | null,
	objectName?:ValueTypes["String_comparison_exp"] | null,
	previewImgUrl?:ValueTypes["String_comparison_exp"] | null
};
	/** Boolean expression to filter rows from the table "vectric.freeclipart_category". All fields are combined with a logical 'AND'. */
["vectric_freeclipart_category_bool_exp"]: {
	_and?:ValueTypes["vectric_freeclipart_category_bool_exp"][],
	_not?:ValueTypes["vectric_freeclipart_category_bool_exp"] | null,
	_or?:ValueTypes["vectric_freeclipart_category_bool_exp"][],
	categoryId?:ValueTypes["bigint_comparison_exp"] | null,
	name?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.freeclipart_category" */
["vectric_freeclipart_category_inc_input"]: {
	categoryId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.freeclipart_category" */
["vectric_freeclipart_category_insert_input"]: {
	categoryId?:ValueTypes["bigint"] | null,
	name?:string | null
};
	/** input type for inserting object relation for remote table "vectric.freeclipart_category" */
["vectric_freeclipart_category_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_freeclipart_category_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_freeclipart_category_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.freeclipart_category" */
["vectric_freeclipart_category_on_conflict"]: {
	constraint:ValueTypes["vectric_freeclipart_category_constraint"],
	update_columns:ValueTypes["vectric_freeclipart_category_update_column"][],
	where?:ValueTypes["vectric_freeclipart_category_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.freeclipart_category". */
["vectric_freeclipart_category_order_by"]: {
	categoryId?:ValueTypes["order_by"] | null,
	name?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_freeclipart_category */
["vectric_freeclipart_category_pk_columns_input"]: {
	categoryId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.freeclipart_category" */
["vectric_freeclipart_category_set_input"]: {
	categoryId?:ValueTypes["bigint"] | null,
	name?:string | null
};
	/** Boolean expression to filter rows from the table "vectric.freeclipart_download_record". All fields are combined with a logical 'AND'. */
["vectric_freeclipart_download_record_bool_exp"]: {
	_and?:ValueTypes["vectric_freeclipart_download_record_bool_exp"][],
	_not?:ValueTypes["vectric_freeclipart_download_record_bool_exp"] | null,
	_or?:ValueTypes["vectric_freeclipart_download_record_bool_exp"][],
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	downloadDate?:ValueTypes["timestamptz_comparison_exp"] | null,
	downloadId?:ValueTypes["bigint_comparison_exp"] | null,
	freeClipartResourceId?:ValueTypes["bigint_comparison_exp"] | null,
	ipAddress?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_inc_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	downloadId?:ValueTypes["bigint"] | null,
	freeClipartResourceId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_insert_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	downloadDate?:ValueTypes["timestamptz"] | null,
	downloadId?:ValueTypes["bigint"] | null,
	freeClipartResourceId?:ValueTypes["bigint"] | null,
	ipAddress?:string | null
};
	/** on conflict condition type for table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_on_conflict"]: {
	constraint:ValueTypes["vectric_freeclipart_download_record_constraint"],
	update_columns:ValueTypes["vectric_freeclipart_download_record_update_column"][],
	where?:ValueTypes["vectric_freeclipart_download_record_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.freeclipart_download_record". */
["vectric_freeclipart_download_record_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	downloadDate?:ValueTypes["order_by"] | null,
	downloadId?:ValueTypes["order_by"] | null,
	freeClipartResourceId?:ValueTypes["order_by"] | null,
	ipAddress?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_freeclipart_download_record */
["vectric_freeclipart_download_record_pk_columns_input"]: {
	downloadId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_set_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	downloadDate?:ValueTypes["timestamptz"] | null,
	downloadId?:ValueTypes["bigint"] | null,
	freeClipartResourceId?:ValueTypes["bigint"] | null,
	ipAddress?:string | null
};
	/** input type for incrementing numeric columns in table "vectric.freeclipart" */
["vectric_freeclipart_inc_input"]: {
	categoryId?:ValueTypes["bigint"] | null,
	freeClipartId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.freeclipart" */
["vectric_freeclipart_insert_input"]: {
	accessId?:string | null,
	category?:ValueTypes["vectric_freeclipart_category_obj_rel_insert_input"] | null,
	categoryId?:ValueTypes["bigint"] | null,
	freeClipartId?:ValueTypes["bigint"] | null,
	location?:string | null,
	name?:string | null,
	objectName?:string | null,
	previewImgUrl?:string | null
};
	/** input type for inserting object relation for remote table "vectric.freeclipart" */
["vectric_freeclipart_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_freeclipart_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_freeclipart_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.freeclipart" */
["vectric_freeclipart_on_conflict"]: {
	constraint:ValueTypes["vectric_freeclipart_constraint"],
	update_columns:ValueTypes["vectric_freeclipart_update_column"][],
	where?:ValueTypes["vectric_freeclipart_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.freeclipart". */
["vectric_freeclipart_order_by"]: {
	accessId?:ValueTypes["order_by"] | null,
	category?:ValueTypes["vectric_freeclipart_category_order_by"] | null,
	categoryId?:ValueTypes["order_by"] | null,
	freeClipartId?:ValueTypes["order_by"] | null,
	location?:ValueTypes["order_by"] | null,
	name?:ValueTypes["order_by"] | null,
	objectName?:ValueTypes["order_by"] | null,
	previewImgUrl?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_freeclipart */
["vectric_freeclipart_pk_columns_input"]: {
	freeClipartId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.freeclipart" */
["vectric_freeclipart_set_input"]: {
	accessId?:string | null,
	categoryId?:ValueTypes["bigint"] | null,
	freeClipartId?:ValueTypes["bigint"] | null,
	location?:string | null,
	name?:string | null,
	objectName?:string | null,
	previewImgUrl?:string | null
};
	/** Boolean expression to filter rows from the table "vectric.group_info". All fields are combined with a logical 'AND'. */
["vectric_group_info_bool_exp"]: {
	_and?:ValueTypes["vectric_group_info_bool_exp"][],
	_not?:ValueTypes["vectric_group_info_bool_exp"] | null,
	_or?:ValueTypes["vectric_group_info_bool_exp"][],
	customerid?:ValueTypes["bigint_comparison_exp"] | null,
	group_id?:ValueTypes["Int_comparison_exp"] | null,
	group_name?:ValueTypes["String_comparison_exp"] | null,
	role?:ValueTypes["String_comparison_exp"] | null
};
	/** Ordering options when selecting data from "vectric.group_info". */
["vectric_group_info_order_by"]: {
	customerid?:ValueTypes["order_by"] | null,
	group_id?:ValueTypes["order_by"] | null,
	group_name?:ValueTypes["order_by"] | null,
	role?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.group_roles". All fields are combined with a logical 'AND'. */
["vectric_group_roles_bool_exp"]: {
	_and?:ValueTypes["vectric_group_roles_bool_exp"][],
	_not?:ValueTypes["vectric_group_roles_bool_exp"] | null,
	_or?:ValueTypes["vectric_group_roles_bool_exp"][],
	id?:ValueTypes["Int_comparison_exp"] | null,
	role?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.group_roles" */
["vectric_group_roles_inc_input"]: {
	id?:number | null
};
	/** input type for inserting data into table "vectric.group_roles" */
["vectric_group_roles_insert_input"]: {
	id?:number | null,
	role?:string | null
};
	/** input type for inserting object relation for remote table "vectric.group_roles" */
["vectric_group_roles_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_group_roles_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_group_roles_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.group_roles" */
["vectric_group_roles_on_conflict"]: {
	constraint:ValueTypes["vectric_group_roles_constraint"],
	update_columns:ValueTypes["vectric_group_roles_update_column"][],
	where?:ValueTypes["vectric_group_roles_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.group_roles". */
["vectric_group_roles_order_by"]: {
	id?:ValueTypes["order_by"] | null,
	role?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_group_roles */
["vectric_group_roles_pk_columns_input"]: {
	id:number
};
	/** input type for updating data in table "vectric.group_roles" */
["vectric_group_roles_set_input"]: {
	id?:number | null,
	role?:string | null
};
	/** order by aggregate values of table "vectric.group_user_role" */
["vectric_group_user_role_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_group_user_role_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_group_user_role_max_order_by"] | null,
	min?:ValueTypes["vectric_group_user_role_min_order_by"] | null,
	stddev?:ValueTypes["vectric_group_user_role_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_group_user_role_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_group_user_role_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_group_user_role_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_group_user_role_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_group_user_role_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_group_user_role_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.group_user_role" */
["vectric_group_user_role_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_group_user_role_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_group_user_role_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_avg_order_by"]: {
	customer_id?:ValueTypes["order_by"] | null,
	group_id?:ValueTypes["order_by"] | null,
	role_id?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.group_user_role". All fields are combined with a logical 'AND'. */
["vectric_group_user_role_bool_exp"]: {
	_and?:ValueTypes["vectric_group_user_role_bool_exp"][],
	_not?:ValueTypes["vectric_group_user_role_bool_exp"] | null,
	_or?:ValueTypes["vectric_group_user_role_bool_exp"][],
	customer?:ValueTypes["vectric_sales_customers_bool_exp"] | null,
	customer_id?:ValueTypes["bigint_comparison_exp"] | null,
	group?:ValueTypes["vectric_groups_bool_exp"] | null,
	group_id?:ValueTypes["Int_comparison_exp"] | null,
	role?:ValueTypes["vectric_group_roles_bool_exp"] | null,
	role_id?:ValueTypes["Int_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.group_user_role" */
["vectric_group_user_role_inc_input"]: {
	customer_id?:ValueTypes["bigint"] | null,
	group_id?:number | null,
	role_id?:number | null
};
	/** input type for inserting data into table "vectric.group_user_role" */
["vectric_group_user_role_insert_input"]: {
	customer?:ValueTypes["vectric_sales_customers_obj_rel_insert_input"] | null,
	customer_id?:ValueTypes["bigint"] | null,
	group?:ValueTypes["vectric_groups_obj_rel_insert_input"] | null,
	group_id?:number | null,
	role?:ValueTypes["vectric_group_roles_obj_rel_insert_input"] | null,
	role_id?:number | null
};
	/** order by max() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_max_order_by"]: {
	customer_id?:ValueTypes["order_by"] | null,
	group_id?:ValueTypes["order_by"] | null,
	role_id?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_min_order_by"]: {
	customer_id?:ValueTypes["order_by"] | null,
	group_id?:ValueTypes["order_by"] | null,
	role_id?:ValueTypes["order_by"] | null
};
	/** on conflict condition type for table "vectric.group_user_role" */
["vectric_group_user_role_on_conflict"]: {
	constraint:ValueTypes["vectric_group_user_role_constraint"],
	update_columns:ValueTypes["vectric_group_user_role_update_column"][],
	where?:ValueTypes["vectric_group_user_role_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.group_user_role". */
["vectric_group_user_role_order_by"]: {
	customer?:ValueTypes["vectric_sales_customers_order_by"] | null,
	customer_id?:ValueTypes["order_by"] | null,
	group?:ValueTypes["vectric_groups_order_by"] | null,
	group_id?:ValueTypes["order_by"] | null,
	role?:ValueTypes["vectric_group_roles_order_by"] | null,
	role_id?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_group_user_role */
["vectric_group_user_role_pk_columns_input"]: {
	customer_id:ValueTypes["bigint"],
	group_id:number
};
	/** input type for updating data in table "vectric.group_user_role" */
["vectric_group_user_role_set_input"]: {
	customer_id?:ValueTypes["bigint"] | null,
	group_id?:number | null,
	role_id?:number | null
};
	/** order by stddev() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_stddev_order_by"]: {
	customer_id?:ValueTypes["order_by"] | null,
	group_id?:ValueTypes["order_by"] | null,
	role_id?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_stddev_pop_order_by"]: {
	customer_id?:ValueTypes["order_by"] | null,
	group_id?:ValueTypes["order_by"] | null,
	role_id?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_stddev_samp_order_by"]: {
	customer_id?:ValueTypes["order_by"] | null,
	group_id?:ValueTypes["order_by"] | null,
	role_id?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_sum_order_by"]: {
	customer_id?:ValueTypes["order_by"] | null,
	group_id?:ValueTypes["order_by"] | null,
	role_id?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_var_pop_order_by"]: {
	customer_id?:ValueTypes["order_by"] | null,
	group_id?:ValueTypes["order_by"] | null,
	role_id?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_var_samp_order_by"]: {
	customer_id?:ValueTypes["order_by"] | null,
	group_id?:ValueTypes["order_by"] | null,
	role_id?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_variance_order_by"]: {
	customer_id?:ValueTypes["order_by"] | null,
	group_id?:ValueTypes["order_by"] | null,
	role_id?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.groups". All fields are combined with a logical 'AND'. */
["vectric_groups_bool_exp"]: {
	_and?:ValueTypes["vectric_groups_bool_exp"][],
	_not?:ValueTypes["vectric_groups_bool_exp"] | null,
	_or?:ValueTypes["vectric_groups_bool_exp"][],
	created_at?:ValueTypes["timestamp_comparison_exp"] | null,
	group_name?:ValueTypes["String_comparison_exp"] | null,
	id?:ValueTypes["Int_comparison_exp"] | null,
	members?:ValueTypes["vectric_group_user_role_bool_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.groups" */
["vectric_groups_inc_input"]: {
	id?:number | null
};
	/** input type for inserting data into table "vectric.groups" */
["vectric_groups_insert_input"]: {
	created_at?:ValueTypes["timestamp"] | null,
	group_name?:string | null,
	id?:number | null,
	members?:ValueTypes["vectric_group_user_role_arr_rel_insert_input"] | null
};
	/** input type for inserting object relation for remote table "vectric.groups" */
["vectric_groups_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_groups_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_groups_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.groups" */
["vectric_groups_on_conflict"]: {
	constraint:ValueTypes["vectric_groups_constraint"],
	update_columns:ValueTypes["vectric_groups_update_column"][],
	where?:ValueTypes["vectric_groups_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.groups". */
["vectric_groups_order_by"]: {
	created_at?:ValueTypes["order_by"] | null,
	group_name?:ValueTypes["order_by"] | null,
	id?:ValueTypes["order_by"] | null,
	members_aggregate?:ValueTypes["vectric_group_user_role_aggregate_order_by"] | null
};
	/** primary key columns input for table: vectric_groups */
["vectric_groups_pk_columns_input"]: {
	id:number
};
	/** input type for updating data in table "vectric.groups" */
["vectric_groups_set_input"]: {
	created_at?:ValueTypes["timestamp"] | null,
	group_name?:string | null,
	id?:number | null
};
	/** Boolean expression to filter rows from the table "vectric.language_codes". All fields are combined with a logical 'AND'. */
["vectric_language_codes_bool_exp"]: {
	_and?:ValueTypes["vectric_language_codes_bool_exp"][],
	_not?:ValueTypes["vectric_language_codes_bool_exp"] | null,
	_or?:ValueTypes["vectric_language_codes_bool_exp"][],
	name?:ValueTypes["String_comparison_exp"] | null,
	threeLetterCode?:ValueTypes["bpchar_comparison_exp"] | null,
	twoLetterCode?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for inserting data into table "vectric.language_codes" */
["vectric_language_codes_insert_input"]: {
	name?:string | null,
	/** ISO 639-2 Code */
	threeLetterCode?:ValueTypes["bpchar"] | null,
	/** ISO 639-1 Code */
	twoLetterCode?:string | null
};
	/** input type for inserting object relation for remote table "vectric.language_codes" */
["vectric_language_codes_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_language_codes_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_language_codes_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.language_codes" */
["vectric_language_codes_on_conflict"]: {
	constraint:ValueTypes["vectric_language_codes_constraint"],
	update_columns:ValueTypes["vectric_language_codes_update_column"][],
	where?:ValueTypes["vectric_language_codes_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.language_codes". */
["vectric_language_codes_order_by"]: {
	name?:ValueTypes["order_by"] | null,
	threeLetterCode?:ValueTypes["order_by"] | null,
	twoLetterCode?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_language_codes */
["vectric_language_codes_pk_columns_input"]: {
	/** ISO 639-2 Code */
	threeLetterCode:ValueTypes["bpchar"]
};
	/** input type for updating data in table "vectric.language_codes" */
["vectric_language_codes_set_input"]: {
	name?:string | null,
	/** ISO 639-2 Code */
	threeLetterCode?:ValueTypes["bpchar"] | null,
	/** ISO 639-1 Code */
	twoLetterCode?:string | null
};
	/** order by aggregate values of table "vectric.licence_log" */
["vectric_licence_log_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_licence_log_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_licence_log_max_order_by"] | null,
	min?:ValueTypes["vectric_licence_log_min_order_by"] | null,
	stddev?:ValueTypes["vectric_licence_log_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_licence_log_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_licence_log_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_licence_log_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_licence_log_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_licence_log_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_licence_log_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.licence_log" */
["vectric_licence_log_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_licence_log_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_licence_log_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.licence_log" */
["vectric_licence_log_avg_order_by"]: {
	licenceId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.licence_log". All fields are combined with a logical 'AND'. */
["vectric_licence_log_bool_exp"]: {
	_and?:ValueTypes["vectric_licence_log_bool_exp"][],
	_not?:ValueTypes["vectric_licence_log_bool_exp"] | null,
	_or?:ValueTypes["vectric_licence_log_bool_exp"][],
	batchId?:ValueTypes["String_comparison_exp"] | null,
	createdBy?:ValueTypes["String_comparison_exp"] | null,
	dateCreated?:ValueTypes["timestamptz_comparison_exp"] | null,
	licenceCode?:ValueTypes["String_comparison_exp"] | null,
	licenceId?:ValueTypes["bigint_comparison_exp"] | null,
	oemLicenceId?:ValueTypes["bigint_comparison_exp"] | null,
	productName?:ValueTypes["String_comparison_exp"] | null,
	registeredUsername?:ValueTypes["String_comparison_exp"] | null,
	shortUrlHash?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.licence_log" */
["vectric_licence_log_inc_input"]: {
	licenceId?:ValueTypes["bigint"] | null,
	oemLicenceId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.licence_log" */
["vectric_licence_log_insert_input"]: {
	batchId?:string | null,
	createdBy?:string | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	licenceCode?:string | null,
	licenceId?:ValueTypes["bigint"] | null,
	oemLicenceId?:ValueTypes["bigint"] | null,
	productName?:string | null,
	registeredUsername?:string | null,
	shortUrlHash?:string | null
};
	/** order by max() on columns of table "vectric.licence_log" */
["vectric_licence_log_max_order_by"]: {
	batchId?:ValueTypes["order_by"] | null,
	createdBy?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	licenceCode?:ValueTypes["order_by"] | null,
	licenceId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null,
	productName?:ValueTypes["order_by"] | null,
	registeredUsername?:ValueTypes["order_by"] | null,
	shortUrlHash?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.licence_log" */
["vectric_licence_log_min_order_by"]: {
	batchId?:ValueTypes["order_by"] | null,
	createdBy?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	licenceCode?:ValueTypes["order_by"] | null,
	licenceId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null,
	productName?:ValueTypes["order_by"] | null,
	registeredUsername?:ValueTypes["order_by"] | null,
	shortUrlHash?:ValueTypes["order_by"] | null
};
	/** on conflict condition type for table "vectric.licence_log" */
["vectric_licence_log_on_conflict"]: {
	constraint:ValueTypes["vectric_licence_log_constraint"],
	update_columns:ValueTypes["vectric_licence_log_update_column"][],
	where?:ValueTypes["vectric_licence_log_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.licence_log". */
["vectric_licence_log_order_by"]: {
	batchId?:ValueTypes["order_by"] | null,
	createdBy?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	licenceCode?:ValueTypes["order_by"] | null,
	licenceId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null,
	productName?:ValueTypes["order_by"] | null,
	registeredUsername?:ValueTypes["order_by"] | null,
	shortUrlHash?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_licence_log */
["vectric_licence_log_pk_columns_input"]: {
	licenceId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.licence_log" */
["vectric_licence_log_set_input"]: {
	batchId?:string | null,
	createdBy?:string | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	licenceCode?:string | null,
	licenceId?:ValueTypes["bigint"] | null,
	oemLicenceId?:ValueTypes["bigint"] | null,
	productName?:string | null,
	registeredUsername?:string | null,
	shortUrlHash?:string | null
};
	/** order by stddev() on columns of table "vectric.licence_log" */
["vectric_licence_log_stddev_order_by"]: {
	licenceId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.licence_log" */
["vectric_licence_log_stddev_pop_order_by"]: {
	licenceId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.licence_log" */
["vectric_licence_log_stddev_samp_order_by"]: {
	licenceId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.licence_log" */
["vectric_licence_log_sum_order_by"]: {
	licenceId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.licence_log" */
["vectric_licence_log_var_pop_order_by"]: {
	licenceId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.licence_log" */
["vectric_licence_log_var_samp_order_by"]: {
	licenceId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.licence_log" */
["vectric_licence_log_variance_order_by"]: {
	licenceId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.linkshortener_links". All fields are combined with a logical 'AND'. */
["vectric_linkshortener_links_bool_exp"]: {
	_and?:ValueTypes["vectric_linkshortener_links_bool_exp"][],
	_not?:ValueTypes["vectric_linkshortener_links_bool_exp"] | null,
	_or?:ValueTypes["vectric_linkshortener_links_bool_exp"][],
	expiryDate?:ValueTypes["timestamptz_comparison_exp"] | null,
	limitDownloads?:ValueTypes["Boolean_comparison_exp"] | null,
	longUrl?:ValueTypes["String_comparison_exp"] | null,
	remainingDownloads?:ValueTypes["smallint_comparison_exp"] | null,
	shortUrlHash?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.linkshortener_links" */
["vectric_linkshortener_links_inc_input"]: {
	remainingDownloads?:ValueTypes["smallint"] | null
};
	/** input type for inserting data into table "vectric.linkshortener_links" */
["vectric_linkshortener_links_insert_input"]: {
	expiryDate?:ValueTypes["timestamptz"] | null,
	limitDownloads?:boolean | null,
	longUrl?:string | null,
	remainingDownloads?:ValueTypes["smallint"] | null,
	shortUrlHash?:string | null
};
	/** on conflict condition type for table "vectric.linkshortener_links" */
["vectric_linkshortener_links_on_conflict"]: {
	constraint:ValueTypes["vectric_linkshortener_links_constraint"],
	update_columns:ValueTypes["vectric_linkshortener_links_update_column"][],
	where?:ValueTypes["vectric_linkshortener_links_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.linkshortener_links". */
["vectric_linkshortener_links_order_by"]: {
	expiryDate?:ValueTypes["order_by"] | null,
	limitDownloads?:ValueTypes["order_by"] | null,
	longUrl?:ValueTypes["order_by"] | null,
	remainingDownloads?:ValueTypes["order_by"] | null,
	shortUrlHash?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_linkshortener_links */
["vectric_linkshortener_links_pk_columns_input"]: {
	shortUrlHash:string
};
	/** input type for updating data in table "vectric.linkshortener_links" */
["vectric_linkshortener_links_set_input"]: {
	expiryDate?:ValueTypes["timestamptz"] | null,
	limitDownloads?:boolean | null,
	longUrl?:string | null,
	remainingDownloads?:ValueTypes["smallint"] | null,
	shortUrlHash?:string | null
};
	/** Boolean expression to filter rows from the table "vectric.makerspace_requests". All fields are combined with a logical 'AND'. */
["vectric_makerspace_requests_bool_exp"]: {
	_and?:ValueTypes["vectric_makerspace_requests_bool_exp"][],
	_not?:ValueTypes["vectric_makerspace_requests_bool_exp"] | null,
	_or?:ValueTypes["vectric_makerspace_requests_bool_exp"][],
	ipAddress?:ValueTypes["String_comparison_exp"] | null,
	licenceCode?:ValueTypes["String_comparison_exp"] | null,
	licenceGenerated?:ValueTypes["String_comparison_exp"] | null,
	makerspaceDiskId?:ValueTypes["String_comparison_exp"] | null,
	makerspaceId?:ValueTypes["String_comparison_exp"] | null,
	requestDate?:ValueTypes["timestamptz_comparison_exp"] | null,
	requestId?:ValueTypes["bigint_comparison_exp"] | null,
	salesItemProductId?:ValueTypes["bigint_comparison_exp"] | null,
	trialDiskId?:ValueTypes["String_comparison_exp"] | null,
	trialLayerUuid?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.makerspace_requests" */
["vectric_makerspace_requests_inc_input"]: {
	requestId?:ValueTypes["bigint"] | null,
	salesItemProductId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.makerspace_requests" */
["vectric_makerspace_requests_insert_input"]: {
	ipAddress?:string | null,
	licenceCode?:string | null,
	licenceGenerated?:string | null,
	makerspaceDiskId?:string | null,
	makerspaceId?:string | null,
	requestDate?:ValueTypes["timestamptz"] | null,
	requestId?:ValueTypes["bigint"] | null,
	salesItemProductId?:ValueTypes["bigint"] | null,
	trialDiskId?:string | null,
	trialLayerUuid?:string | null
};
	/** on conflict condition type for table "vectric.makerspace_requests" */
["vectric_makerspace_requests_on_conflict"]: {
	constraint:ValueTypes["vectric_makerspace_requests_constraint"],
	update_columns:ValueTypes["vectric_makerspace_requests_update_column"][],
	where?:ValueTypes["vectric_makerspace_requests_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.makerspace_requests". */
["vectric_makerspace_requests_order_by"]: {
	ipAddress?:ValueTypes["order_by"] | null,
	licenceCode?:ValueTypes["order_by"] | null,
	licenceGenerated?:ValueTypes["order_by"] | null,
	makerspaceDiskId?:ValueTypes["order_by"] | null,
	makerspaceId?:ValueTypes["order_by"] | null,
	requestDate?:ValueTypes["order_by"] | null,
	requestId?:ValueTypes["order_by"] | null,
	salesItemProductId?:ValueTypes["order_by"] | null,
	trialDiskId?:ValueTypes["order_by"] | null,
	trialLayerUuid?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_makerspace_requests */
["vectric_makerspace_requests_pk_columns_input"]: {
	requestId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.makerspace_requests" */
["vectric_makerspace_requests_set_input"]: {
	ipAddress?:string | null,
	licenceCode?:string | null,
	licenceGenerated?:string | null,
	makerspaceDiskId?:string | null,
	makerspaceId?:string | null,
	requestDate?:ValueTypes["timestamptz"] | null,
	requestId?:ValueTypes["bigint"] | null,
	salesItemProductId?:ValueTypes["bigint"] | null,
	trialDiskId?:string | null,
	trialLayerUuid?:string | null
};
	/** Boolean expression to filter rows from the table "vectric.membership_invitation_status". All fields are combined with a logical 'AND'. */
["vectric_membership_invitation_status_bool_exp"]: {
	_and?:ValueTypes["vectric_membership_invitation_status_bool_exp"][],
	_not?:ValueTypes["vectric_membership_invitation_status_bool_exp"] | null,
	_or?:ValueTypes["vectric_membership_invitation_status_bool_exp"][],
	status?:ValueTypes["String_comparison_exp"] | null
};
	/** Boolean expression to compare columns of type "vectric_membership_invitation_status_enum". All fields are combined with logical 'AND'. */
["vectric_membership_invitation_status_enum_comparison_exp"]: {
	_eq?:ValueTypes["vectric_membership_invitation_status_enum"] | null,
	_in?:ValueTypes["vectric_membership_invitation_status_enum"][],
	_is_null?:boolean | null,
	_neq?:ValueTypes["vectric_membership_invitation_status_enum"] | null,
	_nin?:ValueTypes["vectric_membership_invitation_status_enum"][]
};
	/** input type for inserting data into table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_insert_input"]: {
	status?:string | null
};
	/** input type for inserting object relation for remote table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_membership_invitation_status_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_membership_invitation_status_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_on_conflict"]: {
	constraint:ValueTypes["vectric_membership_invitation_status_constraint"],
	update_columns:ValueTypes["vectric_membership_invitation_status_update_column"][],
	where?:ValueTypes["vectric_membership_invitation_status_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.membership_invitation_status". */
["vectric_membership_invitation_status_order_by"]: {
	status?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_membership_invitation_status */
["vectric_membership_invitation_status_pk_columns_input"]: {
	status:string
};
	/** input type for updating data in table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_set_input"]: {
	status?:string | null
};
	/** order by aggregate values of table "vectric.membership_invitations" */
["vectric_membership_invitations_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_membership_invitations_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_membership_invitations_max_order_by"] | null,
	min?:ValueTypes["vectric_membership_invitations_min_order_by"] | null,
	stddev?:ValueTypes["vectric_membership_invitations_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_membership_invitations_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_membership_invitations_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_membership_invitations_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_membership_invitations_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_membership_invitations_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_membership_invitations_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.membership_invitations" */
["vectric_membership_invitations_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_membership_invitations_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_membership_invitations_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_avg_order_by"]: {
	invitationId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.membership_invitations". All fields are combined with a logical 'AND'. */
["vectric_membership_invitations_bool_exp"]: {
	_and?:ValueTypes["vectric_membership_invitations_bool_exp"][],
	_not?:ValueTypes["vectric_membership_invitations_bool_exp"] | null,
	_or?:ValueTypes["vectric_membership_invitations_bool_exp"][],
	dateInvited?:ValueTypes["timestamp_comparison_exp"] | null,
	dateProcessed?:ValueTypes["timestamp_comparison_exp"] | null,
	email?:ValueTypes["String_comparison_exp"] | null,
	invitationId?:ValueTypes["Int_comparison_exp"] | null,
	invitationStatus?:ValueTypes["vectric_membership_invitation_status_enum_comparison_exp"] | null,
	invitedBy?:ValueTypes["String_comparison_exp"] | null,
	membership?:ValueTypes["vectric_memberships_bool_exp"] | null,
	membershipId?:ValueTypes["Int_comparison_exp"] | null,
	organization?:ValueTypes["vectric_organizations_bool_exp"] | null,
	organizationId?:ValueTypes["Int_comparison_exp"] | null,
	status?:ValueTypes["vectric_membership_invitation_status_bool_exp"] | null,
	token?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.membership_invitations" */
["vectric_membership_invitations_inc_input"]: {
	invitationId?:number | null,
	membershipId?:number | null,
	organizationId?:number | null
};
	/** input type for inserting data into table "vectric.membership_invitations" */
["vectric_membership_invitations_insert_input"]: {
	dateInvited?:ValueTypes["timestamp"] | null,
	dateProcessed?:ValueTypes["timestamp"] | null,
	email?:string | null,
	invitationId?:number | null,
	invitationStatus?:ValueTypes["vectric_membership_invitation_status_enum"] | null,
	invitedBy?:string | null,
	membership?:ValueTypes["vectric_memberships_obj_rel_insert_input"] | null,
	membershipId?:number | null,
	organization?:ValueTypes["vectric_organizations_obj_rel_insert_input"] | null,
	organizationId?:number | null,
	status?:ValueTypes["vectric_membership_invitation_status_obj_rel_insert_input"] | null,
	token?:string | null
};
	/** order by max() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_max_order_by"]: {
	dateInvited?:ValueTypes["order_by"] | null,
	dateProcessed?:ValueTypes["order_by"] | null,
	email?:ValueTypes["order_by"] | null,
	invitationId?:ValueTypes["order_by"] | null,
	invitedBy?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null,
	token?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_min_order_by"]: {
	dateInvited?:ValueTypes["order_by"] | null,
	dateProcessed?:ValueTypes["order_by"] | null,
	email?:ValueTypes["order_by"] | null,
	invitationId?:ValueTypes["order_by"] | null,
	invitedBy?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null,
	token?:ValueTypes["order_by"] | null
};
	/** on conflict condition type for table "vectric.membership_invitations" */
["vectric_membership_invitations_on_conflict"]: {
	constraint:ValueTypes["vectric_membership_invitations_constraint"],
	update_columns:ValueTypes["vectric_membership_invitations_update_column"][],
	where?:ValueTypes["vectric_membership_invitations_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.membership_invitations". */
["vectric_membership_invitations_order_by"]: {
	dateInvited?:ValueTypes["order_by"] | null,
	dateProcessed?:ValueTypes["order_by"] | null,
	email?:ValueTypes["order_by"] | null,
	invitationId?:ValueTypes["order_by"] | null,
	invitationStatus?:ValueTypes["order_by"] | null,
	invitedBy?:ValueTypes["order_by"] | null,
	membership?:ValueTypes["vectric_memberships_order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organization?:ValueTypes["vectric_organizations_order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["vectric_membership_invitation_status_order_by"] | null,
	token?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_membership_invitations */
["vectric_membership_invitations_pk_columns_input"]: {
	invitationId:number
};
	/** input type for updating data in table "vectric.membership_invitations" */
["vectric_membership_invitations_set_input"]: {
	dateInvited?:ValueTypes["timestamp"] | null,
	dateProcessed?:ValueTypes["timestamp"] | null,
	email?:string | null,
	invitationId?:number | null,
	invitationStatus?:ValueTypes["vectric_membership_invitation_status_enum"] | null,
	invitedBy?:string | null,
	membershipId?:number | null,
	organizationId?:number | null,
	token?:string | null
};
	/** order by stddev() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_stddev_order_by"]: {
	invitationId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_stddev_pop_order_by"]: {
	invitationId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_stddev_samp_order_by"]: {
	invitationId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_sum_order_by"]: {
	invitationId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_var_pop_order_by"]: {
	invitationId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_var_samp_order_by"]: {
	invitationId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_variance_order_by"]: {
	invitationId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.membership_roles". All fields are combined with a logical 'AND'. */
["vectric_membership_roles_bool_exp"]: {
	_and?:ValueTypes["vectric_membership_roles_bool_exp"][],
	_not?:ValueTypes["vectric_membership_roles_bool_exp"] | null,
	_or?:ValueTypes["vectric_membership_roles_bool_exp"][],
	role?:ValueTypes["String_comparison_exp"] | null
};
	/** Boolean expression to compare columns of type "vectric_membership_roles_enum". All fields are combined with logical 'AND'. */
["vectric_membership_roles_enum_comparison_exp"]: {
	_eq?:ValueTypes["vectric_membership_roles_enum"] | null,
	_in?:ValueTypes["vectric_membership_roles_enum"][],
	_is_null?:boolean | null,
	_neq?:ValueTypes["vectric_membership_roles_enum"] | null,
	_nin?:ValueTypes["vectric_membership_roles_enum"][]
};
	/** input type for inserting data into table "vectric.membership_roles" */
["vectric_membership_roles_insert_input"]: {
	role?:string | null
};
	/** input type for inserting object relation for remote table "vectric.membership_roles" */
["vectric_membership_roles_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_membership_roles_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_membership_roles_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.membership_roles" */
["vectric_membership_roles_on_conflict"]: {
	constraint:ValueTypes["vectric_membership_roles_constraint"],
	update_columns:ValueTypes["vectric_membership_roles_update_column"][],
	where?:ValueTypes["vectric_membership_roles_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.membership_roles". */
["vectric_membership_roles_order_by"]: {
	role?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_membership_roles */
["vectric_membership_roles_pk_columns_input"]: {
	role:string
};
	/** input type for updating data in table "vectric.membership_roles" */
["vectric_membership_roles_set_input"]: {
	role?:string | null
};
	/** Boolean expression to filter rows from the table "vectric.membership_status". All fields are combined with a logical 'AND'. */
["vectric_membership_status_bool_exp"]: {
	_and?:ValueTypes["vectric_membership_status_bool_exp"][],
	_not?:ValueTypes["vectric_membership_status_bool_exp"] | null,
	_or?:ValueTypes["vectric_membership_status_bool_exp"][],
	status?:ValueTypes["String_comparison_exp"] | null
};
	/** Boolean expression to compare columns of type "vectric_membership_status_enum". All fields are combined with logical 'AND'. */
["vectric_membership_status_enum_comparison_exp"]: {
	_eq?:ValueTypes["vectric_membership_status_enum"] | null,
	_in?:ValueTypes["vectric_membership_status_enum"][],
	_is_null?:boolean | null,
	_neq?:ValueTypes["vectric_membership_status_enum"] | null,
	_nin?:ValueTypes["vectric_membership_status_enum"][]
};
	/** input type for inserting data into table "vectric.membership_status" */
["vectric_membership_status_insert_input"]: {
	status?:string | null
};
	/** input type for inserting object relation for remote table "vectric.membership_status" */
["vectric_membership_status_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_membership_status_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_membership_status_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.membership_status" */
["vectric_membership_status_on_conflict"]: {
	constraint:ValueTypes["vectric_membership_status_constraint"],
	update_columns:ValueTypes["vectric_membership_status_update_column"][],
	where?:ValueTypes["vectric_membership_status_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.membership_status". */
["vectric_membership_status_order_by"]: {
	status?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_membership_status */
["vectric_membership_status_pk_columns_input"]: {
	status:string
};
	/** input type for updating data in table "vectric.membership_status" */
["vectric_membership_status_set_input"]: {
	status?:string | null
};
	/** order by aggregate values of table "vectric.memberships" */
["vectric_memberships_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_memberships_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_memberships_max_order_by"] | null,
	min?:ValueTypes["vectric_memberships_min_order_by"] | null,
	stddev?:ValueTypes["vectric_memberships_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_memberships_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_memberships_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_memberships_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_memberships_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_memberships_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_memberships_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.memberships" */
["vectric_memberships_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_memberships_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_memberships_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.memberships" */
["vectric_memberships_avg_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.memberships". All fields are combined with a logical 'AND'. */
["vectric_memberships_bool_exp"]: {
	_and?:ValueTypes["vectric_memberships_bool_exp"][],
	_not?:ValueTypes["vectric_memberships_bool_exp"] | null,
	_or?:ValueTypes["vectric_memberships_bool_exp"][],
	activeMembers?:ValueTypes["vectric_active_memberships_bool_exp"] | null,
	addedBy?:ValueTypes["String_comparison_exp"] | null,
	amendedBy?:ValueTypes["String_comparison_exp"] | null,
	customer?:ValueTypes["vectric_sales_customers_bool_exp"] | null,
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	dateAdded?:ValueTypes["timestamp_comparison_exp"] | null,
	dateAmended?:ValueTypes["timestamp_comparison_exp"] | null,
	membershipId?:ValueTypes["Int_comparison_exp"] | null,
	membershipInvitations?:ValueTypes["vectric_membership_invitations_bool_exp"] | null,
	membershipRole?:ValueTypes["vectric_membership_roles_bool_exp"] | null,
	membershipStatus?:ValueTypes["vectric_membership_status_bool_exp"] | null,
	organization?:ValueTypes["vectric_organizations_bool_exp"] | null,
	organizationId?:ValueTypes["Int_comparison_exp"] | null,
	role?:ValueTypes["vectric_membership_roles_enum_comparison_exp"] | null,
	status?:ValueTypes["vectric_membership_status_enum_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.memberships" */
["vectric_memberships_inc_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	membershipId?:number | null,
	organizationId?:number | null
};
	/** input type for inserting data into table "vectric.memberships" */
["vectric_memberships_insert_input"]: {
	activeMembers?:ValueTypes["vectric_active_memberships_arr_rel_insert_input"] | null,
	addedBy?:string | null,
	amendedBy?:string | null,
	customer?:ValueTypes["vectric_sales_customers_obj_rel_insert_input"] | null,
	customerId?:ValueTypes["bigint"] | null,
	dateAdded?:ValueTypes["timestamp"] | null,
	dateAmended?:ValueTypes["timestamp"] | null,
	membershipId?:number | null,
	membershipInvitations?:ValueTypes["vectric_membership_invitations_arr_rel_insert_input"] | null,
	membershipRole?:ValueTypes["vectric_membership_roles_obj_rel_insert_input"] | null,
	membershipStatus?:ValueTypes["vectric_membership_status_obj_rel_insert_input"] | null,
	organization?:ValueTypes["vectric_organizations_obj_rel_insert_input"] | null,
	organizationId?:number | null,
	role?:ValueTypes["vectric_membership_roles_enum"] | null,
	status?:ValueTypes["vectric_membership_status_enum"] | null
};
	/** order by max() on columns of table "vectric.memberships" */
["vectric_memberships_max_order_by"]: {
	addedBy?:ValueTypes["order_by"] | null,
	amendedBy?:ValueTypes["order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	dateAdded?:ValueTypes["order_by"] | null,
	dateAmended?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.memberships" */
["vectric_memberships_min_order_by"]: {
	addedBy?:ValueTypes["order_by"] | null,
	amendedBy?:ValueTypes["order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	dateAdded?:ValueTypes["order_by"] | null,
	dateAmended?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** input type for inserting object relation for remote table "vectric.memberships" */
["vectric_memberships_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_memberships_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_memberships_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.memberships" */
["vectric_memberships_on_conflict"]: {
	constraint:ValueTypes["vectric_memberships_constraint"],
	update_columns:ValueTypes["vectric_memberships_update_column"][],
	where?:ValueTypes["vectric_memberships_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.memberships". */
["vectric_memberships_order_by"]: {
	activeMembers_aggregate?:ValueTypes["vectric_active_memberships_aggregate_order_by"] | null,
	addedBy?:ValueTypes["order_by"] | null,
	amendedBy?:ValueTypes["order_by"] | null,
	customer?:ValueTypes["vectric_sales_customers_order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	dateAdded?:ValueTypes["order_by"] | null,
	dateAmended?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	membershipInvitations_aggregate?:ValueTypes["vectric_membership_invitations_aggregate_order_by"] | null,
	membershipRole?:ValueTypes["vectric_membership_roles_order_by"] | null,
	membershipStatus?:ValueTypes["vectric_membership_status_order_by"] | null,
	organization?:ValueTypes["vectric_organizations_order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null,
	role?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_memberships */
["vectric_memberships_pk_columns_input"]: {
	membershipId:number
};
	/** input type for updating data in table "vectric.memberships" */
["vectric_memberships_set_input"]: {
	addedBy?:string | null,
	amendedBy?:string | null,
	customerId?:ValueTypes["bigint"] | null,
	dateAdded?:ValueTypes["timestamp"] | null,
	dateAmended?:ValueTypes["timestamp"] | null,
	membershipId?:number | null,
	organizationId?:number | null,
	role?:ValueTypes["vectric_membership_roles_enum"] | null,
	status?:ValueTypes["vectric_membership_status_enum"] | null
};
	/** order by stddev() on columns of table "vectric.memberships" */
["vectric_memberships_stddev_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.memberships" */
["vectric_memberships_stddev_pop_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.memberships" */
["vectric_memberships_stddev_samp_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.memberships" */
["vectric_memberships_sum_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.memberships" */
["vectric_memberships_var_pop_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.memberships" */
["vectric_memberships_var_samp_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.memberships" */
["vectric_memberships_variance_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.oauth_client_details". All fields are combined with a logical 'AND'. */
["vectric_oauth_client_details_bool_exp"]: {
	_and?:ValueTypes["vectric_oauth_client_details_bool_exp"][],
	_not?:ValueTypes["vectric_oauth_client_details_bool_exp"] | null,
	_or?:ValueTypes["vectric_oauth_client_details_bool_exp"][],
	access_token_validity?:ValueTypes["bigint_comparison_exp"] | null,
	additional_information?:ValueTypes["String_comparison_exp"] | null,
	authorities?:ValueTypes["String_comparison_exp"] | null,
	authorized_grant_types?:ValueTypes["String_comparison_exp"] | null,
	autoapprove?:ValueTypes["String_comparison_exp"] | null,
	client_id?:ValueTypes["String_comparison_exp"] | null,
	client_secret?:ValueTypes["String_comparison_exp"] | null,
	refresh_token_validity?:ValueTypes["bigint_comparison_exp"] | null,
	resource_ids?:ValueTypes["String_comparison_exp"] | null,
	scope?:ValueTypes["String_comparison_exp"] | null,
	web_server_redirect_uri?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.oauth_client_details" */
["vectric_oauth_client_details_inc_input"]: {
	access_token_validity?:ValueTypes["bigint"] | null,
	refresh_token_validity?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.oauth_client_details" */
["vectric_oauth_client_details_insert_input"]: {
	access_token_validity?:ValueTypes["bigint"] | null,
	additional_information?:string | null,
	authorities?:string | null,
	authorized_grant_types?:string | null,
	autoapprove?:string | null,
	client_id?:string | null,
	client_secret?:string | null,
	refresh_token_validity?:ValueTypes["bigint"] | null,
	resource_ids?:string | null,
	scope?:string | null,
	web_server_redirect_uri?:string | null
};
	/** on conflict condition type for table "vectric.oauth_client_details" */
["vectric_oauth_client_details_on_conflict"]: {
	constraint:ValueTypes["vectric_oauth_client_details_constraint"],
	update_columns:ValueTypes["vectric_oauth_client_details_update_column"][],
	where?:ValueTypes["vectric_oauth_client_details_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.oauth_client_details". */
["vectric_oauth_client_details_order_by"]: {
	access_token_validity?:ValueTypes["order_by"] | null,
	additional_information?:ValueTypes["order_by"] | null,
	authorities?:ValueTypes["order_by"] | null,
	authorized_grant_types?:ValueTypes["order_by"] | null,
	autoapprove?:ValueTypes["order_by"] | null,
	client_id?:ValueTypes["order_by"] | null,
	client_secret?:ValueTypes["order_by"] | null,
	refresh_token_validity?:ValueTypes["order_by"] | null,
	resource_ids?:ValueTypes["order_by"] | null,
	scope?:ValueTypes["order_by"] | null,
	web_server_redirect_uri?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_oauth_client_details */
["vectric_oauth_client_details_pk_columns_input"]: {
	client_id:string
};
	/** input type for updating data in table "vectric.oauth_client_details" */
["vectric_oauth_client_details_set_input"]: {
	access_token_validity?:ValueTypes["bigint"] | null,
	additional_information?:string | null,
	authorities?:string | null,
	authorized_grant_types?:string | null,
	autoapprove?:string | null,
	client_id?:string | null,
	client_secret?:string | null,
	refresh_token_validity?:ValueTypes["bigint"] | null,
	resource_ids?:string | null,
	scope?:string | null,
	web_server_redirect_uri?:string | null
};
	/** Boolean expression to filter rows from the table "vectric.oem_allocation_emails". All fields are combined with a logical 'AND'. */
["vectric_oem_allocation_emails_bool_exp"]: {
	_and?:ValueTypes["vectric_oem_allocation_emails_bool_exp"][],
	_not?:ValueTypes["vectric_oem_allocation_emails_bool_exp"] | null,
	_or?:ValueTypes["vectric_oem_allocation_emails_bool_exp"][],
	bundle_id?:ValueTypes["String_comparison_exp"] | null,
	date?:ValueTypes["timestamp_comparison_exp"] | null,
	email_to?:ValueTypes["String_comparison_exp"] | null,
	oem_customer?:ValueTypes["vectric_sales_customers_bool_exp"] | null,
	oem_customer_id?:ValueTypes["bigint_comparison_exp"] | null,
	oem_partner?:ValueTypes["vectric_oem_partners_bool_exp"] | null,
	partner_id?:ValueTypes["bigint_comparison_exp"] | null,
	sales_oem_bundle?:ValueTypes["vectric_sales_oem_bundles_bool_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails_inc_input"]: {
	oem_customer_id?:ValueTypes["bigint"] | null,
	partner_id?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails_insert_input"]: {
	bundle_id?:string | null,
	date?:ValueTypes["timestamp"] | null,
	email_to?:string | null,
	oem_customer?:ValueTypes["vectric_sales_customers_obj_rel_insert_input"] | null,
	oem_customer_id?:ValueTypes["bigint"] | null,
	oem_partner?:ValueTypes["vectric_oem_partners_obj_rel_insert_input"] | null,
	partner_id?:ValueTypes["bigint"] | null,
	sales_oem_bundle?:ValueTypes["vectric_sales_oem_bundles_obj_rel_insert_input"] | null
};
	/** Ordering options when selecting data from "vectric.oem_allocation_emails". */
["vectric_oem_allocation_emails_order_by"]: {
	bundle_id?:ValueTypes["order_by"] | null,
	date?:ValueTypes["order_by"] | null,
	email_to?:ValueTypes["order_by"] | null,
	oem_customer?:ValueTypes["vectric_sales_customers_order_by"] | null,
	oem_customer_id?:ValueTypes["order_by"] | null,
	oem_partner?:ValueTypes["vectric_oem_partners_order_by"] | null,
	partner_id?:ValueTypes["order_by"] | null,
	sales_oem_bundle?:ValueTypes["vectric_sales_oem_bundles_order_by"] | null
};
	/** input type for updating data in table "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails_set_input"]: {
	bundle_id?:string | null,
	date?:ValueTypes["timestamp"] | null,
	email_to?:string | null,
	oem_customer_id?:ValueTypes["bigint"] | null,
	partner_id?:ValueTypes["bigint"] | null
};
	/** order by aggregate values of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_oem_detailed_products_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_oem_detailed_products_max_order_by"] | null,
	min?:ValueTypes["vectric_oem_detailed_products_min_order_by"] | null,
	stddev?:ValueTypes["vectric_oem_detailed_products_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_oem_detailed_products_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_oem_detailed_products_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_oem_detailed_products_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_oem_detailed_products_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_oem_detailed_products_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_oem_detailed_products_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_oem_detailed_products_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_detailed_products_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_avg_order_by"]: {
	id?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.oem_detailed_products". All fields are combined with a logical 'AND'. */
["vectric_oem_detailed_products_bool_exp"]: {
	_and?:ValueTypes["vectric_oem_detailed_products_bool_exp"][],
	_not?:ValueTypes["vectric_oem_detailed_products_bool_exp"] | null,
	_or?:ValueTypes["vectric_oem_detailed_products_bool_exp"][],
	id?:ValueTypes["bigint_comparison_exp"] | null,
	oemProductId?:ValueTypes["bigint_comparison_exp"] | null,
	product?:ValueTypes["vectric_products_products_bool_exp"] | null,
	productId?:ValueTypes["bigint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_inc_input"]: {
	id?:ValueTypes["bigint"] | null,
	oemProductId?:ValueTypes["bigint"] | null,
	productId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_insert_input"]: {
	id?:ValueTypes["bigint"] | null,
	oemProductId?:ValueTypes["bigint"] | null,
	product?:ValueTypes["vectric_products_products_obj_rel_insert_input"] | null,
	productId?:ValueTypes["bigint"] | null
};
	/** order by max() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_max_order_by"]: {
	id?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_min_order_by"]: {
	id?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** on conflict condition type for table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_on_conflict"]: {
	constraint:ValueTypes["vectric_oem_detailed_products_constraint"],
	update_columns:ValueTypes["vectric_oem_detailed_products_update_column"][],
	where?:ValueTypes["vectric_oem_detailed_products_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.oem_detailed_products". */
["vectric_oem_detailed_products_order_by"]: {
	id?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["vectric_products_products_order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_oem_detailed_products */
["vectric_oem_detailed_products_pk_columns_input"]: {
	id:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_set_input"]: {
	id?:ValueTypes["bigint"] | null,
	oemProductId?:ValueTypes["bigint"] | null,
	productId?:ValueTypes["bigint"] | null
};
	/** order by stddev() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_stddev_order_by"]: {
	id?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_stddev_pop_order_by"]: {
	id?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_stddev_samp_order_by"]: {
	id?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_sum_order_by"]: {
	id?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_var_pop_order_by"]: {
	id?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_var_samp_order_by"]: {
	id?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_variance_order_by"]: {
	id?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.oem_eval_request". All fields are combined with a logical 'AND'. */
["vectric_oem_eval_request_bool_exp"]: {
	_and?:ValueTypes["vectric_oem_eval_request_bool_exp"][],
	_not?:ValueTypes["vectric_oem_eval_request_bool_exp"] | null,
	_or?:ValueTypes["vectric_oem_eval_request_bool_exp"][],
	customer?:ValueTypes["vectric_sales_customers_bool_exp"] | null,
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	dateProcessed?:ValueTypes["timestamptz_comparison_exp"] | null,
	dateRequested?:ValueTypes["timestamptz_comparison_exp"] | null,
	expired?:ValueTypes["Boolean_comparison_exp"] | null,
	granted?:ValueTypes["Boolean_comparison_exp"] | null,
	partner?:ValueTypes["vectric_oem_partners_bool_exp"] | null,
	partnerId?:ValueTypes["bigint_comparison_exp"] | null,
	processed?:ValueTypes["Boolean_comparison_exp"] | null,
	processedBy?:ValueTypes["String_comparison_exp"] | null,
	replacedBy?:ValueTypes["bigint_comparison_exp"] | null,
	replacementRequest?:ValueTypes["vectric_oem_eval_request_bool_exp"] | null,
	requestId?:ValueTypes["bigint_comparison_exp"] | null,
	requestedBy?:ValueTypes["bigint_comparison_exp"] | null,
	requester?:ValueTypes["vectric_sales_customers_bool_exp"] | null,
	vloggerId?:ValueTypes["Int_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.oem_eval_request" */
["vectric_oem_eval_request_inc_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	partnerId?:ValueTypes["bigint"] | null,
	replacedBy?:ValueTypes["bigint"] | null,
	requestId?:ValueTypes["bigint"] | null,
	requestedBy?:ValueTypes["bigint"] | null,
	vloggerId?:number | null
};
	/** input type for inserting data into table "vectric.oem_eval_request" */
["vectric_oem_eval_request_insert_input"]: {
	customer?:ValueTypes["vectric_sales_customers_obj_rel_insert_input"] | null,
	customerId?:ValueTypes["bigint"] | null,
	dateProcessed?:ValueTypes["timestamptz"] | null,
	dateRequested?:ValueTypes["timestamptz"] | null,
	expired?:boolean | null,
	granted?:boolean | null,
	partner?:ValueTypes["vectric_oem_partners_obj_rel_insert_input"] | null,
	partnerId?:ValueTypes["bigint"] | null,
	processed?:boolean | null,
	processedBy?:string | null,
	replacedBy?:ValueTypes["bigint"] | null,
	replacementRequest?:ValueTypes["vectric_oem_eval_request_obj_rel_insert_input"] | null,
	requestId?:ValueTypes["bigint"] | null,
	requestedBy?:ValueTypes["bigint"] | null,
	requester?:ValueTypes["vectric_sales_customers_obj_rel_insert_input"] | null,
	vloggerId?:number | null
};
	/** input type for inserting object relation for remote table "vectric.oem_eval_request" */
["vectric_oem_eval_request_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_oem_eval_request_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_eval_request_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.oem_eval_request" */
["vectric_oem_eval_request_on_conflict"]: {
	constraint:ValueTypes["vectric_oem_eval_request_constraint"],
	update_columns:ValueTypes["vectric_oem_eval_request_update_column"][],
	where?:ValueTypes["vectric_oem_eval_request_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.oem_eval_request". */
["vectric_oem_eval_request_order_by"]: {
	customer?:ValueTypes["vectric_sales_customers_order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	dateProcessed?:ValueTypes["order_by"] | null,
	dateRequested?:ValueTypes["order_by"] | null,
	expired?:ValueTypes["order_by"] | null,
	granted?:ValueTypes["order_by"] | null,
	partner?:ValueTypes["vectric_oem_partners_order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	processed?:ValueTypes["order_by"] | null,
	processedBy?:ValueTypes["order_by"] | null,
	replacedBy?:ValueTypes["order_by"] | null,
	replacementRequest?:ValueTypes["vectric_oem_eval_request_order_by"] | null,
	requestId?:ValueTypes["order_by"] | null,
	requestedBy?:ValueTypes["order_by"] | null,
	requester?:ValueTypes["vectric_sales_customers_order_by"] | null,
	vloggerId?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_oem_eval_request */
["vectric_oem_eval_request_pk_columns_input"]: {
	requestId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_eval_request" */
["vectric_oem_eval_request_set_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	dateProcessed?:ValueTypes["timestamptz"] | null,
	dateRequested?:ValueTypes["timestamptz"] | null,
	expired?:boolean | null,
	granted?:boolean | null,
	partnerId?:ValueTypes["bigint"] | null,
	processed?:boolean | null,
	processedBy?:string | null,
	replacedBy?:ValueTypes["bigint"] | null,
	requestId?:ValueTypes["bigint"] | null,
	requestedBy?:ValueTypes["bigint"] | null,
	vloggerId?:number | null
};
	/** order by aggregate values of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_oem_fastspring_item_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_oem_fastspring_item_max_order_by"] | null,
	min?:ValueTypes["vectric_oem_fastspring_item_min_order_by"] | null,
	stddev?:ValueTypes["vectric_oem_fastspring_item_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_oem_fastspring_item_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_oem_fastspring_item_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_oem_fastspring_item_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_oem_fastspring_item_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_oem_fastspring_item_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_oem_fastspring_item_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_oem_fastspring_item_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_fastspring_item_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_avg_order_by"]: {
	discountValue?:ValueTypes["order_by"] | null,
	itemId?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	orderId?:ValueTypes["order_by"] | null,
	priceTotal?:ValueTypes["order_by"] | null,
	quantity?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.oem_fastspring_item". All fields are combined with a logical 'AND'. */
["vectric_oem_fastspring_item_bool_exp"]: {
	_and?:ValueTypes["vectric_oem_fastspring_item_bool_exp"][],
	_not?:ValueTypes["vectric_oem_fastspring_item_bool_exp"] | null,
	_or?:ValueTypes["vectric_oem_fastspring_item_bool_exp"][],
	batchId?:ValueTypes["String_comparison_exp"] | null,
	discountValue?:ValueTypes["numeric_comparison_exp"] | null,
	itemBundle?:ValueTypes["vectric_oem_fastspring_item_bundle_bool_exp"] | null,
	itemId?:ValueTypes["bigint_comparison_exp"] | null,
	oemProduct?:ValueTypes["vectric_oem_products_bool_exp"] | null,
	oemProductId?:ValueTypes["bigint_comparison_exp"] | null,
	order?:ValueTypes["vectric_oem_fastspring_order_bool_exp"] | null,
	orderId?:ValueTypes["bigint_comparison_exp"] | null,
	priceTotal?:ValueTypes["numeric_comparison_exp"] | null,
	productName?:ValueTypes["String_comparison_exp"] | null,
	quantity?:ValueTypes["bigint_comparison_exp"] | null
};
	/** order by aggregate values of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_oem_fastspring_item_bundle_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_oem_fastspring_item_bundle_max_order_by"] | null,
	min?:ValueTypes["vectric_oem_fastspring_item_bundle_min_order_by"] | null,
	stddev?:ValueTypes["vectric_oem_fastspring_item_bundle_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_oem_fastspring_item_bundle_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_oem_fastspring_item_bundle_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_oem_fastspring_item_bundle_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_oem_fastspring_item_bundle_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_oem_fastspring_item_bundle_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_oem_fastspring_item_bundle_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_oem_fastspring_item_bundle_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_fastspring_item_bundle_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_avg_order_by"]: {
	fastspringItemId?:ValueTypes["order_by"] | null,
	itemBundleId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.oem_fastspring_item_bundle". All fields are combined with a logical 'AND'. */
["vectric_oem_fastspring_item_bundle_bool_exp"]: {
	_and?:ValueTypes["vectric_oem_fastspring_item_bundle_bool_exp"][],
	_not?:ValueTypes["vectric_oem_fastspring_item_bundle_bool_exp"] | null,
	_or?:ValueTypes["vectric_oem_fastspring_item_bundle_bool_exp"][],
	bundle?:ValueTypes["vectric_sales_oem_bundles_bool_exp"] | null,
	bundleId?:ValueTypes["String_comparison_exp"] | null,
	fastspringItem?:ValueTypes["vectric_oem_fastspring_item_bool_exp"] | null,
	fastspringItemId?:ValueTypes["bigint_comparison_exp"] | null,
	itemBundleId?:ValueTypes["bigint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_inc_input"]: {
	fastspringItemId?:ValueTypes["bigint"] | null,
	itemBundleId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_insert_input"]: {
	bundle?:ValueTypes["vectric_sales_oem_bundles_obj_rel_insert_input"] | null,
	bundleId?:string | null,
	fastspringItem?:ValueTypes["vectric_oem_fastspring_item_obj_rel_insert_input"] | null,
	fastspringItemId?:ValueTypes["bigint"] | null,
	itemBundleId?:ValueTypes["bigint"] | null
};
	/** order by max() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_max_order_by"]: {
	bundleId?:ValueTypes["order_by"] | null,
	fastspringItemId?:ValueTypes["order_by"] | null,
	itemBundleId?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_min_order_by"]: {
	bundleId?:ValueTypes["order_by"] | null,
	fastspringItemId?:ValueTypes["order_by"] | null,
	itemBundleId?:ValueTypes["order_by"] | null
};
	/** on conflict condition type for table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_on_conflict"]: {
	constraint:ValueTypes["vectric_oem_fastspring_item_bundle_constraint"],
	update_columns:ValueTypes["vectric_oem_fastspring_item_bundle_update_column"][],
	where?:ValueTypes["vectric_oem_fastspring_item_bundle_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.oem_fastspring_item_bundle". */
["vectric_oem_fastspring_item_bundle_order_by"]: {
	bundle?:ValueTypes["vectric_sales_oem_bundles_order_by"] | null,
	bundleId?:ValueTypes["order_by"] | null,
	fastspringItem?:ValueTypes["vectric_oem_fastspring_item_order_by"] | null,
	fastspringItemId?:ValueTypes["order_by"] | null,
	itemBundleId?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_oem_fastspring_item_bundle */
["vectric_oem_fastspring_item_bundle_pk_columns_input"]: {
	itemBundleId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_set_input"]: {
	bundleId?:string | null,
	fastspringItemId?:ValueTypes["bigint"] | null,
	itemBundleId?:ValueTypes["bigint"] | null
};
	/** order by stddev() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_stddev_order_by"]: {
	fastspringItemId?:ValueTypes["order_by"] | null,
	itemBundleId?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_stddev_pop_order_by"]: {
	fastspringItemId?:ValueTypes["order_by"] | null,
	itemBundleId?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_stddev_samp_order_by"]: {
	fastspringItemId?:ValueTypes["order_by"] | null,
	itemBundleId?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_sum_order_by"]: {
	fastspringItemId?:ValueTypes["order_by"] | null,
	itemBundleId?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_var_pop_order_by"]: {
	fastspringItemId?:ValueTypes["order_by"] | null,
	itemBundleId?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_var_samp_order_by"]: {
	fastspringItemId?:ValueTypes["order_by"] | null,
	itemBundleId?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_variance_order_by"]: {
	fastspringItemId?:ValueTypes["order_by"] | null,
	itemBundleId?:ValueTypes["order_by"] | null
};
	/** input type for incrementing numeric columns in table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_inc_input"]: {
	discountValue?:ValueTypes["numeric"] | null,
	itemId?:ValueTypes["bigint"] | null,
	oemProductId?:ValueTypes["bigint"] | null,
	orderId?:ValueTypes["bigint"] | null,
	priceTotal?:ValueTypes["numeric"] | null,
	quantity?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_insert_input"]: {
	batchId?:string | null,
	discountValue?:ValueTypes["numeric"] | null,
	itemBundle?:ValueTypes["vectric_oem_fastspring_item_bundle_arr_rel_insert_input"] | null,
	itemId?:ValueTypes["bigint"] | null,
	oemProduct?:ValueTypes["vectric_oem_products_obj_rel_insert_input"] | null,
	oemProductId?:ValueTypes["bigint"] | null,
	order?:ValueTypes["vectric_oem_fastspring_order_obj_rel_insert_input"] | null,
	orderId?:ValueTypes["bigint"] | null,
	priceTotal?:ValueTypes["numeric"] | null,
	productName?:string | null,
	quantity?:ValueTypes["bigint"] | null
};
	/** order by max() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_max_order_by"]: {
	batchId?:ValueTypes["order_by"] | null,
	discountValue?:ValueTypes["order_by"] | null,
	itemId?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	orderId?:ValueTypes["order_by"] | null,
	priceTotal?:ValueTypes["order_by"] | null,
	productName?:ValueTypes["order_by"] | null,
	quantity?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_min_order_by"]: {
	batchId?:ValueTypes["order_by"] | null,
	discountValue?:ValueTypes["order_by"] | null,
	itemId?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	orderId?:ValueTypes["order_by"] | null,
	priceTotal?:ValueTypes["order_by"] | null,
	productName?:ValueTypes["order_by"] | null,
	quantity?:ValueTypes["order_by"] | null
};
	/** input type for inserting object relation for remote table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_oem_fastspring_item_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_fastspring_item_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_on_conflict"]: {
	constraint:ValueTypes["vectric_oem_fastspring_item_constraint"],
	update_columns:ValueTypes["vectric_oem_fastspring_item_update_column"][],
	where?:ValueTypes["vectric_oem_fastspring_item_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.oem_fastspring_item". */
["vectric_oem_fastspring_item_order_by"]: {
	batchId?:ValueTypes["order_by"] | null,
	discountValue?:ValueTypes["order_by"] | null,
	itemBundle_aggregate?:ValueTypes["vectric_oem_fastspring_item_bundle_aggregate_order_by"] | null,
	itemId?:ValueTypes["order_by"] | null,
	oemProduct?:ValueTypes["vectric_oem_products_order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	order?:ValueTypes["vectric_oem_fastspring_order_order_by"] | null,
	orderId?:ValueTypes["order_by"] | null,
	priceTotal?:ValueTypes["order_by"] | null,
	productName?:ValueTypes["order_by"] | null,
	quantity?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_oem_fastspring_item */
["vectric_oem_fastspring_item_pk_columns_input"]: {
	itemId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_set_input"]: {
	batchId?:string | null,
	discountValue?:ValueTypes["numeric"] | null,
	itemId?:ValueTypes["bigint"] | null,
	oemProductId?:ValueTypes["bigint"] | null,
	orderId?:ValueTypes["bigint"] | null,
	priceTotal?:ValueTypes["numeric"] | null,
	productName?:string | null,
	quantity?:ValueTypes["bigint"] | null
};
	/** order by stddev() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_stddev_order_by"]: {
	discountValue?:ValueTypes["order_by"] | null,
	itemId?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	orderId?:ValueTypes["order_by"] | null,
	priceTotal?:ValueTypes["order_by"] | null,
	quantity?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_stddev_pop_order_by"]: {
	discountValue?:ValueTypes["order_by"] | null,
	itemId?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	orderId?:ValueTypes["order_by"] | null,
	priceTotal?:ValueTypes["order_by"] | null,
	quantity?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_stddev_samp_order_by"]: {
	discountValue?:ValueTypes["order_by"] | null,
	itemId?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	orderId?:ValueTypes["order_by"] | null,
	priceTotal?:ValueTypes["order_by"] | null,
	quantity?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_sum_order_by"]: {
	discountValue?:ValueTypes["order_by"] | null,
	itemId?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	orderId?:ValueTypes["order_by"] | null,
	priceTotal?:ValueTypes["order_by"] | null,
	quantity?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_var_pop_order_by"]: {
	discountValue?:ValueTypes["order_by"] | null,
	itemId?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	orderId?:ValueTypes["order_by"] | null,
	priceTotal?:ValueTypes["order_by"] | null,
	quantity?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_var_samp_order_by"]: {
	discountValue?:ValueTypes["order_by"] | null,
	itemId?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	orderId?:ValueTypes["order_by"] | null,
	priceTotal?:ValueTypes["order_by"] | null,
	quantity?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_variance_order_by"]: {
	discountValue?:ValueTypes["order_by"] | null,
	itemId?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	orderId?:ValueTypes["order_by"] | null,
	priceTotal?:ValueTypes["order_by"] | null,
	quantity?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.oem_fastspring_order". All fields are combined with a logical 'AND'. */
["vectric_oem_fastspring_order_bool_exp"]: {
	_and?:ValueTypes["vectric_oem_fastspring_order_bool_exp"][],
	_not?:ValueTypes["vectric_oem_fastspring_order_bool_exp"] | null,
	_or?:ValueTypes["vectric_oem_fastspring_order_bool_exp"][],
	actionTaken?:ValueTypes["bigint_comparison_exp"] | null,
	amendedBy?:ValueTypes["String_comparison_exp"] | null,
	city?:ValueTypes["String_comparison_exp"] | null,
	createdBy?:ValueTypes["String_comparison_exp"] | null,
	currency?:ValueTypes["String_comparison_exp"] | null,
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	dateAmended?:ValueTypes["timestamptz_comparison_exp"] | null,
	dateCreated?:ValueTypes["timestamptz_comparison_exp"] | null,
	dateProcessed?:ValueTypes["timestamptz_comparison_exp"] | null,
	fastSpringCustomerId?:ValueTypes["bigint_comparison_exp"] | null,
	items?:ValueTypes["vectric_oem_fastspring_item_bool_exp"] | null,
	language?:ValueTypes["String_comparison_exp"] | null,
	notes?:ValueTypes["String_comparison_exp"] | null,
	orderId?:ValueTypes["bigint_comparison_exp"] | null,
	orderReference?:ValueTypes["String_comparison_exp"] | null,
	partner?:ValueTypes["vectric_oem_partners_bool_exp"] | null,
	partnerId?:ValueTypes["bigint_comparison_exp"] | null,
	postalCode?:ValueTypes["String_comparison_exp"] | null,
	processedBy?:ValueTypes["String_comparison_exp"] | null,
	region?:ValueTypes["String_comparison_exp"] | null,
	route?:ValueTypes["String_comparison_exp"] | null,
	subTotal?:ValueTypes["numeric_comparison_exp"] | null,
	tax?:ValueTypes["numeric_comparison_exp"] | null,
	total?:ValueTypes["numeric_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_inc_input"]: {
	actionTaken?:ValueTypes["bigint"] | null,
	customerId?:ValueTypes["bigint"] | null,
	fastSpringCustomerId?:ValueTypes["bigint"] | null,
	orderId?:ValueTypes["bigint"] | null,
	partnerId?:ValueTypes["bigint"] | null,
	subTotal?:ValueTypes["numeric"] | null,
	tax?:ValueTypes["numeric"] | null,
	total?:ValueTypes["numeric"] | null
};
	/** input type for inserting data into table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_insert_input"]: {
	actionTaken?:ValueTypes["bigint"] | null,
	amendedBy?:string | null,
	city?:string | null,
	createdBy?:string | null,
	currency?:string | null,
	customerId?:ValueTypes["bigint"] | null,
	dateAmended?:ValueTypes["timestamptz"] | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	dateProcessed?:ValueTypes["timestamptz"] | null,
	fastSpringCustomerId?:ValueTypes["bigint"] | null,
	items?:ValueTypes["vectric_oem_fastspring_item_arr_rel_insert_input"] | null,
	language?:string | null,
	notes?:string | null,
	orderId?:ValueTypes["bigint"] | null,
	orderReference?:string | null,
	partner?:ValueTypes["vectric_oem_partners_obj_rel_insert_input"] | null,
	partnerId?:ValueTypes["bigint"] | null,
	postalCode?:string | null,
	processedBy?:string | null,
	region?:string | null,
	route?:string | null,
	subTotal?:ValueTypes["numeric"] | null,
	tax?:ValueTypes["numeric"] | null,
	total?:ValueTypes["numeric"] | null
};
	/** input type for inserting object relation for remote table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_oem_fastspring_order_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_fastspring_order_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_on_conflict"]: {
	constraint:ValueTypes["vectric_oem_fastspring_order_constraint"],
	update_columns:ValueTypes["vectric_oem_fastspring_order_update_column"][],
	where?:ValueTypes["vectric_oem_fastspring_order_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.oem_fastspring_order". */
["vectric_oem_fastspring_order_order_by"]: {
	actionTaken?:ValueTypes["order_by"] | null,
	amendedBy?:ValueTypes["order_by"] | null,
	city?:ValueTypes["order_by"] | null,
	createdBy?:ValueTypes["order_by"] | null,
	currency?:ValueTypes["order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	dateAmended?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	dateProcessed?:ValueTypes["order_by"] | null,
	fastSpringCustomerId?:ValueTypes["order_by"] | null,
	items_aggregate?:ValueTypes["vectric_oem_fastspring_item_aggregate_order_by"] | null,
	language?:ValueTypes["order_by"] | null,
	notes?:ValueTypes["order_by"] | null,
	orderId?:ValueTypes["order_by"] | null,
	orderReference?:ValueTypes["order_by"] | null,
	partner?:ValueTypes["vectric_oem_partners_order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	postalCode?:ValueTypes["order_by"] | null,
	processedBy?:ValueTypes["order_by"] | null,
	region?:ValueTypes["order_by"] | null,
	route?:ValueTypes["order_by"] | null,
	subTotal?:ValueTypes["order_by"] | null,
	tax?:ValueTypes["order_by"] | null,
	total?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_oem_fastspring_order */
["vectric_oem_fastspring_order_pk_columns_input"]: {
	orderId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_set_input"]: {
	actionTaken?:ValueTypes["bigint"] | null,
	amendedBy?:string | null,
	city?:string | null,
	createdBy?:string | null,
	currency?:string | null,
	customerId?:ValueTypes["bigint"] | null,
	dateAmended?:ValueTypes["timestamptz"] | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	dateProcessed?:ValueTypes["timestamptz"] | null,
	fastSpringCustomerId?:ValueTypes["bigint"] | null,
	language?:string | null,
	notes?:string | null,
	orderId?:ValueTypes["bigint"] | null,
	orderReference?:string | null,
	partnerId?:ValueTypes["bigint"] | null,
	postalCode?:string | null,
	processedBy?:string | null,
	region?:string | null,
	route?:string | null,
	subTotal?:ValueTypes["numeric"] | null,
	tax?:ValueTypes["numeric"] | null,
	total?:ValueTypes["numeric"] | null
};
	/** Boolean expression to filter rows from the table "vectric.oem_invite_status". All fields are combined with a logical 'AND'. */
["vectric_oem_invite_status_bool_exp"]: {
	_and?:ValueTypes["vectric_oem_invite_status_bool_exp"][],
	_not?:ValueTypes["vectric_oem_invite_status_bool_exp"] | null,
	_or?:ValueTypes["vectric_oem_invite_status_bool_exp"][],
	status?:ValueTypes["String_comparison_exp"] | null,
	statusId?:ValueTypes["bigint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.oem_invite_status" */
["vectric_oem_invite_status_inc_input"]: {
	statusId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.oem_invite_status" */
["vectric_oem_invite_status_insert_input"]: {
	status?:string | null,
	statusId?:ValueTypes["bigint"] | null
};
	/** input type for inserting object relation for remote table "vectric.oem_invite_status" */
["vectric_oem_invite_status_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_oem_invite_status_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_invite_status_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.oem_invite_status" */
["vectric_oem_invite_status_on_conflict"]: {
	constraint:ValueTypes["vectric_oem_invite_status_constraint"],
	update_columns:ValueTypes["vectric_oem_invite_status_update_column"][],
	where?:ValueTypes["vectric_oem_invite_status_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.oem_invite_status". */
["vectric_oem_invite_status_order_by"]: {
	status?:ValueTypes["order_by"] | null,
	statusId?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_oem_invite_status */
["vectric_oem_invite_status_pk_columns_input"]: {
	statusId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_invite_status" */
["vectric_oem_invite_status_set_input"]: {
	status?:string | null,
	statusId?:ValueTypes["bigint"] | null
};
	/** Boolean expression to filter rows from the table "vectric.oem_licence_allocation_type". All fields are combined with a logical 'AND'. */
["vectric_oem_licence_allocation_type_bool_exp"]: {
	_and?:ValueTypes["vectric_oem_licence_allocation_type_bool_exp"][],
	_not?:ValueTypes["vectric_oem_licence_allocation_type_bool_exp"] | null,
	_or?:ValueTypes["vectric_oem_licence_allocation_type_bool_exp"][],
	allocationTypeId?:ValueTypes["bigint_comparison_exp"] | null,
	typeName?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_inc_input"]: {
	allocationTypeId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_insert_input"]: {
	allocationTypeId?:ValueTypes["bigint"] | null,
	typeName?:string | null
};
	/** input type for inserting object relation for remote table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_oem_licence_allocation_type_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_licence_allocation_type_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_on_conflict"]: {
	constraint:ValueTypes["vectric_oem_licence_allocation_type_constraint"],
	update_columns:ValueTypes["vectric_oem_licence_allocation_type_update_column"][],
	where?:ValueTypes["vectric_oem_licence_allocation_type_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.oem_licence_allocation_type". */
["vectric_oem_licence_allocation_type_order_by"]: {
	allocationTypeId?:ValueTypes["order_by"] | null,
	typeName?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_oem_licence_allocation_type */
["vectric_oem_licence_allocation_type_pk_columns_input"]: {
	allocationTypeId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_set_input"]: {
	allocationTypeId?:ValueTypes["bigint"] | null,
	typeName?:string | null
};
	/** Boolean expression to filter rows from the table "vectric.oem_partners". All fields are combined with a logical 'AND'. */
["vectric_oem_partners_bool_exp"]: {
	_and?:ValueTypes["vectric_oem_partners_bool_exp"][],
	_not?:ValueTypes["vectric_oem_partners_bool_exp"] | null,
	_or?:ValueTypes["vectric_oem_partners_bool_exp"][],
	bundles?:ValueTypes["vectric_sales_oem_bundles_bool_exp"] | null,
	codePrefix?:ValueTypes["String_comparison_exp"] | null,
	countrycode?:ValueTypes["bigint_comparison_exp"] | null,
	dateOfLastBatch?:ValueTypes["timestamptz_comparison_exp"] | null,
	displayName?:ValueTypes["String_comparison_exp"] | null,
	inactive?:ValueTypes["Boolean_comparison_exp"] | null,
	nextIssue?:ValueTypes["bigint_comparison_exp"] | null,
	partnerId?:ValueTypes["bigint_comparison_exp"] | null,
	purchaseOptions?:ValueTypes["vectric_oem_purchase_options_bool_exp"] | null,
	staff?:ValueTypes["vectric_oem_staff_customer_bool_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.oem_partners" */
["vectric_oem_partners_inc_input"]: {
	countrycode?:ValueTypes["bigint"] | null,
	nextIssue?:ValueTypes["bigint"] | null,
	partnerId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.oem_partners" */
["vectric_oem_partners_insert_input"]: {
	bundles?:ValueTypes["vectric_sales_oem_bundles_arr_rel_insert_input"] | null,
	codePrefix?:string | null,
	countrycode?:ValueTypes["bigint"] | null,
	dateOfLastBatch?:ValueTypes["timestamptz"] | null,
	displayName?:string | null,
	inactive?:boolean | null,
	nextIssue?:ValueTypes["bigint"] | null,
	partnerId?:ValueTypes["bigint"] | null,
	purchaseOptions?:ValueTypes["vectric_oem_purchase_options_arr_rel_insert_input"] | null,
	staff?:ValueTypes["vectric_oem_staff_customer_arr_rel_insert_input"] | null
};
	/** input type for inserting object relation for remote table "vectric.oem_partners" */
["vectric_oem_partners_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_oem_partners_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_partners_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.oem_partners" */
["vectric_oem_partners_on_conflict"]: {
	constraint:ValueTypes["vectric_oem_partners_constraint"],
	update_columns:ValueTypes["vectric_oem_partners_update_column"][],
	where?:ValueTypes["vectric_oem_partners_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.oem_partners". */
["vectric_oem_partners_order_by"]: {
	bundles_aggregate?:ValueTypes["vectric_sales_oem_bundles_aggregate_order_by"] | null,
	codePrefix?:ValueTypes["order_by"] | null,
	countrycode?:ValueTypes["order_by"] | null,
	dateOfLastBatch?:ValueTypes["order_by"] | null,
	displayName?:ValueTypes["order_by"] | null,
	inactive?:ValueTypes["order_by"] | null,
	nextIssue?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	purchaseOptions_aggregate?:ValueTypes["vectric_oem_purchase_options_aggregate_order_by"] | null,
	staff_aggregate?:ValueTypes["vectric_oem_staff_customer_aggregate_order_by"] | null
};
	/** primary key columns input for table: vectric_oem_partners */
["vectric_oem_partners_pk_columns_input"]: {
	partnerId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_partners" */
["vectric_oem_partners_set_input"]: {
	codePrefix?:string | null,
	countrycode?:ValueTypes["bigint"] | null,
	dateOfLastBatch?:ValueTypes["timestamptz"] | null,
	displayName?:string | null,
	inactive?:boolean | null,
	nextIssue?:ValueTypes["bigint"] | null,
	partnerId?:ValueTypes["bigint"] | null
};
	/** Boolean expression to filter rows from the table "vectric.oem_products". All fields are combined with a logical 'AND'. */
["vectric_oem_products_bool_exp"]: {
	_and?:ValueTypes["vectric_oem_products_bool_exp"][],
	_not?:ValueTypes["vectric_oem_products_bool_exp"] | null,
	_or?:ValueTypes["vectric_oem_products_bool_exp"][],
	detailedProducts?:ValueTypes["vectric_oem_detailed_products_bool_exp"] | null,
	enabled?:ValueTypes["Boolean_comparison_exp"] | null,
	oemFastspringId?:ValueTypes["String_comparison_exp"] | null,
	oemProductId?:ValueTypes["bigint_comparison_exp"] | null,
	product?:ValueTypes["vectric_products_products_bool_exp"] | null,
	productId?:ValueTypes["bigint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.oem_products" */
["vectric_oem_products_inc_input"]: {
	oemProductId?:ValueTypes["bigint"] | null,
	productId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.oem_products" */
["vectric_oem_products_insert_input"]: {
	detailedProducts?:ValueTypes["vectric_oem_detailed_products_arr_rel_insert_input"] | null,
	enabled?:boolean | null,
	oemFastspringId?:string | null,
	oemProductId?:ValueTypes["bigint"] | null,
	product?:ValueTypes["vectric_products_products_obj_rel_insert_input"] | null,
	productId?:ValueTypes["bigint"] | null
};
	/** input type for inserting object relation for remote table "vectric.oem_products" */
["vectric_oem_products_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_oem_products_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_products_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.oem_products" */
["vectric_oem_products_on_conflict"]: {
	constraint:ValueTypes["vectric_oem_products_constraint"],
	update_columns:ValueTypes["vectric_oem_products_update_column"][],
	where?:ValueTypes["vectric_oem_products_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.oem_products". */
["vectric_oem_products_order_by"]: {
	detailedProducts_aggregate?:ValueTypes["vectric_oem_detailed_products_aggregate_order_by"] | null,
	enabled?:ValueTypes["order_by"] | null,
	oemFastspringId?:ValueTypes["order_by"] | null,
	oemProductId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["vectric_products_products_order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_oem_products */
["vectric_oem_products_pk_columns_input"]: {
	oemProductId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_products" */
["vectric_oem_products_set_input"]: {
	enabled?:boolean | null,
	oemFastspringId?:string | null,
	oemProductId?:ValueTypes["bigint"] | null,
	productId?:ValueTypes["bigint"] | null
};
	/** order by aggregate values of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_oem_purchase_options_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_oem_purchase_options_max_order_by"] | null,
	min?:ValueTypes["vectric_oem_purchase_options_min_order_by"] | null,
	stddev?:ValueTypes["vectric_oem_purchase_options_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_oem_purchase_options_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_oem_purchase_options_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_oem_purchase_options_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_oem_purchase_options_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_oem_purchase_options_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_oem_purchase_options_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_oem_purchase_options_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_purchase_options_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_avg_order_by"]: {
	maxQuantity?:ValueTypes["order_by"] | null,
	minQuantity?:ValueTypes["order_by"] | null,
	optionId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.oem_purchase_options". All fields are combined with a logical 'AND'. */
["vectric_oem_purchase_options_bool_exp"]: {
	_and?:ValueTypes["vectric_oem_purchase_options_bool_exp"][],
	_not?:ValueTypes["vectric_oem_purchase_options_bool_exp"] | null,
	_or?:ValueTypes["vectric_oem_purchase_options_bool_exp"][],
	emailLicenceDetails?:ValueTypes["Boolean_comparison_exp"] | null,
	maxQuantity?:ValueTypes["bigint_comparison_exp"] | null,
	minQuantity?:ValueTypes["bigint_comparison_exp"] | null,
	multipleLicences?:ValueTypes["Boolean_comparison_exp"] | null,
	optionId?:ValueTypes["bigint_comparison_exp"] | null,
	partner?:ValueTypes["vectric_oem_partners_bool_exp"] | null,
	partnerId?:ValueTypes["bigint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_inc_input"]: {
	maxQuantity?:ValueTypes["bigint"] | null,
	minQuantity?:ValueTypes["bigint"] | null,
	optionId?:ValueTypes["bigint"] | null,
	partnerId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_insert_input"]: {
	emailLicenceDetails?:boolean | null,
	maxQuantity?:ValueTypes["bigint"] | null,
	minQuantity?:ValueTypes["bigint"] | null,
	multipleLicences?:boolean | null,
	optionId?:ValueTypes["bigint"] | null,
	partner?:ValueTypes["vectric_oem_partners_obj_rel_insert_input"] | null,
	partnerId?:ValueTypes["bigint"] | null
};
	/** order by max() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_max_order_by"]: {
	maxQuantity?:ValueTypes["order_by"] | null,
	minQuantity?:ValueTypes["order_by"] | null,
	optionId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_min_order_by"]: {
	maxQuantity?:ValueTypes["order_by"] | null,
	minQuantity?:ValueTypes["order_by"] | null,
	optionId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null
};
	/** on conflict condition type for table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_on_conflict"]: {
	constraint:ValueTypes["vectric_oem_purchase_options_constraint"],
	update_columns:ValueTypes["vectric_oem_purchase_options_update_column"][],
	where?:ValueTypes["vectric_oem_purchase_options_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.oem_purchase_options". */
["vectric_oem_purchase_options_order_by"]: {
	emailLicenceDetails?:ValueTypes["order_by"] | null,
	maxQuantity?:ValueTypes["order_by"] | null,
	minQuantity?:ValueTypes["order_by"] | null,
	multipleLicences?:ValueTypes["order_by"] | null,
	optionId?:ValueTypes["order_by"] | null,
	partner?:ValueTypes["vectric_oem_partners_order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_oem_purchase_options */
["vectric_oem_purchase_options_pk_columns_input"]: {
	optionId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_set_input"]: {
	emailLicenceDetails?:boolean | null,
	maxQuantity?:ValueTypes["bigint"] | null,
	minQuantity?:ValueTypes["bigint"] | null,
	multipleLicences?:boolean | null,
	optionId?:ValueTypes["bigint"] | null,
	partnerId?:ValueTypes["bigint"] | null
};
	/** order by stddev() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_stddev_order_by"]: {
	maxQuantity?:ValueTypes["order_by"] | null,
	minQuantity?:ValueTypes["order_by"] | null,
	optionId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_stddev_pop_order_by"]: {
	maxQuantity?:ValueTypes["order_by"] | null,
	minQuantity?:ValueTypes["order_by"] | null,
	optionId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_stddev_samp_order_by"]: {
	maxQuantity?:ValueTypes["order_by"] | null,
	minQuantity?:ValueTypes["order_by"] | null,
	optionId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_sum_order_by"]: {
	maxQuantity?:ValueTypes["order_by"] | null,
	minQuantity?:ValueTypes["order_by"] | null,
	optionId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_var_pop_order_by"]: {
	maxQuantity?:ValueTypes["order_by"] | null,
	minQuantity?:ValueTypes["order_by"] | null,
	optionId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_var_samp_order_by"]: {
	maxQuantity?:ValueTypes["order_by"] | null,
	minQuantity?:ValueTypes["order_by"] | null,
	optionId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_variance_order_by"]: {
	maxQuantity?:ValueTypes["order_by"] | null,
	minQuantity?:ValueTypes["order_by"] | null,
	optionId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.oem_staff_admin_ownership". All fields are combined with a logical 'AND'. */
["vectric_oem_staff_admin_ownership_bool_exp"]: {
	_and?:ValueTypes["vectric_oem_staff_admin_ownership_bool_exp"][],
	_not?:ValueTypes["vectric_oem_staff_admin_ownership_bool_exp"] | null,
	_or?:ValueTypes["vectric_oem_staff_admin_ownership_bool_exp"][],
	admin?:ValueTypes["Boolean_comparison_exp"] | null,
	adminId?:ValueTypes["bigint_comparison_exp"] | null,
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	customerName?:ValueTypes["String_comparison_exp"] | null,
	dateAccepted?:ValueTypes["timestamptz_comparison_exp"] | null,
	displayStatus?:ValueTypes["String_comparison_exp"] | null,
	email?:ValueTypes["String_comparison_exp"] | null,
	partnerId?:ValueTypes["bigint_comparison_exp"] | null,
	status?:ValueTypes["bigint_comparison_exp"] | null
};
	/** Ordering options when selecting data from "vectric.oem_staff_admin_ownership". */
["vectric_oem_staff_admin_ownership_order_by"]: {
	admin?:ValueTypes["order_by"] | null,
	adminId?:ValueTypes["order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	customerName?:ValueTypes["order_by"] | null,
	dateAccepted?:ValueTypes["order_by"] | null,
	displayStatus?:ValueTypes["order_by"] | null,
	email?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** order by aggregate values of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_oem_staff_customer_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_oem_staff_customer_max_order_by"] | null,
	min?:ValueTypes["vectric_oem_staff_customer_min_order_by"] | null,
	stddev?:ValueTypes["vectric_oem_staff_customer_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_oem_staff_customer_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_oem_staff_customer_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_oem_staff_customer_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_oem_staff_customer_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_oem_staff_customer_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_oem_staff_customer_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_oem_staff_customer_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_oem_staff_customer_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_avg_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	staffId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.oem_staff_customer". All fields are combined with a logical 'AND'. */
["vectric_oem_staff_customer_bool_exp"]: {
	_and?:ValueTypes["vectric_oem_staff_customer_bool_exp"][],
	_not?:ValueTypes["vectric_oem_staff_customer_bool_exp"] | null,
	_or?:ValueTypes["vectric_oem_staff_customer_bool_exp"][],
	admin?:ValueTypes["Boolean_comparison_exp"] | null,
	customer?:ValueTypes["vectric_sales_customers_bool_exp"] | null,
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	dataRequested?:ValueTypes["timestamptz_comparison_exp"] | null,
	dateAccepted?:ValueTypes["timestamptz_comparison_exp"] | null,
	dateUpdated?:ValueTypes["timestamptz_comparison_exp"] | null,
	inviteStatus?:ValueTypes["vectric_oem_invite_status_bool_exp"] | null,
	partner?:ValueTypes["vectric_oem_partners_bool_exp"] | null,
	partnerId?:ValueTypes["bigint_comparison_exp"] | null,
	staffId?:ValueTypes["bigint_comparison_exp"] | null,
	status?:ValueTypes["bigint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_inc_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	partnerId?:ValueTypes["bigint"] | null,
	staffId?:ValueTypes["bigint"] | null,
	status?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_insert_input"]: {
	admin?:boolean | null,
	customer?:ValueTypes["vectric_sales_customers_obj_rel_insert_input"] | null,
	customerId?:ValueTypes["bigint"] | null,
	dataRequested?:ValueTypes["timestamptz"] | null,
	dateAccepted?:ValueTypes["timestamptz"] | null,
	dateUpdated?:ValueTypes["timestamptz"] | null,
	inviteStatus?:ValueTypes["vectric_oem_invite_status_obj_rel_insert_input"] | null,
	partner?:ValueTypes["vectric_oem_partners_obj_rel_insert_input"] | null,
	partnerId?:ValueTypes["bigint"] | null,
	staffId?:ValueTypes["bigint"] | null,
	status?:ValueTypes["bigint"] | null
};
	/** order by max() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_max_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	dataRequested?:ValueTypes["order_by"] | null,
	dateAccepted?:ValueTypes["order_by"] | null,
	dateUpdated?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	staffId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_min_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	dataRequested?:ValueTypes["order_by"] | null,
	dateAccepted?:ValueTypes["order_by"] | null,
	dateUpdated?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	staffId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** on conflict condition type for table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_on_conflict"]: {
	constraint:ValueTypes["vectric_oem_staff_customer_constraint"],
	update_columns:ValueTypes["vectric_oem_staff_customer_update_column"][],
	where?:ValueTypes["vectric_oem_staff_customer_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.oem_staff_customer". */
["vectric_oem_staff_customer_order_by"]: {
	admin?:ValueTypes["order_by"] | null,
	customer?:ValueTypes["vectric_sales_customers_order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	dataRequested?:ValueTypes["order_by"] | null,
	dateAccepted?:ValueTypes["order_by"] | null,
	dateUpdated?:ValueTypes["order_by"] | null,
	inviteStatus?:ValueTypes["vectric_oem_invite_status_order_by"] | null,
	partner?:ValueTypes["vectric_oem_partners_order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	staffId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_oem_staff_customer */
["vectric_oem_staff_customer_pk_columns_input"]: {
	staffId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_set_input"]: {
	admin?:boolean | null,
	customerId?:ValueTypes["bigint"] | null,
	dataRequested?:ValueTypes["timestamptz"] | null,
	dateAccepted?:ValueTypes["timestamptz"] | null,
	dateUpdated?:ValueTypes["timestamptz"] | null,
	partnerId?:ValueTypes["bigint"] | null,
	staffId?:ValueTypes["bigint"] | null,
	status?:ValueTypes["bigint"] | null
};
	/** order by stddev() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_stddev_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	staffId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_stddev_pop_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	staffId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_stddev_samp_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	staffId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_sum_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	staffId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_var_pop_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	staffId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_var_samp_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	staffId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_variance_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	staffId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** order by aggregate values of table "vectric.organization_audit" */
["vectric_organization_audit_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_organization_audit_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_organization_audit_max_order_by"] | null,
	min?:ValueTypes["vectric_organization_audit_min_order_by"] | null,
	stddev?:ValueTypes["vectric_organization_audit_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_organization_audit_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_organization_audit_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_organization_audit_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_organization_audit_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_organization_audit_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_organization_audit_variance_order_by"] | null
};
	/** append existing jsonb value of filtered columns with new jsonb value */
["vectric_organization_audit_append_input"]: {
	auditPayload?:ValueTypes["jsonb"] | null
};
	/** input type for inserting array relation for remote table "vectric.organization_audit" */
["vectric_organization_audit_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_organization_audit_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_organization_audit_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_avg_order_by"]: {
	auditId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.organization_audit". All fields are combined with a logical 'AND'. */
["vectric_organization_audit_bool_exp"]: {
	_and?:ValueTypes["vectric_organization_audit_bool_exp"][],
	_not?:ValueTypes["vectric_organization_audit_bool_exp"] | null,
	_or?:ValueTypes["vectric_organization_audit_bool_exp"][],
	auditDate?:ValueTypes["timestamp_comparison_exp"] | null,
	auditId?:ValueTypes["Int_comparison_exp"] | null,
	auditPayload?:ValueTypes["jsonb_comparison_exp"] | null,
	auditType?:ValueTypes["String_comparison_exp"] | null,
	author?:ValueTypes["String_comparison_exp"] | null,
	internalChange?:ValueTypes["Boolean_comparison_exp"] | null,
	ipAddress?:ValueTypes["String_comparison_exp"] | null,
	organizationId?:ValueTypes["Int_comparison_exp"] | null
};
	/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
["vectric_organization_audit_delete_at_path_input"]: {
	auditPayload?:string[]
};
	/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
["vectric_organization_audit_delete_elem_input"]: {
	auditPayload?:number | null
};
	/** delete key/value pair or string element. key/value pairs are matched based on their key value */
["vectric_organization_audit_delete_key_input"]: {
	auditPayload?:string | null
};
	/** input type for incrementing numeric columns in table "vectric.organization_audit" */
["vectric_organization_audit_inc_input"]: {
	auditId?:number | null,
	organizationId?:number | null
};
	/** input type for inserting data into table "vectric.organization_audit" */
["vectric_organization_audit_insert_input"]: {
	auditDate?:ValueTypes["timestamp"] | null,
	auditId?:number | null,
	auditPayload?:ValueTypes["jsonb"] | null,
	auditType?:string | null,
	author?:string | null,
	internalChange?:boolean | null,
	ipAddress?:string | null,
	organizationId?:number | null
};
	/** order by max() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_max_order_by"]: {
	auditDate?:ValueTypes["order_by"] | null,
	auditId?:ValueTypes["order_by"] | null,
	auditType?:ValueTypes["order_by"] | null,
	author?:ValueTypes["order_by"] | null,
	ipAddress?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_min_order_by"]: {
	auditDate?:ValueTypes["order_by"] | null,
	auditId?:ValueTypes["order_by"] | null,
	auditType?:ValueTypes["order_by"] | null,
	author?:ValueTypes["order_by"] | null,
	ipAddress?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** on conflict condition type for table "vectric.organization_audit" */
["vectric_organization_audit_on_conflict"]: {
	constraint:ValueTypes["vectric_organization_audit_constraint"],
	update_columns:ValueTypes["vectric_organization_audit_update_column"][],
	where?:ValueTypes["vectric_organization_audit_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.organization_audit". */
["vectric_organization_audit_order_by"]: {
	auditDate?:ValueTypes["order_by"] | null,
	auditId?:ValueTypes["order_by"] | null,
	auditPayload?:ValueTypes["order_by"] | null,
	auditType?:ValueTypes["order_by"] | null,
	author?:ValueTypes["order_by"] | null,
	internalChange?:ValueTypes["order_by"] | null,
	ipAddress?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_organization_audit */
["vectric_organization_audit_pk_columns_input"]: {
	auditId:number
};
	/** prepend existing jsonb value of filtered columns with new jsonb value */
["vectric_organization_audit_prepend_input"]: {
	auditPayload?:ValueTypes["jsonb"] | null
};
	/** input type for updating data in table "vectric.organization_audit" */
["vectric_organization_audit_set_input"]: {
	auditDate?:ValueTypes["timestamp"] | null,
	auditId?:number | null,
	auditPayload?:ValueTypes["jsonb"] | null,
	auditType?:string | null,
	author?:string | null,
	internalChange?:boolean | null,
	ipAddress?:string | null,
	organizationId?:number | null
};
	/** order by stddev() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_stddev_order_by"]: {
	auditId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_stddev_pop_order_by"]: {
	auditId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_stddev_samp_order_by"]: {
	auditId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_sum_order_by"]: {
	auditId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_var_pop_order_by"]: {
	auditId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_var_samp_order_by"]: {
	auditId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_variance_order_by"]: {
	auditId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.organization_licence_scope". All fields are combined with a logical 'AND'. */
["vectric_organization_licence_scope_bool_exp"]: {
	_and?:ValueTypes["vectric_organization_licence_scope_bool_exp"][],
	_not?:ValueTypes["vectric_organization_licence_scope_bool_exp"] | null,
	_or?:ValueTypes["vectric_organization_licence_scope_bool_exp"][],
	scope?:ValueTypes["String_comparison_exp"] | null
};
	/** Boolean expression to compare columns of type "vectric_organization_licence_scope_enum". All fields are combined with logical 'AND'. */
["vectric_organization_licence_scope_enum_comparison_exp"]: {
	_eq?:ValueTypes["vectric_organization_licence_scope_enum"] | null,
	_in?:ValueTypes["vectric_organization_licence_scope_enum"][],
	_is_null?:boolean | null,
	_neq?:ValueTypes["vectric_organization_licence_scope_enum"] | null,
	_nin?:ValueTypes["vectric_organization_licence_scope_enum"][]
};
	/** input type for inserting data into table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_insert_input"]: {
	scope?:string | null
};
	/** input type for inserting object relation for remote table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_organization_licence_scope_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_organization_licence_scope_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_on_conflict"]: {
	constraint:ValueTypes["vectric_organization_licence_scope_constraint"],
	update_columns:ValueTypes["vectric_organization_licence_scope_update_column"][],
	where?:ValueTypes["vectric_organization_licence_scope_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.organization_licence_scope". */
["vectric_organization_licence_scope_order_by"]: {
	scope?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_organization_licence_scope */
["vectric_organization_licence_scope_pk_columns_input"]: {
	scope:string
};
	/** input type for updating data in table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_set_input"]: {
	scope?:string | null
};
	/** Boolean expression to filter rows from the table "vectric.organization_memberships_admin_access". All fields are combined with a logical 'AND'. */
["vectric_organization_memberships_admin_access_bool_exp"]: {
	_and?:ValueTypes["vectric_organization_memberships_admin_access_bool_exp"][],
	_not?:ValueTypes["vectric_organization_memberships_admin_access_bool_exp"] | null,
	_or?:ValueTypes["vectric_organization_memberships_admin_access_bool_exp"][],
	addedBy?:ValueTypes["String_comparison_exp"] | null,
	amendedBy?:ValueTypes["String_comparison_exp"] | null,
	customerEmail?:ValueTypes["String_comparison_exp"] | null,
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	customerName?:ValueTypes["String_comparison_exp"] | null,
	customerRegisteredUsername?:ValueTypes["String_comparison_exp"] | null,
	dateAdded?:ValueTypes["timestamp_comparison_exp"] | null,
	dateAmended?:ValueTypes["timestamp_comparison_exp"] | null,
	invitations?:ValueTypes["vectric_membership_invitations_bool_exp"] | null,
	membershipId?:ValueTypes["Int_comparison_exp"] | null,
	membershipRole?:ValueTypes["String_comparison_exp"] | null,
	membershipStatus?:ValueTypes["String_comparison_exp"] | null,
	organization?:ValueTypes["vectric_organizations_bool_exp"] | null,
	organizationCountryId?:ValueTypes["bigint_comparison_exp"] | null,
	organizationCountryName?:ValueTypes["String_comparison_exp"] | null,
	organizationId?:ValueTypes["Int_comparison_exp"] | null,
	organizationName?:ValueTypes["String_comparison_exp"] | null,
	organizationType?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for inserting data into table "vectric.organization_memberships_admin_access" */
["vectric_organization_memberships_admin_access_insert_input"]: {
	addedBy?:string | null,
	amendedBy?:string | null,
	customerEmail?:string | null,
	customerId?:ValueTypes["bigint"] | null,
	customerName?:string | null,
	customerRegisteredUsername?:string | null,
	dateAdded?:ValueTypes["timestamp"] | null,
	dateAmended?:ValueTypes["timestamp"] | null,
	invitations?:ValueTypes["vectric_membership_invitations_arr_rel_insert_input"] | null,
	membershipId?:number | null,
	membershipRole?:string | null,
	membershipStatus?:string | null,
	organization?:ValueTypes["vectric_organizations_obj_rel_insert_input"] | null,
	organizationCountryId?:ValueTypes["bigint"] | null,
	organizationCountryName?:string | null,
	organizationId?:number | null,
	organizationName?:string | null,
	organizationType?:string | null
};
	/** input type for inserting object relation for remote table "vectric.organization_memberships_admin_access" */
["vectric_organization_memberships_admin_access_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_organization_memberships_admin_access_insert_input"]
};
	/** Ordering options when selecting data from "vectric.organization_memberships_admin_access". */
["vectric_organization_memberships_admin_access_order_by"]: {
	addedBy?:ValueTypes["order_by"] | null,
	amendedBy?:ValueTypes["order_by"] | null,
	customerEmail?:ValueTypes["order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	customerName?:ValueTypes["order_by"] | null,
	customerRegisteredUsername?:ValueTypes["order_by"] | null,
	dateAdded?:ValueTypes["order_by"] | null,
	dateAmended?:ValueTypes["order_by"] | null,
	invitations_aggregate?:ValueTypes["vectric_membership_invitations_aggregate_order_by"] | null,
	membershipId?:ValueTypes["order_by"] | null,
	membershipRole?:ValueTypes["order_by"] | null,
	membershipStatus?:ValueTypes["order_by"] | null,
	organization?:ValueTypes["vectric_organizations_order_by"] | null,
	organizationCountryId?:ValueTypes["order_by"] | null,
	organizationCountryName?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null,
	organizationName?:ValueTypes["order_by"] | null,
	organizationType?:ValueTypes["order_by"] | null
};
	/** order by aggregate values of table "vectric.organization_order_items" */
["vectric_organization_order_items_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_organization_order_items_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_organization_order_items_max_order_by"] | null,
	min?:ValueTypes["vectric_organization_order_items_min_order_by"] | null,
	stddev?:ValueTypes["vectric_organization_order_items_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_organization_order_items_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_organization_order_items_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_organization_order_items_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_organization_order_items_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_organization_order_items_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_organization_order_items_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.organization_order_items" */
["vectric_organization_order_items_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_organization_order_items_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_organization_order_items_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_avg_order_by"]: {
	orderItemId?:ValueTypes["order_by"] | null,
	saleableProductId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.organization_order_items". All fields are combined with a logical 'AND'. */
["vectric_organization_order_items_bool_exp"]: {
	_and?:ValueTypes["vectric_organization_order_items_bool_exp"][],
	_not?:ValueTypes["vectric_organization_order_items_bool_exp"] | null,
	_or?:ValueTypes["vectric_organization_order_items_bool_exp"][],
	order?:ValueTypes["vectric_organization_orders_bool_exp"] | null,
	orderId?:ValueTypes["String_comparison_exp"] | null,
	orderItemId?:ValueTypes["Int_comparison_exp"] | null,
	ownedItems?:ValueTypes["vectric_owned_items_bool_exp"] | null,
	saleableProduct?:ValueTypes["vectric_saleable_products_bool_exp"] | null,
	saleableProductId?:ValueTypes["Int_comparison_exp"] | null,
	subscription?:ValueTypes["Boolean_comparison_exp"] | null,
	subscriptionContract?:ValueTypes["vectric_subscription_contracts_bool_exp"] | null,
	subscriptionEvents?:ValueTypes["vectric_subscription_events_bool_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.organization_order_items" */
["vectric_organization_order_items_inc_input"]: {
	orderItemId?:number | null,
	saleableProductId?:number | null
};
	/** input type for inserting data into table "vectric.organization_order_items" */
["vectric_organization_order_items_insert_input"]: {
	order?:ValueTypes["vectric_organization_orders_obj_rel_insert_input"] | null,
	orderId?:string | null,
	orderItemId?:number | null,
	ownedItems?:ValueTypes["vectric_owned_items_arr_rel_insert_input"] | null,
	saleableProduct?:ValueTypes["vectric_saleable_products_obj_rel_insert_input"] | null,
	saleableProductId?:number | null,
	subscription?:boolean | null,
	subscriptionContract?:ValueTypes["vectric_subscription_contracts_obj_rel_insert_input"] | null,
	subscriptionEvents?:ValueTypes["vectric_subscription_events_arr_rel_insert_input"] | null
};
	/** order by max() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_max_order_by"]: {
	orderId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	saleableProductId?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_min_order_by"]: {
	orderId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	saleableProductId?:ValueTypes["order_by"] | null
};
	/** input type for inserting object relation for remote table "vectric.organization_order_items" */
["vectric_organization_order_items_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_organization_order_items_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_organization_order_items_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.organization_order_items" */
["vectric_organization_order_items_on_conflict"]: {
	constraint:ValueTypes["vectric_organization_order_items_constraint"],
	update_columns:ValueTypes["vectric_organization_order_items_update_column"][],
	where?:ValueTypes["vectric_organization_order_items_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.organization_order_items". */
["vectric_organization_order_items_order_by"]: {
	order?:ValueTypes["vectric_organization_orders_order_by"] | null,
	orderId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	ownedItems_aggregate?:ValueTypes["vectric_owned_items_aggregate_order_by"] | null,
	saleableProduct?:ValueTypes["vectric_saleable_products_order_by"] | null,
	saleableProductId?:ValueTypes["order_by"] | null,
	subscription?:ValueTypes["order_by"] | null,
	subscriptionContract?:ValueTypes["vectric_subscription_contracts_order_by"] | null,
	subscriptionEvents_aggregate?:ValueTypes["vectric_subscription_events_aggregate_order_by"] | null
};
	/** primary key columns input for table: vectric_organization_order_items */
["vectric_organization_order_items_pk_columns_input"]: {
	orderItemId:number
};
	/** input type for updating data in table "vectric.organization_order_items" */
["vectric_organization_order_items_set_input"]: {
	orderId?:string | null,
	orderItemId?:number | null,
	saleableProductId?:number | null,
	subscription?:boolean | null
};
	/** order by stddev() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_stddev_order_by"]: {
	orderItemId?:ValueTypes["order_by"] | null,
	saleableProductId?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_stddev_pop_order_by"]: {
	orderItemId?:ValueTypes["order_by"] | null,
	saleableProductId?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_stddev_samp_order_by"]: {
	orderItemId?:ValueTypes["order_by"] | null,
	saleableProductId?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_sum_order_by"]: {
	orderItemId?:ValueTypes["order_by"] | null,
	saleableProductId?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_var_pop_order_by"]: {
	orderItemId?:ValueTypes["order_by"] | null,
	saleableProductId?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_var_samp_order_by"]: {
	orderItemId?:ValueTypes["order_by"] | null,
	saleableProductId?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_variance_order_by"]: {
	orderItemId?:ValueTypes["order_by"] | null,
	saleableProductId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.organization_orders". All fields are combined with a logical 'AND'. */
["vectric_organization_orders_bool_exp"]: {
	_and?:ValueTypes["vectric_organization_orders_bool_exp"][],
	_not?:ValueTypes["vectric_organization_orders_bool_exp"] | null,
	_or?:ValueTypes["vectric_organization_orders_bool_exp"][],
	amendedBy?:ValueTypes["String_comparison_exp"] | null,
	createdBy?:ValueTypes["String_comparison_exp"] | null,
	dateAmended?:ValueTypes["timestamp_comparison_exp"] | null,
	dateCreated?:ValueTypes["timestamp_comparison_exp"] | null,
	externalReference?:ValueTypes["String_comparison_exp"] | null,
	items?:ValueTypes["vectric_organization_order_items_bool_exp"] | null,
	notes?:ValueTypes["String_comparison_exp"] | null,
	orderDate?:ValueTypes["timestamp_comparison_exp"] | null,
	orderId?:ValueTypes["String_comparison_exp"] | null,
	organization?:ValueTypes["vectric_organizations_bool_exp"] | null,
	organizationId?:ValueTypes["Int_comparison_exp"] | null,
	purchaser?:ValueTypes["vectric_sales_customers_bool_exp"] | null,
	purchaserId?:ValueTypes["Int_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.organization_orders" */
["vectric_organization_orders_inc_input"]: {
	organizationId?:number | null,
	purchaserId?:number | null
};
	/** input type for inserting data into table "vectric.organization_orders" */
["vectric_organization_orders_insert_input"]: {
	amendedBy?:string | null,
	createdBy?:string | null,
	dateAmended?:ValueTypes["timestamp"] | null,
	dateCreated?:ValueTypes["timestamp"] | null,
	externalReference?:string | null,
	items?:ValueTypes["vectric_organization_order_items_arr_rel_insert_input"] | null,
	notes?:string | null,
	orderDate?:ValueTypes["timestamp"] | null,
	orderId?:string | null,
	organization?:ValueTypes["vectric_organizations_obj_rel_insert_input"] | null,
	organizationId?:number | null,
	purchaser?:ValueTypes["vectric_sales_customers_obj_rel_insert_input"] | null,
	purchaserId?:number | null
};
	/** input type for inserting object relation for remote table "vectric.organization_orders" */
["vectric_organization_orders_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_organization_orders_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_organization_orders_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.organization_orders" */
["vectric_organization_orders_on_conflict"]: {
	constraint:ValueTypes["vectric_organization_orders_constraint"],
	update_columns:ValueTypes["vectric_organization_orders_update_column"][],
	where?:ValueTypes["vectric_organization_orders_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.organization_orders". */
["vectric_organization_orders_order_by"]: {
	amendedBy?:ValueTypes["order_by"] | null,
	createdBy?:ValueTypes["order_by"] | null,
	dateAmended?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	externalReference?:ValueTypes["order_by"] | null,
	items_aggregate?:ValueTypes["vectric_organization_order_items_aggregate_order_by"] | null,
	notes?:ValueTypes["order_by"] | null,
	orderDate?:ValueTypes["order_by"] | null,
	orderId?:ValueTypes["order_by"] | null,
	organization?:ValueTypes["vectric_organizations_order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null,
	purchaser?:ValueTypes["vectric_sales_customers_order_by"] | null,
	purchaserId?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_organization_orders */
["vectric_organization_orders_pk_columns_input"]: {
	orderId:string
};
	/** input type for updating data in table "vectric.organization_orders" */
["vectric_organization_orders_set_input"]: {
	amendedBy?:string | null,
	createdBy?:string | null,
	dateAmended?:ValueTypes["timestamp"] | null,
	dateCreated?:ValueTypes["timestamp"] | null,
	externalReference?:string | null,
	notes?:string | null,
	orderDate?:ValueTypes["timestamp"] | null,
	orderId?:string | null,
	organizationId?:number | null,
	purchaserId?:number | null
};
	/** Boolean expression to filter rows from the table "vectric.organization_types". All fields are combined with a logical 'AND'. */
["vectric_organization_types_bool_exp"]: {
	_and?:ValueTypes["vectric_organization_types_bool_exp"][],
	_not?:ValueTypes["vectric_organization_types_bool_exp"] | null,
	_or?:ValueTypes["vectric_organization_types_bool_exp"][],
	type?:ValueTypes["String_comparison_exp"] | null
};
	/** Boolean expression to compare columns of type "vectric_organization_types_enum". All fields are combined with logical 'AND'. */
["vectric_organization_types_enum_comparison_exp"]: {
	_eq?:ValueTypes["vectric_organization_types_enum"] | null,
	_in?:ValueTypes["vectric_organization_types_enum"][],
	_is_null?:boolean | null,
	_neq?:ValueTypes["vectric_organization_types_enum"] | null,
	_nin?:ValueTypes["vectric_organization_types_enum"][]
};
	/** input type for inserting data into table "vectric.organization_types" */
["vectric_organization_types_insert_input"]: {
	type?:string | null
};
	/** input type for inserting object relation for remote table "vectric.organization_types" */
["vectric_organization_types_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_organization_types_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_organization_types_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.organization_types" */
["vectric_organization_types_on_conflict"]: {
	constraint:ValueTypes["vectric_organization_types_constraint"],
	update_columns:ValueTypes["vectric_organization_types_update_column"][],
	where?:ValueTypes["vectric_organization_types_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.organization_types". */
["vectric_organization_types_order_by"]: {
	type?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_organization_types */
["vectric_organization_types_pk_columns_input"]: {
	type:string
};
	/** input type for updating data in table "vectric.organization_types" */
["vectric_organization_types_set_input"]: {
	type?:string | null
};
	/** Boolean expression to filter rows from the table "vectric.organizations". All fields are combined with a logical 'AND'. */
["vectric_organizations_bool_exp"]: {
	_and?:ValueTypes["vectric_organizations_bool_exp"][],
	_not?:ValueTypes["vectric_organizations_bool_exp"] | null,
	_or?:ValueTypes["vectric_organizations_bool_exp"][],
	active?:ValueTypes["Boolean_comparison_exp"] | null,
	activeMembers?:ValueTypes["vectric_active_memberships_bool_exp"] | null,
	amendedBy?:ValueTypes["String_comparison_exp"] | null,
	auditLogs?:ValueTypes["vectric_organization_audit_bool_exp"] | null,
	country?:ValueTypes["vectric_countries_bool_exp"] | null,
	countryId?:ValueTypes["bigint_comparison_exp"] | null,
	createdBy?:ValueTypes["String_comparison_exp"] | null,
	dateAmended?:ValueTypes["timestamp_comparison_exp"] | null,
	dateCreated?:ValueTypes["timestamp_comparison_exp"] | null,
	internalNotes?:ValueTypes["String_comparison_exp"] | null,
	invitations?:ValueTypes["vectric_membership_invitations_bool_exp"] | null,
	memberships?:ValueTypes["vectric_memberships_bool_exp"] | null,
	organizationId?:ValueTypes["Int_comparison_exp"] | null,
	organizationName?:ValueTypes["String_comparison_exp"] | null,
	organizationType?:ValueTypes["vectric_organization_types_bool_exp"] | null,
	organizationUUID?:ValueTypes["uuid_comparison_exp"] | null,
	type?:ValueTypes["vectric_organization_types_enum_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.organizations" */
["vectric_organizations_inc_input"]: {
	countryId?:ValueTypes["bigint"] | null,
	organizationId?:number | null
};
	/** input type for inserting data into table "vectric.organizations" */
["vectric_organizations_insert_input"]: {
	active?:boolean | null,
	activeMembers?:ValueTypes["vectric_active_memberships_arr_rel_insert_input"] | null,
	amendedBy?:string | null,
	auditLogs?:ValueTypes["vectric_organization_audit_arr_rel_insert_input"] | null,
	country?:ValueTypes["vectric_countries_obj_rel_insert_input"] | null,
	countryId?:ValueTypes["bigint"] | null,
	createdBy?:string | null,
	dateAmended?:ValueTypes["timestamp"] | null,
	dateCreated?:ValueTypes["timestamp"] | null,
	internalNotes?:string | null,
	invitations?:ValueTypes["vectric_membership_invitations_arr_rel_insert_input"] | null,
	memberships?:ValueTypes["vectric_memberships_arr_rel_insert_input"] | null,
	organizationId?:number | null,
	organizationName?:string | null,
	organizationType?:ValueTypes["vectric_organization_types_obj_rel_insert_input"] | null,
	organizationUUID?:ValueTypes["uuid"] | null,
	type?:ValueTypes["vectric_organization_types_enum"] | null
};
	/** input type for inserting object relation for remote table "vectric.organizations" */
["vectric_organizations_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_organizations_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_organizations_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.organizations" */
["vectric_organizations_on_conflict"]: {
	constraint:ValueTypes["vectric_organizations_constraint"],
	update_columns:ValueTypes["vectric_organizations_update_column"][],
	where?:ValueTypes["vectric_organizations_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.organizations". */
["vectric_organizations_order_by"]: {
	active?:ValueTypes["order_by"] | null,
	activeMembers_aggregate?:ValueTypes["vectric_active_memberships_aggregate_order_by"] | null,
	amendedBy?:ValueTypes["order_by"] | null,
	auditLogs_aggregate?:ValueTypes["vectric_organization_audit_aggregate_order_by"] | null,
	country?:ValueTypes["vectric_countries_order_by"] | null,
	countryId?:ValueTypes["order_by"] | null,
	createdBy?:ValueTypes["order_by"] | null,
	dateAmended?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	internalNotes?:ValueTypes["order_by"] | null,
	invitations_aggregate?:ValueTypes["vectric_membership_invitations_aggregate_order_by"] | null,
	memberships_aggregate?:ValueTypes["vectric_memberships_aggregate_order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null,
	organizationName?:ValueTypes["order_by"] | null,
	organizationType?:ValueTypes["vectric_organization_types_order_by"] | null,
	organizationUUID?:ValueTypes["order_by"] | null,
	type?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_organizations */
["vectric_organizations_pk_columns_input"]: {
	organizationId:number
};
	/** input type for updating data in table "vectric.organizations" */
["vectric_organizations_set_input"]: {
	active?:boolean | null,
	amendedBy?:string | null,
	countryId?:ValueTypes["bigint"] | null,
	createdBy?:string | null,
	dateAmended?:ValueTypes["timestamp"] | null,
	dateCreated?:ValueTypes["timestamp"] | null,
	internalNotes?:string | null,
	organizationId?:number | null,
	organizationName?:string | null,
	organizationUUID?:ValueTypes["uuid"] | null,
	type?:ValueTypes["vectric_organization_types_enum"] | null
};
	/** Boolean expression to filter rows from the table "vectric.owned_item_assignments". All fields are combined with a logical 'AND'. */
["vectric_owned_item_assignments_bool_exp"]: {
	_and?:ValueTypes["vectric_owned_item_assignments_bool_exp"][],
	_not?:ValueTypes["vectric_owned_item_assignments_bool_exp"] | null,
	_or?:ValueTypes["vectric_owned_item_assignments_bool_exp"][],
	assignedBy?:ValueTypes["String_comparison_exp"] | null,
	assignedTo?:ValueTypes["bigint_comparison_exp"] | null,
	assignedToMember?:ValueTypes["vectric_memberships_bool_exp"] | null,
	assignedToMemberAdminAccess?:ValueTypes["vectric_organization_memberships_admin_access_bool_exp"] | null,
	assignment_id?:ValueTypes["Int_comparison_exp"] | null,
	dateAssigned?:ValueTypes["timestamp_comparison_exp"] | null,
	ownedItemId?:ValueTypes["Int_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_inc_input"]: {
	assignedTo?:ValueTypes["bigint"] | null,
	assignment_id?:number | null,
	ownedItemId?:number | null
};
	/** input type for inserting data into table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_insert_input"]: {
	assignedBy?:string | null,
	assignedTo?:ValueTypes["bigint"] | null,
	assignedToMember?:ValueTypes["vectric_memberships_obj_rel_insert_input"] | null,
	assignedToMemberAdminAccess?:ValueTypes["vectric_organization_memberships_admin_access_obj_rel_insert_input"] | null,
	assignment_id?:number | null,
	dateAssigned?:ValueTypes["timestamp"] | null,
	ownedItemId?:number | null
};
	/** input type for inserting object relation for remote table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_owned_item_assignments_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_owned_item_assignments_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_on_conflict"]: {
	constraint:ValueTypes["vectric_owned_item_assignments_constraint"],
	update_columns:ValueTypes["vectric_owned_item_assignments_update_column"][],
	where?:ValueTypes["vectric_owned_item_assignments_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.owned_item_assignments". */
["vectric_owned_item_assignments_order_by"]: {
	assignedBy?:ValueTypes["order_by"] | null,
	assignedTo?:ValueTypes["order_by"] | null,
	assignedToMember?:ValueTypes["vectric_memberships_order_by"] | null,
	assignedToMemberAdminAccess?:ValueTypes["vectric_organization_memberships_admin_access_order_by"] | null,
	assignment_id?:ValueTypes["order_by"] | null,
	dateAssigned?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_owned_item_assignments */
["vectric_owned_item_assignments_pk_columns_input"]: {
	assignment_id:number
};
	/** input type for updating data in table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_set_input"]: {
	assignedBy?:string | null,
	assignedTo?:ValueTypes["bigint"] | null,
	assignment_id?:number | null,
	dateAssigned?:ValueTypes["timestamp"] | null,
	ownedItemId?:number | null
};
	/** order by aggregate values of table "vectric.owned_items" */
["vectric_owned_items_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_owned_items_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_owned_items_max_order_by"] | null,
	min?:ValueTypes["vectric_owned_items_min_order_by"] | null,
	stddev?:ValueTypes["vectric_owned_items_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_owned_items_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_owned_items_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_owned_items_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_owned_items_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_owned_items_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_owned_items_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.owned_items" */
["vectric_owned_items_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_owned_items_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_owned_items_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.owned_items" */
["vectric_owned_items_avg_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	ownedProductId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.owned_items". All fields are combined with a logical 'AND'. */
["vectric_owned_items_bool_exp"]: {
	_and?:ValueTypes["vectric_owned_items_bool_exp"][],
	_not?:ValueTypes["vectric_owned_items_bool_exp"] | null,
	_or?:ValueTypes["vectric_owned_items_bool_exp"][],
	amendedBy?:ValueTypes["String_comparison_exp"] | null,
	assignment?:ValueTypes["vectric_owned_item_assignments_bool_exp"] | null,
	createdBy?:ValueTypes["String_comparison_exp"] | null,
	customer?:ValueTypes["vectric_sales_customers_bool_exp"] | null,
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	dateAmended?:ValueTypes["timestamp_comparison_exp"] | null,
	dateCreated?:ValueTypes["timestamp_comparison_exp"] | null,
	entitlements?:ValueTypes["vectric_entitlements_bool_exp"] | null,
	licenceScope?:ValueTypes["vectric_organization_licence_scope_bool_exp"] | null,
	notes?:ValueTypes["String_comparison_exp"] | null,
	orderItem?:ValueTypes["vectric_organization_order_items_bool_exp"] | null,
	orderItemId?:ValueTypes["Int_comparison_exp"] | null,
	organization?:ValueTypes["vectric_organizations_bool_exp"] | null,
	organizationId?:ValueTypes["Int_comparison_exp"] | null,
	ownedItemId?:ValueTypes["Int_comparison_exp"] | null,
	ownedProduct?:ValueTypes["vectric_owned_products_bool_exp"] | null,
	ownedProductId?:ValueTypes["Int_comparison_exp"] | null,
	record_date?:ValueTypes["timestamp_comparison_exp"] | null,
	scope?:ValueTypes["vectric_organization_licence_scope_enum_comparison_exp"] | null,
	status?:ValueTypes["Int_comparison_exp"] | null,
	subscription?:ValueTypes["Boolean_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.owned_items" */
["vectric_owned_items_inc_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	orderItemId?:number | null,
	organizationId?:number | null,
	ownedItemId?:number | null,
	ownedProductId?:number | null,
	status?:number | null
};
	/** input type for inserting data into table "vectric.owned_items" */
["vectric_owned_items_insert_input"]: {
	amendedBy?:string | null,
	assignment?:ValueTypes["vectric_owned_item_assignments_obj_rel_insert_input"] | null,
	createdBy?:string | null,
	customer?:ValueTypes["vectric_sales_customers_obj_rel_insert_input"] | null,
	customerId?:ValueTypes["bigint"] | null,
	dateAmended?:ValueTypes["timestamp"] | null,
	dateCreated?:ValueTypes["timestamp"] | null,
	entitlements?:ValueTypes["vectric_entitlements_arr_rel_insert_input"] | null,
	licenceScope?:ValueTypes["vectric_organization_licence_scope_obj_rel_insert_input"] | null,
	notes?:string | null,
	orderItem?:ValueTypes["vectric_organization_order_items_obj_rel_insert_input"] | null,
	orderItemId?:number | null,
	organization?:ValueTypes["vectric_organizations_obj_rel_insert_input"] | null,
	organizationId?:number | null,
	ownedItemId?:number | null,
	ownedProduct?:ValueTypes["vectric_owned_products_obj_rel_insert_input"] | null,
	ownedProductId?:number | null,
	record_date?:ValueTypes["timestamp"] | null,
	scope?:ValueTypes["vectric_organization_licence_scope_enum"] | null,
	status?:number | null,
	subscription?:boolean | null
};
	/** order by max() on columns of table "vectric.owned_items" */
["vectric_owned_items_max_order_by"]: {
	amendedBy?:ValueTypes["order_by"] | null,
	createdBy?:ValueTypes["order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	dateAmended?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	notes?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	ownedProductId?:ValueTypes["order_by"] | null,
	record_date?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.owned_items" */
["vectric_owned_items_min_order_by"]: {
	amendedBy?:ValueTypes["order_by"] | null,
	createdBy?:ValueTypes["order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	dateAmended?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	notes?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	ownedProductId?:ValueTypes["order_by"] | null,
	record_date?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** input type for inserting object relation for remote table "vectric.owned_items" */
["vectric_owned_items_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_owned_items_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_owned_items_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.owned_items" */
["vectric_owned_items_on_conflict"]: {
	constraint:ValueTypes["vectric_owned_items_constraint"],
	update_columns:ValueTypes["vectric_owned_items_update_column"][],
	where?:ValueTypes["vectric_owned_items_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.owned_items". */
["vectric_owned_items_order_by"]: {
	amendedBy?:ValueTypes["order_by"] | null,
	assignment?:ValueTypes["vectric_owned_item_assignments_order_by"] | null,
	createdBy?:ValueTypes["order_by"] | null,
	customer?:ValueTypes["vectric_sales_customers_order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	dateAmended?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	entitlements_aggregate?:ValueTypes["vectric_entitlements_aggregate_order_by"] | null,
	licenceScope?:ValueTypes["vectric_organization_licence_scope_order_by"] | null,
	notes?:ValueTypes["order_by"] | null,
	orderItem?:ValueTypes["vectric_organization_order_items_order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	organization?:ValueTypes["vectric_organizations_order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	ownedProduct?:ValueTypes["vectric_owned_products_order_by"] | null,
	ownedProductId?:ValueTypes["order_by"] | null,
	record_date?:ValueTypes["order_by"] | null,
	scope?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null,
	subscription?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_owned_items */
["vectric_owned_items_pk_columns_input"]: {
	ownedItemId:number
};
	/** input type for updating data in table "vectric.owned_items" */
["vectric_owned_items_set_input"]: {
	amendedBy?:string | null,
	createdBy?:string | null,
	customerId?:ValueTypes["bigint"] | null,
	dateAmended?:ValueTypes["timestamp"] | null,
	dateCreated?:ValueTypes["timestamp"] | null,
	notes?:string | null,
	orderItemId?:number | null,
	organizationId?:number | null,
	ownedItemId?:number | null,
	ownedProductId?:number | null,
	record_date?:ValueTypes["timestamp"] | null,
	scope?:ValueTypes["vectric_organization_licence_scope_enum"] | null,
	status?:number | null,
	subscription?:boolean | null
};
	/** order by stddev() on columns of table "vectric.owned_items" */
["vectric_owned_items_stddev_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	ownedProductId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.owned_items" */
["vectric_owned_items_stddev_pop_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	ownedProductId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.owned_items" */
["vectric_owned_items_stddev_samp_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	ownedProductId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.owned_items" */
["vectric_owned_items_sum_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	ownedProductId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.owned_items" */
["vectric_owned_items_var_pop_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	ownedProductId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.owned_items" */
["vectric_owned_items_var_samp_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	ownedProductId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.owned_items" */
["vectric_owned_items_variance_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	organizationId?:ValueTypes["order_by"] | null,
	ownedItemId?:ValueTypes["order_by"] | null,
	ownedProductId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.owned_products". All fields are combined with a logical 'AND'. */
["vectric_owned_products_bool_exp"]: {
	_and?:ValueTypes["vectric_owned_products_bool_exp"][],
	_not?:ValueTypes["vectric_owned_products_bool_exp"] | null,
	_or?:ValueTypes["vectric_owned_products_bool_exp"][],
	enabled?:ValueTypes["Boolean_comparison_exp"] | null,
	enhancement?:ValueTypes["Boolean_comparison_exp"] | null,
	productId?:ValueTypes["Int_comparison_exp"] | null,
	productName?:ValueTypes["String_comparison_exp"] | null,
	productType?:ValueTypes["vectric_products_producttype_bool_exp"] | null,
	productTypeId?:ValueTypes["Int_comparison_exp"] | null,
	subscription?:ValueTypes["Boolean_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.owned_products" */
["vectric_owned_products_inc_input"]: {
	productId?:number | null,
	productTypeId?:number | null
};
	/** input type for inserting data into table "vectric.owned_products" */
["vectric_owned_products_insert_input"]: {
	enabled?:boolean | null,
	enhancement?:boolean | null,
	productId?:number | null,
	productName?:string | null,
	productType?:ValueTypes["vectric_products_producttype_obj_rel_insert_input"] | null,
	productTypeId?:number | null,
	subscription?:boolean | null
};
	/** input type for inserting object relation for remote table "vectric.owned_products" */
["vectric_owned_products_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_owned_products_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_owned_products_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.owned_products" */
["vectric_owned_products_on_conflict"]: {
	constraint:ValueTypes["vectric_owned_products_constraint"],
	update_columns:ValueTypes["vectric_owned_products_update_column"][],
	where?:ValueTypes["vectric_owned_products_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.owned_products". */
["vectric_owned_products_order_by"]: {
	enabled?:ValueTypes["order_by"] | null,
	enhancement?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	productName?:ValueTypes["order_by"] | null,
	productType?:ValueTypes["vectric_products_producttype_order_by"] | null,
	productTypeId?:ValueTypes["order_by"] | null,
	subscription?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_owned_products */
["vectric_owned_products_pk_columns_input"]: {
	productId:number
};
	/** input type for updating data in table "vectric.owned_products" */
["vectric_owned_products_set_input"]: {
	enabled?:boolean | null,
	enhancement?:boolean | null,
	productId?:number | null,
	productName?:string | null,
	productTypeId?:number | null,
	subscription?:boolean | null
};
	/** Boolean expression to filter rows from the table "vectric.products_clipartcollection_links". All fields are combined with a logical 'AND'. */
["vectric_products_clipartcollection_links_bool_exp"]: {
	_and?:ValueTypes["vectric_products_clipartcollection_links_bool_exp"][],
	_not?:ValueTypes["vectric_products_clipartcollection_links_bool_exp"] | null,
	_or?:ValueTypes["vectric_products_clipartcollection_links_bool_exp"][],
	clipartChildId?:ValueTypes["bigint_comparison_exp"] | null,
	clipartCollectionLinkId?:ValueTypes["bigint_comparison_exp"] | null,
	clipartParentId?:ValueTypes["bigint_comparison_exp"] | null,
	collection?:ValueTypes["vectric_products_products_bool_exp"] | null,
	project?:ValueTypes["vectric_products_products_bool_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_inc_input"]: {
	clipartChildId?:ValueTypes["bigint"] | null,
	clipartCollectionLinkId?:ValueTypes["bigint"] | null,
	clipartParentId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_insert_input"]: {
	clipartChildId?:ValueTypes["bigint"] | null,
	clipartCollectionLinkId?:ValueTypes["bigint"] | null,
	clipartParentId?:ValueTypes["bigint"] | null,
	collection?:ValueTypes["vectric_products_products_obj_rel_insert_input"] | null,
	project?:ValueTypes["vectric_products_products_obj_rel_insert_input"] | null
};
	/** on conflict condition type for table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_on_conflict"]: {
	constraint:ValueTypes["vectric_products_clipartcollection_links_constraint"],
	update_columns:ValueTypes["vectric_products_clipartcollection_links_update_column"][],
	where?:ValueTypes["vectric_products_clipartcollection_links_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.products_clipartcollection_links". */
["vectric_products_clipartcollection_links_order_by"]: {
	clipartChildId?:ValueTypes["order_by"] | null,
	clipartCollectionLinkId?:ValueTypes["order_by"] | null,
	clipartParentId?:ValueTypes["order_by"] | null,
	collection?:ValueTypes["vectric_products_products_order_by"] | null,
	project?:ValueTypes["vectric_products_products_order_by"] | null
};
	/** primary key columns input for table: vectric_products_clipartcollection_links */
["vectric_products_clipartcollection_links_pk_columns_input"]: {
	clipartCollectionLinkId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_set_input"]: {
	clipartChildId?:ValueTypes["bigint"] | null,
	clipartCollectionLinkId?:ValueTypes["bigint"] | null,
	clipartParentId?:ValueTypes["bigint"] | null
};
	/** order by aggregate values of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_products_enhancement_eligibility_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_products_enhancement_eligibility_max_order_by"] | null,
	min?:ValueTypes["vectric_products_enhancement_eligibility_min_order_by"] | null,
	stddev?:ValueTypes["vectric_products_enhancement_eligibility_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_products_enhancement_eligibility_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_products_enhancement_eligibility_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_products_enhancement_eligibility_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_products_enhancement_eligibility_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_products_enhancement_eligibility_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_products_enhancement_eligibility_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_products_enhancement_eligibility_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_enhancement_eligibility_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_avg_order_by"]: {
	eligibilityId?:ValueTypes["order_by"] | null,
	fromproduct?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	toproduct?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.products_enhancement_eligibility". All fields are combined with a logical 'AND'. */
["vectric_products_enhancement_eligibility_bool_exp"]: {
	_and?:ValueTypes["vectric_products_enhancement_eligibility_bool_exp"][],
	_not?:ValueTypes["vectric_products_enhancement_eligibility_bool_exp"] | null,
	_or?:ValueTypes["vectric_products_enhancement_eligibility_bool_exp"][],
	eligibilityId?:ValueTypes["bigint_comparison_exp"] | null,
	fastspringurl?:ValueTypes["String_comparison_exp"] | null,
	fromProduct?:ValueTypes["vectric_products_products_bool_exp"] | null,
	fromproduct?:ValueTypes["bigint_comparison_exp"] | null,
	moreinfolink?:ValueTypes["String_comparison_exp"] | null,
	price?:ValueTypes["numeric_comparison_exp"] | null,
	summary?:ValueTypes["String_comparison_exp"] | null,
	toProduct?:ValueTypes["vectric_products_products_bool_exp"] | null,
	toproduct?:ValueTypes["bigint_comparison_exp"] | null,
	visibletocustomers?:ValueTypes["Boolean_comparison_exp"] | null,
	visibletostaff?:ValueTypes["Boolean_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_inc_input"]: {
	eligibilityId?:ValueTypes["bigint"] | null,
	fromproduct?:ValueTypes["bigint"] | null,
	price?:ValueTypes["numeric"] | null,
	toproduct?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_insert_input"]: {
	eligibilityId?:ValueTypes["bigint"] | null,
	fastspringurl?:string | null,
	fromProduct?:ValueTypes["vectric_products_products_obj_rel_insert_input"] | null,
	fromproduct?:ValueTypes["bigint"] | null,
	moreinfolink?:string | null,
	price?:ValueTypes["numeric"] | null,
	summary?:string | null,
	toProduct?:ValueTypes["vectric_products_products_obj_rel_insert_input"] | null,
	toproduct?:ValueTypes["bigint"] | null,
	visibletocustomers?:boolean | null,
	visibletostaff?:boolean | null
};
	/** order by max() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_max_order_by"]: {
	eligibilityId?:ValueTypes["order_by"] | null,
	fastspringurl?:ValueTypes["order_by"] | null,
	fromproduct?:ValueTypes["order_by"] | null,
	moreinfolink?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	summary?:ValueTypes["order_by"] | null,
	toproduct?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_min_order_by"]: {
	eligibilityId?:ValueTypes["order_by"] | null,
	fastspringurl?:ValueTypes["order_by"] | null,
	fromproduct?:ValueTypes["order_by"] | null,
	moreinfolink?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	summary?:ValueTypes["order_by"] | null,
	toproduct?:ValueTypes["order_by"] | null
};
	/** on conflict condition type for table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_on_conflict"]: {
	constraint:ValueTypes["vectric_products_enhancement_eligibility_constraint"],
	update_columns:ValueTypes["vectric_products_enhancement_eligibility_update_column"][],
	where?:ValueTypes["vectric_products_enhancement_eligibility_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.products_enhancement_eligibility". */
["vectric_products_enhancement_eligibility_order_by"]: {
	eligibilityId?:ValueTypes["order_by"] | null,
	fastspringurl?:ValueTypes["order_by"] | null,
	fromProduct?:ValueTypes["vectric_products_products_order_by"] | null,
	fromproduct?:ValueTypes["order_by"] | null,
	moreinfolink?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	summary?:ValueTypes["order_by"] | null,
	toProduct?:ValueTypes["vectric_products_products_order_by"] | null,
	toproduct?:ValueTypes["order_by"] | null,
	visibletocustomers?:ValueTypes["order_by"] | null,
	visibletostaff?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_products_enhancement_eligibility */
["vectric_products_enhancement_eligibility_pk_columns_input"]: {
	eligibilityId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_set_input"]: {
	eligibilityId?:ValueTypes["bigint"] | null,
	fastspringurl?:string | null,
	fromproduct?:ValueTypes["bigint"] | null,
	moreinfolink?:string | null,
	price?:ValueTypes["numeric"] | null,
	summary?:string | null,
	toproduct?:ValueTypes["bigint"] | null,
	visibletocustomers?:boolean | null,
	visibletostaff?:boolean | null
};
	/** order by stddev() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_stddev_order_by"]: {
	eligibilityId?:ValueTypes["order_by"] | null,
	fromproduct?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	toproduct?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_stddev_pop_order_by"]: {
	eligibilityId?:ValueTypes["order_by"] | null,
	fromproduct?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	toproduct?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_stddev_samp_order_by"]: {
	eligibilityId?:ValueTypes["order_by"] | null,
	fromproduct?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	toproduct?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_sum_order_by"]: {
	eligibilityId?:ValueTypes["order_by"] | null,
	fromproduct?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	toproduct?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_var_pop_order_by"]: {
	eligibilityId?:ValueTypes["order_by"] | null,
	fromproduct?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	toproduct?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_var_samp_order_by"]: {
	eligibilityId?:ValueTypes["order_by"] | null,
	fromproduct?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	toproduct?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_variance_order_by"]: {
	eligibilityId?:ValueTypes["order_by"] | null,
	fromproduct?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	toproduct?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.products_freeclipart". All fields are combined with a logical 'AND'. */
["vectric_products_freeclipart_bool_exp"]: {
	_and?:ValueTypes["vectric_products_freeclipart_bool_exp"][],
	_not?:ValueTypes["vectric_products_freeclipart_bool_exp"] | null,
	_or?:ValueTypes["vectric_products_freeclipart_bool_exp"][],
	freeClipart?:ValueTypes["vectric_freeclipart_bool_exp"] | null,
	freeClipartId?:ValueTypes["bigint_comparison_exp"] | null,
	product?:ValueTypes["vectric_products_products_bool_exp"] | null,
	productFreeClipartId?:ValueTypes["bigint_comparison_exp"] | null,
	productId?:ValueTypes["bigint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.products_freeclipart" */
["vectric_products_freeclipart_inc_input"]: {
	freeClipartId?:ValueTypes["bigint"] | null,
	productFreeClipartId?:ValueTypes["bigint"] | null,
	productId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.products_freeclipart" */
["vectric_products_freeclipart_insert_input"]: {
	freeClipart?:ValueTypes["vectric_freeclipart_obj_rel_insert_input"] | null,
	freeClipartId?:ValueTypes["bigint"] | null,
	product?:ValueTypes["vectric_products_products_obj_rel_insert_input"] | null,
	productFreeClipartId?:ValueTypes["bigint"] | null,
	productId?:ValueTypes["bigint"] | null
};
	/** on conflict condition type for table "vectric.products_freeclipart" */
["vectric_products_freeclipart_on_conflict"]: {
	constraint:ValueTypes["vectric_products_freeclipart_constraint"],
	update_columns:ValueTypes["vectric_products_freeclipart_update_column"][],
	where?:ValueTypes["vectric_products_freeclipart_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.products_freeclipart". */
["vectric_products_freeclipart_order_by"]: {
	freeClipart?:ValueTypes["vectric_freeclipart_order_by"] | null,
	freeClipartId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["vectric_products_products_order_by"] | null,
	productFreeClipartId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_products_freeclipart */
["vectric_products_freeclipart_pk_columns_input"]: {
	productFreeClipartId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.products_freeclipart" */
["vectric_products_freeclipart_set_input"]: {
	freeClipartId?:ValueTypes["bigint"] | null,
	productFreeClipartId?:ValueTypes["bigint"] | null,
	productId?:ValueTypes["bigint"] | null
};
	/** Boolean expression to filter rows from the table "vectric.products_fulfilments". All fields are combined with a logical 'AND'. */
["vectric_products_fulfilments_bool_exp"]: {
	_and?:ValueTypes["vectric_products_fulfilments_bool_exp"][],
	_not?:ValueTypes["vectric_products_fulfilments_bool_exp"] | null,
	_or?:ValueTypes["vectric_products_fulfilments_bool_exp"][],
	description?:ValueTypes["String_comparison_exp"] | null,
	downloadSize?:ValueTypes["String_comparison_exp"] | null,
	fulfilmentId?:ValueTypes["bigint_comparison_exp"] | null,
	fulfilmentName?:ValueTypes["String_comparison_exp"] | null,
	fulfilmenttypeid?:ValueTypes["bigint_comparison_exp"] | null,
	location?:ValueTypes["String_comparison_exp"] | null,
	objectName?:ValueTypes["String_comparison_exp"] | null,
	type?:ValueTypes["vectric_products_fulfilmenttypes_bool_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.products_fulfilments" */
["vectric_products_fulfilments_inc_input"]: {
	fulfilmentId?:ValueTypes["bigint"] | null,
	fulfilmenttypeid?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.products_fulfilments" */
["vectric_products_fulfilments_insert_input"]: {
	description?:string | null,
	downloadSize?:string | null,
	fulfilmentId?:ValueTypes["bigint"] | null,
	fulfilmentName?:string | null,
	fulfilmenttypeid?:ValueTypes["bigint"] | null,
	location?:string | null,
	objectName?:string | null,
	type?:ValueTypes["vectric_products_fulfilmenttypes_obj_rel_insert_input"] | null
};
	/** input type for inserting object relation for remote table "vectric.products_fulfilments" */
["vectric_products_fulfilments_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_products_fulfilments_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_fulfilments_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.products_fulfilments" */
["vectric_products_fulfilments_on_conflict"]: {
	constraint:ValueTypes["vectric_products_fulfilments_constraint"],
	update_columns:ValueTypes["vectric_products_fulfilments_update_column"][],
	where?:ValueTypes["vectric_products_fulfilments_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.products_fulfilments". */
["vectric_products_fulfilments_order_by"]: {
	description?:ValueTypes["order_by"] | null,
	downloadSize?:ValueTypes["order_by"] | null,
	fulfilmentId?:ValueTypes["order_by"] | null,
	fulfilmentName?:ValueTypes["order_by"] | null,
	fulfilmenttypeid?:ValueTypes["order_by"] | null,
	location?:ValueTypes["order_by"] | null,
	objectName?:ValueTypes["order_by"] | null,
	type?:ValueTypes["vectric_products_fulfilmenttypes_order_by"] | null
};
	/** primary key columns input for table: vectric_products_fulfilments */
["vectric_products_fulfilments_pk_columns_input"]: {
	fulfilmentId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.products_fulfilments" */
["vectric_products_fulfilments_set_input"]: {
	description?:string | null,
	downloadSize?:string | null,
	fulfilmentId?:ValueTypes["bigint"] | null,
	fulfilmentName?:string | null,
	fulfilmenttypeid?:ValueTypes["bigint"] | null,
	location?:string | null,
	objectName?:string | null
};
	/** Boolean expression to filter rows from the table "vectric.products_fulfilmenttypes". All fields are combined with a logical 'AND'. */
["vectric_products_fulfilmenttypes_bool_exp"]: {
	_and?:ValueTypes["vectric_products_fulfilmenttypes_bool_exp"][],
	_not?:ValueTypes["vectric_products_fulfilmenttypes_bool_exp"] | null,
	_or?:ValueTypes["vectric_products_fulfilmenttypes_bool_exp"][],
	fulfilmenttypeid?:ValueTypes["bigint_comparison_exp"] | null,
	typename?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_inc_input"]: {
	fulfilmenttypeid?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_insert_input"]: {
	fulfilmenttypeid?:ValueTypes["bigint"] | null,
	typename?:string | null
};
	/** input type for inserting object relation for remote table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_products_fulfilmenttypes_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_fulfilmenttypes_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_on_conflict"]: {
	constraint:ValueTypes["vectric_products_fulfilmenttypes_constraint"],
	update_columns:ValueTypes["vectric_products_fulfilmenttypes_update_column"][],
	where?:ValueTypes["vectric_products_fulfilmenttypes_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.products_fulfilmenttypes". */
["vectric_products_fulfilmenttypes_order_by"]: {
	fulfilmenttypeid?:ValueTypes["order_by"] | null,
	typename?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_products_fulfilmenttypes */
["vectric_products_fulfilmenttypes_pk_columns_input"]: {
	fulfilmenttypeid:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_set_input"]: {
	fulfilmenttypeid?:ValueTypes["bigint"] | null,
	typename?:string | null
};
	/** order by aggregate values of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_products_product_fulfilments_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_products_product_fulfilments_max_order_by"] | null,
	min?:ValueTypes["vectric_products_product_fulfilments_min_order_by"] | null,
	stddev?:ValueTypes["vectric_products_product_fulfilments_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_products_product_fulfilments_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_products_product_fulfilments_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_products_product_fulfilments_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_products_product_fulfilments_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_products_product_fulfilments_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_products_product_fulfilments_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_products_product_fulfilments_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_product_fulfilments_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_avg_order_by"]: {
	fulfilmentid?:ValueTypes["order_by"] | null,
	productfulfilmentid?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.products_product_fulfilments". All fields are combined with a logical 'AND'. */
["vectric_products_product_fulfilments_bool_exp"]: {
	_and?:ValueTypes["vectric_products_product_fulfilments_bool_exp"][],
	_not?:ValueTypes["vectric_products_product_fulfilments_bool_exp"] | null,
	_or?:ValueTypes["vectric_products_product_fulfilments_bool_exp"][],
	fulfilment?:ValueTypes["vectric_products_fulfilments_bool_exp"] | null,
	fulfilmentid?:ValueTypes["bigint_comparison_exp"] | null,
	product?:ValueTypes["vectric_products_products_bool_exp"] | null,
	productfulfilmentid?:ValueTypes["bigint_comparison_exp"] | null,
	productid?:ValueTypes["bigint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_inc_input"]: {
	fulfilmentid?:ValueTypes["bigint"] | null,
	productfulfilmentid?:ValueTypes["bigint"] | null,
	productid?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_insert_input"]: {
	fulfilment?:ValueTypes["vectric_products_fulfilments_obj_rel_insert_input"] | null,
	fulfilmentid?:ValueTypes["bigint"] | null,
	product?:ValueTypes["vectric_products_products_obj_rel_insert_input"] | null,
	productfulfilmentid?:ValueTypes["bigint"] | null,
	productid?:ValueTypes["bigint"] | null
};
	/** order by max() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_max_order_by"]: {
	fulfilmentid?:ValueTypes["order_by"] | null,
	productfulfilmentid?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_min_order_by"]: {
	fulfilmentid?:ValueTypes["order_by"] | null,
	productfulfilmentid?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null
};
	/** on conflict condition type for table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_on_conflict"]: {
	constraint:ValueTypes["vectric_products_product_fulfilments_constraint"],
	update_columns:ValueTypes["vectric_products_product_fulfilments_update_column"][],
	where?:ValueTypes["vectric_products_product_fulfilments_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.products_product_fulfilments". */
["vectric_products_product_fulfilments_order_by"]: {
	fulfilment?:ValueTypes["vectric_products_fulfilments_order_by"] | null,
	fulfilmentid?:ValueTypes["order_by"] | null,
	product?:ValueTypes["vectric_products_products_order_by"] | null,
	productfulfilmentid?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_products_product_fulfilments */
["vectric_products_product_fulfilments_pk_columns_input"]: {
	productfulfilmentid:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_set_input"]: {
	fulfilmentid?:ValueTypes["bigint"] | null,
	productfulfilmentid?:ValueTypes["bigint"] | null,
	productid?:ValueTypes["bigint"] | null
};
	/** order by stddev() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_stddev_order_by"]: {
	fulfilmentid?:ValueTypes["order_by"] | null,
	productfulfilmentid?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_stddev_pop_order_by"]: {
	fulfilmentid?:ValueTypes["order_by"] | null,
	productfulfilmentid?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_stddev_samp_order_by"]: {
	fulfilmentid?:ValueTypes["order_by"] | null,
	productfulfilmentid?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_sum_order_by"]: {
	fulfilmentid?:ValueTypes["order_by"] | null,
	productfulfilmentid?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_var_pop_order_by"]: {
	fulfilmentid?:ValueTypes["order_by"] | null,
	productfulfilmentid?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_var_samp_order_by"]: {
	fulfilmentid?:ValueTypes["order_by"] | null,
	productfulfilmentid?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_variance_order_by"]: {
	fulfilmentid?:ValueTypes["order_by"] | null,
	productfulfilmentid?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.products_product_licence_type". All fields are combined with a logical 'AND'. */
["vectric_products_product_licence_type_bool_exp"]: {
	_and?:ValueTypes["vectric_products_product_licence_type_bool_exp"][],
	_not?:ValueTypes["vectric_products_product_licence_type_bool_exp"] | null,
	_or?:ValueTypes["vectric_products_product_licence_type_bool_exp"][],
	type?:ValueTypes["String_comparison_exp"] | null
};
	/** Boolean expression to compare columns of type "vectric_products_product_licence_type_enum". All fields are combined with logical 'AND'. */
["vectric_products_product_licence_type_enum_comparison_exp"]: {
	_eq?:ValueTypes["vectric_products_product_licence_type_enum"] | null,
	_in?:ValueTypes["vectric_products_product_licence_type_enum"][],
	_is_null?:boolean | null,
	_neq?:ValueTypes["vectric_products_product_licence_type_enum"] | null,
	_nin?:ValueTypes["vectric_products_product_licence_type_enum"][]
};
	/** input type for inserting data into table "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_insert_input"]: {
	type?:string | null
};
	/** on conflict condition type for table "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_on_conflict"]: {
	constraint:ValueTypes["vectric_products_product_licence_type_constraint"],
	update_columns:ValueTypes["vectric_products_product_licence_type_update_column"][],
	where?:ValueTypes["vectric_products_product_licence_type_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.products_product_licence_type". */
["vectric_products_product_licence_type_order_by"]: {
	type?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_products_product_licence_type */
["vectric_products_product_licence_type_pk_columns_input"]: {
	type:string
};
	/** input type for updating data in table "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_set_input"]: {
	type?:string | null
};
	/** order by aggregate values of table "vectric.products_products" */
["vectric_products_products_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_products_products_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_products_products_max_order_by"] | null,
	min?:ValueTypes["vectric_products_products_min_order_by"] | null,
	stddev?:ValueTypes["vectric_products_products_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_products_products_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_products_products_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_products_products_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_products_products_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_products_products_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_products_products_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.products_products" */
["vectric_products_products_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_products_products_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_products_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.products_products" */
["vectric_products_products_avg_order_by"]: {
	externalid?:ValueTypes["order_by"] | null,
	latestversion?:ValueTypes["order_by"] | null,
	productID?:ValueTypes["order_by"] | null,
	type?:ValueTypes["order_by"] | null,
	upgradefromtypeid?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.products_products". All fields are combined with a logical 'AND'. */
["vectric_products_products_bool_exp"]: {
	_and?:ValueTypes["vectric_products_products_bool_exp"][],
	_not?:ValueTypes["vectric_products_products_bool_exp"] | null,
	_or?:ValueTypes["vectric_products_products_bool_exp"][],
	enabled?:ValueTypes["Boolean_comparison_exp"] | null,
	externalid?:ValueTypes["bigint_comparison_exp"] | null,
	fastspringId?:ValueTypes["String_comparison_exp"] | null,
	free?:ValueTypes["Boolean_comparison_exp"] | null,
	latestVersion?:ValueTypes["vectric_products_versioncodes_bool_exp"] | null,
	latestversion?:ValueTypes["bigint_comparison_exp"] | null,
	licenceType?:ValueTypes["vectric_products_product_licence_type_enum_comparison_exp"] | null,
	media?:ValueTypes["Boolean_comparison_exp"] | null,
	potentialEnhancements?:ValueTypes["vectric_products_enhancement_eligibility_bool_exp"] | null,
	potentialUpgrades?:ValueTypes["vectric_active_upgrades_bool_exp"] | null,
	productID?:ValueTypes["bigint_comparison_exp"] | null,
	productName?:ValueTypes["String_comparison_exp"] | null,
	productType?:ValueTypes["vectric_products_producttype_bool_exp"] | null,
	product_fulfilments?:ValueTypes["vectric_products_product_fulfilments_bool_exp"] | null,
	receivesClipart?:ValueTypes["Boolean_comparison_exp"] | null,
	releaseDate?:ValueTypes["date_comparison_exp"] | null,
	requireslicence?:ValueTypes["Boolean_comparison_exp"] | null,
	type?:ValueTypes["bigint_comparison_exp"] | null,
	upgradefromtypeid?:ValueTypes["bigint_comparison_exp"] | null,
	versions?:ValueTypes["vectric_products_versioncodes_bool_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.products_products" */
["vectric_products_products_inc_input"]: {
	externalid?:ValueTypes["bigint"] | null,
	latestversion?:ValueTypes["bigint"] | null,
	productID?:ValueTypes["bigint"] | null,
	type?:ValueTypes["bigint"] | null,
	upgradefromtypeid?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.products_products" */
["vectric_products_products_insert_input"]: {
	enabled?:boolean | null,
	externalid?:ValueTypes["bigint"] | null,
	fastspringId?:string | null,
	free?:boolean | null,
	latestVersion?:ValueTypes["vectric_products_versioncodes_obj_rel_insert_input"] | null,
	latestversion?:ValueTypes["bigint"] | null,
	licenceType?:ValueTypes["vectric_products_product_licence_type_enum"] | null,
	media?:boolean | null,
	potentialEnhancements?:ValueTypes["vectric_products_enhancement_eligibility_arr_rel_insert_input"] | null,
	potentialUpgrades?:ValueTypes["vectric_active_upgrades_arr_rel_insert_input"] | null,
	productID?:ValueTypes["bigint"] | null,
	productName?:string | null,
	productType?:ValueTypes["vectric_products_producttype_obj_rel_insert_input"] | null,
	product_fulfilments?:ValueTypes["vectric_products_product_fulfilments_arr_rel_insert_input"] | null,
	receivesClipart?:boolean | null,
	releaseDate?:ValueTypes["date"] | null,
	requireslicence?:boolean | null,
	type?:ValueTypes["bigint"] | null,
	upgradefromtypeid?:ValueTypes["bigint"] | null,
	versions?:ValueTypes["vectric_products_versioncodes_arr_rel_insert_input"] | null
};
	/** order by max() on columns of table "vectric.products_products" */
["vectric_products_products_max_order_by"]: {
	externalid?:ValueTypes["order_by"] | null,
	fastspringId?:ValueTypes["order_by"] | null,
	latestversion?:ValueTypes["order_by"] | null,
	productID?:ValueTypes["order_by"] | null,
	productName?:ValueTypes["order_by"] | null,
	releaseDate?:ValueTypes["order_by"] | null,
	type?:ValueTypes["order_by"] | null,
	upgradefromtypeid?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.products_products" */
["vectric_products_products_min_order_by"]: {
	externalid?:ValueTypes["order_by"] | null,
	fastspringId?:ValueTypes["order_by"] | null,
	latestversion?:ValueTypes["order_by"] | null,
	productID?:ValueTypes["order_by"] | null,
	productName?:ValueTypes["order_by"] | null,
	releaseDate?:ValueTypes["order_by"] | null,
	type?:ValueTypes["order_by"] | null,
	upgradefromtypeid?:ValueTypes["order_by"] | null
};
	/** input type for inserting object relation for remote table "vectric.products_products" */
["vectric_products_products_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_products_products_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_products_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.products_products" */
["vectric_products_products_on_conflict"]: {
	constraint:ValueTypes["vectric_products_products_constraint"],
	update_columns:ValueTypes["vectric_products_products_update_column"][],
	where?:ValueTypes["vectric_products_products_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.products_products". */
["vectric_products_products_order_by"]: {
	enabled?:ValueTypes["order_by"] | null,
	externalid?:ValueTypes["order_by"] | null,
	fastspringId?:ValueTypes["order_by"] | null,
	free?:ValueTypes["order_by"] | null,
	latestVersion?:ValueTypes["vectric_products_versioncodes_order_by"] | null,
	latestversion?:ValueTypes["order_by"] | null,
	licenceType?:ValueTypes["order_by"] | null,
	media?:ValueTypes["order_by"] | null,
	potentialEnhancements_aggregate?:ValueTypes["vectric_products_enhancement_eligibility_aggregate_order_by"] | null,
	potentialUpgrades_aggregate?:ValueTypes["vectric_active_upgrades_aggregate_order_by"] | null,
	productID?:ValueTypes["order_by"] | null,
	productName?:ValueTypes["order_by"] | null,
	productType?:ValueTypes["vectric_products_producttype_order_by"] | null,
	product_fulfilments_aggregate?:ValueTypes["vectric_products_product_fulfilments_aggregate_order_by"] | null,
	receivesClipart?:ValueTypes["order_by"] | null,
	releaseDate?:ValueTypes["order_by"] | null,
	requireslicence?:ValueTypes["order_by"] | null,
	type?:ValueTypes["order_by"] | null,
	upgradefromtypeid?:ValueTypes["order_by"] | null,
	versions_aggregate?:ValueTypes["vectric_products_versioncodes_aggregate_order_by"] | null
};
	/** primary key columns input for table: vectric_products_products */
["vectric_products_products_pk_columns_input"]: {
	productID:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.products_products" */
["vectric_products_products_set_input"]: {
	enabled?:boolean | null,
	externalid?:ValueTypes["bigint"] | null,
	fastspringId?:string | null,
	free?:boolean | null,
	latestversion?:ValueTypes["bigint"] | null,
	licenceType?:ValueTypes["vectric_products_product_licence_type_enum"] | null,
	media?:boolean | null,
	productID?:ValueTypes["bigint"] | null,
	productName?:string | null,
	receivesClipart?:boolean | null,
	releaseDate?:ValueTypes["date"] | null,
	requireslicence?:boolean | null,
	type?:ValueTypes["bigint"] | null,
	upgradefromtypeid?:ValueTypes["bigint"] | null
};
	/** order by stddev() on columns of table "vectric.products_products" */
["vectric_products_products_stddev_order_by"]: {
	externalid?:ValueTypes["order_by"] | null,
	latestversion?:ValueTypes["order_by"] | null,
	productID?:ValueTypes["order_by"] | null,
	type?:ValueTypes["order_by"] | null,
	upgradefromtypeid?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.products_products" */
["vectric_products_products_stddev_pop_order_by"]: {
	externalid?:ValueTypes["order_by"] | null,
	latestversion?:ValueTypes["order_by"] | null,
	productID?:ValueTypes["order_by"] | null,
	type?:ValueTypes["order_by"] | null,
	upgradefromtypeid?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.products_products" */
["vectric_products_products_stddev_samp_order_by"]: {
	externalid?:ValueTypes["order_by"] | null,
	latestversion?:ValueTypes["order_by"] | null,
	productID?:ValueTypes["order_by"] | null,
	type?:ValueTypes["order_by"] | null,
	upgradefromtypeid?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.products_products" */
["vectric_products_products_sum_order_by"]: {
	externalid?:ValueTypes["order_by"] | null,
	latestversion?:ValueTypes["order_by"] | null,
	productID?:ValueTypes["order_by"] | null,
	type?:ValueTypes["order_by"] | null,
	upgradefromtypeid?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.products_products" */
["vectric_products_products_var_pop_order_by"]: {
	externalid?:ValueTypes["order_by"] | null,
	latestversion?:ValueTypes["order_by"] | null,
	productID?:ValueTypes["order_by"] | null,
	type?:ValueTypes["order_by"] | null,
	upgradefromtypeid?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.products_products" */
["vectric_products_products_var_samp_order_by"]: {
	externalid?:ValueTypes["order_by"] | null,
	latestversion?:ValueTypes["order_by"] | null,
	productID?:ValueTypes["order_by"] | null,
	type?:ValueTypes["order_by"] | null,
	upgradefromtypeid?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.products_products" */
["vectric_products_products_variance_order_by"]: {
	externalid?:ValueTypes["order_by"] | null,
	latestversion?:ValueTypes["order_by"] | null,
	productID?:ValueTypes["order_by"] | null,
	type?:ValueTypes["order_by"] | null,
	upgradefromtypeid?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.products_producttype". All fields are combined with a logical 'AND'. */
["vectric_products_producttype_bool_exp"]: {
	_and?:ValueTypes["vectric_products_producttype_bool_exp"][],
	_not?:ValueTypes["vectric_products_producttype_bool_exp"] | null,
	_or?:ValueTypes["vectric_products_producttype_bool_exp"][],
	productTypeId?:ValueTypes["bigint_comparison_exp"] | null,
	productTypeName?:ValueTypes["String_comparison_exp"] | null,
	products?:ValueTypes["vectric_products_products_bool_exp"] | null,
	seq?:ValueTypes["Int_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.products_producttype" */
["vectric_products_producttype_inc_input"]: {
	productTypeId?:ValueTypes["bigint"] | null,
	seq?:number | null
};
	/** input type for inserting data into table "vectric.products_producttype" */
["vectric_products_producttype_insert_input"]: {
	productTypeId?:ValueTypes["bigint"] | null,
	productTypeName?:string | null,
	products?:ValueTypes["vectric_products_products_arr_rel_insert_input"] | null,
	seq?:number | null
};
	/** input type for inserting object relation for remote table "vectric.products_producttype" */
["vectric_products_producttype_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_products_producttype_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_producttype_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.products_producttype" */
["vectric_products_producttype_on_conflict"]: {
	constraint:ValueTypes["vectric_products_producttype_constraint"],
	update_columns:ValueTypes["vectric_products_producttype_update_column"][],
	where?:ValueTypes["vectric_products_producttype_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.products_producttype". */
["vectric_products_producttype_order_by"]: {
	productTypeId?:ValueTypes["order_by"] | null,
	productTypeName?:ValueTypes["order_by"] | null,
	products_aggregate?:ValueTypes["vectric_products_products_aggregate_order_by"] | null,
	seq?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_products_producttype */
["vectric_products_producttype_pk_columns_input"]: {
	productTypeId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.products_producttype" */
["vectric_products_producttype_set_input"]: {
	productTypeId?:ValueTypes["bigint"] | null,
	productTypeName?:string | null,
	seq?:number | null
};
	/** Boolean expression to filter rows from the table "vectric.products_upgrade_eligibility". All fields are combined with a logical 'AND'. */
["vectric_products_upgrade_eligibility_bool_exp"]: {
	_and?:ValueTypes["vectric_products_upgrade_eligibility_bool_exp"][],
	_not?:ValueTypes["vectric_products_upgrade_eligibility_bool_exp"] | null,
	_or?:ValueTypes["vectric_products_upgrade_eligibility_bool_exp"][],
	eligibilityid?:ValueTypes["bigint_comparison_exp"] | null,
	fastspringproductid?:ValueTypes["String_comparison_exp"] | null,
	fastspringurl?:ValueTypes["String_comparison_exp"] | null,
	fromtype?:ValueTypes["bigint_comparison_exp"] | null,
	maxmajorversion?:ValueTypes["bigint_comparison_exp"] | null,
	minmajorversion?:ValueTypes["bigint_comparison_exp"] | null,
	price?:ValueTypes["numeric_comparison_exp"] | null,
	productsUpgradeFromType?:ValueTypes["vectric_products_producttype_bool_exp"] | null,
	productsUpgradeToProduct?:ValueTypes["vectric_products_products_bool_exp"] | null,
	summary?:ValueTypes["String_comparison_exp"] | null,
	toproduct?:ValueTypes["bigint_comparison_exp"] | null,
	updatelink?:ValueTypes["String_comparison_exp"] | null,
	visibletocustomers?:ValueTypes["Boolean_comparison_exp"] | null,
	visibletostaff?:ValueTypes["Boolean_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_inc_input"]: {
	eligibilityid?:ValueTypes["bigint"] | null,
	fromtype?:ValueTypes["bigint"] | null,
	maxmajorversion?:ValueTypes["bigint"] | null,
	minmajorversion?:ValueTypes["bigint"] | null,
	price?:ValueTypes["numeric"] | null,
	toproduct?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_insert_input"]: {
	eligibilityid?:ValueTypes["bigint"] | null,
	fastspringproductid?:string | null,
	fastspringurl?:string | null,
	fromtype?:ValueTypes["bigint"] | null,
	maxmajorversion?:ValueTypes["bigint"] | null,
	minmajorversion?:ValueTypes["bigint"] | null,
	price?:ValueTypes["numeric"] | null,
	productsUpgradeFromType?:ValueTypes["vectric_products_producttype_obj_rel_insert_input"] | null,
	productsUpgradeToProduct?:ValueTypes["vectric_products_products_obj_rel_insert_input"] | null,
	summary?:string | null,
	toproduct?:ValueTypes["bigint"] | null,
	updatelink?:string | null,
	visibletocustomers?:boolean | null,
	visibletostaff?:boolean | null
};
	/** input type for inserting object relation for remote table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_products_upgrade_eligibility_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_upgrade_eligibility_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_on_conflict"]: {
	constraint:ValueTypes["vectric_products_upgrade_eligibility_constraint"],
	update_columns:ValueTypes["vectric_products_upgrade_eligibility_update_column"][],
	where?:ValueTypes["vectric_products_upgrade_eligibility_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.products_upgrade_eligibility". */
["vectric_products_upgrade_eligibility_order_by"]: {
	eligibilityid?:ValueTypes["order_by"] | null,
	fastspringproductid?:ValueTypes["order_by"] | null,
	fastspringurl?:ValueTypes["order_by"] | null,
	fromtype?:ValueTypes["order_by"] | null,
	maxmajorversion?:ValueTypes["order_by"] | null,
	minmajorversion?:ValueTypes["order_by"] | null,
	price?:ValueTypes["order_by"] | null,
	productsUpgradeFromType?:ValueTypes["vectric_products_producttype_order_by"] | null,
	productsUpgradeToProduct?:ValueTypes["vectric_products_products_order_by"] | null,
	summary?:ValueTypes["order_by"] | null,
	toproduct?:ValueTypes["order_by"] | null,
	updatelink?:ValueTypes["order_by"] | null,
	visibletocustomers?:ValueTypes["order_by"] | null,
	visibletostaff?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_products_upgrade_eligibility */
["vectric_products_upgrade_eligibility_pk_columns_input"]: {
	eligibilityid:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_set_input"]: {
	eligibilityid?:ValueTypes["bigint"] | null,
	fastspringproductid?:string | null,
	fastspringurl?:string | null,
	fromtype?:ValueTypes["bigint"] | null,
	maxmajorversion?:ValueTypes["bigint"] | null,
	minmajorversion?:ValueTypes["bigint"] | null,
	price?:ValueTypes["numeric"] | null,
	summary?:string | null,
	toproduct?:ValueTypes["bigint"] | null,
	updatelink?:string | null,
	visibletocustomers?:boolean | null,
	visibletostaff?:boolean | null
};
	/** order by aggregate values of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_products_versioncodes_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_products_versioncodes_max_order_by"] | null,
	min?:ValueTypes["vectric_products_versioncodes_min_order_by"] | null,
	stddev?:ValueTypes["vectric_products_versioncodes_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_products_versioncodes_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_products_versioncodes_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_products_versioncodes_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_products_versioncodes_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_products_versioncodes_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_products_versioncodes_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.products_versioncodes" */
["vectric_products_versioncodes_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_products_versioncodes_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_versioncodes_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_avg_order_by"]: {
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.products_versioncodes". All fields are combined with a logical 'AND'. */
["vectric_products_versioncodes_bool_exp"]: {
	_and?:ValueTypes["vectric_products_versioncodes_bool_exp"][],
	_not?:ValueTypes["vectric_products_versioncodes_bool_exp"] | null,
	_or?:ValueTypes["vectric_products_versioncodes_bool_exp"][],
	displayVersion?:ValueTypes["String_comparison_exp"] | null,
	latest?:ValueTypes["Boolean_comparison_exp"] | null,
	majorVersion?:ValueTypes["bigint_comparison_exp"] | null,
	minorVersionOOX?:ValueTypes["bigint_comparison_exp"] | null,
	minorVersionOXO?:ValueTypes["bigint_comparison_exp"] | null,
	minorVersionXOO?:ValueTypes["bigint_comparison_exp"] | null,
	notifying?:ValueTypes["Boolean_comparison_exp"] | null,
	patchurl?:ValueTypes["String_comparison_exp"] | null,
	product?:ValueTypes["vectric_products_products_bool_exp"] | null,
	productid?:ValueTypes["bigint_comparison_exp"] | null,
	releaseDate?:ValueTypes["date_comparison_exp"] | null,
	url?:ValueTypes["String_comparison_exp"] | null,
	versioncodeid?:ValueTypes["bigint_comparison_exp"] | null,
	visible?:ValueTypes["Boolean_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.products_versioncodes" */
["vectric_products_versioncodes_inc_input"]: {
	majorVersion?:ValueTypes["bigint"] | null,
	minorVersionOOX?:ValueTypes["bigint"] | null,
	minorVersionOXO?:ValueTypes["bigint"] | null,
	minorVersionXOO?:ValueTypes["bigint"] | null,
	productid?:ValueTypes["bigint"] | null,
	versioncodeid?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.products_versioncodes" */
["vectric_products_versioncodes_insert_input"]: {
	displayVersion?:string | null,
	latest?:boolean | null,
	majorVersion?:ValueTypes["bigint"] | null,
	minorVersionOOX?:ValueTypes["bigint"] | null,
	minorVersionOXO?:ValueTypes["bigint"] | null,
	minorVersionXOO?:ValueTypes["bigint"] | null,
	notifying?:boolean | null,
	patchurl?:string | null,
	product?:ValueTypes["vectric_products_products_obj_rel_insert_input"] | null,
	productid?:ValueTypes["bigint"] | null,
	releaseDate?:ValueTypes["date"] | null,
	url?:string | null,
	versioncodeid?:ValueTypes["bigint"] | null,
	visible?:boolean | null
};
	/** order by max() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_max_order_by"]: {
	displayVersion?:ValueTypes["order_by"] | null,
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	patchurl?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null,
	releaseDate?:ValueTypes["order_by"] | null,
	url?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_min_order_by"]: {
	displayVersion?:ValueTypes["order_by"] | null,
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	patchurl?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null,
	releaseDate?:ValueTypes["order_by"] | null,
	url?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null
};
	/** input type for inserting object relation for remote table "vectric.products_versioncodes" */
["vectric_products_versioncodes_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_products_versioncodes_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_products_versioncodes_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.products_versioncodes" */
["vectric_products_versioncodes_on_conflict"]: {
	constraint:ValueTypes["vectric_products_versioncodes_constraint"],
	update_columns:ValueTypes["vectric_products_versioncodes_update_column"][],
	where?:ValueTypes["vectric_products_versioncodes_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.products_versioncodes". */
["vectric_products_versioncodes_order_by"]: {
	displayVersion?:ValueTypes["order_by"] | null,
	latest?:ValueTypes["order_by"] | null,
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	notifying?:ValueTypes["order_by"] | null,
	patchurl?:ValueTypes["order_by"] | null,
	product?:ValueTypes["vectric_products_products_order_by"] | null,
	productid?:ValueTypes["order_by"] | null,
	releaseDate?:ValueTypes["order_by"] | null,
	url?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null,
	visible?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_products_versioncodes */
["vectric_products_versioncodes_pk_columns_input"]: {
	versioncodeid:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.products_versioncodes" */
["vectric_products_versioncodes_set_input"]: {
	displayVersion?:string | null,
	latest?:boolean | null,
	majorVersion?:ValueTypes["bigint"] | null,
	minorVersionOOX?:ValueTypes["bigint"] | null,
	minorVersionOXO?:ValueTypes["bigint"] | null,
	minorVersionXOO?:ValueTypes["bigint"] | null,
	notifying?:boolean | null,
	patchurl?:string | null,
	productid?:ValueTypes["bigint"] | null,
	releaseDate?:ValueTypes["date"] | null,
	url?:string | null,
	versioncodeid?:ValueTypes["bigint"] | null,
	visible?:boolean | null
};
	/** order by stddev() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_stddev_order_by"]: {
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_stddev_pop_order_by"]: {
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_stddev_samp_order_by"]: {
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_sum_order_by"]: {
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_var_pop_order_by"]: {
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_var_samp_order_by"]: {
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_variance_order_by"]: {
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.questions". All fields are combined with a logical 'AND'. */
["vectric_questions_bool_exp"]: {
	_and?:ValueTypes["vectric_questions_bool_exp"][],
	_not?:ValueTypes["vectric_questions_bool_exp"] | null,
	_or?:ValueTypes["vectric_questions_bool_exp"][],
	customer_responses?:ValueTypes["vectric_customer_responses_bool_exp"] | null,
	multipleanswers?:ValueTypes["Boolean_comparison_exp"] | null,
	questionid?:ValueTypes["bigint_comparison_exp"] | null,
	questiontext?:ValueTypes["String_comparison_exp"] | null,
	responses?:ValueTypes["vectric_responses_bool_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.questions" */
["vectric_questions_inc_input"]: {
	questionid?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.questions" */
["vectric_questions_insert_input"]: {
	customer_responses?:ValueTypes["vectric_customer_responses_arr_rel_insert_input"] | null,
	multipleanswers?:boolean | null,
	questionid?:ValueTypes["bigint"] | null,
	questiontext?:string | null,
	responses?:ValueTypes["vectric_responses_arr_rel_insert_input"] | null
};
	/** input type for inserting object relation for remote table "vectric.questions" */
["vectric_questions_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_questions_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_questions_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.questions" */
["vectric_questions_on_conflict"]: {
	constraint:ValueTypes["vectric_questions_constraint"],
	update_columns:ValueTypes["vectric_questions_update_column"][],
	where?:ValueTypes["vectric_questions_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.questions". */
["vectric_questions_order_by"]: {
	customer_responses_aggregate?:ValueTypes["vectric_customer_responses_aggregate_order_by"] | null,
	multipleanswers?:ValueTypes["order_by"] | null,
	questionid?:ValueTypes["order_by"] | null,
	questiontext?:ValueTypes["order_by"] | null,
	responses_aggregate?:ValueTypes["vectric_responses_aggregate_order_by"] | null
};
	/** primary key columns input for table: vectric_questions */
["vectric_questions_pk_columns_input"]: {
	questionid:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.questions" */
["vectric_questions_set_input"]: {
	multipleanswers?:boolean | null,
	questionid?:ValueTypes["bigint"] | null,
	questiontext?:string | null
};
	/** order by aggregate values of table "vectric.responses" */
["vectric_responses_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_responses_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_responses_max_order_by"] | null,
	min?:ValueTypes["vectric_responses_min_order_by"] | null,
	stddev?:ValueTypes["vectric_responses_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_responses_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_responses_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_responses_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_responses_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_responses_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_responses_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.responses" */
["vectric_responses_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_responses_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_responses_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.responses" */
["vectric_responses_avg_order_by"]: {
	questionid?:ValueTypes["order_by"] | null,
	responseid?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.responses". All fields are combined with a logical 'AND'. */
["vectric_responses_bool_exp"]: {
	_and?:ValueTypes["vectric_responses_bool_exp"][],
	_not?:ValueTypes["vectric_responses_bool_exp"] | null,
	_or?:ValueTypes["vectric_responses_bool_exp"][],
	questionid?:ValueTypes["bigint_comparison_exp"] | null,
	responseid?:ValueTypes["bigint_comparison_exp"] | null,
	responsetext?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.responses" */
["vectric_responses_inc_input"]: {
	questionid?:ValueTypes["bigint"] | null,
	responseid?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.responses" */
["vectric_responses_insert_input"]: {
	questionid?:ValueTypes["bigint"] | null,
	responseid?:ValueTypes["bigint"] | null,
	responsetext?:string | null
};
	/** order by max() on columns of table "vectric.responses" */
["vectric_responses_max_order_by"]: {
	questionid?:ValueTypes["order_by"] | null,
	responseid?:ValueTypes["order_by"] | null,
	responsetext?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.responses" */
["vectric_responses_min_order_by"]: {
	questionid?:ValueTypes["order_by"] | null,
	responseid?:ValueTypes["order_by"] | null,
	responsetext?:ValueTypes["order_by"] | null
};
	/** input type for inserting object relation for remote table "vectric.responses" */
["vectric_responses_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_responses_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_responses_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.responses" */
["vectric_responses_on_conflict"]: {
	constraint:ValueTypes["vectric_responses_constraint"],
	update_columns:ValueTypes["vectric_responses_update_column"][],
	where?:ValueTypes["vectric_responses_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.responses". */
["vectric_responses_order_by"]: {
	questionid?:ValueTypes["order_by"] | null,
	responseid?:ValueTypes["order_by"] | null,
	responsetext?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_responses */
["vectric_responses_pk_columns_input"]: {
	responseid:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.responses" */
["vectric_responses_set_input"]: {
	questionid?:ValueTypes["bigint"] | null,
	responseid?:ValueTypes["bigint"] | null,
	responsetext?:string | null
};
	/** order by stddev() on columns of table "vectric.responses" */
["vectric_responses_stddev_order_by"]: {
	questionid?:ValueTypes["order_by"] | null,
	responseid?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.responses" */
["vectric_responses_stddev_pop_order_by"]: {
	questionid?:ValueTypes["order_by"] | null,
	responseid?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.responses" */
["vectric_responses_stddev_samp_order_by"]: {
	questionid?:ValueTypes["order_by"] | null,
	responseid?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.responses" */
["vectric_responses_sum_order_by"]: {
	questionid?:ValueTypes["order_by"] | null,
	responseid?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.responses" */
["vectric_responses_var_pop_order_by"]: {
	questionid?:ValueTypes["order_by"] | null,
	responseid?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.responses" */
["vectric_responses_var_samp_order_by"]: {
	questionid?:ValueTypes["order_by"] | null,
	responseid?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.responses" */
["vectric_responses_variance_order_by"]: {
	questionid?:ValueTypes["order_by"] | null,
	responseid?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.saleable_products". All fields are combined with a logical 'AND'. */
["vectric_saleable_products_bool_exp"]: {
	_and?:ValueTypes["vectric_saleable_products_bool_exp"][],
	_not?:ValueTypes["vectric_saleable_products_bool_exp"] | null,
	_or?:ValueTypes["vectric_saleable_products_bool_exp"][],
	enabled?:ValueTypes["Boolean_comparison_exp"] | null,
	fastspringId?:ValueTypes["String_comparison_exp"] | null,
	free?:ValueTypes["Boolean_comparison_exp"] | null,
	media?:ValueTypes["Boolean_comparison_exp"] | null,
	productId?:ValueTypes["Int_comparison_exp"] | null,
	productName?:ValueTypes["String_comparison_exp"] | null,
	productTypeId?:ValueTypes["Int_comparison_exp"] | null,
	receivesClipart?:ValueTypes["Boolean_comparison_exp"] | null,
	subscription?:ValueTypes["Boolean_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.saleable_products" */
["vectric_saleable_products_inc_input"]: {
	productId?:number | null,
	productTypeId?:number | null
};
	/** input type for inserting data into table "vectric.saleable_products" */
["vectric_saleable_products_insert_input"]: {
	enabled?:boolean | null,
	fastspringId?:string | null,
	free?:boolean | null,
	media?:boolean | null,
	productId?:number | null,
	productName?:string | null,
	productTypeId?:number | null,
	receivesClipart?:boolean | null,
	subscription?:boolean | null
};
	/** input type for inserting object relation for remote table "vectric.saleable_products" */
["vectric_saleable_products_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_saleable_products_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_saleable_products_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.saleable_products" */
["vectric_saleable_products_on_conflict"]: {
	constraint:ValueTypes["vectric_saleable_products_constraint"],
	update_columns:ValueTypes["vectric_saleable_products_update_column"][],
	where?:ValueTypes["vectric_saleable_products_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.saleable_products". */
["vectric_saleable_products_order_by"]: {
	enabled?:ValueTypes["order_by"] | null,
	fastspringId?:ValueTypes["order_by"] | null,
	free?:ValueTypes["order_by"] | null,
	media?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	productName?:ValueTypes["order_by"] | null,
	productTypeId?:ValueTypes["order_by"] | null,
	receivesClipart?:ValueTypes["order_by"] | null,
	subscription?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_saleable_products */
["vectric_saleable_products_pk_columns_input"]: {
	productId:number
};
	/** input type for updating data in table "vectric.saleable_products" */
["vectric_saleable_products_set_input"]: {
	enabled?:boolean | null,
	fastspringId?:string | null,
	free?:boolean | null,
	media?:boolean | null,
	productId?:number | null,
	productName?:string | null,
	productTypeId?:number | null,
	receivesClipart?:boolean | null,
	subscription?:boolean | null
};
	/** Boolean expression to filter rows from the table "vectric.sales_customer_downloads". All fields are combined with a logical 'AND'. */
["vectric_sales_customer_downloads_bool_exp"]: {
	_and?:ValueTypes["vectric_sales_customer_downloads_bool_exp"][],
	_not?:ValueTypes["vectric_sales_customer_downloads_bool_exp"] | null,
	_or?:ValueTypes["vectric_sales_customer_downloads_bool_exp"][],
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	downloadDate?:ValueTypes["timestamptz_comparison_exp"] | null,
	downloadId?:ValueTypes["bigint_comparison_exp"] | null,
	fulfilmentId?:ValueTypes["bigint_comparison_exp"] | null,
	ipAddress?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_inc_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	downloadId?:ValueTypes["bigint"] | null,
	fulfilmentId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_insert_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	downloadDate?:ValueTypes["timestamptz"] | null,
	downloadId?:ValueTypes["bigint"] | null,
	fulfilmentId?:ValueTypes["bigint"] | null,
	ipAddress?:string | null
};
	/** on conflict condition type for table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_on_conflict"]: {
	constraint:ValueTypes["vectric_sales_customer_downloads_constraint"],
	update_columns:ValueTypes["vectric_sales_customer_downloads_update_column"][],
	where?:ValueTypes["vectric_sales_customer_downloads_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.sales_customer_downloads". */
["vectric_sales_customer_downloads_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	downloadDate?:ValueTypes["order_by"] | null,
	downloadId?:ValueTypes["order_by"] | null,
	fulfilmentId?:ValueTypes["order_by"] | null,
	ipAddress?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_sales_customer_downloads */
["vectric_sales_customer_downloads_pk_columns_input"]: {
	downloadId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_set_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	downloadDate?:ValueTypes["timestamptz"] | null,
	downloadId?:ValueTypes["bigint"] | null,
	fulfilmentId?:ValueTypes["bigint"] | null,
	ipAddress?:string | null
};
	/** Boolean expression to filter rows from the table "vectric.sales_customers". All fields are combined with a logical 'AND'. */
["vectric_sales_customers_bool_exp"]: {
	_and?:ValueTypes["vectric_sales_customers_bool_exp"][],
	_not?:ValueTypes["vectric_sales_customers_bool_exp"] | null,
	_or?:ValueTypes["vectric_sales_customers_bool_exp"][],
	acceptedTerms?:ValueTypes["Boolean_comparison_exp"] | null,
	amendedby?:ValueTypes["String_comparison_exp"] | null,
	companyName?:ValueTypes["String_comparison_exp"] | null,
	country?:ValueTypes["vectric_countries_bool_exp"] | null,
	countrycode?:ValueTypes["bigint_comparison_exp"] | null,
	createdby?:ValueTypes["String_comparison_exp"] | null,
	customerAddressLine?:ValueTypes["String_comparison_exp"] | null,
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	customerName?:ValueTypes["String_comparison_exp"] | null,
	customerSales?:ValueTypes["vectric_customer_sales_bool_exp"] | null,
	customerTelephone?:ValueTypes["String_comparison_exp"] | null,
	customerType?:ValueTypes["String_comparison_exp"] | null,
	customerstatusid?:ValueTypes["bigint_comparison_exp"] | null,
	customeruuid?:ValueTypes["uuid_comparison_exp"] | null,
	dateAcceptedTerms?:ValueTypes["timestamptz_comparison_exp"] | null,
	dateCreated?:ValueTypes["timestamptz_comparison_exp"] | null,
	dateMarketingConsentUpdated?:ValueTypes["timestamptz_comparison_exp"] | null,
	dateUpgradeEmailConsentUpdates?:ValueTypes["timestamptz_comparison_exp"] | null,
	dateamended?:ValueTypes["timestamptz_comparison_exp"] | null,
	email?:ValueTypes["String_comparison_exp"] | null,
	freeClipartTokens?:ValueTypes["vectric_free_clipart_tokens_bool_exp"] | null,
	language?:ValueTypes["String_comparison_exp"] | null,
	lastLogin?:ValueTypes["timestamptz_comparison_exp"] | null,
	lastipaddress?:ValueTypes["String_comparison_exp"] | null,
	location?:ValueTypes["String_comparison_exp"] | null,
	memberships?:ValueTypes["vectric_group_user_role_bool_exp"] | null,
	mergedfromcustomerid?:ValueTypes["bigint_comparison_exp"] | null,
	mergedtocustomerid?:ValueTypes["bigint_comparison_exp"] | null,
	notes?:ValueTypes["String_comparison_exp"] | null,
	orders?:ValueTypes["vectric_sales_orders_bool_exp"] | null,
	organizationMemberships?:ValueTypes["vectric_memberships_bool_exp"] | null,
	partnerMemberships?:ValueTypes["vectric_oem_staff_customer_bool_exp"] | null,
	receivingMarketingEmails?:ValueTypes["Boolean_comparison_exp"] | null,
	receivingUpgradeEmails?:ValueTypes["Boolean_comparison_exp"] | null,
	registeredUsername?:ValueTypes["String_comparison_exp"] | null,
	user?:ValueTypes["vectric_security_users_bool_exp"] | null,
	verified?:ValueTypes["Boolean_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.sales_customers" */
["vectric_sales_customers_inc_input"]: {
	countrycode?:ValueTypes["bigint"] | null,
	customerId?:ValueTypes["bigint"] | null,
	customerstatusid?:ValueTypes["bigint"] | null,
	mergedfromcustomerid?:ValueTypes["bigint"] | null,
	mergedtocustomerid?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.sales_customers" */
["vectric_sales_customers_insert_input"]: {
	acceptedTerms?:boolean | null,
	amendedby?:string | null,
	companyName?:string | null,
	country?:ValueTypes["vectric_countries_obj_rel_insert_input"] | null,
	countrycode?:ValueTypes["bigint"] | null,
	createdby?:string | null,
	customerAddressLine?:string | null,
	customerId?:ValueTypes["bigint"] | null,
	customerName?:string | null,
	customerSales?:ValueTypes["vectric_customer_sales_arr_rel_insert_input"] | null,
	customerTelephone?:string | null,
	customerType?:string | null,
	customerstatusid?:ValueTypes["bigint"] | null,
	customeruuid?:ValueTypes["uuid"] | null,
	dateAcceptedTerms?:ValueTypes["timestamptz"] | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	dateMarketingConsentUpdated?:ValueTypes["timestamptz"] | null,
	dateUpgradeEmailConsentUpdates?:ValueTypes["timestamptz"] | null,
	dateamended?:ValueTypes["timestamptz"] | null,
	email?:string | null,
	freeClipartTokens?:ValueTypes["vectric_free_clipart_tokens_arr_rel_insert_input"] | null,
	language?:string | null,
	lastLogin?:ValueTypes["timestamptz"] | null,
	lastipaddress?:string | null,
	location?:string | null,
	memberships?:ValueTypes["vectric_group_user_role_arr_rel_insert_input"] | null,
	mergedfromcustomerid?:ValueTypes["bigint"] | null,
	mergedtocustomerid?:ValueTypes["bigint"] | null,
	notes?:string | null,
	orders?:ValueTypes["vectric_sales_orders_arr_rel_insert_input"] | null,
	organizationMemberships?:ValueTypes["vectric_memberships_arr_rel_insert_input"] | null,
	partnerMemberships?:ValueTypes["vectric_oem_staff_customer_arr_rel_insert_input"] | null,
	receivingMarketingEmails?:boolean | null,
	receivingUpgradeEmails?:boolean | null,
	registeredUsername?:string | null,
	user?:ValueTypes["vectric_security_users_obj_rel_insert_input"] | null,
	verified?:boolean | null
};
	/** input type for inserting object relation for remote table "vectric.sales_customers" */
["vectric_sales_customers_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_sales_customers_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_customers_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.sales_customers" */
["vectric_sales_customers_on_conflict"]: {
	constraint:ValueTypes["vectric_sales_customers_constraint"],
	update_columns:ValueTypes["vectric_sales_customers_update_column"][],
	where?:ValueTypes["vectric_sales_customers_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.sales_customers". */
["vectric_sales_customers_order_by"]: {
	acceptedTerms?:ValueTypes["order_by"] | null,
	amendedby?:ValueTypes["order_by"] | null,
	companyName?:ValueTypes["order_by"] | null,
	country?:ValueTypes["vectric_countries_order_by"] | null,
	countrycode?:ValueTypes["order_by"] | null,
	createdby?:ValueTypes["order_by"] | null,
	customerAddressLine?:ValueTypes["order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	customerName?:ValueTypes["order_by"] | null,
	customerSales_aggregate?:ValueTypes["vectric_customer_sales_aggregate_order_by"] | null,
	customerTelephone?:ValueTypes["order_by"] | null,
	customerType?:ValueTypes["order_by"] | null,
	customerstatusid?:ValueTypes["order_by"] | null,
	customeruuid?:ValueTypes["order_by"] | null,
	dateAcceptedTerms?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	dateMarketingConsentUpdated?:ValueTypes["order_by"] | null,
	dateUpgradeEmailConsentUpdates?:ValueTypes["order_by"] | null,
	dateamended?:ValueTypes["order_by"] | null,
	email?:ValueTypes["order_by"] | null,
	freeClipartTokens_aggregate?:ValueTypes["vectric_free_clipart_tokens_aggregate_order_by"] | null,
	language?:ValueTypes["order_by"] | null,
	lastLogin?:ValueTypes["order_by"] | null,
	lastipaddress?:ValueTypes["order_by"] | null,
	location?:ValueTypes["order_by"] | null,
	memberships_aggregate?:ValueTypes["vectric_group_user_role_aggregate_order_by"] | null,
	mergedfromcustomerid?:ValueTypes["order_by"] | null,
	mergedtocustomerid?:ValueTypes["order_by"] | null,
	notes?:ValueTypes["order_by"] | null,
	orders_aggregate?:ValueTypes["vectric_sales_orders_aggregate_order_by"] | null,
	organizationMemberships_aggregate?:ValueTypes["vectric_memberships_aggregate_order_by"] | null,
	partnerMemberships_aggregate?:ValueTypes["vectric_oem_staff_customer_aggregate_order_by"] | null,
	receivingMarketingEmails?:ValueTypes["order_by"] | null,
	receivingUpgradeEmails?:ValueTypes["order_by"] | null,
	registeredUsername?:ValueTypes["order_by"] | null,
	user?:ValueTypes["vectric_security_users_order_by"] | null,
	verified?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_sales_customers */
["vectric_sales_customers_pk_columns_input"]: {
	customerId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.sales_customers" */
["vectric_sales_customers_set_input"]: {
	acceptedTerms?:boolean | null,
	amendedby?:string | null,
	companyName?:string | null,
	countrycode?:ValueTypes["bigint"] | null,
	createdby?:string | null,
	customerAddressLine?:string | null,
	customerId?:ValueTypes["bigint"] | null,
	customerName?:string | null,
	customerTelephone?:string | null,
	customerType?:string | null,
	customerstatusid?:ValueTypes["bigint"] | null,
	customeruuid?:ValueTypes["uuid"] | null,
	dateAcceptedTerms?:ValueTypes["timestamptz"] | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	dateMarketingConsentUpdated?:ValueTypes["timestamptz"] | null,
	dateUpgradeEmailConsentUpdates?:ValueTypes["timestamptz"] | null,
	dateamended?:ValueTypes["timestamptz"] | null,
	email?:string | null,
	language?:string | null,
	lastLogin?:ValueTypes["timestamptz"] | null,
	lastipaddress?:string | null,
	location?:string | null,
	mergedfromcustomerid?:ValueTypes["bigint"] | null,
	mergedtocustomerid?:ValueTypes["bigint"] | null,
	notes?:string | null,
	receivingMarketingEmails?:boolean | null,
	receivingUpgradeEmails?:boolean | null,
	registeredUsername?:string | null,
	verified?:boolean | null
};
	/** Boolean expression to filter rows from the table "vectric.sales_customerupdates". All fields are combined with a logical 'AND'. */
["vectric_sales_customerupdates_bool_exp"]: {
	_and?:ValueTypes["vectric_sales_customerupdates_bool_exp"][],
	_not?:ValueTypes["vectric_sales_customerupdates_bool_exp"] | null,
	_or?:ValueTypes["vectric_sales_customerupdates_bool_exp"][],
	changedBy?:ValueTypes["String_comparison_exp"] | null,
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	customerUpdateId?:ValueTypes["bigint_comparison_exp"] | null,
	dateChanged?:ValueTypes["timestamptz_comparison_exp"] | null,
	fieldName?:ValueTypes["String_comparison_exp"] | null,
	newValue?:ValueTypes["String_comparison_exp"] | null,
	oldValue?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_inc_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	customerUpdateId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_insert_input"]: {
	changedBy?:string | null,
	customerId?:ValueTypes["bigint"] | null,
	customerUpdateId?:ValueTypes["bigint"] | null,
	dateChanged?:ValueTypes["timestamptz"] | null,
	fieldName?:string | null,
	newValue?:string | null,
	oldValue?:string | null
};
	/** on conflict condition type for table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_on_conflict"]: {
	constraint:ValueTypes["vectric_sales_customerupdates_constraint"],
	update_columns:ValueTypes["vectric_sales_customerupdates_update_column"][],
	where?:ValueTypes["vectric_sales_customerupdates_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.sales_customerupdates". */
["vectric_sales_customerupdates_order_by"]: {
	changedBy?:ValueTypes["order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	customerUpdateId?:ValueTypes["order_by"] | null,
	dateChanged?:ValueTypes["order_by"] | null,
	fieldName?:ValueTypes["order_by"] | null,
	newValue?:ValueTypes["order_by"] | null,
	oldValue?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_sales_customerupdates */
["vectric_sales_customerupdates_pk_columns_input"]: {
	customerUpdateId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_set_input"]: {
	changedBy?:string | null,
	customerId?:ValueTypes["bigint"] | null,
	customerUpdateId?:ValueTypes["bigint"] | null,
	dateChanged?:ValueTypes["timestamptz"] | null,
	fieldName?:string | null,
	newValue?:string | null,
	oldValue?:string | null
};
	/** order by aggregate values of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_sales_oem_bundles_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_sales_oem_bundles_max_order_by"] | null,
	min?:ValueTypes["vectric_sales_oem_bundles_min_order_by"] | null,
	stddev?:ValueTypes["vectric_sales_oem_bundles_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_sales_oem_bundles_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_sales_oem_bundles_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_sales_oem_bundles_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_sales_oem_bundles_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_sales_oem_bundles_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_sales_oem_bundles_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_sales_oem_bundles_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_oem_bundles_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_avg_order_by"]: {
	allocationTypeId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.sales_oem_bundles". All fields are combined with a logical 'AND'. */
["vectric_sales_oem_bundles_bool_exp"]: {
	_and?:ValueTypes["vectric_sales_oem_bundles_bool_exp"][],
	_not?:ValueTypes["vectric_sales_oem_bundles_bool_exp"] | null,
	_or?:ValueTypes["vectric_sales_oem_bundles_bool_exp"][],
	allocatedBy?:ValueTypes["String_comparison_exp"] | null,
	allocationBatch?:ValueTypes["String_comparison_exp"] | null,
	allocationType?:ValueTypes["vectric_oem_licence_allocation_type_bool_exp"] | null,
	allocationTypeId?:ValueTypes["bigint_comparison_exp"] | null,
	bundleId?:ValueTypes["String_comparison_exp"] | null,
	dateAllocated?:ValueTypes["timestamptz_comparison_exp"] | null,
	dateCreated?:ValueTypes["timestamptz_comparison_exp"] | null,
	licences?:ValueTypes["vectric_sales_oemlicences_bool_exp"] | null,
	notes?:ValueTypes["String_comparison_exp"] | null,
	partner?:ValueTypes["vectric_oem_partners_bool_exp"] | null,
	partnerId?:ValueTypes["bigint_comparison_exp"] | null,
	product?:ValueTypes["bigint_comparison_exp"] | null,
	productDisplayName?:ValueTypes["String_comparison_exp"] | null,
	registrationDate?:ValueTypes["timestamptz_comparison_exp"] | null,
	typeDisplayName?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_inc_input"]: {
	allocationTypeId?:ValueTypes["bigint"] | null,
	partnerId?:ValueTypes["bigint"] | null,
	product?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_insert_input"]: {
	allocatedBy?:string | null,
	allocationBatch?:string | null,
	allocationType?:ValueTypes["vectric_oem_licence_allocation_type_obj_rel_insert_input"] | null,
	allocationTypeId?:ValueTypes["bigint"] | null,
	bundleId?:string | null,
	dateAllocated?:ValueTypes["timestamptz"] | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	licences?:ValueTypes["vectric_sales_oemlicences_arr_rel_insert_input"] | null,
	notes?:string | null,
	partner?:ValueTypes["vectric_oem_partners_obj_rel_insert_input"] | null,
	partnerId?:ValueTypes["bigint"] | null,
	product?:ValueTypes["bigint"] | null,
	productDisplayName?:string | null,
	registrationDate?:ValueTypes["timestamptz"] | null,
	typeDisplayName?:string | null
};
	/** order by max() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_max_order_by"]: {
	allocatedBy?:ValueTypes["order_by"] | null,
	allocationBatch?:ValueTypes["order_by"] | null,
	allocationTypeId?:ValueTypes["order_by"] | null,
	bundleId?:ValueTypes["order_by"] | null,
	dateAllocated?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	notes?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null,
	productDisplayName?:ValueTypes["order_by"] | null,
	registrationDate?:ValueTypes["order_by"] | null,
	typeDisplayName?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_min_order_by"]: {
	allocatedBy?:ValueTypes["order_by"] | null,
	allocationBatch?:ValueTypes["order_by"] | null,
	allocationTypeId?:ValueTypes["order_by"] | null,
	bundleId?:ValueTypes["order_by"] | null,
	dateAllocated?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	notes?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null,
	productDisplayName?:ValueTypes["order_by"] | null,
	registrationDate?:ValueTypes["order_by"] | null,
	typeDisplayName?:ValueTypes["order_by"] | null
};
	/** input type for inserting object relation for remote table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_sales_oem_bundles_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_oem_bundles_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_on_conflict"]: {
	constraint:ValueTypes["vectric_sales_oem_bundles_constraint"],
	update_columns:ValueTypes["vectric_sales_oem_bundles_update_column"][],
	where?:ValueTypes["vectric_sales_oem_bundles_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.sales_oem_bundles". */
["vectric_sales_oem_bundles_order_by"]: {
	allocatedBy?:ValueTypes["order_by"] | null,
	allocationBatch?:ValueTypes["order_by"] | null,
	allocationType?:ValueTypes["vectric_oem_licence_allocation_type_order_by"] | null,
	allocationTypeId?:ValueTypes["order_by"] | null,
	bundleId?:ValueTypes["order_by"] | null,
	dateAllocated?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	licences_aggregate?:ValueTypes["vectric_sales_oemlicences_aggregate_order_by"] | null,
	notes?:ValueTypes["order_by"] | null,
	partner?:ValueTypes["vectric_oem_partners_order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null,
	productDisplayName?:ValueTypes["order_by"] | null,
	registrationDate?:ValueTypes["order_by"] | null,
	typeDisplayName?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_sales_oem_bundles */
["vectric_sales_oem_bundles_pk_columns_input"]: {
	bundleId:string
};
	/** input type for updating data in table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_set_input"]: {
	allocatedBy?:string | null,
	allocationBatch?:string | null,
	allocationTypeId?:ValueTypes["bigint"] | null,
	bundleId?:string | null,
	dateAllocated?:ValueTypes["timestamptz"] | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	notes?:string | null,
	partnerId?:ValueTypes["bigint"] | null,
	product?:ValueTypes["bigint"] | null,
	productDisplayName?:string | null,
	registrationDate?:ValueTypes["timestamptz"] | null,
	typeDisplayName?:string | null
};
	/** order by stddev() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_stddev_order_by"]: {
	allocationTypeId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_stddev_pop_order_by"]: {
	allocationTypeId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_stddev_samp_order_by"]: {
	allocationTypeId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_sum_order_by"]: {
	allocationTypeId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_var_pop_order_by"]: {
	allocationTypeId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_var_samp_order_by"]: {
	allocationTypeId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_variance_order_by"]: {
	allocationTypeId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["order_by"] | null
};
	/** order by aggregate values of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_sales_oemlicences_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_sales_oemlicences_max_order_by"] | null,
	min?:ValueTypes["vectric_sales_oemlicences_min_order_by"] | null,
	stddev?:ValueTypes["vectric_sales_oemlicences_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_sales_oemlicences_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_sales_oemlicences_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_sales_oemlicences_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_sales_oemlicences_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_sales_oemlicences_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_sales_oemlicences_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_sales_oemlicences_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_oemlicences_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_avg_order_by"]: {
	allocationTypeId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	saleItemId?:ValueTypes["order_by"] | null,
	version?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.sales_oemlicences". All fields are combined with a logical 'AND'. */
["vectric_sales_oemlicences_bool_exp"]: {
	_and?:ValueTypes["vectric_sales_oemlicences_bool_exp"][],
	_not?:ValueTypes["vectric_sales_oemlicences_bool_exp"] | null,
	_or?:ValueTypes["vectric_sales_oemlicences_bool_exp"][],
	allocatedBy?:ValueTypes["String_comparison_exp"] | null,
	allocationType?:ValueTypes["vectric_oem_licence_allocation_type_bool_exp"] | null,
	allocationTypeId?:ValueTypes["bigint_comparison_exp"] | null,
	dateAllocated?:ValueTypes["timestamptz_comparison_exp"] | null,
	dateCreated?:ValueTypes["timestamptz_comparison_exp"] | null,
	disabled?:ValueTypes["Boolean_comparison_exp"] | null,
	licenceCode?:ValueTypes["String_comparison_exp"] | null,
	licenceLogRows?:ValueTypes["vectric_licence_log_bool_exp"] | null,
	mediaProvided?:ValueTypes["Boolean_comparison_exp"] | null,
	oemBundleId?:ValueTypes["String_comparison_exp"] | null,
	oemLicenceId?:ValueTypes["bigint_comparison_exp"] | null,
	orderItemProductId?:ValueTypes["bigint_comparison_exp"] | null,
	partner?:ValueTypes["vectric_oem_partners_bool_exp"] | null,
	partnerId?:ValueTypes["bigint_comparison_exp"] | null,
	productId?:ValueTypes["bigint_comparison_exp"] | null,
	productName?:ValueTypes["String_comparison_exp"] | null,
	registrationDate?:ValueTypes["timestamptz_comparison_exp"] | null,
	saleItemId?:ValueTypes["bigint_comparison_exp"] | null,
	version?:ValueTypes["smallint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_inc_input"]: {
	allocationTypeId?:ValueTypes["bigint"] | null,
	oemLicenceId?:ValueTypes["bigint"] | null,
	orderItemProductId?:ValueTypes["bigint"] | null,
	partnerId?:ValueTypes["bigint"] | null,
	productId?:ValueTypes["bigint"] | null,
	saleItemId?:ValueTypes["bigint"] | null,
	version?:ValueTypes["smallint"] | null
};
	/** input type for inserting data into table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_insert_input"]: {
	allocatedBy?:string | null,
	allocationType?:ValueTypes["vectric_oem_licence_allocation_type_obj_rel_insert_input"] | null,
	allocationTypeId?:ValueTypes["bigint"] | null,
	dateAllocated?:ValueTypes["timestamptz"] | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	disabled?:boolean | null,
	licenceCode?:string | null,
	licenceLogRows?:ValueTypes["vectric_licence_log_arr_rel_insert_input"] | null,
	mediaProvided?:boolean | null,
	oemBundleId?:string | null,
	oemLicenceId?:ValueTypes["bigint"] | null,
	orderItemProductId?:ValueTypes["bigint"] | null,
	partner?:ValueTypes["vectric_oem_partners_obj_rel_insert_input"] | null,
	partnerId?:ValueTypes["bigint"] | null,
	productId?:ValueTypes["bigint"] | null,
	productName?:string | null,
	registrationDate?:ValueTypes["timestamptz"] | null,
	saleItemId?:ValueTypes["bigint"] | null,
	version?:ValueTypes["smallint"] | null
};
	/** order by max() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_max_order_by"]: {
	allocatedBy?:ValueTypes["order_by"] | null,
	allocationTypeId?:ValueTypes["order_by"] | null,
	dateAllocated?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	licenceCode?:ValueTypes["order_by"] | null,
	oemBundleId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	productName?:ValueTypes["order_by"] | null,
	registrationDate?:ValueTypes["order_by"] | null,
	saleItemId?:ValueTypes["order_by"] | null,
	version?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_min_order_by"]: {
	allocatedBy?:ValueTypes["order_by"] | null,
	allocationTypeId?:ValueTypes["order_by"] | null,
	dateAllocated?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	licenceCode?:ValueTypes["order_by"] | null,
	oemBundleId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	productName?:ValueTypes["order_by"] | null,
	registrationDate?:ValueTypes["order_by"] | null,
	saleItemId?:ValueTypes["order_by"] | null,
	version?:ValueTypes["order_by"] | null
};
	/** on conflict condition type for table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_on_conflict"]: {
	constraint:ValueTypes["vectric_sales_oemlicences_constraint"],
	update_columns:ValueTypes["vectric_sales_oemlicences_update_column"][],
	where?:ValueTypes["vectric_sales_oemlicences_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.sales_oemlicences". */
["vectric_sales_oemlicences_order_by"]: {
	allocatedBy?:ValueTypes["order_by"] | null,
	allocationType?:ValueTypes["vectric_oem_licence_allocation_type_order_by"] | null,
	allocationTypeId?:ValueTypes["order_by"] | null,
	dateAllocated?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	disabled?:ValueTypes["order_by"] | null,
	licenceCode?:ValueTypes["order_by"] | null,
	licenceLogRows_aggregate?:ValueTypes["vectric_licence_log_aggregate_order_by"] | null,
	mediaProvided?:ValueTypes["order_by"] | null,
	oemBundleId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	partner?:ValueTypes["vectric_oem_partners_order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	productName?:ValueTypes["order_by"] | null,
	registrationDate?:ValueTypes["order_by"] | null,
	saleItemId?:ValueTypes["order_by"] | null,
	version?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_sales_oemlicences */
["vectric_sales_oemlicences_pk_columns_input"]: {
	oemLicenceId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_set_input"]: {
	allocatedBy?:string | null,
	allocationTypeId?:ValueTypes["bigint"] | null,
	dateAllocated?:ValueTypes["timestamptz"] | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	disabled?:boolean | null,
	licenceCode?:string | null,
	mediaProvided?:boolean | null,
	oemBundleId?:string | null,
	oemLicenceId?:ValueTypes["bigint"] | null,
	orderItemProductId?:ValueTypes["bigint"] | null,
	partnerId?:ValueTypes["bigint"] | null,
	productId?:ValueTypes["bigint"] | null,
	productName?:string | null,
	registrationDate?:ValueTypes["timestamptz"] | null,
	saleItemId?:ValueTypes["bigint"] | null,
	version?:ValueTypes["smallint"] | null
};
	/** order by stddev() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_stddev_order_by"]: {
	allocationTypeId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	saleItemId?:ValueTypes["order_by"] | null,
	version?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_stddev_pop_order_by"]: {
	allocationTypeId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	saleItemId?:ValueTypes["order_by"] | null,
	version?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_stddev_samp_order_by"]: {
	allocationTypeId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	saleItemId?:ValueTypes["order_by"] | null,
	version?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_sum_order_by"]: {
	allocationTypeId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	saleItemId?:ValueTypes["order_by"] | null,
	version?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_var_pop_order_by"]: {
	allocationTypeId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	saleItemId?:ValueTypes["order_by"] | null,
	version?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_var_samp_order_by"]: {
	allocationTypeId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	saleItemId?:ValueTypes["order_by"] | null,
	version?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_variance_order_by"]: {
	allocationTypeId?:ValueTypes["order_by"] | null,
	oemLicenceId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	partnerId?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	saleItemId?:ValueTypes["order_by"] | null,
	version?:ValueTypes["order_by"] | null
};
	/** order by aggregate values of table "vectric.sales_orders" */
["vectric_sales_orders_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_sales_orders_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_sales_orders_max_order_by"] | null,
	min?:ValueTypes["vectric_sales_orders_min_order_by"] | null,
	stddev?:ValueTypes["vectric_sales_orders_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_sales_orders_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_sales_orders_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_sales_orders_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_sales_orders_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_sales_orders_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_sales_orders_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.sales_orders" */
["vectric_sales_orders_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_sales_orders_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_orders_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_avg_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	mergedfromcustomerid?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.sales_orders". All fields are combined with a logical 'AND'. */
["vectric_sales_orders_bool_exp"]: {
	_and?:ValueTypes["vectric_sales_orders_bool_exp"][],
	_not?:ValueTypes["vectric_sales_orders_bool_exp"] | null,
	_or?:ValueTypes["vectric_sales_orders_bool_exp"][],
	amendedby?:ValueTypes["String_comparison_exp"] | null,
	createdby?:ValueTypes["String_comparison_exp"] | null,
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	dateCreated?:ValueTypes["timestamptz_comparison_exp"] | null,
	dateamended?:ValueTypes["timestamptz_comparison_exp"] | null,
	mergedfromcustomerid?:ValueTypes["bigint_comparison_exp"] | null,
	orderDate?:ValueTypes["timestamptz_comparison_exp"] | null,
	orderId?:ValueTypes["String_comparison_exp"] | null,
	purchaser?:ValueTypes["String_comparison_exp"] | null,
	registrationemailsent?:ValueTypes["date_comparison_exp"] | null,
	salenote?:ValueTypes["String_comparison_exp"] | null,
	salesItems?:ValueTypes["vectric_sales_salesitems_bool_exp"] | null,
	sales_customer?:ValueTypes["vectric_sales_customers_bool_exp"] | null,
	salesdetails?:ValueTypes["String_comparison_exp"] | null,
	salesummary?:ValueTypes["String_comparison_exp"] | null,
	validationcomments?:ValueTypes["String_comparison_exp"] | null,
	veccode?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.sales_orders" */
["vectric_sales_orders_inc_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	mergedfromcustomerid?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.sales_orders" */
["vectric_sales_orders_insert_input"]: {
	amendedby?:string | null,
	createdby?:string | null,
	customerId?:ValueTypes["bigint"] | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	dateamended?:ValueTypes["timestamptz"] | null,
	mergedfromcustomerid?:ValueTypes["bigint"] | null,
	orderDate?:ValueTypes["timestamptz"] | null,
	orderId?:string | null,
	purchaser?:string | null,
	registrationemailsent?:ValueTypes["date"] | null,
	salenote?:string | null,
	salesItems?:ValueTypes["vectric_sales_salesitems_arr_rel_insert_input"] | null,
	sales_customer?:ValueTypes["vectric_sales_customers_obj_rel_insert_input"] | null,
	salesdetails?:string | null,
	salesummary?:string | null,
	validationcomments?:string | null,
	veccode?:string | null
};
	/** order by max() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_max_order_by"]: {
	amendedby?:ValueTypes["order_by"] | null,
	createdby?:ValueTypes["order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	dateamended?:ValueTypes["order_by"] | null,
	mergedfromcustomerid?:ValueTypes["order_by"] | null,
	orderDate?:ValueTypes["order_by"] | null,
	orderId?:ValueTypes["order_by"] | null,
	purchaser?:ValueTypes["order_by"] | null,
	registrationemailsent?:ValueTypes["order_by"] | null,
	salenote?:ValueTypes["order_by"] | null,
	salesdetails?:ValueTypes["order_by"] | null,
	salesummary?:ValueTypes["order_by"] | null,
	validationcomments?:ValueTypes["order_by"] | null,
	veccode?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_min_order_by"]: {
	amendedby?:ValueTypes["order_by"] | null,
	createdby?:ValueTypes["order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	dateamended?:ValueTypes["order_by"] | null,
	mergedfromcustomerid?:ValueTypes["order_by"] | null,
	orderDate?:ValueTypes["order_by"] | null,
	orderId?:ValueTypes["order_by"] | null,
	purchaser?:ValueTypes["order_by"] | null,
	registrationemailsent?:ValueTypes["order_by"] | null,
	salenote?:ValueTypes["order_by"] | null,
	salesdetails?:ValueTypes["order_by"] | null,
	salesummary?:ValueTypes["order_by"] | null,
	validationcomments?:ValueTypes["order_by"] | null,
	veccode?:ValueTypes["order_by"] | null
};
	/** input type for inserting object relation for remote table "vectric.sales_orders" */
["vectric_sales_orders_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_sales_orders_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_orders_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.sales_orders" */
["vectric_sales_orders_on_conflict"]: {
	constraint:ValueTypes["vectric_sales_orders_constraint"],
	update_columns:ValueTypes["vectric_sales_orders_update_column"][],
	where?:ValueTypes["vectric_sales_orders_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.sales_orders". */
["vectric_sales_orders_order_by"]: {
	amendedby?:ValueTypes["order_by"] | null,
	createdby?:ValueTypes["order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	dateamended?:ValueTypes["order_by"] | null,
	mergedfromcustomerid?:ValueTypes["order_by"] | null,
	orderDate?:ValueTypes["order_by"] | null,
	orderId?:ValueTypes["order_by"] | null,
	purchaser?:ValueTypes["order_by"] | null,
	registrationemailsent?:ValueTypes["order_by"] | null,
	salenote?:ValueTypes["order_by"] | null,
	salesItems_aggregate?:ValueTypes["vectric_sales_salesitems_aggregate_order_by"] | null,
	sales_customer?:ValueTypes["vectric_sales_customers_order_by"] | null,
	salesdetails?:ValueTypes["order_by"] | null,
	salesummary?:ValueTypes["order_by"] | null,
	validationcomments?:ValueTypes["order_by"] | null,
	veccode?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_sales_orders */
["vectric_sales_orders_pk_columns_input"]: {
	orderId:string
};
	/** input type for updating data in table "vectric.sales_orders" */
["vectric_sales_orders_set_input"]: {
	amendedby?:string | null,
	createdby?:string | null,
	customerId?:ValueTypes["bigint"] | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	dateamended?:ValueTypes["timestamptz"] | null,
	mergedfromcustomerid?:ValueTypes["bigint"] | null,
	orderDate?:ValueTypes["timestamptz"] | null,
	orderId?:string | null,
	purchaser?:string | null,
	registrationemailsent?:ValueTypes["date"] | null,
	salenote?:string | null,
	salesdetails?:string | null,
	salesummary?:string | null,
	validationcomments?:string | null,
	veccode?:string | null
};
	/** order by stddev() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_stddev_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	mergedfromcustomerid?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_stddev_pop_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	mergedfromcustomerid?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_stddev_samp_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	mergedfromcustomerid?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_sum_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	mergedfromcustomerid?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_var_pop_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	mergedfromcustomerid?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_var_samp_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	mergedfromcustomerid?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_variance_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	mergedfromcustomerid?:ValueTypes["order_by"] | null
};
	/** order by aggregate values of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_sales_salesitem_products_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_sales_salesitem_products_max_order_by"] | null,
	min?:ValueTypes["vectric_sales_salesitem_products_min_order_by"] | null,
	stddev?:ValueTypes["vectric_sales_salesitem_products_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_sales_salesitem_products_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_sales_salesitem_products_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_sales_salesitem_products_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_sales_salesitem_products_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_sales_salesitem_products_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_sales_salesitem_products_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_sales_salesitem_products_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_salesitem_products_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_avg_order_by"]: {
	enhances?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	salesItemProductId?:ValueTypes["order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null,
	transfersalesitem?:ValueTypes["order_by"] | null,
	upgradesalesitem?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.sales_salesitem_products". All fields are combined with a logical 'AND'. */
["vectric_sales_salesitem_products_bool_exp"]: {
	_and?:ValueTypes["vectric_sales_salesitem_products_bool_exp"][],
	_not?:ValueTypes["vectric_sales_salesitem_products_bool_exp"] | null,
	_or?:ValueTypes["vectric_sales_salesitem_products_bool_exp"][],
	addOns?:ValueTypes["vectric_sales_salesitem_products_bool_exp"] | null,
	amended?:ValueTypes["timestamptz_comparison_exp"] | null,
	amendedby?:ValueTypes["String_comparison_exp"] | null,
	emailsubject?:ValueTypes["String_comparison_exp"] | null,
	enhanceSalesItemProduct?:ValueTypes["vectric_sales_salesitem_products_bool_exp"] | null,
	enhancementTokens?:ValueTypes["vectric_enhancement_tokens_bool_exp"] | null,
	enhances?:ValueTypes["bigint_comparison_exp"] | null,
	freeClipartTokens?:ValueTypes["vectric_free_clipart_tokens_bool_exp"] | null,
	licenceCode?:ValueTypes["String_comparison_exp"] | null,
	licenceIdAsDisplay?:ValueTypes["Boolean_comparison_exp"] | null,
	licenceType?:ValueTypes["String_comparison_exp"] | null,
	oembundleid?:ValueTypes["String_comparison_exp"] | null,
	product?:ValueTypes["vectric_products_products_bool_exp"] | null,
	productId?:ValueTypes["bigint_comparison_exp"] | null,
	registeredUsername?:ValueTypes["String_comparison_exp"] | null,
	resentdate?:ValueTypes["timestamptz_comparison_exp"] | null,
	salesItem?:ValueTypes["vectric_sales_salesitems_bool_exp"] | null,
	salesItemProductId?:ValueTypes["bigint_comparison_exp"] | null,
	salesItemProductStatus?:ValueTypes["vectric_sales_salesitemproduct_status_bool_exp"] | null,
	salesitemid?:ValueTypes["bigint_comparison_exp"] | null,
	status?:ValueTypes["bigint_comparison_exp"] | null,
	transfersalesitem?:ValueTypes["bigint_comparison_exp"] | null,
	upgradeTokens?:ValueTypes["vectric_upgrade_tokens_bool_exp"] | null,
	upgradesalesitem?:ValueTypes["bigint_comparison_exp"] | null,
	versioncodeid?:ValueTypes["bigint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_inc_input"]: {
	enhances?:ValueTypes["bigint"] | null,
	productId?:ValueTypes["bigint"] | null,
	salesItemProductId?:ValueTypes["bigint"] | null,
	salesitemid?:ValueTypes["bigint"] | null,
	status?:ValueTypes["bigint"] | null,
	transfersalesitem?:ValueTypes["bigint"] | null,
	upgradesalesitem?:ValueTypes["bigint"] | null,
	versioncodeid?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_insert_input"]: {
	addOns?:ValueTypes["vectric_sales_salesitem_products_arr_rel_insert_input"] | null,
	amended?:ValueTypes["timestamptz"] | null,
	amendedby?:string | null,
	emailsubject?:string | null,
	enhanceSalesItemProduct?:ValueTypes["vectric_sales_salesitem_products_obj_rel_insert_input"] | null,
	enhancementTokens?:ValueTypes["vectric_enhancement_tokens_arr_rel_insert_input"] | null,
	enhances?:ValueTypes["bigint"] | null,
	freeClipartTokens?:ValueTypes["vectric_free_clipart_tokens_arr_rel_insert_input"] | null,
	licenceCode?:string | null,
	licenceIdAsDisplay?:boolean | null,
	licenceType?:string | null,
	oembundleid?:string | null,
	product?:ValueTypes["vectric_products_products_obj_rel_insert_input"] | null,
	productId?:ValueTypes["bigint"] | null,
	registeredUsername?:string | null,
	resentdate?:ValueTypes["timestamptz"] | null,
	salesItem?:ValueTypes["vectric_sales_salesitems_obj_rel_insert_input"] | null,
	salesItemProductId?:ValueTypes["bigint"] | null,
	salesItemProductStatus?:ValueTypes["vectric_sales_salesitemproduct_status_obj_rel_insert_input"] | null,
	salesitemid?:ValueTypes["bigint"] | null,
	status?:ValueTypes["bigint"] | null,
	transfersalesitem?:ValueTypes["bigint"] | null,
	upgradeTokens?:ValueTypes["vectric_upgrade_tokens_arr_rel_insert_input"] | null,
	upgradesalesitem?:ValueTypes["bigint"] | null,
	versioncodeid?:ValueTypes["bigint"] | null
};
	/** order by max() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_max_order_by"]: {
	amended?:ValueTypes["order_by"] | null,
	amendedby?:ValueTypes["order_by"] | null,
	emailsubject?:ValueTypes["order_by"] | null,
	enhances?:ValueTypes["order_by"] | null,
	licenceCode?:ValueTypes["order_by"] | null,
	licenceType?:ValueTypes["order_by"] | null,
	oembundleid?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	registeredUsername?:ValueTypes["order_by"] | null,
	resentdate?:ValueTypes["order_by"] | null,
	salesItemProductId?:ValueTypes["order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null,
	transfersalesitem?:ValueTypes["order_by"] | null,
	upgradesalesitem?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_min_order_by"]: {
	amended?:ValueTypes["order_by"] | null,
	amendedby?:ValueTypes["order_by"] | null,
	emailsubject?:ValueTypes["order_by"] | null,
	enhances?:ValueTypes["order_by"] | null,
	licenceCode?:ValueTypes["order_by"] | null,
	licenceType?:ValueTypes["order_by"] | null,
	oembundleid?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	registeredUsername?:ValueTypes["order_by"] | null,
	resentdate?:ValueTypes["order_by"] | null,
	salesItemProductId?:ValueTypes["order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null,
	transfersalesitem?:ValueTypes["order_by"] | null,
	upgradesalesitem?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null
};
	/** input type for inserting object relation for remote table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_sales_salesitem_products_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_salesitem_products_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_on_conflict"]: {
	constraint:ValueTypes["vectric_sales_salesitem_products_constraint"],
	update_columns:ValueTypes["vectric_sales_salesitem_products_update_column"][],
	where?:ValueTypes["vectric_sales_salesitem_products_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.sales_salesitem_products". */
["vectric_sales_salesitem_products_order_by"]: {
	addOns_aggregate?:ValueTypes["vectric_sales_salesitem_products_aggregate_order_by"] | null,
	amended?:ValueTypes["order_by"] | null,
	amendedby?:ValueTypes["order_by"] | null,
	emailsubject?:ValueTypes["order_by"] | null,
	enhanceSalesItemProduct?:ValueTypes["vectric_sales_salesitem_products_order_by"] | null,
	enhancementTokens_aggregate?:ValueTypes["vectric_enhancement_tokens_aggregate_order_by"] | null,
	enhances?:ValueTypes["order_by"] | null,
	freeClipartTokens_aggregate?:ValueTypes["vectric_free_clipart_tokens_aggregate_order_by"] | null,
	licenceCode?:ValueTypes["order_by"] | null,
	licenceIdAsDisplay?:ValueTypes["order_by"] | null,
	licenceType?:ValueTypes["order_by"] | null,
	oembundleid?:ValueTypes["order_by"] | null,
	product?:ValueTypes["vectric_products_products_order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	registeredUsername?:ValueTypes["order_by"] | null,
	resentdate?:ValueTypes["order_by"] | null,
	salesItem?:ValueTypes["vectric_sales_salesitems_order_by"] | null,
	salesItemProductId?:ValueTypes["order_by"] | null,
	salesItemProductStatus?:ValueTypes["vectric_sales_salesitemproduct_status_order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null,
	transfersalesitem?:ValueTypes["order_by"] | null,
	upgradeTokens_aggregate?:ValueTypes["vectric_upgrade_tokens_aggregate_order_by"] | null,
	upgradesalesitem?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_sales_salesitem_products */
["vectric_sales_salesitem_products_pk_columns_input"]: {
	salesItemProductId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_set_input"]: {
	amended?:ValueTypes["timestamptz"] | null,
	amendedby?:string | null,
	emailsubject?:string | null,
	enhances?:ValueTypes["bigint"] | null,
	licenceCode?:string | null,
	licenceIdAsDisplay?:boolean | null,
	licenceType?:string | null,
	oembundleid?:string | null,
	productId?:ValueTypes["bigint"] | null,
	registeredUsername?:string | null,
	resentdate?:ValueTypes["timestamptz"] | null,
	salesItemProductId?:ValueTypes["bigint"] | null,
	salesitemid?:ValueTypes["bigint"] | null,
	status?:ValueTypes["bigint"] | null,
	transfersalesitem?:ValueTypes["bigint"] | null,
	upgradesalesitem?:ValueTypes["bigint"] | null,
	versioncodeid?:ValueTypes["bigint"] | null
};
	/** order by stddev() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_stddev_order_by"]: {
	enhances?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	salesItemProductId?:ValueTypes["order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null,
	transfersalesitem?:ValueTypes["order_by"] | null,
	upgradesalesitem?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_stddev_pop_order_by"]: {
	enhances?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	salesItemProductId?:ValueTypes["order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null,
	transfersalesitem?:ValueTypes["order_by"] | null,
	upgradesalesitem?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_stddev_samp_order_by"]: {
	enhances?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	salesItemProductId?:ValueTypes["order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null,
	transfersalesitem?:ValueTypes["order_by"] | null,
	upgradesalesitem?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_sum_order_by"]: {
	enhances?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	salesItemProductId?:ValueTypes["order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null,
	transfersalesitem?:ValueTypes["order_by"] | null,
	upgradesalesitem?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_var_pop_order_by"]: {
	enhances?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	salesItemProductId?:ValueTypes["order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null,
	transfersalesitem?:ValueTypes["order_by"] | null,
	upgradesalesitem?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_var_samp_order_by"]: {
	enhances?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	salesItemProductId?:ValueTypes["order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null,
	transfersalesitem?:ValueTypes["order_by"] | null,
	upgradesalesitem?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_variance_order_by"]: {
	enhances?:ValueTypes["order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	salesItemProductId?:ValueTypes["order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null,
	transfersalesitem?:ValueTypes["order_by"] | null,
	upgradesalesitem?:ValueTypes["order_by"] | null,
	versioncodeid?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.sales_salesitemproduct_status". All fields are combined with a logical 'AND'. */
["vectric_sales_salesitemproduct_status_bool_exp"]: {
	_and?:ValueTypes["vectric_sales_salesitemproduct_status_bool_exp"][],
	_not?:ValueTypes["vectric_sales_salesitemproduct_status_bool_exp"] | null,
	_or?:ValueTypes["vectric_sales_salesitemproduct_status_bool_exp"][],
	status?:ValueTypes["String_comparison_exp"] | null,
	statusid?:ValueTypes["bigint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_inc_input"]: {
	statusid?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_insert_input"]: {
	status?:string | null,
	statusid?:ValueTypes["bigint"] | null
};
	/** input type for inserting object relation for remote table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_sales_salesitemproduct_status_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_salesitemproduct_status_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_on_conflict"]: {
	constraint:ValueTypes["vectric_sales_salesitemproduct_status_constraint"],
	update_columns:ValueTypes["vectric_sales_salesitemproduct_status_update_column"][],
	where?:ValueTypes["vectric_sales_salesitemproduct_status_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.sales_salesitemproduct_status". */
["vectric_sales_salesitemproduct_status_order_by"]: {
	status?:ValueTypes["order_by"] | null,
	statusid?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_sales_salesitemproduct_status */
["vectric_sales_salesitemproduct_status_pk_columns_input"]: {
	statusid:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_set_input"]: {
	status?:string | null,
	statusid?:ValueTypes["bigint"] | null
};
	/** order by aggregate values of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_sales_salesitems_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_sales_salesitems_max_order_by"] | null,
	min?:ValueTypes["vectric_sales_salesitems_min_order_by"] | null,
	stddev?:ValueTypes["vectric_sales_salesitems_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_sales_salesitems_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_sales_salesitems_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_sales_salesitems_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_sales_salesitems_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_sales_salesitems_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_sales_salesitems_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.sales_salesitems" */
["vectric_sales_salesitems_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_sales_salesitems_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_salesitems_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_avg_order_by"]: {
	productid?:ValueTypes["order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.sales_salesitems". All fields are combined with a logical 'AND'. */
["vectric_sales_salesitems_bool_exp"]: {
	_and?:ValueTypes["vectric_sales_salesitems_bool_exp"][],
	_not?:ValueTypes["vectric_sales_salesitems_bool_exp"] | null,
	_or?:ValueTypes["vectric_sales_salesitems_bool_exp"][],
	amendedby?:ValueTypes["String_comparison_exp"] | null,
	customerSale?:ValueTypes["vectric_customer_sales_bool_exp"] | null,
	dateamended?:ValueTypes["timestamptz_comparison_exp"] | null,
	orderid?:ValueTypes["String_comparison_exp"] | null,
	product?:ValueTypes["vectric_products_products_bool_exp"] | null,
	productid?:ValueTypes["bigint_comparison_exp"] | null,
	salesItemProducts?:ValueTypes["vectric_sales_salesitem_products_bool_exp"] | null,
	sales_order?:ValueTypes["vectric_sales_orders_bool_exp"] | null,
	salesitemid?:ValueTypes["bigint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.sales_salesitems" */
["vectric_sales_salesitems_inc_input"]: {
	productid?:ValueTypes["bigint"] | null,
	salesitemid?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.sales_salesitems" */
["vectric_sales_salesitems_insert_input"]: {
	amendedby?:string | null,
	customerSale?:ValueTypes["vectric_customer_sales_obj_rel_insert_input"] | null,
	dateamended?:ValueTypes["timestamptz"] | null,
	orderid?:string | null,
	product?:ValueTypes["vectric_products_products_obj_rel_insert_input"] | null,
	productid?:ValueTypes["bigint"] | null,
	salesItemProducts?:ValueTypes["vectric_sales_salesitem_products_arr_rel_insert_input"] | null,
	sales_order?:ValueTypes["vectric_sales_orders_obj_rel_insert_input"] | null,
	salesitemid?:ValueTypes["bigint"] | null
};
	/** order by max() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_max_order_by"]: {
	amendedby?:ValueTypes["order_by"] | null,
	dateamended?:ValueTypes["order_by"] | null,
	orderid?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_min_order_by"]: {
	amendedby?:ValueTypes["order_by"] | null,
	dateamended?:ValueTypes["order_by"] | null,
	orderid?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null
};
	/** input type for inserting object relation for remote table "vectric.sales_salesitems" */
["vectric_sales_salesitems_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_sales_salesitems_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_sales_salesitems_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.sales_salesitems" */
["vectric_sales_salesitems_on_conflict"]: {
	constraint:ValueTypes["vectric_sales_salesitems_constraint"],
	update_columns:ValueTypes["vectric_sales_salesitems_update_column"][],
	where?:ValueTypes["vectric_sales_salesitems_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.sales_salesitems". */
["vectric_sales_salesitems_order_by"]: {
	amendedby?:ValueTypes["order_by"] | null,
	customerSale?:ValueTypes["vectric_customer_sales_order_by"] | null,
	dateamended?:ValueTypes["order_by"] | null,
	orderid?:ValueTypes["order_by"] | null,
	product?:ValueTypes["vectric_products_products_order_by"] | null,
	productid?:ValueTypes["order_by"] | null,
	salesItemProducts_aggregate?:ValueTypes["vectric_sales_salesitem_products_aggregate_order_by"] | null,
	sales_order?:ValueTypes["vectric_sales_orders_order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_sales_salesitems */
["vectric_sales_salesitems_pk_columns_input"]: {
	salesitemid:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.sales_salesitems" */
["vectric_sales_salesitems_set_input"]: {
	amendedby?:string | null,
	dateamended?:ValueTypes["timestamptz"] | null,
	orderid?:string | null,
	productid?:ValueTypes["bigint"] | null,
	salesitemid?:ValueTypes["bigint"] | null
};
	/** order by stddev() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_stddev_order_by"]: {
	productid?:ValueTypes["order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_stddev_pop_order_by"]: {
	productid?:ValueTypes["order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_stddev_samp_order_by"]: {
	productid?:ValueTypes["order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_sum_order_by"]: {
	productid?:ValueTypes["order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_var_pop_order_by"]: {
	productid?:ValueTypes["order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_var_samp_order_by"]: {
	productid?:ValueTypes["order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_variance_order_by"]: {
	productid?:ValueTypes["order_by"] | null,
	salesitemid?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.sales_velocitytemplate". All fields are combined with a logical 'AND'. */
["vectric_sales_velocitytemplate_bool_exp"]: {
	_and?:ValueTypes["vectric_sales_velocitytemplate_bool_exp"][],
	_not?:ValueTypes["vectric_sales_velocitytemplate_bool_exp"] | null,
	_or?:ValueTypes["vectric_sales_velocitytemplate_bool_exp"][],
	lang?:ValueTypes["String_comparison_exp"] | null,
	languageCode?:ValueTypes["vectric_language_codes_bool_exp"] | null,
	sender?:ValueTypes["String_comparison_exp"] | null,
	signedBy?:ValueTypes["String_comparison_exp"] | null,
	subject?:ValueTypes["String_comparison_exp"] | null,
	template?:ValueTypes["String_comparison_exp"] | null,
	templateName?:ValueTypes["String_comparison_exp"] | null,
	templateTimestamp?:ValueTypes["timestamptz_comparison_exp"] | null
};
	/** input type for inserting data into table "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_insert_input"]: {
	lang?:string | null,
	languageCode?:ValueTypes["vectric_language_codes_obj_rel_insert_input"] | null,
	sender?:string | null,
	signedBy?:string | null,
	subject?:string | null,
	template?:string | null,
	templateName?:string | null,
	templateTimestamp?:ValueTypes["timestamptz"] | null
};
	/** on conflict condition type for table "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_on_conflict"]: {
	constraint:ValueTypes["vectric_sales_velocitytemplate_constraint"],
	update_columns:ValueTypes["vectric_sales_velocitytemplate_update_column"][],
	where?:ValueTypes["vectric_sales_velocitytemplate_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.sales_velocitytemplate". */
["vectric_sales_velocitytemplate_order_by"]: {
	lang?:ValueTypes["order_by"] | null,
	languageCode?:ValueTypes["vectric_language_codes_order_by"] | null,
	sender?:ValueTypes["order_by"] | null,
	signedBy?:ValueTypes["order_by"] | null,
	subject?:ValueTypes["order_by"] | null,
	template?:ValueTypes["order_by"] | null,
	templateName?:ValueTypes["order_by"] | null,
	templateTimestamp?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_sales_velocitytemplate */
["vectric_sales_velocitytemplate_pk_columns_input"]: {
	templateName:string
};
	/** input type for updating data in table "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_set_input"]: {
	lang?:string | null,
	sender?:string | null,
	signedBy?:string | null,
	subject?:string | null,
	template?:string | null,
	templateName?:string | null,
	templateTimestamp?:ValueTypes["timestamptz"] | null
};
	/** Boolean expression to filter rows from the table "vectric.scheduled_emails". All fields are combined with a logical 'AND'. */
["vectric_scheduled_emails_bool_exp"]: {
	_and?:ValueTypes["vectric_scheduled_emails_bool_exp"][],
	_not?:ValueTypes["vectric_scheduled_emails_bool_exp"] | null,
	_or?:ValueTypes["vectric_scheduled_emails_bool_exp"][],
	createdOn?:ValueTypes["timestamp_comparison_exp"] | null,
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	id?:ValueTypes["Int_comparison_exp"] | null,
	processed?:ValueTypes["Boolean_comparison_exp"] | null,
	processedOn?:ValueTypes["timestamp_comparison_exp"] | null,
	sendTo?:ValueTypes["String_comparison_exp"] | null,
	templateId?:ValueTypes["String_comparison_exp"] | null,
	variables?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.scheduled_emails" */
["vectric_scheduled_emails_inc_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	id?:number | null
};
	/** input type for inserting data into table "vectric.scheduled_emails" */
["vectric_scheduled_emails_insert_input"]: {
	createdOn?:ValueTypes["timestamp"] | null,
	customerId?:ValueTypes["bigint"] | null,
	id?:number | null,
	processed?:boolean | null,
	processedOn?:ValueTypes["timestamp"] | null,
	sendTo?:string | null,
	templateId?:string | null,
	variables?:string | null
};
	/** on conflict condition type for table "vectric.scheduled_emails" */
["vectric_scheduled_emails_on_conflict"]: {
	constraint:ValueTypes["vectric_scheduled_emails_constraint"],
	update_columns:ValueTypes["vectric_scheduled_emails_update_column"][],
	where?:ValueTypes["vectric_scheduled_emails_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.scheduled_emails". */
["vectric_scheduled_emails_order_by"]: {
	createdOn?:ValueTypes["order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	id?:ValueTypes["order_by"] | null,
	processed?:ValueTypes["order_by"] | null,
	processedOn?:ValueTypes["order_by"] | null,
	sendTo?:ValueTypes["order_by"] | null,
	templateId?:ValueTypes["order_by"] | null,
	variables?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_scheduled_emails */
["vectric_scheduled_emails_pk_columns_input"]: {
	id:number
};
	/** input type for updating data in table "vectric.scheduled_emails" */
["vectric_scheduled_emails_set_input"]: {
	createdOn?:ValueTypes["timestamp"] | null,
	customerId?:ValueTypes["bigint"] | null,
	id?:number | null,
	processed?:boolean | null,
	processedOn?:ValueTypes["timestamp"] | null,
	sendTo?:string | null,
	templateId?:string | null,
	variables?:string | null
};
	/** Boolean expression to filter rows from the table "vectric.security_emailverificationtokens". All fields are combined with a logical 'AND'. */
["vectric_security_emailverificationtokens_bool_exp"]: {
	_and?:ValueTypes["vectric_security_emailverificationtokens_bool_exp"][],
	_not?:ValueTypes["vectric_security_emailverificationtokens_bool_exp"] | null,
	_or?:ValueTypes["vectric_security_emailverificationtokens_bool_exp"][],
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	expiryDate?:ValueTypes["timestamptz_comparison_exp"] | null,
	token?:ValueTypes["String_comparison_exp"] | null,
	username?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_inc_input"]: {
	customerId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_insert_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	expiryDate?:ValueTypes["timestamptz"] | null,
	token?:string | null,
	username?:string | null
};
	/** on conflict condition type for table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_on_conflict"]: {
	constraint:ValueTypes["vectric_security_emailverificationtokens_constraint"],
	update_columns:ValueTypes["vectric_security_emailverificationtokens_update_column"][],
	where?:ValueTypes["vectric_security_emailverificationtokens_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.security_emailverificationtokens". */
["vectric_security_emailverificationtokens_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	expiryDate?:ValueTypes["order_by"] | null,
	token?:ValueTypes["order_by"] | null,
	username?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_security_emailverificationtokens */
["vectric_security_emailverificationtokens_pk_columns_input"]: {
	token:string
};
	/** input type for updating data in table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_set_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	expiryDate?:ValueTypes["timestamptz"] | null,
	token?:string | null,
	username?:string | null
};
	/** order by aggregate values of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_security_group_authorities_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_security_group_authorities_max_order_by"] | null,
	min?:ValueTypes["vectric_security_group_authorities_min_order_by"] | null,
	stddev?:ValueTypes["vectric_security_group_authorities_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_security_group_authorities_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_security_group_authorities_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_security_group_authorities_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_security_group_authorities_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_security_group_authorities_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_security_group_authorities_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.security_group_authorities" */
["vectric_security_group_authorities_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_security_group_authorities_insert_input"][]
};
	/** order by avg() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_avg_order_by"]: {
	groupId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.security_group_authorities". All fields are combined with a logical 'AND'. */
["vectric_security_group_authorities_bool_exp"]: {
	_and?:ValueTypes["vectric_security_group_authorities_bool_exp"][],
	_not?:ValueTypes["vectric_security_group_authorities_bool_exp"] | null,
	_or?:ValueTypes["vectric_security_group_authorities_bool_exp"][],
	authority?:ValueTypes["String_comparison_exp"] | null,
	groupId?:ValueTypes["bigint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.security_group_authorities" */
["vectric_security_group_authorities_inc_input"]: {
	groupId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.security_group_authorities" */
["vectric_security_group_authorities_insert_input"]: {
	authority?:string | null,
	groupId?:ValueTypes["bigint"] | null
};
	/** order by max() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_max_order_by"]: {
	authority?:ValueTypes["order_by"] | null,
	groupId?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_min_order_by"]: {
	authority?:ValueTypes["order_by"] | null,
	groupId?:ValueTypes["order_by"] | null
};
	/** Ordering options when selecting data from "vectric.security_group_authorities". */
["vectric_security_group_authorities_order_by"]: {
	authority?:ValueTypes["order_by"] | null,
	groupId?:ValueTypes["order_by"] | null
};
	/** input type for updating data in table "vectric.security_group_authorities" */
["vectric_security_group_authorities_set_input"]: {
	authority?:string | null,
	groupId?:ValueTypes["bigint"] | null
};
	/** order by stddev() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_stddev_order_by"]: {
	groupId?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_stddev_pop_order_by"]: {
	groupId?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_stddev_samp_order_by"]: {
	groupId?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_sum_order_by"]: {
	groupId?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_var_pop_order_by"]: {
	groupId?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_var_samp_order_by"]: {
	groupId?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_variance_order_by"]: {
	groupId?:ValueTypes["order_by"] | null
};
	/** order by aggregate values of table "vectric.security_group_members" */
["vectric_security_group_members_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_security_group_members_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_security_group_members_max_order_by"] | null,
	min?:ValueTypes["vectric_security_group_members_min_order_by"] | null,
	stddev?:ValueTypes["vectric_security_group_members_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_security_group_members_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_security_group_members_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_security_group_members_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_security_group_members_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_security_group_members_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_security_group_members_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.security_group_members" */
["vectric_security_group_members_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_security_group_members_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_security_group_members_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_avg_order_by"]: {
	groupId?:ValueTypes["order_by"] | null,
	id?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.security_group_members". All fields are combined with a logical 'AND'. */
["vectric_security_group_members_bool_exp"]: {
	_and?:ValueTypes["vectric_security_group_members_bool_exp"][],
	_not?:ValueTypes["vectric_security_group_members_bool_exp"] | null,
	_or?:ValueTypes["vectric_security_group_members_bool_exp"][],
	groupAuthorities?:ValueTypes["vectric_security_group_authorities_bool_exp"] | null,
	groupId?:ValueTypes["bigint_comparison_exp"] | null,
	id?:ValueTypes["bigint_comparison_exp"] | null,
	securityUser?:ValueTypes["vectric_security_users_bool_exp"] | null,
	username?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.security_group_members" */
["vectric_security_group_members_inc_input"]: {
	groupId?:ValueTypes["bigint"] | null,
	id?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.security_group_members" */
["vectric_security_group_members_insert_input"]: {
	groupAuthorities?:ValueTypes["vectric_security_group_authorities_arr_rel_insert_input"] | null,
	groupId?:ValueTypes["bigint"] | null,
	id?:ValueTypes["bigint"] | null,
	securityUser?:ValueTypes["vectric_security_users_obj_rel_insert_input"] | null,
	username?:string | null
};
	/** order by max() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_max_order_by"]: {
	groupId?:ValueTypes["order_by"] | null,
	id?:ValueTypes["order_by"] | null,
	username?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_min_order_by"]: {
	groupId?:ValueTypes["order_by"] | null,
	id?:ValueTypes["order_by"] | null,
	username?:ValueTypes["order_by"] | null
};
	/** on conflict condition type for table "vectric.security_group_members" */
["vectric_security_group_members_on_conflict"]: {
	constraint:ValueTypes["vectric_security_group_members_constraint"],
	update_columns:ValueTypes["vectric_security_group_members_update_column"][],
	where?:ValueTypes["vectric_security_group_members_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.security_group_members". */
["vectric_security_group_members_order_by"]: {
	groupAuthorities_aggregate?:ValueTypes["vectric_security_group_authorities_aggregate_order_by"] | null,
	groupId?:ValueTypes["order_by"] | null,
	id?:ValueTypes["order_by"] | null,
	securityUser?:ValueTypes["vectric_security_users_order_by"] | null,
	username?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_security_group_members */
["vectric_security_group_members_pk_columns_input"]: {
	id:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.security_group_members" */
["vectric_security_group_members_set_input"]: {
	groupId?:ValueTypes["bigint"] | null,
	id?:ValueTypes["bigint"] | null,
	username?:string | null
};
	/** order by stddev() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_stddev_order_by"]: {
	groupId?:ValueTypes["order_by"] | null,
	id?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_stddev_pop_order_by"]: {
	groupId?:ValueTypes["order_by"] | null,
	id?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_stddev_samp_order_by"]: {
	groupId?:ValueTypes["order_by"] | null,
	id?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_sum_order_by"]: {
	groupId?:ValueTypes["order_by"] | null,
	id?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_var_pop_order_by"]: {
	groupId?:ValueTypes["order_by"] | null,
	id?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_var_samp_order_by"]: {
	groupId?:ValueTypes["order_by"] | null,
	id?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_variance_order_by"]: {
	groupId?:ValueTypes["order_by"] | null,
	id?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.security_passwordresettokens". All fields are combined with a logical 'AND'. */
["vectric_security_passwordresettokens_bool_exp"]: {
	_and?:ValueTypes["vectric_security_passwordresettokens_bool_exp"][],
	_not?:ValueTypes["vectric_security_passwordresettokens_bool_exp"] | null,
	_or?:ValueTypes["vectric_security_passwordresettokens_bool_exp"][],
	expiryDate?:ValueTypes["timestamptz_comparison_exp"] | null,
	token?:ValueTypes["String_comparison_exp"] | null,
	username?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for inserting data into table "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_insert_input"]: {
	expiryDate?:ValueTypes["timestamptz"] | null,
	token?:string | null,
	username?:string | null
};
	/** on conflict condition type for table "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_on_conflict"]: {
	constraint:ValueTypes["vectric_security_passwordresettokens_constraint"],
	update_columns:ValueTypes["vectric_security_passwordresettokens_update_column"][],
	where?:ValueTypes["vectric_security_passwordresettokens_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.security_passwordresettokens". */
["vectric_security_passwordresettokens_order_by"]: {
	expiryDate?:ValueTypes["order_by"] | null,
	token?:ValueTypes["order_by"] | null,
	username?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_security_passwordresettokens */
["vectric_security_passwordresettokens_pk_columns_input"]: {
	token:string
};
	/** input type for updating data in table "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_set_input"]: {
	expiryDate?:ValueTypes["timestamptz"] | null,
	token?:string | null,
	username?:string | null
};
	/** Boolean expression to filter rows from the table "vectric.security_userinvitations". All fields are combined with a logical 'AND'. */
["vectric_security_userinvitations_bool_exp"]: {
	_and?:ValueTypes["vectric_security_userinvitations_bool_exp"][],
	_not?:ValueTypes["vectric_security_userinvitations_bool_exp"] | null,
	_or?:ValueTypes["vectric_security_userinvitations_bool_exp"][],
	acceptedDate?:ValueTypes["timestamptz_comparison_exp"] | null,
	adminofid?:ValueTypes["bigint_comparison_exp"] | null,
	createDate?:ValueTypes["timestamptz_comparison_exp"] | null,
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	expirydate?:ValueTypes["timestamptz_comparison_exp"] | null,
	staffofid?:ValueTypes["bigint_comparison_exp"] | null,
	token?:ValueTypes["String_comparison_exp"] | null,
	username?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.security_userinvitations" */
["vectric_security_userinvitations_inc_input"]: {
	adminofid?:ValueTypes["bigint"] | null,
	customerId?:ValueTypes["bigint"] | null,
	staffofid?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.security_userinvitations" */
["vectric_security_userinvitations_insert_input"]: {
	acceptedDate?:ValueTypes["timestamptz"] | null,
	adminofid?:ValueTypes["bigint"] | null,
	createDate?:ValueTypes["timestamptz"] | null,
	customerId?:ValueTypes["bigint"] | null,
	expirydate?:ValueTypes["timestamptz"] | null,
	staffofid?:ValueTypes["bigint"] | null,
	token?:string | null,
	username?:string | null
};
	/** on conflict condition type for table "vectric.security_userinvitations" */
["vectric_security_userinvitations_on_conflict"]: {
	constraint:ValueTypes["vectric_security_userinvitations_constraint"],
	update_columns:ValueTypes["vectric_security_userinvitations_update_column"][],
	where?:ValueTypes["vectric_security_userinvitations_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.security_userinvitations". */
["vectric_security_userinvitations_order_by"]: {
	acceptedDate?:ValueTypes["order_by"] | null,
	adminofid?:ValueTypes["order_by"] | null,
	createDate?:ValueTypes["order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	expirydate?:ValueTypes["order_by"] | null,
	staffofid?:ValueTypes["order_by"] | null,
	token?:ValueTypes["order_by"] | null,
	username?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_security_userinvitations */
["vectric_security_userinvitations_pk_columns_input"]: {
	token:string
};
	/** input type for updating data in table "vectric.security_userinvitations" */
["vectric_security_userinvitations_set_input"]: {
	acceptedDate?:ValueTypes["timestamptz"] | null,
	adminofid?:ValueTypes["bigint"] | null,
	createDate?:ValueTypes["timestamptz"] | null,
	customerId?:ValueTypes["bigint"] | null,
	expirydate?:ValueTypes["timestamptz"] | null,
	staffofid?:ValueTypes["bigint"] | null,
	token?:string | null,
	username?:string | null
};
	/** Boolean expression to filter rows from the table "vectric.security_users". All fields are combined with a logical 'AND'. */
["vectric_security_users_bool_exp"]: {
	_and?:ValueTypes["vectric_security_users_bool_exp"][],
	_not?:ValueTypes["vectric_security_users_bool_exp"] | null,
	_or?:ValueTypes["vectric_security_users_bool_exp"][],
	accountNonExpired?:ValueTypes["Boolean_comparison_exp"] | null,
	credentialsNonExpired?:ValueTypes["Boolean_comparison_exp"] | null,
	enabled?:ValueTypes["Boolean_comparison_exp"] | null,
	password?:ValueTypes["String_comparison_exp"] | null,
	salesCustomerId?:ValueTypes["bigint_comparison_exp"] | null,
	securityGroups?:ValueTypes["vectric_security_group_members_bool_exp"] | null,
	username?:ValueTypes["String_comparison_exp"] | null,
	voucherCode?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.security_users" */
["vectric_security_users_inc_input"]: {
	salesCustomerId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.security_users" */
["vectric_security_users_insert_input"]: {
	accountNonExpired?:boolean | null,
	credentialsNonExpired?:boolean | null,
	enabled?:boolean | null,
	password?:string | null,
	salesCustomerId?:ValueTypes["bigint"] | null,
	securityGroups?:ValueTypes["vectric_security_group_members_arr_rel_insert_input"] | null,
	username?:string | null,
	voucherCode?:string | null
};
	/** input type for inserting object relation for remote table "vectric.security_users" */
["vectric_security_users_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_security_users_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_security_users_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.security_users" */
["vectric_security_users_on_conflict"]: {
	constraint:ValueTypes["vectric_security_users_constraint"],
	update_columns:ValueTypes["vectric_security_users_update_column"][],
	where?:ValueTypes["vectric_security_users_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.security_users". */
["vectric_security_users_order_by"]: {
	accountNonExpired?:ValueTypes["order_by"] | null,
	credentialsNonExpired?:ValueTypes["order_by"] | null,
	enabled?:ValueTypes["order_by"] | null,
	password?:ValueTypes["order_by"] | null,
	salesCustomerId?:ValueTypes["order_by"] | null,
	securityGroups_aggregate?:ValueTypes["vectric_security_group_members_aggregate_order_by"] | null,
	username?:ValueTypes["order_by"] | null,
	voucherCode?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_security_users */
["vectric_security_users_pk_columns_input"]: {
	username:string
};
	/** input type for updating data in table "vectric.security_users" */
["vectric_security_users_set_input"]: {
	accountNonExpired?:boolean | null,
	credentialsNonExpired?:boolean | null,
	enabled?:boolean | null,
	password?:string | null,
	salesCustomerId?:ValueTypes["bigint"] | null,
	username?:string | null,
	voucherCode?:string | null
};
	/** Boolean expression to filter rows from the table "vectric.site_option_location". All fields are combined with a logical 'AND'. */
["vectric_site_option_location_bool_exp"]: {
	_and?:ValueTypes["vectric_site_option_location_bool_exp"][],
	_not?:ValueTypes["vectric_site_option_location_bool_exp"] | null,
	_or?:ValueTypes["vectric_site_option_location_bool_exp"][],
	locationid?:ValueTypes["bigint_comparison_exp"] | null,
	name?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.site_option_location" */
["vectric_site_option_location_inc_input"]: {
	locationid?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.site_option_location" */
["vectric_site_option_location_insert_input"]: {
	locationid?:ValueTypes["bigint"] | null,
	name?:string | null
};
	/** input type for inserting object relation for remote table "vectric.site_option_location" */
["vectric_site_option_location_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_site_option_location_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_site_option_location_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.site_option_location" */
["vectric_site_option_location_on_conflict"]: {
	constraint:ValueTypes["vectric_site_option_location_constraint"],
	update_columns:ValueTypes["vectric_site_option_location_update_column"][],
	where?:ValueTypes["vectric_site_option_location_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.site_option_location". */
["vectric_site_option_location_order_by"]: {
	locationid?:ValueTypes["order_by"] | null,
	name?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_site_option_location */
["vectric_site_option_location_pk_columns_input"]: {
	locationid:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.site_option_location" */
["vectric_site_option_location_set_input"]: {
	locationid?:ValueTypes["bigint"] | null,
	name?:string | null
};
	/** Boolean expression to filter rows from the table "vectric.site_options". All fields are combined with a logical 'AND'. */
["vectric_site_options_bool_exp"]: {
	_and?:ValueTypes["vectric_site_options_bool_exp"][],
	_not?:ValueTypes["vectric_site_options_bool_exp"] | null,
	_or?:ValueTypes["vectric_site_options_bool_exp"][],
	description?:ValueTypes["String_comparison_exp"] | null,
	optionid?:ValueTypes["bigint_comparison_exp"] | null,
	optionname?:ValueTypes["String_comparison_exp"] | null,
	site_optiositeOptionLocationn_location?:ValueTypes["vectric_site_option_location_bool_exp"] | null,
	siteid?:ValueTypes["bigint_comparison_exp"] | null,
	stringval?:ValueTypes["String_comparison_exp"] | null,
	value?:ValueTypes["Boolean_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.site_options" */
["vectric_site_options_inc_input"]: {
	optionid?:ValueTypes["bigint"] | null,
	siteid?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.site_options" */
["vectric_site_options_insert_input"]: {
	description?:string | null,
	optionid?:ValueTypes["bigint"] | null,
	optionname?:string | null,
	site_optiositeOptionLocationn_location?:ValueTypes["vectric_site_option_location_obj_rel_insert_input"] | null,
	siteid?:ValueTypes["bigint"] | null,
	stringval?:string | null,
	value?:boolean | null
};
	/** on conflict condition type for table "vectric.site_options" */
["vectric_site_options_on_conflict"]: {
	constraint:ValueTypes["vectric_site_options_constraint"],
	update_columns:ValueTypes["vectric_site_options_update_column"][],
	where?:ValueTypes["vectric_site_options_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.site_options". */
["vectric_site_options_order_by"]: {
	description?:ValueTypes["order_by"] | null,
	optionid?:ValueTypes["order_by"] | null,
	optionname?:ValueTypes["order_by"] | null,
	site_optiositeOptionLocationn_location?:ValueTypes["vectric_site_option_location_order_by"] | null,
	siteid?:ValueTypes["order_by"] | null,
	stringval?:ValueTypes["order_by"] | null,
	value?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_site_options */
["vectric_site_options_pk_columns_input"]: {
	optionid:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.site_options" */
["vectric_site_options_set_input"]: {
	description?:string | null,
	optionid?:ValueTypes["bigint"] | null,
	optionname?:string | null,
	siteid?:ValueTypes["bigint"] | null,
	stringval?:string | null,
	value?:boolean | null
};
	/** Boolean expression to filter rows from the table "vectric.subscription_contract_status". All fields are combined with a logical 'AND'. */
["vectric_subscription_contract_status_bool_exp"]: {
	_and?:ValueTypes["vectric_subscription_contract_status_bool_exp"][],
	_not?:ValueTypes["vectric_subscription_contract_status_bool_exp"] | null,
	_or?:ValueTypes["vectric_subscription_contract_status_bool_exp"][],
	status?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for inserting data into table "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_insert_input"]: {
	status?:string | null
};
	/** on conflict condition type for table "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_on_conflict"]: {
	constraint:ValueTypes["vectric_subscription_contract_status_constraint"],
	update_columns:ValueTypes["vectric_subscription_contract_status_update_column"][],
	where?:ValueTypes["vectric_subscription_contract_status_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.subscription_contract_status". */
["vectric_subscription_contract_status_order_by"]: {
	status?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_subscription_contract_status */
["vectric_subscription_contract_status_pk_columns_input"]: {
	status:string
};
	/** input type for updating data in table "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_set_input"]: {
	status?:string | null
};
	/** Boolean expression to filter rows from the table "vectric.subscription_contracts". All fields are combined with a logical 'AND'. */
["vectric_subscription_contracts_bool_exp"]: {
	_and?:ValueTypes["vectric_subscription_contracts_bool_exp"][],
	_not?:ValueTypes["vectric_subscription_contracts_bool_exp"] | null,
	_or?:ValueTypes["vectric_subscription_contracts_bool_exp"][],
	dateEnding?:ValueTypes["timestamp_comparison_exp"] | null,
	dateStarted?:ValueTypes["timestamp_comparison_exp"] | null,
	events?:ValueTypes["vectric_subscription_events_bool_exp"] | null,
	orderItem?:ValueTypes["vectric_organization_order_items_bool_exp"] | null,
	orderItemId?:ValueTypes["Int_comparison_exp"] | null,
	status?:ValueTypes["String_comparison_exp"] | null,
	subscriptionContractId?:ValueTypes["Int_comparison_exp"] | null,
	subscriptionId?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.subscription_contracts" */
["vectric_subscription_contracts_inc_input"]: {
	orderItemId?:number | null,
	subscriptionContractId?:number | null
};
	/** input type for inserting data into table "vectric.subscription_contracts" */
["vectric_subscription_contracts_insert_input"]: {
	dateEnding?:ValueTypes["timestamp"] | null,
	dateStarted?:ValueTypes["timestamp"] | null,
	events?:ValueTypes["vectric_subscription_events_arr_rel_insert_input"] | null,
	orderItem?:ValueTypes["vectric_organization_order_items_obj_rel_insert_input"] | null,
	orderItemId?:number | null,
	status?:string | null,
	subscriptionContractId?:number | null,
	subscriptionId?:string | null
};
	/** input type for inserting object relation for remote table "vectric.subscription_contracts" */
["vectric_subscription_contracts_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_subscription_contracts_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_subscription_contracts_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.subscription_contracts" */
["vectric_subscription_contracts_on_conflict"]: {
	constraint:ValueTypes["vectric_subscription_contracts_constraint"],
	update_columns:ValueTypes["vectric_subscription_contracts_update_column"][],
	where?:ValueTypes["vectric_subscription_contracts_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.subscription_contracts". */
["vectric_subscription_contracts_order_by"]: {
	dateEnding?:ValueTypes["order_by"] | null,
	dateStarted?:ValueTypes["order_by"] | null,
	events_aggregate?:ValueTypes["vectric_subscription_events_aggregate_order_by"] | null,
	orderItem?:ValueTypes["vectric_organization_order_items_order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null,
	subscriptionContractId?:ValueTypes["order_by"] | null,
	subscriptionId?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_subscription_contracts */
["vectric_subscription_contracts_pk_columns_input"]: {
	subscriptionContractId:number
};
	/** input type for updating data in table "vectric.subscription_contracts" */
["vectric_subscription_contracts_set_input"]: {
	dateEnding?:ValueTypes["timestamp"] | null,
	dateStarted?:ValueTypes["timestamp"] | null,
	orderItemId?:number | null,
	status?:string | null,
	subscriptionContractId?:number | null,
	subscriptionId?:string | null
};
	/** order by aggregate values of table "vectric.subscription_events" */
["vectric_subscription_events_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_subscription_events_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_subscription_events_max_order_by"] | null,
	min?:ValueTypes["vectric_subscription_events_min_order_by"] | null,
	stddev?:ValueTypes["vectric_subscription_events_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_subscription_events_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_subscription_events_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_subscription_events_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_subscription_events_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_subscription_events_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_subscription_events_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.subscription_events" */
["vectric_subscription_events_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_subscription_events_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_subscription_events_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_avg_order_by"]: {
	eventId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	subscriptionContractId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.subscription_events". All fields are combined with a logical 'AND'. */
["vectric_subscription_events_bool_exp"]: {
	_and?:ValueTypes["vectric_subscription_events_bool_exp"][],
	_not?:ValueTypes["vectric_subscription_events_bool_exp"] | null,
	_or?:ValueTypes["vectric_subscription_events_bool_exp"][],
	actionTaken?:ValueTypes["String_comparison_exp"] | null,
	dateCreated?:ValueTypes["timestamp_comparison_exp"] | null,
	dateProcessed?:ValueTypes["timestamp_comparison_exp"] | null,
	eventId?:ValueTypes["Int_comparison_exp"] | null,
	eventType?:ValueTypes["String_comparison_exp"] | null,
	fastspringInternalOrderId?:ValueTypes["String_comparison_exp"] | null,
	fastspringOrderReference?:ValueTypes["String_comparison_exp"] | null,
	fastspringSubscriptionId?:ValueTypes["String_comparison_exp"] | null,
	orderItemId?:ValueTypes["Int_comparison_exp"] | null,
	subscriptionContractId?:ValueTypes["Int_comparison_exp"] | null,
	subscriptionDateStarted?:ValueTypes["timestamp_comparison_exp"] | null,
	subscriptionDeactivationDate?:ValueTypes["timestamp_comparison_exp"] | null,
	subscriptionNextRebillDate?:ValueTypes["timestamp_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.subscription_events" */
["vectric_subscription_events_inc_input"]: {
	eventId?:number | null,
	orderItemId?:number | null,
	subscriptionContractId?:number | null
};
	/** input type for inserting data into table "vectric.subscription_events" */
["vectric_subscription_events_insert_input"]: {
	actionTaken?:string | null,
	dateCreated?:ValueTypes["timestamp"] | null,
	dateProcessed?:ValueTypes["timestamp"] | null,
	eventId?:number | null,
	eventType?:string | null,
	fastspringInternalOrderId?:string | null,
	fastspringOrderReference?:string | null,
	fastspringSubscriptionId?:string | null,
	orderItemId?:number | null,
	subscriptionContractId?:number | null,
	subscriptionDateStarted?:ValueTypes["timestamp"] | null,
	subscriptionDeactivationDate?:ValueTypes["timestamp"] | null,
	subscriptionNextRebillDate?:ValueTypes["timestamp"] | null
};
	/** order by max() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_max_order_by"]: {
	actionTaken?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	dateProcessed?:ValueTypes["order_by"] | null,
	eventId?:ValueTypes["order_by"] | null,
	eventType?:ValueTypes["order_by"] | null,
	fastspringInternalOrderId?:ValueTypes["order_by"] | null,
	fastspringOrderReference?:ValueTypes["order_by"] | null,
	fastspringSubscriptionId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	subscriptionContractId?:ValueTypes["order_by"] | null,
	subscriptionDateStarted?:ValueTypes["order_by"] | null,
	subscriptionDeactivationDate?:ValueTypes["order_by"] | null,
	subscriptionNextRebillDate?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_min_order_by"]: {
	actionTaken?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	dateProcessed?:ValueTypes["order_by"] | null,
	eventId?:ValueTypes["order_by"] | null,
	eventType?:ValueTypes["order_by"] | null,
	fastspringInternalOrderId?:ValueTypes["order_by"] | null,
	fastspringOrderReference?:ValueTypes["order_by"] | null,
	fastspringSubscriptionId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	subscriptionContractId?:ValueTypes["order_by"] | null,
	subscriptionDateStarted?:ValueTypes["order_by"] | null,
	subscriptionDeactivationDate?:ValueTypes["order_by"] | null,
	subscriptionNextRebillDate?:ValueTypes["order_by"] | null
};
	/** on conflict condition type for table "vectric.subscription_events" */
["vectric_subscription_events_on_conflict"]: {
	constraint:ValueTypes["vectric_subscription_events_constraint"],
	update_columns:ValueTypes["vectric_subscription_events_update_column"][],
	where?:ValueTypes["vectric_subscription_events_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.subscription_events". */
["vectric_subscription_events_order_by"]: {
	actionTaken?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	dateProcessed?:ValueTypes["order_by"] | null,
	eventId?:ValueTypes["order_by"] | null,
	eventType?:ValueTypes["order_by"] | null,
	fastspringInternalOrderId?:ValueTypes["order_by"] | null,
	fastspringOrderReference?:ValueTypes["order_by"] | null,
	fastspringSubscriptionId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	subscriptionContractId?:ValueTypes["order_by"] | null,
	subscriptionDateStarted?:ValueTypes["order_by"] | null,
	subscriptionDeactivationDate?:ValueTypes["order_by"] | null,
	subscriptionNextRebillDate?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_subscription_events */
["vectric_subscription_events_pk_columns_input"]: {
	eventId:number
};
	/** input type for updating data in table "vectric.subscription_events" */
["vectric_subscription_events_set_input"]: {
	actionTaken?:string | null,
	dateCreated?:ValueTypes["timestamp"] | null,
	dateProcessed?:ValueTypes["timestamp"] | null,
	eventId?:number | null,
	eventType?:string | null,
	fastspringInternalOrderId?:string | null,
	fastspringOrderReference?:string | null,
	fastspringSubscriptionId?:string | null,
	orderItemId?:number | null,
	subscriptionContractId?:number | null,
	subscriptionDateStarted?:ValueTypes["timestamp"] | null,
	subscriptionDeactivationDate?:ValueTypes["timestamp"] | null,
	subscriptionNextRebillDate?:ValueTypes["timestamp"] | null
};
	/** order by stddev() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_stddev_order_by"]: {
	eventId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	subscriptionContractId?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_stddev_pop_order_by"]: {
	eventId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	subscriptionContractId?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_stddev_samp_order_by"]: {
	eventId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	subscriptionContractId?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_sum_order_by"]: {
	eventId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	subscriptionContractId?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_var_pop_order_by"]: {
	eventId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	subscriptionContractId?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_var_samp_order_by"]: {
	eventId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	subscriptionContractId?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_variance_order_by"]: {
	eventId?:ValueTypes["order_by"] | null,
	orderItemId?:ValueTypes["order_by"] | null,
	subscriptionContractId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.toolpath_saver_token". All fields are combined with a logical 'AND'. */
["vectric_toolpath_saver_token_bool_exp"]: {
	_and?:ValueTypes["vectric_toolpath_saver_token_bool_exp"][],
	_not?:ValueTypes["vectric_toolpath_saver_token_bool_exp"] | null,
	_or?:ValueTypes["vectric_toolpath_saver_token_bool_exp"][],
	customer?:ValueTypes["vectric_sales_customers_bool_exp"] | null,
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	dateExpired?:ValueTypes["timestamptz_comparison_exp"] | null,
	dateGenerated?:ValueTypes["timestamptz_comparison_exp"] | null,
	product?:ValueTypes["vectric_products_products_bool_exp"] | null,
	productId?:ValueTypes["bigint_comparison_exp"] | null,
	token?:ValueTypes["String_comparison_exp"] | null,
	toolpathSaverTokenId?:ValueTypes["bigint_comparison_exp"] | null,
	used?:ValueTypes["Int_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_inc_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	productId?:ValueTypes["bigint"] | null,
	toolpathSaverTokenId?:ValueTypes["bigint"] | null,
	used?:number | null
};
	/** input type for inserting data into table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_insert_input"]: {
	customer?:ValueTypes["vectric_sales_customers_obj_rel_insert_input"] | null,
	customerId?:ValueTypes["bigint"] | null,
	dateExpired?:ValueTypes["timestamptz"] | null,
	dateGenerated?:ValueTypes["timestamptz"] | null,
	product?:ValueTypes["vectric_products_products_obj_rel_insert_input"] | null,
	productId?:ValueTypes["bigint"] | null,
	token?:string | null,
	toolpathSaverTokenId?:ValueTypes["bigint"] | null,
	used?:number | null
};
	/** on conflict condition type for table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_on_conflict"]: {
	constraint:ValueTypes["vectric_toolpath_saver_token_constraint"],
	update_columns:ValueTypes["vectric_toolpath_saver_token_update_column"][],
	where?:ValueTypes["vectric_toolpath_saver_token_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.toolpath_saver_token". */
["vectric_toolpath_saver_token_order_by"]: {
	customer?:ValueTypes["vectric_sales_customers_order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	dateExpired?:ValueTypes["order_by"] | null,
	dateGenerated?:ValueTypes["order_by"] | null,
	product?:ValueTypes["vectric_products_products_order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	token?:ValueTypes["order_by"] | null,
	toolpathSaverTokenId?:ValueTypes["order_by"] | null,
	used?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_toolpath_saver_token */
["vectric_toolpath_saver_token_pk_columns_input"]: {
	toolpathSaverTokenId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_set_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	dateExpired?:ValueTypes["timestamptz"] | null,
	dateGenerated?:ValueTypes["timestamptz"] | null,
	productId?:ValueTypes["bigint"] | null,
	token?:string | null,
	toolpathSaverTokenId?:ValueTypes["bigint"] | null,
	used?:number | null
};
	/** Boolean expression to filter rows from the table "vectric.trial_order". All fields are combined with a logical 'AND'. */
["vectric_trial_order_bool_exp"]: {
	_and?:ValueTypes["vectric_trial_order_bool_exp"][],
	_not?:ValueTypes["vectric_trial_order_bool_exp"] | null,
	_or?:ValueTypes["vectric_trial_order_bool_exp"][],
	customer?:ValueTypes["vectric_sales_customers_bool_exp"] | null,
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	endDate?:ValueTypes["timestamptz_comparison_exp"] | null,
	orderId?:ValueTypes["bigint_comparison_exp"] | null,
	product?:ValueTypes["vectric_products_products_bool_exp"] | null,
	productId?:ValueTypes["bigint_comparison_exp"] | null,
	startDate?:ValueTypes["timestamptz_comparison_exp"] | null,
	valid?:ValueTypes["Boolean_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.trial_order" */
["vectric_trial_order_inc_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	orderId?:ValueTypes["bigint"] | null,
	productId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.trial_order" */
["vectric_trial_order_insert_input"]: {
	customer?:ValueTypes["vectric_sales_customers_obj_rel_insert_input"] | null,
	customerId?:ValueTypes["bigint"] | null,
	endDate?:ValueTypes["timestamptz"] | null,
	orderId?:ValueTypes["bigint"] | null,
	product?:ValueTypes["vectric_products_products_obj_rel_insert_input"] | null,
	productId?:ValueTypes["bigint"] | null,
	startDate?:ValueTypes["timestamptz"] | null,
	valid?:boolean | null
};
	/** on conflict condition type for table "vectric.trial_order" */
["vectric_trial_order_on_conflict"]: {
	constraint:ValueTypes["vectric_trial_order_constraint"],
	update_columns:ValueTypes["vectric_trial_order_update_column"][],
	where?:ValueTypes["vectric_trial_order_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.trial_order". */
["vectric_trial_order_order_by"]: {
	customer?:ValueTypes["vectric_sales_customers_order_by"] | null,
	customerId?:ValueTypes["order_by"] | null,
	endDate?:ValueTypes["order_by"] | null,
	orderId?:ValueTypes["order_by"] | null,
	product?:ValueTypes["vectric_products_products_order_by"] | null,
	productId?:ValueTypes["order_by"] | null,
	startDate?:ValueTypes["order_by"] | null,
	valid?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_trial_order */
["vectric_trial_order_pk_columns_input"]: {
	orderId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.trial_order" */
["vectric_trial_order_set_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	endDate?:ValueTypes["timestamptz"] | null,
	orderId?:ValueTypes["bigint"] | null,
	productId?:ValueTypes["bigint"] | null,
	startDate?:ValueTypes["timestamptz"] | null,
	valid?:boolean | null
};
	/** Boolean expression to filter rows from the table "vectric.update_requests". All fields are combined with a logical 'AND'. */
["vectric_update_requests_bool_exp"]: {
	_and?:ValueTypes["vectric_update_requests_bool_exp"][],
	_not?:ValueTypes["vectric_update_requests_bool_exp"] | null,
	_or?:ValueTypes["vectric_update_requests_bool_exp"][],
	dateAccessed?:ValueTypes["timestamptz_comparison_exp"] | null,
	ipAddress?:ValueTypes["String_comparison_exp"] | null,
	majorVersion?:ValueTypes["bigint_comparison_exp"] | null,
	minorVersionOOX?:ValueTypes["bigint_comparison_exp"] | null,
	minorVersionOXO?:ValueTypes["bigint_comparison_exp"] | null,
	minorVersionXOO?:ValueTypes["bigint_comparison_exp"] | null,
	osMajorVersion?:ValueTypes["bigint_comparison_exp"] | null,
	osMinorVersion?:ValueTypes["bigint_comparison_exp"] | null,
	productName?:ValueTypes["String_comparison_exp"] | null,
	requestId?:ValueTypes["bigint_comparison_exp"] | null,
	wProcessorArch?:ValueTypes["bigint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.update_requests" */
["vectric_update_requests_inc_input"]: {
	majorVersion?:ValueTypes["bigint"] | null,
	minorVersionOOX?:ValueTypes["bigint"] | null,
	minorVersionOXO?:ValueTypes["bigint"] | null,
	minorVersionXOO?:ValueTypes["bigint"] | null,
	osMajorVersion?:ValueTypes["bigint"] | null,
	osMinorVersion?:ValueTypes["bigint"] | null,
	requestId?:ValueTypes["bigint"] | null,
	wProcessorArch?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.update_requests" */
["vectric_update_requests_insert_input"]: {
	dateAccessed?:ValueTypes["timestamptz"] | null,
	ipAddress?:string | null,
	majorVersion?:ValueTypes["bigint"] | null,
	minorVersionOOX?:ValueTypes["bigint"] | null,
	minorVersionOXO?:ValueTypes["bigint"] | null,
	minorVersionXOO?:ValueTypes["bigint"] | null,
	osMajorVersion?:ValueTypes["bigint"] | null,
	osMinorVersion?:ValueTypes["bigint"] | null,
	productName?:string | null,
	requestId?:ValueTypes["bigint"] | null,
	wProcessorArch?:ValueTypes["bigint"] | null
};
	/** on conflict condition type for table "vectric.update_requests" */
["vectric_update_requests_on_conflict"]: {
	constraint:ValueTypes["vectric_update_requests_constraint"],
	update_columns:ValueTypes["vectric_update_requests_update_column"][],
	where?:ValueTypes["vectric_update_requests_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.update_requests". */
["vectric_update_requests_order_by"]: {
	dateAccessed?:ValueTypes["order_by"] | null,
	ipAddress?:ValueTypes["order_by"] | null,
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	osMajorVersion?:ValueTypes["order_by"] | null,
	osMinorVersion?:ValueTypes["order_by"] | null,
	productName?:ValueTypes["order_by"] | null,
	requestId?:ValueTypes["order_by"] | null,
	wProcessorArch?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_update_requests */
["vectric_update_requests_pk_columns_input"]: {
	requestId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.update_requests" */
["vectric_update_requests_set_input"]: {
	dateAccessed?:ValueTypes["timestamptz"] | null,
	ipAddress?:string | null,
	majorVersion?:ValueTypes["bigint"] | null,
	minorVersionOOX?:ValueTypes["bigint"] | null,
	minorVersionOXO?:ValueTypes["bigint"] | null,
	minorVersionXOO?:ValueTypes["bigint"] | null,
	osMajorVersion?:ValueTypes["bigint"] | null,
	osMinorVersion?:ValueTypes["bigint"] | null,
	productName?:string | null,
	requestId?:ValueTypes["bigint"] | null,
	wProcessorArch?:ValueTypes["bigint"] | null
};
	/** order by aggregate values of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_upgrade_tokens_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_upgrade_tokens_max_order_by"] | null,
	min?:ValueTypes["vectric_upgrade_tokens_min_order_by"] | null,
	stddev?:ValueTypes["vectric_upgrade_tokens_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_upgrade_tokens_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_upgrade_tokens_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_upgrade_tokens_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_upgrade_tokens_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_upgrade_tokens_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_upgrade_tokens_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_upgrade_tokens_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_upgrade_tokens_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_avg_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	upgradeEligibilityId?:ValueTypes["order_by"] | null,
	upgradedToOrderItemProduct?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.upgrade_tokens". All fields are combined with a logical 'AND'. */
["vectric_upgrade_tokens_bool_exp"]: {
	_and?:ValueTypes["vectric_upgrade_tokens_bool_exp"][],
	_not?:ValueTypes["vectric_upgrade_tokens_bool_exp"] | null,
	_or?:ValueTypes["vectric_upgrade_tokens_bool_exp"][],
	customerId?:ValueTypes["bigint_comparison_exp"] | null,
	dateCreated?:ValueTypes["timestamptz_comparison_exp"] | null,
	dateUsed?:ValueTypes["timestamptz_comparison_exp"] | null,
	fromProduct?:ValueTypes["vectric_sales_salesitem_products_bool_exp"] | null,
	orderItemProductId?:ValueTypes["bigint_comparison_exp"] | null,
	toProduct?:ValueTypes["vectric_products_upgrade_eligibility_bool_exp"] | null,
	token?:ValueTypes["String_comparison_exp"] | null,
	upgradeEligibilityId?:ValueTypes["bigint_comparison_exp"] | null,
	upgradedToOrderItemProduct?:ValueTypes["bigint_comparison_exp"] | null,
	used?:ValueTypes["Boolean_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_inc_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	orderItemProductId?:ValueTypes["bigint"] | null,
	upgradeEligibilityId?:ValueTypes["bigint"] | null,
	upgradedToOrderItemProduct?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_insert_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	dateUsed?:ValueTypes["timestamptz"] | null,
	fromProduct?:ValueTypes["vectric_sales_salesitem_products_obj_rel_insert_input"] | null,
	orderItemProductId?:ValueTypes["bigint"] | null,
	toProduct?:ValueTypes["vectric_products_upgrade_eligibility_obj_rel_insert_input"] | null,
	token?:string | null,
	upgradeEligibilityId?:ValueTypes["bigint"] | null,
	upgradedToOrderItemProduct?:ValueTypes["bigint"] | null,
	used?:boolean | null
};
	/** order by max() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_max_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	dateUsed?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	token?:ValueTypes["order_by"] | null,
	upgradeEligibilityId?:ValueTypes["order_by"] | null,
	upgradedToOrderItemProduct?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_min_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	dateUsed?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	token?:ValueTypes["order_by"] | null,
	upgradeEligibilityId?:ValueTypes["order_by"] | null,
	upgradedToOrderItemProduct?:ValueTypes["order_by"] | null
};
	/** on conflict condition type for table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_on_conflict"]: {
	constraint:ValueTypes["vectric_upgrade_tokens_constraint"],
	update_columns:ValueTypes["vectric_upgrade_tokens_update_column"][],
	where?:ValueTypes["vectric_upgrade_tokens_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.upgrade_tokens". */
["vectric_upgrade_tokens_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	dateCreated?:ValueTypes["order_by"] | null,
	dateUsed?:ValueTypes["order_by"] | null,
	fromProduct?:ValueTypes["vectric_sales_salesitem_products_order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	toProduct?:ValueTypes["vectric_products_upgrade_eligibility_order_by"] | null,
	token?:ValueTypes["order_by"] | null,
	upgradeEligibilityId?:ValueTypes["order_by"] | null,
	upgradedToOrderItemProduct?:ValueTypes["order_by"] | null,
	used?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_upgrade_tokens */
["vectric_upgrade_tokens_pk_columns_input"]: {
	token:string
};
	/** input type for updating data in table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_set_input"]: {
	customerId?:ValueTypes["bigint"] | null,
	dateCreated?:ValueTypes["timestamptz"] | null,
	dateUsed?:ValueTypes["timestamptz"] | null,
	orderItemProductId?:ValueTypes["bigint"] | null,
	token?:string | null,
	upgradeEligibilityId?:ValueTypes["bigint"] | null,
	upgradedToOrderItemProduct?:ValueTypes["bigint"] | null,
	used?:boolean | null
};
	/** order by stddev() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_stddev_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	upgradeEligibilityId?:ValueTypes["order_by"] | null,
	upgradedToOrderItemProduct?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_stddev_pop_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	upgradeEligibilityId?:ValueTypes["order_by"] | null,
	upgradedToOrderItemProduct?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_stddev_samp_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	upgradeEligibilityId?:ValueTypes["order_by"] | null,
	upgradedToOrderItemProduct?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_sum_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	upgradeEligibilityId?:ValueTypes["order_by"] | null,
	upgradedToOrderItemProduct?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_var_pop_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	upgradeEligibilityId?:ValueTypes["order_by"] | null,
	upgradedToOrderItemProduct?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_var_samp_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	upgradeEligibilityId?:ValueTypes["order_by"] | null,
	upgradedToOrderItemProduct?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_variance_order_by"]: {
	customerId?:ValueTypes["order_by"] | null,
	orderItemProductId?:ValueTypes["order_by"] | null,
	upgradeEligibilityId?:ValueTypes["order_by"] | null,
	upgradedToOrderItemProduct?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.upgrades_feature". All fields are combined with a logical 'AND'. */
["vectric_upgrades_feature_bool_exp"]: {
	_and?:ValueTypes["vectric_upgrades_feature_bool_exp"][],
	_not?:ValueTypes["vectric_upgrades_feature_bool_exp"] | null,
	_or?:ValueTypes["vectric_upgrades_feature_bool_exp"][],
	enabled?:ValueTypes["Boolean_comparison_exp"] | null,
	extendedDescription?:ValueTypes["String_comparison_exp"] | null,
	featureId?:ValueTypes["String_comparison_exp"] | null,
	title?:ValueTypes["String_comparison_exp"] | null,
	upgradeProductTypeFeatures?:ValueTypes["vectric_upgrades_product_type_feature_bool_exp"] | null,
	upgradeVersionFeatures?:ValueTypes["vectric_upgrades_version_feature_bool_exp"] | null
};
	/** input type for inserting data into table "vectric.upgrades_feature" */
["vectric_upgrades_feature_insert_input"]: {
	enabled?:boolean | null,
	extendedDescription?:string | null,
	featureId?:string | null,
	title?:string | null,
	upgradeProductTypeFeatures?:ValueTypes["vectric_upgrades_product_type_feature_arr_rel_insert_input"] | null,
	upgradeVersionFeatures?:ValueTypes["vectric_upgrades_version_feature_arr_rel_insert_input"] | null
};
	/** input type for inserting object relation for remote table "vectric.upgrades_feature" */
["vectric_upgrades_feature_obj_rel_insert_input"]: {
	data:ValueTypes["vectric_upgrades_feature_insert_input"],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_upgrades_feature_on_conflict"] | null
};
	/** on conflict condition type for table "vectric.upgrades_feature" */
["vectric_upgrades_feature_on_conflict"]: {
	constraint:ValueTypes["vectric_upgrades_feature_constraint"],
	update_columns:ValueTypes["vectric_upgrades_feature_update_column"][],
	where?:ValueTypes["vectric_upgrades_feature_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.upgrades_feature". */
["vectric_upgrades_feature_order_by"]: {
	enabled?:ValueTypes["order_by"] | null,
	extendedDescription?:ValueTypes["order_by"] | null,
	featureId?:ValueTypes["order_by"] | null,
	title?:ValueTypes["order_by"] | null,
	upgradeProductTypeFeatures_aggregate?:ValueTypes["vectric_upgrades_product_type_feature_aggregate_order_by"] | null,
	upgradeVersionFeatures_aggregate?:ValueTypes["vectric_upgrades_version_feature_aggregate_order_by"] | null
};
	/** primary key columns input for table: vectric_upgrades_feature */
["vectric_upgrades_feature_pk_columns_input"]: {
	featureId:string
};
	/** input type for updating data in table "vectric.upgrades_feature" */
["vectric_upgrades_feature_set_input"]: {
	enabled?:boolean | null,
	extendedDescription?:string | null,
	featureId?:string | null,
	title?:string | null
};
	/** order by aggregate values of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_upgrades_product_type_feature_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_upgrades_product_type_feature_max_order_by"] | null,
	min?:ValueTypes["vectric_upgrades_product_type_feature_min_order_by"] | null,
	stddev?:ValueTypes["vectric_upgrades_product_type_feature_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_upgrades_product_type_feature_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_upgrades_product_type_feature_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_upgrades_product_type_feature_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_upgrades_product_type_feature_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_upgrades_product_type_feature_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_upgrades_product_type_feature_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_upgrades_product_type_feature_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_upgrades_product_type_feature_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_avg_order_by"]: {
	fromProductType?:ValueTypes["order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	toProductType?:ValueTypes["order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.upgrades_product_type_feature". All fields are combined with a logical 'AND'. */
["vectric_upgrades_product_type_feature_bool_exp"]: {
	_and?:ValueTypes["vectric_upgrades_product_type_feature_bool_exp"][],
	_not?:ValueTypes["vectric_upgrades_product_type_feature_bool_exp"] | null,
	_or?:ValueTypes["vectric_upgrades_product_type_feature_bool_exp"][],
	feature?:ValueTypes["String_comparison_exp"] | null,
	fromProductType?:ValueTypes["bigint_comparison_exp"] | null,
	fromProductTypeObject?:ValueTypes["vectric_products_producttype_bool_exp"] | null,
	ranking?:ValueTypes["bigint_comparison_exp"] | null,
	toProductType?:ValueTypes["bigint_comparison_exp"] | null,
	toProductTypeObject?:ValueTypes["vectric_products_producttype_bool_exp"] | null,
	upgradeFeatureObject?:ValueTypes["vectric_upgrades_feature_bool_exp"] | null,
	upgradeId?:ValueTypes["bigint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_inc_input"]: {
	fromProductType?:ValueTypes["bigint"] | null,
	ranking?:ValueTypes["bigint"] | null,
	toProductType?:ValueTypes["bigint"] | null,
	upgradeId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_insert_input"]: {
	feature?:string | null,
	fromProductType?:ValueTypes["bigint"] | null,
	fromProductTypeObject?:ValueTypes["vectric_products_producttype_obj_rel_insert_input"] | null,
	ranking?:ValueTypes["bigint"] | null,
	toProductType?:ValueTypes["bigint"] | null,
	toProductTypeObject?:ValueTypes["vectric_products_producttype_obj_rel_insert_input"] | null,
	upgradeFeatureObject?:ValueTypes["vectric_upgrades_feature_obj_rel_insert_input"] | null,
	upgradeId?:ValueTypes["bigint"] | null
};
	/** order by max() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_max_order_by"]: {
	feature?:ValueTypes["order_by"] | null,
	fromProductType?:ValueTypes["order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	toProductType?:ValueTypes["order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_min_order_by"]: {
	feature?:ValueTypes["order_by"] | null,
	fromProductType?:ValueTypes["order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	toProductType?:ValueTypes["order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** on conflict condition type for table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_on_conflict"]: {
	constraint:ValueTypes["vectric_upgrades_product_type_feature_constraint"],
	update_columns:ValueTypes["vectric_upgrades_product_type_feature_update_column"][],
	where?:ValueTypes["vectric_upgrades_product_type_feature_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.upgrades_product_type_feature". */
["vectric_upgrades_product_type_feature_order_by"]: {
	feature?:ValueTypes["order_by"] | null,
	fromProductType?:ValueTypes["order_by"] | null,
	fromProductTypeObject?:ValueTypes["vectric_products_producttype_order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	toProductType?:ValueTypes["order_by"] | null,
	toProductTypeObject?:ValueTypes["vectric_products_producttype_order_by"] | null,
	upgradeFeatureObject?:ValueTypes["vectric_upgrades_feature_order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_upgrades_product_type_feature */
["vectric_upgrades_product_type_feature_pk_columns_input"]: {
	upgradeId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_set_input"]: {
	feature?:string | null,
	fromProductType?:ValueTypes["bigint"] | null,
	ranking?:ValueTypes["bigint"] | null,
	toProductType?:ValueTypes["bigint"] | null,
	upgradeId?:ValueTypes["bigint"] | null
};
	/** order by stddev() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_stddev_order_by"]: {
	fromProductType?:ValueTypes["order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	toProductType?:ValueTypes["order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_stddev_pop_order_by"]: {
	fromProductType?:ValueTypes["order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	toProductType?:ValueTypes["order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_stddev_samp_order_by"]: {
	fromProductType?:ValueTypes["order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	toProductType?:ValueTypes["order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_sum_order_by"]: {
	fromProductType?:ValueTypes["order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	toProductType?:ValueTypes["order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_var_pop_order_by"]: {
	fromProductType?:ValueTypes["order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	toProductType?:ValueTypes["order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_var_samp_order_by"]: {
	fromProductType?:ValueTypes["order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	toProductType?:ValueTypes["order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_variance_order_by"]: {
	fromProductType?:ValueTypes["order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	toProductType?:ValueTypes["order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** order by aggregate values of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_aggregate_order_by"]: {
	avg?:ValueTypes["vectric_upgrades_version_feature_avg_order_by"] | null,
	count?:ValueTypes["order_by"] | null,
	max?:ValueTypes["vectric_upgrades_version_feature_max_order_by"] | null,
	min?:ValueTypes["vectric_upgrades_version_feature_min_order_by"] | null,
	stddev?:ValueTypes["vectric_upgrades_version_feature_stddev_order_by"] | null,
	stddev_pop?:ValueTypes["vectric_upgrades_version_feature_stddev_pop_order_by"] | null,
	stddev_samp?:ValueTypes["vectric_upgrades_version_feature_stddev_samp_order_by"] | null,
	sum?:ValueTypes["vectric_upgrades_version_feature_sum_order_by"] | null,
	var_pop?:ValueTypes["vectric_upgrades_version_feature_var_pop_order_by"] | null,
	var_samp?:ValueTypes["vectric_upgrades_version_feature_var_samp_order_by"] | null,
	variance?:ValueTypes["vectric_upgrades_version_feature_variance_order_by"] | null
};
	/** input type for inserting array relation for remote table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_arr_rel_insert_input"]: {
	data:ValueTypes["vectric_upgrades_version_feature_insert_input"][],
	/** on conflict condition */
	on_conflict?:ValueTypes["vectric_upgrades_version_feature_on_conflict"] | null
};
	/** order by avg() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_avg_order_by"]: {
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersion?:ValueTypes["order_by"] | null,
	productType?:ValueTypes["order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.upgrades_version_feature". All fields are combined with a logical 'AND'. */
["vectric_upgrades_version_feature_bool_exp"]: {
	_and?:ValueTypes["vectric_upgrades_version_feature_bool_exp"][],
	_not?:ValueTypes["vectric_upgrades_version_feature_bool_exp"] | null,
	_or?:ValueTypes["vectric_upgrades_version_feature_bool_exp"][],
	feature?:ValueTypes["String_comparison_exp"] | null,
	majorVersion?:ValueTypes["bigint_comparison_exp"] | null,
	minorVersion?:ValueTypes["bigint_comparison_exp"] | null,
	productType?:ValueTypes["bigint_comparison_exp"] | null,
	productTypeObject?:ValueTypes["vectric_products_producttype_bool_exp"] | null,
	ranking?:ValueTypes["bigint_comparison_exp"] | null,
	upgradeFeatureObject?:ValueTypes["vectric_upgrades_feature_bool_exp"] | null,
	upgradeId?:ValueTypes["bigint_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_inc_input"]: {
	majorVersion?:ValueTypes["bigint"] | null,
	minorVersion?:ValueTypes["bigint"] | null,
	productType?:ValueTypes["bigint"] | null,
	ranking?:ValueTypes["bigint"] | null,
	upgradeId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_insert_input"]: {
	feature?:string | null,
	majorVersion?:ValueTypes["bigint"] | null,
	minorVersion?:ValueTypes["bigint"] | null,
	productType?:ValueTypes["bigint"] | null,
	productTypeObject?:ValueTypes["vectric_products_producttype_obj_rel_insert_input"] | null,
	ranking?:ValueTypes["bigint"] | null,
	upgradeFeatureObject?:ValueTypes["vectric_upgrades_feature_obj_rel_insert_input"] | null,
	upgradeId?:ValueTypes["bigint"] | null
};
	/** order by max() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_max_order_by"]: {
	feature?:ValueTypes["order_by"] | null,
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersion?:ValueTypes["order_by"] | null,
	productType?:ValueTypes["order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** order by min() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_min_order_by"]: {
	feature?:ValueTypes["order_by"] | null,
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersion?:ValueTypes["order_by"] | null,
	productType?:ValueTypes["order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** on conflict condition type for table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_on_conflict"]: {
	constraint:ValueTypes["vectric_upgrades_version_feature_constraint"],
	update_columns:ValueTypes["vectric_upgrades_version_feature_update_column"][],
	where?:ValueTypes["vectric_upgrades_version_feature_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.upgrades_version_feature". */
["vectric_upgrades_version_feature_order_by"]: {
	feature?:ValueTypes["order_by"] | null,
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersion?:ValueTypes["order_by"] | null,
	productType?:ValueTypes["order_by"] | null,
	productTypeObject?:ValueTypes["vectric_products_producttype_order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	upgradeFeatureObject?:ValueTypes["vectric_upgrades_feature_order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_upgrades_version_feature */
["vectric_upgrades_version_feature_pk_columns_input"]: {
	upgradeId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_set_input"]: {
	feature?:string | null,
	majorVersion?:ValueTypes["bigint"] | null,
	minorVersion?:ValueTypes["bigint"] | null,
	productType?:ValueTypes["bigint"] | null,
	ranking?:ValueTypes["bigint"] | null,
	upgradeId?:ValueTypes["bigint"] | null
};
	/** order by stddev() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_stddev_order_by"]: {
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersion?:ValueTypes["order_by"] | null,
	productType?:ValueTypes["order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** order by stddev_pop() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_stddev_pop_order_by"]: {
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersion?:ValueTypes["order_by"] | null,
	productType?:ValueTypes["order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** order by stddev_samp() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_stddev_samp_order_by"]: {
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersion?:ValueTypes["order_by"] | null,
	productType?:ValueTypes["order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** order by sum() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_sum_order_by"]: {
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersion?:ValueTypes["order_by"] | null,
	productType?:ValueTypes["order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** order by var_pop() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_var_pop_order_by"]: {
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersion?:ValueTypes["order_by"] | null,
	productType?:ValueTypes["order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** order by var_samp() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_var_samp_order_by"]: {
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersion?:ValueTypes["order_by"] | null,
	productType?:ValueTypes["order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** order by variance() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_variance_order_by"]: {
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersion?:ValueTypes["order_by"] | null,
	productType?:ValueTypes["order_by"] | null,
	ranking?:ValueTypes["order_by"] | null,
	upgradeId?:ValueTypes["order_by"] | null
};
	/** Boolean expression to filter rows from the table "vectric.usergroup_2019_attendees". All fields are combined with a logical 'AND'. */
["vectric_usergroup_2019_attendees_bool_exp"]: {
	_and?:ValueTypes["vectric_usergroup_2019_attendees_bool_exp"][],
	_not?:ValueTypes["vectric_usergroup_2019_attendees_bool_exp"] | null,
	_or?:ValueTypes["vectric_usergroup_2019_attendees_bool_exp"][],
	attendeeid?:ValueTypes["bigint_comparison_exp"] | null,
	bringingsample?:ValueTypes["Boolean_comparison_exp"] | null,
	company?:ValueTypes["String_comparison_exp"] | null,
	customerid?:ValueTypes["bigint_comparison_exp"] | null,
	diet?:ValueTypes["String_comparison_exp"] | null,
	email?:ValueTypes["String_comparison_exp"] | null,
	fastspringreference?:ValueTypes["String_comparison_exp"] | null,
	firstname?:ValueTypes["String_comparison_exp"] | null,
	forumname?:ValueTypes["String_comparison_exp"] | null,
	lastname?:ValueTypes["String_comparison_exp"] | null,
	notes?:ValueTypes["String_comparison_exp"] | null,
	productid?:ValueTypes["bigint_comparison_exp"] | null,
	purchasedate?:ValueTypes["timestamptz_comparison_exp"] | null,
	reference?:ValueTypes["String_comparison_exp"] | null,
	state?:ValueTypes["String_comparison_exp"] | null,
	status?:ValueTypes["String_comparison_exp"] | null,
	tshirtsize?:ValueTypes["String_comparison_exp"] | null,
	uk?:ValueTypes["Boolean_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_inc_input"]: {
	attendeeid?:ValueTypes["bigint"] | null,
	customerid?:ValueTypes["bigint"] | null,
	productid?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_insert_input"]: {
	attendeeid?:ValueTypes["bigint"] | null,
	bringingsample?:boolean | null,
	company?:string | null,
	customerid?:ValueTypes["bigint"] | null,
	diet?:string | null,
	email?:string | null,
	fastspringreference?:string | null,
	firstname?:string | null,
	forumname?:string | null,
	lastname?:string | null,
	notes?:string | null,
	productid?:ValueTypes["bigint"] | null,
	purchasedate?:ValueTypes["timestamptz"] | null,
	reference?:string | null,
	state?:string | null,
	status?:string | null,
	tshirtsize?:string | null,
	uk?:boolean | null
};
	/** on conflict condition type for table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_on_conflict"]: {
	constraint:ValueTypes["vectric_usergroup_2019_attendees_constraint"],
	update_columns:ValueTypes["vectric_usergroup_2019_attendees_update_column"][],
	where?:ValueTypes["vectric_usergroup_2019_attendees_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.usergroup_2019_attendees". */
["vectric_usergroup_2019_attendees_order_by"]: {
	attendeeid?:ValueTypes["order_by"] | null,
	bringingsample?:ValueTypes["order_by"] | null,
	company?:ValueTypes["order_by"] | null,
	customerid?:ValueTypes["order_by"] | null,
	diet?:ValueTypes["order_by"] | null,
	email?:ValueTypes["order_by"] | null,
	fastspringreference?:ValueTypes["order_by"] | null,
	firstname?:ValueTypes["order_by"] | null,
	forumname?:ValueTypes["order_by"] | null,
	lastname?:ValueTypes["order_by"] | null,
	notes?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null,
	purchasedate?:ValueTypes["order_by"] | null,
	reference?:ValueTypes["order_by"] | null,
	state?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null,
	tshirtsize?:ValueTypes["order_by"] | null,
	uk?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_usergroup_2019_attendees */
["vectric_usergroup_2019_attendees_pk_columns_input"]: {
	attendeeid:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_set_input"]: {
	attendeeid?:ValueTypes["bigint"] | null,
	bringingsample?:boolean | null,
	company?:string | null,
	customerid?:ValueTypes["bigint"] | null,
	diet?:string | null,
	email?:string | null,
	fastspringreference?:string | null,
	firstname?:string | null,
	forumname?:string | null,
	lastname?:string | null,
	notes?:string | null,
	productid?:ValueTypes["bigint"] | null,
	purchasedate?:ValueTypes["timestamptz"] | null,
	reference?:string | null,
	state?:string | null,
	status?:string | null,
	tshirtsize?:string | null,
	uk?:boolean | null
};
	/** Boolean expression to filter rows from the table "vectric.usergroup_2019_waitlist". All fields are combined with a logical 'AND'. */
["vectric_usergroup_2019_waitlist_bool_exp"]: {
	_and?:ValueTypes["vectric_usergroup_2019_waitlist_bool_exp"][],
	_not?:ValueTypes["vectric_usergroup_2019_waitlist_bool_exp"] | null,
	_or?:ValueTypes["vectric_usergroup_2019_waitlist_bool_exp"][],
	attendeeid?:ValueTypes["bigint_comparison_exp"] | null,
	customerid?:ValueTypes["bigint_comparison_exp"] | null,
	desiredquantity?:ValueTypes["bigint_comparison_exp"] | null,
	email?:ValueTypes["String_comparison_exp"] | null,
	invitationdate?:ValueTypes["timestamptz_comparison_exp"] | null,
	productid?:ValueTypes["bigint_comparison_exp"] | null,
	reference?:ValueTypes["String_comparison_exp"] | null,
	status?:ValueTypes["String_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_inc_input"]: {
	attendeeid?:ValueTypes["bigint"] | null,
	customerid?:ValueTypes["bigint"] | null,
	desiredquantity?:ValueTypes["bigint"] | null,
	productid?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_insert_input"]: {
	attendeeid?:ValueTypes["bigint"] | null,
	customerid?:ValueTypes["bigint"] | null,
	desiredquantity?:ValueTypes["bigint"] | null,
	email?:string | null,
	invitationdate?:ValueTypes["timestamptz"] | null,
	productid?:ValueTypes["bigint"] | null,
	reference?:string | null,
	status?:string | null
};
	/** on conflict condition type for table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_on_conflict"]: {
	constraint:ValueTypes["vectric_usergroup_2019_waitlist_constraint"],
	update_columns:ValueTypes["vectric_usergroup_2019_waitlist_update_column"][],
	where?:ValueTypes["vectric_usergroup_2019_waitlist_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.usergroup_2019_waitlist". */
["vectric_usergroup_2019_waitlist_order_by"]: {
	attendeeid?:ValueTypes["order_by"] | null,
	customerid?:ValueTypes["order_by"] | null,
	desiredquantity?:ValueTypes["order_by"] | null,
	email?:ValueTypes["order_by"] | null,
	invitationdate?:ValueTypes["order_by"] | null,
	productid?:ValueTypes["order_by"] | null,
	reference?:ValueTypes["order_by"] | null,
	status?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_usergroup_2019_waitlist */
["vectric_usergroup_2019_waitlist_pk_columns_input"]: {
	attendeeid:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_set_input"]: {
	attendeeid?:ValueTypes["bigint"] | null,
	customerid?:ValueTypes["bigint"] | null,
	desiredquantity?:ValueTypes["bigint"] | null,
	email?:string | null,
	invitationdate?:ValueTypes["timestamptz"] | null,
	productid?:ValueTypes["bigint"] | null,
	reference?:string | null,
	status?:string | null
};
	/** Boolean expression to filter rows from the table "vectric.version_code". All fields are combined with a logical 'AND'. */
["vectric_version_code_bool_exp"]: {
	_and?:ValueTypes["vectric_version_code_bool_exp"][],
	_not?:ValueTypes["vectric_version_code_bool_exp"] | null,
	_or?:ValueTypes["vectric_version_code_bool_exp"][],
	displayVersion?:ValueTypes["String_comparison_exp"] | null,
	latest?:ValueTypes["Boolean_comparison_exp"] | null,
	majorVersion?:ValueTypes["bigint_comparison_exp"] | null,
	minorVersionOOX?:ValueTypes["bigint_comparison_exp"] | null,
	minorVersionOXO?:ValueTypes["bigint_comparison_exp"] | null,
	minorVersionXOO?:ValueTypes["bigint_comparison_exp"] | null,
	notifying?:ValueTypes["Boolean_comparison_exp"] | null,
	patchUrl?:ValueTypes["String_comparison_exp"] | null,
	releaseDate?:ValueTypes["date_comparison_exp"] | null,
	url?:ValueTypes["String_comparison_exp"] | null,
	versionCodeId?:ValueTypes["bigint_comparison_exp"] | null,
	visible?:ValueTypes["Boolean_comparison_exp"] | null
};
	/** input type for incrementing numeric columns in table "vectric.version_code" */
["vectric_version_code_inc_input"]: {
	majorVersion?:ValueTypes["bigint"] | null,
	minorVersionOOX?:ValueTypes["bigint"] | null,
	minorVersionOXO?:ValueTypes["bigint"] | null,
	minorVersionXOO?:ValueTypes["bigint"] | null,
	versionCodeId?:ValueTypes["bigint"] | null
};
	/** input type for inserting data into table "vectric.version_code" */
["vectric_version_code_insert_input"]: {
	displayVersion?:string | null,
	latest?:boolean | null,
	majorVersion?:ValueTypes["bigint"] | null,
	minorVersionOOX?:ValueTypes["bigint"] | null,
	minorVersionOXO?:ValueTypes["bigint"] | null,
	minorVersionXOO?:ValueTypes["bigint"] | null,
	notifying?:boolean | null,
	patchUrl?:string | null,
	releaseDate?:ValueTypes["date"] | null,
	url?:string | null,
	versionCodeId?:ValueTypes["bigint"] | null,
	visible?:boolean | null
};
	/** on conflict condition type for table "vectric.version_code" */
["vectric_version_code_on_conflict"]: {
	constraint:ValueTypes["vectric_version_code_constraint"],
	update_columns:ValueTypes["vectric_version_code_update_column"][],
	where?:ValueTypes["vectric_version_code_bool_exp"] | null
};
	/** Ordering options when selecting data from "vectric.version_code". */
["vectric_version_code_order_by"]: {
	displayVersion?:ValueTypes["order_by"] | null,
	latest?:ValueTypes["order_by"] | null,
	majorVersion?:ValueTypes["order_by"] | null,
	minorVersionOOX?:ValueTypes["order_by"] | null,
	minorVersionOXO?:ValueTypes["order_by"] | null,
	minorVersionXOO?:ValueTypes["order_by"] | null,
	notifying?:ValueTypes["order_by"] | null,
	patchUrl?:ValueTypes["order_by"] | null,
	releaseDate?:ValueTypes["order_by"] | null,
	url?:ValueTypes["order_by"] | null,
	versionCodeId?:ValueTypes["order_by"] | null,
	visible?:ValueTypes["order_by"] | null
};
	/** primary key columns input for table: vectric_version_code */
["vectric_version_code_pk_columns_input"]: {
	versionCodeId:ValueTypes["bigint"]
};
	/** input type for updating data in table "vectric.version_code" */
["vectric_version_code_set_input"]: {
	displayVersion?:string | null,
	latest?:boolean | null,
	majorVersion?:ValueTypes["bigint"] | null,
	minorVersionOOX?:ValueTypes["bigint"] | null,
	minorVersionOXO?:ValueTypes["bigint"] | null,
	minorVersionXOO?:ValueTypes["bigint"] | null,
	notifying?:boolean | null,
	patchUrl?:string | null,
	releaseDate?:ValueTypes["date"] | null,
	url?:string | null,
	versionCodeId?:ValueTypes["bigint"] | null,
	visible?:boolean | null
}
  }

export type ModelTypes = {
    ["AcceptMembershipInvitationOutput"]: {
		membershipId:number,
	token:string
};
	["ActivateMembershipOutput"]: {
		membershipId:number,
	status:string
};
	["AddEnhancementToken"]: {
		token:string
};
	["AddFreeClipartResponse"]: {
		salesItemProductId:ModelTypes["bigint"]
};
	["AddLicenceOutput"]: {
		orderId:string
};
	["AddTestBundleOutput"]: {
		partnerId:ModelTypes["bigint"]
};
	["AddTrialOrderAction"]: {
		orderId:ModelTypes["bigint"]
};
	["AddUpgradeToken"]: {
		token:string
};
	["AllocateLicenceResponse"]: {
		/** An array relationship */
	allocationBatch:ModelTypes["vectric_sales_oem_bundles"][],
	/** An aggregate relationship */
	allocationBatch_aggregate:ModelTypes["vectric_sales_oem_bundles_aggregate"],
	batchId?:string
};
	["AssignmentOutput"]: {
		assigned:boolean
};
	["CheckEmailForSignUpOutput"]: {
		error?:string
};
	["DeactivateMembershipOutput"]: {
		membershipId:number,
	status:string
};
	["DeclineMembershipInvitationOutput"]: {
		accessToken:string
};
	["DeletedOutput"]: {
		deleted?:string[]
};
	["EmailVerificationOutput"]: {
		verified:boolean
};
	["EvaluationLicenceOutput"]: {
		orderId:string
};
	["FastspringSecureRequestOutput"]: {
		key?:string,
	payload?:string
};
	["ForgotPassword"]: {
		completed:boolean,
	username:string
};
	["GetDownloadLinkForContentProject"]: {
		expires:string,
	object?:string,
	url:string
};
	["GetDownloadLinkForFulfilmentOutput"]: {
		expires:string,
	object:string,
	url?:string
};
	["LicenceDetailsForProductOrderItem"]: {
		licenceCode:string,
	licenceData:string,
	licenceType?:string,
	registeredUsername:string,
	salesItemProductId:ModelTypes["bigint"]
};
	["LicenceDetailsForProductOrderItemAndAddOns"]: {
		licenceCode:string,
	licenceData:string,
	licenceType?:string,
	registeredUsername:string,
	salesItemProductId:ModelTypes["bigint"]
};
	["MembershipInvitationCheckResult"]: {
		customerId?:number,
	existingCustomer:boolean,
	existingUser:boolean,
	used:boolean,
	userInvitationToken?:string,
	valid:boolean
};
	["OemFastspringSecureRequestOutput"]: {
		key?:string,
	payload?:string
};
	["OrganizationAddNewMemberOutput"]: {
		success:boolean
};
	["OrganizationEditMemberOutput"]: {
		success:boolean
};
	["PasswordResetOutput"]: {
		completed:boolean
};
	["ProcessOemStaffInvitationOutput"]: {
		enabledEvaluations:ModelTypes["bigint"],
	staffId:ModelTypes["bigint"]
};
	["RegisterInvite"]: {
		completed:boolean
};
	["RemoveMembershipInvitationOutput"]: {
		membershipId:number
};
	["RemoveMembershipOutput"]: {
		membershipId:string
};
	["RemovePartnerMemberOutput"]: {
		removed:ModelTypes["bigint"]
};
	["SampleOutput"]: {
		output:string
};
	["SecureFSItemsOutput"]: {
		key?:string,
	payload?:string
};
	["SendEmailVerificationOutput"]: {
		sentTo:string
};
	["SendLicenceAllocationEmailResponse"]: {
		sentTo:string
};
	["SignUpOutput"]: {
		email:string,
	password:string
};
	["TestOrderOutput"]: {
		orderId:string
};
	["UnassignItemOutput"]: {
		unassigned:boolean
};
	["UpgradeDetails"]: {
		customerId:number,
	fromProductName:string,
	fromProductVersion:string,
	toProductClipart:boolean,
	toProductFastspringId:string,
	toProductId:number,
	toProductName:string,
	toProductVersion:string,
	upgradeToken:string
};
	["ValidateInvitationToken"]: {
		accepted?:boolean,
	valid:boolean
};
	["ValidateVerificationToken"]: {
		valid:boolean
};
	["ZendeskUploadOutput"]: {
		initialZendeskUploadId?:ModelTypes["bigint"]
};
	/** mutation root */
["mutation_root"]: {
		/** insert data into the table: "vectric.security_emailverificationtokens" */
	InsertSecurityEmailVerificationTokens?:ModelTypes["vectric_security_emailverificationtokens_mutation_response"],
	/** Accepts a membership invitation */
	acceptMembershipInvitation?:ModelTypes["AcceptMembershipInvitationOutput"],
	activateMembership?:ModelTypes["ActivateMembershipOutput"],
	addEnhancementToken?:ModelTypes["AddEnhancementToken"],
	addEvaluationLicence:ModelTypes["EvaluationLicenceOutput"],
	addFreeClipart?:ModelTypes["AddFreeClipartResponse"],
	addLicence?:ModelTypes["AddLicenceOutput"],
	addTestBundles?:ModelTypes["AddTestBundleOutput"],
	addTestOrder?:ModelTypes["TestOrderOutput"],
	addTrialOrderAction?:ModelTypes["AddTrialOrderAction"],
	addUpgradeToken?:ModelTypes["AddUpgradeToken"],
	allocateLicence?:ModelTypes["AllocateLicenceResponse"],
	assignItem?:ModelTypes["AssignmentOutput"],
	deactivateMembership?:ModelTypes["DeactivateMembershipOutput"],
	declineMembershipInvitation?:ModelTypes["DeclineMembershipInvitationOutput"],
	/** delete data from the table: "vectric.allocation_summary" */
	deleteAllocationSummaries?:ModelTypes["vectric_allocation_summary_mutation_response"],
	/** delete single row from the table: "vectric.allocation_summary" */
	deleteAllocationSummaryById?:ModelTypes["vectric_allocation_summary"],
	/** delete single row from the table: "vectric.owned_item_assignments" */
	deleteAssignment?:ModelTypes["vectric_owned_item_assignments"],
	/** delete data from the table: "vectric.owned_item_assignments" */
	deleteAssignments?:ModelTypes["vectric_owned_item_assignments_mutation_response"],
	/** delete data from the table: "vectric.countries" */
	deleteCountries?:ModelTypes["vectric_countries_mutation_response"],
	/** delete single row from the table: "vectric.countries" */
	deleteCountryById?:ModelTypes["vectric_countries"],
	/** delete data from the table: "vectric.customer_area" */
	deleteCustomerArea?:ModelTypes["vectric_customer_area_mutation_response"],
	/** delete single row from the table: "vectric.customer_area" */
	deleteCustomerAreaByPk?:ModelTypes["vectric_customer_area"],
	/** delete data from the table: "vectric.customer_area_file" */
	deleteCustomerAreaFile?:ModelTypes["vectric_customer_area_file_mutation_response"],
	/** delete single row from the table: "vectric.customer_area_file" */
	deleteCustomerAreaFileByPk?:ModelTypes["vectric_customer_area_file"],
	/** delete single row from the table: "vectric.sales_customer_downloads" */
	deleteCustomerDownloadById?:ModelTypes["vectric_sales_customer_downloads"],
	/** delete data from the table: "vectric.sales_customer_downloads" */
	deleteCustomerDownloads?:ModelTypes["vectric_sales_customer_downloads_mutation_response"],
	/** delete single row from the table: "vectric.customer_responses" */
	deleteCustomerResponseById?:ModelTypes["vectric_customer_responses"],
	/** delete data from the table: "vectric.customer_responses" */
	deleteCustomerResponses?:ModelTypes["vectric_customer_responses_mutation_response"],
	/** delete single row from the table: "vectric.sales_velocitytemplate" */
	deleteEmailTemplate?:ModelTypes["vectric_sales_velocitytemplate"],
	/** delete data from the table: "vectric.sales_velocitytemplate" */
	deleteEmailTemplates?:ModelTypes["vectric_sales_velocitytemplate_mutation_response"],
	/** delete single row from the table: "vectric.entitled_products" */
	deleteEntitledProduct?:ModelTypes["vectric_entitled_products"],
	/** delete data from the table: "vectric.entitled_products" */
	deleteEntitledProducts?:ModelTypes["vectric_entitled_products_mutation_response"],
	/** delete single row from the table: "vectric.entitlements" */
	deleteEntitlement?:ModelTypes["vectric_entitlements"],
	/** delete single row from the table: "vectric.entitlement_licences" */
	deleteEntitlementLicence?:ModelTypes["vectric_entitlement_licences"],
	/** delete data from the table: "vectric.entitlement_licences" */
	deleteEntitlementLicences?:ModelTypes["vectric_entitlement_licences_mutation_response"],
	/** delete data from the table: "vectric.entitlements" */
	deleteEntitlements?:ModelTypes["vectric_entitlements_mutation_response"],
	/** delete data from the table: "vectric.oem_eval_request" */
	deleteEvalRequests?:ModelTypes["vectric_oem_eval_request_mutation_response"],
	/** delete single row from the table: "vectric.oem_eval_request" */
	deleteEvalRequestsById?:ModelTypes["vectric_oem_eval_request"],
	/** delete single row from the table: "vectric.memberships" */
	deleteMembershipById?:ModelTypes["vectric_memberships"],
	/** delete single row from the table: "vectric.membership_invitations" */
	deleteMembershipInvitationById?:ModelTypes["vectric_membership_invitations"],
	/** delete data from the table: "vectric.membership_invitations" */
	deleteMembershipInvitations?:ModelTypes["vectric_membership_invitations_mutation_response"],
	/** delete data from the table: "vectric.memberships" */
	deleteMemberships?:ModelTypes["vectric_memberships_mutation_response"],
	/** delete data from the table: "vectric.oem_allocation_emails" */
	deleteOemAllocationEmails?:ModelTypes["vectric_oem_allocation_emails_mutation_response"],
	/** delete data from the table: "vectric.oem_partners" */
	deleteOemPartner?:ModelTypes["vectric_oem_partners_mutation_response"],
	/** delete single row from the table: "vectric.oem_partners" */
	deleteOemPartnerById?:ModelTypes["vectric_oem_partners"],
	/** delete single row from the table: "vectric.oem_staff_customer" */
	deleteOemStaffCustomerById?:ModelTypes["vectric_oem_staff_customer"],
	/** delete data from the table: "vectric.oem_staff_customer" */
	deleteOemStaffCustomers?:ModelTypes["vectric_oem_staff_customer_mutation_response"],
	deleteOrderTree?:ModelTypes["DeletedOutput"],
	/** delete data from the table: "vectric.sales_orders" */
	deleteOrders?:ModelTypes["vectric_sales_orders_mutation_response"],
	/** delete single row from the table: "vectric.sales_orders" */
	deleteOrdersById?:ModelTypes["vectric_sales_orders"],
	/** delete single row from the table: "vectric.organizations" */
	deleteOrganization?:ModelTypes["vectric_organizations"],
	/** delete single row from the table: "vectric.organization_audit" */
	deleteOrganizationAuditById?:ModelTypes["vectric_organization_audit"],
	/** delete data from the table: "vectric.organization_audit" */
	deleteOrganizationAudits?:ModelTypes["vectric_organization_audit_mutation_response"],
	/** delete single row from the table: "vectric.organization_orders" */
	deleteOrganizationOrder?:ModelTypes["vectric_organization_orders"],
	/** delete single row from the table: "vectric.organization_order_items" */
	deleteOrganizationOrderItem?:ModelTypes["vectric_organization_order_items"],
	/** delete data from the table: "vectric.organization_order_items" */
	deleteOrganizationOrderItems?:ModelTypes["vectric_organization_order_items_mutation_response"],
	/** delete data from the table: "vectric.organization_orders" */
	deleteOrganizationOrders?:ModelTypes["vectric_organization_orders_mutation_response"],
	/** delete data from the table: "vectric.organizations" */
	deleteOrganizations?:ModelTypes["vectric_organizations_mutation_response"],
	/** delete single row from the table: "vectric.owned_items" */
	deleteOwnedItem?:ModelTypes["vectric_owned_items"],
	/** delete data from the table: "vectric.owned_items" */
	deleteOwnedItems?:ModelTypes["vectric_owned_items_mutation_response"],
	/** delete single row from the table: "vectric.owned_products" */
	deleteOwnedProduct?:ModelTypes["vectric_owned_products"],
	/** delete data from the table: "vectric.owned_products" */
	deleteOwnedProducts?:ModelTypes["vectric_owned_products_mutation_response"],
	/** delete single row from the table: "vectric.security_passwordresettokens" */
	deletePasswordResetTokenByPk?:ModelTypes["vectric_security_passwordresettokens"],
	/** delete data from the table: "vectric.security_passwordresettokens" */
	deletePasswordResetTokens?:ModelTypes["vectric_security_passwordresettokens_mutation_response"],
	/** delete data from the table: "vectric.products_products" */
	deleteProduct?:ModelTypes["vectric_products_products_mutation_response"],
	/** delete single row from the table: "vectric.products_products" */
	deleteProductById?:ModelTypes["vectric_products_products"],
	/** delete data from the table: "vectric.products_producttype" */
	deleteProductType?:ModelTypes["vectric_products_producttype_mutation_response"],
	/** delete single row from the table: "vectric.products_producttype" */
	deleteProductTypeById?:ModelTypes["vectric_products_producttype"],
	/** delete single row from the table: "vectric.products_upgrade_eligibility" */
	deleteProductUpgradeEligibility?:ModelTypes["vectric_products_upgrade_eligibility"],
	/** delete data from the table: "vectric.products_upgrade_eligibility" */
	deleteProductsUpgradeEligibility?:ModelTypes["vectric_products_upgrade_eligibility_mutation_response"],
	/** delete single row from the table: "vectric.oem_purchase_options" */
	deletePurchaseOptionByOptionId?:ModelTypes["vectric_oem_purchase_options"],
	/** delete data from the table: "vectric.oem_purchase_options" */
	deletePurchaseOptions?:ModelTypes["vectric_oem_purchase_options_mutation_response"],
	/** delete single row from the table: "vectric.questions" */
	deleteQuestionById?:ModelTypes["vectric_questions"],
	/** delete data from the table: "vectric.questions" */
	deleteQuestions?:ModelTypes["vectric_questions_mutation_response"],
	/** delete single row from the table: "vectric.responses" */
	deleteResponseById?:ModelTypes["vectric_responses"],
	/** delete data from the table: "vectric.responses" */
	deleteResponses?:ModelTypes["vectric_responses_mutation_response"],
	/** delete single row from the table: "vectric.saleable_products" */
	deleteSaleableProduct?:ModelTypes["vectric_saleable_products"],
	/** delete data from the table: "vectric.saleable_products" */
	deleteSaleableProducts?:ModelTypes["vectric_saleable_products_mutation_response"],
	/** delete single row from the table: "vectric.sales_customers" */
	deleteSalesCustomerByPk?:ModelTypes["vectric_sales_customers"],
	/** delete data from the table: "vectric.sales_customers" */
	deleteSalesCustomers?:ModelTypes["vectric_sales_customers_mutation_response"],
	/** delete single row from the table: "vectric.sales_salesitems" */
	deleteSalesItemById?:ModelTypes["vectric_sales_salesitems"],
	/** delete data from the table: "vectric.sales_salesitem_products" */
	deleteSalesItemProduct?:ModelTypes["vectric_sales_salesitem_products_mutation_response"],
	/** delete single row from the table: "vectric.sales_salesitem_products" */
	deleteSalesItemProductById?:ModelTypes["vectric_sales_salesitem_products"],
	/** delete data from the table: "vectric.sales_salesitems" */
	deleteSalesItems?:ModelTypes["vectric_sales_salesitems_mutation_response"],
	/** delete single row from the table: "vectric.sales_oem_bundles" */
	deleteSalesOEMBundleById?:ModelTypes["vectric_sales_oem_bundles"],
	/** delete data from the table: "vectric.sales_oem_bundles" */
	deleteSalesOemBundle?:ModelTypes["vectric_sales_oem_bundles_mutation_response"],
	/** delete single row from the table: "vectric.sales_oemlicences" */
	deleteSalesOemLicenceById?:ModelTypes["vectric_sales_oemlicences"],
	/** delete data from the table: "vectric.sales_oemlicences" */
	deleteSalesOemLicences?:ModelTypes["vectric_sales_oemlicences_mutation_response"],
	/** delete single row from the table: "vectric.scheduled_emails" */
	deleteScheduledEmailById?:ModelTypes["vectric_scheduled_emails"],
	/** delete data from the table: "vectric.scheduled_emails" */
	deleteScheduledEmails?:ModelTypes["vectric_scheduled_emails_mutation_response"],
	/** delete single row from the table: "vectric.security_group_members" */
	deleteSecurityGroupMemberById?:ModelTypes["vectric_security_group_members"],
	/** delete data from the table: "vectric.security_group_members" */
	deleteSecurityGroupMembers?:ModelTypes["vectric_security_group_members_mutation_response"],
	/** delete single row from the table: "vectric.site_options" */
	deleteSiteOptionById?:ModelTypes["vectric_site_options"],
	/** delete single row from the table: "vectric.site_option_location" */
	deleteSiteOptionLocationById?:ModelTypes["vectric_site_option_location"],
	/** delete data from the table: "vectric.site_option_location" */
	deleteSiteOptionLocations?:ModelTypes["vectric_site_option_location_mutation_response"],
	/** delete data from the table: "vectric.site_options" */
	deleteSiteOptions?:ModelTypes["vectric_site_options_mutation_response"],
	/** delete single row from the table: "vectric.toolpath_saver_token" */
	deleteToolpathSaveTokenById?:ModelTypes["vectric_toolpath_saver_token"],
	/** delete data from the table: "vectric.toolpath_saver_token" */
	deleteToolpathSaverTokens?:ModelTypes["vectric_toolpath_saver_token_mutation_response"],
	/** delete single row from the table: "vectric.trial_order" */
	deleteTrialOrderById?:ModelTypes["vectric_trial_order"],
	/** delete data from the table: "vectric.trial_order" */
	deleteTrialOrders?:ModelTypes["vectric_trial_order_mutation_response"],
	/** delete single row from the table: "vectric.update_requests" */
	deleteUpdateRequestById?:ModelTypes["vectric_update_requests"],
	/** delete data from the table: "vectric.update_requests" */
	deleteUpdateRequests?:ModelTypes["vectric_update_requests_mutation_response"],
	/** delete single row from the table: "vectric.upgrades_feature" */
	deleteUpgradeFeatureById?:ModelTypes["vectric_upgrades_feature"],
	/** delete data from the table: "vectric.upgrades_feature" */
	deleteUpgradeFeatures?:ModelTypes["vectric_upgrades_feature_mutation_response"],
	/** delete single row from the table: "vectric.upgrades_product_type_feature" */
	deleteUpgradeProductTypeFeatureById?:ModelTypes["vectric_upgrades_product_type_feature"],
	/** delete data from the table: "vectric.upgrades_product_type_feature" */
	deleteUpgradeProductTypeFeatures?:ModelTypes["vectric_upgrades_product_type_feature_mutation_response"],
	/** delete single row from the table: "vectric.upgrades_version_feature" */
	deleteUpgradeVersionFeatureById?:ModelTypes["vectric_upgrades_version_feature"],
	/** delete data from the table: "vectric.upgrades_version_feature" */
	deleteUpgradeVersionFeatures?:ModelTypes["vectric_upgrades_version_feature_mutation_response"],
	/** delete single row from the table: "vectric.usergroup_2019_attendees" */
	deleteUserGroupAttendeeById?:ModelTypes["vectric_usergroup_2019_attendees"],
	/** delete data from the table: "vectric.usergroup_2019_attendees" */
	deleteUserGroupAttendees?:ModelTypes["vectric_usergroup_2019_attendees_mutation_response"],
	/** delete data from the table: "vectric.usergroup_2019_waitlist" */
	deleteUserGroupWaitingListEntries?:ModelTypes["vectric_usergroup_2019_waitlist_mutation_response"],
	/** delete single row from the table: "vectric.usergroup_2019_waitlist" */
	deleteUserGroupWaitingListEntryById?:ModelTypes["vectric_usergroup_2019_waitlist"],
	/** delete single row from the table: "vectric.products_versioncodes" */
	deleteVersionCodeById?:ModelTypes["vectric_products_versioncodes"],
	/** delete data from the table: "vectric.products_versioncodes" */
	deleteVersionCodes?:ModelTypes["vectric_products_versioncodes_mutation_response"],
	/** delete single row from the table: "vectric.customer_zd_uploads" */
	deleteZendeskUploadById?:ModelTypes["vectric_customer_zd_uploads"],
	/** delete data from the table: "vectric.customer_zd_uploads" */
	deleteZendeskUploads?:ModelTypes["vectric_customer_zd_uploads_mutation_response"],
	/** delete data from the table: "vectric.allocatable_bundles" */
	delete_vectric_allocatable_bundles?:ModelTypes["vectric_allocatable_bundles_mutation_response"],
	/** delete data from the table: "vectric.allocated_bundles" */
	delete_vectric_allocated_bundles?:ModelTypes["vectric_allocated_bundles_mutation_response"],
	/** delete data from the table: "vectric.allocation_summary_file_type" */
	delete_vectric_allocation_summary_file_type?:ModelTypes["vectric_allocation_summary_file_type_mutation_response"],
	/** delete single row from the table: "vectric.allocation_summary_file_type" */
	delete_vectric_allocation_summary_file_type_by_pk?:ModelTypes["vectric_allocation_summary_file_type"],
	/** delete data from the table: "vectric.continents" */
	delete_vectric_continents?:ModelTypes["vectric_continents_mutation_response"],
	/** delete single row from the table: "vectric.continents" */
	delete_vectric_continents_by_pk?:ModelTypes["vectric_continents"],
	/** delete data from the table: "vectric.customer_sales" */
	delete_vectric_customer_sales?:ModelTypes["vectric_customer_sales_mutation_response"],
	/** delete data from the table: "vectric.customer_status" */
	delete_vectric_customer_status?:ModelTypes["vectric_customer_status_mutation_response"],
	/** delete single row from the table: "vectric.customer_status" */
	delete_vectric_customer_status_by_pk?:ModelTypes["vectric_customer_status"],
	/** delete data from the table: "vectric.download" */
	delete_vectric_download?:ModelTypes["vectric_download_mutation_response"],
	/** delete single row from the table: "vectric.download" */
	delete_vectric_download_by_pk?:ModelTypes["vectric_download"],
	/** delete data from the table: "vectric.download_record" */
	delete_vectric_download_record?:ModelTypes["vectric_download_record_mutation_response"],
	/** delete single row from the table: "vectric.download_record" */
	delete_vectric_download_record_by_pk?:ModelTypes["vectric_download_record"],
	/** delete data from the table: "vectric.enhancement_tokens" */
	delete_vectric_enhancement_tokens?:ModelTypes["vectric_enhancement_tokens_mutation_response"],
	/** delete single row from the table: "vectric.enhancement_tokens" */
	delete_vectric_enhancement_tokens_by_pk?:ModelTypes["vectric_enhancement_tokens"],
	/** delete data from the table: "vectric.free_clipart_tokens" */
	delete_vectric_free_clipart_tokens?:ModelTypes["vectric_free_clipart_tokens_mutation_response"],
	/** delete single row from the table: "vectric.free_clipart_tokens" */
	delete_vectric_free_clipart_tokens_by_pk?:ModelTypes["vectric_free_clipart_tokens"],
	/** delete data from the table: "vectric.freeclipart" */
	delete_vectric_freeclipart?:ModelTypes["vectric_freeclipart_mutation_response"],
	/** delete single row from the table: "vectric.freeclipart" */
	delete_vectric_freeclipart_by_pk?:ModelTypes["vectric_freeclipart"],
	/** delete data from the table: "vectric.freeclipart_category" */
	delete_vectric_freeclipart_category?:ModelTypes["vectric_freeclipart_category_mutation_response"],
	/** delete single row from the table: "vectric.freeclipart_category" */
	delete_vectric_freeclipart_category_by_pk?:ModelTypes["vectric_freeclipart_category"],
	/** delete data from the table: "vectric.freeclipart_download_record" */
	delete_vectric_freeclipart_download_record?:ModelTypes["vectric_freeclipart_download_record_mutation_response"],
	/** delete single row from the table: "vectric.freeclipart_download_record" */
	delete_vectric_freeclipart_download_record_by_pk?:ModelTypes["vectric_freeclipart_download_record"],
	/** delete data from the table: "vectric.group_roles" */
	delete_vectric_group_roles?:ModelTypes["vectric_group_roles_mutation_response"],
	/** delete single row from the table: "vectric.group_roles" */
	delete_vectric_group_roles_by_pk?:ModelTypes["vectric_group_roles"],
	/** delete data from the table: "vectric.group_user_role" */
	delete_vectric_group_user_role?:ModelTypes["vectric_group_user_role_mutation_response"],
	/** delete single row from the table: "vectric.group_user_role" */
	delete_vectric_group_user_role_by_pk?:ModelTypes["vectric_group_user_role"],
	/** delete data from the table: "vectric.groups" */
	delete_vectric_groups?:ModelTypes["vectric_groups_mutation_response"],
	/** delete single row from the table: "vectric.groups" */
	delete_vectric_groups_by_pk?:ModelTypes["vectric_groups"],
	/** delete data from the table: "vectric.language_codes" */
	delete_vectric_language_codes?:ModelTypes["vectric_language_codes_mutation_response"],
	/** delete single row from the table: "vectric.language_codes" */
	delete_vectric_language_codes_by_pk?:ModelTypes["vectric_language_codes"],
	/** delete data from the table: "vectric.licence_log" */
	delete_vectric_licence_log?:ModelTypes["vectric_licence_log_mutation_response"],
	/** delete single row from the table: "vectric.licence_log" */
	delete_vectric_licence_log_by_pk?:ModelTypes["vectric_licence_log"],
	/** delete data from the table: "vectric.linkshortener_links" */
	delete_vectric_linkshortener_links?:ModelTypes["vectric_linkshortener_links_mutation_response"],
	/** delete single row from the table: "vectric.linkshortener_links" */
	delete_vectric_linkshortener_links_by_pk?:ModelTypes["vectric_linkshortener_links"],
	/** delete data from the table: "vectric.makerspace_requests" */
	delete_vectric_makerspace_requests?:ModelTypes["vectric_makerspace_requests_mutation_response"],
	/** delete single row from the table: "vectric.makerspace_requests" */
	delete_vectric_makerspace_requests_by_pk?:ModelTypes["vectric_makerspace_requests"],
	/** delete data from the table: "vectric.membership_invitation_status" */
	delete_vectric_membership_invitation_status?:ModelTypes["vectric_membership_invitation_status_mutation_response"],
	/** delete single row from the table: "vectric.membership_invitation_status" */
	delete_vectric_membership_invitation_status_by_pk?:ModelTypes["vectric_membership_invitation_status"],
	/** delete data from the table: "vectric.membership_roles" */
	delete_vectric_membership_roles?:ModelTypes["vectric_membership_roles_mutation_response"],
	/** delete single row from the table: "vectric.membership_roles" */
	delete_vectric_membership_roles_by_pk?:ModelTypes["vectric_membership_roles"],
	/** delete data from the table: "vectric.membership_status" */
	delete_vectric_membership_status?:ModelTypes["vectric_membership_status_mutation_response"],
	/** delete single row from the table: "vectric.membership_status" */
	delete_vectric_membership_status_by_pk?:ModelTypes["vectric_membership_status"],
	/** delete data from the table: "vectric.oauth_client_details" */
	delete_vectric_oauth_client_details?:ModelTypes["vectric_oauth_client_details_mutation_response"],
	/** delete single row from the table: "vectric.oauth_client_details" */
	delete_vectric_oauth_client_details_by_pk?:ModelTypes["vectric_oauth_client_details"],
	/** delete data from the table: "vectric.oem_detailed_products" */
	delete_vectric_oem_detailed_products?:ModelTypes["vectric_oem_detailed_products_mutation_response"],
	/** delete single row from the table: "vectric.oem_detailed_products" */
	delete_vectric_oem_detailed_products_by_pk?:ModelTypes["vectric_oem_detailed_products"],
	/** delete data from the table: "vectric.oem_fastspring_item" */
	delete_vectric_oem_fastspring_item?:ModelTypes["vectric_oem_fastspring_item_mutation_response"],
	/** delete data from the table: "vectric.oem_fastspring_item_bundle" */
	delete_vectric_oem_fastspring_item_bundle?:ModelTypes["vectric_oem_fastspring_item_bundle_mutation_response"],
	/** delete single row from the table: "vectric.oem_fastspring_item_bundle" */
	delete_vectric_oem_fastspring_item_bundle_by_pk?:ModelTypes["vectric_oem_fastspring_item_bundle"],
	/** delete single row from the table: "vectric.oem_fastspring_item" */
	delete_vectric_oem_fastspring_item_by_pk?:ModelTypes["vectric_oem_fastspring_item"],
	/** delete data from the table: "vectric.oem_fastspring_order" */
	delete_vectric_oem_fastspring_order?:ModelTypes["vectric_oem_fastspring_order_mutation_response"],
	/** delete single row from the table: "vectric.oem_fastspring_order" */
	delete_vectric_oem_fastspring_order_by_pk?:ModelTypes["vectric_oem_fastspring_order"],
	/** delete data from the table: "vectric.oem_invite_status" */
	delete_vectric_oem_invite_status?:ModelTypes["vectric_oem_invite_status_mutation_response"],
	/** delete single row from the table: "vectric.oem_invite_status" */
	delete_vectric_oem_invite_status_by_pk?:ModelTypes["vectric_oem_invite_status"],
	/** delete data from the table: "vectric.oem_licence_allocation_type" */
	delete_vectric_oem_licence_allocation_type?:ModelTypes["vectric_oem_licence_allocation_type_mutation_response"],
	/** delete single row from the table: "vectric.oem_licence_allocation_type" */
	delete_vectric_oem_licence_allocation_type_by_pk?:ModelTypes["vectric_oem_licence_allocation_type"],
	/** delete data from the table: "vectric.oem_products" */
	delete_vectric_oem_products?:ModelTypes["vectric_oem_products_mutation_response"],
	/** delete single row from the table: "vectric.oem_products" */
	delete_vectric_oem_products_by_pk?:ModelTypes["vectric_oem_products"],
	/** delete data from the table: "vectric.organization_licence_scope" */
	delete_vectric_organization_licence_scope?:ModelTypes["vectric_organization_licence_scope_mutation_response"],
	/** delete single row from the table: "vectric.organization_licence_scope" */
	delete_vectric_organization_licence_scope_by_pk?:ModelTypes["vectric_organization_licence_scope"],
	/** delete data from the table: "vectric.organization_types" */
	delete_vectric_organization_types?:ModelTypes["vectric_organization_types_mutation_response"],
	/** delete single row from the table: "vectric.organization_types" */
	delete_vectric_organization_types_by_pk?:ModelTypes["vectric_organization_types"],
	/** delete data from the table: "vectric.products_clipartcollection_links" */
	delete_vectric_products_clipartcollection_links?:ModelTypes["vectric_products_clipartcollection_links_mutation_response"],
	/** delete single row from the table: "vectric.products_clipartcollection_links" */
	delete_vectric_products_clipartcollection_links_by_pk?:ModelTypes["vectric_products_clipartcollection_links"],
	/** delete data from the table: "vectric.products_enhancement_eligibility" */
	delete_vectric_products_enhancement_eligibility?:ModelTypes["vectric_products_enhancement_eligibility_mutation_response"],
	/** delete single row from the table: "vectric.products_enhancement_eligibility" */
	delete_vectric_products_enhancement_eligibility_by_pk?:ModelTypes["vectric_products_enhancement_eligibility"],
	/** delete data from the table: "vectric.products_freeclipart" */
	delete_vectric_products_freeclipart?:ModelTypes["vectric_products_freeclipart_mutation_response"],
	/** delete single row from the table: "vectric.products_freeclipart" */
	delete_vectric_products_freeclipart_by_pk?:ModelTypes["vectric_products_freeclipart"],
	/** delete data from the table: "vectric.products_fulfilments" */
	delete_vectric_products_fulfilments?:ModelTypes["vectric_products_fulfilments_mutation_response"],
	/** delete single row from the table: "vectric.products_fulfilments" */
	delete_vectric_products_fulfilments_by_pk?:ModelTypes["vectric_products_fulfilments"],
	/** delete data from the table: "vectric.products_fulfilmenttypes" */
	delete_vectric_products_fulfilmenttypes?:ModelTypes["vectric_products_fulfilmenttypes_mutation_response"],
	/** delete single row from the table: "vectric.products_fulfilmenttypes" */
	delete_vectric_products_fulfilmenttypes_by_pk?:ModelTypes["vectric_products_fulfilmenttypes"],
	/** delete data from the table: "vectric.products_product_fulfilments" */
	delete_vectric_products_product_fulfilments?:ModelTypes["vectric_products_product_fulfilments_mutation_response"],
	/** delete single row from the table: "vectric.products_product_fulfilments" */
	delete_vectric_products_product_fulfilments_by_pk?:ModelTypes["vectric_products_product_fulfilments"],
	/** delete data from the table: "vectric.products_product_licence_type" */
	delete_vectric_products_product_licence_type?:ModelTypes["vectric_products_product_licence_type_mutation_response"],
	/** delete single row from the table: "vectric.products_product_licence_type" */
	delete_vectric_products_product_licence_type_by_pk?:ModelTypes["vectric_products_product_licence_type"],
	/** delete data from the table: "vectric.sales_customerupdates" */
	delete_vectric_sales_customerupdates?:ModelTypes["vectric_sales_customerupdates_mutation_response"],
	/** delete single row from the table: "vectric.sales_customerupdates" */
	delete_vectric_sales_customerupdates_by_pk?:ModelTypes["vectric_sales_customerupdates"],
	/** delete data from the table: "vectric.sales_salesitemproduct_status" */
	delete_vectric_sales_salesitemproduct_status?:ModelTypes["vectric_sales_salesitemproduct_status_mutation_response"],
	/** delete single row from the table: "vectric.sales_salesitemproduct_status" */
	delete_vectric_sales_salesitemproduct_status_by_pk?:ModelTypes["vectric_sales_salesitemproduct_status"],
	/** delete data from the table: "vectric.security_emailverificationtokens" */
	delete_vectric_security_emailverificationtokens?:ModelTypes["vectric_security_emailverificationtokens_mutation_response"],
	/** delete single row from the table: "vectric.security_emailverificationtokens" */
	delete_vectric_security_emailverificationtokens_by_pk?:ModelTypes["vectric_security_emailverificationtokens"],
	/** delete data from the table: "vectric.security_group_authorities" */
	delete_vectric_security_group_authorities?:ModelTypes["vectric_security_group_authorities_mutation_response"],
	/** delete data from the table: "vectric.security_userinvitations" */
	delete_vectric_security_userinvitations?:ModelTypes["vectric_security_userinvitations_mutation_response"],
	/** delete single row from the table: "vectric.security_userinvitations" */
	delete_vectric_security_userinvitations_by_pk?:ModelTypes["vectric_security_userinvitations"],
	/** delete data from the table: "vectric.security_users" */
	delete_vectric_security_users?:ModelTypes["vectric_security_users_mutation_response"],
	/** delete single row from the table: "vectric.security_users" */
	delete_vectric_security_users_by_pk?:ModelTypes["vectric_security_users"],
	/** delete data from the table: "vectric.subscription_contract_status" */
	delete_vectric_subscription_contract_status?:ModelTypes["vectric_subscription_contract_status_mutation_response"],
	/** delete single row from the table: "vectric.subscription_contract_status" */
	delete_vectric_subscription_contract_status_by_pk?:ModelTypes["vectric_subscription_contract_status"],
	/** delete data from the table: "vectric.subscription_contracts" */
	delete_vectric_subscription_contracts?:ModelTypes["vectric_subscription_contracts_mutation_response"],
	/** delete single row from the table: "vectric.subscription_contracts" */
	delete_vectric_subscription_contracts_by_pk?:ModelTypes["vectric_subscription_contracts"],
	/** delete data from the table: "vectric.subscription_events" */
	delete_vectric_subscription_events?:ModelTypes["vectric_subscription_events_mutation_response"],
	/** delete single row from the table: "vectric.subscription_events" */
	delete_vectric_subscription_events_by_pk?:ModelTypes["vectric_subscription_events"],
	/** delete data from the table: "vectric.upgrade_tokens" */
	delete_vectric_upgrade_tokens?:ModelTypes["vectric_upgrade_tokens_mutation_response"],
	/** delete single row from the table: "vectric.upgrade_tokens" */
	delete_vectric_upgrade_tokens_by_pk?:ModelTypes["vectric_upgrade_tokens"],
	/** delete data from the table: "vectric.version_code" */
	delete_vectric_version_code?:ModelTypes["vectric_version_code_mutation_response"],
	/** delete single row from the table: "vectric.version_code" */
	delete_vectric_version_code_by_pk?:ModelTypes["vectric_version_code"],
	forgotPassword?:ModelTypes["ForgotPassword"],
	/** insert data into the table: "vectric.allocation_summary" */
	insertAllocationSummaries?:ModelTypes["vectric_allocation_summary_mutation_response"],
	/** insert a single row into the table: "vectric.owned_item_assignments" */
	insertAssignment?:ModelTypes["vectric_owned_item_assignments"],
	/** insert data into the table: "vectric.owned_item_assignments" */
	insertAssignments?:ModelTypes["vectric_owned_item_assignments_mutation_response"],
	/** insert data into the table: "vectric.countries" */
	insertCountries?:ModelTypes["vectric_countries_mutation_response"],
	/** insert a single row into the table: "vectric.customer_area" */
	insertCustomerArea?:ModelTypes["vectric_customer_area"],
	/** insert a single row into the table: "vectric.customer_area_file" */
	insertCustomerAreaFile?:ModelTypes["vectric_customer_area_file"],
	/** insert data into the table: "vectric.customer_area_file" */
	insertCustomerAreaFiles?:ModelTypes["vectric_customer_area_file_mutation_response"],
	/** insert data into the table: "vectric.customer_area" */
	insertCustomerAreas?:ModelTypes["vectric_customer_area_mutation_response"],
	/** insert data into the table: "vectric.sales_customer_downloads" */
	insertCustomerDownloads?:ModelTypes["vectric_sales_customer_downloads_mutation_response"],
	/** insert data into the table: "vectric.customer_responses" */
	insertCustomerResponses?:ModelTypes["vectric_customer_responses_mutation_response"],
	/** insert a single row into the table: "vectric.download" */
	insertDownload?:ModelTypes["vectric_download"],
	/** insert a single row into the table: "vectric.download_record" */
	insertDownloadRecord?:ModelTypes["vectric_download_record"],
	/** insert a single row into the table: "vectric.sales_velocitytemplate" */
	insertEmailTemplate?:ModelTypes["vectric_sales_velocitytemplate"],
	/** insert data into the table: "vectric.sales_velocitytemplate" */
	insertEmailTemplates?:ModelTypes["vectric_sales_velocitytemplate_mutation_response"],
	/** insert a single row into the table: "vectric.enhancement_tokens" */
	insertEnhancementToken?:ModelTypes["vectric_enhancement_tokens"],
	/** insert data into the table: "vectric.enhancement_tokens" */
	insertEnhancementTokens?:ModelTypes["vectric_enhancement_tokens_mutation_response"],
	/** insert a single row into the table: "vectric.entitled_products" */
	insertEntitledProduct?:ModelTypes["vectric_entitled_products"],
	/** insert data into the table: "vectric.entitled_products" */
	insertEntitledProducts?:ModelTypes["vectric_entitled_products_mutation_response"],
	/** insert a single row into the table: "vectric.entitlements" */
	insertEntitlement?:ModelTypes["vectric_entitlements"],
	/** insert a single row into the table: "vectric.entitlement_licences" */
	insertEntitlementLicence?:ModelTypes["vectric_entitlement_licences"],
	/** insert data into the table: "vectric.entitlement_licences" */
	insertEntitlementLicences?:ModelTypes["vectric_entitlement_licences_mutation_response"],
	/** insert data into the table: "vectric.entitlements" */
	insertEntitlements?:ModelTypes["vectric_entitlements_mutation_response"],
	/** insert data into the table: "vectric.oem_eval_request" */
	insertEvalRequests?:ModelTypes["vectric_oem_eval_request_mutation_response"],
	/** insert a single row into the table: "vectric.freeclipart_download_record" */
	insertFreeClipartDownloadRecord?:ModelTypes["vectric_freeclipart_download_record"],
	/** insert data into the table: "vectric.freeclipart_download_record" */
	insertFreeClipartDownloadRecords?:ModelTypes["vectric_freeclipart_download_record_mutation_response"],
	/** insert a single row into the table: "vectric.free_clipart_tokens" */
	insertFreeClipartToken?:ModelTypes["vectric_free_clipart_tokens"],
	/** insert data into the table: "vectric.free_clipart_tokens" */
	insertFreeClipartTokens?:ModelTypes["vectric_free_clipart_tokens_mutation_response"],
	/** insert a single row into the table: "vectric.organization_licence_scope" */
	insertLicenceScope?:ModelTypes["vectric_organization_licence_scope"],
	/** insert data into the table: "vectric.organization_licence_scope" */
	insertLicenceScopes?:ModelTypes["vectric_organization_licence_scope_mutation_response"],
	/** insert a single row into the table: "vectric.makerspace_requests" */
	insertMakerspaceRequest?:ModelTypes["vectric_makerspace_requests"],
	/** insert data into the table: "vectric.membership_invitations" */
	insertMembershipInvitations?:ModelTypes["vectric_membership_invitations_mutation_response"],
	/** insert data into the table: "vectric.memberships" */
	insertMemberships?:ModelTypes["vectric_memberships_mutation_response"],
	/** insert data into the table: "vectric.oem_allocation_emails" */
	insertOemAllocationEmails?:ModelTypes["vectric_oem_allocation_emails_mutation_response"],
	/** insert data into the table: "vectric.oem_partners" */
	insertOemPartner?:ModelTypes["vectric_oem_partners_mutation_response"],
	/** insert data into the table: "vectric.oem_staff_customer" */
	insertOemStaffCustomers?:ModelTypes["vectric_oem_staff_customer_mutation_response"],
	/** insert a single row into the table: "vectric.allocation_summary" */
	insertOneAllocationSummary?:ModelTypes["vectric_allocation_summary"],
	/** insert a single row into the table: "vectric.countries" */
	insertOneCountry?:ModelTypes["vectric_countries"],
	/** insert a single row into the table: "vectric.sales_customer_downloads" */
	insertOneCustomerDownload?:ModelTypes["vectric_sales_customer_downloads"],
	/** insert a single row into the table: "vectric.customer_responses" */
	insertOneCustomerResponse?:ModelTypes["vectric_customer_responses"],
	/** insert a single row into the table: "vectric.oem_eval_request" */
	insertOneEvalRequest?:ModelTypes["vectric_oem_eval_request"],
	/** insert a single row into the table: "vectric.memberships" */
	insertOneMembership?:ModelTypes["vectric_memberships"],
	/** insert a single row into the table: "vectric.membership_invitations" */
	insertOneMembershipInvitation?:ModelTypes["vectric_membership_invitations"],
	/** insert a single row into the table: "vectric.oem_allocation_emails" */
	insertOneOemAllocationEmail?:ModelTypes["vectric_oem_allocation_emails"],
	/** insert a single row into the table: "vectric.oem_partners" */
	insertOneOemPartner?:ModelTypes["vectric_oem_partners"],
	/** insert a single row into the table: "vectric.oem_staff_customer" */
	insertOneOemStaffCustomer?:ModelTypes["vectric_oem_staff_customer"],
	/** insert a single row into the table: "vectric.sales_orders" */
	insertOneOrder?:ModelTypes["vectric_sales_orders"],
	/** insert a single row into the table: "vectric.organization_audit" */
	insertOneOrganizationAudit?:ModelTypes["vectric_organization_audit"],
	/** insert a single row into the table: "vectric.owned_items" */
	insertOneOwnedItem?:ModelTypes["vectric_owned_items"],
	/** insert a single row into the table: "vectric.security_passwordresettokens" */
	insertOnePasswordResetToken?:ModelTypes["vectric_security_passwordresettokens"],
	/** insert a single row into the table: "vectric.products_products" */
	insertOneProduct?:ModelTypes["vectric_products_products"],
	/** insert a single row into the table: "vectric.products_producttype" */
	insertOneProductType?:ModelTypes["vectric_products_producttype"],
	/** insert a single row into the table: "vectric.products_upgrade_eligibility" */
	insertOneProductUpgradeEligibility?:ModelTypes["vectric_products_upgrade_eligibility"],
	/** insert a single row into the table: "vectric.oem_purchase_options" */
	insertOnePurchaseOption?:ModelTypes["vectric_oem_purchase_options"],
	/** insert a single row into the table: "vectric.questions" */
	insertOneQuestion?:ModelTypes["vectric_questions"],
	/** insert a single row into the table: "vectric.responses" */
	insertOneResponse?:ModelTypes["vectric_responses"],
	/** insert a single row into the table: "vectric.sales_salesitems" */
	insertOneSalesItem?:ModelTypes["vectric_sales_salesitems"],
	/** insert a single row into the table: "vectric.sales_salesitem_products" */
	insertOneSalesItemProduct?:ModelTypes["vectric_sales_salesitem_products"],
	/** insert a single row into the table: "vectric.sales_oem_bundles" */
	insertOneSalesOemBundle?:ModelTypes["vectric_sales_oem_bundles"],
	/** insert a single row into the table: "vectric.site_options" */
	insertOneSiteOption?:ModelTypes["vectric_site_options"],
	/** insert a single row into the table: "vectric.site_option_location" */
	insertOneSiteOptionLocation?:ModelTypes["vectric_site_option_location"],
	/** insert a single row into the table: "vectric.trial_order" */
	insertOneTrialOrder?:ModelTypes["vectric_trial_order"],
	/** insert a single row into the table: "vectric.update_requests" */
	insertOneUpdateRequest?:ModelTypes["vectric_update_requests"],
	/** insert a single row into the table: "vectric.upgrades_feature" */
	insertOneUpgradeFeature?:ModelTypes["vectric_upgrades_feature"],
	/** insert a single row into the table: "vectric.upgrades_product_type_feature" */
	insertOneUpgradeProductTypeFeatureById?:ModelTypes["vectric_upgrades_product_type_feature"],
	/** insert a single row into the table: "vectric.upgrades_version_feature" */
	insertOneUpgradeVersionFeatureById?:ModelTypes["vectric_upgrades_version_feature"],
	/** insert a single row into the table: "vectric.usergroup_2019_attendees" */
	insertOneUserGroupAttendee?:ModelTypes["vectric_usergroup_2019_attendees"],
	/** insert a single row into the table: "vectric.usergroup_2019_waitlist" */
	insertOneUserGroupWaitingListEntry?:ModelTypes["vectric_usergroup_2019_waitlist"],
	/** insert a single row into the table: "vectric.products_versioncodes" */
	insertOneVersionCode?:ModelTypes["vectric_products_versioncodes"],
	/** insert a single row into the table: "vectric.customer_zd_uploads" */
	insertOneZendeskUpload?:ModelTypes["vectric_customer_zd_uploads"],
	/** insert data into the table: "vectric.sales_orders" */
	insertOrders?:ModelTypes["vectric_sales_orders_mutation_response"],
	/** insert a single row into the table: "vectric.organizations" */
	insertOrganization?:ModelTypes["vectric_organizations"],
	/** insert data into the table: "vectric.organization_audit" */
	insertOrganizationAudits?:ModelTypes["vectric_organization_audit_mutation_response"],
	/** insert a single row into the table: "vectric.organization_orders" */
	insertOrganizationOrder?:ModelTypes["vectric_organization_orders"],
	/** insert a single row into the table: "vectric.organization_order_items" */
	insertOrganizationOrderItem?:ModelTypes["vectric_organization_order_items"],
	/** insert data into the table: "vectric.organization_order_items" */
	insertOrganizationOrderItems?:ModelTypes["vectric_organization_order_items_mutation_response"],
	/** insert data into the table: "vectric.organization_orders" */
	insertOrganizationOrders?:ModelTypes["vectric_organization_orders_mutation_response"],
	/** insert data into the table: "vectric.organizations" */
	insertOrganizations?:ModelTypes["vectric_organizations_mutation_response"],
	/** insert data into the table: "vectric.owned_items" */
	insertOwnedItem?:ModelTypes["vectric_owned_items_mutation_response"],
	/** insert a single row into the table: "vectric.owned_products" */
	insertOwnedProduct?:ModelTypes["vectric_owned_products"],
	/** insert data into the table: "vectric.owned_products" */
	insertOwnedProducts?:ModelTypes["vectric_owned_products_mutation_response"],
	/** insert data into the table: "vectric.security_passwordresettokens" */
	insertPasswordResetTokens?:ModelTypes["vectric_security_passwordresettokens_mutation_response"],
	/** insert data into the table: "vectric.products_producttype" */
	insertProductTypes?:ModelTypes["vectric_products_producttype_mutation_response"],
	/** insert data into the table: "vectric.products_products" */
	insertProducts?:ModelTypes["vectric_products_products_mutation_response"],
	/** insert data into the table: "vectric.products_upgrade_eligibility" */
	insertProductsUpgradeEligibility?:ModelTypes["vectric_products_upgrade_eligibility_mutation_response"],
	/** insert data into the table: "vectric.oem_purchase_options" */
	insertPurchaseOptions?:ModelTypes["vectric_oem_purchase_options_mutation_response"],
	/** insert data into the table: "vectric.questions" */
	insertQuestions?:ModelTypes["vectric_questions_mutation_response"],
	/** insert data into the table: "vectric.responses" */
	insertResponses?:ModelTypes["vectric_responses_mutation_response"],
	/** insert a single row into the table: "vectric.saleable_products" */
	insertSaleableProduct?:ModelTypes["vectric_saleable_products"],
	/** insert data into the table: "vectric.saleable_products" */
	insertSaleableProducts?:ModelTypes["vectric_saleable_products_mutation_response"],
	/** insert a single row into the table: "vectric.sales_customers" */
	insertSalesCustomer?:ModelTypes["vectric_sales_customers"],
	/** insert data into the table: "vectric.sales_customers" */
	insertSalesCustomers?:ModelTypes["vectric_sales_customers_mutation_response"],
	/** insert data into the table: "vectric.sales_salesitem_products" */
	insertSalesItemProducts?:ModelTypes["vectric_sales_salesitem_products_mutation_response"],
	/** insert data into the table: "vectric.sales_salesitems" */
	insertSalesItems?:ModelTypes["vectric_sales_salesitems_mutation_response"],
	/** insert data into the table: "vectric.sales_oem_bundles" */
	insertSalesOemBundle?:ModelTypes["vectric_sales_oem_bundles_mutation_response"],
	/** insert a single row into the table: "vectric.scheduled_emails" */
	insertScheduledEmail?:ModelTypes["vectric_scheduled_emails"],
	/** insert data into the table: "vectric.scheduled_emails" */
	insertScheduledEmails?:ModelTypes["vectric_scheduled_emails_mutation_response"],
	/** insert a single row into the table: "vectric.security_emailverificationtokens" */
	insertSecurityEmailVerificationToken?:ModelTypes["vectric_security_emailverificationtokens"],
	/** insert a single row into the table: "vectric.security_group_members" */
	insertSecurityGroupMember?:ModelTypes["vectric_security_group_members"],
	/** insert data into the table: "vectric.security_group_members" */
	insertSecurityGroupMembers?:ModelTypes["vectric_security_group_members_mutation_response"],
	/** insert a single row into the table: "vectric.security_users" */
	insertSecurityUser?:ModelTypes["vectric_security_users"],
	/** insert a single row into the table: "vectric.security_userinvitations" */
	insertSecurityUserInvitation?:ModelTypes["vectric_security_userinvitations"],
	/** insert data into the table: "vectric.security_userinvitations" */
	insertSecurityUserInvitations?:ModelTypes["vectric_security_userinvitations_mutation_response"],
	/** insert data into the table: "vectric.security_users" */
	insertSecurityUsers?:ModelTypes["vectric_security_users_mutation_response"],
	/** insert data into the table: "vectric.linkshortener_links" */
	insertShortLink?:ModelTypes["vectric_linkshortener_links_mutation_response"],
	/** insert a single row into the table: "vectric.linkshortener_links" */
	insertShortLinkOne?:ModelTypes["vectric_linkshortener_links"],
	/** insert data into the table: "vectric.site_option_location" */
	insertSiteOptionLocations?:ModelTypes["vectric_site_option_location_mutation_response"],
	/** insert data into the table: "vectric.site_options" */
	insertSiteOptions?:ModelTypes["vectric_site_options_mutation_response"],
	/** insert a single row into the table: "vectric.toolpath_saver_token" */
	insertToolpathSaverToken?:ModelTypes["vectric_toolpath_saver_token"],
	/** insert data into the table: "vectric.toolpath_saver_token" */
	insertToolpathSaverTokens?:ModelTypes["vectric_toolpath_saver_token_mutation_response"],
	/** insert data into the table: "vectric.trial_order" */
	insertTrialOrders?:ModelTypes["vectric_trial_order_mutation_response"],
	/** insert data into the table: "vectric.update_requests" */
	insertUpdateRequests?:ModelTypes["vectric_update_requests_mutation_response"],
	/** insert data into the table: "vectric.upgrades_feature" */
	insertUpgradeFeatures?:ModelTypes["vectric_upgrades_feature_mutation_response"],
	/** insert data into the table: "vectric.upgrades_product_type_feature" */
	insertUpgradeProductTypeFeatures?:ModelTypes["vectric_upgrades_product_type_feature_mutation_response"],
	/** insert a single row into the table: "vectric.upgrade_tokens" */
	insertUpgradeToken?:ModelTypes["vectric_upgrade_tokens"],
	/** insert data into the table: "vectric.upgrade_tokens" */
	insertUpgradeTokens?:ModelTypes["vectric_upgrade_tokens_mutation_response"],
	/** insert data into the table: "vectric.upgrades_version_feature" */
	insertUpgradeVersionFeatures?:ModelTypes["vectric_upgrades_version_feature_mutation_response"],
	/** insert data into the table: "vectric.usergroup_2019_attendees" */
	insertUserGroupAttendees?:ModelTypes["vectric_usergroup_2019_attendees_mutation_response"],
	/** insert data into the table: "vectric.usergroup_2019_waitlist" */
	insertUserGroupWaitingListEntries?:ModelTypes["vectric_usergroup_2019_waitlist_mutation_response"],
	/** insert data into the table: "vectric.products_versioncodes" */
	insertVersionCode?:ModelTypes["vectric_products_versioncodes_mutation_response"],
	/** insert data into the table: "vectric.customer_zd_uploads" */
	insertZendeskUploads?:ModelTypes["vectric_customer_zd_uploads_mutation_response"],
	/** insert data into the table: "vectric.allocatable_bundles" */
	insert_vectric_allocatable_bundles?:ModelTypes["vectric_allocatable_bundles_mutation_response"],
	/** insert a single row into the table: "vectric.allocatable_bundles" */
	insert_vectric_allocatable_bundles_one?:ModelTypes["vectric_allocatable_bundles"],
	/** insert data into the table: "vectric.allocated_bundles" */
	insert_vectric_allocated_bundles?:ModelTypes["vectric_allocated_bundles_mutation_response"],
	/** insert a single row into the table: "vectric.allocated_bundles" */
	insert_vectric_allocated_bundles_one?:ModelTypes["vectric_allocated_bundles"],
	/** insert data into the table: "vectric.allocation_summary_file_type" */
	insert_vectric_allocation_summary_file_type?:ModelTypes["vectric_allocation_summary_file_type_mutation_response"],
	/** insert a single row into the table: "vectric.allocation_summary_file_type" */
	insert_vectric_allocation_summary_file_type_one?:ModelTypes["vectric_allocation_summary_file_type"],
	/** insert data into the table: "vectric.continents" */
	insert_vectric_continents?:ModelTypes["vectric_continents_mutation_response"],
	/** insert a single row into the table: "vectric.continents" */
	insert_vectric_continents_one?:ModelTypes["vectric_continents"],
	/** insert data into the table: "vectric.customer_sales" */
	insert_vectric_customer_sales?:ModelTypes["vectric_customer_sales_mutation_response"],
	/** insert a single row into the table: "vectric.customer_sales" */
	insert_vectric_customer_sales_one?:ModelTypes["vectric_customer_sales"],
	/** insert data into the table: "vectric.customer_status" */
	insert_vectric_customer_status?:ModelTypes["vectric_customer_status_mutation_response"],
	/** insert a single row into the table: "vectric.customer_status" */
	insert_vectric_customer_status_one?:ModelTypes["vectric_customer_status"],
	/** insert data into the table: "vectric.download" */
	insert_vectric_download?:ModelTypes["vectric_download_mutation_response"],
	/** insert data into the table: "vectric.download_record" */
	insert_vectric_download_record?:ModelTypes["vectric_download_record_mutation_response"],
	/** insert data into the table: "vectric.freeclipart" */
	insert_vectric_freeclipart?:ModelTypes["vectric_freeclipart_mutation_response"],
	/** insert data into the table: "vectric.freeclipart_category" */
	insert_vectric_freeclipart_category?:ModelTypes["vectric_freeclipart_category_mutation_response"],
	/** insert a single row into the table: "vectric.freeclipart_category" */
	insert_vectric_freeclipart_category_one?:ModelTypes["vectric_freeclipart_category"],
	/** insert a single row into the table: "vectric.freeclipart" */
	insert_vectric_freeclipart_one?:ModelTypes["vectric_freeclipart"],
	/** insert data into the table: "vectric.group_roles" */
	insert_vectric_group_roles?:ModelTypes["vectric_group_roles_mutation_response"],
	/** insert a single row into the table: "vectric.group_roles" */
	insert_vectric_group_roles_one?:ModelTypes["vectric_group_roles"],
	/** insert data into the table: "vectric.group_user_role" */
	insert_vectric_group_user_role?:ModelTypes["vectric_group_user_role_mutation_response"],
	/** insert a single row into the table: "vectric.group_user_role" */
	insert_vectric_group_user_role_one?:ModelTypes["vectric_group_user_role"],
	/** insert data into the table: "vectric.groups" */
	insert_vectric_groups?:ModelTypes["vectric_groups_mutation_response"],
	/** insert a single row into the table: "vectric.groups" */
	insert_vectric_groups_one?:ModelTypes["vectric_groups"],
	/** insert data into the table: "vectric.language_codes" */
	insert_vectric_language_codes?:ModelTypes["vectric_language_codes_mutation_response"],
	/** insert a single row into the table: "vectric.language_codes" */
	insert_vectric_language_codes_one?:ModelTypes["vectric_language_codes"],
	/** insert data into the table: "vectric.licence_log" */
	insert_vectric_licence_log?:ModelTypes["vectric_licence_log_mutation_response"],
	/** insert a single row into the table: "vectric.licence_log" */
	insert_vectric_licence_log_one?:ModelTypes["vectric_licence_log"],
	/** insert data into the table: "vectric.makerspace_requests" */
	insert_vectric_makerspace_requests?:ModelTypes["vectric_makerspace_requests_mutation_response"],
	/** insert data into the table: "vectric.membership_invitation_status" */
	insert_vectric_membership_invitation_status?:ModelTypes["vectric_membership_invitation_status_mutation_response"],
	/** insert a single row into the table: "vectric.membership_invitation_status" */
	insert_vectric_membership_invitation_status_one?:ModelTypes["vectric_membership_invitation_status"],
	/** insert data into the table: "vectric.membership_roles" */
	insert_vectric_membership_roles?:ModelTypes["vectric_membership_roles_mutation_response"],
	/** insert a single row into the table: "vectric.membership_roles" */
	insert_vectric_membership_roles_one?:ModelTypes["vectric_membership_roles"],
	/** insert data into the table: "vectric.membership_status" */
	insert_vectric_membership_status?:ModelTypes["vectric_membership_status_mutation_response"],
	/** insert a single row into the table: "vectric.membership_status" */
	insert_vectric_membership_status_one?:ModelTypes["vectric_membership_status"],
	/** insert data into the table: "vectric.oauth_client_details" */
	insert_vectric_oauth_client_details?:ModelTypes["vectric_oauth_client_details_mutation_response"],
	/** insert a single row into the table: "vectric.oauth_client_details" */
	insert_vectric_oauth_client_details_one?:ModelTypes["vectric_oauth_client_details"],
	/** insert data into the table: "vectric.oem_detailed_products" */
	insert_vectric_oem_detailed_products?:ModelTypes["vectric_oem_detailed_products_mutation_response"],
	/** insert a single row into the table: "vectric.oem_detailed_products" */
	insert_vectric_oem_detailed_products_one?:ModelTypes["vectric_oem_detailed_products"],
	/** insert data into the table: "vectric.oem_fastspring_item" */
	insert_vectric_oem_fastspring_item?:ModelTypes["vectric_oem_fastspring_item_mutation_response"],
	/** insert data into the table: "vectric.oem_fastspring_item_bundle" */
	insert_vectric_oem_fastspring_item_bundle?:ModelTypes["vectric_oem_fastspring_item_bundle_mutation_response"],
	/** insert a single row into the table: "vectric.oem_fastspring_item_bundle" */
	insert_vectric_oem_fastspring_item_bundle_one?:ModelTypes["vectric_oem_fastspring_item_bundle"],
	/** insert a single row into the table: "vectric.oem_fastspring_item" */
	insert_vectric_oem_fastspring_item_one?:ModelTypes["vectric_oem_fastspring_item"],
	/** insert data into the table: "vectric.oem_fastspring_order" */
	insert_vectric_oem_fastspring_order?:ModelTypes["vectric_oem_fastspring_order_mutation_response"],
	/** insert a single row into the table: "vectric.oem_fastspring_order" */
	insert_vectric_oem_fastspring_order_one?:ModelTypes["vectric_oem_fastspring_order"],
	/** insert data into the table: "vectric.oem_invite_status" */
	insert_vectric_oem_invite_status?:ModelTypes["vectric_oem_invite_status_mutation_response"],
	/** insert a single row into the table: "vectric.oem_invite_status" */
	insert_vectric_oem_invite_status_one?:ModelTypes["vectric_oem_invite_status"],
	/** insert data into the table: "vectric.oem_licence_allocation_type" */
	insert_vectric_oem_licence_allocation_type?:ModelTypes["vectric_oem_licence_allocation_type_mutation_response"],
	/** insert a single row into the table: "vectric.oem_licence_allocation_type" */
	insert_vectric_oem_licence_allocation_type_one?:ModelTypes["vectric_oem_licence_allocation_type"],
	/** insert data into the table: "vectric.oem_products" */
	insert_vectric_oem_products?:ModelTypes["vectric_oem_products_mutation_response"],
	/** insert a single row into the table: "vectric.oem_products" */
	insert_vectric_oem_products_one?:ModelTypes["vectric_oem_products"],
	/** insert data into the table: "vectric.organization_types" */
	insert_vectric_organization_types?:ModelTypes["vectric_organization_types_mutation_response"],
	/** insert a single row into the table: "vectric.organization_types" */
	insert_vectric_organization_types_one?:ModelTypes["vectric_organization_types"],
	/** insert data into the table: "vectric.products_clipartcollection_links" */
	insert_vectric_products_clipartcollection_links?:ModelTypes["vectric_products_clipartcollection_links_mutation_response"],
	/** insert a single row into the table: "vectric.products_clipartcollection_links" */
	insert_vectric_products_clipartcollection_links_one?:ModelTypes["vectric_products_clipartcollection_links"],
	/** insert data into the table: "vectric.products_enhancement_eligibility" */
	insert_vectric_products_enhancement_eligibility?:ModelTypes["vectric_products_enhancement_eligibility_mutation_response"],
	/** insert a single row into the table: "vectric.products_enhancement_eligibility" */
	insert_vectric_products_enhancement_eligibility_one?:ModelTypes["vectric_products_enhancement_eligibility"],
	/** insert data into the table: "vectric.products_freeclipart" */
	insert_vectric_products_freeclipart?:ModelTypes["vectric_products_freeclipart_mutation_response"],
	/** insert a single row into the table: "vectric.products_freeclipart" */
	insert_vectric_products_freeclipart_one?:ModelTypes["vectric_products_freeclipart"],
	/** insert data into the table: "vectric.products_fulfilments" */
	insert_vectric_products_fulfilments?:ModelTypes["vectric_products_fulfilments_mutation_response"],
	/** insert a single row into the table: "vectric.products_fulfilments" */
	insert_vectric_products_fulfilments_one?:ModelTypes["vectric_products_fulfilments"],
	/** insert data into the table: "vectric.products_fulfilmenttypes" */
	insert_vectric_products_fulfilmenttypes?:ModelTypes["vectric_products_fulfilmenttypes_mutation_response"],
	/** insert a single row into the table: "vectric.products_fulfilmenttypes" */
	insert_vectric_products_fulfilmenttypes_one?:ModelTypes["vectric_products_fulfilmenttypes"],
	/** insert data into the table: "vectric.products_product_fulfilments" */
	insert_vectric_products_product_fulfilments?:ModelTypes["vectric_products_product_fulfilments_mutation_response"],
	/** insert a single row into the table: "vectric.products_product_fulfilments" */
	insert_vectric_products_product_fulfilments_one?:ModelTypes["vectric_products_product_fulfilments"],
	/** insert data into the table: "vectric.products_product_licence_type" */
	insert_vectric_products_product_licence_type?:ModelTypes["vectric_products_product_licence_type_mutation_response"],
	/** insert a single row into the table: "vectric.products_product_licence_type" */
	insert_vectric_products_product_licence_type_one?:ModelTypes["vectric_products_product_licence_type"],
	/** insert data into the table: "vectric.sales_customerupdates" */
	insert_vectric_sales_customerupdates?:ModelTypes["vectric_sales_customerupdates_mutation_response"],
	/** insert a single row into the table: "vectric.sales_customerupdates" */
	insert_vectric_sales_customerupdates_one?:ModelTypes["vectric_sales_customerupdates"],
	/** insert data into the table: "vectric.sales_oemlicences" */
	insert_vectric_sales_oemlicences?:ModelTypes["vectric_sales_oemlicences_mutation_response"],
	/** insert a single row into the table: "vectric.sales_oemlicences" */
	insert_vectric_sales_oemlicences_one?:ModelTypes["vectric_sales_oemlicences"],
	/** insert data into the table: "vectric.sales_salesitemproduct_status" */
	insert_vectric_sales_salesitemproduct_status?:ModelTypes["vectric_sales_salesitemproduct_status_mutation_response"],
	/** insert a single row into the table: "vectric.sales_salesitemproduct_status" */
	insert_vectric_sales_salesitemproduct_status_one?:ModelTypes["vectric_sales_salesitemproduct_status"],
	/** insert data into the table: "vectric.security_group_authorities" */
	insert_vectric_security_group_authorities?:ModelTypes["vectric_security_group_authorities_mutation_response"],
	/** insert a single row into the table: "vectric.security_group_authorities" */
	insert_vectric_security_group_authorities_one?:ModelTypes["vectric_security_group_authorities"],
	/** insert data into the table: "vectric.subscription_contract_status" */
	insert_vectric_subscription_contract_status?:ModelTypes["vectric_subscription_contract_status_mutation_response"],
	/** insert a single row into the table: "vectric.subscription_contract_status" */
	insert_vectric_subscription_contract_status_one?:ModelTypes["vectric_subscription_contract_status"],
	/** insert data into the table: "vectric.subscription_contracts" */
	insert_vectric_subscription_contracts?:ModelTypes["vectric_subscription_contracts_mutation_response"],
	/** insert a single row into the table: "vectric.subscription_contracts" */
	insert_vectric_subscription_contracts_one?:ModelTypes["vectric_subscription_contracts"],
	/** insert data into the table: "vectric.subscription_events" */
	insert_vectric_subscription_events?:ModelTypes["vectric_subscription_events_mutation_response"],
	/** insert a single row into the table: "vectric.subscription_events" */
	insert_vectric_subscription_events_one?:ModelTypes["vectric_subscription_events"],
	/** insert data into the table: "vectric.version_code" */
	insert_vectric_version_code?:ModelTypes["vectric_version_code_mutation_response"],
	/** insert a single row into the table: "vectric.version_code" */
	insert_vectric_version_code_one?:ModelTypes["vectric_version_code"],
	oemSecureFsRequest?:ModelTypes["OemFastspringSecureRequestOutput"],
	organizationAddNewMember?:ModelTypes["OrganizationAddNewMemberOutput"],
	organizationEditMember?:ModelTypes["OrganizationEditMemberOutput"],
	passwordReset?:ModelTypes["PasswordResetOutput"],
	processOemStaffInvitation?:ModelTypes["ProcessOemStaffInvitationOutput"],
	registerInvite?:ModelTypes["RegisterInvite"],
	removeMembership?:ModelTypes["RemoveMembershipOutput"],
	removeMembershipInvitation?:ModelTypes["RemoveMembershipInvitationOutput"],
	removePartnerMember?:ModelTypes["RemovePartnerMemberOutput"],
	secureFSItems?:ModelTypes["SecureFSItemsOutput"],
	sendEmailVerification?:ModelTypes["SendEmailVerificationOutput"],
	sendLicenceAllocationEmail?:ModelTypes["SendLicenceAllocationEmailResponse"],
	signUp?:ModelTypes["SignUpOutput"],
	transferOrderItemProduct?:ModelTypes["SampleOutput"],
	unassignItem?:ModelTypes["UnassignItemOutput"],
	/** update data of the table: "vectric.allocation_summary" */
	updateAllocationSummaries?:ModelTypes["vectric_allocation_summary_mutation_response"],
	/** update single row of the table: "vectric.allocation_summary" */
	updateAllocationSummaryById?:ModelTypes["vectric_allocation_summary"],
	/** update single row of the table: "vectric.owned_item_assignments" */
	updateAssignment?:ModelTypes["vectric_owned_item_assignments"],
	/** update data of the table: "vectric.owned_item_assignments" */
	updateAssignments?:ModelTypes["vectric_owned_item_assignments_mutation_response"],
	/** update data of the table: "vectric.countries" */
	updateCountries?:ModelTypes["vectric_countries_mutation_response"],
	/** update single row of the table: "vectric.countries" */
	updateCountryById?:ModelTypes["vectric_countries"],
	/** update data of the table: "vectric.sales_customers" */
	updateCustomer?:ModelTypes["vectric_sales_customers_mutation_response"],
	/** update single row of the table: "vectric.customer_area_file" */
	updateCustomerAreaFileByPk?:ModelTypes["vectric_customer_area_file"],
	/** update single row of the table: "vectric.sales_customers" */
	updateCustomerById?:ModelTypes["vectric_sales_customers"],
	/** update single row of the table: "vectric.sales_customer_downloads" */
	updateCustomerDownloadById?:ModelTypes["vectric_sales_customer_downloads"],
	/** update data of the table: "vectric.sales_customer_downloads" */
	updateCustomerDownloads?:ModelTypes["vectric_sales_customer_downloads_mutation_response"],
	/** update single row of the table: "vectric.customer_responses" */
	updateCustomerResponseById?:ModelTypes["vectric_customer_responses"],
	/** update data of the table: "vectric.customer_responses" */
	updateCustomerResponses?:ModelTypes["vectric_customer_responses_mutation_response"],
	/** update single row of the table: "vectric.sales_velocitytemplate" */
	updateEmailTemplate?:ModelTypes["vectric_sales_velocitytemplate"],
	/** update data of the table: "vectric.sales_velocitytemplate" */
	updateEmailTemplates?:ModelTypes["vectric_sales_velocitytemplate_mutation_response"],
	/** update single row of the table: "vectric.entitled_products" */
	updateEntitleProduct?:ModelTypes["vectric_entitled_products"],
	/** update data of the table: "vectric.entitled_products" */
	updateEntitledProducts?:ModelTypes["vectric_entitled_products_mutation_response"],
	/** update single row of the table: "vectric.entitlements" */
	updateEntitlement?:ModelTypes["vectric_entitlements"],
	/** update single row of the table: "vectric.entitlement_licences" */
	updateEntitlementLicence?:ModelTypes["vectric_entitlement_licences"],
	/** update data of the table: "vectric.entitlement_licences" */
	updateEntitlementLicences?:ModelTypes["vectric_entitlement_licences_mutation_response"],
	/** update data of the table: "vectric.entitlements" */
	updateEntitlements?:ModelTypes["vectric_entitlements_mutation_response"],
	/** update data of the table: "vectric.oem_eval_request" */
	updateEvalRequest?:ModelTypes["vectric_oem_eval_request_mutation_response"],
	/** update single row of the table: "vectric.oem_eval_request" */
	updateEvalRequestById?:ModelTypes["vectric_oem_eval_request"],
	/** update single row of the table: "vectric.free_clipart_tokens" */
	updateFreeClipartTokenByPk?:ModelTypes["vectric_free_clipart_tokens"],
	/** update single row of the table: "vectric.organization_licence_scope" */
	updateLicenceScope?:ModelTypes["vectric_organization_licence_scope"],
	/** update data of the table: "vectric.organization_licence_scope" */
	updateLicenceScopes?:ModelTypes["vectric_organization_licence_scope_mutation_response"],
	/** update single row of the table: "vectric.memberships" */
	updateMembershipById?:ModelTypes["vectric_memberships"],
	/** update single row of the table: "vectric.membership_invitations" */
	updateMembershipInvitationById?:ModelTypes["vectric_membership_invitations"],
	/** update data of the table: "vectric.membership_invitations" */
	updateMembershipInvitations?:ModelTypes["vectric_membership_invitations_mutation_response"],
	/** update data of the table: "vectric.memberships" */
	updateMemberships?:ModelTypes["vectric_memberships_mutation_response"],
	/** update data of the table: "vectric.oem_allocation_emails" */
	updateOemAllocationEmails?:ModelTypes["vectric_oem_allocation_emails_mutation_response"],
	/** update data of the table: "vectric.oem_partners" */
	updateOemPartner?:ModelTypes["vectric_oem_partners_mutation_response"],
	/** update single row of the table: "vectric.oem_partners" */
	updateOemPartnerById?:ModelTypes["vectric_oem_partners"],
	/** update single row of the table: "vectric.oem_staff_customer" */
	updateOemStaffCustomerById?:ModelTypes["vectric_oem_staff_customer"],
	/** update data of the table: "vectric.oem_staff_customer" */
	updateOemStaffCustomers?:ModelTypes["vectric_oem_staff_customer_mutation_response"],
	/** update data of the table: "vectric.sales_orders" */
	updateOrder?:ModelTypes["vectric_sales_orders_mutation_response"],
	/** update single row of the table: "vectric.sales_orders" */
	updateOrderById?:ModelTypes["vectric_sales_orders"],
	/** update single row of the table: "vectric.organizations" */
	updateOrganization?:ModelTypes["vectric_organizations"],
	/** update single row of the table: "vectric.organization_audit" */
	updateOrganizationAuditById?:ModelTypes["vectric_organization_audit"],
	/** update data of the table: "vectric.organization_audit" */
	updateOrganizationAudits?:ModelTypes["vectric_organization_audit_mutation_response"],
	/** update single row of the table: "vectric.organization_orders" */
	updateOrganizationOrder?:ModelTypes["vectric_organization_orders"],
	/** update single row of the table: "vectric.organization_order_items" */
	updateOrganizationOrderItem?:ModelTypes["vectric_organization_order_items"],
	/** update data of the table: "vectric.organization_order_items" */
	updateOrganizationOrderItems?:ModelTypes["vectric_organization_order_items_mutation_response"],
	/** update data of the table: "vectric.organization_orders" */
	updateOrganizationOrders?:ModelTypes["vectric_organization_orders_mutation_response"],
	/** update data of the table: "vectric.organizations" */
	updateOrganizations?:ModelTypes["vectric_organizations_mutation_response"],
	/** update single row of the table: "vectric.owned_items" */
	updateOwnedItem?:ModelTypes["vectric_owned_items"],
	/** update data of the table: "vectric.owned_items" */
	updateOwnedItems?:ModelTypes["vectric_owned_items_mutation_response"],
	/** update single row of the table: "vectric.owned_products" */
	updateOwnedProduct?:ModelTypes["vectric_owned_products"],
	/** update data of the table: "vectric.owned_products" */
	updateOwnedProducts?:ModelTypes["vectric_owned_products_mutation_response"],
	/** update single row of the table: "vectric.products_products" */
	updateProductById?:ModelTypes["vectric_products_products"],
	/** update single row of the table: "vectric.products_producttype" */
	updateProductTypeById?:ModelTypes["vectric_products_producttype"],
	/** update data of the table: "vectric.products_producttype" */
	updateProductTypes?:ModelTypes["vectric_products_producttype_mutation_response"],
	/** update single row of the table: "vectric.products_upgrade_eligibility" */
	updateProductUpgradeEligibility?:ModelTypes["vectric_products_upgrade_eligibility"],
	/** update data of the table: "vectric.products_products" */
	updateProducts?:ModelTypes["vectric_products_products_mutation_response"],
	/** update data of the table: "vectric.products_upgrade_eligibility" */
	updateProductsUpgradeEligibility?:ModelTypes["vectric_products_upgrade_eligibility_mutation_response"],
	/** update single row of the table: "vectric.oem_purchase_options" */
	updatePurchaseOptionByOptionId?:ModelTypes["vectric_oem_purchase_options"],
	/** update data of the table: "vectric.oem_purchase_options" */
	updatePurchaseOptions?:ModelTypes["vectric_oem_purchase_options_mutation_response"],
	/** update single row of the table: "vectric.questions" */
	updateQuestionById?:ModelTypes["vectric_questions"],
	/** update data of the table: "vectric.questions" */
	updateQuestions?:ModelTypes["vectric_questions_mutation_response"],
	/** update single row of the table: "vectric.responses" */
	updateResponseById?:ModelTypes["vectric_responses"],
	/** update data of the table: "vectric.responses" */
	updateResponses?:ModelTypes["vectric_responses_mutation_response"],
	/** update single row of the table: "vectric.saleable_products" */
	updateSaleableProduct?:ModelTypes["vectric_saleable_products"],
	/** update data of the table: "vectric.saleable_products" */
	updateSaleableProducts?:ModelTypes["vectric_saleable_products_mutation_response"],
	/** update single row of the table: "vectric.sales_salesitems" */
	updateSalesItemById?:ModelTypes["vectric_sales_salesitems"],
	/** update data of the table: "vectric.sales_salesitem_products" */
	updateSalesItemProduces?:ModelTypes["vectric_sales_salesitem_products_mutation_response"],
	/** update single row of the table: "vectric.sales_salesitem_products" */
	updateSalesItemProductById?:ModelTypes["vectric_sales_salesitem_products"],
	/** update data of the table: "vectric.sales_salesitems" */
	updateSalesItems?:ModelTypes["vectric_sales_salesitems_mutation_response"],
	/** update data of the table: "vectric.sales_oem_bundles" */
	updateSalesOemBundle?:ModelTypes["vectric_sales_oem_bundles_mutation_response"],
	/** update single row of the table: "vectric.sales_oem_bundles" */
	updateSalesOemBundleById?:ModelTypes["vectric_sales_oem_bundles"],
	/** update data of the table: "vectric.scheduled_emails" */
	updateScheduledEmails?:ModelTypes["vectric_scheduled_emails_mutation_response"],
	/** update single row of the table: "vectric.scheduled_emails" */
	updateScheduledEmailsById?:ModelTypes["vectric_scheduled_emails"],
	/** update single row of the table: "vectric.security_users" */
	updateSecurityUserByPk?:ModelTypes["vectric_security_users"],
	/** update data of the table: "vectric.security_users" */
	updateSecurityUsers?:ModelTypes["vectric_security_users_mutation_response"],
	/** update single row of the table: "vectric.linkshortener_links" */
	updateShortLinkByHash?:ModelTypes["vectric_linkshortener_links"],
	/** update data of the table: "vectric.linkshortener_links" */
	updateShortLinks?:ModelTypes["vectric_linkshortener_links_mutation_response"],
	/** update single row of the table: "vectric.site_options" */
	updateSiteOptionById?:ModelTypes["vectric_site_options"],
	/** update single row of the table: "vectric.site_option_location" */
	updateSiteOptionLocationById?:ModelTypes["vectric_site_option_location"],
	/** update data of the table: "vectric.site_option_location" */
	updateSiteOptionLocations?:ModelTypes["vectric_site_option_location_mutation_response"],
	/** update data of the table: "vectric.site_options" */
	updateSiteOptions?:ModelTypes["vectric_site_options_mutation_response"],
	/** update single row of the table: "vectric.toolpath_saver_token" */
	updateToolpathSaverTokenById?:ModelTypes["vectric_toolpath_saver_token"],
	/** update data of the table: "vectric.toolpath_saver_token" */
	updateToolpathSaverTokens?:ModelTypes["vectric_toolpath_saver_token_mutation_response"],
	/** update single row of the table: "vectric.trial_order" */
	updateTrialOrderById?:ModelTypes["vectric_trial_order"],
	/** update data of the table: "vectric.trial_order" */
	updateTrialOrders?:ModelTypes["vectric_trial_order_mutation_response"],
	/** update data of the table: "vectric.update_requests" */
	updateUpdateRequests?:ModelTypes["vectric_update_requests_mutation_response"],
	/** update single row of the table: "vectric.upgrades_feature" */
	updateUpgradeFeatureById?:ModelTypes["vectric_upgrades_feature"],
	/** update data of the table: "vectric.upgrades_feature" */
	updateUpgradeFeatures?:ModelTypes["vectric_upgrades_feature_mutation_response"],
	/** update single row of the table: "vectric.upgrades_product_type_feature" */
	updateUpgradeProductTypeFeatureById?:ModelTypes["vectric_upgrades_product_type_feature"],
	/** update data of the table: "vectric.upgrades_product_type_feature" */
	updateUpgradeProductTypeFeatures?:ModelTypes["vectric_upgrades_product_type_feature_mutation_response"],
	/** update single row of the table: "vectric.upgrades_version_feature" */
	updateUpgradeVersionFeatureById?:ModelTypes["vectric_upgrades_version_feature"],
	/** update data of the table: "vectric.upgrades_version_feature" */
	updateUpgradeVersionFeatures?:ModelTypes["vectric_upgrades_version_feature_mutation_response"],
	/** update single row of the table: "vectric.usergroup_2019_attendees" */
	updateUserGroupAttendeeById?:ModelTypes["vectric_usergroup_2019_attendees"],
	/** update data of the table: "vectric.usergroup_2019_attendees" */
	updateUserGroupAttendees?:ModelTypes["vectric_usergroup_2019_attendees_mutation_response"],
	/** update data of the table: "vectric.usergroup_2019_waitlist" */
	updateUserGroupWaitingListEntries?:ModelTypes["vectric_usergroup_2019_waitlist_mutation_response"],
	/** update single row of the table: "vectric.usergroup_2019_waitlist" */
	updateUserGroupWaitingListEntryById?:ModelTypes["vectric_usergroup_2019_waitlist"],
	/** update single row of the table: "vectric.security_userinvitations" */
	updateUserInvitationByToken?:ModelTypes["vectric_security_userinvitations"],
	/** update single row of the table: "vectric.products_versioncodes" */
	updateVersionCodeById?:ModelTypes["vectric_products_versioncodes"],
	/** update data of the table: "vectric.products_versioncodes" */
	updateVersionCodes?:ModelTypes["vectric_products_versioncodes_mutation_response"],
	/** update single row of the table: "vectric.customer_zd_uploads" */
	updateZendeskUploadById?:ModelTypes["vectric_customer_zd_uploads"],
	/** update data of the table: "vectric.customer_zd_uploads" */
	updateZendeskUploads?:ModelTypes["vectric_customer_zd_uploads_mutation_response"],
	/** update data of the table: "vectric.allocatable_bundles" */
	update_vectric_allocatable_bundles?:ModelTypes["vectric_allocatable_bundles_mutation_response"],
	/** update data of the table: "vectric.allocated_bundles" */
	update_vectric_allocated_bundles?:ModelTypes["vectric_allocated_bundles_mutation_response"],
	/** update data of the table: "vectric.allocation_summary_file_type" */
	update_vectric_allocation_summary_file_type?:ModelTypes["vectric_allocation_summary_file_type_mutation_response"],
	/** update single row of the table: "vectric.allocation_summary_file_type" */
	update_vectric_allocation_summary_file_type_by_pk?:ModelTypes["vectric_allocation_summary_file_type"],
	/** update data of the table: "vectric.continents" */
	update_vectric_continents?:ModelTypes["vectric_continents_mutation_response"],
	/** update single row of the table: "vectric.continents" */
	update_vectric_continents_by_pk?:ModelTypes["vectric_continents"],
	/** update data of the table: "vectric.customer_area" */
	update_vectric_customer_area?:ModelTypes["vectric_customer_area_mutation_response"],
	/** update single row of the table: "vectric.customer_area" */
	update_vectric_customer_area_by_pk?:ModelTypes["vectric_customer_area"],
	/** update data of the table: "vectric.customer_area_file" */
	update_vectric_customer_area_file?:ModelTypes["vectric_customer_area_file_mutation_response"],
	/** update data of the table: "vectric.customer_sales" */
	update_vectric_customer_sales?:ModelTypes["vectric_customer_sales_mutation_response"],
	/** update data of the table: "vectric.customer_status" */
	update_vectric_customer_status?:ModelTypes["vectric_customer_status_mutation_response"],
	/** update single row of the table: "vectric.customer_status" */
	update_vectric_customer_status_by_pk?:ModelTypes["vectric_customer_status"],
	/** update data of the table: "vectric.download" */
	update_vectric_download?:ModelTypes["vectric_download_mutation_response"],
	/** update single row of the table: "vectric.download" */
	update_vectric_download_by_pk?:ModelTypes["vectric_download"],
	/** update data of the table: "vectric.download_record" */
	update_vectric_download_record?:ModelTypes["vectric_download_record_mutation_response"],
	/** update single row of the table: "vectric.download_record" */
	update_vectric_download_record_by_pk?:ModelTypes["vectric_download_record"],
	/** update data of the table: "vectric.enhancement_tokens" */
	update_vectric_enhancement_tokens?:ModelTypes["vectric_enhancement_tokens_mutation_response"],
	/** update single row of the table: "vectric.enhancement_tokens" */
	update_vectric_enhancement_tokens_by_pk?:ModelTypes["vectric_enhancement_tokens"],
	/** update data of the table: "vectric.free_clipart_tokens" */
	update_vectric_free_clipart_tokens?:ModelTypes["vectric_free_clipart_tokens_mutation_response"],
	/** update data of the table: "vectric.freeclipart" */
	update_vectric_freeclipart?:ModelTypes["vectric_freeclipart_mutation_response"],
	/** update single row of the table: "vectric.freeclipart" */
	update_vectric_freeclipart_by_pk?:ModelTypes["vectric_freeclipart"],
	/** update data of the table: "vectric.freeclipart_category" */
	update_vectric_freeclipart_category?:ModelTypes["vectric_freeclipart_category_mutation_response"],
	/** update single row of the table: "vectric.freeclipart_category" */
	update_vectric_freeclipart_category_by_pk?:ModelTypes["vectric_freeclipart_category"],
	/** update data of the table: "vectric.freeclipart_download_record" */
	update_vectric_freeclipart_download_record?:ModelTypes["vectric_freeclipart_download_record_mutation_response"],
	/** update single row of the table: "vectric.freeclipart_download_record" */
	update_vectric_freeclipart_download_record_by_pk?:ModelTypes["vectric_freeclipart_download_record"],
	/** update data of the table: "vectric.group_roles" */
	update_vectric_group_roles?:ModelTypes["vectric_group_roles_mutation_response"],
	/** update single row of the table: "vectric.group_roles" */
	update_vectric_group_roles_by_pk?:ModelTypes["vectric_group_roles"],
	/** update data of the table: "vectric.group_user_role" */
	update_vectric_group_user_role?:ModelTypes["vectric_group_user_role_mutation_response"],
	/** update single row of the table: "vectric.group_user_role" */
	update_vectric_group_user_role_by_pk?:ModelTypes["vectric_group_user_role"],
	/** update data of the table: "vectric.groups" */
	update_vectric_groups?:ModelTypes["vectric_groups_mutation_response"],
	/** update single row of the table: "vectric.groups" */
	update_vectric_groups_by_pk?:ModelTypes["vectric_groups"],
	/** update data of the table: "vectric.language_codes" */
	update_vectric_language_codes?:ModelTypes["vectric_language_codes_mutation_response"],
	/** update single row of the table: "vectric.language_codes" */
	update_vectric_language_codes_by_pk?:ModelTypes["vectric_language_codes"],
	/** update data of the table: "vectric.licence_log" */
	update_vectric_licence_log?:ModelTypes["vectric_licence_log_mutation_response"],
	/** update single row of the table: "vectric.licence_log" */
	update_vectric_licence_log_by_pk?:ModelTypes["vectric_licence_log"],
	/** update data of the table: "vectric.makerspace_requests" */
	update_vectric_makerspace_requests?:ModelTypes["vectric_makerspace_requests_mutation_response"],
	/** update single row of the table: "vectric.makerspace_requests" */
	update_vectric_makerspace_requests_by_pk?:ModelTypes["vectric_makerspace_requests"],
	/** update data of the table: "vectric.membership_invitation_status" */
	update_vectric_membership_invitation_status?:ModelTypes["vectric_membership_invitation_status_mutation_response"],
	/** update single row of the table: "vectric.membership_invitation_status" */
	update_vectric_membership_invitation_status_by_pk?:ModelTypes["vectric_membership_invitation_status"],
	/** update data of the table: "vectric.membership_roles" */
	update_vectric_membership_roles?:ModelTypes["vectric_membership_roles_mutation_response"],
	/** update single row of the table: "vectric.membership_roles" */
	update_vectric_membership_roles_by_pk?:ModelTypes["vectric_membership_roles"],
	/** update data of the table: "vectric.membership_status" */
	update_vectric_membership_status?:ModelTypes["vectric_membership_status_mutation_response"],
	/** update single row of the table: "vectric.membership_status" */
	update_vectric_membership_status_by_pk?:ModelTypes["vectric_membership_status"],
	/** update data of the table: "vectric.oauth_client_details" */
	update_vectric_oauth_client_details?:ModelTypes["vectric_oauth_client_details_mutation_response"],
	/** update single row of the table: "vectric.oauth_client_details" */
	update_vectric_oauth_client_details_by_pk?:ModelTypes["vectric_oauth_client_details"],
	/** update data of the table: "vectric.oem_detailed_products" */
	update_vectric_oem_detailed_products?:ModelTypes["vectric_oem_detailed_products_mutation_response"],
	/** update single row of the table: "vectric.oem_detailed_products" */
	update_vectric_oem_detailed_products_by_pk?:ModelTypes["vectric_oem_detailed_products"],
	/** update data of the table: "vectric.oem_fastspring_item" */
	update_vectric_oem_fastspring_item?:ModelTypes["vectric_oem_fastspring_item_mutation_response"],
	/** update data of the table: "vectric.oem_fastspring_item_bundle" */
	update_vectric_oem_fastspring_item_bundle?:ModelTypes["vectric_oem_fastspring_item_bundle_mutation_response"],
	/** update single row of the table: "vectric.oem_fastspring_item_bundle" */
	update_vectric_oem_fastspring_item_bundle_by_pk?:ModelTypes["vectric_oem_fastspring_item_bundle"],
	/** update single row of the table: "vectric.oem_fastspring_item" */
	update_vectric_oem_fastspring_item_by_pk?:ModelTypes["vectric_oem_fastspring_item"],
	/** update data of the table: "vectric.oem_fastspring_order" */
	update_vectric_oem_fastspring_order?:ModelTypes["vectric_oem_fastspring_order_mutation_response"],
	/** update single row of the table: "vectric.oem_fastspring_order" */
	update_vectric_oem_fastspring_order_by_pk?:ModelTypes["vectric_oem_fastspring_order"],
	/** update data of the table: "vectric.oem_invite_status" */
	update_vectric_oem_invite_status?:ModelTypes["vectric_oem_invite_status_mutation_response"],
	/** update single row of the table: "vectric.oem_invite_status" */
	update_vectric_oem_invite_status_by_pk?:ModelTypes["vectric_oem_invite_status"],
	/** update data of the table: "vectric.oem_licence_allocation_type" */
	update_vectric_oem_licence_allocation_type?:ModelTypes["vectric_oem_licence_allocation_type_mutation_response"],
	/** update single row of the table: "vectric.oem_licence_allocation_type" */
	update_vectric_oem_licence_allocation_type_by_pk?:ModelTypes["vectric_oem_licence_allocation_type"],
	/** update data of the table: "vectric.oem_products" */
	update_vectric_oem_products?:ModelTypes["vectric_oem_products_mutation_response"],
	/** update single row of the table: "vectric.oem_products" */
	update_vectric_oem_products_by_pk?:ModelTypes["vectric_oem_products"],
	/** update data of the table: "vectric.organization_types" */
	update_vectric_organization_types?:ModelTypes["vectric_organization_types_mutation_response"],
	/** update single row of the table: "vectric.organization_types" */
	update_vectric_organization_types_by_pk?:ModelTypes["vectric_organization_types"],
	/** update data of the table: "vectric.products_clipartcollection_links" */
	update_vectric_products_clipartcollection_links?:ModelTypes["vectric_products_clipartcollection_links_mutation_response"],
	/** update single row of the table: "vectric.products_clipartcollection_links" */
	update_vectric_products_clipartcollection_links_by_pk?:ModelTypes["vectric_products_clipartcollection_links"],
	/** update data of the table: "vectric.products_enhancement_eligibility" */
	update_vectric_products_enhancement_eligibility?:ModelTypes["vectric_products_enhancement_eligibility_mutation_response"],
	/** update single row of the table: "vectric.products_enhancement_eligibility" */
	update_vectric_products_enhancement_eligibility_by_pk?:ModelTypes["vectric_products_enhancement_eligibility"],
	/** update data of the table: "vectric.products_freeclipart" */
	update_vectric_products_freeclipart?:ModelTypes["vectric_products_freeclipart_mutation_response"],
	/** update single row of the table: "vectric.products_freeclipart" */
	update_vectric_products_freeclipart_by_pk?:ModelTypes["vectric_products_freeclipart"],
	/** update data of the table: "vectric.products_fulfilments" */
	update_vectric_products_fulfilments?:ModelTypes["vectric_products_fulfilments_mutation_response"],
	/** update single row of the table: "vectric.products_fulfilments" */
	update_vectric_products_fulfilments_by_pk?:ModelTypes["vectric_products_fulfilments"],
	/** update data of the table: "vectric.products_fulfilmenttypes" */
	update_vectric_products_fulfilmenttypes?:ModelTypes["vectric_products_fulfilmenttypes_mutation_response"],
	/** update single row of the table: "vectric.products_fulfilmenttypes" */
	update_vectric_products_fulfilmenttypes_by_pk?:ModelTypes["vectric_products_fulfilmenttypes"],
	/** update data of the table: "vectric.products_product_fulfilments" */
	update_vectric_products_product_fulfilments?:ModelTypes["vectric_products_product_fulfilments_mutation_response"],
	/** update single row of the table: "vectric.products_product_fulfilments" */
	update_vectric_products_product_fulfilments_by_pk?:ModelTypes["vectric_products_product_fulfilments"],
	/** update data of the table: "vectric.products_product_licence_type" */
	update_vectric_products_product_licence_type?:ModelTypes["vectric_products_product_licence_type_mutation_response"],
	/** update single row of the table: "vectric.products_product_licence_type" */
	update_vectric_products_product_licence_type_by_pk?:ModelTypes["vectric_products_product_licence_type"],
	/** update data of the table: "vectric.sales_customerupdates" */
	update_vectric_sales_customerupdates?:ModelTypes["vectric_sales_customerupdates_mutation_response"],
	/** update single row of the table: "vectric.sales_customerupdates" */
	update_vectric_sales_customerupdates_by_pk?:ModelTypes["vectric_sales_customerupdates"],
	/** update data of the table: "vectric.sales_oemlicences" */
	update_vectric_sales_oemlicences?:ModelTypes["vectric_sales_oemlicences_mutation_response"],
	/** update single row of the table: "vectric.sales_oemlicences" */
	update_vectric_sales_oemlicences_by_pk?:ModelTypes["vectric_sales_oemlicences"],
	/** update data of the table: "vectric.sales_salesitemproduct_status" */
	update_vectric_sales_salesitemproduct_status?:ModelTypes["vectric_sales_salesitemproduct_status_mutation_response"],
	/** update single row of the table: "vectric.sales_salesitemproduct_status" */
	update_vectric_sales_salesitemproduct_status_by_pk?:ModelTypes["vectric_sales_salesitemproduct_status"],
	/** update data of the table: "vectric.security_emailverificationtokens" */
	update_vectric_security_emailverificationtokens?:ModelTypes["vectric_security_emailverificationtokens_mutation_response"],
	/** update single row of the table: "vectric.security_emailverificationtokens" */
	update_vectric_security_emailverificationtokens_by_pk?:ModelTypes["vectric_security_emailverificationtokens"],
	/** update data of the table: "vectric.security_group_authorities" */
	update_vectric_security_group_authorities?:ModelTypes["vectric_security_group_authorities_mutation_response"],
	/** update data of the table: "vectric.security_group_members" */
	update_vectric_security_group_members?:ModelTypes["vectric_security_group_members_mutation_response"],
	/** update single row of the table: "vectric.security_group_members" */
	update_vectric_security_group_members_by_pk?:ModelTypes["vectric_security_group_members"],
	/** update data of the table: "vectric.security_passwordresettokens" */
	update_vectric_security_passwordresettokens?:ModelTypes["vectric_security_passwordresettokens_mutation_response"],
	/** update single row of the table: "vectric.security_passwordresettokens" */
	update_vectric_security_passwordresettokens_by_pk?:ModelTypes["vectric_security_passwordresettokens"],
	/** update data of the table: "vectric.security_userinvitations" */
	update_vectric_security_userinvitations?:ModelTypes["vectric_security_userinvitations_mutation_response"],
	/** update data of the table: "vectric.subscription_contract_status" */
	update_vectric_subscription_contract_status?:ModelTypes["vectric_subscription_contract_status_mutation_response"],
	/** update single row of the table: "vectric.subscription_contract_status" */
	update_vectric_subscription_contract_status_by_pk?:ModelTypes["vectric_subscription_contract_status"],
	/** update data of the table: "vectric.subscription_contracts" */
	update_vectric_subscription_contracts?:ModelTypes["vectric_subscription_contracts_mutation_response"],
	/** update single row of the table: "vectric.subscription_contracts" */
	update_vectric_subscription_contracts_by_pk?:ModelTypes["vectric_subscription_contracts"],
	/** update data of the table: "vectric.subscription_events" */
	update_vectric_subscription_events?:ModelTypes["vectric_subscription_events_mutation_response"],
	/** update single row of the table: "vectric.subscription_events" */
	update_vectric_subscription_events_by_pk?:ModelTypes["vectric_subscription_events"],
	/** update single row of the table: "vectric.update_requests" */
	update_vectric_update_requests_by_pk?:ModelTypes["vectric_update_requests"],
	/** update data of the table: "vectric.upgrade_tokens" */
	update_vectric_upgrade_tokens?:ModelTypes["vectric_upgrade_tokens_mutation_response"],
	/** update single row of the table: "vectric.upgrade_tokens" */
	update_vectric_upgrade_tokens_by_pk?:ModelTypes["vectric_upgrade_tokens"],
	/** update data of the table: "vectric.version_code" */
	update_vectric_version_code?:ModelTypes["vectric_version_code_mutation_response"],
	/** update single row of the table: "vectric.version_code" */
	update_vectric_version_code_by_pk?:ModelTypes["vectric_version_code"],
	upgradeDetailsFromToken?:ModelTypes["UpgradeDetails"],
	validateFSRequest?:ModelTypes["FastspringSecureRequestOutput"],
	verifyEmail?:ModelTypes["EmailVerificationOutput"],
	zendeskUpload?:ModelTypes["ZendeskUploadOutput"]
};
	["query_root"]: {
		/** fetch data from the table: "vectric.usergroup_2019_attendees" using primary key columns */
	UserGroupAttendeeById?:ModelTypes["vectric_usergroup_2019_attendees"],
	/** fetch data from the table: "vectric.usergroup_2019_attendees" */
	UserGroupAttendees:ModelTypes["vectric_usergroup_2019_attendees"][],
	/** fetch aggregated fields from the table: "vectric.usergroup_2019_attendees" */
	UserGroupAttendees_aggregate:ModelTypes["vectric_usergroup_2019_attendees_aggregate"],
	/** fetch data from the table: "vectric.allocatable_bundles" */
	allocatableBundles:ModelTypes["vectric_allocatable_bundles"][],
	/** fetch data from the table: "vectric.allocatable_licence_count" */
	allocatableLicenceCount:ModelTypes["vectric_allocatable_licence_count"][],
	/** fetch aggregated fields from the table: "vectric.allocatable_licence_count" */
	allocatableLicenceCount_aggregate:ModelTypes["vectric_allocatable_licence_count_aggregate"],
	/** fetch data from the table: "vectric.allocated_bundles" */
	allocatedBundles:ModelTypes["vectric_allocated_bundles"][],
	/** fetch data from the table: "vectric.allocation_summary" */
	allocationSummaries:ModelTypes["vectric_allocation_summary"][],
	/** fetch data from the table: "vectric.allocation_summary" using primary key columns */
	allocationSummaryById?:ModelTypes["vectric_allocation_summary"],
	/** fetch aggregated fields from the table: "vectric.allocation_summary" */
	allocationSummary_aggregate:ModelTypes["vectric_allocation_summary_aggregate"],
	/** fetch data from the table: "vectric.owned_item_assignments" using primary key columns */
	assignment?:ModelTypes["vectric_owned_item_assignments"],
	/** fetch data from the table: "vectric.owned_item_assignments" */
	assignments:ModelTypes["vectric_owned_item_assignments"][],
	/** fetch aggregated fields from the table: "vectric.owned_item_assignments" */
	assignments_aggregate:ModelTypes["vectric_owned_item_assignments_aggregate"],
	checkSignUpEmail?:ModelTypes["CheckEmailForSignUpOutput"],
	/** fetch data from the table: "vectric.products_clipartcollection_links" */
	clipartCollection:ModelTypes["vectric_products_clipartcollection_links"][],
	/** fetch data from the table: "vectric.countries" */
	countries:ModelTypes["vectric_countries"][],
	/** fetch aggregated fields from the table: "vectric.countries" */
	countries_aggregate:ModelTypes["vectric_countries_aggregate"],
	/** fetch data from the table: "vectric.countries" using primary key columns */
	countryById?:ModelTypes["vectric_countries"],
	/** fetch data from the table: "vectric.customer_area" */
	customerArea:ModelTypes["vectric_customer_area"][],
	/** fetch data from the table: "vectric.customer_area" using primary key columns */
	customerAreaByPk?:ModelTypes["vectric_customer_area"],
	/** fetch data from the table: "vectric.customer_area_file" */
	customerAreaFile:ModelTypes["vectric_customer_area_file"][],
	/** fetch data from the table: "vectric.customer_area_file" using primary key columns */
	customerAreaFileByPk?:ModelTypes["vectric_customer_area_file"],
	/** fetch data from the table: "vectric.sales_customers" using primary key columns */
	customerById?:ModelTypes["vectric_sales_customers"],
	/** fetch data from the table: "vectric.customer_responses" using primary key columns */
	customerResponseById?:ModelTypes["vectric_customer_responses"],
	/** fetch data from the table: "vectric.customer_responses" */
	customerResponses:ModelTypes["vectric_customer_responses"][],
	/** fetch aggregated fields from the table: "vectric.customer_responses" */
	customerResponses_aggregate:ModelTypes["vectric_customer_responses_aggregate"],
	/** An array relationship */
	customerSales:ModelTypes["vectric_customer_sales"][],
	/** An aggregate relationship */
	customerSales_aggregate:ModelTypes["vectric_customer_sales_aggregate"],
	/** fetch data from the table: "vectric.customer_status" */
	customerStatus:ModelTypes["vectric_customer_status"][],
	/** fetch data from the table: "vectric.customer_status" using primary key columns */
	customerStatusById?:ModelTypes["vectric_customer_status"],
	/** fetch data from the table: "vectric.sales_customers" */
	customers:ModelTypes["vectric_sales_customers"][],
	/** fetch data from the table: "vectric.download" using primary key columns */
	downloadByPk?:ModelTypes["vectric_download"],
	/** fetch data from the table: "vectric.sales_velocitytemplate" using primary key columns */
	emailTemplate?:ModelTypes["vectric_sales_velocitytemplate"],
	/** fetch aggregated fields from the table: "vectric.sales_velocitytemplate" */
	emailTemplate_aggregate:ModelTypes["vectric_sales_velocitytemplate_aggregate"],
	/** fetch data from the table: "vectric.sales_velocitytemplate" */
	emailTemplates:ModelTypes["vectric_sales_velocitytemplate"][],
	/** An array relationship */
	enhancementTokens:ModelTypes["vectric_enhancement_tokens"][],
	/** fetch data from the table: "vectric.entitled_products" using primary key columns */
	entitledProduct?:ModelTypes["vectric_entitled_products"],
	/** fetch data from the table: "vectric.entitled_products" */
	entitledProducts:ModelTypes["vectric_entitled_products"][],
	/** fetch aggregated fields from the table: "vectric.entitled_products" */
	entitledProducts_aggregate:ModelTypes["vectric_entitled_products_aggregate"],
	/** fetch data from the table: "vectric.entitlements" using primary key columns */
	entitlement?:ModelTypes["vectric_entitlements"],
	/** fetch data from the table: "vectric.entitlement_licences" using primary key columns */
	entitlementLicence?:ModelTypes["vectric_entitlement_licences"],
	/** fetch aggregated fields from the table: "vectric.entitlement_licences" */
	entitlementLicence_aggregate:ModelTypes["vectric_entitlement_licences_aggregate"],
	/** fetch data from the table: "vectric.entitlement_licences" */
	entitlementLicences:ModelTypes["vectric_entitlement_licences"][],
	/** An array relationship */
	entitlements:ModelTypes["vectric_entitlements"][],
	/** An aggregate relationship */
	entitlements_aggregate:ModelTypes["vectric_entitlements_aggregate"],
	/** fetch data from the table: "vectric.oem_eval_request" using primary key columns */
	evalRequestById?:ModelTypes["vectric_oem_eval_request"],
	/** fetch aggregated fields from the table: "vectric.oem_eval_request" */
	evalRequest_aggregate:ModelTypes["vectric_oem_eval_request_aggregate"],
	/** fetch data from the table: "vectric.oem_eval_request" */
	evalRequests:ModelTypes["vectric_oem_eval_request"][],
	/** fetch data from the table: "vectric.freeclipart" */
	freeClipart:ModelTypes["vectric_freeclipart"][],
	/** fetch data from the table: "vectric.freeclipart_category" */
	freeClipartCategory:ModelTypes["vectric_freeclipart_category"][],
	/** fetch data from the table: "vectric.free_clipart_tokens" using primary key columns */
	freeClipartTokenByPk?:ModelTypes["vectric_free_clipart_tokens"],
	/** An array relationship */
	freeClipartTokens:ModelTypes["vectric_free_clipart_tokens"][],
	getAdminDownloadLinkForFulfilment?:ModelTypes["GetDownloadLinkForFulfilmentOutput"],
	getDownloadLinkForFulfilment?:ModelTypes["GetDownloadLinkForFulfilmentOutput"],
	getDownloadLinkForPrivateProject?:ModelTypes["GetDownloadLinkForContentProject"],
	getLicenceDetailsForProductOrderItemAndAddOns?:(ModelTypes["LicenceDetailsForProductOrderItemAndAddOns"] | undefined)[],
	getLicenceDetailsForProductOrderItems:ModelTypes["LicenceDetailsForProductOrderItem"][],
	/** fetch data from the table: "vectric.organization_licence_scope" using primary key columns */
	licenceScope?:ModelTypes["vectric_organization_licence_scope"],
	/** fetch aggregated fields from the table: "vectric.organization_licence_scope" */
	licenceScope_aggregate:ModelTypes["vectric_organization_licence_scope_aggregate"],
	/** fetch data from the table: "vectric.organization_licence_scope" */
	licenceScopes:ModelTypes["vectric_organization_licence_scope"][],
	/** fetch data from the table: "vectric.memberships" using primary key columns */
	membershipById?:ModelTypes["vectric_memberships"],
	/** fetch data from the table: "vectric.membership_invitations" using primary key columns */
	membershipInvitationById?:ModelTypes["vectric_membership_invitations"],
	membershipInvitationCheck?:ModelTypes["MembershipInvitationCheckResult"],
	/** An array relationship */
	membershipInvitations:ModelTypes["vectric_membership_invitations"][],
	/** An aggregate relationship */
	membershipInvitations_aggregate:ModelTypes["vectric_membership_invitations_aggregate"],
	/** An array relationship */
	memberships:ModelTypes["vectric_memberships"][],
	/** An aggregate relationship */
	memberships_aggregate:ModelTypes["vectric_memberships_aggregate"],
	/** fetch data from the table: "vectric.oem_allocation_emails" */
	oemAllocationEmails:ModelTypes["vectric_oem_allocation_emails"][],
	/** fetch aggregated fields from the table: "vectric.oem_allocation_emails" */
	oemAllocationEmails_aggregate:ModelTypes["vectric_oem_allocation_emails_aggregate"],
	/** fetch data from the table: "vectric.sales_oem_bundles" */
	oemBundles:ModelTypes["vectric_sales_oem_bundles"][],
	/** fetch data from the table: "vectric.sales_oem_bundles" using primary key columns */
	oemBundlesById?:ModelTypes["vectric_sales_oem_bundles"],
	/** fetch aggregated fields from the table: "vectric.sales_oem_bundles" */
	oemBundles_aggregate:ModelTypes["vectric_sales_oem_bundles_aggregate"],
	/** fetch data from the table: "vectric.oem_fastspring_item" */
	oemFastspringItem:ModelTypes["vectric_oem_fastspring_item"][],
	/** fetch data from the table: "vectric.oem_fastspring_item" using primary key columns */
	oemFastspringItemById?:ModelTypes["vectric_oem_fastspring_item"],
	/** fetch aggregated fields from the table: "vectric.oem_fastspring_item" */
	oemFastspringItem_aggregate:ModelTypes["vectric_oem_fastspring_item_aggregate"],
	/** fetch data from the table: "vectric.oem_fastspring_order" */
	oemFastspringOrder:ModelTypes["vectric_oem_fastspring_order"][],
	/** fetch data from the table: "vectric.oem_fastspring_order" using primary key columns */
	oemFastspringOrderById?:ModelTypes["vectric_oem_fastspring_order"],
	/** fetch aggregated fields from the table: "vectric.oem_fastspring_order" */
	oemFastspringOrder_aggregate:ModelTypes["vectric_oem_fastspring_order_aggregate"],
	/** fetch data from the table: "vectric.oem_licence_allocation_type" */
	oemLicenceAllocationType:ModelTypes["vectric_oem_licence_allocation_type"][],
	/** fetch data from the table: "vectric.sales_oemlicences" */
	oemLicences:ModelTypes["vectric_sales_oemlicences"][],
	/** fetch data from the table: "vectric.sales_oemlicences" using primary key columns */
	oemLicencesById?:ModelTypes["vectric_sales_oemlicences"],
	/** fetch data from the table: "vectric.oem_partners" */
	oemPartners:ModelTypes["vectric_oem_partners"][],
	/** fetch data from the table: "vectric.oem_partners" using primary key columns */
	oemPartnersById?:ModelTypes["vectric_oem_partners"],
	/** fetch data from the table: "vectric.oem_products" using primary key columns */
	oemProductByPk?:ModelTypes["vectric_oem_products"],
	/** fetch data from the table: "vectric.oem_products" */
	oemProducts:ModelTypes["vectric_oem_products"][],
	/** fetch data from the table: "vectric.oem_purchase_options" */
	oemPurchaseOptions:ModelTypes["vectric_oem_purchase_options"][],
	/** fetch data from the table: "vectric.oem_purchase_options" using primary key columns */
	oemPurchaseOptionsByOptionId?:ModelTypes["vectric_oem_purchase_options"],
	/** fetch aggregated fields from the table: "vectric.oem_purchase_options" */
	oemPurchaseOptions_aggregate:ModelTypes["vectric_oem_purchase_options_aggregate"],
	/** fetch data from the table: "vectric.oem_staff_customer" using primary key columns */
	oemStaffCustomerById?:ModelTypes["vectric_oem_staff_customer"],
	/** fetch data from the table: "vectric.oem_staff_customer" */
	oemStaffCustomers:ModelTypes["vectric_oem_staff_customer"][],
	/** fetch aggregated fields from the table: "vectric.oem_staff_customer" */
	oemStaffCustomers_aggregate:ModelTypes["vectric_oem_staff_customer_aggregate"],
	/** fetch data from the table: "vectric.oem_staff_admin_ownership" */
	oemStaffMembershipDetails:ModelTypes["vectric_oem_staff_admin_ownership"][],
	/** An array relationship */
	orders:ModelTypes["vectric_sales_orders"][],
	/** fetch data from the table: "vectric.sales_orders" using primary key columns */
	ordersByOrderId?:ModelTypes["vectric_sales_orders"],
	/** fetch data from the table: "vectric.organization_audit" using primary key columns */
	organizationAuditById?:ModelTypes["vectric_organization_audit"],
	/** fetch aggregated fields from the table: "vectric.organization_audit" */
	organizationAudit_aggregate:ModelTypes["vectric_organization_audit_aggregate"],
	/** fetch data from the table: "vectric.organizations" using primary key columns */
	organizationById?:ModelTypes["vectric_organizations"],
	/** fetch data from the table: "vectric.organization_memberships_admin_access" */
	organizationMembershipsAdminAccess:ModelTypes["vectric_organization_memberships_admin_access"][],
	/** fetch data from the table: "vectric.organization_orders" using primary key columns */
	organizationOrder?:ModelTypes["vectric_organization_orders"],
	/** fetch data from the table: "vectric.organization_order_items" using primary key columns */
	organizationOrderItem?:ModelTypes["vectric_organization_order_items"],
	/** fetch data from the table: "vectric.organization_order_items" */
	organizationOrderItems:ModelTypes["vectric_organization_order_items"][],
	/** fetch data from the table: "vectric.organization_orders" */
	organizationOrders:ModelTypes["vectric_organization_orders"][],
	/** fetch aggregated fields from the table: "vectric.organizations" */
	organization_aggregate:ModelTypes["vectric_organizations_aggregate"],
	/** fetch data from the table: "vectric.organizations" */
	organizations:ModelTypes["vectric_organizations"][],
	/** fetch data from the table: "vectric.organization_audit" */
	organiztionAudits:ModelTypes["vectric_organization_audit"][],
	/** fetch data from the table: "vectric.owned_items" using primary key columns */
	ownedItem?:ModelTypes["vectric_owned_items"],
	/** An array relationship */
	ownedItems:ModelTypes["vectric_owned_items"][],
	/** An aggregate relationship */
	ownedItems_aggregate:ModelTypes["vectric_owned_items_aggregate"],
	/** fetch data from the table: "vectric.owned_products" using primary key columns */
	ownedProduct?:ModelTypes["vectric_owned_products"],
	/** fetch data from the table: "vectric.owned_products" */
	ownedProducts:ModelTypes["vectric_owned_products"][],
	/** fetch aggregated fields from the table: "vectric.owned_products" */
	ownedProducts_aggregate:ModelTypes["vectric_owned_products_aggregate"],
	/** fetch data from the table: "vectric.security_passwordresettokens" */
	passwordResetTokens:ModelTypes["vectric_security_passwordresettokens"][],
	/** fetch data from the table: "vectric.security_passwordresettokens" using primary key columns */
	passwordResetTokensByPk?:ModelTypes["vectric_security_passwordresettokens"],
	/** fetch data from the table: "vectric.products_products" using primary key columns */
	productById?:ModelTypes["vectric_products_products"],
	/** fetch data from the table: "vectric.products_enhancement_eligibility" */
	productEnhancementEligibility:ModelTypes["vectric_products_enhancement_eligibility"][],
	/** fetch data from the table: "vectric.products_producttype" */
	productTypes:ModelTypes["vectric_products_producttype"][],
	/** fetch data from the table: "vectric.products_producttype" using primary key columns */
	productTypesById?:ModelTypes["vectric_products_producttype"],
	/** fetch data from the table: "vectric.products_upgrade_eligibility" using primary key columns */
	productUpgradeEligibilityById?:ModelTypes["vectric_products_upgrade_eligibility"],
	/** An array relationship */
	products:ModelTypes["vectric_products_products"][],
	/** fetch data from the table: "vectric.products_freeclipart" */
	productsFreeClipart:ModelTypes["vectric_products_freeclipart"][],
	/** fetch data from the table: "vectric.products_upgrade_eligibility" */
	productsUpgradeEligibility:ModelTypes["vectric_products_upgrade_eligibility"][],
	/** fetch data from the table: "vectric.questions" using primary key columns */
	questionById?:ModelTypes["vectric_questions"],
	/** fetch data from the table: "vectric.questions" */
	questions:ModelTypes["vectric_questions"][],
	/** fetch aggregated fields from the table: "vectric.questions" */
	questions_aggregate:ModelTypes["vectric_questions_aggregate"],
	/** fetch data from the table: "vectric.responses" using primary key columns */
	responseById?:ModelTypes["vectric_responses"],
	/** fetch data from the table: "vectric.responses" */
	responses:ModelTypes["vectric_responses"][],
	/** fetch aggregated fields from the table: "vectric.responses" */
	responses_aggregate:ModelTypes["vectric_responses_aggregate"],
	/** fetch data from the table: "vectric.saleable_products" using primary key columns */
	saleableProduct?:ModelTypes["vectric_saleable_products"],
	/** fetch data from the table: "vectric.saleable_products" */
	saleableProducts:ModelTypes["vectric_saleable_products"][],
	/** fetch aggregated fields from the table: "vectric.saleable_products" */
	saleableProducts_aggregate:ModelTypes["vectric_saleable_products_aggregate"],
	/** fetch aggregated fields from the table: "vectric.sales_customers" */
	salesCustomers_aggregate:ModelTypes["vectric_sales_customers_aggregate"],
	/** fetch data from the table: "vectric.sales_salesitem_products" */
	salesItemProduct:ModelTypes["vectric_sales_salesitem_products"][],
	/** fetch data from the table: "vectric.sales_salesitem_products" using primary key columns */
	salesItemProductById?:ModelTypes["vectric_sales_salesitem_products"],
	/** An array relationship */
	salesItems:ModelTypes["vectric_sales_salesitems"][],
	/** fetch data from the table: "vectric.sales_salesitems" using primary key columns */
	salesItemsById?:ModelTypes["vectric_sales_salesitems"],
	/** fetch data from the table: "vectric.scheduled_emails" */
	scheduledEmails:ModelTypes["vectric_scheduled_emails"][],
	/** fetch data from the table: "vectric.scheduled_emails" using primary key columns */
	scheduledEmailsById?:ModelTypes["vectric_scheduled_emails"],
	/** fetch aggregated fields from the table: "vectric.scheduled_emails" */
	scheduledEmails_aggregate:ModelTypes["vectric_scheduled_emails_aggregate"],
	/** fetch data from the table: "vectric.security_emailverificationtokens" using primary key columns */
	securityEmailVerificationTokenByToken?:ModelTypes["vectric_security_emailverificationtokens"],
	/** fetch data from the table: "vectric.security_emailverificationtokens" */
	securityEmailVerificationTokens:ModelTypes["vectric_security_emailverificationtokens"][],
	/** fetch data from the table: "vectric.security_userinvitations" */
	securityUserInvitations:ModelTypes["vectric_security_userinvitations"][],
	/** fetch data from the table: "vectric.security_users" */
	securityUsers:ModelTypes["vectric_security_users"][],
	/** fetch data from the table: "vectric.sales_customer_downloads" */
	selectCustomerDownloads:ModelTypes["vectric_sales_customer_downloads"][],
	/** fetch data from the table: "vectric.sales_customer_downloads" using primary key columns */
	selectCustomerDownloadsById?:ModelTypes["vectric_sales_customer_downloads"],
	/** fetch aggregated fields from the table: "vectric.sales_customer_downloads" */
	selectCustomerDownloads_aggregate:ModelTypes["vectric_sales_customer_downloads_aggregate"],
	/** fetch data from the table: "vectric.security_group_members" using primary key columns */
	selectSecurityGroupMembersById?:ModelTypes["vectric_security_group_members"],
	/** fetch data from the table: "vectric.security_group_members" */
	selectSecurityGrupMemebers:ModelTypes["vectric_security_group_members"][],
	/** fetch data from the table: "vectric.linkshortener_links" */
	shortLinks:ModelTypes["vectric_linkshortener_links"][],
	/** fetch data from the table: "vectric.linkshortener_links" using primary key columns */
	shortLinksByHash?:ModelTypes["vectric_linkshortener_links"],
	/** fetch aggregated fields from the table: "vectric.site_option_location" */
	siteOptionLocation_aggregate:ModelTypes["vectric_site_option_location_aggregate"],
	/** fetch data from the table: "vectric.site_option_location" */
	siteOptionLocations:ModelTypes["vectric_site_option_location"][],
	/** fetch data from the table: "vectric.site_option_location" using primary key columns */
	siteOptionLocationsById?:ModelTypes["vectric_site_option_location"],
	/** fetch data from the table: "vectric.site_options" */
	siteOptions:ModelTypes["vectric_site_options"][],
	/** fetch data from the table: "vectric.site_options" using primary key columns */
	siteOptionsById?:ModelTypes["vectric_site_options"],
	/** fetch aggregated fields from the table: "vectric.site_options" */
	siteOptions_aggregate:ModelTypes["vectric_site_options_aggregate"],
	testAction?:ModelTypes["SampleOutput"],
	/** fetch aggregated fields from the table: "vectric.toolpath_saver_token" */
	toolpathSaveToken_aggregate:ModelTypes["vectric_toolpath_saver_token_aggregate"],
	/** fetch data from the table: "vectric.toolpath_saver_token" using primary key columns */
	toolpathSaverTokenById?:ModelTypes["vectric_toolpath_saver_token"],
	/** fetch data from the table: "vectric.toolpath_saver_token" */
	toolpathSaverTokens:ModelTypes["vectric_toolpath_saver_token"][],
	/** fetch data from the table: "vectric.trial_order" using primary key columns */
	trialOrderById?:ModelTypes["vectric_trial_order"],
	/** fetch data from the table: "vectric.trial_order" */
	trialOrders:ModelTypes["vectric_trial_order"][],
	/** fetch aggregated fields from the table: "vectric.trial_order" */
	trialOrders_aggregate:ModelTypes["vectric_trial_order_aggregate"],
	/** fetch data from the table: "vectric.update_requests" using primary key columns */
	updateRequestById?:ModelTypes["vectric_update_requests"],
	/** fetch data from the table: "vectric.update_requests" */
	updateRequests:ModelTypes["vectric_update_requests"][],
	/** fetch data from the table: "vectric.upgrades_feature" using primary key columns */
	upgradeFeatureById?:ModelTypes["vectric_upgrades_feature"],
	/** fetch data from the table: "vectric.upgrades_feature" */
	upgradeFeatures:ModelTypes["vectric_upgrades_feature"][],
	/** fetch aggregated fields from the table: "vectric.upgrades_feature" */
	upgradeFeatures_aggregate:ModelTypes["vectric_upgrades_feature_aggregate"],
	/** fetch data from the table: "vectric.upgrades_product_type_feature" using primary key columns */
	upgradeProductTypeFeatureById?:ModelTypes["vectric_upgrades_product_type_feature"],
	/** An array relationship */
	upgradeProductTypeFeatures:ModelTypes["vectric_upgrades_product_type_feature"][],
	/** An aggregate relationship */
	upgradeProductTypeFeatures_aggregate:ModelTypes["vectric_upgrades_product_type_feature_aggregate"],
	/** An array relationship */
	upgradeTokens:ModelTypes["vectric_upgrade_tokens"][],
	/** fetch data from the table: "vectric.upgrade_tokens" using primary key columns */
	upgradeTokensById?:ModelTypes["vectric_upgrade_tokens"],
	/** fetch data from the table: "vectric.upgrades_version_feature" using primary key columns */
	upgradeVersionFeatureById?:ModelTypes["vectric_upgrades_version_feature"],
	/** fetch data from the table: "vectric.upgrades_version_feature" */
	upgradeVersionFeatures:ModelTypes["vectric_upgrades_version_feature"][],
	/** An aggregate relationship */
	upgradeVersionFeatures_aggregate:ModelTypes["vectric_upgrades_version_feature_aggregate"],
	/** fetch data from the table: "vectric.usergroup_2019_waitlist" */
	userGroupWaitingListEntries:ModelTypes["vectric_usergroup_2019_waitlist"][],
	/** fetch aggregated fields from the table: "vectric.usergroup_2019_waitlist" */
	userGroupWaitingListEntries_aggregate:ModelTypes["vectric_usergroup_2019_waitlist_aggregate"],
	/** fetch data from the table: "vectric.usergroup_2019_waitlist" using primary key columns */
	userGroupWaitingListEntryById?:ModelTypes["vectric_usergroup_2019_waitlist"],
	validateInvitationToken?:ModelTypes["ValidateInvitationToken"],
	validateVerificationToken:ModelTypes["ValidateVerificationToken"],
	/** fetch data from the table: "vectric.active_memberships" */
	vectric_active_memberships:ModelTypes["vectric_active_memberships"][],
	/** fetch aggregated fields from the table: "vectric.active_memberships" */
	vectric_active_memberships_aggregate:ModelTypes["vectric_active_memberships_aggregate"],
	/** fetch data from the table: "vectric.active_upgrades" */
	vectric_active_upgrades:ModelTypes["vectric_active_upgrades"][],
	/** fetch aggregated fields from the table: "vectric.active_upgrades" */
	vectric_active_upgrades_aggregate:ModelTypes["vectric_active_upgrades_aggregate"],
	/** fetch aggregated fields from the table: "vectric.allocatable_bundles" */
	vectric_allocatable_bundles_aggregate:ModelTypes["vectric_allocatable_bundles_aggregate"],
	/** fetch aggregated fields from the table: "vectric.allocated_bundles" */
	vectric_allocated_bundles_aggregate:ModelTypes["vectric_allocated_bundles_aggregate"],
	/** fetch data from the table: "vectric.allocation_summary_file_type" */
	vectric_allocation_summary_file_type:ModelTypes["vectric_allocation_summary_file_type"][],
	/** fetch aggregated fields from the table: "vectric.allocation_summary_file_type" */
	vectric_allocation_summary_file_type_aggregate:ModelTypes["vectric_allocation_summary_file_type_aggregate"],
	/** fetch data from the table: "vectric.allocation_summary_file_type" using primary key columns */
	vectric_allocation_summary_file_type_by_pk?:ModelTypes["vectric_allocation_summary_file_type"],
	/** fetch data from the table: "vectric.continents" */
	vectric_continents:ModelTypes["vectric_continents"][],
	/** fetch aggregated fields from the table: "vectric.continents" */
	vectric_continents_aggregate:ModelTypes["vectric_continents_aggregate"],
	/** fetch data from the table: "vectric.continents" using primary key columns */
	vectric_continents_by_pk?:ModelTypes["vectric_continents"],
	/** fetch aggregated fields from the table: "vectric.customer_area" */
	vectric_customer_area_aggregate:ModelTypes["vectric_customer_area_aggregate"],
	/** fetch aggregated fields from the table: "vectric.customer_area_file" */
	vectric_customer_area_file_aggregate:ModelTypes["vectric_customer_area_file_aggregate"],
	/** fetch aggregated fields from the table: "vectric.customer_status" */
	vectric_customer_status_aggregate:ModelTypes["vectric_customer_status_aggregate"],
	/** fetch data from the table: "vectric.download" */
	vectric_download:ModelTypes["vectric_download"][],
	/** fetch aggregated fields from the table: "vectric.download" */
	vectric_download_aggregate:ModelTypes["vectric_download_aggregate"],
	/** fetch data from the table: "vectric.download_record" */
	vectric_download_record:ModelTypes["vectric_download_record"][],
	/** fetch aggregated fields from the table: "vectric.download_record" */
	vectric_download_record_aggregate:ModelTypes["vectric_download_record_aggregate"],
	/** fetch data from the table: "vectric.download_record" using primary key columns */
	vectric_download_record_by_pk?:ModelTypes["vectric_download_record"],
	/** fetch aggregated fields from the table: "vectric.enhancement_tokens" */
	vectric_enhancement_tokens_aggregate:ModelTypes["vectric_enhancement_tokens_aggregate"],
	/** fetch data from the table: "vectric.enhancement_tokens" using primary key columns */
	vectric_enhancement_tokens_by_pk?:ModelTypes["vectric_enhancement_tokens"],
	/** fetch data from the table: "vectric.entitled_product_version_code_view" */
	vectric_entitled_product_version_code_view:ModelTypes["vectric_entitled_product_version_code_view"][],
	/** fetch aggregated fields from the table: "vectric.entitled_product_version_code_view" */
	vectric_entitled_product_version_code_view_aggregate:ModelTypes["vectric_entitled_product_version_code_view_aggregate"],
	/** fetch aggregated fields from the table: "vectric.free_clipart_tokens" */
	vectric_free_clipart_tokens_aggregate:ModelTypes["vectric_free_clipart_tokens_aggregate"],
	/** fetch aggregated fields from the table: "vectric.freeclipart" */
	vectric_freeclipart_aggregate:ModelTypes["vectric_freeclipart_aggregate"],
	/** fetch data from the table: "vectric.freeclipart" using primary key columns */
	vectric_freeclipart_by_pk?:ModelTypes["vectric_freeclipart"],
	/** fetch aggregated fields from the table: "vectric.freeclipart_category" */
	vectric_freeclipart_category_aggregate:ModelTypes["vectric_freeclipart_category_aggregate"],
	/** fetch data from the table: "vectric.freeclipart_category" using primary key columns */
	vectric_freeclipart_category_by_pk?:ModelTypes["vectric_freeclipart_category"],
	/** fetch data from the table: "vectric.freeclipart_download_record" */
	vectric_freeclipart_download_record:ModelTypes["vectric_freeclipart_download_record"][],
	/** fetch aggregated fields from the table: "vectric.freeclipart_download_record" */
	vectric_freeclipart_download_record_aggregate:ModelTypes["vectric_freeclipart_download_record_aggregate"],
	/** fetch data from the table: "vectric.freeclipart_download_record" using primary key columns */
	vectric_freeclipart_download_record_by_pk?:ModelTypes["vectric_freeclipart_download_record"],
	/** fetch data from the table: "vectric.group_info" */
	vectric_group_info:ModelTypes["vectric_group_info"][],
	/** fetch aggregated fields from the table: "vectric.group_info" */
	vectric_group_info_aggregate:ModelTypes["vectric_group_info_aggregate"],
	/** fetch data from the table: "vectric.group_roles" */
	vectric_group_roles:ModelTypes["vectric_group_roles"][],
	/** fetch aggregated fields from the table: "vectric.group_roles" */
	vectric_group_roles_aggregate:ModelTypes["vectric_group_roles_aggregate"],
	/** fetch data from the table: "vectric.group_roles" using primary key columns */
	vectric_group_roles_by_pk?:ModelTypes["vectric_group_roles"],
	/** fetch data from the table: "vectric.group_user_role" */
	vectric_group_user_role:ModelTypes["vectric_group_user_role"][],
	/** fetch aggregated fields from the table: "vectric.group_user_role" */
	vectric_group_user_role_aggregate:ModelTypes["vectric_group_user_role_aggregate"],
	/** fetch data from the table: "vectric.group_user_role" using primary key columns */
	vectric_group_user_role_by_pk?:ModelTypes["vectric_group_user_role"],
	/** fetch data from the table: "vectric.groups" */
	vectric_groups:ModelTypes["vectric_groups"][],
	/** fetch aggregated fields from the table: "vectric.groups" */
	vectric_groups_aggregate:ModelTypes["vectric_groups_aggregate"],
	/** fetch data from the table: "vectric.groups" using primary key columns */
	vectric_groups_by_pk?:ModelTypes["vectric_groups"],
	/** fetch data from the table: "vectric.language_codes" */
	vectric_language_codes:ModelTypes["vectric_language_codes"][],
	/** fetch aggregated fields from the table: "vectric.language_codes" */
	vectric_language_codes_aggregate:ModelTypes["vectric_language_codes_aggregate"],
	/** fetch data from the table: "vectric.language_codes" using primary key columns */
	vectric_language_codes_by_pk?:ModelTypes["vectric_language_codes"],
	/** fetch data from the table: "vectric.licence_log" */
	vectric_licence_log:ModelTypes["vectric_licence_log"][],
	/** fetch aggregated fields from the table: "vectric.licence_log" */
	vectric_licence_log_aggregate:ModelTypes["vectric_licence_log_aggregate"],
	/** fetch data from the table: "vectric.licence_log" using primary key columns */
	vectric_licence_log_by_pk?:ModelTypes["vectric_licence_log"],
	/** fetch aggregated fields from the table: "vectric.linkshortener_links" */
	vectric_linkshortener_links_aggregate:ModelTypes["vectric_linkshortener_links_aggregate"],
	/** fetch data from the table: "vectric.makerspace_requests" */
	vectric_makerspace_requests:ModelTypes["vectric_makerspace_requests"][],
	/** fetch aggregated fields from the table: "vectric.makerspace_requests" */
	vectric_makerspace_requests_aggregate:ModelTypes["vectric_makerspace_requests_aggregate"],
	/** fetch data from the table: "vectric.makerspace_requests" using primary key columns */
	vectric_makerspace_requests_by_pk?:ModelTypes["vectric_makerspace_requests"],
	/** fetch data from the table: "vectric.membership_invitation_status" */
	vectric_membership_invitation_status:ModelTypes["vectric_membership_invitation_status"][],
	/** fetch aggregated fields from the table: "vectric.membership_invitation_status" */
	vectric_membership_invitation_status_aggregate:ModelTypes["vectric_membership_invitation_status_aggregate"],
	/** fetch data from the table: "vectric.membership_invitation_status" using primary key columns */
	vectric_membership_invitation_status_by_pk?:ModelTypes["vectric_membership_invitation_status"],
	/** fetch data from the table: "vectric.membership_roles" */
	vectric_membership_roles:ModelTypes["vectric_membership_roles"][],
	/** fetch aggregated fields from the table: "vectric.membership_roles" */
	vectric_membership_roles_aggregate:ModelTypes["vectric_membership_roles_aggregate"],
	/** fetch data from the table: "vectric.membership_roles" using primary key columns */
	vectric_membership_roles_by_pk?:ModelTypes["vectric_membership_roles"],
	/** fetch data from the table: "vectric.membership_status" */
	vectric_membership_status:ModelTypes["vectric_membership_status"][],
	/** fetch aggregated fields from the table: "vectric.membership_status" */
	vectric_membership_status_aggregate:ModelTypes["vectric_membership_status_aggregate"],
	/** fetch data from the table: "vectric.membership_status" using primary key columns */
	vectric_membership_status_by_pk?:ModelTypes["vectric_membership_status"],
	/** fetch data from the table: "vectric.oauth_client_details" */
	vectric_oauth_client_details:ModelTypes["vectric_oauth_client_details"][],
	/** fetch aggregated fields from the table: "vectric.oauth_client_details" */
	vectric_oauth_client_details_aggregate:ModelTypes["vectric_oauth_client_details_aggregate"],
	/** fetch data from the table: "vectric.oauth_client_details" using primary key columns */
	vectric_oauth_client_details_by_pk?:ModelTypes["vectric_oauth_client_details"],
	/** fetch data from the table: "vectric.oem_detailed_products" */
	vectric_oem_detailed_products:ModelTypes["vectric_oem_detailed_products"][],
	/** fetch aggregated fields from the table: "vectric.oem_detailed_products" */
	vectric_oem_detailed_products_aggregate:ModelTypes["vectric_oem_detailed_products_aggregate"],
	/** fetch data from the table: "vectric.oem_detailed_products" using primary key columns */
	vectric_oem_detailed_products_by_pk?:ModelTypes["vectric_oem_detailed_products"],
	/** fetch data from the table: "vectric.oem_fastspring_item_bundle" */
	vectric_oem_fastspring_item_bundle:ModelTypes["vectric_oem_fastspring_item_bundle"][],
	/** fetch aggregated fields from the table: "vectric.oem_fastspring_item_bundle" */
	vectric_oem_fastspring_item_bundle_aggregate:ModelTypes["vectric_oem_fastspring_item_bundle_aggregate"],
	/** fetch data from the table: "vectric.oem_fastspring_item_bundle" using primary key columns */
	vectric_oem_fastspring_item_bundle_by_pk?:ModelTypes["vectric_oem_fastspring_item_bundle"],
	/** fetch data from the table: "vectric.oem_invite_status" */
	vectric_oem_invite_status:ModelTypes["vectric_oem_invite_status"][],
	/** fetch aggregated fields from the table: "vectric.oem_invite_status" */
	vectric_oem_invite_status_aggregate:ModelTypes["vectric_oem_invite_status_aggregate"],
	/** fetch data from the table: "vectric.oem_invite_status" using primary key columns */
	vectric_oem_invite_status_by_pk?:ModelTypes["vectric_oem_invite_status"],
	/** fetch aggregated fields from the table: "vectric.oem_licence_allocation_type" */
	vectric_oem_licence_allocation_type_aggregate:ModelTypes["vectric_oem_licence_allocation_type_aggregate"],
	/** fetch data from the table: "vectric.oem_licence_allocation_type" using primary key columns */
	vectric_oem_licence_allocation_type_by_pk?:ModelTypes["vectric_oem_licence_allocation_type"],
	/** fetch aggregated fields from the table: "vectric.oem_partners" */
	vectric_oem_partners_aggregate:ModelTypes["vectric_oem_partners_aggregate"],
	/** fetch aggregated fields from the table: "vectric.oem_products" */
	vectric_oem_products_aggregate:ModelTypes["vectric_oem_products_aggregate"],
	/** fetch aggregated fields from the table: "vectric.oem_staff_admin_ownership" */
	vectric_oem_staff_admin_ownership_aggregate:ModelTypes["vectric_oem_staff_admin_ownership_aggregate"],
	/** fetch aggregated fields from the table: "vectric.organization_memberships_admin_access" */
	vectric_organization_memberships_admin_access_aggregate:ModelTypes["vectric_organization_memberships_admin_access_aggregate"],
	/** fetch aggregated fields from the table: "vectric.organization_order_items" */
	vectric_organization_order_items_aggregate:ModelTypes["vectric_organization_order_items_aggregate"],
	/** fetch aggregated fields from the table: "vectric.organization_orders" */
	vectric_organization_orders_aggregate:ModelTypes["vectric_organization_orders_aggregate"],
	/** fetch data from the table: "vectric.organization_types" */
	vectric_organization_types:ModelTypes["vectric_organization_types"][],
	/** fetch aggregated fields from the table: "vectric.organization_types" */
	vectric_organization_types_aggregate:ModelTypes["vectric_organization_types_aggregate"],
	/** fetch data from the table: "vectric.organization_types" using primary key columns */
	vectric_organization_types_by_pk?:ModelTypes["vectric_organization_types"],
	/** fetch aggregated fields from the table: "vectric.products_clipartcollection_links" */
	vectric_products_clipartcollection_links_aggregate:ModelTypes["vectric_products_clipartcollection_links_aggregate"],
	/** fetch data from the table: "vectric.products_clipartcollection_links" using primary key columns */
	vectric_products_clipartcollection_links_by_pk?:ModelTypes["vectric_products_clipartcollection_links"],
	/** fetch aggregated fields from the table: "vectric.products_enhancement_eligibility" */
	vectric_products_enhancement_eligibility_aggregate:ModelTypes["vectric_products_enhancement_eligibility_aggregate"],
	/** fetch data from the table: "vectric.products_enhancement_eligibility" using primary key columns */
	vectric_products_enhancement_eligibility_by_pk?:ModelTypes["vectric_products_enhancement_eligibility"],
	/** fetch aggregated fields from the table: "vectric.products_freeclipart" */
	vectric_products_freeclipart_aggregate:ModelTypes["vectric_products_freeclipart_aggregate"],
	/** fetch data from the table: "vectric.products_freeclipart" using primary key columns */
	vectric_products_freeclipart_by_pk?:ModelTypes["vectric_products_freeclipart"],
	/** fetch data from the table: "vectric.products_fulfilments" */
	vectric_products_fulfilments:ModelTypes["vectric_products_fulfilments"][],
	/** fetch aggregated fields from the table: "vectric.products_fulfilments" */
	vectric_products_fulfilments_aggregate:ModelTypes["vectric_products_fulfilments_aggregate"],
	/** fetch data from the table: "vectric.products_fulfilments" using primary key columns */
	vectric_products_fulfilments_by_pk?:ModelTypes["vectric_products_fulfilments"],
	/** fetch data from the table: "vectric.products_fulfilmenttypes" */
	vectric_products_fulfilmenttypes:ModelTypes["vectric_products_fulfilmenttypes"][],
	/** fetch aggregated fields from the table: "vectric.products_fulfilmenttypes" */
	vectric_products_fulfilmenttypes_aggregate:ModelTypes["vectric_products_fulfilmenttypes_aggregate"],
	/** fetch data from the table: "vectric.products_fulfilmenttypes" using primary key columns */
	vectric_products_fulfilmenttypes_by_pk?:ModelTypes["vectric_products_fulfilmenttypes"],
	/** fetch data from the table: "vectric.products_product_fulfilments" */
	vectric_products_product_fulfilments:ModelTypes["vectric_products_product_fulfilments"][],
	/** fetch aggregated fields from the table: "vectric.products_product_fulfilments" */
	vectric_products_product_fulfilments_aggregate:ModelTypes["vectric_products_product_fulfilments_aggregate"],
	/** fetch data from the table: "vectric.products_product_fulfilments" using primary key columns */
	vectric_products_product_fulfilments_by_pk?:ModelTypes["vectric_products_product_fulfilments"],
	/** fetch data from the table: "vectric.products_product_licence_type" */
	vectric_products_product_licence_type:ModelTypes["vectric_products_product_licence_type"][],
	/** fetch aggregated fields from the table: "vectric.products_product_licence_type" */
	vectric_products_product_licence_type_aggregate:ModelTypes["vectric_products_product_licence_type_aggregate"],
	/** fetch data from the table: "vectric.products_product_licence_type" using primary key columns */
	vectric_products_product_licence_type_by_pk?:ModelTypes["vectric_products_product_licence_type"],
	/** fetch aggregated fields from the table: "vectric.products_products" */
	vectric_products_products_aggregate:ModelTypes["vectric_products_products_aggregate"],
	/** fetch aggregated fields from the table: "vectric.products_producttype" */
	vectric_products_producttype_aggregate:ModelTypes["vectric_products_producttype_aggregate"],
	/** fetch aggregated fields from the table: "vectric.products_upgrade_eligibility" */
	vectric_products_upgrade_eligibility_aggregate:ModelTypes["vectric_products_upgrade_eligibility_aggregate"],
	/** fetch data from the table: "vectric.sales_customerupdates" */
	vectric_sales_customerupdates:ModelTypes["vectric_sales_customerupdates"][],
	/** fetch aggregated fields from the table: "vectric.sales_customerupdates" */
	vectric_sales_customerupdates_aggregate:ModelTypes["vectric_sales_customerupdates_aggregate"],
	/** fetch data from the table: "vectric.sales_customerupdates" using primary key columns */
	vectric_sales_customerupdates_by_pk?:ModelTypes["vectric_sales_customerupdates"],
	/** fetch aggregated fields from the table: "vectric.sales_oemlicences" */
	vectric_sales_oemlicences_aggregate:ModelTypes["vectric_sales_oemlicences_aggregate"],
	/** fetch aggregated fields from the table: "vectric.sales_orders" */
	vectric_sales_orders_aggregate:ModelTypes["vectric_sales_orders_aggregate"],
	/** fetch aggregated fields from the table: "vectric.sales_salesitem_products" */
	vectric_sales_salesitem_products_aggregate:ModelTypes["vectric_sales_salesitem_products_aggregate"],
	/** fetch data from the table: "vectric.sales_salesitemproduct_status" */
	vectric_sales_salesitemproduct_status:ModelTypes["vectric_sales_salesitemproduct_status"][],
	/** fetch aggregated fields from the table: "vectric.sales_salesitemproduct_status" */
	vectric_sales_salesitemproduct_status_aggregate:ModelTypes["vectric_sales_salesitemproduct_status_aggregate"],
	/** fetch data from the table: "vectric.sales_salesitemproduct_status" using primary key columns */
	vectric_sales_salesitemproduct_status_by_pk?:ModelTypes["vectric_sales_salesitemproduct_status"],
	/** fetch aggregated fields from the table: "vectric.sales_salesitems" */
	vectric_sales_salesitems_aggregate:ModelTypes["vectric_sales_salesitems_aggregate"],
	/** fetch aggregated fields from the table: "vectric.security_emailverificationtokens" */
	vectric_security_emailverificationtokens_aggregate:ModelTypes["vectric_security_emailverificationtokens_aggregate"],
	/** fetch data from the table: "vectric.security_group_authorities" */
	vectric_security_group_authorities:ModelTypes["vectric_security_group_authorities"][],
	/** fetch aggregated fields from the table: "vectric.security_group_authorities" */
	vectric_security_group_authorities_aggregate:ModelTypes["vectric_security_group_authorities_aggregate"],
	/** fetch aggregated fields from the table: "vectric.security_group_members" */
	vectric_security_group_members_aggregate:ModelTypes["vectric_security_group_members_aggregate"],
	/** fetch aggregated fields from the table: "vectric.security_passwordresettokens" */
	vectric_security_passwordresettokens_aggregate:ModelTypes["vectric_security_passwordresettokens_aggregate"],
	/** fetch aggregated fields from the table: "vectric.security_userinvitations" */
	vectric_security_userinvitations_aggregate:ModelTypes["vectric_security_userinvitations_aggregate"],
	/** fetch data from the table: "vectric.security_userinvitations" using primary key columns */
	vectric_security_userinvitations_by_pk?:ModelTypes["vectric_security_userinvitations"],
	/** fetch aggregated fields from the table: "vectric.security_users" */
	vectric_security_users_aggregate:ModelTypes["vectric_security_users_aggregate"],
	/** fetch data from the table: "vectric.security_users" using primary key columns */
	vectric_security_users_by_pk?:ModelTypes["vectric_security_users"],
	/** fetch data from the table: "vectric.subscription_contract_status" */
	vectric_subscription_contract_status:ModelTypes["vectric_subscription_contract_status"][],
	/** fetch aggregated fields from the table: "vectric.subscription_contract_status" */
	vectric_subscription_contract_status_aggregate:ModelTypes["vectric_subscription_contract_status_aggregate"],
	/** fetch data from the table: "vectric.subscription_contract_status" using primary key columns */
	vectric_subscription_contract_status_by_pk?:ModelTypes["vectric_subscription_contract_status"],
	/** fetch data from the table: "vectric.subscription_contracts" */
	vectric_subscription_contracts:ModelTypes["vectric_subscription_contracts"][],
	/** fetch aggregated fields from the table: "vectric.subscription_contracts" */
	vectric_subscription_contracts_aggregate:ModelTypes["vectric_subscription_contracts_aggregate"],
	/** fetch data from the table: "vectric.subscription_contracts" using primary key columns */
	vectric_subscription_contracts_by_pk?:ModelTypes["vectric_subscription_contracts"],
	/** fetch data from the table: "vectric.subscription_events" */
	vectric_subscription_events:ModelTypes["vectric_subscription_events"][],
	/** fetch aggregated fields from the table: "vectric.subscription_events" */
	vectric_subscription_events_aggregate:ModelTypes["vectric_subscription_events_aggregate"],
	/** fetch data from the table: "vectric.subscription_events" using primary key columns */
	vectric_subscription_events_by_pk?:ModelTypes["vectric_subscription_events"],
	/** fetch aggregated fields from the table: "vectric.update_requests" */
	vectric_update_requests_aggregate:ModelTypes["vectric_update_requests_aggregate"],
	/** fetch aggregated fields from the table: "vectric.upgrade_tokens" */
	vectric_upgrade_tokens_aggregate:ModelTypes["vectric_upgrade_tokens_aggregate"],
	/** fetch data from the table: "vectric.version_code" */
	vectric_version_code:ModelTypes["vectric_version_code"][],
	/** fetch aggregated fields from the table: "vectric.version_code" */
	vectric_version_code_aggregate:ModelTypes["vectric_version_code_aggregate"],
	/** fetch data from the table: "vectric.version_code" using primary key columns */
	vectric_version_code_by_pk?:ModelTypes["vectric_version_code"],
	/** fetch data from the table: "vectric.products_versioncodes" using primary key columns */
	versionCodeById?:ModelTypes["vectric_products_versioncodes"],
	/** fetch data from the table: "vectric.products_versioncodes" */
	versionCodes:ModelTypes["vectric_products_versioncodes"][],
	/** fetch aggregated fields from the table: "vectric.products_versioncodes" */
	versionCodes_aggregate:ModelTypes["vectric_products_versioncodes_aggregate"],
	/** fetch data from the table: "vectric.customer_zd_uploads" */
	zendeskUploads:ModelTypes["vectric_customer_zd_uploads"][],
	/** fetch data from the table: "vectric.customer_zd_uploads" using primary key columns */
	zendeskUploadsById?:ModelTypes["vectric_customer_zd_uploads"],
	/** fetch aggregated fields from the table: "vectric.customer_zd_uploads" */
	zendeskUploads_aggregate:ModelTypes["vectric_customer_zd_uploads_aggregate"]
};
	["subscription_root"]: {
		/** fetch data from the table: "vectric.usergroup_2019_attendees" using primary key columns */
	UserGroupAttendeeById?:ModelTypes["vectric_usergroup_2019_attendees"],
	/** fetch data from the table: "vectric.usergroup_2019_attendees" */
	UserGroupAttendees:ModelTypes["vectric_usergroup_2019_attendees"][],
	/** fetch aggregated fields from the table: "vectric.usergroup_2019_attendees" */
	UserGroupAttendees_aggregate:ModelTypes["vectric_usergroup_2019_attendees_aggregate"],
	/** fetch data from the table: "vectric.allocatable_bundles" */
	allocatableBundles:ModelTypes["vectric_allocatable_bundles"][],
	/** fetch data from the table: "vectric.allocatable_licence_count" */
	allocatableLicenceCount:ModelTypes["vectric_allocatable_licence_count"][],
	/** fetch aggregated fields from the table: "vectric.allocatable_licence_count" */
	allocatableLicenceCount_aggregate:ModelTypes["vectric_allocatable_licence_count_aggregate"],
	/** fetch data from the table: "vectric.allocated_bundles" */
	allocatedBundles:ModelTypes["vectric_allocated_bundles"][],
	/** fetch data from the table: "vectric.allocation_summary" */
	allocationSummaries:ModelTypes["vectric_allocation_summary"][],
	/** fetch data from the table: "vectric.allocation_summary" using primary key columns */
	allocationSummaryById?:ModelTypes["vectric_allocation_summary"],
	/** fetch aggregated fields from the table: "vectric.allocation_summary" */
	allocationSummary_aggregate:ModelTypes["vectric_allocation_summary_aggregate"],
	/** fetch data from the table: "vectric.owned_item_assignments" using primary key columns */
	assignment?:ModelTypes["vectric_owned_item_assignments"],
	/** fetch data from the table: "vectric.owned_item_assignments" */
	assignments:ModelTypes["vectric_owned_item_assignments"][],
	/** fetch aggregated fields from the table: "vectric.owned_item_assignments" */
	assignments_aggregate:ModelTypes["vectric_owned_item_assignments_aggregate"],
	/** fetch data from the table: "vectric.products_clipartcollection_links" */
	clipartCollection:ModelTypes["vectric_products_clipartcollection_links"][],
	/** fetch data from the table: "vectric.countries" */
	countries:ModelTypes["vectric_countries"][],
	/** fetch aggregated fields from the table: "vectric.countries" */
	countries_aggregate:ModelTypes["vectric_countries_aggregate"],
	/** fetch data from the table: "vectric.countries" using primary key columns */
	countryById?:ModelTypes["vectric_countries"],
	/** fetch data from the table: "vectric.customer_area" */
	customerArea:ModelTypes["vectric_customer_area"][],
	/** fetch data from the table: "vectric.customer_area" using primary key columns */
	customerAreaByPk?:ModelTypes["vectric_customer_area"],
	/** fetch data from the table: "vectric.customer_area_file" */
	customerAreaFile:ModelTypes["vectric_customer_area_file"][],
	/** fetch data from the table: "vectric.customer_area_file" using primary key columns */
	customerAreaFileByPk?:ModelTypes["vectric_customer_area_file"],
	/** fetch data from the table: "vectric.sales_customers" using primary key columns */
	customerById?:ModelTypes["vectric_sales_customers"],
	/** fetch data from the table: "vectric.customer_responses" using primary key columns */
	customerResponseById?:ModelTypes["vectric_customer_responses"],
	/** fetch data from the table: "vectric.customer_responses" */
	customerResponses:ModelTypes["vectric_customer_responses"][],
	/** fetch aggregated fields from the table: "vectric.customer_responses" */
	customerResponses_aggregate:ModelTypes["vectric_customer_responses_aggregate"],
	/** An array relationship */
	customerSales:ModelTypes["vectric_customer_sales"][],
	/** An aggregate relationship */
	customerSales_aggregate:ModelTypes["vectric_customer_sales_aggregate"],
	/** fetch data from the table: "vectric.customer_status" */
	customerStatus:ModelTypes["vectric_customer_status"][],
	/** fetch data from the table: "vectric.customer_status" using primary key columns */
	customerStatusById?:ModelTypes["vectric_customer_status"],
	/** fetch data from the table: "vectric.sales_customers" */
	customers:ModelTypes["vectric_sales_customers"][],
	/** fetch data from the table: "vectric.download" using primary key columns */
	downloadByPk?:ModelTypes["vectric_download"],
	/** fetch data from the table: "vectric.sales_velocitytemplate" using primary key columns */
	emailTemplate?:ModelTypes["vectric_sales_velocitytemplate"],
	/** fetch aggregated fields from the table: "vectric.sales_velocitytemplate" */
	emailTemplate_aggregate:ModelTypes["vectric_sales_velocitytemplate_aggregate"],
	/** fetch data from the table: "vectric.sales_velocitytemplate" */
	emailTemplates:ModelTypes["vectric_sales_velocitytemplate"][],
	/** An array relationship */
	enhancementTokens:ModelTypes["vectric_enhancement_tokens"][],
	/** fetch data from the table: "vectric.entitled_products" using primary key columns */
	entitledProduct?:ModelTypes["vectric_entitled_products"],
	/** fetch data from the table: "vectric.entitled_products" */
	entitledProducts:ModelTypes["vectric_entitled_products"][],
	/** fetch aggregated fields from the table: "vectric.entitled_products" */
	entitledProducts_aggregate:ModelTypes["vectric_entitled_products_aggregate"],
	/** fetch data from the table: "vectric.entitlements" using primary key columns */
	entitlement?:ModelTypes["vectric_entitlements"],
	/** fetch data from the table: "vectric.entitlement_licences" using primary key columns */
	entitlementLicence?:ModelTypes["vectric_entitlement_licences"],
	/** fetch aggregated fields from the table: "vectric.entitlement_licences" */
	entitlementLicence_aggregate:ModelTypes["vectric_entitlement_licences_aggregate"],
	/** fetch data from the table: "vectric.entitlement_licences" */
	entitlementLicences:ModelTypes["vectric_entitlement_licences"][],
	/** An array relationship */
	entitlements:ModelTypes["vectric_entitlements"][],
	/** An aggregate relationship */
	entitlements_aggregate:ModelTypes["vectric_entitlements_aggregate"],
	/** fetch data from the table: "vectric.oem_eval_request" using primary key columns */
	evalRequestById?:ModelTypes["vectric_oem_eval_request"],
	/** fetch aggregated fields from the table: "vectric.oem_eval_request" */
	evalRequest_aggregate:ModelTypes["vectric_oem_eval_request_aggregate"],
	/** fetch data from the table: "vectric.oem_eval_request" */
	evalRequests:ModelTypes["vectric_oem_eval_request"][],
	/** fetch data from the table: "vectric.freeclipart" */
	freeClipart:ModelTypes["vectric_freeclipart"][],
	/** fetch data from the table: "vectric.freeclipart_category" */
	freeClipartCategory:ModelTypes["vectric_freeclipart_category"][],
	/** fetch data from the table: "vectric.free_clipart_tokens" using primary key columns */
	freeClipartTokenByPk?:ModelTypes["vectric_free_clipart_tokens"],
	/** An array relationship */
	freeClipartTokens:ModelTypes["vectric_free_clipart_tokens"][],
	/** fetch data from the table: "vectric.organization_licence_scope" using primary key columns */
	licenceScope?:ModelTypes["vectric_organization_licence_scope"],
	/** fetch aggregated fields from the table: "vectric.organization_licence_scope" */
	licenceScope_aggregate:ModelTypes["vectric_organization_licence_scope_aggregate"],
	/** fetch data from the table: "vectric.organization_licence_scope" */
	licenceScopes:ModelTypes["vectric_organization_licence_scope"][],
	/** fetch data from the table: "vectric.memberships" using primary key columns */
	membershipById?:ModelTypes["vectric_memberships"],
	/** fetch data from the table: "vectric.membership_invitations" using primary key columns */
	membershipInvitationById?:ModelTypes["vectric_membership_invitations"],
	/** An array relationship */
	membershipInvitations:ModelTypes["vectric_membership_invitations"][],
	/** An aggregate relationship */
	membershipInvitations_aggregate:ModelTypes["vectric_membership_invitations_aggregate"],
	/** An array relationship */
	memberships:ModelTypes["vectric_memberships"][],
	/** An aggregate relationship */
	memberships_aggregate:ModelTypes["vectric_memberships_aggregate"],
	/** fetch data from the table: "vectric.oem_allocation_emails" */
	oemAllocationEmails:ModelTypes["vectric_oem_allocation_emails"][],
	/** fetch aggregated fields from the table: "vectric.oem_allocation_emails" */
	oemAllocationEmails_aggregate:ModelTypes["vectric_oem_allocation_emails_aggregate"],
	/** fetch data from the table: "vectric.sales_oem_bundles" */
	oemBundles:ModelTypes["vectric_sales_oem_bundles"][],
	/** fetch data from the table: "vectric.sales_oem_bundles" using primary key columns */
	oemBundlesById?:ModelTypes["vectric_sales_oem_bundles"],
	/** fetch aggregated fields from the table: "vectric.sales_oem_bundles" */
	oemBundles_aggregate:ModelTypes["vectric_sales_oem_bundles_aggregate"],
	/** fetch data from the table: "vectric.oem_fastspring_item" */
	oemFastspringItem:ModelTypes["vectric_oem_fastspring_item"][],
	/** fetch data from the table: "vectric.oem_fastspring_item" using primary key columns */
	oemFastspringItemById?:ModelTypes["vectric_oem_fastspring_item"],
	/** fetch aggregated fields from the table: "vectric.oem_fastspring_item" */
	oemFastspringItem_aggregate:ModelTypes["vectric_oem_fastspring_item_aggregate"],
	/** fetch data from the table: "vectric.oem_fastspring_order" */
	oemFastspringOrder:ModelTypes["vectric_oem_fastspring_order"][],
	/** fetch data from the table: "vectric.oem_fastspring_order" using primary key columns */
	oemFastspringOrderById?:ModelTypes["vectric_oem_fastspring_order"],
	/** fetch aggregated fields from the table: "vectric.oem_fastspring_order" */
	oemFastspringOrder_aggregate:ModelTypes["vectric_oem_fastspring_order_aggregate"],
	/** fetch data from the table: "vectric.oem_licence_allocation_type" */
	oemLicenceAllocationType:ModelTypes["vectric_oem_licence_allocation_type"][],
	/** fetch data from the table: "vectric.sales_oemlicences" */
	oemLicences:ModelTypes["vectric_sales_oemlicences"][],
	/** fetch data from the table: "vectric.sales_oemlicences" using primary key columns */
	oemLicencesById?:ModelTypes["vectric_sales_oemlicences"],
	/** fetch data from the table: "vectric.oem_partners" */
	oemPartners:ModelTypes["vectric_oem_partners"][],
	/** fetch data from the table: "vectric.oem_partners" using primary key columns */
	oemPartnersById?:ModelTypes["vectric_oem_partners"],
	/** fetch data from the table: "vectric.oem_products" using primary key columns */
	oemProductByPk?:ModelTypes["vectric_oem_products"],
	/** fetch data from the table: "vectric.oem_products" */
	oemProducts:ModelTypes["vectric_oem_products"][],
	/** fetch data from the table: "vectric.oem_purchase_options" */
	oemPurchaseOptions:ModelTypes["vectric_oem_purchase_options"][],
	/** fetch data from the table: "vectric.oem_purchase_options" using primary key columns */
	oemPurchaseOptionsByOptionId?:ModelTypes["vectric_oem_purchase_options"],
	/** fetch aggregated fields from the table: "vectric.oem_purchase_options" */
	oemPurchaseOptions_aggregate:ModelTypes["vectric_oem_purchase_options_aggregate"],
	/** fetch data from the table: "vectric.oem_staff_customer" using primary key columns */
	oemStaffCustomerById?:ModelTypes["vectric_oem_staff_customer"],
	/** fetch data from the table: "vectric.oem_staff_customer" */
	oemStaffCustomers:ModelTypes["vectric_oem_staff_customer"][],
	/** fetch aggregated fields from the table: "vectric.oem_staff_customer" */
	oemStaffCustomers_aggregate:ModelTypes["vectric_oem_staff_customer_aggregate"],
	/** fetch data from the table: "vectric.oem_staff_admin_ownership" */
	oemStaffMembershipDetails:ModelTypes["vectric_oem_staff_admin_ownership"][],
	/** An array relationship */
	orders:ModelTypes["vectric_sales_orders"][],
	/** fetch data from the table: "vectric.sales_orders" using primary key columns */
	ordersByOrderId?:ModelTypes["vectric_sales_orders"],
	/** fetch data from the table: "vectric.organization_audit" using primary key columns */
	organizationAuditById?:ModelTypes["vectric_organization_audit"],
	/** fetch aggregated fields from the table: "vectric.organization_audit" */
	organizationAudit_aggregate:ModelTypes["vectric_organization_audit_aggregate"],
	/** fetch data from the table: "vectric.organizations" using primary key columns */
	organizationById?:ModelTypes["vectric_organizations"],
	/** fetch data from the table: "vectric.organization_memberships_admin_access" */
	organizationMembershipsAdminAccess:ModelTypes["vectric_organization_memberships_admin_access"][],
	/** fetch data from the table: "vectric.organization_orders" using primary key columns */
	organizationOrder?:ModelTypes["vectric_organization_orders"],
	/** fetch data from the table: "vectric.organization_order_items" using primary key columns */
	organizationOrderItem?:ModelTypes["vectric_organization_order_items"],
	/** fetch data from the table: "vectric.organization_order_items" */
	organizationOrderItems:ModelTypes["vectric_organization_order_items"][],
	/** fetch data from the table: "vectric.organization_orders" */
	organizationOrders:ModelTypes["vectric_organization_orders"][],
	/** fetch aggregated fields from the table: "vectric.organizations" */
	organization_aggregate:ModelTypes["vectric_organizations_aggregate"],
	/** fetch data from the table: "vectric.organizations" */
	organizations:ModelTypes["vectric_organizations"][],
	/** fetch data from the table: "vectric.organization_audit" */
	organiztionAudits:ModelTypes["vectric_organization_audit"][],
	/** fetch data from the table: "vectric.owned_items" using primary key columns */
	ownedItem?:ModelTypes["vectric_owned_items"],
	/** An array relationship */
	ownedItems:ModelTypes["vectric_owned_items"][],
	/** An aggregate relationship */
	ownedItems_aggregate:ModelTypes["vectric_owned_items_aggregate"],
	/** fetch data from the table: "vectric.owned_products" using primary key columns */
	ownedProduct?:ModelTypes["vectric_owned_products"],
	/** fetch data from the table: "vectric.owned_products" */
	ownedProducts:ModelTypes["vectric_owned_products"][],
	/** fetch aggregated fields from the table: "vectric.owned_products" */
	ownedProducts_aggregate:ModelTypes["vectric_owned_products_aggregate"],
	/** fetch data from the table: "vectric.security_passwordresettokens" */
	passwordResetTokens:ModelTypes["vectric_security_passwordresettokens"][],
	/** fetch data from the table: "vectric.security_passwordresettokens" using primary key columns */
	passwordResetTokensByPk?:ModelTypes["vectric_security_passwordresettokens"],
	/** fetch data from the table: "vectric.products_products" using primary key columns */
	productById?:ModelTypes["vectric_products_products"],
	/** fetch data from the table: "vectric.products_enhancement_eligibility" */
	productEnhancementEligibility:ModelTypes["vectric_products_enhancement_eligibility"][],
	/** fetch data from the table: "vectric.products_producttype" */
	productTypes:ModelTypes["vectric_products_producttype"][],
	/** fetch data from the table: "vectric.products_producttype" using primary key columns */
	productTypesById?:ModelTypes["vectric_products_producttype"],
	/** fetch data from the table: "vectric.products_upgrade_eligibility" using primary key columns */
	productUpgradeEligibilityById?:ModelTypes["vectric_products_upgrade_eligibility"],
	/** An array relationship */
	products:ModelTypes["vectric_products_products"][],
	/** fetch data from the table: "vectric.products_freeclipart" */
	productsFreeClipart:ModelTypes["vectric_products_freeclipart"][],
	/** fetch data from the table: "vectric.products_upgrade_eligibility" */
	productsUpgradeEligibility:ModelTypes["vectric_products_upgrade_eligibility"][],
	/** fetch data from the table: "vectric.questions" using primary key columns */
	questionById?:ModelTypes["vectric_questions"],
	/** fetch data from the table: "vectric.questions" */
	questions:ModelTypes["vectric_questions"][],
	/** fetch aggregated fields from the table: "vectric.questions" */
	questions_aggregate:ModelTypes["vectric_questions_aggregate"],
	/** fetch data from the table: "vectric.responses" using primary key columns */
	responseById?:ModelTypes["vectric_responses"],
	/** fetch data from the table: "vectric.responses" */
	responses:ModelTypes["vectric_responses"][],
	/** fetch aggregated fields from the table: "vectric.responses" */
	responses_aggregate:ModelTypes["vectric_responses_aggregate"],
	/** fetch data from the table: "vectric.saleable_products" using primary key columns */
	saleableProduct?:ModelTypes["vectric_saleable_products"],
	/** fetch data from the table: "vectric.saleable_products" */
	saleableProducts:ModelTypes["vectric_saleable_products"][],
	/** fetch aggregated fields from the table: "vectric.saleable_products" */
	saleableProducts_aggregate:ModelTypes["vectric_saleable_products_aggregate"],
	/** fetch aggregated fields from the table: "vectric.sales_customers" */
	salesCustomers_aggregate:ModelTypes["vectric_sales_customers_aggregate"],
	/** fetch data from the table: "vectric.sales_salesitem_products" */
	salesItemProduct:ModelTypes["vectric_sales_salesitem_products"][],
	/** fetch data from the table: "vectric.sales_salesitem_products" using primary key columns */
	salesItemProductById?:ModelTypes["vectric_sales_salesitem_products"],
	/** An array relationship */
	salesItems:ModelTypes["vectric_sales_salesitems"][],
	/** fetch data from the table: "vectric.sales_salesitems" using primary key columns */
	salesItemsById?:ModelTypes["vectric_sales_salesitems"],
	/** fetch data from the table: "vectric.scheduled_emails" */
	scheduledEmails:ModelTypes["vectric_scheduled_emails"][],
	/** fetch data from the table: "vectric.scheduled_emails" using primary key columns */
	scheduledEmailsById?:ModelTypes["vectric_scheduled_emails"],
	/** fetch aggregated fields from the table: "vectric.scheduled_emails" */
	scheduledEmails_aggregate:ModelTypes["vectric_scheduled_emails_aggregate"],
	/** fetch data from the table: "vectric.security_emailverificationtokens" using primary key columns */
	securityEmailVerificationTokenByToken?:ModelTypes["vectric_security_emailverificationtokens"],
	/** fetch data from the table: "vectric.security_emailverificationtokens" */
	securityEmailVerificationTokens:ModelTypes["vectric_security_emailverificationtokens"][],
	/** fetch data from the table: "vectric.security_userinvitations" */
	securityUserInvitations:ModelTypes["vectric_security_userinvitations"][],
	/** fetch data from the table: "vectric.security_users" */
	securityUsers:ModelTypes["vectric_security_users"][],
	/** fetch data from the table: "vectric.sales_customer_downloads" */
	selectCustomerDownloads:ModelTypes["vectric_sales_customer_downloads"][],
	/** fetch data from the table: "vectric.sales_customer_downloads" using primary key columns */
	selectCustomerDownloadsById?:ModelTypes["vectric_sales_customer_downloads"],
	/** fetch aggregated fields from the table: "vectric.sales_customer_downloads" */
	selectCustomerDownloads_aggregate:ModelTypes["vectric_sales_customer_downloads_aggregate"],
	/** fetch data from the table: "vectric.security_group_members" using primary key columns */
	selectSecurityGroupMembersById?:ModelTypes["vectric_security_group_members"],
	/** fetch data from the table: "vectric.security_group_members" */
	selectSecurityGrupMemebers:ModelTypes["vectric_security_group_members"][],
	/** fetch data from the table: "vectric.linkshortener_links" */
	shortLinks:ModelTypes["vectric_linkshortener_links"][],
	/** fetch data from the table: "vectric.linkshortener_links" using primary key columns */
	shortLinksByHash?:ModelTypes["vectric_linkshortener_links"],
	/** fetch aggregated fields from the table: "vectric.site_option_location" */
	siteOptionLocation_aggregate:ModelTypes["vectric_site_option_location_aggregate"],
	/** fetch data from the table: "vectric.site_option_location" */
	siteOptionLocations:ModelTypes["vectric_site_option_location"][],
	/** fetch data from the table: "vectric.site_option_location" using primary key columns */
	siteOptionLocationsById?:ModelTypes["vectric_site_option_location"],
	/** fetch data from the table: "vectric.site_options" */
	siteOptions:ModelTypes["vectric_site_options"][],
	/** fetch data from the table: "vectric.site_options" using primary key columns */
	siteOptionsById?:ModelTypes["vectric_site_options"],
	/** fetch aggregated fields from the table: "vectric.site_options" */
	siteOptions_aggregate:ModelTypes["vectric_site_options_aggregate"],
	/** fetch aggregated fields from the table: "vectric.toolpath_saver_token" */
	toolpathSaveToken_aggregate:ModelTypes["vectric_toolpath_saver_token_aggregate"],
	/** fetch data from the table: "vectric.toolpath_saver_token" using primary key columns */
	toolpathSaverTokenById?:ModelTypes["vectric_toolpath_saver_token"],
	/** fetch data from the table: "vectric.toolpath_saver_token" */
	toolpathSaverTokens:ModelTypes["vectric_toolpath_saver_token"][],
	/** fetch data from the table: "vectric.trial_order" using primary key columns */
	trialOrderById?:ModelTypes["vectric_trial_order"],
	/** fetch data from the table: "vectric.trial_order" */
	trialOrders:ModelTypes["vectric_trial_order"][],
	/** fetch aggregated fields from the table: "vectric.trial_order" */
	trialOrders_aggregate:ModelTypes["vectric_trial_order_aggregate"],
	/** fetch data from the table: "vectric.update_requests" using primary key columns */
	updateRequestById?:ModelTypes["vectric_update_requests"],
	/** fetch data from the table: "vectric.update_requests" */
	updateRequests:ModelTypes["vectric_update_requests"][],
	/** fetch data from the table: "vectric.upgrades_feature" using primary key columns */
	upgradeFeatureById?:ModelTypes["vectric_upgrades_feature"],
	/** fetch data from the table: "vectric.upgrades_feature" */
	upgradeFeatures:ModelTypes["vectric_upgrades_feature"][],
	/** fetch aggregated fields from the table: "vectric.upgrades_feature" */
	upgradeFeatures_aggregate:ModelTypes["vectric_upgrades_feature_aggregate"],
	/** fetch data from the table: "vectric.upgrades_product_type_feature" using primary key columns */
	upgradeProductTypeFeatureById?:ModelTypes["vectric_upgrades_product_type_feature"],
	/** An array relationship */
	upgradeProductTypeFeatures:ModelTypes["vectric_upgrades_product_type_feature"][],
	/** An aggregate relationship */
	upgradeProductTypeFeatures_aggregate:ModelTypes["vectric_upgrades_product_type_feature_aggregate"],
	/** An array relationship */
	upgradeTokens:ModelTypes["vectric_upgrade_tokens"][],
	/** fetch data from the table: "vectric.upgrade_tokens" using primary key columns */
	upgradeTokensById?:ModelTypes["vectric_upgrade_tokens"],
	/** fetch data from the table: "vectric.upgrades_version_feature" using primary key columns */
	upgradeVersionFeatureById?:ModelTypes["vectric_upgrades_version_feature"],
	/** fetch data from the table: "vectric.upgrades_version_feature" */
	upgradeVersionFeatures:ModelTypes["vectric_upgrades_version_feature"][],
	/** An aggregate relationship */
	upgradeVersionFeatures_aggregate:ModelTypes["vectric_upgrades_version_feature_aggregate"],
	/** fetch data from the table: "vectric.usergroup_2019_waitlist" */
	userGroupWaitingListEntries:ModelTypes["vectric_usergroup_2019_waitlist"][],
	/** fetch aggregated fields from the table: "vectric.usergroup_2019_waitlist" */
	userGroupWaitingListEntries_aggregate:ModelTypes["vectric_usergroup_2019_waitlist_aggregate"],
	/** fetch data from the table: "vectric.usergroup_2019_waitlist" using primary key columns */
	userGroupWaitingListEntryById?:ModelTypes["vectric_usergroup_2019_waitlist"],
	/** fetch data from the table: "vectric.active_memberships" */
	vectric_active_memberships:ModelTypes["vectric_active_memberships"][],
	/** fetch aggregated fields from the table: "vectric.active_memberships" */
	vectric_active_memberships_aggregate:ModelTypes["vectric_active_memberships_aggregate"],
	/** fetch data from the table: "vectric.active_upgrades" */
	vectric_active_upgrades:ModelTypes["vectric_active_upgrades"][],
	/** fetch aggregated fields from the table: "vectric.active_upgrades" */
	vectric_active_upgrades_aggregate:ModelTypes["vectric_active_upgrades_aggregate"],
	/** fetch aggregated fields from the table: "vectric.allocatable_bundles" */
	vectric_allocatable_bundles_aggregate:ModelTypes["vectric_allocatable_bundles_aggregate"],
	/** fetch aggregated fields from the table: "vectric.allocated_bundles" */
	vectric_allocated_bundles_aggregate:ModelTypes["vectric_allocated_bundles_aggregate"],
	/** fetch data from the table: "vectric.allocation_summary_file_type" */
	vectric_allocation_summary_file_type:ModelTypes["vectric_allocation_summary_file_type"][],
	/** fetch aggregated fields from the table: "vectric.allocation_summary_file_type" */
	vectric_allocation_summary_file_type_aggregate:ModelTypes["vectric_allocation_summary_file_type_aggregate"],
	/** fetch data from the table: "vectric.allocation_summary_file_type" using primary key columns */
	vectric_allocation_summary_file_type_by_pk?:ModelTypes["vectric_allocation_summary_file_type"],
	/** fetch data from the table: "vectric.continents" */
	vectric_continents:ModelTypes["vectric_continents"][],
	/** fetch aggregated fields from the table: "vectric.continents" */
	vectric_continents_aggregate:ModelTypes["vectric_continents_aggregate"],
	/** fetch data from the table: "vectric.continents" using primary key columns */
	vectric_continents_by_pk?:ModelTypes["vectric_continents"],
	/** fetch aggregated fields from the table: "vectric.customer_area" */
	vectric_customer_area_aggregate:ModelTypes["vectric_customer_area_aggregate"],
	/** fetch aggregated fields from the table: "vectric.customer_area_file" */
	vectric_customer_area_file_aggregate:ModelTypes["vectric_customer_area_file_aggregate"],
	/** fetch aggregated fields from the table: "vectric.customer_status" */
	vectric_customer_status_aggregate:ModelTypes["vectric_customer_status_aggregate"],
	/** fetch data from the table: "vectric.download" */
	vectric_download:ModelTypes["vectric_download"][],
	/** fetch aggregated fields from the table: "vectric.download" */
	vectric_download_aggregate:ModelTypes["vectric_download_aggregate"],
	/** fetch data from the table: "vectric.download_record" */
	vectric_download_record:ModelTypes["vectric_download_record"][],
	/** fetch aggregated fields from the table: "vectric.download_record" */
	vectric_download_record_aggregate:ModelTypes["vectric_download_record_aggregate"],
	/** fetch data from the table: "vectric.download_record" using primary key columns */
	vectric_download_record_by_pk?:ModelTypes["vectric_download_record"],
	/** fetch aggregated fields from the table: "vectric.enhancement_tokens" */
	vectric_enhancement_tokens_aggregate:ModelTypes["vectric_enhancement_tokens_aggregate"],
	/** fetch data from the table: "vectric.enhancement_tokens" using primary key columns */
	vectric_enhancement_tokens_by_pk?:ModelTypes["vectric_enhancement_tokens"],
	/** fetch data from the table: "vectric.entitled_product_version_code_view" */
	vectric_entitled_product_version_code_view:ModelTypes["vectric_entitled_product_version_code_view"][],
	/** fetch aggregated fields from the table: "vectric.entitled_product_version_code_view" */
	vectric_entitled_product_version_code_view_aggregate:ModelTypes["vectric_entitled_product_version_code_view_aggregate"],
	/** fetch aggregated fields from the table: "vectric.free_clipart_tokens" */
	vectric_free_clipart_tokens_aggregate:ModelTypes["vectric_free_clipart_tokens_aggregate"],
	/** fetch aggregated fields from the table: "vectric.freeclipart" */
	vectric_freeclipart_aggregate:ModelTypes["vectric_freeclipart_aggregate"],
	/** fetch data from the table: "vectric.freeclipart" using primary key columns */
	vectric_freeclipart_by_pk?:ModelTypes["vectric_freeclipart"],
	/** fetch aggregated fields from the table: "vectric.freeclipart_category" */
	vectric_freeclipart_category_aggregate:ModelTypes["vectric_freeclipart_category_aggregate"],
	/** fetch data from the table: "vectric.freeclipart_category" using primary key columns */
	vectric_freeclipart_category_by_pk?:ModelTypes["vectric_freeclipart_category"],
	/** fetch data from the table: "vectric.freeclipart_download_record" */
	vectric_freeclipart_download_record:ModelTypes["vectric_freeclipart_download_record"][],
	/** fetch aggregated fields from the table: "vectric.freeclipart_download_record" */
	vectric_freeclipart_download_record_aggregate:ModelTypes["vectric_freeclipart_download_record_aggregate"],
	/** fetch data from the table: "vectric.freeclipart_download_record" using primary key columns */
	vectric_freeclipart_download_record_by_pk?:ModelTypes["vectric_freeclipart_download_record"],
	/** fetch data from the table: "vectric.group_info" */
	vectric_group_info:ModelTypes["vectric_group_info"][],
	/** fetch aggregated fields from the table: "vectric.group_info" */
	vectric_group_info_aggregate:ModelTypes["vectric_group_info_aggregate"],
	/** fetch data from the table: "vectric.group_roles" */
	vectric_group_roles:ModelTypes["vectric_group_roles"][],
	/** fetch aggregated fields from the table: "vectric.group_roles" */
	vectric_group_roles_aggregate:ModelTypes["vectric_group_roles_aggregate"],
	/** fetch data from the table: "vectric.group_roles" using primary key columns */
	vectric_group_roles_by_pk?:ModelTypes["vectric_group_roles"],
	/** fetch data from the table: "vectric.group_user_role" */
	vectric_group_user_role:ModelTypes["vectric_group_user_role"][],
	/** fetch aggregated fields from the table: "vectric.group_user_role" */
	vectric_group_user_role_aggregate:ModelTypes["vectric_group_user_role_aggregate"],
	/** fetch data from the table: "vectric.group_user_role" using primary key columns */
	vectric_group_user_role_by_pk?:ModelTypes["vectric_group_user_role"],
	/** fetch data from the table: "vectric.groups" */
	vectric_groups:ModelTypes["vectric_groups"][],
	/** fetch aggregated fields from the table: "vectric.groups" */
	vectric_groups_aggregate:ModelTypes["vectric_groups_aggregate"],
	/** fetch data from the table: "vectric.groups" using primary key columns */
	vectric_groups_by_pk?:ModelTypes["vectric_groups"],
	/** fetch data from the table: "vectric.language_codes" */
	vectric_language_codes:ModelTypes["vectric_language_codes"][],
	/** fetch aggregated fields from the table: "vectric.language_codes" */
	vectric_language_codes_aggregate:ModelTypes["vectric_language_codes_aggregate"],
	/** fetch data from the table: "vectric.language_codes" using primary key columns */
	vectric_language_codes_by_pk?:ModelTypes["vectric_language_codes"],
	/** fetch data from the table: "vectric.licence_log" */
	vectric_licence_log:ModelTypes["vectric_licence_log"][],
	/** fetch aggregated fields from the table: "vectric.licence_log" */
	vectric_licence_log_aggregate:ModelTypes["vectric_licence_log_aggregate"],
	/** fetch data from the table: "vectric.licence_log" using primary key columns */
	vectric_licence_log_by_pk?:ModelTypes["vectric_licence_log"],
	/** fetch aggregated fields from the table: "vectric.linkshortener_links" */
	vectric_linkshortener_links_aggregate:ModelTypes["vectric_linkshortener_links_aggregate"],
	/** fetch data from the table: "vectric.makerspace_requests" */
	vectric_makerspace_requests:ModelTypes["vectric_makerspace_requests"][],
	/** fetch aggregated fields from the table: "vectric.makerspace_requests" */
	vectric_makerspace_requests_aggregate:ModelTypes["vectric_makerspace_requests_aggregate"],
	/** fetch data from the table: "vectric.makerspace_requests" using primary key columns */
	vectric_makerspace_requests_by_pk?:ModelTypes["vectric_makerspace_requests"],
	/** fetch data from the table: "vectric.membership_invitation_status" */
	vectric_membership_invitation_status:ModelTypes["vectric_membership_invitation_status"][],
	/** fetch aggregated fields from the table: "vectric.membership_invitation_status" */
	vectric_membership_invitation_status_aggregate:ModelTypes["vectric_membership_invitation_status_aggregate"],
	/** fetch data from the table: "vectric.membership_invitation_status" using primary key columns */
	vectric_membership_invitation_status_by_pk?:ModelTypes["vectric_membership_invitation_status"],
	/** fetch data from the table: "vectric.membership_roles" */
	vectric_membership_roles:ModelTypes["vectric_membership_roles"][],
	/** fetch aggregated fields from the table: "vectric.membership_roles" */
	vectric_membership_roles_aggregate:ModelTypes["vectric_membership_roles_aggregate"],
	/** fetch data from the table: "vectric.membership_roles" using primary key columns */
	vectric_membership_roles_by_pk?:ModelTypes["vectric_membership_roles"],
	/** fetch data from the table: "vectric.membership_status" */
	vectric_membership_status:ModelTypes["vectric_membership_status"][],
	/** fetch aggregated fields from the table: "vectric.membership_status" */
	vectric_membership_status_aggregate:ModelTypes["vectric_membership_status_aggregate"],
	/** fetch data from the table: "vectric.membership_status" using primary key columns */
	vectric_membership_status_by_pk?:ModelTypes["vectric_membership_status"],
	/** fetch data from the table: "vectric.oauth_client_details" */
	vectric_oauth_client_details:ModelTypes["vectric_oauth_client_details"][],
	/** fetch aggregated fields from the table: "vectric.oauth_client_details" */
	vectric_oauth_client_details_aggregate:ModelTypes["vectric_oauth_client_details_aggregate"],
	/** fetch data from the table: "vectric.oauth_client_details" using primary key columns */
	vectric_oauth_client_details_by_pk?:ModelTypes["vectric_oauth_client_details"],
	/** fetch data from the table: "vectric.oem_detailed_products" */
	vectric_oem_detailed_products:ModelTypes["vectric_oem_detailed_products"][],
	/** fetch aggregated fields from the table: "vectric.oem_detailed_products" */
	vectric_oem_detailed_products_aggregate:ModelTypes["vectric_oem_detailed_products_aggregate"],
	/** fetch data from the table: "vectric.oem_detailed_products" using primary key columns */
	vectric_oem_detailed_products_by_pk?:ModelTypes["vectric_oem_detailed_products"],
	/** fetch data from the table: "vectric.oem_fastspring_item_bundle" */
	vectric_oem_fastspring_item_bundle:ModelTypes["vectric_oem_fastspring_item_bundle"][],
	/** fetch aggregated fields from the table: "vectric.oem_fastspring_item_bundle" */
	vectric_oem_fastspring_item_bundle_aggregate:ModelTypes["vectric_oem_fastspring_item_bundle_aggregate"],
	/** fetch data from the table: "vectric.oem_fastspring_item_bundle" using primary key columns */
	vectric_oem_fastspring_item_bundle_by_pk?:ModelTypes["vectric_oem_fastspring_item_bundle"],
	/** fetch data from the table: "vectric.oem_invite_status" */
	vectric_oem_invite_status:ModelTypes["vectric_oem_invite_status"][],
	/** fetch aggregated fields from the table: "vectric.oem_invite_status" */
	vectric_oem_invite_status_aggregate:ModelTypes["vectric_oem_invite_status_aggregate"],
	/** fetch data from the table: "vectric.oem_invite_status" using primary key columns */
	vectric_oem_invite_status_by_pk?:ModelTypes["vectric_oem_invite_status"],
	/** fetch aggregated fields from the table: "vectric.oem_licence_allocation_type" */
	vectric_oem_licence_allocation_type_aggregate:ModelTypes["vectric_oem_licence_allocation_type_aggregate"],
	/** fetch data from the table: "vectric.oem_licence_allocation_type" using primary key columns */
	vectric_oem_licence_allocation_type_by_pk?:ModelTypes["vectric_oem_licence_allocation_type"],
	/** fetch aggregated fields from the table: "vectric.oem_partners" */
	vectric_oem_partners_aggregate:ModelTypes["vectric_oem_partners_aggregate"],
	/** fetch aggregated fields from the table: "vectric.oem_products" */
	vectric_oem_products_aggregate:ModelTypes["vectric_oem_products_aggregate"],
	/** fetch aggregated fields from the table: "vectric.oem_staff_admin_ownership" */
	vectric_oem_staff_admin_ownership_aggregate:ModelTypes["vectric_oem_staff_admin_ownership_aggregate"],
	/** fetch aggregated fields from the table: "vectric.organization_memberships_admin_access" */
	vectric_organization_memberships_admin_access_aggregate:ModelTypes["vectric_organization_memberships_admin_access_aggregate"],
	/** fetch aggregated fields from the table: "vectric.organization_order_items" */
	vectric_organization_order_items_aggregate:ModelTypes["vectric_organization_order_items_aggregate"],
	/** fetch aggregated fields from the table: "vectric.organization_orders" */
	vectric_organization_orders_aggregate:ModelTypes["vectric_organization_orders_aggregate"],
	/** fetch data from the table: "vectric.organization_types" */
	vectric_organization_types:ModelTypes["vectric_organization_types"][],
	/** fetch aggregated fields from the table: "vectric.organization_types" */
	vectric_organization_types_aggregate:ModelTypes["vectric_organization_types_aggregate"],
	/** fetch data from the table: "vectric.organization_types" using primary key columns */
	vectric_organization_types_by_pk?:ModelTypes["vectric_organization_types"],
	/** fetch aggregated fields from the table: "vectric.products_clipartcollection_links" */
	vectric_products_clipartcollection_links_aggregate:ModelTypes["vectric_products_clipartcollection_links_aggregate"],
	/** fetch data from the table: "vectric.products_clipartcollection_links" using primary key columns */
	vectric_products_clipartcollection_links_by_pk?:ModelTypes["vectric_products_clipartcollection_links"],
	/** fetch aggregated fields from the table: "vectric.products_enhancement_eligibility" */
	vectric_products_enhancement_eligibility_aggregate:ModelTypes["vectric_products_enhancement_eligibility_aggregate"],
	/** fetch data from the table: "vectric.products_enhancement_eligibility" using primary key columns */
	vectric_products_enhancement_eligibility_by_pk?:ModelTypes["vectric_products_enhancement_eligibility"],
	/** fetch aggregated fields from the table: "vectric.products_freeclipart" */
	vectric_products_freeclipart_aggregate:ModelTypes["vectric_products_freeclipart_aggregate"],
	/** fetch data from the table: "vectric.products_freeclipart" using primary key columns */
	vectric_products_freeclipart_by_pk?:ModelTypes["vectric_products_freeclipart"],
	/** fetch data from the table: "vectric.products_fulfilments" */
	vectric_products_fulfilments:ModelTypes["vectric_products_fulfilments"][],
	/** fetch aggregated fields from the table: "vectric.products_fulfilments" */
	vectric_products_fulfilments_aggregate:ModelTypes["vectric_products_fulfilments_aggregate"],
	/** fetch data from the table: "vectric.products_fulfilments" using primary key columns */
	vectric_products_fulfilments_by_pk?:ModelTypes["vectric_products_fulfilments"],
	/** fetch data from the table: "vectric.products_fulfilmenttypes" */
	vectric_products_fulfilmenttypes:ModelTypes["vectric_products_fulfilmenttypes"][],
	/** fetch aggregated fields from the table: "vectric.products_fulfilmenttypes" */
	vectric_products_fulfilmenttypes_aggregate:ModelTypes["vectric_products_fulfilmenttypes_aggregate"],
	/** fetch data from the table: "vectric.products_fulfilmenttypes" using primary key columns */
	vectric_products_fulfilmenttypes_by_pk?:ModelTypes["vectric_products_fulfilmenttypes"],
	/** fetch data from the table: "vectric.products_product_fulfilments" */
	vectric_products_product_fulfilments:ModelTypes["vectric_products_product_fulfilments"][],
	/** fetch aggregated fields from the table: "vectric.products_product_fulfilments" */
	vectric_products_product_fulfilments_aggregate:ModelTypes["vectric_products_product_fulfilments_aggregate"],
	/** fetch data from the table: "vectric.products_product_fulfilments" using primary key columns */
	vectric_products_product_fulfilments_by_pk?:ModelTypes["vectric_products_product_fulfilments"],
	/** fetch data from the table: "vectric.products_product_licence_type" */
	vectric_products_product_licence_type:ModelTypes["vectric_products_product_licence_type"][],
	/** fetch aggregated fields from the table: "vectric.products_product_licence_type" */
	vectric_products_product_licence_type_aggregate:ModelTypes["vectric_products_product_licence_type_aggregate"],
	/** fetch data from the table: "vectric.products_product_licence_type" using primary key columns */
	vectric_products_product_licence_type_by_pk?:ModelTypes["vectric_products_product_licence_type"],
	/** fetch aggregated fields from the table: "vectric.products_products" */
	vectric_products_products_aggregate:ModelTypes["vectric_products_products_aggregate"],
	/** fetch aggregated fields from the table: "vectric.products_producttype" */
	vectric_products_producttype_aggregate:ModelTypes["vectric_products_producttype_aggregate"],
	/** fetch aggregated fields from the table: "vectric.products_upgrade_eligibility" */
	vectric_products_upgrade_eligibility_aggregate:ModelTypes["vectric_products_upgrade_eligibility_aggregate"],
	/** fetch data from the table: "vectric.sales_customerupdates" */
	vectric_sales_customerupdates:ModelTypes["vectric_sales_customerupdates"][],
	/** fetch aggregated fields from the table: "vectric.sales_customerupdates" */
	vectric_sales_customerupdates_aggregate:ModelTypes["vectric_sales_customerupdates_aggregate"],
	/** fetch data from the table: "vectric.sales_customerupdates" using primary key columns */
	vectric_sales_customerupdates_by_pk?:ModelTypes["vectric_sales_customerupdates"],
	/** fetch aggregated fields from the table: "vectric.sales_oemlicences" */
	vectric_sales_oemlicences_aggregate:ModelTypes["vectric_sales_oemlicences_aggregate"],
	/** fetch aggregated fields from the table: "vectric.sales_orders" */
	vectric_sales_orders_aggregate:ModelTypes["vectric_sales_orders_aggregate"],
	/** fetch aggregated fields from the table: "vectric.sales_salesitem_products" */
	vectric_sales_salesitem_products_aggregate:ModelTypes["vectric_sales_salesitem_products_aggregate"],
	/** fetch data from the table: "vectric.sales_salesitemproduct_status" */
	vectric_sales_salesitemproduct_status:ModelTypes["vectric_sales_salesitemproduct_status"][],
	/** fetch aggregated fields from the table: "vectric.sales_salesitemproduct_status" */
	vectric_sales_salesitemproduct_status_aggregate:ModelTypes["vectric_sales_salesitemproduct_status_aggregate"],
	/** fetch data from the table: "vectric.sales_salesitemproduct_status" using primary key columns */
	vectric_sales_salesitemproduct_status_by_pk?:ModelTypes["vectric_sales_salesitemproduct_status"],
	/** fetch aggregated fields from the table: "vectric.sales_salesitems" */
	vectric_sales_salesitems_aggregate:ModelTypes["vectric_sales_salesitems_aggregate"],
	/** fetch aggregated fields from the table: "vectric.security_emailverificationtokens" */
	vectric_security_emailverificationtokens_aggregate:ModelTypes["vectric_security_emailverificationtokens_aggregate"],
	/** fetch data from the table: "vectric.security_group_authorities" */
	vectric_security_group_authorities:ModelTypes["vectric_security_group_authorities"][],
	/** fetch aggregated fields from the table: "vectric.security_group_authorities" */
	vectric_security_group_authorities_aggregate:ModelTypes["vectric_security_group_authorities_aggregate"],
	/** fetch aggregated fields from the table: "vectric.security_group_members" */
	vectric_security_group_members_aggregate:ModelTypes["vectric_security_group_members_aggregate"],
	/** fetch aggregated fields from the table: "vectric.security_passwordresettokens" */
	vectric_security_passwordresettokens_aggregate:ModelTypes["vectric_security_passwordresettokens_aggregate"],
	/** fetch aggregated fields from the table: "vectric.security_userinvitations" */
	vectric_security_userinvitations_aggregate:ModelTypes["vectric_security_userinvitations_aggregate"],
	/** fetch data from the table: "vectric.security_userinvitations" using primary key columns */
	vectric_security_userinvitations_by_pk?:ModelTypes["vectric_security_userinvitations"],
	/** fetch aggregated fields from the table: "vectric.security_users" */
	vectric_security_users_aggregate:ModelTypes["vectric_security_users_aggregate"],
	/** fetch data from the table: "vectric.security_users" using primary key columns */
	vectric_security_users_by_pk?:ModelTypes["vectric_security_users"],
	/** fetch data from the table: "vectric.subscription_contract_status" */
	vectric_subscription_contract_status:ModelTypes["vectric_subscription_contract_status"][],
	/** fetch aggregated fields from the table: "vectric.subscription_contract_status" */
	vectric_subscription_contract_status_aggregate:ModelTypes["vectric_subscription_contract_status_aggregate"],
	/** fetch data from the table: "vectric.subscription_contract_status" using primary key columns */
	vectric_subscription_contract_status_by_pk?:ModelTypes["vectric_subscription_contract_status"],
	/** fetch data from the table: "vectric.subscription_contracts" */
	vectric_subscription_contracts:ModelTypes["vectric_subscription_contracts"][],
	/** fetch aggregated fields from the table: "vectric.subscription_contracts" */
	vectric_subscription_contracts_aggregate:ModelTypes["vectric_subscription_contracts_aggregate"],
	/** fetch data from the table: "vectric.subscription_contracts" using primary key columns */
	vectric_subscription_contracts_by_pk?:ModelTypes["vectric_subscription_contracts"],
	/** fetch data from the table: "vectric.subscription_events" */
	vectric_subscription_events:ModelTypes["vectric_subscription_events"][],
	/** fetch aggregated fields from the table: "vectric.subscription_events" */
	vectric_subscription_events_aggregate:ModelTypes["vectric_subscription_events_aggregate"],
	/** fetch data from the table: "vectric.subscription_events" using primary key columns */
	vectric_subscription_events_by_pk?:ModelTypes["vectric_subscription_events"],
	/** fetch aggregated fields from the table: "vectric.update_requests" */
	vectric_update_requests_aggregate:ModelTypes["vectric_update_requests_aggregate"],
	/** fetch aggregated fields from the table: "vectric.upgrade_tokens" */
	vectric_upgrade_tokens_aggregate:ModelTypes["vectric_upgrade_tokens_aggregate"],
	/** fetch data from the table: "vectric.version_code" */
	vectric_version_code:ModelTypes["vectric_version_code"][],
	/** fetch aggregated fields from the table: "vectric.version_code" */
	vectric_version_code_aggregate:ModelTypes["vectric_version_code_aggregate"],
	/** fetch data from the table: "vectric.version_code" using primary key columns */
	vectric_version_code_by_pk?:ModelTypes["vectric_version_code"],
	/** fetch data from the table: "vectric.products_versioncodes" using primary key columns */
	versionCodeById?:ModelTypes["vectric_products_versioncodes"],
	/** fetch data from the table: "vectric.products_versioncodes" */
	versionCodes:ModelTypes["vectric_products_versioncodes"][],
	/** fetch aggregated fields from the table: "vectric.products_versioncodes" */
	versionCodes_aggregate:ModelTypes["vectric_products_versioncodes_aggregate"],
	/** fetch data from the table: "vectric.customer_zd_uploads" */
	zendeskUploads:ModelTypes["vectric_customer_zd_uploads"][],
	/** fetch data from the table: "vectric.customer_zd_uploads" using primary key columns */
	zendeskUploadsById?:ModelTypes["vectric_customer_zd_uploads"],
	/** fetch aggregated fields from the table: "vectric.customer_zd_uploads" */
	zendeskUploads_aggregate:ModelTypes["vectric_customer_zd_uploads_aggregate"]
};
	/** columns and relationships of "vectric.active_memberships" */
["vectric_active_memberships"]: {
		customerId?:ModelTypes["bigint"],
	isAdmin?:boolean,
	membershipId?:number,
	/** An object relationship */
	organization?:ModelTypes["vectric_organizations"],
	organizationId?:number,
	role?:string
};
	/** aggregated selection of "vectric.active_memberships" */
["vectric_active_memberships_aggregate"]: {
		aggregate?:ModelTypes["vectric_active_memberships_aggregate_fields"],
	nodes:ModelTypes["vectric_active_memberships"][]
};
	/** aggregate fields of "vectric.active_memberships" */
["vectric_active_memberships_aggregate_fields"]: {
		avg?:ModelTypes["vectric_active_memberships_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_active_memberships_max_fields"],
	min?:ModelTypes["vectric_active_memberships_min_fields"],
	stddev?:ModelTypes["vectric_active_memberships_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_active_memberships_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_active_memberships_stddev_samp_fields"],
	sum?:ModelTypes["vectric_active_memberships_sum_fields"],
	var_pop?:ModelTypes["vectric_active_memberships_var_pop_fields"],
	var_samp?:ModelTypes["vectric_active_memberships_var_samp_fields"],
	variance?:ModelTypes["vectric_active_memberships_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_active_memberships_avg_fields"]: {
		customerId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** aggregate max on columns */
["vectric_active_memberships_max_fields"]: {
		customerId?:ModelTypes["bigint"],
	membershipId?:number,
	organizationId?:number,
	role?:string
};
	/** aggregate min on columns */
["vectric_active_memberships_min_fields"]: {
		customerId?:ModelTypes["bigint"],
	membershipId?:number,
	organizationId?:number,
	role?:string
};
	/** aggregate stddev on columns */
["vectric_active_memberships_stddev_fields"]: {
		customerId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_active_memberships_stddev_pop_fields"]: {
		customerId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_active_memberships_stddev_samp_fields"]: {
		customerId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** aggregate sum on columns */
["vectric_active_memberships_sum_fields"]: {
		customerId?:ModelTypes["bigint"],
	membershipId?:number,
	organizationId?:number
};
	/** aggregate var_pop on columns */
["vectric_active_memberships_var_pop_fields"]: {
		customerId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** aggregate var_samp on columns */
["vectric_active_memberships_var_samp_fields"]: {
		customerId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** aggregate variance on columns */
["vectric_active_memberships_variance_fields"]: {
		customerId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** columns and relationships of "vectric.active_upgrades" */
["vectric_active_upgrades"]: {
		eligibility_id?:ModelTypes["bigint"],
	fastspring_id?:string,
	/** An object relationship */
	fromProduct?:ModelTypes["vectric_products_products"],
	from_product_id?:ModelTypes["bigint"],
	from_product_name?:string,
	price?:ModelTypes["numeric"],
	summary?:string,
	/** An object relationship */
	toProduct?:ModelTypes["vectric_products_products"],
	to_product_id?:ModelTypes["bigint"],
	to_product_name?:string
};
	/** aggregated selection of "vectric.active_upgrades" */
["vectric_active_upgrades_aggregate"]: {
		aggregate?:ModelTypes["vectric_active_upgrades_aggregate_fields"],
	nodes:ModelTypes["vectric_active_upgrades"][]
};
	/** aggregate fields of "vectric.active_upgrades" */
["vectric_active_upgrades_aggregate_fields"]: {
		avg?:ModelTypes["vectric_active_upgrades_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_active_upgrades_max_fields"],
	min?:ModelTypes["vectric_active_upgrades_min_fields"],
	stddev?:ModelTypes["vectric_active_upgrades_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_active_upgrades_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_active_upgrades_stddev_samp_fields"],
	sum?:ModelTypes["vectric_active_upgrades_sum_fields"],
	var_pop?:ModelTypes["vectric_active_upgrades_var_pop_fields"],
	var_samp?:ModelTypes["vectric_active_upgrades_var_samp_fields"],
	variance?:ModelTypes["vectric_active_upgrades_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_active_upgrades_avg_fields"]: {
		eligibility_id?:number,
	from_product_id?:number,
	price?:number,
	to_product_id?:number
};
	/** aggregate max on columns */
["vectric_active_upgrades_max_fields"]: {
		eligibility_id?:ModelTypes["bigint"],
	fastspring_id?:string,
	from_product_id?:ModelTypes["bigint"],
	from_product_name?:string,
	price?:ModelTypes["numeric"],
	summary?:string,
	to_product_id?:ModelTypes["bigint"],
	to_product_name?:string
};
	/** aggregate min on columns */
["vectric_active_upgrades_min_fields"]: {
		eligibility_id?:ModelTypes["bigint"],
	fastspring_id?:string,
	from_product_id?:ModelTypes["bigint"],
	from_product_name?:string,
	price?:ModelTypes["numeric"],
	summary?:string,
	to_product_id?:ModelTypes["bigint"],
	to_product_name?:string
};
	/** aggregate stddev on columns */
["vectric_active_upgrades_stddev_fields"]: {
		eligibility_id?:number,
	from_product_id?:number,
	price?:number,
	to_product_id?:number
};
	/** aggregate stddev_pop on columns */
["vectric_active_upgrades_stddev_pop_fields"]: {
		eligibility_id?:number,
	from_product_id?:number,
	price?:number,
	to_product_id?:number
};
	/** aggregate stddev_samp on columns */
["vectric_active_upgrades_stddev_samp_fields"]: {
		eligibility_id?:number,
	from_product_id?:number,
	price?:number,
	to_product_id?:number
};
	/** aggregate sum on columns */
["vectric_active_upgrades_sum_fields"]: {
		eligibility_id?:ModelTypes["bigint"],
	from_product_id?:ModelTypes["bigint"],
	price?:ModelTypes["numeric"],
	to_product_id?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_active_upgrades_var_pop_fields"]: {
		eligibility_id?:number,
	from_product_id?:number,
	price?:number,
	to_product_id?:number
};
	/** aggregate var_samp on columns */
["vectric_active_upgrades_var_samp_fields"]: {
		eligibility_id?:number,
	from_product_id?:number,
	price?:number,
	to_product_id?:number
};
	/** aggregate variance on columns */
["vectric_active_upgrades_variance_fields"]: {
		eligibility_id?:number,
	from_product_id?:number,
	price?:number,
	to_product_id?:number
};
	/** columns and relationships of "vectric.allocatable_bundles" */
["vectric_allocatable_bundles"]: {
		/** An object relationship */
	allocatableProduct?:ModelTypes["vectric_products_products"],
	bundleId?:string,
	/** An array relationship */
	licences:ModelTypes["vectric_sales_oemlicences"][],
	/** An aggregate relationship */
	licences_aggregate:ModelTypes["vectric_sales_oemlicences_aggregate"],
	/** An object relationship */
	partner?:ModelTypes["vectric_oem_partners"],
	partnerId?:ModelTypes["bigint"],
	product?:ModelTypes["bigint"],
	productDisplayName?:string,
	typeDisplayName?:string
};
	/** aggregated selection of "vectric.allocatable_bundles" */
["vectric_allocatable_bundles_aggregate"]: {
		aggregate?:ModelTypes["vectric_allocatable_bundles_aggregate_fields"],
	nodes:ModelTypes["vectric_allocatable_bundles"][]
};
	/** aggregate fields of "vectric.allocatable_bundles" */
["vectric_allocatable_bundles_aggregate_fields"]: {
		avg?:ModelTypes["vectric_allocatable_bundles_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_allocatable_bundles_max_fields"],
	min?:ModelTypes["vectric_allocatable_bundles_min_fields"],
	stddev?:ModelTypes["vectric_allocatable_bundles_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_allocatable_bundles_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_allocatable_bundles_stddev_samp_fields"],
	sum?:ModelTypes["vectric_allocatable_bundles_sum_fields"],
	var_pop?:ModelTypes["vectric_allocatable_bundles_var_pop_fields"],
	var_samp?:ModelTypes["vectric_allocatable_bundles_var_samp_fields"],
	variance?:ModelTypes["vectric_allocatable_bundles_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_allocatable_bundles_avg_fields"]: {
		partnerId?:number,
	product?:number
};
	/** aggregate max on columns */
["vectric_allocatable_bundles_max_fields"]: {
		bundleId?:string,
	partnerId?:ModelTypes["bigint"],
	product?:ModelTypes["bigint"],
	productDisplayName?:string,
	typeDisplayName?:string
};
	/** aggregate min on columns */
["vectric_allocatable_bundles_min_fields"]: {
		bundleId?:string,
	partnerId?:ModelTypes["bigint"],
	product?:ModelTypes["bigint"],
	productDisplayName?:string,
	typeDisplayName?:string
};
	/** response of any mutation on the table "vectric.allocatable_bundles" */
["vectric_allocatable_bundles_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_allocatable_bundles"][]
};
	/** aggregate stddev on columns */
["vectric_allocatable_bundles_stddev_fields"]: {
		partnerId?:number,
	product?:number
};
	/** aggregate stddev_pop on columns */
["vectric_allocatable_bundles_stddev_pop_fields"]: {
		partnerId?:number,
	product?:number
};
	/** aggregate stddev_samp on columns */
["vectric_allocatable_bundles_stddev_samp_fields"]: {
		partnerId?:number,
	product?:number
};
	/** aggregate sum on columns */
["vectric_allocatable_bundles_sum_fields"]: {
		partnerId?:ModelTypes["bigint"],
	product?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_allocatable_bundles_var_pop_fields"]: {
		partnerId?:number,
	product?:number
};
	/** aggregate var_samp on columns */
["vectric_allocatable_bundles_var_samp_fields"]: {
		partnerId?:number,
	product?:number
};
	/** aggregate variance on columns */
["vectric_allocatable_bundles_variance_fields"]: {
		partnerId?:number,
	product?:number
};
	/** columns and relationships of "vectric.allocatable_licence_count" */
["vectric_allocatable_licence_count"]: {
		/** An object relationship */
	allocatableProduct?:ModelTypes["vectric_products_products"],
	availableCount?:ModelTypes["bigint"],
	oemPartnerId?:ModelTypes["bigint"],
	/** An object relationship */
	partner?:ModelTypes["vectric_oem_partners"],
	productId?:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.allocatable_licence_count" */
["vectric_allocatable_licence_count_aggregate"]: {
		aggregate?:ModelTypes["vectric_allocatable_licence_count_aggregate_fields"],
	nodes:ModelTypes["vectric_allocatable_licence_count"][]
};
	/** aggregate fields of "vectric.allocatable_licence_count" */
["vectric_allocatable_licence_count_aggregate_fields"]: {
		avg?:ModelTypes["vectric_allocatable_licence_count_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_allocatable_licence_count_max_fields"],
	min?:ModelTypes["vectric_allocatable_licence_count_min_fields"],
	stddev?:ModelTypes["vectric_allocatable_licence_count_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_allocatable_licence_count_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_allocatable_licence_count_stddev_samp_fields"],
	sum?:ModelTypes["vectric_allocatable_licence_count_sum_fields"],
	var_pop?:ModelTypes["vectric_allocatable_licence_count_var_pop_fields"],
	var_samp?:ModelTypes["vectric_allocatable_licence_count_var_samp_fields"],
	variance?:ModelTypes["vectric_allocatable_licence_count_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_allocatable_licence_count_avg_fields"]: {
		availableCount?:number,
	oemPartnerId?:number,
	productId?:number
};
	/** aggregate max on columns */
["vectric_allocatable_licence_count_max_fields"]: {
		availableCount?:ModelTypes["bigint"],
	oemPartnerId?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_allocatable_licence_count_min_fields"]: {
		availableCount?:ModelTypes["bigint"],
	oemPartnerId?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"]
};
	/** aggregate stddev on columns */
["vectric_allocatable_licence_count_stddev_fields"]: {
		availableCount?:number,
	oemPartnerId?:number,
	productId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_allocatable_licence_count_stddev_pop_fields"]: {
		availableCount?:number,
	oemPartnerId?:number,
	productId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_allocatable_licence_count_stddev_samp_fields"]: {
		availableCount?:number,
	oemPartnerId?:number,
	productId?:number
};
	/** aggregate sum on columns */
["vectric_allocatable_licence_count_sum_fields"]: {
		availableCount?:ModelTypes["bigint"],
	oemPartnerId?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_allocatable_licence_count_var_pop_fields"]: {
		availableCount?:number,
	oemPartnerId?:number,
	productId?:number
};
	/** aggregate var_samp on columns */
["vectric_allocatable_licence_count_var_samp_fields"]: {
		availableCount?:number,
	oemPartnerId?:number,
	productId?:number
};
	/** aggregate variance on columns */
["vectric_allocatable_licence_count_variance_fields"]: {
		availableCount?:number,
	oemPartnerId?:number,
	productId?:number
};
	/** columns and relationships of "vectric.allocated_bundles" */
["vectric_allocated_bundles"]: {
		allocatedby?:string,
	allocationbatch?:string,
	allocationtype?:ModelTypes["bigint"],
	bundleId?:string,
	dateAllocated?:ModelTypes["timestamptz"],
	dateCreated?:ModelTypes["timestamptz"],
	dateOriginallyRegistered?:ModelTypes["timestamptz"],
	/** An array relationship */
	licences:ModelTypes["vectric_sales_oemlicences"][],
	/** An aggregate relationship */
	licences_aggregate:ModelTypes["vectric_sales_oemlicences_aggregate"],
	notes?:string,
	/** An object relationship */
	partner?:ModelTypes["vectric_oem_partners"],
	partnerId?:ModelTypes["bigint"],
	product?:ModelTypes["bigint"],
	productDisplayName?:string,
	typeDisplayName?:string
};
	/** aggregated selection of "vectric.allocated_bundles" */
["vectric_allocated_bundles_aggregate"]: {
		aggregate?:ModelTypes["vectric_allocated_bundles_aggregate_fields"],
	nodes:ModelTypes["vectric_allocated_bundles"][]
};
	/** aggregate fields of "vectric.allocated_bundles" */
["vectric_allocated_bundles_aggregate_fields"]: {
		avg?:ModelTypes["vectric_allocated_bundles_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_allocated_bundles_max_fields"],
	min?:ModelTypes["vectric_allocated_bundles_min_fields"],
	stddev?:ModelTypes["vectric_allocated_bundles_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_allocated_bundles_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_allocated_bundles_stddev_samp_fields"],
	sum?:ModelTypes["vectric_allocated_bundles_sum_fields"],
	var_pop?:ModelTypes["vectric_allocated_bundles_var_pop_fields"],
	var_samp?:ModelTypes["vectric_allocated_bundles_var_samp_fields"],
	variance?:ModelTypes["vectric_allocated_bundles_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_allocated_bundles_avg_fields"]: {
		allocationtype?:number,
	partnerId?:number,
	product?:number
};
	/** aggregate max on columns */
["vectric_allocated_bundles_max_fields"]: {
		allocatedby?:string,
	allocationbatch?:string,
	allocationtype?:ModelTypes["bigint"],
	bundleId?:string,
	dateAllocated?:ModelTypes["timestamptz"],
	dateCreated?:ModelTypes["timestamptz"],
	dateOriginallyRegistered?:ModelTypes["timestamptz"],
	notes?:string,
	partnerId?:ModelTypes["bigint"],
	product?:ModelTypes["bigint"],
	productDisplayName?:string,
	typeDisplayName?:string
};
	/** aggregate min on columns */
["vectric_allocated_bundles_min_fields"]: {
		allocatedby?:string,
	allocationbatch?:string,
	allocationtype?:ModelTypes["bigint"],
	bundleId?:string,
	dateAllocated?:ModelTypes["timestamptz"],
	dateCreated?:ModelTypes["timestamptz"],
	dateOriginallyRegistered?:ModelTypes["timestamptz"],
	notes?:string,
	partnerId?:ModelTypes["bigint"],
	product?:ModelTypes["bigint"],
	productDisplayName?:string,
	typeDisplayName?:string
};
	/** response of any mutation on the table "vectric.allocated_bundles" */
["vectric_allocated_bundles_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_allocated_bundles"][]
};
	/** aggregate stddev on columns */
["vectric_allocated_bundles_stddev_fields"]: {
		allocationtype?:number,
	partnerId?:number,
	product?:number
};
	/** aggregate stddev_pop on columns */
["vectric_allocated_bundles_stddev_pop_fields"]: {
		allocationtype?:number,
	partnerId?:number,
	product?:number
};
	/** aggregate stddev_samp on columns */
["vectric_allocated_bundles_stddev_samp_fields"]: {
		allocationtype?:number,
	partnerId?:number,
	product?:number
};
	/** aggregate sum on columns */
["vectric_allocated_bundles_sum_fields"]: {
		allocationtype?:ModelTypes["bigint"],
	partnerId?:ModelTypes["bigint"],
	product?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_allocated_bundles_var_pop_fields"]: {
		allocationtype?:number,
	partnerId?:number,
	product?:number
};
	/** aggregate var_samp on columns */
["vectric_allocated_bundles_var_samp_fields"]: {
		allocationtype?:number,
	partnerId?:number,
	product?:number
};
	/** aggregate variance on columns */
["vectric_allocated_bundles_variance_fields"]: {
		allocationtype?:number,
	partnerId?:number,
	product?:number
};
	/** File locations for batch summaries


columns and relationships of "vectric.allocation_summary" */
["vectric_allocation_summary"]: {
		/** An array relationship */
	batch:ModelTypes["vectric_allocated_bundles"][],
	batchId:string,
	/** An aggregate relationship */
	batch_aggregate:ModelTypes["vectric_allocated_bundles_aggregate"],
	bucket:string,
	id:number,
	location:string,
	/** An object relationship */
	partner:ModelTypes["vectric_oem_partners"],
	partnerId:number,
	signedUrl?:string,
	type:ModelTypes["vectric_allocation_summary_file_type_enum"]
};
	/** aggregated selection of "vectric.allocation_summary" */
["vectric_allocation_summary_aggregate"]: {
		aggregate?:ModelTypes["vectric_allocation_summary_aggregate_fields"],
	nodes:ModelTypes["vectric_allocation_summary"][]
};
	/** aggregate fields of "vectric.allocation_summary" */
["vectric_allocation_summary_aggregate_fields"]: {
		avg?:ModelTypes["vectric_allocation_summary_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_allocation_summary_max_fields"],
	min?:ModelTypes["vectric_allocation_summary_min_fields"],
	stddev?:ModelTypes["vectric_allocation_summary_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_allocation_summary_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_allocation_summary_stddev_samp_fields"],
	sum?:ModelTypes["vectric_allocation_summary_sum_fields"],
	var_pop?:ModelTypes["vectric_allocation_summary_var_pop_fields"],
	var_samp?:ModelTypes["vectric_allocation_summary_var_samp_fields"],
	variance?:ModelTypes["vectric_allocation_summary_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_allocation_summary_avg_fields"]: {
		id?:number,
	partnerId?:number
};
	/** File types for the summaries


columns and relationships of "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type"]: {
		type:string
};
	/** aggregated selection of "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_aggregate"]: {
		aggregate?:ModelTypes["vectric_allocation_summary_file_type_aggregate_fields"],
	nodes:ModelTypes["vectric_allocation_summary_file_type"][]
};
	/** aggregate fields of "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_aggregate_fields"]: {
		count:number,
	max?:ModelTypes["vectric_allocation_summary_file_type_max_fields"],
	min?:ModelTypes["vectric_allocation_summary_file_type_min_fields"]
};
	/** aggregate max on columns */
["vectric_allocation_summary_file_type_max_fields"]: {
		type?:string
};
	/** aggregate min on columns */
["vectric_allocation_summary_file_type_min_fields"]: {
		type?:string
};
	/** response of any mutation on the table "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_allocation_summary_file_type"][]
};
	/** aggregate max on columns */
["vectric_allocation_summary_max_fields"]: {
		batchId?:string,
	bucket?:string,
	id?:number,
	location?:string,
	partnerId?:number,
	signedUrl?:string
};
	/** aggregate min on columns */
["vectric_allocation_summary_min_fields"]: {
		batchId?:string,
	bucket?:string,
	id?:number,
	location?:string,
	partnerId?:number,
	signedUrl?:string
};
	/** response of any mutation on the table "vectric.allocation_summary" */
["vectric_allocation_summary_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_allocation_summary"][]
};
	/** aggregate stddev on columns */
["vectric_allocation_summary_stddev_fields"]: {
		id?:number,
	partnerId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_allocation_summary_stddev_pop_fields"]: {
		id?:number,
	partnerId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_allocation_summary_stddev_samp_fields"]: {
		id?:number,
	partnerId?:number
};
	/** aggregate sum on columns */
["vectric_allocation_summary_sum_fields"]: {
		id?:number,
	partnerId?:number
};
	/** aggregate var_pop on columns */
["vectric_allocation_summary_var_pop_fields"]: {
		id?:number,
	partnerId?:number
};
	/** aggregate var_samp on columns */
["vectric_allocation_summary_var_samp_fields"]: {
		id?:number,
	partnerId?:number
};
	/** aggregate variance on columns */
["vectric_allocation_summary_variance_fields"]: {
		id?:number,
	partnerId?:number
};
	/** columns and relationships of "vectric.continents" */
["vectric_continents"]: {
		/** Continent code */
	code:ModelTypes["bpchar"],
	name?:string
};
	/** aggregated selection of "vectric.continents" */
["vectric_continents_aggregate"]: {
		aggregate?:ModelTypes["vectric_continents_aggregate_fields"],
	nodes:ModelTypes["vectric_continents"][]
};
	/** aggregate fields of "vectric.continents" */
["vectric_continents_aggregate_fields"]: {
		count:number,
	max?:ModelTypes["vectric_continents_max_fields"],
	min?:ModelTypes["vectric_continents_min_fields"]
};
	/** aggregate max on columns */
["vectric_continents_max_fields"]: {
		/** Continent code */
	code?:ModelTypes["bpchar"],
	name?:string
};
	/** aggregate min on columns */
["vectric_continents_min_fields"]: {
		/** Continent code */
	code?:ModelTypes["bpchar"],
	name?:string
};
	/** response of any mutation on the table "vectric.continents" */
["vectric_continents_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_continents"][]
};
	/** columns and relationships of "vectric.countries" */
["vectric_countries"]: {
		/** Two-letter country code (ISO 3166-1 alpha-2) */
	code:ModelTypes["bpchar"],
	/** An object relationship */
	continent:ModelTypes["vectric_continents"],
	continentcode:ModelTypes["bpchar"],
	countryid:ModelTypes["bigint"],
	displayorder:number,
	/** Full English country name */
	fullname:string,
	/** Three-letter country code (ISO 3166-1 alpha-3) */
	iso3:ModelTypes["bpchar"],
	/** English country name */
	name:string,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number:number
};
	/** aggregated selection of "vectric.countries" */
["vectric_countries_aggregate"]: {
		aggregate?:ModelTypes["vectric_countries_aggregate_fields"],
	nodes:ModelTypes["vectric_countries"][]
};
	/** aggregate fields of "vectric.countries" */
["vectric_countries_aggregate_fields"]: {
		avg?:ModelTypes["vectric_countries_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_countries_max_fields"],
	min?:ModelTypes["vectric_countries_min_fields"],
	stddev?:ModelTypes["vectric_countries_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_countries_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_countries_stddev_samp_fields"],
	sum?:ModelTypes["vectric_countries_sum_fields"],
	var_pop?:ModelTypes["vectric_countries_var_pop_fields"],
	var_samp?:ModelTypes["vectric_countries_var_samp_fields"],
	variance?:ModelTypes["vectric_countries_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_countries_avg_fields"]: {
		countryid?:number,
	displayorder?:number,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:number
};
	/** aggregate max on columns */
["vectric_countries_max_fields"]: {
		/** Two-letter country code (ISO 3166-1 alpha-2) */
	code?:ModelTypes["bpchar"],
	continentcode?:ModelTypes["bpchar"],
	countryid?:ModelTypes["bigint"],
	displayorder?:number,
	/** Full English country name */
	fullname?:string,
	/** Three-letter country code (ISO 3166-1 alpha-3) */
	iso3?:ModelTypes["bpchar"],
	/** English country name */
	name?:string,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:number
};
	/** aggregate min on columns */
["vectric_countries_min_fields"]: {
		/** Two-letter country code (ISO 3166-1 alpha-2) */
	code?:ModelTypes["bpchar"],
	continentcode?:ModelTypes["bpchar"],
	countryid?:ModelTypes["bigint"],
	displayorder?:number,
	/** Full English country name */
	fullname?:string,
	/** Three-letter country code (ISO 3166-1 alpha-3) */
	iso3?:ModelTypes["bpchar"],
	/** English country name */
	name?:string,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:number
};
	/** response of any mutation on the table "vectric.countries" */
["vectric_countries_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_countries"][]
};
	/** aggregate stddev on columns */
["vectric_countries_stddev_fields"]: {
		countryid?:number,
	displayorder?:number,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:number
};
	/** aggregate stddev_pop on columns */
["vectric_countries_stddev_pop_fields"]: {
		countryid?:number,
	displayorder?:number,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:number
};
	/** aggregate stddev_samp on columns */
["vectric_countries_stddev_samp_fields"]: {
		countryid?:number,
	displayorder?:number,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:number
};
	/** aggregate sum on columns */
["vectric_countries_sum_fields"]: {
		countryid?:ModelTypes["bigint"],
	displayorder?:number,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:number
};
	/** aggregate var_pop on columns */
["vectric_countries_var_pop_fields"]: {
		countryid?:number,
	displayorder?:number,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:number
};
	/** aggregate var_samp on columns */
["vectric_countries_var_samp_fields"]: {
		countryid?:number,
	displayorder?:number,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:number
};
	/** aggregate variance on columns */
["vectric_countries_variance_fields"]: {
		countryid?:number,
	displayorder?:number,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?:number
};
	/** columns and relationships of "vectric.customer_area" */
["vectric_customer_area"]: {
		bucketName:string,
	/** An object relationship */
	customer:ModelTypes["vectric_sales_customers"],
	/** An array relationship */
	customerAreaFiles:ModelTypes["vectric_customer_area_file"][],
	/** An aggregate relationship */
	customerAreaFiles_aggregate:ModelTypes["vectric_customer_area_file_aggregate"],
	customerAreaId:ModelTypes["bigint"],
	customerId:ModelTypes["bigint"],
	objectName:string
};
	/** aggregated selection of "vectric.customer_area" */
["vectric_customer_area_aggregate"]: {
		aggregate?:ModelTypes["vectric_customer_area_aggregate_fields"],
	nodes:ModelTypes["vectric_customer_area"][]
};
	/** aggregate fields of "vectric.customer_area" */
["vectric_customer_area_aggregate_fields"]: {
		avg?:ModelTypes["vectric_customer_area_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_customer_area_max_fields"],
	min?:ModelTypes["vectric_customer_area_min_fields"],
	stddev?:ModelTypes["vectric_customer_area_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_customer_area_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_customer_area_stddev_samp_fields"],
	sum?:ModelTypes["vectric_customer_area_sum_fields"],
	var_pop?:ModelTypes["vectric_customer_area_var_pop_fields"],
	var_samp?:ModelTypes["vectric_customer_area_var_samp_fields"],
	variance?:ModelTypes["vectric_customer_area_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_customer_area_avg_fields"]: {
		customerAreaId?:number,
	customerId?:number
};
	/** columns and relationships of "vectric.customer_area_file" */
["vectric_customer_area_file"]: {
		/** An object relationship */
	customerArea:ModelTypes["vectric_customer_area"],
	customerAreaFileId:ModelTypes["bigint"],
	customerAreaId:ModelTypes["bigint"],
	dateUploaded:ModelTypes["timestamptz"],
	fileKey:string,
	fileName:string,
	objectName:string,
	/** An object relationship */
	product?:ModelTypes["vectric_products_products"],
	productId?:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.customer_area_file" */
["vectric_customer_area_file_aggregate"]: {
		aggregate?:ModelTypes["vectric_customer_area_file_aggregate_fields"],
	nodes:ModelTypes["vectric_customer_area_file"][]
};
	/** aggregate fields of "vectric.customer_area_file" */
["vectric_customer_area_file_aggregate_fields"]: {
		avg?:ModelTypes["vectric_customer_area_file_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_customer_area_file_max_fields"],
	min?:ModelTypes["vectric_customer_area_file_min_fields"],
	stddev?:ModelTypes["vectric_customer_area_file_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_customer_area_file_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_customer_area_file_stddev_samp_fields"],
	sum?:ModelTypes["vectric_customer_area_file_sum_fields"],
	var_pop?:ModelTypes["vectric_customer_area_file_var_pop_fields"],
	var_samp?:ModelTypes["vectric_customer_area_file_var_samp_fields"],
	variance?:ModelTypes["vectric_customer_area_file_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_customer_area_file_avg_fields"]: {
		customerAreaFileId?:number,
	customerAreaId?:number,
	productId?:number
};
	/** aggregate max on columns */
["vectric_customer_area_file_max_fields"]: {
		customerAreaFileId?:ModelTypes["bigint"],
	customerAreaId?:ModelTypes["bigint"],
	dateUploaded?:ModelTypes["timestamptz"],
	fileKey?:string,
	fileName?:string,
	objectName?:string,
	productId?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_customer_area_file_min_fields"]: {
		customerAreaFileId?:ModelTypes["bigint"],
	customerAreaId?:ModelTypes["bigint"],
	dateUploaded?:ModelTypes["timestamptz"],
	fileKey?:string,
	fileName?:string,
	objectName?:string,
	productId?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.customer_area_file" */
["vectric_customer_area_file_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_customer_area_file"][]
};
	/** aggregate stddev on columns */
["vectric_customer_area_file_stddev_fields"]: {
		customerAreaFileId?:number,
	customerAreaId?:number,
	productId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_customer_area_file_stddev_pop_fields"]: {
		customerAreaFileId?:number,
	customerAreaId?:number,
	productId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_customer_area_file_stddev_samp_fields"]: {
		customerAreaFileId?:number,
	customerAreaId?:number,
	productId?:number
};
	/** aggregate sum on columns */
["vectric_customer_area_file_sum_fields"]: {
		customerAreaFileId?:ModelTypes["bigint"],
	customerAreaId?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_customer_area_file_var_pop_fields"]: {
		customerAreaFileId?:number,
	customerAreaId?:number,
	productId?:number
};
	/** aggregate var_samp on columns */
["vectric_customer_area_file_var_samp_fields"]: {
		customerAreaFileId?:number,
	customerAreaId?:number,
	productId?:number
};
	/** aggregate variance on columns */
["vectric_customer_area_file_variance_fields"]: {
		customerAreaFileId?:number,
	customerAreaId?:number,
	productId?:number
};
	/** aggregate max on columns */
["vectric_customer_area_max_fields"]: {
		bucketName?:string,
	customerAreaId?:ModelTypes["bigint"],
	customerId?:ModelTypes["bigint"],
	objectName?:string
};
	/** aggregate min on columns */
["vectric_customer_area_min_fields"]: {
		bucketName?:string,
	customerAreaId?:ModelTypes["bigint"],
	customerId?:ModelTypes["bigint"],
	objectName?:string
};
	/** response of any mutation on the table "vectric.customer_area" */
["vectric_customer_area_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_customer_area"][]
};
	/** aggregate stddev on columns */
["vectric_customer_area_stddev_fields"]: {
		customerAreaId?:number,
	customerId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_customer_area_stddev_pop_fields"]: {
		customerAreaId?:number,
	customerId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_customer_area_stddev_samp_fields"]: {
		customerAreaId?:number,
	customerId?:number
};
	/** aggregate sum on columns */
["vectric_customer_area_sum_fields"]: {
		customerAreaId?:ModelTypes["bigint"],
	customerId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_customer_area_var_pop_fields"]: {
		customerAreaId?:number,
	customerId?:number
};
	/** aggregate var_samp on columns */
["vectric_customer_area_var_samp_fields"]: {
		customerAreaId?:number,
	customerId?:number
};
	/** aggregate variance on columns */
["vectric_customer_area_variance_fields"]: {
		customerAreaId?:number,
	customerId?:number
};
	/** columns and relationships of "vectric.customer_responses" */
["vectric_customer_responses"]: {
		customerid:ModelTypes["bigint"],
	customerresponseid:ModelTypes["bigint"],
	othertext?:string,
	/** An object relationship */
	question:ModelTypes["vectric_questions"],
	questionid:ModelTypes["bigint"],
	/** An object relationship */
	response:ModelTypes["vectric_responses"],
	responseid:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.customer_responses" */
["vectric_customer_responses_aggregate"]: {
		aggregate?:ModelTypes["vectric_customer_responses_aggregate_fields"],
	nodes:ModelTypes["vectric_customer_responses"][]
};
	/** aggregate fields of "vectric.customer_responses" */
["vectric_customer_responses_aggregate_fields"]: {
		avg?:ModelTypes["vectric_customer_responses_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_customer_responses_max_fields"],
	min?:ModelTypes["vectric_customer_responses_min_fields"],
	stddev?:ModelTypes["vectric_customer_responses_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_customer_responses_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_customer_responses_stddev_samp_fields"],
	sum?:ModelTypes["vectric_customer_responses_sum_fields"],
	var_pop?:ModelTypes["vectric_customer_responses_var_pop_fields"],
	var_samp?:ModelTypes["vectric_customer_responses_var_samp_fields"],
	variance?:ModelTypes["vectric_customer_responses_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_customer_responses_avg_fields"]: {
		customerid?:number,
	customerresponseid?:number,
	questionid?:number,
	responseid?:number
};
	/** aggregate max on columns */
["vectric_customer_responses_max_fields"]: {
		customerid?:ModelTypes["bigint"],
	customerresponseid?:ModelTypes["bigint"],
	othertext?:string,
	questionid?:ModelTypes["bigint"],
	responseid?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_customer_responses_min_fields"]: {
		customerid?:ModelTypes["bigint"],
	customerresponseid?:ModelTypes["bigint"],
	othertext?:string,
	questionid?:ModelTypes["bigint"],
	responseid?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.customer_responses" */
["vectric_customer_responses_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_customer_responses"][]
};
	/** aggregate stddev on columns */
["vectric_customer_responses_stddev_fields"]: {
		customerid?:number,
	customerresponseid?:number,
	questionid?:number,
	responseid?:number
};
	/** aggregate stddev_pop on columns */
["vectric_customer_responses_stddev_pop_fields"]: {
		customerid?:number,
	customerresponseid?:number,
	questionid?:number,
	responseid?:number
};
	/** aggregate stddev_samp on columns */
["vectric_customer_responses_stddev_samp_fields"]: {
		customerid?:number,
	customerresponseid?:number,
	questionid?:number,
	responseid?:number
};
	/** aggregate sum on columns */
["vectric_customer_responses_sum_fields"]: {
		customerid?:ModelTypes["bigint"],
	customerresponseid?:ModelTypes["bigint"],
	questionid?:ModelTypes["bigint"],
	responseid?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_customer_responses_var_pop_fields"]: {
		customerid?:number,
	customerresponseid?:number,
	questionid?:number,
	responseid?:number
};
	/** aggregate var_samp on columns */
["vectric_customer_responses_var_samp_fields"]: {
		customerid?:number,
	customerresponseid?:number,
	questionid?:number,
	responseid?:number
};
	/** aggregate variance on columns */
["vectric_customer_responses_variance_fields"]: {
		customerid?:number,
	customerresponseid?:number,
	questionid?:number,
	responseid?:number
};
	/** columns and relationships of "vectric.customer_sales" */
["vectric_customer_sales"]: {
		customerId?:ModelTypes["bigint"],
	dateCreated?:ModelTypes["timestamptz"],
	orderDate?:ModelTypes["timestamptz"],
	orderId?:string,
	/** An array relationship */
	salesItems:ModelTypes["vectric_sales_salesitems"][],
	/** An aggregate relationship */
	salesItems_aggregate:ModelTypes["vectric_sales_salesitems_aggregate"],
	veccode?:string
};
	/** aggregated selection of "vectric.customer_sales" */
["vectric_customer_sales_aggregate"]: {
		aggregate?:ModelTypes["vectric_customer_sales_aggregate_fields"],
	nodes:ModelTypes["vectric_customer_sales"][]
};
	/** aggregate fields of "vectric.customer_sales" */
["vectric_customer_sales_aggregate_fields"]: {
		avg?:ModelTypes["vectric_customer_sales_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_customer_sales_max_fields"],
	min?:ModelTypes["vectric_customer_sales_min_fields"],
	stddev?:ModelTypes["vectric_customer_sales_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_customer_sales_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_customer_sales_stddev_samp_fields"],
	sum?:ModelTypes["vectric_customer_sales_sum_fields"],
	var_pop?:ModelTypes["vectric_customer_sales_var_pop_fields"],
	var_samp?:ModelTypes["vectric_customer_sales_var_samp_fields"],
	variance?:ModelTypes["vectric_customer_sales_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_customer_sales_avg_fields"]: {
		customerId?:number
};
	/** aggregate max on columns */
["vectric_customer_sales_max_fields"]: {
		customerId?:ModelTypes["bigint"],
	dateCreated?:ModelTypes["timestamptz"],
	orderDate?:ModelTypes["timestamptz"],
	orderId?:string,
	veccode?:string
};
	/** aggregate min on columns */
["vectric_customer_sales_min_fields"]: {
		customerId?:ModelTypes["bigint"],
	dateCreated?:ModelTypes["timestamptz"],
	orderDate?:ModelTypes["timestamptz"],
	orderId?:string,
	veccode?:string
};
	/** response of any mutation on the table "vectric.customer_sales" */
["vectric_customer_sales_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_customer_sales"][]
};
	/** aggregate stddev on columns */
["vectric_customer_sales_stddev_fields"]: {
		customerId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_customer_sales_stddev_pop_fields"]: {
		customerId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_customer_sales_stddev_samp_fields"]: {
		customerId?:number
};
	/** aggregate sum on columns */
["vectric_customer_sales_sum_fields"]: {
		customerId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_customer_sales_var_pop_fields"]: {
		customerId?:number
};
	/** aggregate var_samp on columns */
["vectric_customer_sales_var_samp_fields"]: {
		customerId?:number
};
	/** aggregate variance on columns */
["vectric_customer_sales_variance_fields"]: {
		customerId?:number
};
	/** columns and relationships of "vectric.customer_status" */
["vectric_customer_status"]: {
		status?:string,
	statusId:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.customer_status" */
["vectric_customer_status_aggregate"]: {
		aggregate?:ModelTypes["vectric_customer_status_aggregate_fields"],
	nodes:ModelTypes["vectric_customer_status"][]
};
	/** aggregate fields of "vectric.customer_status" */
["vectric_customer_status_aggregate_fields"]: {
		avg?:ModelTypes["vectric_customer_status_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_customer_status_max_fields"],
	min?:ModelTypes["vectric_customer_status_min_fields"],
	stddev?:ModelTypes["vectric_customer_status_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_customer_status_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_customer_status_stddev_samp_fields"],
	sum?:ModelTypes["vectric_customer_status_sum_fields"],
	var_pop?:ModelTypes["vectric_customer_status_var_pop_fields"],
	var_samp?:ModelTypes["vectric_customer_status_var_samp_fields"],
	variance?:ModelTypes["vectric_customer_status_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_customer_status_avg_fields"]: {
		statusId?:number
};
	/** aggregate max on columns */
["vectric_customer_status_max_fields"]: {
		status?:string,
	statusId?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_customer_status_min_fields"]: {
		status?:string,
	statusId?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.customer_status" */
["vectric_customer_status_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_customer_status"][]
};
	/** aggregate stddev on columns */
["vectric_customer_status_stddev_fields"]: {
		statusId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_customer_status_stddev_pop_fields"]: {
		statusId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_customer_status_stddev_samp_fields"]: {
		statusId?:number
};
	/** aggregate sum on columns */
["vectric_customer_status_sum_fields"]: {
		statusId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_customer_status_var_pop_fields"]: {
		statusId?:number
};
	/** aggregate var_samp on columns */
["vectric_customer_status_var_samp_fields"]: {
		statusId?:number
};
	/** aggregate variance on columns */
["vectric_customer_status_variance_fields"]: {
		statusId?:number
};
	/** columns and relationships of "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads"]: {
		createdBy:ModelTypes["bigint"],
	/** An object relationship */
	customer:ModelTypes["vectric_sales_customers"],
	customerId:ModelTypes["bigint"],
	dateCreated?:ModelTypes["timestamptz"],
	dateUploaded?:ModelTypes["timestamptz"],
	location?:string,
	objectName?:string,
	shorturlhash?:string,
	/** An object relationship */
	staff?:ModelTypes["vectric_sales_customers"],
	ticketId:string,
	zdUploadId:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_aggregate"]: {
		aggregate?:ModelTypes["vectric_customer_zd_uploads_aggregate_fields"],
	nodes:ModelTypes["vectric_customer_zd_uploads"][]
};
	/** aggregate fields of "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_aggregate_fields"]: {
		avg?:ModelTypes["vectric_customer_zd_uploads_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_customer_zd_uploads_max_fields"],
	min?:ModelTypes["vectric_customer_zd_uploads_min_fields"],
	stddev?:ModelTypes["vectric_customer_zd_uploads_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_customer_zd_uploads_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_customer_zd_uploads_stddev_samp_fields"],
	sum?:ModelTypes["vectric_customer_zd_uploads_sum_fields"],
	var_pop?:ModelTypes["vectric_customer_zd_uploads_var_pop_fields"],
	var_samp?:ModelTypes["vectric_customer_zd_uploads_var_samp_fields"],
	variance?:ModelTypes["vectric_customer_zd_uploads_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_customer_zd_uploads_avg_fields"]: {
		createdBy?:number,
	customerId?:number,
	zdUploadId?:number
};
	/** aggregate max on columns */
["vectric_customer_zd_uploads_max_fields"]: {
		createdBy?:ModelTypes["bigint"],
	customerId?:ModelTypes["bigint"],
	dateCreated?:ModelTypes["timestamptz"],
	dateUploaded?:ModelTypes["timestamptz"],
	location?:string,
	objectName?:string,
	shorturlhash?:string,
	ticketId?:string,
	zdUploadId?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_customer_zd_uploads_min_fields"]: {
		createdBy?:ModelTypes["bigint"],
	customerId?:ModelTypes["bigint"],
	dateCreated?:ModelTypes["timestamptz"],
	dateUploaded?:ModelTypes["timestamptz"],
	location?:string,
	objectName?:string,
	shorturlhash?:string,
	ticketId?:string,
	zdUploadId?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_customer_zd_uploads"][]
};
	/** aggregate stddev on columns */
["vectric_customer_zd_uploads_stddev_fields"]: {
		createdBy?:number,
	customerId?:number,
	zdUploadId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_customer_zd_uploads_stddev_pop_fields"]: {
		createdBy?:number,
	customerId?:number,
	zdUploadId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_customer_zd_uploads_stddev_samp_fields"]: {
		createdBy?:number,
	customerId?:number,
	zdUploadId?:number
};
	/** aggregate sum on columns */
["vectric_customer_zd_uploads_sum_fields"]: {
		createdBy?:ModelTypes["bigint"],
	customerId?:ModelTypes["bigint"],
	zdUploadId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_customer_zd_uploads_var_pop_fields"]: {
		createdBy?:number,
	customerId?:number,
	zdUploadId?:number
};
	/** aggregate var_samp on columns */
["vectric_customer_zd_uploads_var_samp_fields"]: {
		createdBy?:number,
	customerId?:number,
	zdUploadId?:number
};
	/** aggregate variance on columns */
["vectric_customer_zd_uploads_variance_fields"]: {
		createdBy?:number,
	customerId?:number,
	zdUploadId?:number
};
	/** columns and relationships of "vectric.download" */
["vectric_download"]: {
		bucketName?:string,
	description?:string,
	downloadId:string,
	downloadSize:string,
	groupId?:string,
	name:string,
	objectName?:string,
	previewImageUrl?:string,
	uploadDate?:ModelTypes["timestamptz"]
};
	/** aggregated selection of "vectric.download" */
["vectric_download_aggregate"]: {
		aggregate?:ModelTypes["vectric_download_aggregate_fields"],
	nodes:ModelTypes["vectric_download"][]
};
	/** aggregate fields of "vectric.download" */
["vectric_download_aggregate_fields"]: {
		count:number,
	max?:ModelTypes["vectric_download_max_fields"],
	min?:ModelTypes["vectric_download_min_fields"]
};
	/** aggregate max on columns */
["vectric_download_max_fields"]: {
		bucketName?:string,
	description?:string,
	downloadId?:string,
	downloadSize?:string,
	groupId?:string,
	name?:string,
	objectName?:string,
	previewImageUrl?:string,
	uploadDate?:ModelTypes["timestamptz"]
};
	/** aggregate min on columns */
["vectric_download_min_fields"]: {
		bucketName?:string,
	description?:string,
	downloadId?:string,
	downloadSize?:string,
	groupId?:string,
	name?:string,
	objectName?:string,
	previewImageUrl?:string,
	uploadDate?:ModelTypes["timestamptz"]
};
	/** response of any mutation on the table "vectric.download" */
["vectric_download_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_download"][]
};
	/** columns and relationships of "vectric.download_record" */
["vectric_download_record"]: {
		customerId:ModelTypes["bigint"],
	downloadDate?:ModelTypes["timestamptz"],
	downloadId?:string,
	id:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.download_record" */
["vectric_download_record_aggregate"]: {
		aggregate?:ModelTypes["vectric_download_record_aggregate_fields"],
	nodes:ModelTypes["vectric_download_record"][]
};
	/** aggregate fields of "vectric.download_record" */
["vectric_download_record_aggregate_fields"]: {
		avg?:ModelTypes["vectric_download_record_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_download_record_max_fields"],
	min?:ModelTypes["vectric_download_record_min_fields"],
	stddev?:ModelTypes["vectric_download_record_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_download_record_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_download_record_stddev_samp_fields"],
	sum?:ModelTypes["vectric_download_record_sum_fields"],
	var_pop?:ModelTypes["vectric_download_record_var_pop_fields"],
	var_samp?:ModelTypes["vectric_download_record_var_samp_fields"],
	variance?:ModelTypes["vectric_download_record_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_download_record_avg_fields"]: {
		customerId?:number,
	id?:number
};
	/** aggregate max on columns */
["vectric_download_record_max_fields"]: {
		customerId?:ModelTypes["bigint"],
	downloadDate?:ModelTypes["timestamptz"],
	downloadId?:string,
	id?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_download_record_min_fields"]: {
		customerId?:ModelTypes["bigint"],
	downloadDate?:ModelTypes["timestamptz"],
	downloadId?:string,
	id?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.download_record" */
["vectric_download_record_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_download_record"][]
};
	/** aggregate stddev on columns */
["vectric_download_record_stddev_fields"]: {
		customerId?:number,
	id?:number
};
	/** aggregate stddev_pop on columns */
["vectric_download_record_stddev_pop_fields"]: {
		customerId?:number,
	id?:number
};
	/** aggregate stddev_samp on columns */
["vectric_download_record_stddev_samp_fields"]: {
		customerId?:number,
	id?:number
};
	/** aggregate sum on columns */
["vectric_download_record_sum_fields"]: {
		customerId?:ModelTypes["bigint"],
	id?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_download_record_var_pop_fields"]: {
		customerId?:number,
	id?:number
};
	/** aggregate var_samp on columns */
["vectric_download_record_var_samp_fields"]: {
		customerId?:number,
	id?:number
};
	/** aggregate variance on columns */
["vectric_download_record_variance_fields"]: {
		customerId?:number,
	id?:number
};
	/** columns and relationships of "vectric.enhancement_tokens" */
["vectric_enhancement_tokens"]: {
		customerId:ModelTypes["bigint"],
	dateCreated:ModelTypes["timestamptz"],
	dateUsed?:ModelTypes["timestamptz"],
	enhancementEligibilityId?:ModelTypes["bigint"],
	enhancementOrderItemProductId?:ModelTypes["bigint"],
	orderItemProductId:ModelTypes["bigint"],
	token:string,
	used:boolean
};
	/** aggregated selection of "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_aggregate"]: {
		aggregate?:ModelTypes["vectric_enhancement_tokens_aggregate_fields"],
	nodes:ModelTypes["vectric_enhancement_tokens"][]
};
	/** aggregate fields of "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_aggregate_fields"]: {
		avg?:ModelTypes["vectric_enhancement_tokens_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_enhancement_tokens_max_fields"],
	min?:ModelTypes["vectric_enhancement_tokens_min_fields"],
	stddev?:ModelTypes["vectric_enhancement_tokens_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_enhancement_tokens_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_enhancement_tokens_stddev_samp_fields"],
	sum?:ModelTypes["vectric_enhancement_tokens_sum_fields"],
	var_pop?:ModelTypes["vectric_enhancement_tokens_var_pop_fields"],
	var_samp?:ModelTypes["vectric_enhancement_tokens_var_samp_fields"],
	variance?:ModelTypes["vectric_enhancement_tokens_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_enhancement_tokens_avg_fields"]: {
		customerId?:number,
	enhancementEligibilityId?:number,
	enhancementOrderItemProductId?:number,
	orderItemProductId?:number
};
	/** aggregate max on columns */
["vectric_enhancement_tokens_max_fields"]: {
		customerId?:ModelTypes["bigint"],
	dateCreated?:ModelTypes["timestamptz"],
	dateUsed?:ModelTypes["timestamptz"],
	enhancementEligibilityId?:ModelTypes["bigint"],
	enhancementOrderItemProductId?:ModelTypes["bigint"],
	orderItemProductId?:ModelTypes["bigint"],
	token?:string
};
	/** aggregate min on columns */
["vectric_enhancement_tokens_min_fields"]: {
		customerId?:ModelTypes["bigint"],
	dateCreated?:ModelTypes["timestamptz"],
	dateUsed?:ModelTypes["timestamptz"],
	enhancementEligibilityId?:ModelTypes["bigint"],
	enhancementOrderItemProductId?:ModelTypes["bigint"],
	orderItemProductId?:ModelTypes["bigint"],
	token?:string
};
	/** response of any mutation on the table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_enhancement_tokens"][]
};
	/** aggregate stddev on columns */
["vectric_enhancement_tokens_stddev_fields"]: {
		customerId?:number,
	enhancementEligibilityId?:number,
	enhancementOrderItemProductId?:number,
	orderItemProductId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_enhancement_tokens_stddev_pop_fields"]: {
		customerId?:number,
	enhancementEligibilityId?:number,
	enhancementOrderItemProductId?:number,
	orderItemProductId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_enhancement_tokens_stddev_samp_fields"]: {
		customerId?:number,
	enhancementEligibilityId?:number,
	enhancementOrderItemProductId?:number,
	orderItemProductId?:number
};
	/** aggregate sum on columns */
["vectric_enhancement_tokens_sum_fields"]: {
		customerId?:ModelTypes["bigint"],
	enhancementEligibilityId?:ModelTypes["bigint"],
	enhancementOrderItemProductId?:ModelTypes["bigint"],
	orderItemProductId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_enhancement_tokens_var_pop_fields"]: {
		customerId?:number,
	enhancementEligibilityId?:number,
	enhancementOrderItemProductId?:number,
	orderItemProductId?:number
};
	/** aggregate var_samp on columns */
["vectric_enhancement_tokens_var_samp_fields"]: {
		customerId?:number,
	enhancementEligibilityId?:number,
	enhancementOrderItemProductId?:number,
	orderItemProductId?:number
};
	/** aggregate variance on columns */
["vectric_enhancement_tokens_variance_fields"]: {
		customerId?:number,
	enhancementEligibilityId?:number,
	enhancementOrderItemProductId?:number,
	orderItemProductId?:number
};
	/** columns and relationships of "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view"]: {
		displayVersion?:string,
	entitled_product_id?:ModelTypes["bigint"],
	latest?:boolean,
	majorVersion?:ModelTypes["bigint"],
	minorVersionOOX?:ModelTypes["bigint"],
	minorVersionOXO?:ModelTypes["bigint"],
	minorVersionXOO?:ModelTypes["bigint"],
	notifying?:boolean,
	patchUrl?:string,
	releaseDate?:ModelTypes["date"],
	url?:string,
	versionCodeId?:ModelTypes["bigint"],
	visible?:boolean
};
	/** aggregated selection of "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_aggregate"]: {
		aggregate?:ModelTypes["vectric_entitled_product_version_code_view_aggregate_fields"],
	nodes:ModelTypes["vectric_entitled_product_version_code_view"][]
};
	/** aggregate fields of "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_aggregate_fields"]: {
		avg?:ModelTypes["vectric_entitled_product_version_code_view_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_entitled_product_version_code_view_max_fields"],
	min?:ModelTypes["vectric_entitled_product_version_code_view_min_fields"],
	stddev?:ModelTypes["vectric_entitled_product_version_code_view_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_entitled_product_version_code_view_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_entitled_product_version_code_view_stddev_samp_fields"],
	sum?:ModelTypes["vectric_entitled_product_version_code_view_sum_fields"],
	var_pop?:ModelTypes["vectric_entitled_product_version_code_view_var_pop_fields"],
	var_samp?:ModelTypes["vectric_entitled_product_version_code_view_var_samp_fields"],
	variance?:ModelTypes["vectric_entitled_product_version_code_view_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_entitled_product_version_code_view_avg_fields"]: {
		entitled_product_id?:number,
	majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	versionCodeId?:number
};
	/** aggregate max on columns */
["vectric_entitled_product_version_code_view_max_fields"]: {
		displayVersion?:string,
	entitled_product_id?:ModelTypes["bigint"],
	majorVersion?:ModelTypes["bigint"],
	minorVersionOOX?:ModelTypes["bigint"],
	minorVersionOXO?:ModelTypes["bigint"],
	minorVersionXOO?:ModelTypes["bigint"],
	patchUrl?:string,
	releaseDate?:ModelTypes["date"],
	url?:string,
	versionCodeId?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_entitled_product_version_code_view_min_fields"]: {
		displayVersion?:string,
	entitled_product_id?:ModelTypes["bigint"],
	majorVersion?:ModelTypes["bigint"],
	minorVersionOOX?:ModelTypes["bigint"],
	minorVersionOXO?:ModelTypes["bigint"],
	minorVersionXOO?:ModelTypes["bigint"],
	patchUrl?:string,
	releaseDate?:ModelTypes["date"],
	url?:string,
	versionCodeId?:ModelTypes["bigint"]
};
	/** aggregate stddev on columns */
["vectric_entitled_product_version_code_view_stddev_fields"]: {
		entitled_product_id?:number,
	majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	versionCodeId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_entitled_product_version_code_view_stddev_pop_fields"]: {
		entitled_product_id?:number,
	majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	versionCodeId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_entitled_product_version_code_view_stddev_samp_fields"]: {
		entitled_product_id?:number,
	majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	versionCodeId?:number
};
	/** aggregate sum on columns */
["vectric_entitled_product_version_code_view_sum_fields"]: {
		entitled_product_id?:ModelTypes["bigint"],
	majorVersion?:ModelTypes["bigint"],
	minorVersionOOX?:ModelTypes["bigint"],
	minorVersionOXO?:ModelTypes["bigint"],
	minorVersionXOO?:ModelTypes["bigint"],
	versionCodeId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_entitled_product_version_code_view_var_pop_fields"]: {
		entitled_product_id?:number,
	majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	versionCodeId?:number
};
	/** aggregate var_samp on columns */
["vectric_entitled_product_version_code_view_var_samp_fields"]: {
		entitled_product_id?:number,
	majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	versionCodeId?:number
};
	/** aggregate variance on columns */
["vectric_entitled_product_version_code_view_variance_fields"]: {
		entitled_product_id?:number,
	majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	versionCodeId?:number
};
	/** columns and relationships of "vectric.entitled_products" */
["vectric_entitled_products"]: {
		enabled?:boolean,
	/** An object relationship */
	latestVersion?:ModelTypes["vectric_products_versioncodes"],
	latestVersionId?:number,
	licenceType:ModelTypes["vectric_products_product_licence_type_enum"],
	productId:number,
	productName:string,
	/** An object relationship */
	productType:ModelTypes["vectric_products_producttype"],
	productTypeId:number,
	releaseDate?:ModelTypes["timestamp"],
	requiresLicence?:boolean,
	/** An array relationship */
	versions:ModelTypes["vectric_entitled_product_version_code_view"][],
	/** An aggregate relationship */
	versions_aggregate:ModelTypes["vectric_entitled_product_version_code_view_aggregate"]
};
	/** aggregated selection of "vectric.entitled_products" */
["vectric_entitled_products_aggregate"]: {
		aggregate?:ModelTypes["vectric_entitled_products_aggregate_fields"],
	nodes:ModelTypes["vectric_entitled_products"][]
};
	/** aggregate fields of "vectric.entitled_products" */
["vectric_entitled_products_aggregate_fields"]: {
		avg?:ModelTypes["vectric_entitled_products_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_entitled_products_max_fields"],
	min?:ModelTypes["vectric_entitled_products_min_fields"],
	stddev?:ModelTypes["vectric_entitled_products_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_entitled_products_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_entitled_products_stddev_samp_fields"],
	sum?:ModelTypes["vectric_entitled_products_sum_fields"],
	var_pop?:ModelTypes["vectric_entitled_products_var_pop_fields"],
	var_samp?:ModelTypes["vectric_entitled_products_var_samp_fields"],
	variance?:ModelTypes["vectric_entitled_products_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_entitled_products_avg_fields"]: {
		latestVersionId?:number,
	productId?:number,
	productTypeId?:number
};
	/** aggregate max on columns */
["vectric_entitled_products_max_fields"]: {
		latestVersionId?:number,
	productId?:number,
	productName?:string,
	productTypeId?:number,
	releaseDate?:ModelTypes["timestamp"]
};
	/** aggregate min on columns */
["vectric_entitled_products_min_fields"]: {
		latestVersionId?:number,
	productId?:number,
	productName?:string,
	productTypeId?:number,
	releaseDate?:ModelTypes["timestamp"]
};
	/** response of any mutation on the table "vectric.entitled_products" */
["vectric_entitled_products_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_entitled_products"][]
};
	/** aggregate stddev on columns */
["vectric_entitled_products_stddev_fields"]: {
		latestVersionId?:number,
	productId?:number,
	productTypeId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_entitled_products_stddev_pop_fields"]: {
		latestVersionId?:number,
	productId?:number,
	productTypeId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_entitled_products_stddev_samp_fields"]: {
		latestVersionId?:number,
	productId?:number,
	productTypeId?:number
};
	/** aggregate sum on columns */
["vectric_entitled_products_sum_fields"]: {
		latestVersionId?:number,
	productId?:number,
	productTypeId?:number
};
	/** aggregate var_pop on columns */
["vectric_entitled_products_var_pop_fields"]: {
		latestVersionId?:number,
	productId?:number,
	productTypeId?:number
};
	/** aggregate var_samp on columns */
["vectric_entitled_products_var_samp_fields"]: {
		latestVersionId?:number,
	productId?:number,
	productTypeId?:number
};
	/** aggregate variance on columns */
["vectric_entitled_products_variance_fields"]: {
		latestVersionId?:number,
	productId?:number,
	productTypeId?:number
};
	/** columns and relationships of "vectric.entitlement_licences" */
["vectric_entitlement_licences"]: {
		/** An object relationship */
	entitledProduct:ModelTypes["vectric_entitled_products"],
	/** An object relationship */
	entitlement:ModelTypes["vectric_entitlements"],
	entitlementId:number,
	entitlementLicenceId:number,
	licenceCode:string,
	licenceIdAsDisplay?:boolean,
	licenceType:string,
	productId:number,
	registeredUsername:string
};
	/** aggregated selection of "vectric.entitlement_licences" */
["vectric_entitlement_licences_aggregate"]: {
		aggregate?:ModelTypes["vectric_entitlement_licences_aggregate_fields"],
	nodes:ModelTypes["vectric_entitlement_licences"][]
};
	/** aggregate fields of "vectric.entitlement_licences" */
["vectric_entitlement_licences_aggregate_fields"]: {
		avg?:ModelTypes["vectric_entitlement_licences_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_entitlement_licences_max_fields"],
	min?:ModelTypes["vectric_entitlement_licences_min_fields"],
	stddev?:ModelTypes["vectric_entitlement_licences_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_entitlement_licences_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_entitlement_licences_stddev_samp_fields"],
	sum?:ModelTypes["vectric_entitlement_licences_sum_fields"],
	var_pop?:ModelTypes["vectric_entitlement_licences_var_pop_fields"],
	var_samp?:ModelTypes["vectric_entitlement_licences_var_samp_fields"],
	variance?:ModelTypes["vectric_entitlement_licences_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_entitlement_licences_avg_fields"]: {
		entitlementId?:number,
	entitlementLicenceId?:number,
	productId?:number
};
	/** aggregate max on columns */
["vectric_entitlement_licences_max_fields"]: {
		entitlementId?:number,
	entitlementLicenceId?:number,
	licenceCode?:string,
	licenceType?:string,
	productId?:number,
	registeredUsername?:string
};
	/** aggregate min on columns */
["vectric_entitlement_licences_min_fields"]: {
		entitlementId?:number,
	entitlementLicenceId?:number,
	licenceCode?:string,
	licenceType?:string,
	productId?:number,
	registeredUsername?:string
};
	/** response of any mutation on the table "vectric.entitlement_licences" */
["vectric_entitlement_licences_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_entitlement_licences"][]
};
	/** aggregate stddev on columns */
["vectric_entitlement_licences_stddev_fields"]: {
		entitlementId?:number,
	entitlementLicenceId?:number,
	productId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_entitlement_licences_stddev_pop_fields"]: {
		entitlementId?:number,
	entitlementLicenceId?:number,
	productId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_entitlement_licences_stddev_samp_fields"]: {
		entitlementId?:number,
	entitlementLicenceId?:number,
	productId?:number
};
	/** aggregate sum on columns */
["vectric_entitlement_licences_sum_fields"]: {
		entitlementId?:number,
	entitlementLicenceId?:number,
	productId?:number
};
	/** aggregate var_pop on columns */
["vectric_entitlement_licences_var_pop_fields"]: {
		entitlementId?:number,
	entitlementLicenceId?:number,
	productId?:number
};
	/** aggregate var_samp on columns */
["vectric_entitlement_licences_var_samp_fields"]: {
		entitlementId?:number,
	entitlementLicenceId?:number,
	productId?:number
};
	/** aggregate variance on columns */
["vectric_entitlement_licences_variance_fields"]: {
		entitlementId?:number,
	entitlementLicenceId?:number,
	productId?:number
};
	/** columns and relationships of "vectric.entitlements" */
["vectric_entitlements"]: {
		amendedBy?:string,
	createdBy:string,
	dateAmended?:ModelTypes["timestamp"],
	dateCreated?:ModelTypes["timestamp"],
	/** An object relationship */
	entitledProduct:ModelTypes["vectric_entitled_products"],
	entitledProductId:number,
	entitlementId:number,
	/** An object relationship */
	licence?:ModelTypes["vectric_entitlement_licences"],
	/** An object relationship */
	ownedItem:ModelTypes["vectric_owned_items"],
	ownedItemId:number,
	statusId:number
};
	/** aggregated selection of "vectric.entitlements" */
["vectric_entitlements_aggregate"]: {
		aggregate?:ModelTypes["vectric_entitlements_aggregate_fields"],
	nodes:ModelTypes["vectric_entitlements"][]
};
	/** aggregate fields of "vectric.entitlements" */
["vectric_entitlements_aggregate_fields"]: {
		avg?:ModelTypes["vectric_entitlements_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_entitlements_max_fields"],
	min?:ModelTypes["vectric_entitlements_min_fields"],
	stddev?:ModelTypes["vectric_entitlements_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_entitlements_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_entitlements_stddev_samp_fields"],
	sum?:ModelTypes["vectric_entitlements_sum_fields"],
	var_pop?:ModelTypes["vectric_entitlements_var_pop_fields"],
	var_samp?:ModelTypes["vectric_entitlements_var_samp_fields"],
	variance?:ModelTypes["vectric_entitlements_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_entitlements_avg_fields"]: {
		entitledProductId?:number,
	entitlementId?:number,
	ownedItemId?:number,
	statusId?:number
};
	/** aggregate max on columns */
["vectric_entitlements_max_fields"]: {
		amendedBy?:string,
	createdBy?:string,
	dateAmended?:ModelTypes["timestamp"],
	dateCreated?:ModelTypes["timestamp"],
	entitledProductId?:number,
	entitlementId?:number,
	ownedItemId?:number,
	statusId?:number
};
	/** aggregate min on columns */
["vectric_entitlements_min_fields"]: {
		amendedBy?:string,
	createdBy?:string,
	dateAmended?:ModelTypes["timestamp"],
	dateCreated?:ModelTypes["timestamp"],
	entitledProductId?:number,
	entitlementId?:number,
	ownedItemId?:number,
	statusId?:number
};
	/** response of any mutation on the table "vectric.entitlements" */
["vectric_entitlements_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_entitlements"][]
};
	/** aggregate stddev on columns */
["vectric_entitlements_stddev_fields"]: {
		entitledProductId?:number,
	entitlementId?:number,
	ownedItemId?:number,
	statusId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_entitlements_stddev_pop_fields"]: {
		entitledProductId?:number,
	entitlementId?:number,
	ownedItemId?:number,
	statusId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_entitlements_stddev_samp_fields"]: {
		entitledProductId?:number,
	entitlementId?:number,
	ownedItemId?:number,
	statusId?:number
};
	/** aggregate sum on columns */
["vectric_entitlements_sum_fields"]: {
		entitledProductId?:number,
	entitlementId?:number,
	ownedItemId?:number,
	statusId?:number
};
	/** aggregate var_pop on columns */
["vectric_entitlements_var_pop_fields"]: {
		entitledProductId?:number,
	entitlementId?:number,
	ownedItemId?:number,
	statusId?:number
};
	/** aggregate var_samp on columns */
["vectric_entitlements_var_samp_fields"]: {
		entitledProductId?:number,
	entitlementId?:number,
	ownedItemId?:number,
	statusId?:number
};
	/** aggregate variance on columns */
["vectric_entitlements_variance_fields"]: {
		entitledProductId?:number,
	entitlementId?:number,
	ownedItemId?:number,
	statusId?:number
};
	/** columns and relationships of "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens"]: {
		clipartToken:string,
	completed:boolean,
	customerId:ModelTypes["bigint"],
	dateAdded?:ModelTypes["timestamptz"],
	dateSelected?:ModelTypes["timestamptz"],
	/** An object relationship */
	redeemableToken:ModelTypes["vectric_sales_salesitem_products"],
	redeemableTokenOip:ModelTypes["bigint"],
	replacementOip?:ModelTypes["bigint"],
	/** An object relationship */
	toV10Product?:ModelTypes["vectric_products_products"],
	v10Product:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_aggregate"]: {
		aggregate?:ModelTypes["vectric_free_clipart_tokens_aggregate_fields"],
	nodes:ModelTypes["vectric_free_clipart_tokens"][]
};
	/** aggregate fields of "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_aggregate_fields"]: {
		avg?:ModelTypes["vectric_free_clipart_tokens_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_free_clipart_tokens_max_fields"],
	min?:ModelTypes["vectric_free_clipart_tokens_min_fields"],
	stddev?:ModelTypes["vectric_free_clipart_tokens_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_free_clipart_tokens_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_free_clipart_tokens_stddev_samp_fields"],
	sum?:ModelTypes["vectric_free_clipart_tokens_sum_fields"],
	var_pop?:ModelTypes["vectric_free_clipart_tokens_var_pop_fields"],
	var_samp?:ModelTypes["vectric_free_clipart_tokens_var_samp_fields"],
	variance?:ModelTypes["vectric_free_clipart_tokens_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_free_clipart_tokens_avg_fields"]: {
		customerId?:number,
	redeemableTokenOip?:number,
	replacementOip?:number,
	v10Product?:number
};
	/** aggregate max on columns */
["vectric_free_clipart_tokens_max_fields"]: {
		clipartToken?:string,
	customerId?:ModelTypes["bigint"],
	dateAdded?:ModelTypes["timestamptz"],
	dateSelected?:ModelTypes["timestamptz"],
	redeemableTokenOip?:ModelTypes["bigint"],
	replacementOip?:ModelTypes["bigint"],
	v10Product?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_free_clipart_tokens_min_fields"]: {
		clipartToken?:string,
	customerId?:ModelTypes["bigint"],
	dateAdded?:ModelTypes["timestamptz"],
	dateSelected?:ModelTypes["timestamptz"],
	redeemableTokenOip?:ModelTypes["bigint"],
	replacementOip?:ModelTypes["bigint"],
	v10Product?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_free_clipart_tokens"][]
};
	/** aggregate stddev on columns */
["vectric_free_clipart_tokens_stddev_fields"]: {
		customerId?:number,
	redeemableTokenOip?:number,
	replacementOip?:number,
	v10Product?:number
};
	/** aggregate stddev_pop on columns */
["vectric_free_clipart_tokens_stddev_pop_fields"]: {
		customerId?:number,
	redeemableTokenOip?:number,
	replacementOip?:number,
	v10Product?:number
};
	/** aggregate stddev_samp on columns */
["vectric_free_clipart_tokens_stddev_samp_fields"]: {
		customerId?:number,
	redeemableTokenOip?:number,
	replacementOip?:number,
	v10Product?:number
};
	/** aggregate sum on columns */
["vectric_free_clipart_tokens_sum_fields"]: {
		customerId?:ModelTypes["bigint"],
	redeemableTokenOip?:ModelTypes["bigint"],
	replacementOip?:ModelTypes["bigint"],
	v10Product?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_free_clipart_tokens_var_pop_fields"]: {
		customerId?:number,
	redeemableTokenOip?:number,
	replacementOip?:number,
	v10Product?:number
};
	/** aggregate var_samp on columns */
["vectric_free_clipart_tokens_var_samp_fields"]: {
		customerId?:number,
	redeemableTokenOip?:number,
	replacementOip?:number,
	v10Product?:number
};
	/** aggregate variance on columns */
["vectric_free_clipart_tokens_variance_fields"]: {
		customerId?:number,
	redeemableTokenOip?:number,
	replacementOip?:number,
	v10Product?:number
};
	/** columns and relationships of "vectric.freeclipart" */
["vectric_freeclipart"]: {
		accessId?:string,
	/** An object relationship */
	category?:ModelTypes["vectric_freeclipart_category"],
	categoryId?:ModelTypes["bigint"],
	freeClipartId:ModelTypes["bigint"],
	location?:string,
	name?:string,
	objectName?:string,
	previewImgUrl?:string
};
	/** aggregated selection of "vectric.freeclipart" */
["vectric_freeclipart_aggregate"]: {
		aggregate?:ModelTypes["vectric_freeclipart_aggregate_fields"],
	nodes:ModelTypes["vectric_freeclipart"][]
};
	/** aggregate fields of "vectric.freeclipart" */
["vectric_freeclipart_aggregate_fields"]: {
		avg?:ModelTypes["vectric_freeclipart_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_freeclipart_max_fields"],
	min?:ModelTypes["vectric_freeclipart_min_fields"],
	stddev?:ModelTypes["vectric_freeclipart_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_freeclipart_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_freeclipart_stddev_samp_fields"],
	sum?:ModelTypes["vectric_freeclipart_sum_fields"],
	var_pop?:ModelTypes["vectric_freeclipart_var_pop_fields"],
	var_samp?:ModelTypes["vectric_freeclipart_var_samp_fields"],
	variance?:ModelTypes["vectric_freeclipart_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_freeclipart_avg_fields"]: {
		categoryId?:number,
	freeClipartId?:number
};
	/** columns and relationships of "vectric.freeclipart_category" */
["vectric_freeclipart_category"]: {
		categoryId:ModelTypes["bigint"],
	name?:string
};
	/** aggregated selection of "vectric.freeclipart_category" */
["vectric_freeclipart_category_aggregate"]: {
		aggregate?:ModelTypes["vectric_freeclipart_category_aggregate_fields"],
	nodes:ModelTypes["vectric_freeclipart_category"][]
};
	/** aggregate fields of "vectric.freeclipart_category" */
["vectric_freeclipart_category_aggregate_fields"]: {
		avg?:ModelTypes["vectric_freeclipart_category_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_freeclipart_category_max_fields"],
	min?:ModelTypes["vectric_freeclipart_category_min_fields"],
	stddev?:ModelTypes["vectric_freeclipart_category_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_freeclipart_category_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_freeclipart_category_stddev_samp_fields"],
	sum?:ModelTypes["vectric_freeclipart_category_sum_fields"],
	var_pop?:ModelTypes["vectric_freeclipart_category_var_pop_fields"],
	var_samp?:ModelTypes["vectric_freeclipart_category_var_samp_fields"],
	variance?:ModelTypes["vectric_freeclipart_category_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_freeclipart_category_avg_fields"]: {
		categoryId?:number
};
	/** aggregate max on columns */
["vectric_freeclipart_category_max_fields"]: {
		categoryId?:ModelTypes["bigint"],
	name?:string
};
	/** aggregate min on columns */
["vectric_freeclipart_category_min_fields"]: {
		categoryId?:ModelTypes["bigint"],
	name?:string
};
	/** response of any mutation on the table "vectric.freeclipart_category" */
["vectric_freeclipart_category_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_freeclipart_category"][]
};
	/** aggregate stddev on columns */
["vectric_freeclipart_category_stddev_fields"]: {
		categoryId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_freeclipart_category_stddev_pop_fields"]: {
		categoryId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_freeclipart_category_stddev_samp_fields"]: {
		categoryId?:number
};
	/** aggregate sum on columns */
["vectric_freeclipart_category_sum_fields"]: {
		categoryId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_freeclipart_category_var_pop_fields"]: {
		categoryId?:number
};
	/** aggregate var_samp on columns */
["vectric_freeclipart_category_var_samp_fields"]: {
		categoryId?:number
};
	/** aggregate variance on columns */
["vectric_freeclipart_category_variance_fields"]: {
		categoryId?:number
};
	/** columns and relationships of "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record"]: {
		customerId?:ModelTypes["bigint"],
	downloadDate?:ModelTypes["timestamptz"],
	downloadId:ModelTypes["bigint"],
	freeClipartResourceId?:ModelTypes["bigint"],
	ipAddress?:string
};
	/** aggregated selection of "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_aggregate"]: {
		aggregate?:ModelTypes["vectric_freeclipart_download_record_aggregate_fields"],
	nodes:ModelTypes["vectric_freeclipart_download_record"][]
};
	/** aggregate fields of "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_aggregate_fields"]: {
		avg?:ModelTypes["vectric_freeclipart_download_record_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_freeclipart_download_record_max_fields"],
	min?:ModelTypes["vectric_freeclipart_download_record_min_fields"],
	stddev?:ModelTypes["vectric_freeclipart_download_record_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_freeclipart_download_record_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_freeclipart_download_record_stddev_samp_fields"],
	sum?:ModelTypes["vectric_freeclipart_download_record_sum_fields"],
	var_pop?:ModelTypes["vectric_freeclipart_download_record_var_pop_fields"],
	var_samp?:ModelTypes["vectric_freeclipart_download_record_var_samp_fields"],
	variance?:ModelTypes["vectric_freeclipart_download_record_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_freeclipart_download_record_avg_fields"]: {
		customerId?:number,
	downloadId?:number,
	freeClipartResourceId?:number
};
	/** aggregate max on columns */
["vectric_freeclipart_download_record_max_fields"]: {
		customerId?:ModelTypes["bigint"],
	downloadDate?:ModelTypes["timestamptz"],
	downloadId?:ModelTypes["bigint"],
	freeClipartResourceId?:ModelTypes["bigint"],
	ipAddress?:string
};
	/** aggregate min on columns */
["vectric_freeclipart_download_record_min_fields"]: {
		customerId?:ModelTypes["bigint"],
	downloadDate?:ModelTypes["timestamptz"],
	downloadId?:ModelTypes["bigint"],
	freeClipartResourceId?:ModelTypes["bigint"],
	ipAddress?:string
};
	/** response of any mutation on the table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_freeclipart_download_record"][]
};
	/** aggregate stddev on columns */
["vectric_freeclipart_download_record_stddev_fields"]: {
		customerId?:number,
	downloadId?:number,
	freeClipartResourceId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_freeclipart_download_record_stddev_pop_fields"]: {
		customerId?:number,
	downloadId?:number,
	freeClipartResourceId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_freeclipart_download_record_stddev_samp_fields"]: {
		customerId?:number,
	downloadId?:number,
	freeClipartResourceId?:number
};
	/** aggregate sum on columns */
["vectric_freeclipart_download_record_sum_fields"]: {
		customerId?:ModelTypes["bigint"],
	downloadId?:ModelTypes["bigint"],
	freeClipartResourceId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_freeclipart_download_record_var_pop_fields"]: {
		customerId?:number,
	downloadId?:number,
	freeClipartResourceId?:number
};
	/** aggregate var_samp on columns */
["vectric_freeclipart_download_record_var_samp_fields"]: {
		customerId?:number,
	downloadId?:number,
	freeClipartResourceId?:number
};
	/** aggregate variance on columns */
["vectric_freeclipart_download_record_variance_fields"]: {
		customerId?:number,
	downloadId?:number,
	freeClipartResourceId?:number
};
	/** aggregate max on columns */
["vectric_freeclipart_max_fields"]: {
		accessId?:string,
	categoryId?:ModelTypes["bigint"],
	freeClipartId?:ModelTypes["bigint"],
	location?:string,
	name?:string,
	objectName?:string,
	previewImgUrl?:string
};
	/** aggregate min on columns */
["vectric_freeclipart_min_fields"]: {
		accessId?:string,
	categoryId?:ModelTypes["bigint"],
	freeClipartId?:ModelTypes["bigint"],
	location?:string,
	name?:string,
	objectName?:string,
	previewImgUrl?:string
};
	/** response of any mutation on the table "vectric.freeclipart" */
["vectric_freeclipart_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_freeclipart"][]
};
	/** aggregate stddev on columns */
["vectric_freeclipart_stddev_fields"]: {
		categoryId?:number,
	freeClipartId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_freeclipart_stddev_pop_fields"]: {
		categoryId?:number,
	freeClipartId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_freeclipart_stddev_samp_fields"]: {
		categoryId?:number,
	freeClipartId?:number
};
	/** aggregate sum on columns */
["vectric_freeclipart_sum_fields"]: {
		categoryId?:ModelTypes["bigint"],
	freeClipartId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_freeclipart_var_pop_fields"]: {
		categoryId?:number,
	freeClipartId?:number
};
	/** aggregate var_samp on columns */
["vectric_freeclipart_var_samp_fields"]: {
		categoryId?:number,
	freeClipartId?:number
};
	/** aggregate variance on columns */
["vectric_freeclipart_variance_fields"]: {
		categoryId?:number,
	freeClipartId?:number
};
	/** columns and relationships of "vectric.group_info" */
["vectric_group_info"]: {
		customerid?:ModelTypes["bigint"],
	group_id?:number,
	group_name?:string,
	role?:string
};
	/** aggregated selection of "vectric.group_info" */
["vectric_group_info_aggregate"]: {
		aggregate?:ModelTypes["vectric_group_info_aggregate_fields"],
	nodes:ModelTypes["vectric_group_info"][]
};
	/** aggregate fields of "vectric.group_info" */
["vectric_group_info_aggregate_fields"]: {
		avg?:ModelTypes["vectric_group_info_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_group_info_max_fields"],
	min?:ModelTypes["vectric_group_info_min_fields"],
	stddev?:ModelTypes["vectric_group_info_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_group_info_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_group_info_stddev_samp_fields"],
	sum?:ModelTypes["vectric_group_info_sum_fields"],
	var_pop?:ModelTypes["vectric_group_info_var_pop_fields"],
	var_samp?:ModelTypes["vectric_group_info_var_samp_fields"],
	variance?:ModelTypes["vectric_group_info_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_group_info_avg_fields"]: {
		customerid?:number,
	group_id?:number
};
	/** aggregate max on columns */
["vectric_group_info_max_fields"]: {
		customerid?:ModelTypes["bigint"],
	group_id?:number,
	group_name?:string,
	role?:string
};
	/** aggregate min on columns */
["vectric_group_info_min_fields"]: {
		customerid?:ModelTypes["bigint"],
	group_id?:number,
	group_name?:string,
	role?:string
};
	/** aggregate stddev on columns */
["vectric_group_info_stddev_fields"]: {
		customerid?:number,
	group_id?:number
};
	/** aggregate stddev_pop on columns */
["vectric_group_info_stddev_pop_fields"]: {
		customerid?:number,
	group_id?:number
};
	/** aggregate stddev_samp on columns */
["vectric_group_info_stddev_samp_fields"]: {
		customerid?:number,
	group_id?:number
};
	/** aggregate sum on columns */
["vectric_group_info_sum_fields"]: {
		customerid?:ModelTypes["bigint"],
	group_id?:number
};
	/** aggregate var_pop on columns */
["vectric_group_info_var_pop_fields"]: {
		customerid?:number,
	group_id?:number
};
	/** aggregate var_samp on columns */
["vectric_group_info_var_samp_fields"]: {
		customerid?:number,
	group_id?:number
};
	/** aggregate variance on columns */
["vectric_group_info_variance_fields"]: {
		customerid?:number,
	group_id?:number
};
	/** columns and relationships of "vectric.group_roles" */
["vectric_group_roles"]: {
		id:number,
	role:string
};
	/** aggregated selection of "vectric.group_roles" */
["vectric_group_roles_aggregate"]: {
		aggregate?:ModelTypes["vectric_group_roles_aggregate_fields"],
	nodes:ModelTypes["vectric_group_roles"][]
};
	/** aggregate fields of "vectric.group_roles" */
["vectric_group_roles_aggregate_fields"]: {
		avg?:ModelTypes["vectric_group_roles_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_group_roles_max_fields"],
	min?:ModelTypes["vectric_group_roles_min_fields"],
	stddev?:ModelTypes["vectric_group_roles_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_group_roles_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_group_roles_stddev_samp_fields"],
	sum?:ModelTypes["vectric_group_roles_sum_fields"],
	var_pop?:ModelTypes["vectric_group_roles_var_pop_fields"],
	var_samp?:ModelTypes["vectric_group_roles_var_samp_fields"],
	variance?:ModelTypes["vectric_group_roles_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_group_roles_avg_fields"]: {
		id?:number
};
	/** aggregate max on columns */
["vectric_group_roles_max_fields"]: {
		id?:number,
	role?:string
};
	/** aggregate min on columns */
["vectric_group_roles_min_fields"]: {
		id?:number,
	role?:string
};
	/** response of any mutation on the table "vectric.group_roles" */
["vectric_group_roles_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_group_roles"][]
};
	/** aggregate stddev on columns */
["vectric_group_roles_stddev_fields"]: {
		id?:number
};
	/** aggregate stddev_pop on columns */
["vectric_group_roles_stddev_pop_fields"]: {
		id?:number
};
	/** aggregate stddev_samp on columns */
["vectric_group_roles_stddev_samp_fields"]: {
		id?:number
};
	/** aggregate sum on columns */
["vectric_group_roles_sum_fields"]: {
		id?:number
};
	/** aggregate var_pop on columns */
["vectric_group_roles_var_pop_fields"]: {
		id?:number
};
	/** aggregate var_samp on columns */
["vectric_group_roles_var_samp_fields"]: {
		id?:number
};
	/** aggregate variance on columns */
["vectric_group_roles_variance_fields"]: {
		id?:number
};
	/** columns and relationships of "vectric.group_user_role" */
["vectric_group_user_role"]: {
		/** An object relationship */
	customer:ModelTypes["vectric_sales_customers"],
	customer_id:ModelTypes["bigint"],
	/** An object relationship */
	group:ModelTypes["vectric_groups"],
	group_id:number,
	/** An object relationship */
	role:ModelTypes["vectric_group_roles"],
	role_id:number
};
	/** aggregated selection of "vectric.group_user_role" */
["vectric_group_user_role_aggregate"]: {
		aggregate?:ModelTypes["vectric_group_user_role_aggregate_fields"],
	nodes:ModelTypes["vectric_group_user_role"][]
};
	/** aggregate fields of "vectric.group_user_role" */
["vectric_group_user_role_aggregate_fields"]: {
		avg?:ModelTypes["vectric_group_user_role_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_group_user_role_max_fields"],
	min?:ModelTypes["vectric_group_user_role_min_fields"],
	stddev?:ModelTypes["vectric_group_user_role_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_group_user_role_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_group_user_role_stddev_samp_fields"],
	sum?:ModelTypes["vectric_group_user_role_sum_fields"],
	var_pop?:ModelTypes["vectric_group_user_role_var_pop_fields"],
	var_samp?:ModelTypes["vectric_group_user_role_var_samp_fields"],
	variance?:ModelTypes["vectric_group_user_role_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_group_user_role_avg_fields"]: {
		customer_id?:number,
	group_id?:number,
	role_id?:number
};
	/** aggregate max on columns */
["vectric_group_user_role_max_fields"]: {
		customer_id?:ModelTypes["bigint"],
	group_id?:number,
	role_id?:number
};
	/** aggregate min on columns */
["vectric_group_user_role_min_fields"]: {
		customer_id?:ModelTypes["bigint"],
	group_id?:number,
	role_id?:number
};
	/** response of any mutation on the table "vectric.group_user_role" */
["vectric_group_user_role_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_group_user_role"][]
};
	/** aggregate stddev on columns */
["vectric_group_user_role_stddev_fields"]: {
		customer_id?:number,
	group_id?:number,
	role_id?:number
};
	/** aggregate stddev_pop on columns */
["vectric_group_user_role_stddev_pop_fields"]: {
		customer_id?:number,
	group_id?:number,
	role_id?:number
};
	/** aggregate stddev_samp on columns */
["vectric_group_user_role_stddev_samp_fields"]: {
		customer_id?:number,
	group_id?:number,
	role_id?:number
};
	/** aggregate sum on columns */
["vectric_group_user_role_sum_fields"]: {
		customer_id?:ModelTypes["bigint"],
	group_id?:number,
	role_id?:number
};
	/** aggregate var_pop on columns */
["vectric_group_user_role_var_pop_fields"]: {
		customer_id?:number,
	group_id?:number,
	role_id?:number
};
	/** aggregate var_samp on columns */
["vectric_group_user_role_var_samp_fields"]: {
		customer_id?:number,
	group_id?:number,
	role_id?:number
};
	/** aggregate variance on columns */
["vectric_group_user_role_variance_fields"]: {
		customer_id?:number,
	group_id?:number,
	role_id?:number
};
	/** columns and relationships of "vectric.groups" */
["vectric_groups"]: {
		created_at:ModelTypes["timestamp"],
	group_name:string,
	id:number,
	/** An array relationship */
	members:ModelTypes["vectric_group_user_role"][],
	/** An aggregate relationship */
	members_aggregate:ModelTypes["vectric_group_user_role_aggregate"]
};
	/** aggregated selection of "vectric.groups" */
["vectric_groups_aggregate"]: {
		aggregate?:ModelTypes["vectric_groups_aggregate_fields"],
	nodes:ModelTypes["vectric_groups"][]
};
	/** aggregate fields of "vectric.groups" */
["vectric_groups_aggregate_fields"]: {
		avg?:ModelTypes["vectric_groups_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_groups_max_fields"],
	min?:ModelTypes["vectric_groups_min_fields"],
	stddev?:ModelTypes["vectric_groups_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_groups_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_groups_stddev_samp_fields"],
	sum?:ModelTypes["vectric_groups_sum_fields"],
	var_pop?:ModelTypes["vectric_groups_var_pop_fields"],
	var_samp?:ModelTypes["vectric_groups_var_samp_fields"],
	variance?:ModelTypes["vectric_groups_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_groups_avg_fields"]: {
		id?:number
};
	/** aggregate max on columns */
["vectric_groups_max_fields"]: {
		created_at?:ModelTypes["timestamp"],
	group_name?:string,
	id?:number
};
	/** aggregate min on columns */
["vectric_groups_min_fields"]: {
		created_at?:ModelTypes["timestamp"],
	group_name?:string,
	id?:number
};
	/** response of any mutation on the table "vectric.groups" */
["vectric_groups_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_groups"][]
};
	/** aggregate stddev on columns */
["vectric_groups_stddev_fields"]: {
		id?:number
};
	/** aggregate stddev_pop on columns */
["vectric_groups_stddev_pop_fields"]: {
		id?:number
};
	/** aggregate stddev_samp on columns */
["vectric_groups_stddev_samp_fields"]: {
		id?:number
};
	/** aggregate sum on columns */
["vectric_groups_sum_fields"]: {
		id?:number
};
	/** aggregate var_pop on columns */
["vectric_groups_var_pop_fields"]: {
		id?:number
};
	/** aggregate var_samp on columns */
["vectric_groups_var_samp_fields"]: {
		id?:number
};
	/** aggregate variance on columns */
["vectric_groups_variance_fields"]: {
		id?:number
};
	/** columns and relationships of "vectric.language_codes" */
["vectric_language_codes"]: {
		name?:string,
	/** ISO 639-2 Code */
	threeLetterCode:ModelTypes["bpchar"],
	/** ISO 639-1 Code */
	twoLetterCode?:string
};
	/** aggregated selection of "vectric.language_codes" */
["vectric_language_codes_aggregate"]: {
		aggregate?:ModelTypes["vectric_language_codes_aggregate_fields"],
	nodes:ModelTypes["vectric_language_codes"][]
};
	/** aggregate fields of "vectric.language_codes" */
["vectric_language_codes_aggregate_fields"]: {
		count:number,
	max?:ModelTypes["vectric_language_codes_max_fields"],
	min?:ModelTypes["vectric_language_codes_min_fields"]
};
	/** aggregate max on columns */
["vectric_language_codes_max_fields"]: {
		name?:string,
	/** ISO 639-2 Code */
	threeLetterCode?:ModelTypes["bpchar"],
	/** ISO 639-1 Code */
	twoLetterCode?:string
};
	/** aggregate min on columns */
["vectric_language_codes_min_fields"]: {
		name?:string,
	/** ISO 639-2 Code */
	threeLetterCode?:ModelTypes["bpchar"],
	/** ISO 639-1 Code */
	twoLetterCode?:string
};
	/** response of any mutation on the table "vectric.language_codes" */
["vectric_language_codes_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_language_codes"][]
};
	/** columns and relationships of "vectric.licence_log" */
["vectric_licence_log"]: {
		batchId?:string,
	createdBy?:string,
	dateCreated?:ModelTypes["timestamptz"],
	licenceCode?:string,
	licenceId:ModelTypes["bigint"],
	oemLicenceId?:ModelTypes["bigint"],
	productName?:string,
	registeredUsername?:string,
	shortUrlHash?:string
};
	/** aggregated selection of "vectric.licence_log" */
["vectric_licence_log_aggregate"]: {
		aggregate?:ModelTypes["vectric_licence_log_aggregate_fields"],
	nodes:ModelTypes["vectric_licence_log"][]
};
	/** aggregate fields of "vectric.licence_log" */
["vectric_licence_log_aggregate_fields"]: {
		avg?:ModelTypes["vectric_licence_log_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_licence_log_max_fields"],
	min?:ModelTypes["vectric_licence_log_min_fields"],
	stddev?:ModelTypes["vectric_licence_log_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_licence_log_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_licence_log_stddev_samp_fields"],
	sum?:ModelTypes["vectric_licence_log_sum_fields"],
	var_pop?:ModelTypes["vectric_licence_log_var_pop_fields"],
	var_samp?:ModelTypes["vectric_licence_log_var_samp_fields"],
	variance?:ModelTypes["vectric_licence_log_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_licence_log_avg_fields"]: {
		licenceId?:number,
	oemLicenceId?:number
};
	/** aggregate max on columns */
["vectric_licence_log_max_fields"]: {
		batchId?:string,
	createdBy?:string,
	dateCreated?:ModelTypes["timestamptz"],
	licenceCode?:string,
	licenceId?:ModelTypes["bigint"],
	oemLicenceId?:ModelTypes["bigint"],
	productName?:string,
	registeredUsername?:string,
	shortUrlHash?:string
};
	/** aggregate min on columns */
["vectric_licence_log_min_fields"]: {
		batchId?:string,
	createdBy?:string,
	dateCreated?:ModelTypes["timestamptz"],
	licenceCode?:string,
	licenceId?:ModelTypes["bigint"],
	oemLicenceId?:ModelTypes["bigint"],
	productName?:string,
	registeredUsername?:string,
	shortUrlHash?:string
};
	/** response of any mutation on the table "vectric.licence_log" */
["vectric_licence_log_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_licence_log"][]
};
	/** aggregate stddev on columns */
["vectric_licence_log_stddev_fields"]: {
		licenceId?:number,
	oemLicenceId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_licence_log_stddev_pop_fields"]: {
		licenceId?:number,
	oemLicenceId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_licence_log_stddev_samp_fields"]: {
		licenceId?:number,
	oemLicenceId?:number
};
	/** aggregate sum on columns */
["vectric_licence_log_sum_fields"]: {
		licenceId?:ModelTypes["bigint"],
	oemLicenceId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_licence_log_var_pop_fields"]: {
		licenceId?:number,
	oemLicenceId?:number
};
	/** aggregate var_samp on columns */
["vectric_licence_log_var_samp_fields"]: {
		licenceId?:number,
	oemLicenceId?:number
};
	/** aggregate variance on columns */
["vectric_licence_log_variance_fields"]: {
		licenceId?:number,
	oemLicenceId?:number
};
	/** columns and relationships of "vectric.linkshortener_links" */
["vectric_linkshortener_links"]: {
		expiryDate:ModelTypes["timestamptz"],
	limitDownloads:boolean,
	longUrl?:string,
	remainingDownloads?:ModelTypes["smallint"],
	shortUrlHash:string
};
	/** aggregated selection of "vectric.linkshortener_links" */
["vectric_linkshortener_links_aggregate"]: {
		aggregate?:ModelTypes["vectric_linkshortener_links_aggregate_fields"],
	nodes:ModelTypes["vectric_linkshortener_links"][]
};
	/** aggregate fields of "vectric.linkshortener_links" */
["vectric_linkshortener_links_aggregate_fields"]: {
		avg?:ModelTypes["vectric_linkshortener_links_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_linkshortener_links_max_fields"],
	min?:ModelTypes["vectric_linkshortener_links_min_fields"],
	stddev?:ModelTypes["vectric_linkshortener_links_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_linkshortener_links_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_linkshortener_links_stddev_samp_fields"],
	sum?:ModelTypes["vectric_linkshortener_links_sum_fields"],
	var_pop?:ModelTypes["vectric_linkshortener_links_var_pop_fields"],
	var_samp?:ModelTypes["vectric_linkshortener_links_var_samp_fields"],
	variance?:ModelTypes["vectric_linkshortener_links_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_linkshortener_links_avg_fields"]: {
		remainingDownloads?:number
};
	/** aggregate max on columns */
["vectric_linkshortener_links_max_fields"]: {
		expiryDate?:ModelTypes["timestamptz"],
	longUrl?:string,
	remainingDownloads?:ModelTypes["smallint"],
	shortUrlHash?:string
};
	/** aggregate min on columns */
["vectric_linkshortener_links_min_fields"]: {
		expiryDate?:ModelTypes["timestamptz"],
	longUrl?:string,
	remainingDownloads?:ModelTypes["smallint"],
	shortUrlHash?:string
};
	/** response of any mutation on the table "vectric.linkshortener_links" */
["vectric_linkshortener_links_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_linkshortener_links"][]
};
	/** aggregate stddev on columns */
["vectric_linkshortener_links_stddev_fields"]: {
		remainingDownloads?:number
};
	/** aggregate stddev_pop on columns */
["vectric_linkshortener_links_stddev_pop_fields"]: {
		remainingDownloads?:number
};
	/** aggregate stddev_samp on columns */
["vectric_linkshortener_links_stddev_samp_fields"]: {
		remainingDownloads?:number
};
	/** aggregate sum on columns */
["vectric_linkshortener_links_sum_fields"]: {
		remainingDownloads?:ModelTypes["smallint"]
};
	/** aggregate var_pop on columns */
["vectric_linkshortener_links_var_pop_fields"]: {
		remainingDownloads?:number
};
	/** aggregate var_samp on columns */
["vectric_linkshortener_links_var_samp_fields"]: {
		remainingDownloads?:number
};
	/** aggregate variance on columns */
["vectric_linkshortener_links_variance_fields"]: {
		remainingDownloads?:number
};
	/** columns and relationships of "vectric.makerspace_requests" */
["vectric_makerspace_requests"]: {
		ipAddress?:string,
	licenceCode?:string,
	licenceGenerated?:string,
	makerspaceDiskId?:string,
	makerspaceId?:string,
	requestDate?:ModelTypes["timestamptz"],
	requestId:ModelTypes["bigint"],
	salesItemProductId?:ModelTypes["bigint"],
	trialDiskId?:string,
	trialLayerUuid?:string
};
	/** aggregated selection of "vectric.makerspace_requests" */
["vectric_makerspace_requests_aggregate"]: {
		aggregate?:ModelTypes["vectric_makerspace_requests_aggregate_fields"],
	nodes:ModelTypes["vectric_makerspace_requests"][]
};
	/** aggregate fields of "vectric.makerspace_requests" */
["vectric_makerspace_requests_aggregate_fields"]: {
		avg?:ModelTypes["vectric_makerspace_requests_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_makerspace_requests_max_fields"],
	min?:ModelTypes["vectric_makerspace_requests_min_fields"],
	stddev?:ModelTypes["vectric_makerspace_requests_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_makerspace_requests_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_makerspace_requests_stddev_samp_fields"],
	sum?:ModelTypes["vectric_makerspace_requests_sum_fields"],
	var_pop?:ModelTypes["vectric_makerspace_requests_var_pop_fields"],
	var_samp?:ModelTypes["vectric_makerspace_requests_var_samp_fields"],
	variance?:ModelTypes["vectric_makerspace_requests_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_makerspace_requests_avg_fields"]: {
		requestId?:number,
	salesItemProductId?:number
};
	/** aggregate max on columns */
["vectric_makerspace_requests_max_fields"]: {
		ipAddress?:string,
	licenceCode?:string,
	licenceGenerated?:string,
	makerspaceDiskId?:string,
	makerspaceId?:string,
	requestDate?:ModelTypes["timestamptz"],
	requestId?:ModelTypes["bigint"],
	salesItemProductId?:ModelTypes["bigint"],
	trialDiskId?:string,
	trialLayerUuid?:string
};
	/** aggregate min on columns */
["vectric_makerspace_requests_min_fields"]: {
		ipAddress?:string,
	licenceCode?:string,
	licenceGenerated?:string,
	makerspaceDiskId?:string,
	makerspaceId?:string,
	requestDate?:ModelTypes["timestamptz"],
	requestId?:ModelTypes["bigint"],
	salesItemProductId?:ModelTypes["bigint"],
	trialDiskId?:string,
	trialLayerUuid?:string
};
	/** response of any mutation on the table "vectric.makerspace_requests" */
["vectric_makerspace_requests_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_makerspace_requests"][]
};
	/** aggregate stddev on columns */
["vectric_makerspace_requests_stddev_fields"]: {
		requestId?:number,
	salesItemProductId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_makerspace_requests_stddev_pop_fields"]: {
		requestId?:number,
	salesItemProductId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_makerspace_requests_stddev_samp_fields"]: {
		requestId?:number,
	salesItemProductId?:number
};
	/** aggregate sum on columns */
["vectric_makerspace_requests_sum_fields"]: {
		requestId?:ModelTypes["bigint"],
	salesItemProductId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_makerspace_requests_var_pop_fields"]: {
		requestId?:number,
	salesItemProductId?:number
};
	/** aggregate var_samp on columns */
["vectric_makerspace_requests_var_samp_fields"]: {
		requestId?:number,
	salesItemProductId?:number
};
	/** aggregate variance on columns */
["vectric_makerspace_requests_variance_fields"]: {
		requestId?:number,
	salesItemProductId?:number
};
	/** columns and relationships of "vectric.membership_invitation_status" */
["vectric_membership_invitation_status"]: {
		status:string
};
	/** aggregated selection of "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_aggregate"]: {
		aggregate?:ModelTypes["vectric_membership_invitation_status_aggregate_fields"],
	nodes:ModelTypes["vectric_membership_invitation_status"][]
};
	/** aggregate fields of "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_aggregate_fields"]: {
		count:number,
	max?:ModelTypes["vectric_membership_invitation_status_max_fields"],
	min?:ModelTypes["vectric_membership_invitation_status_min_fields"]
};
	/** aggregate max on columns */
["vectric_membership_invitation_status_max_fields"]: {
		status?:string
};
	/** aggregate min on columns */
["vectric_membership_invitation_status_min_fields"]: {
		status?:string
};
	/** response of any mutation on the table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_membership_invitation_status"][]
};
	/** columns and relationships of "vectric.membership_invitations" */
["vectric_membership_invitations"]: {
		dateInvited:ModelTypes["timestamp"],
	dateProcessed?:ModelTypes["timestamp"],
	email:string,
	invitationId:number,
	invitationStatus:ModelTypes["vectric_membership_invitation_status_enum"],
	invitedBy:string,
	/** An object relationship */
	membership:ModelTypes["vectric_memberships"],
	membershipId:number,
	/** An object relationship */
	organization:ModelTypes["vectric_organizations"],
	organizationId:number,
	/** An object relationship */
	status:ModelTypes["vectric_membership_invitation_status"],
	token:string
};
	/** aggregated selection of "vectric.membership_invitations" */
["vectric_membership_invitations_aggregate"]: {
		aggregate?:ModelTypes["vectric_membership_invitations_aggregate_fields"],
	nodes:ModelTypes["vectric_membership_invitations"][]
};
	/** aggregate fields of "vectric.membership_invitations" */
["vectric_membership_invitations_aggregate_fields"]: {
		avg?:ModelTypes["vectric_membership_invitations_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_membership_invitations_max_fields"],
	min?:ModelTypes["vectric_membership_invitations_min_fields"],
	stddev?:ModelTypes["vectric_membership_invitations_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_membership_invitations_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_membership_invitations_stddev_samp_fields"],
	sum?:ModelTypes["vectric_membership_invitations_sum_fields"],
	var_pop?:ModelTypes["vectric_membership_invitations_var_pop_fields"],
	var_samp?:ModelTypes["vectric_membership_invitations_var_samp_fields"],
	variance?:ModelTypes["vectric_membership_invitations_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_membership_invitations_avg_fields"]: {
		invitationId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** aggregate max on columns */
["vectric_membership_invitations_max_fields"]: {
		dateInvited?:ModelTypes["timestamp"],
	dateProcessed?:ModelTypes["timestamp"],
	email?:string,
	invitationId?:number,
	invitedBy?:string,
	membershipId?:number,
	organizationId?:number,
	token?:string
};
	/** aggregate min on columns */
["vectric_membership_invitations_min_fields"]: {
		dateInvited?:ModelTypes["timestamp"],
	dateProcessed?:ModelTypes["timestamp"],
	email?:string,
	invitationId?:number,
	invitedBy?:string,
	membershipId?:number,
	organizationId?:number,
	token?:string
};
	/** response of any mutation on the table "vectric.membership_invitations" */
["vectric_membership_invitations_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_membership_invitations"][]
};
	/** aggregate stddev on columns */
["vectric_membership_invitations_stddev_fields"]: {
		invitationId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_membership_invitations_stddev_pop_fields"]: {
		invitationId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_membership_invitations_stddev_samp_fields"]: {
		invitationId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** aggregate sum on columns */
["vectric_membership_invitations_sum_fields"]: {
		invitationId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** aggregate var_pop on columns */
["vectric_membership_invitations_var_pop_fields"]: {
		invitationId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** aggregate var_samp on columns */
["vectric_membership_invitations_var_samp_fields"]: {
		invitationId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** aggregate variance on columns */
["vectric_membership_invitations_variance_fields"]: {
		invitationId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** columns and relationships of "vectric.membership_roles" */
["vectric_membership_roles"]: {
		role:string
};
	/** aggregated selection of "vectric.membership_roles" */
["vectric_membership_roles_aggregate"]: {
		aggregate?:ModelTypes["vectric_membership_roles_aggregate_fields"],
	nodes:ModelTypes["vectric_membership_roles"][]
};
	/** aggregate fields of "vectric.membership_roles" */
["vectric_membership_roles_aggregate_fields"]: {
		count:number,
	max?:ModelTypes["vectric_membership_roles_max_fields"],
	min?:ModelTypes["vectric_membership_roles_min_fields"]
};
	/** aggregate max on columns */
["vectric_membership_roles_max_fields"]: {
		role?:string
};
	/** aggregate min on columns */
["vectric_membership_roles_min_fields"]: {
		role?:string
};
	/** response of any mutation on the table "vectric.membership_roles" */
["vectric_membership_roles_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_membership_roles"][]
};
	/** columns and relationships of "vectric.membership_status" */
["vectric_membership_status"]: {
		status:string
};
	/** aggregated selection of "vectric.membership_status" */
["vectric_membership_status_aggregate"]: {
		aggregate?:ModelTypes["vectric_membership_status_aggregate_fields"],
	nodes:ModelTypes["vectric_membership_status"][]
};
	/** aggregate fields of "vectric.membership_status" */
["vectric_membership_status_aggregate_fields"]: {
		count:number,
	max?:ModelTypes["vectric_membership_status_max_fields"],
	min?:ModelTypes["vectric_membership_status_min_fields"]
};
	/** aggregate max on columns */
["vectric_membership_status_max_fields"]: {
		status?:string
};
	/** aggregate min on columns */
["vectric_membership_status_min_fields"]: {
		status?:string
};
	/** response of any mutation on the table "vectric.membership_status" */
["vectric_membership_status_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_membership_status"][]
};
	/** columns and relationships of "vectric.memberships" */
["vectric_memberships"]: {
		/** An array relationship */
	activeMembers:ModelTypes["vectric_active_memberships"][],
	/** An aggregate relationship */
	activeMembers_aggregate:ModelTypes["vectric_active_memberships_aggregate"],
	addedBy:string,
	amendedBy?:string,
	/** An object relationship */
	customer?:ModelTypes["vectric_sales_customers"],
	customerId?:ModelTypes["bigint"],
	dateAdded:ModelTypes["timestamp"],
	dateAmended?:ModelTypes["timestamp"],
	membershipId:number,
	/** An array relationship */
	membershipInvitations:ModelTypes["vectric_membership_invitations"][],
	/** An aggregate relationship */
	membershipInvitations_aggregate:ModelTypes["vectric_membership_invitations_aggregate"],
	/** An object relationship */
	membershipRole:ModelTypes["vectric_membership_roles"],
	/** An object relationship */
	membershipStatus:ModelTypes["vectric_membership_status"],
	/** An object relationship */
	organization:ModelTypes["vectric_organizations"],
	organizationId:number,
	role:ModelTypes["vectric_membership_roles_enum"],
	status:ModelTypes["vectric_membership_status_enum"]
};
	/** aggregated selection of "vectric.memberships" */
["vectric_memberships_aggregate"]: {
		aggregate?:ModelTypes["vectric_memberships_aggregate_fields"],
	nodes:ModelTypes["vectric_memberships"][]
};
	/** aggregate fields of "vectric.memberships" */
["vectric_memberships_aggregate_fields"]: {
		avg?:ModelTypes["vectric_memberships_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_memberships_max_fields"],
	min?:ModelTypes["vectric_memberships_min_fields"],
	stddev?:ModelTypes["vectric_memberships_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_memberships_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_memberships_stddev_samp_fields"],
	sum?:ModelTypes["vectric_memberships_sum_fields"],
	var_pop?:ModelTypes["vectric_memberships_var_pop_fields"],
	var_samp?:ModelTypes["vectric_memberships_var_samp_fields"],
	variance?:ModelTypes["vectric_memberships_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_memberships_avg_fields"]: {
		customerId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** aggregate max on columns */
["vectric_memberships_max_fields"]: {
		addedBy?:string,
	amendedBy?:string,
	customerId?:ModelTypes["bigint"],
	dateAdded?:ModelTypes["timestamp"],
	dateAmended?:ModelTypes["timestamp"],
	membershipId?:number,
	organizationId?:number
};
	/** aggregate min on columns */
["vectric_memberships_min_fields"]: {
		addedBy?:string,
	amendedBy?:string,
	customerId?:ModelTypes["bigint"],
	dateAdded?:ModelTypes["timestamp"],
	dateAmended?:ModelTypes["timestamp"],
	membershipId?:number,
	organizationId?:number
};
	/** response of any mutation on the table "vectric.memberships" */
["vectric_memberships_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_memberships"][]
};
	/** aggregate stddev on columns */
["vectric_memberships_stddev_fields"]: {
		customerId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_memberships_stddev_pop_fields"]: {
		customerId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_memberships_stddev_samp_fields"]: {
		customerId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** aggregate sum on columns */
["vectric_memberships_sum_fields"]: {
		customerId?:ModelTypes["bigint"],
	membershipId?:number,
	organizationId?:number
};
	/** aggregate var_pop on columns */
["vectric_memberships_var_pop_fields"]: {
		customerId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** aggregate var_samp on columns */
["vectric_memberships_var_samp_fields"]: {
		customerId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** aggregate variance on columns */
["vectric_memberships_variance_fields"]: {
		customerId?:number,
	membershipId?:number,
	organizationId?:number
};
	/** columns and relationships of "vectric.oauth_client_details" */
["vectric_oauth_client_details"]: {
		access_token_validity?:ModelTypes["bigint"],
	additional_information?:string,
	authorities?:string,
	authorized_grant_types?:string,
	autoapprove?:string,
	client_id:string,
	client_secret?:string,
	refresh_token_validity?:ModelTypes["bigint"],
	resource_ids?:string,
	scope?:string,
	web_server_redirect_uri?:string
};
	/** aggregated selection of "vectric.oauth_client_details" */
["vectric_oauth_client_details_aggregate"]: {
		aggregate?:ModelTypes["vectric_oauth_client_details_aggregate_fields"],
	nodes:ModelTypes["vectric_oauth_client_details"][]
};
	/** aggregate fields of "vectric.oauth_client_details" */
["vectric_oauth_client_details_aggregate_fields"]: {
		avg?:ModelTypes["vectric_oauth_client_details_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_oauth_client_details_max_fields"],
	min?:ModelTypes["vectric_oauth_client_details_min_fields"],
	stddev?:ModelTypes["vectric_oauth_client_details_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_oauth_client_details_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_oauth_client_details_stddev_samp_fields"],
	sum?:ModelTypes["vectric_oauth_client_details_sum_fields"],
	var_pop?:ModelTypes["vectric_oauth_client_details_var_pop_fields"],
	var_samp?:ModelTypes["vectric_oauth_client_details_var_samp_fields"],
	variance?:ModelTypes["vectric_oauth_client_details_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oauth_client_details_avg_fields"]: {
		access_token_validity?:number,
	refresh_token_validity?:number
};
	/** aggregate max on columns */
["vectric_oauth_client_details_max_fields"]: {
		access_token_validity?:ModelTypes["bigint"],
	additional_information?:string,
	authorities?:string,
	authorized_grant_types?:string,
	autoapprove?:string,
	client_id?:string,
	client_secret?:string,
	refresh_token_validity?:ModelTypes["bigint"],
	resource_ids?:string,
	scope?:string,
	web_server_redirect_uri?:string
};
	/** aggregate min on columns */
["vectric_oauth_client_details_min_fields"]: {
		access_token_validity?:ModelTypes["bigint"],
	additional_information?:string,
	authorities?:string,
	authorized_grant_types?:string,
	autoapprove?:string,
	client_id?:string,
	client_secret?:string,
	refresh_token_validity?:ModelTypes["bigint"],
	resource_ids?:string,
	scope?:string,
	web_server_redirect_uri?:string
};
	/** response of any mutation on the table "vectric.oauth_client_details" */
["vectric_oauth_client_details_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_oauth_client_details"][]
};
	/** aggregate stddev on columns */
["vectric_oauth_client_details_stddev_fields"]: {
		access_token_validity?:number,
	refresh_token_validity?:number
};
	/** aggregate stddev_pop on columns */
["vectric_oauth_client_details_stddev_pop_fields"]: {
		access_token_validity?:number,
	refresh_token_validity?:number
};
	/** aggregate stddev_samp on columns */
["vectric_oauth_client_details_stddev_samp_fields"]: {
		access_token_validity?:number,
	refresh_token_validity?:number
};
	/** aggregate sum on columns */
["vectric_oauth_client_details_sum_fields"]: {
		access_token_validity?:ModelTypes["bigint"],
	refresh_token_validity?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oauth_client_details_var_pop_fields"]: {
		access_token_validity?:number,
	refresh_token_validity?:number
};
	/** aggregate var_samp on columns */
["vectric_oauth_client_details_var_samp_fields"]: {
		access_token_validity?:number,
	refresh_token_validity?:number
};
	/** aggregate variance on columns */
["vectric_oauth_client_details_variance_fields"]: {
		access_token_validity?:number,
	refresh_token_validity?:number
};
	/** columns and relationships of "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails"]: {
		bundle_id:string,
	date:ModelTypes["timestamp"],
	email_to:string,
	/** An object relationship */
	oem_customer:ModelTypes["vectric_sales_customers"],
	oem_customer_id:ModelTypes["bigint"],
	/** An object relationship */
	oem_partner:ModelTypes["vectric_oem_partners"],
	partner_id:ModelTypes["bigint"],
	/** An object relationship */
	sales_oem_bundle:ModelTypes["vectric_sales_oem_bundles"]
};
	/** aggregated selection of "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails_aggregate"]: {
		aggregate?:ModelTypes["vectric_oem_allocation_emails_aggregate_fields"],
	nodes:ModelTypes["vectric_oem_allocation_emails"][]
};
	/** aggregate fields of "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails_aggregate_fields"]: {
		avg?:ModelTypes["vectric_oem_allocation_emails_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_oem_allocation_emails_max_fields"],
	min?:ModelTypes["vectric_oem_allocation_emails_min_fields"],
	stddev?:ModelTypes["vectric_oem_allocation_emails_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_oem_allocation_emails_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_oem_allocation_emails_stddev_samp_fields"],
	sum?:ModelTypes["vectric_oem_allocation_emails_sum_fields"],
	var_pop?:ModelTypes["vectric_oem_allocation_emails_var_pop_fields"],
	var_samp?:ModelTypes["vectric_oem_allocation_emails_var_samp_fields"],
	variance?:ModelTypes["vectric_oem_allocation_emails_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_allocation_emails_avg_fields"]: {
		oem_customer_id?:number,
	partner_id?:number
};
	/** aggregate max on columns */
["vectric_oem_allocation_emails_max_fields"]: {
		bundle_id?:string,
	date?:ModelTypes["timestamp"],
	email_to?:string,
	oem_customer_id?:ModelTypes["bigint"],
	partner_id?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_oem_allocation_emails_min_fields"]: {
		bundle_id?:string,
	date?:ModelTypes["timestamp"],
	email_to?:string,
	oem_customer_id?:ModelTypes["bigint"],
	partner_id?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_oem_allocation_emails"][]
};
	/** aggregate stddev on columns */
["vectric_oem_allocation_emails_stddev_fields"]: {
		oem_customer_id?:number,
	partner_id?:number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_allocation_emails_stddev_pop_fields"]: {
		oem_customer_id?:number,
	partner_id?:number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_allocation_emails_stddev_samp_fields"]: {
		oem_customer_id?:number,
	partner_id?:number
};
	/** aggregate sum on columns */
["vectric_oem_allocation_emails_sum_fields"]: {
		oem_customer_id?:ModelTypes["bigint"],
	partner_id?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_allocation_emails_var_pop_fields"]: {
		oem_customer_id?:number,
	partner_id?:number
};
	/** aggregate var_samp on columns */
["vectric_oem_allocation_emails_var_samp_fields"]: {
		oem_customer_id?:number,
	partner_id?:number
};
	/** aggregate variance on columns */
["vectric_oem_allocation_emails_variance_fields"]: {
		oem_customer_id?:number,
	partner_id?:number
};
	/** columns and relationships of "vectric.oem_detailed_products" */
["vectric_oem_detailed_products"]: {
		id:ModelTypes["bigint"],
	oemProductId:ModelTypes["bigint"],
	/** An object relationship */
	product:ModelTypes["vectric_products_products"],
	productId:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_aggregate"]: {
		aggregate?:ModelTypes["vectric_oem_detailed_products_aggregate_fields"],
	nodes:ModelTypes["vectric_oem_detailed_products"][]
};
	/** aggregate fields of "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_aggregate_fields"]: {
		avg?:ModelTypes["vectric_oem_detailed_products_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_oem_detailed_products_max_fields"],
	min?:ModelTypes["vectric_oem_detailed_products_min_fields"],
	stddev?:ModelTypes["vectric_oem_detailed_products_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_oem_detailed_products_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_oem_detailed_products_stddev_samp_fields"],
	sum?:ModelTypes["vectric_oem_detailed_products_sum_fields"],
	var_pop?:ModelTypes["vectric_oem_detailed_products_var_pop_fields"],
	var_samp?:ModelTypes["vectric_oem_detailed_products_var_samp_fields"],
	variance?:ModelTypes["vectric_oem_detailed_products_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_detailed_products_avg_fields"]: {
		id?:number,
	oemProductId?:number,
	productId?:number
};
	/** aggregate max on columns */
["vectric_oem_detailed_products_max_fields"]: {
		id?:ModelTypes["bigint"],
	oemProductId?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_oem_detailed_products_min_fields"]: {
		id?:ModelTypes["bigint"],
	oemProductId?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_oem_detailed_products"][]
};
	/** aggregate stddev on columns */
["vectric_oem_detailed_products_stddev_fields"]: {
		id?:number,
	oemProductId?:number,
	productId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_detailed_products_stddev_pop_fields"]: {
		id?:number,
	oemProductId?:number,
	productId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_detailed_products_stddev_samp_fields"]: {
		id?:number,
	oemProductId?:number,
	productId?:number
};
	/** aggregate sum on columns */
["vectric_oem_detailed_products_sum_fields"]: {
		id?:ModelTypes["bigint"],
	oemProductId?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_detailed_products_var_pop_fields"]: {
		id?:number,
	oemProductId?:number,
	productId?:number
};
	/** aggregate var_samp on columns */
["vectric_oem_detailed_products_var_samp_fields"]: {
		id?:number,
	oemProductId?:number,
	productId?:number
};
	/** aggregate variance on columns */
["vectric_oem_detailed_products_variance_fields"]: {
		id?:number,
	oemProductId?:number,
	productId?:number
};
	/** columns and relationships of "vectric.oem_eval_request" */
["vectric_oem_eval_request"]: {
		/** An object relationship */
	customer:ModelTypes["vectric_sales_customers"],
	customerId:ModelTypes["bigint"],
	dateProcessed?:ModelTypes["timestamptz"],
	dateRequested?:ModelTypes["timestamptz"],
	expired:boolean,
	granted:boolean,
	/** An object relationship */
	partner?:ModelTypes["vectric_oem_partners"],
	partnerId?:ModelTypes["bigint"],
	processed:boolean,
	processedBy?:string,
	replacedBy?:ModelTypes["bigint"],
	/** An object relationship */
	replacementRequest?:ModelTypes["vectric_oem_eval_request"],
	requestId:ModelTypes["bigint"],
	requestedBy:ModelTypes["bigint"],
	/** An object relationship */
	requester:ModelTypes["vectric_sales_customers"],
	vloggerId?:number
};
	/** aggregated selection of "vectric.oem_eval_request" */
["vectric_oem_eval_request_aggregate"]: {
		aggregate?:ModelTypes["vectric_oem_eval_request_aggregate_fields"],
	nodes:ModelTypes["vectric_oem_eval_request"][]
};
	/** aggregate fields of "vectric.oem_eval_request" */
["vectric_oem_eval_request_aggregate_fields"]: {
		avg?:ModelTypes["vectric_oem_eval_request_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_oem_eval_request_max_fields"],
	min?:ModelTypes["vectric_oem_eval_request_min_fields"],
	stddev?:ModelTypes["vectric_oem_eval_request_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_oem_eval_request_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_oem_eval_request_stddev_samp_fields"],
	sum?:ModelTypes["vectric_oem_eval_request_sum_fields"],
	var_pop?:ModelTypes["vectric_oem_eval_request_var_pop_fields"],
	var_samp?:ModelTypes["vectric_oem_eval_request_var_samp_fields"],
	variance?:ModelTypes["vectric_oem_eval_request_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_eval_request_avg_fields"]: {
		customerId?:number,
	partnerId?:number,
	replacedBy?:number,
	requestId?:number,
	requestedBy?:number,
	vloggerId?:number
};
	/** aggregate max on columns */
["vectric_oem_eval_request_max_fields"]: {
		customerId?:ModelTypes["bigint"],
	dateProcessed?:ModelTypes["timestamptz"],
	dateRequested?:ModelTypes["timestamptz"],
	partnerId?:ModelTypes["bigint"],
	processedBy?:string,
	replacedBy?:ModelTypes["bigint"],
	requestId?:ModelTypes["bigint"],
	requestedBy?:ModelTypes["bigint"],
	vloggerId?:number
};
	/** aggregate min on columns */
["vectric_oem_eval_request_min_fields"]: {
		customerId?:ModelTypes["bigint"],
	dateProcessed?:ModelTypes["timestamptz"],
	dateRequested?:ModelTypes["timestamptz"],
	partnerId?:ModelTypes["bigint"],
	processedBy?:string,
	replacedBy?:ModelTypes["bigint"],
	requestId?:ModelTypes["bigint"],
	requestedBy?:ModelTypes["bigint"],
	vloggerId?:number
};
	/** response of any mutation on the table "vectric.oem_eval_request" */
["vectric_oem_eval_request_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_oem_eval_request"][]
};
	/** aggregate stddev on columns */
["vectric_oem_eval_request_stddev_fields"]: {
		customerId?:number,
	partnerId?:number,
	replacedBy?:number,
	requestId?:number,
	requestedBy?:number,
	vloggerId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_eval_request_stddev_pop_fields"]: {
		customerId?:number,
	partnerId?:number,
	replacedBy?:number,
	requestId?:number,
	requestedBy?:number,
	vloggerId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_eval_request_stddev_samp_fields"]: {
		customerId?:number,
	partnerId?:number,
	replacedBy?:number,
	requestId?:number,
	requestedBy?:number,
	vloggerId?:number
};
	/** aggregate sum on columns */
["vectric_oem_eval_request_sum_fields"]: {
		customerId?:ModelTypes["bigint"],
	partnerId?:ModelTypes["bigint"],
	replacedBy?:ModelTypes["bigint"],
	requestId?:ModelTypes["bigint"],
	requestedBy?:ModelTypes["bigint"],
	vloggerId?:number
};
	/** aggregate var_pop on columns */
["vectric_oem_eval_request_var_pop_fields"]: {
		customerId?:number,
	partnerId?:number,
	replacedBy?:number,
	requestId?:number,
	requestedBy?:number,
	vloggerId?:number
};
	/** aggregate var_samp on columns */
["vectric_oem_eval_request_var_samp_fields"]: {
		customerId?:number,
	partnerId?:number,
	replacedBy?:number,
	requestId?:number,
	requestedBy?:number,
	vloggerId?:number
};
	/** aggregate variance on columns */
["vectric_oem_eval_request_variance_fields"]: {
		customerId?:number,
	partnerId?:number,
	replacedBy?:number,
	requestId?:number,
	requestedBy?:number,
	vloggerId?:number
};
	/** columns and relationships of "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item"]: {
		batchId?:string,
	discountValue?:ModelTypes["numeric"],
	/** An array relationship */
	itemBundle:ModelTypes["vectric_oem_fastspring_item_bundle"][],
	/** An aggregate relationship */
	itemBundle_aggregate:ModelTypes["vectric_oem_fastspring_item_bundle_aggregate"],
	itemId:ModelTypes["bigint"],
	/** An object relationship */
	oemProduct?:ModelTypes["vectric_oem_products"],
	oemProductId?:ModelTypes["bigint"],
	/** An object relationship */
	order?:ModelTypes["vectric_oem_fastspring_order"],
	orderId?:ModelTypes["bigint"],
	priceTotal?:ModelTypes["numeric"],
	productName?:string,
	quantity?:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_aggregate"]: {
		aggregate?:ModelTypes["vectric_oem_fastspring_item_aggregate_fields"],
	nodes:ModelTypes["vectric_oem_fastspring_item"][]
};
	/** aggregate fields of "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_aggregate_fields"]: {
		avg?:ModelTypes["vectric_oem_fastspring_item_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_oem_fastspring_item_max_fields"],
	min?:ModelTypes["vectric_oem_fastspring_item_min_fields"],
	stddev?:ModelTypes["vectric_oem_fastspring_item_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_oem_fastspring_item_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_oem_fastspring_item_stddev_samp_fields"],
	sum?:ModelTypes["vectric_oem_fastspring_item_sum_fields"],
	var_pop?:ModelTypes["vectric_oem_fastspring_item_var_pop_fields"],
	var_samp?:ModelTypes["vectric_oem_fastspring_item_var_samp_fields"],
	variance?:ModelTypes["vectric_oem_fastspring_item_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_fastspring_item_avg_fields"]: {
		discountValue?:number,
	itemId?:number,
	oemProductId?:number,
	orderId?:number,
	priceTotal?:number,
	quantity?:number
};
	/** columns and relationships of "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle"]: {
		/** An object relationship */
	bundle:ModelTypes["vectric_sales_oem_bundles"],
	bundleId:string,
	/** An object relationship */
	fastspringItem:ModelTypes["vectric_oem_fastspring_item"],
	fastspringItemId:ModelTypes["bigint"],
	itemBundleId:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_aggregate"]: {
		aggregate?:ModelTypes["vectric_oem_fastspring_item_bundle_aggregate_fields"],
	nodes:ModelTypes["vectric_oem_fastspring_item_bundle"][]
};
	/** aggregate fields of "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_aggregate_fields"]: {
		avg?:ModelTypes["vectric_oem_fastspring_item_bundle_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_oem_fastspring_item_bundle_max_fields"],
	min?:ModelTypes["vectric_oem_fastspring_item_bundle_min_fields"],
	stddev?:ModelTypes["vectric_oem_fastspring_item_bundle_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_oem_fastspring_item_bundle_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_oem_fastspring_item_bundle_stddev_samp_fields"],
	sum?:ModelTypes["vectric_oem_fastspring_item_bundle_sum_fields"],
	var_pop?:ModelTypes["vectric_oem_fastspring_item_bundle_var_pop_fields"],
	var_samp?:ModelTypes["vectric_oem_fastspring_item_bundle_var_samp_fields"],
	variance?:ModelTypes["vectric_oem_fastspring_item_bundle_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_fastspring_item_bundle_avg_fields"]: {
		fastspringItemId?:number,
	itemBundleId?:number
};
	/** aggregate max on columns */
["vectric_oem_fastspring_item_bundle_max_fields"]: {
		bundleId?:string,
	fastspringItemId?:ModelTypes["bigint"],
	itemBundleId?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_oem_fastspring_item_bundle_min_fields"]: {
		bundleId?:string,
	fastspringItemId?:ModelTypes["bigint"],
	itemBundleId?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_oem_fastspring_item_bundle"][]
};
	/** aggregate stddev on columns */
["vectric_oem_fastspring_item_bundle_stddev_fields"]: {
		fastspringItemId?:number,
	itemBundleId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_fastspring_item_bundle_stddev_pop_fields"]: {
		fastspringItemId?:number,
	itemBundleId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_fastspring_item_bundle_stddev_samp_fields"]: {
		fastspringItemId?:number,
	itemBundleId?:number
};
	/** aggregate sum on columns */
["vectric_oem_fastspring_item_bundle_sum_fields"]: {
		fastspringItemId?:ModelTypes["bigint"],
	itemBundleId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_fastspring_item_bundle_var_pop_fields"]: {
		fastspringItemId?:number,
	itemBundleId?:number
};
	/** aggregate var_samp on columns */
["vectric_oem_fastspring_item_bundle_var_samp_fields"]: {
		fastspringItemId?:number,
	itemBundleId?:number
};
	/** aggregate variance on columns */
["vectric_oem_fastspring_item_bundle_variance_fields"]: {
		fastspringItemId?:number,
	itemBundleId?:number
};
	/** aggregate max on columns */
["vectric_oem_fastspring_item_max_fields"]: {
		batchId?:string,
	discountValue?:ModelTypes["numeric"],
	itemId?:ModelTypes["bigint"],
	oemProductId?:ModelTypes["bigint"],
	orderId?:ModelTypes["bigint"],
	priceTotal?:ModelTypes["numeric"],
	productName?:string,
	quantity?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_oem_fastspring_item_min_fields"]: {
		batchId?:string,
	discountValue?:ModelTypes["numeric"],
	itemId?:ModelTypes["bigint"],
	oemProductId?:ModelTypes["bigint"],
	orderId?:ModelTypes["bigint"],
	priceTotal?:ModelTypes["numeric"],
	productName?:string,
	quantity?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_oem_fastspring_item"][]
};
	/** aggregate stddev on columns */
["vectric_oem_fastspring_item_stddev_fields"]: {
		discountValue?:number,
	itemId?:number,
	oemProductId?:number,
	orderId?:number,
	priceTotal?:number,
	quantity?:number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_fastspring_item_stddev_pop_fields"]: {
		discountValue?:number,
	itemId?:number,
	oemProductId?:number,
	orderId?:number,
	priceTotal?:number,
	quantity?:number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_fastspring_item_stddev_samp_fields"]: {
		discountValue?:number,
	itemId?:number,
	oemProductId?:number,
	orderId?:number,
	priceTotal?:number,
	quantity?:number
};
	/** aggregate sum on columns */
["vectric_oem_fastspring_item_sum_fields"]: {
		discountValue?:ModelTypes["numeric"],
	itemId?:ModelTypes["bigint"],
	oemProductId?:ModelTypes["bigint"],
	orderId?:ModelTypes["bigint"],
	priceTotal?:ModelTypes["numeric"],
	quantity?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_fastspring_item_var_pop_fields"]: {
		discountValue?:number,
	itemId?:number,
	oemProductId?:number,
	orderId?:number,
	priceTotal?:number,
	quantity?:number
};
	/** aggregate var_samp on columns */
["vectric_oem_fastspring_item_var_samp_fields"]: {
		discountValue?:number,
	itemId?:number,
	oemProductId?:number,
	orderId?:number,
	priceTotal?:number,
	quantity?:number
};
	/** aggregate variance on columns */
["vectric_oem_fastspring_item_variance_fields"]: {
		discountValue?:number,
	itemId?:number,
	oemProductId?:number,
	orderId?:number,
	priceTotal?:number,
	quantity?:number
};
	/** columns and relationships of "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order"]: {
		actionTaken?:ModelTypes["bigint"],
	amendedBy?:string,
	city?:string,
	createdBy?:string,
	currency:string,
	customerId?:ModelTypes["bigint"],
	dateAmended?:ModelTypes["timestamptz"],
	dateCreated?:ModelTypes["timestamptz"],
	dateProcessed?:ModelTypes["timestamptz"],
	fastSpringCustomerId:ModelTypes["bigint"],
	/** An array relationship */
	items:ModelTypes["vectric_oem_fastspring_item"][],
	/** An aggregate relationship */
	items_aggregate:ModelTypes["vectric_oem_fastspring_item_aggregate"],
	language?:string,
	notes?:string,
	orderId:ModelTypes["bigint"],
	orderReference:string,
	/** An object relationship */
	partner:ModelTypes["vectric_oem_partners"],
	partnerId:ModelTypes["bigint"],
	postalCode?:string,
	processedBy?:string,
	region?:string,
	route?:string,
	subTotal?:ModelTypes["numeric"],
	tax?:ModelTypes["numeric"],
	total?:ModelTypes["numeric"]
};
	/** aggregated selection of "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_aggregate"]: {
		aggregate?:ModelTypes["vectric_oem_fastspring_order_aggregate_fields"],
	nodes:ModelTypes["vectric_oem_fastspring_order"][]
};
	/** aggregate fields of "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_aggregate_fields"]: {
		avg?:ModelTypes["vectric_oem_fastspring_order_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_oem_fastspring_order_max_fields"],
	min?:ModelTypes["vectric_oem_fastspring_order_min_fields"],
	stddev?:ModelTypes["vectric_oem_fastspring_order_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_oem_fastspring_order_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_oem_fastspring_order_stddev_samp_fields"],
	sum?:ModelTypes["vectric_oem_fastspring_order_sum_fields"],
	var_pop?:ModelTypes["vectric_oem_fastspring_order_var_pop_fields"],
	var_samp?:ModelTypes["vectric_oem_fastspring_order_var_samp_fields"],
	variance?:ModelTypes["vectric_oem_fastspring_order_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_fastspring_order_avg_fields"]: {
		actionTaken?:number,
	customerId?:number,
	fastSpringCustomerId?:number,
	orderId?:number,
	partnerId?:number,
	subTotal?:number,
	tax?:number,
	total?:number
};
	/** aggregate max on columns */
["vectric_oem_fastspring_order_max_fields"]: {
		actionTaken?:ModelTypes["bigint"],
	amendedBy?:string,
	city?:string,
	createdBy?:string,
	currency?:string,
	customerId?:ModelTypes["bigint"],
	dateAmended?:ModelTypes["timestamptz"],
	dateCreated?:ModelTypes["timestamptz"],
	dateProcessed?:ModelTypes["timestamptz"],
	fastSpringCustomerId?:ModelTypes["bigint"],
	language?:string,
	notes?:string,
	orderId?:ModelTypes["bigint"],
	orderReference?:string,
	partnerId?:ModelTypes["bigint"],
	postalCode?:string,
	processedBy?:string,
	region?:string,
	route?:string,
	subTotal?:ModelTypes["numeric"],
	tax?:ModelTypes["numeric"],
	total?:ModelTypes["numeric"]
};
	/** aggregate min on columns */
["vectric_oem_fastspring_order_min_fields"]: {
		actionTaken?:ModelTypes["bigint"],
	amendedBy?:string,
	city?:string,
	createdBy?:string,
	currency?:string,
	customerId?:ModelTypes["bigint"],
	dateAmended?:ModelTypes["timestamptz"],
	dateCreated?:ModelTypes["timestamptz"],
	dateProcessed?:ModelTypes["timestamptz"],
	fastSpringCustomerId?:ModelTypes["bigint"],
	language?:string,
	notes?:string,
	orderId?:ModelTypes["bigint"],
	orderReference?:string,
	partnerId?:ModelTypes["bigint"],
	postalCode?:string,
	processedBy?:string,
	region?:string,
	route?:string,
	subTotal?:ModelTypes["numeric"],
	tax?:ModelTypes["numeric"],
	total?:ModelTypes["numeric"]
};
	/** response of any mutation on the table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_oem_fastspring_order"][]
};
	/** aggregate stddev on columns */
["vectric_oem_fastspring_order_stddev_fields"]: {
		actionTaken?:number,
	customerId?:number,
	fastSpringCustomerId?:number,
	orderId?:number,
	partnerId?:number,
	subTotal?:number,
	tax?:number,
	total?:number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_fastspring_order_stddev_pop_fields"]: {
		actionTaken?:number,
	customerId?:number,
	fastSpringCustomerId?:number,
	orderId?:number,
	partnerId?:number,
	subTotal?:number,
	tax?:number,
	total?:number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_fastspring_order_stddev_samp_fields"]: {
		actionTaken?:number,
	customerId?:number,
	fastSpringCustomerId?:number,
	orderId?:number,
	partnerId?:number,
	subTotal?:number,
	tax?:number,
	total?:number
};
	/** aggregate sum on columns */
["vectric_oem_fastspring_order_sum_fields"]: {
		actionTaken?:ModelTypes["bigint"],
	customerId?:ModelTypes["bigint"],
	fastSpringCustomerId?:ModelTypes["bigint"],
	orderId?:ModelTypes["bigint"],
	partnerId?:ModelTypes["bigint"],
	subTotal?:ModelTypes["numeric"],
	tax?:ModelTypes["numeric"],
	total?:ModelTypes["numeric"]
};
	/** aggregate var_pop on columns */
["vectric_oem_fastspring_order_var_pop_fields"]: {
		actionTaken?:number,
	customerId?:number,
	fastSpringCustomerId?:number,
	orderId?:number,
	partnerId?:number,
	subTotal?:number,
	tax?:number,
	total?:number
};
	/** aggregate var_samp on columns */
["vectric_oem_fastspring_order_var_samp_fields"]: {
		actionTaken?:number,
	customerId?:number,
	fastSpringCustomerId?:number,
	orderId?:number,
	partnerId?:number,
	subTotal?:number,
	tax?:number,
	total?:number
};
	/** aggregate variance on columns */
["vectric_oem_fastspring_order_variance_fields"]: {
		actionTaken?:number,
	customerId?:number,
	fastSpringCustomerId?:number,
	orderId?:number,
	partnerId?:number,
	subTotal?:number,
	tax?:number,
	total?:number
};
	/** columns and relationships of "vectric.oem_invite_status" */
["vectric_oem_invite_status"]: {
		status:string,
	statusId:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.oem_invite_status" */
["vectric_oem_invite_status_aggregate"]: {
		aggregate?:ModelTypes["vectric_oem_invite_status_aggregate_fields"],
	nodes:ModelTypes["vectric_oem_invite_status"][]
};
	/** aggregate fields of "vectric.oem_invite_status" */
["vectric_oem_invite_status_aggregate_fields"]: {
		avg?:ModelTypes["vectric_oem_invite_status_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_oem_invite_status_max_fields"],
	min?:ModelTypes["vectric_oem_invite_status_min_fields"],
	stddev?:ModelTypes["vectric_oem_invite_status_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_oem_invite_status_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_oem_invite_status_stddev_samp_fields"],
	sum?:ModelTypes["vectric_oem_invite_status_sum_fields"],
	var_pop?:ModelTypes["vectric_oem_invite_status_var_pop_fields"],
	var_samp?:ModelTypes["vectric_oem_invite_status_var_samp_fields"],
	variance?:ModelTypes["vectric_oem_invite_status_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_invite_status_avg_fields"]: {
		statusId?:number
};
	/** aggregate max on columns */
["vectric_oem_invite_status_max_fields"]: {
		status?:string,
	statusId?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_oem_invite_status_min_fields"]: {
		status?:string,
	statusId?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.oem_invite_status" */
["vectric_oem_invite_status_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_oem_invite_status"][]
};
	/** aggregate stddev on columns */
["vectric_oem_invite_status_stddev_fields"]: {
		statusId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_invite_status_stddev_pop_fields"]: {
		statusId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_invite_status_stddev_samp_fields"]: {
		statusId?:number
};
	/** aggregate sum on columns */
["vectric_oem_invite_status_sum_fields"]: {
		statusId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_invite_status_var_pop_fields"]: {
		statusId?:number
};
	/** aggregate var_samp on columns */
["vectric_oem_invite_status_var_samp_fields"]: {
		statusId?:number
};
	/** aggregate variance on columns */
["vectric_oem_invite_status_variance_fields"]: {
		statusId?:number
};
	/** columns and relationships of "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type"]: {
		allocationTypeId:ModelTypes["bigint"],
	typeName:string
};
	/** aggregated selection of "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_aggregate"]: {
		aggregate?:ModelTypes["vectric_oem_licence_allocation_type_aggregate_fields"],
	nodes:ModelTypes["vectric_oem_licence_allocation_type"][]
};
	/** aggregate fields of "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_aggregate_fields"]: {
		avg?:ModelTypes["vectric_oem_licence_allocation_type_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_oem_licence_allocation_type_max_fields"],
	min?:ModelTypes["vectric_oem_licence_allocation_type_min_fields"],
	stddev?:ModelTypes["vectric_oem_licence_allocation_type_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_oem_licence_allocation_type_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_oem_licence_allocation_type_stddev_samp_fields"],
	sum?:ModelTypes["vectric_oem_licence_allocation_type_sum_fields"],
	var_pop?:ModelTypes["vectric_oem_licence_allocation_type_var_pop_fields"],
	var_samp?:ModelTypes["vectric_oem_licence_allocation_type_var_samp_fields"],
	variance?:ModelTypes["vectric_oem_licence_allocation_type_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_licence_allocation_type_avg_fields"]: {
		allocationTypeId?:number
};
	/** aggregate max on columns */
["vectric_oem_licence_allocation_type_max_fields"]: {
		allocationTypeId?:ModelTypes["bigint"],
	typeName?:string
};
	/** aggregate min on columns */
["vectric_oem_licence_allocation_type_min_fields"]: {
		allocationTypeId?:ModelTypes["bigint"],
	typeName?:string
};
	/** response of any mutation on the table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_oem_licence_allocation_type"][]
};
	/** aggregate stddev on columns */
["vectric_oem_licence_allocation_type_stddev_fields"]: {
		allocationTypeId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_licence_allocation_type_stddev_pop_fields"]: {
		allocationTypeId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_licence_allocation_type_stddev_samp_fields"]: {
		allocationTypeId?:number
};
	/** aggregate sum on columns */
["vectric_oem_licence_allocation_type_sum_fields"]: {
		allocationTypeId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_licence_allocation_type_var_pop_fields"]: {
		allocationTypeId?:number
};
	/** aggregate var_samp on columns */
["vectric_oem_licence_allocation_type_var_samp_fields"]: {
		allocationTypeId?:number
};
	/** aggregate variance on columns */
["vectric_oem_licence_allocation_type_variance_fields"]: {
		allocationTypeId?:number
};
	/** columns and relationships of "vectric.oem_partners" */
["vectric_oem_partners"]: {
		/** An array relationship */
	bundles:ModelTypes["vectric_sales_oem_bundles"][],
	/** An aggregate relationship */
	bundles_aggregate:ModelTypes["vectric_sales_oem_bundles_aggregate"],
	codePrefix:string,
	countrycode?:ModelTypes["bigint"],
	dateOfLastBatch?:ModelTypes["timestamptz"],
	displayName:string,
	inactive?:boolean,
	nextIssue?:ModelTypes["bigint"],
	partnerId:ModelTypes["bigint"],
	/** An array relationship */
	purchaseOptions:ModelTypes["vectric_oem_purchase_options"][],
	/** An aggregate relationship */
	purchaseOptions_aggregate:ModelTypes["vectric_oem_purchase_options_aggregate"],
	/** An array relationship */
	staff:ModelTypes["vectric_oem_staff_customer"][],
	/** An aggregate relationship */
	staff_aggregate:ModelTypes["vectric_oem_staff_customer_aggregate"]
};
	/** aggregated selection of "vectric.oem_partners" */
["vectric_oem_partners_aggregate"]: {
		aggregate?:ModelTypes["vectric_oem_partners_aggregate_fields"],
	nodes:ModelTypes["vectric_oem_partners"][]
};
	/** aggregate fields of "vectric.oem_partners" */
["vectric_oem_partners_aggregate_fields"]: {
		avg?:ModelTypes["vectric_oem_partners_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_oem_partners_max_fields"],
	min?:ModelTypes["vectric_oem_partners_min_fields"],
	stddev?:ModelTypes["vectric_oem_partners_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_oem_partners_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_oem_partners_stddev_samp_fields"],
	sum?:ModelTypes["vectric_oem_partners_sum_fields"],
	var_pop?:ModelTypes["vectric_oem_partners_var_pop_fields"],
	var_samp?:ModelTypes["vectric_oem_partners_var_samp_fields"],
	variance?:ModelTypes["vectric_oem_partners_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_partners_avg_fields"]: {
		countrycode?:number,
	nextIssue?:number,
	partnerId?:number
};
	/** aggregate max on columns */
["vectric_oem_partners_max_fields"]: {
		codePrefix?:string,
	countrycode?:ModelTypes["bigint"],
	dateOfLastBatch?:ModelTypes["timestamptz"],
	displayName?:string,
	nextIssue?:ModelTypes["bigint"],
	partnerId?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_oem_partners_min_fields"]: {
		codePrefix?:string,
	countrycode?:ModelTypes["bigint"],
	dateOfLastBatch?:ModelTypes["timestamptz"],
	displayName?:string,
	nextIssue?:ModelTypes["bigint"],
	partnerId?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.oem_partners" */
["vectric_oem_partners_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_oem_partners"][]
};
	/** aggregate stddev on columns */
["vectric_oem_partners_stddev_fields"]: {
		countrycode?:number,
	nextIssue?:number,
	partnerId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_partners_stddev_pop_fields"]: {
		countrycode?:number,
	nextIssue?:number,
	partnerId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_partners_stddev_samp_fields"]: {
		countrycode?:number,
	nextIssue?:number,
	partnerId?:number
};
	/** aggregate sum on columns */
["vectric_oem_partners_sum_fields"]: {
		countrycode?:ModelTypes["bigint"],
	nextIssue?:ModelTypes["bigint"],
	partnerId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_partners_var_pop_fields"]: {
		countrycode?:number,
	nextIssue?:number,
	partnerId?:number
};
	/** aggregate var_samp on columns */
["vectric_oem_partners_var_samp_fields"]: {
		countrycode?:number,
	nextIssue?:number,
	partnerId?:number
};
	/** aggregate variance on columns */
["vectric_oem_partners_variance_fields"]: {
		countrycode?:number,
	nextIssue?:number,
	partnerId?:number
};
	/** columns and relationships of "vectric.oem_products" */
["vectric_oem_products"]: {
		/** An array relationship */
	detailedProducts:ModelTypes["vectric_oem_detailed_products"][],
	/** An aggregate relationship */
	detailedProducts_aggregate:ModelTypes["vectric_oem_detailed_products_aggregate"],
	enabled:boolean,
	oemFastspringId:string,
	oemProductId:ModelTypes["bigint"],
	/** An object relationship */
	product:ModelTypes["vectric_products_products"],
	productId:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.oem_products" */
["vectric_oem_products_aggregate"]: {
		aggregate?:ModelTypes["vectric_oem_products_aggregate_fields"],
	nodes:ModelTypes["vectric_oem_products"][]
};
	/** aggregate fields of "vectric.oem_products" */
["vectric_oem_products_aggregate_fields"]: {
		avg?:ModelTypes["vectric_oem_products_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_oem_products_max_fields"],
	min?:ModelTypes["vectric_oem_products_min_fields"],
	stddev?:ModelTypes["vectric_oem_products_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_oem_products_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_oem_products_stddev_samp_fields"],
	sum?:ModelTypes["vectric_oem_products_sum_fields"],
	var_pop?:ModelTypes["vectric_oem_products_var_pop_fields"],
	var_samp?:ModelTypes["vectric_oem_products_var_samp_fields"],
	variance?:ModelTypes["vectric_oem_products_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_products_avg_fields"]: {
		oemProductId?:number,
	productId?:number
};
	/** aggregate max on columns */
["vectric_oem_products_max_fields"]: {
		oemFastspringId?:string,
	oemProductId?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_oem_products_min_fields"]: {
		oemFastspringId?:string,
	oemProductId?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.oem_products" */
["vectric_oem_products_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_oem_products"][]
};
	/** aggregate stddev on columns */
["vectric_oem_products_stddev_fields"]: {
		oemProductId?:number,
	productId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_products_stddev_pop_fields"]: {
		oemProductId?:number,
	productId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_products_stddev_samp_fields"]: {
		oemProductId?:number,
	productId?:number
};
	/** aggregate sum on columns */
["vectric_oem_products_sum_fields"]: {
		oemProductId?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_products_var_pop_fields"]: {
		oemProductId?:number,
	productId?:number
};
	/** aggregate var_samp on columns */
["vectric_oem_products_var_samp_fields"]: {
		oemProductId?:number,
	productId?:number
};
	/** aggregate variance on columns */
["vectric_oem_products_variance_fields"]: {
		oemProductId?:number,
	productId?:number
};
	/** columns and relationships of "vectric.oem_purchase_options" */
["vectric_oem_purchase_options"]: {
		emailLicenceDetails:boolean,
	maxQuantity:ModelTypes["bigint"],
	minQuantity:ModelTypes["bigint"],
	multipleLicences?:boolean,
	optionId:ModelTypes["bigint"],
	/** An object relationship */
	partner:ModelTypes["vectric_oem_partners"],
	partnerId:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_aggregate"]: {
		aggregate?:ModelTypes["vectric_oem_purchase_options_aggregate_fields"],
	nodes:ModelTypes["vectric_oem_purchase_options"][]
};
	/** aggregate fields of "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_aggregate_fields"]: {
		avg?:ModelTypes["vectric_oem_purchase_options_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_oem_purchase_options_max_fields"],
	min?:ModelTypes["vectric_oem_purchase_options_min_fields"],
	stddev?:ModelTypes["vectric_oem_purchase_options_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_oem_purchase_options_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_oem_purchase_options_stddev_samp_fields"],
	sum?:ModelTypes["vectric_oem_purchase_options_sum_fields"],
	var_pop?:ModelTypes["vectric_oem_purchase_options_var_pop_fields"],
	var_samp?:ModelTypes["vectric_oem_purchase_options_var_samp_fields"],
	variance?:ModelTypes["vectric_oem_purchase_options_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_purchase_options_avg_fields"]: {
		maxQuantity?:number,
	minQuantity?:number,
	optionId?:number,
	partnerId?:number
};
	/** aggregate max on columns */
["vectric_oem_purchase_options_max_fields"]: {
		maxQuantity?:ModelTypes["bigint"],
	minQuantity?:ModelTypes["bigint"],
	optionId?:ModelTypes["bigint"],
	partnerId?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_oem_purchase_options_min_fields"]: {
		maxQuantity?:ModelTypes["bigint"],
	minQuantity?:ModelTypes["bigint"],
	optionId?:ModelTypes["bigint"],
	partnerId?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_oem_purchase_options"][]
};
	/** aggregate stddev on columns */
["vectric_oem_purchase_options_stddev_fields"]: {
		maxQuantity?:number,
	minQuantity?:number,
	optionId?:number,
	partnerId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_purchase_options_stddev_pop_fields"]: {
		maxQuantity?:number,
	minQuantity?:number,
	optionId?:number,
	partnerId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_purchase_options_stddev_samp_fields"]: {
		maxQuantity?:number,
	minQuantity?:number,
	optionId?:number,
	partnerId?:number
};
	/** aggregate sum on columns */
["vectric_oem_purchase_options_sum_fields"]: {
		maxQuantity?:ModelTypes["bigint"],
	minQuantity?:ModelTypes["bigint"],
	optionId?:ModelTypes["bigint"],
	partnerId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_purchase_options_var_pop_fields"]: {
		maxQuantity?:number,
	minQuantity?:number,
	optionId?:number,
	partnerId?:number
};
	/** aggregate var_samp on columns */
["vectric_oem_purchase_options_var_samp_fields"]: {
		maxQuantity?:number,
	minQuantity?:number,
	optionId?:number,
	partnerId?:number
};
	/** aggregate variance on columns */
["vectric_oem_purchase_options_variance_fields"]: {
		maxQuantity?:number,
	minQuantity?:number,
	optionId?:number,
	partnerId?:number
};
	/** columns and relationships of "vectric.oem_staff_admin_ownership" */
["vectric_oem_staff_admin_ownership"]: {
		admin?:boolean,
	adminId?:ModelTypes["bigint"],
	customerId?:ModelTypes["bigint"],
	customerName?:string,
	dateAccepted?:ModelTypes["timestamptz"],
	displayStatus?:string,
	email?:string,
	partnerId?:ModelTypes["bigint"],
	status?:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.oem_staff_admin_ownership" */
["vectric_oem_staff_admin_ownership_aggregate"]: {
		aggregate?:ModelTypes["vectric_oem_staff_admin_ownership_aggregate_fields"],
	nodes:ModelTypes["vectric_oem_staff_admin_ownership"][]
};
	/** aggregate fields of "vectric.oem_staff_admin_ownership" */
["vectric_oem_staff_admin_ownership_aggregate_fields"]: {
		avg?:ModelTypes["vectric_oem_staff_admin_ownership_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_oem_staff_admin_ownership_max_fields"],
	min?:ModelTypes["vectric_oem_staff_admin_ownership_min_fields"],
	stddev?:ModelTypes["vectric_oem_staff_admin_ownership_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_oem_staff_admin_ownership_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_oem_staff_admin_ownership_stddev_samp_fields"],
	sum?:ModelTypes["vectric_oem_staff_admin_ownership_sum_fields"],
	var_pop?:ModelTypes["vectric_oem_staff_admin_ownership_var_pop_fields"],
	var_samp?:ModelTypes["vectric_oem_staff_admin_ownership_var_samp_fields"],
	variance?:ModelTypes["vectric_oem_staff_admin_ownership_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_staff_admin_ownership_avg_fields"]: {
		adminId?:number,
	customerId?:number,
	partnerId?:number,
	status?:number
};
	/** aggregate max on columns */
["vectric_oem_staff_admin_ownership_max_fields"]: {
		adminId?:ModelTypes["bigint"],
	customerId?:ModelTypes["bigint"],
	customerName?:string,
	dateAccepted?:ModelTypes["timestamptz"],
	displayStatus?:string,
	email?:string,
	partnerId?:ModelTypes["bigint"],
	status?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_oem_staff_admin_ownership_min_fields"]: {
		adminId?:ModelTypes["bigint"],
	customerId?:ModelTypes["bigint"],
	customerName?:string,
	dateAccepted?:ModelTypes["timestamptz"],
	displayStatus?:string,
	email?:string,
	partnerId?:ModelTypes["bigint"],
	status?:ModelTypes["bigint"]
};
	/** aggregate stddev on columns */
["vectric_oem_staff_admin_ownership_stddev_fields"]: {
		adminId?:number,
	customerId?:number,
	partnerId?:number,
	status?:number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_staff_admin_ownership_stddev_pop_fields"]: {
		adminId?:number,
	customerId?:number,
	partnerId?:number,
	status?:number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_staff_admin_ownership_stddev_samp_fields"]: {
		adminId?:number,
	customerId?:number,
	partnerId?:number,
	status?:number
};
	/** aggregate sum on columns */
["vectric_oem_staff_admin_ownership_sum_fields"]: {
		adminId?:ModelTypes["bigint"],
	customerId?:ModelTypes["bigint"],
	partnerId?:ModelTypes["bigint"],
	status?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_staff_admin_ownership_var_pop_fields"]: {
		adminId?:number,
	customerId?:number,
	partnerId?:number,
	status?:number
};
	/** aggregate var_samp on columns */
["vectric_oem_staff_admin_ownership_var_samp_fields"]: {
		adminId?:number,
	customerId?:number,
	partnerId?:number,
	status?:number
};
	/** aggregate variance on columns */
["vectric_oem_staff_admin_ownership_variance_fields"]: {
		adminId?:number,
	customerId?:number,
	partnerId?:number,
	status?:number
};
	/** columns and relationships of "vectric.oem_staff_customer" */
["vectric_oem_staff_customer"]: {
		admin:boolean,
	/** An object relationship */
	customer:ModelTypes["vectric_sales_customers"],
	customerId:ModelTypes["bigint"],
	dataRequested:ModelTypes["timestamptz"],
	dateAccepted?:ModelTypes["timestamptz"],
	dateUpdated?:ModelTypes["timestamptz"],
	/** An object relationship */
	inviteStatus:ModelTypes["vectric_oem_invite_status"],
	/** An object relationship */
	partner:ModelTypes["vectric_oem_partners"],
	partnerId:ModelTypes["bigint"],
	staffId:ModelTypes["bigint"],
	status:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_aggregate"]: {
		aggregate?:ModelTypes["vectric_oem_staff_customer_aggregate_fields"],
	nodes:ModelTypes["vectric_oem_staff_customer"][]
};
	/** aggregate fields of "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_aggregate_fields"]: {
		avg?:ModelTypes["vectric_oem_staff_customer_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_oem_staff_customer_max_fields"],
	min?:ModelTypes["vectric_oem_staff_customer_min_fields"],
	stddev?:ModelTypes["vectric_oem_staff_customer_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_oem_staff_customer_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_oem_staff_customer_stddev_samp_fields"],
	sum?:ModelTypes["vectric_oem_staff_customer_sum_fields"],
	var_pop?:ModelTypes["vectric_oem_staff_customer_var_pop_fields"],
	var_samp?:ModelTypes["vectric_oem_staff_customer_var_samp_fields"],
	variance?:ModelTypes["vectric_oem_staff_customer_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_staff_customer_avg_fields"]: {
		customerId?:number,
	partnerId?:number,
	staffId?:number,
	status?:number
};
	/** aggregate max on columns */
["vectric_oem_staff_customer_max_fields"]: {
		customerId?:ModelTypes["bigint"],
	dataRequested?:ModelTypes["timestamptz"],
	dateAccepted?:ModelTypes["timestamptz"],
	dateUpdated?:ModelTypes["timestamptz"],
	partnerId?:ModelTypes["bigint"],
	staffId?:ModelTypes["bigint"],
	status?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_oem_staff_customer_min_fields"]: {
		customerId?:ModelTypes["bigint"],
	dataRequested?:ModelTypes["timestamptz"],
	dateAccepted?:ModelTypes["timestamptz"],
	dateUpdated?:ModelTypes["timestamptz"],
	partnerId?:ModelTypes["bigint"],
	staffId?:ModelTypes["bigint"],
	status?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_oem_staff_customer"][]
};
	/** aggregate stddev on columns */
["vectric_oem_staff_customer_stddev_fields"]: {
		customerId?:number,
	partnerId?:number,
	staffId?:number,
	status?:number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_staff_customer_stddev_pop_fields"]: {
		customerId?:number,
	partnerId?:number,
	staffId?:number,
	status?:number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_staff_customer_stddev_samp_fields"]: {
		customerId?:number,
	partnerId?:number,
	staffId?:number,
	status?:number
};
	/** aggregate sum on columns */
["vectric_oem_staff_customer_sum_fields"]: {
		customerId?:ModelTypes["bigint"],
	partnerId?:ModelTypes["bigint"],
	staffId?:ModelTypes["bigint"],
	status?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_staff_customer_var_pop_fields"]: {
		customerId?:number,
	partnerId?:number,
	staffId?:number,
	status?:number
};
	/** aggregate var_samp on columns */
["vectric_oem_staff_customer_var_samp_fields"]: {
		customerId?:number,
	partnerId?:number,
	staffId?:number,
	status?:number
};
	/** aggregate variance on columns */
["vectric_oem_staff_customer_variance_fields"]: {
		customerId?:number,
	partnerId?:number,
	staffId?:number,
	status?:number
};
	/** columns and relationships of "vectric.organization_audit" */
["vectric_organization_audit"]: {
		auditDate:ModelTypes["timestamp"],
	auditId:number,
	auditPayload?:ModelTypes["jsonb"],
	auditType:string,
	author:string,
	internalChange:boolean,
	ipAddress?:string,
	organizationId:number
};
	/** aggregated selection of "vectric.organization_audit" */
["vectric_organization_audit_aggregate"]: {
		aggregate?:ModelTypes["vectric_organization_audit_aggregate_fields"],
	nodes:ModelTypes["vectric_organization_audit"][]
};
	/** aggregate fields of "vectric.organization_audit" */
["vectric_organization_audit_aggregate_fields"]: {
		avg?:ModelTypes["vectric_organization_audit_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_organization_audit_max_fields"],
	min?:ModelTypes["vectric_organization_audit_min_fields"],
	stddev?:ModelTypes["vectric_organization_audit_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_organization_audit_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_organization_audit_stddev_samp_fields"],
	sum?:ModelTypes["vectric_organization_audit_sum_fields"],
	var_pop?:ModelTypes["vectric_organization_audit_var_pop_fields"],
	var_samp?:ModelTypes["vectric_organization_audit_var_samp_fields"],
	variance?:ModelTypes["vectric_organization_audit_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_organization_audit_avg_fields"]: {
		auditId?:number,
	organizationId?:number
};
	/** aggregate max on columns */
["vectric_organization_audit_max_fields"]: {
		auditDate?:ModelTypes["timestamp"],
	auditId?:number,
	auditType?:string,
	author?:string,
	ipAddress?:string,
	organizationId?:number
};
	/** aggregate min on columns */
["vectric_organization_audit_min_fields"]: {
		auditDate?:ModelTypes["timestamp"],
	auditId?:number,
	auditType?:string,
	author?:string,
	ipAddress?:string,
	organizationId?:number
};
	/** response of any mutation on the table "vectric.organization_audit" */
["vectric_organization_audit_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_organization_audit"][]
};
	/** aggregate stddev on columns */
["vectric_organization_audit_stddev_fields"]: {
		auditId?:number,
	organizationId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_organization_audit_stddev_pop_fields"]: {
		auditId?:number,
	organizationId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_organization_audit_stddev_samp_fields"]: {
		auditId?:number,
	organizationId?:number
};
	/** aggregate sum on columns */
["vectric_organization_audit_sum_fields"]: {
		auditId?:number,
	organizationId?:number
};
	/** aggregate var_pop on columns */
["vectric_organization_audit_var_pop_fields"]: {
		auditId?:number,
	organizationId?:number
};
	/** aggregate var_samp on columns */
["vectric_organization_audit_var_samp_fields"]: {
		auditId?:number,
	organizationId?:number
};
	/** aggregate variance on columns */
["vectric_organization_audit_variance_fields"]: {
		auditId?:number,
	organizationId?:number
};
	/** columns and relationships of "vectric.organization_licence_scope" */
["vectric_organization_licence_scope"]: {
		scope:string
};
	/** aggregated selection of "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_aggregate"]: {
		aggregate?:ModelTypes["vectric_organization_licence_scope_aggregate_fields"],
	nodes:ModelTypes["vectric_organization_licence_scope"][]
};
	/** aggregate fields of "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_aggregate_fields"]: {
		count:number,
	max?:ModelTypes["vectric_organization_licence_scope_max_fields"],
	min?:ModelTypes["vectric_organization_licence_scope_min_fields"]
};
	/** aggregate max on columns */
["vectric_organization_licence_scope_max_fields"]: {
		scope?:string
};
	/** aggregate min on columns */
["vectric_organization_licence_scope_min_fields"]: {
		scope?:string
};
	/** response of any mutation on the table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_organization_licence_scope"][]
};
	/** The view is created for organization admins. Admins should not have access to customer information if the customer has not confirmed their invitation


columns and relationships of "vectric.organization_memberships_admin_access" */
["vectric_organization_memberships_admin_access"]: {
		addedBy?:string,
	amendedBy?:string,
	customerEmail?:string,
	customerId?:ModelTypes["bigint"],
	customerName?:string,
	customerRegisteredUsername?:string,
	dateAdded?:ModelTypes["timestamp"],
	dateAmended?:ModelTypes["timestamp"],
	/** An array relationship */
	invitations:ModelTypes["vectric_membership_invitations"][],
	/** An aggregate relationship */
	invitations_aggregate:ModelTypes["vectric_membership_invitations_aggregate"],
	membershipId?:number,
	membershipRole?:string,
	membershipStatus?:string,
	/** An object relationship */
	organization?:ModelTypes["vectric_organizations"],
	organizationCountryId?:ModelTypes["bigint"],
	organizationCountryName?:string,
	organizationId?:number,
	organizationName?:string,
	organizationType?:string
};
	/** aggregated selection of "vectric.organization_memberships_admin_access" */
["vectric_organization_memberships_admin_access_aggregate"]: {
		aggregate?:ModelTypes["vectric_organization_memberships_admin_access_aggregate_fields"],
	nodes:ModelTypes["vectric_organization_memberships_admin_access"][]
};
	/** aggregate fields of "vectric.organization_memberships_admin_access" */
["vectric_organization_memberships_admin_access_aggregate_fields"]: {
		avg?:ModelTypes["vectric_organization_memberships_admin_access_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_organization_memberships_admin_access_max_fields"],
	min?:ModelTypes["vectric_organization_memberships_admin_access_min_fields"],
	stddev?:ModelTypes["vectric_organization_memberships_admin_access_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_organization_memberships_admin_access_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_organization_memberships_admin_access_stddev_samp_fields"],
	sum?:ModelTypes["vectric_organization_memberships_admin_access_sum_fields"],
	var_pop?:ModelTypes["vectric_organization_memberships_admin_access_var_pop_fields"],
	var_samp?:ModelTypes["vectric_organization_memberships_admin_access_var_samp_fields"],
	variance?:ModelTypes["vectric_organization_memberships_admin_access_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_organization_memberships_admin_access_avg_fields"]: {
		customerId?:number,
	membershipId?:number,
	organizationCountryId?:number,
	organizationId?:number
};
	/** aggregate max on columns */
["vectric_organization_memberships_admin_access_max_fields"]: {
		addedBy?:string,
	amendedBy?:string,
	customerEmail?:string,
	customerId?:ModelTypes["bigint"],
	customerName?:string,
	customerRegisteredUsername?:string,
	dateAdded?:ModelTypes["timestamp"],
	dateAmended?:ModelTypes["timestamp"],
	membershipId?:number,
	membershipRole?:string,
	membershipStatus?:string,
	organizationCountryId?:ModelTypes["bigint"],
	organizationCountryName?:string,
	organizationId?:number,
	organizationName?:string,
	organizationType?:string
};
	/** aggregate min on columns */
["vectric_organization_memberships_admin_access_min_fields"]: {
		addedBy?:string,
	amendedBy?:string,
	customerEmail?:string,
	customerId?:ModelTypes["bigint"],
	customerName?:string,
	customerRegisteredUsername?:string,
	dateAdded?:ModelTypes["timestamp"],
	dateAmended?:ModelTypes["timestamp"],
	membershipId?:number,
	membershipRole?:string,
	membershipStatus?:string,
	organizationCountryId?:ModelTypes["bigint"],
	organizationCountryName?:string,
	organizationId?:number,
	organizationName?:string,
	organizationType?:string
};
	/** aggregate stddev on columns */
["vectric_organization_memberships_admin_access_stddev_fields"]: {
		customerId?:number,
	membershipId?:number,
	organizationCountryId?:number,
	organizationId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_organization_memberships_admin_access_stddev_pop_fields"]: {
		customerId?:number,
	membershipId?:number,
	organizationCountryId?:number,
	organizationId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_organization_memberships_admin_access_stddev_samp_fields"]: {
		customerId?:number,
	membershipId?:number,
	organizationCountryId?:number,
	organizationId?:number
};
	/** aggregate sum on columns */
["vectric_organization_memberships_admin_access_sum_fields"]: {
		customerId?:ModelTypes["bigint"],
	membershipId?:number,
	organizationCountryId?:ModelTypes["bigint"],
	organizationId?:number
};
	/** aggregate var_pop on columns */
["vectric_organization_memberships_admin_access_var_pop_fields"]: {
		customerId?:number,
	membershipId?:number,
	organizationCountryId?:number,
	organizationId?:number
};
	/** aggregate var_samp on columns */
["vectric_organization_memberships_admin_access_var_samp_fields"]: {
		customerId?:number,
	membershipId?:number,
	organizationCountryId?:number,
	organizationId?:number
};
	/** aggregate variance on columns */
["vectric_organization_memberships_admin_access_variance_fields"]: {
		customerId?:number,
	membershipId?:number,
	organizationCountryId?:number,
	organizationId?:number
};
	/** columns and relationships of "vectric.organization_order_items" */
["vectric_organization_order_items"]: {
		/** An object relationship */
	order:ModelTypes["vectric_organization_orders"],
	orderId:string,
	orderItemId:number,
	/** An array relationship */
	ownedItems:ModelTypes["vectric_owned_items"][],
	/** An aggregate relationship */
	ownedItems_aggregate:ModelTypes["vectric_owned_items_aggregate"],
	/** An object relationship */
	saleableProduct:ModelTypes["vectric_saleable_products"],
	saleableProductId:number,
	subscription?:boolean,
	/** An object relationship */
	subscriptionContract?:ModelTypes["vectric_subscription_contracts"],
	/** An array relationship */
	subscriptionEvents:ModelTypes["vectric_subscription_events"][],
	/** An aggregate relationship */
	subscriptionEvents_aggregate:ModelTypes["vectric_subscription_events_aggregate"]
};
	/** aggregated selection of "vectric.organization_order_items" */
["vectric_organization_order_items_aggregate"]: {
		aggregate?:ModelTypes["vectric_organization_order_items_aggregate_fields"],
	nodes:ModelTypes["vectric_organization_order_items"][]
};
	/** aggregate fields of "vectric.organization_order_items" */
["vectric_organization_order_items_aggregate_fields"]: {
		avg?:ModelTypes["vectric_organization_order_items_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_organization_order_items_max_fields"],
	min?:ModelTypes["vectric_organization_order_items_min_fields"],
	stddev?:ModelTypes["vectric_organization_order_items_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_organization_order_items_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_organization_order_items_stddev_samp_fields"],
	sum?:ModelTypes["vectric_organization_order_items_sum_fields"],
	var_pop?:ModelTypes["vectric_organization_order_items_var_pop_fields"],
	var_samp?:ModelTypes["vectric_organization_order_items_var_samp_fields"],
	variance?:ModelTypes["vectric_organization_order_items_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_organization_order_items_avg_fields"]: {
		orderItemId?:number,
	saleableProductId?:number
};
	/** aggregate max on columns */
["vectric_organization_order_items_max_fields"]: {
		orderId?:string,
	orderItemId?:number,
	saleableProductId?:number
};
	/** aggregate min on columns */
["vectric_organization_order_items_min_fields"]: {
		orderId?:string,
	orderItemId?:number,
	saleableProductId?:number
};
	/** response of any mutation on the table "vectric.organization_order_items" */
["vectric_organization_order_items_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_organization_order_items"][]
};
	/** aggregate stddev on columns */
["vectric_organization_order_items_stddev_fields"]: {
		orderItemId?:number,
	saleableProductId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_organization_order_items_stddev_pop_fields"]: {
		orderItemId?:number,
	saleableProductId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_organization_order_items_stddev_samp_fields"]: {
		orderItemId?:number,
	saleableProductId?:number
};
	/** aggregate sum on columns */
["vectric_organization_order_items_sum_fields"]: {
		orderItemId?:number,
	saleableProductId?:number
};
	/** aggregate var_pop on columns */
["vectric_organization_order_items_var_pop_fields"]: {
		orderItemId?:number,
	saleableProductId?:number
};
	/** aggregate var_samp on columns */
["vectric_organization_order_items_var_samp_fields"]: {
		orderItemId?:number,
	saleableProductId?:number
};
	/** aggregate variance on columns */
["vectric_organization_order_items_variance_fields"]: {
		orderItemId?:number,
	saleableProductId?:number
};
	/** columns and relationships of "vectric.organization_orders" */
["vectric_organization_orders"]: {
		amendedBy?:string,
	createdBy:string,
	dateAmended?:ModelTypes["timestamp"],
	dateCreated:ModelTypes["timestamp"],
	externalReference?:string,
	/** An array relationship */
	items:ModelTypes["vectric_organization_order_items"][],
	/** An aggregate relationship */
	items_aggregate:ModelTypes["vectric_organization_order_items_aggregate"],
	notes?:string,
	orderDate:ModelTypes["timestamp"],
	orderId:string,
	/** An object relationship */
	organization?:ModelTypes["vectric_organizations"],
	organizationId?:number,
	/** An object relationship */
	purchaser:ModelTypes["vectric_sales_customers"],
	purchaserId:number
};
	/** aggregated selection of "vectric.organization_orders" */
["vectric_organization_orders_aggregate"]: {
		aggregate?:ModelTypes["vectric_organization_orders_aggregate_fields"],
	nodes:ModelTypes["vectric_organization_orders"][]
};
	/** aggregate fields of "vectric.organization_orders" */
["vectric_organization_orders_aggregate_fields"]: {
		avg?:ModelTypes["vectric_organization_orders_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_organization_orders_max_fields"],
	min?:ModelTypes["vectric_organization_orders_min_fields"],
	stddev?:ModelTypes["vectric_organization_orders_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_organization_orders_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_organization_orders_stddev_samp_fields"],
	sum?:ModelTypes["vectric_organization_orders_sum_fields"],
	var_pop?:ModelTypes["vectric_organization_orders_var_pop_fields"],
	var_samp?:ModelTypes["vectric_organization_orders_var_samp_fields"],
	variance?:ModelTypes["vectric_organization_orders_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_organization_orders_avg_fields"]: {
		organizationId?:number,
	purchaserId?:number
};
	/** aggregate max on columns */
["vectric_organization_orders_max_fields"]: {
		amendedBy?:string,
	createdBy?:string,
	dateAmended?:ModelTypes["timestamp"],
	dateCreated?:ModelTypes["timestamp"],
	externalReference?:string,
	notes?:string,
	orderDate?:ModelTypes["timestamp"],
	orderId?:string,
	organizationId?:number,
	purchaserId?:number
};
	/** aggregate min on columns */
["vectric_organization_orders_min_fields"]: {
		amendedBy?:string,
	createdBy?:string,
	dateAmended?:ModelTypes["timestamp"],
	dateCreated?:ModelTypes["timestamp"],
	externalReference?:string,
	notes?:string,
	orderDate?:ModelTypes["timestamp"],
	orderId?:string,
	organizationId?:number,
	purchaserId?:number
};
	/** response of any mutation on the table "vectric.organization_orders" */
["vectric_organization_orders_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_organization_orders"][]
};
	/** aggregate stddev on columns */
["vectric_organization_orders_stddev_fields"]: {
		organizationId?:number,
	purchaserId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_organization_orders_stddev_pop_fields"]: {
		organizationId?:number,
	purchaserId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_organization_orders_stddev_samp_fields"]: {
		organizationId?:number,
	purchaserId?:number
};
	/** aggregate sum on columns */
["vectric_organization_orders_sum_fields"]: {
		organizationId?:number,
	purchaserId?:number
};
	/** aggregate var_pop on columns */
["vectric_organization_orders_var_pop_fields"]: {
		organizationId?:number,
	purchaserId?:number
};
	/** aggregate var_samp on columns */
["vectric_organization_orders_var_samp_fields"]: {
		organizationId?:number,
	purchaserId?:number
};
	/** aggregate variance on columns */
["vectric_organization_orders_variance_fields"]: {
		organizationId?:number,
	purchaserId?:number
};
	/** columns and relationships of "vectric.organization_types" */
["vectric_organization_types"]: {
		type:string
};
	/** aggregated selection of "vectric.organization_types" */
["vectric_organization_types_aggregate"]: {
		aggregate?:ModelTypes["vectric_organization_types_aggregate_fields"],
	nodes:ModelTypes["vectric_organization_types"][]
};
	/** aggregate fields of "vectric.organization_types" */
["vectric_organization_types_aggregate_fields"]: {
		count:number,
	max?:ModelTypes["vectric_organization_types_max_fields"],
	min?:ModelTypes["vectric_organization_types_min_fields"]
};
	/** aggregate max on columns */
["vectric_organization_types_max_fields"]: {
		type?:string
};
	/** aggregate min on columns */
["vectric_organization_types_min_fields"]: {
		type?:string
};
	/** response of any mutation on the table "vectric.organization_types" */
["vectric_organization_types_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_organization_types"][]
};
	/** columns and relationships of "vectric.organizations" */
["vectric_organizations"]: {
		active:boolean,
	/** An array relationship */
	activeMembers:ModelTypes["vectric_active_memberships"][],
	/** An aggregate relationship */
	activeMembers_aggregate:ModelTypes["vectric_active_memberships_aggregate"],
	amendedBy?:string,
	/** An array relationship */
	auditLogs:ModelTypes["vectric_organization_audit"][],
	/** An aggregate relationship */
	auditLogs_aggregate:ModelTypes["vectric_organization_audit_aggregate"],
	/** An object relationship */
	country?:ModelTypes["vectric_countries"],
	countryId?:ModelTypes["bigint"],
	createdBy:string,
	dateAmended?:ModelTypes["timestamp"],
	dateCreated:ModelTypes["timestamp"],
	internalNotes?:string,
	/** An array relationship */
	invitations:ModelTypes["vectric_membership_invitations"][],
	/** An aggregate relationship */
	invitations_aggregate:ModelTypes["vectric_membership_invitations_aggregate"],
	/** An array relationship */
	memberships:ModelTypes["vectric_memberships"][],
	/** An aggregate relationship */
	memberships_aggregate:ModelTypes["vectric_memberships_aggregate"],
	organizationId:number,
	organizationName:string,
	/** An object relationship */
	organizationType:ModelTypes["vectric_organization_types"],
	organizationUUID:ModelTypes["uuid"],
	type:ModelTypes["vectric_organization_types_enum"]
};
	/** aggregated selection of "vectric.organizations" */
["vectric_organizations_aggregate"]: {
		aggregate?:ModelTypes["vectric_organizations_aggregate_fields"],
	nodes:ModelTypes["vectric_organizations"][]
};
	/** aggregate fields of "vectric.organizations" */
["vectric_organizations_aggregate_fields"]: {
		avg?:ModelTypes["vectric_organizations_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_organizations_max_fields"],
	min?:ModelTypes["vectric_organizations_min_fields"],
	stddev?:ModelTypes["vectric_organizations_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_organizations_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_organizations_stddev_samp_fields"],
	sum?:ModelTypes["vectric_organizations_sum_fields"],
	var_pop?:ModelTypes["vectric_organizations_var_pop_fields"],
	var_samp?:ModelTypes["vectric_organizations_var_samp_fields"],
	variance?:ModelTypes["vectric_organizations_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_organizations_avg_fields"]: {
		countryId?:number,
	organizationId?:number
};
	/** aggregate max on columns */
["vectric_organizations_max_fields"]: {
		amendedBy?:string,
	countryId?:ModelTypes["bigint"],
	createdBy?:string,
	dateAmended?:ModelTypes["timestamp"],
	dateCreated?:ModelTypes["timestamp"],
	internalNotes?:string,
	organizationId?:number,
	organizationName?:string,
	organizationUUID?:ModelTypes["uuid"]
};
	/** aggregate min on columns */
["vectric_organizations_min_fields"]: {
		amendedBy?:string,
	countryId?:ModelTypes["bigint"],
	createdBy?:string,
	dateAmended?:ModelTypes["timestamp"],
	dateCreated?:ModelTypes["timestamp"],
	internalNotes?:string,
	organizationId?:number,
	organizationName?:string,
	organizationUUID?:ModelTypes["uuid"]
};
	/** response of any mutation on the table "vectric.organizations" */
["vectric_organizations_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_organizations"][]
};
	/** aggregate stddev on columns */
["vectric_organizations_stddev_fields"]: {
		countryId?:number,
	organizationId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_organizations_stddev_pop_fields"]: {
		countryId?:number,
	organizationId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_organizations_stddev_samp_fields"]: {
		countryId?:number,
	organizationId?:number
};
	/** aggregate sum on columns */
["vectric_organizations_sum_fields"]: {
		countryId?:ModelTypes["bigint"],
	organizationId?:number
};
	/** aggregate var_pop on columns */
["vectric_organizations_var_pop_fields"]: {
		countryId?:number,
	organizationId?:number
};
	/** aggregate var_samp on columns */
["vectric_organizations_var_samp_fields"]: {
		countryId?:number,
	organizationId?:number
};
	/** aggregate variance on columns */
["vectric_organizations_variance_fields"]: {
		countryId?:number,
	organizationId?:number
};
	/** columns and relationships of "vectric.owned_item_assignments" */
["vectric_owned_item_assignments"]: {
		assignedBy:string,
	assignedTo:ModelTypes["bigint"],
	/** An object relationship */
	assignedToMember:ModelTypes["vectric_memberships"],
	/** An object relationship */
	assignedToMemberAdminAccess?:ModelTypes["vectric_organization_memberships_admin_access"],
	assignment_id:number,
	dateAssigned:ModelTypes["timestamp"],
	ownedItemId:number
};
	/** aggregated selection of "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_aggregate"]: {
		aggregate?:ModelTypes["vectric_owned_item_assignments_aggregate_fields"],
	nodes:ModelTypes["vectric_owned_item_assignments"][]
};
	/** aggregate fields of "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_aggregate_fields"]: {
		avg?:ModelTypes["vectric_owned_item_assignments_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_owned_item_assignments_max_fields"],
	min?:ModelTypes["vectric_owned_item_assignments_min_fields"],
	stddev?:ModelTypes["vectric_owned_item_assignments_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_owned_item_assignments_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_owned_item_assignments_stddev_samp_fields"],
	sum?:ModelTypes["vectric_owned_item_assignments_sum_fields"],
	var_pop?:ModelTypes["vectric_owned_item_assignments_var_pop_fields"],
	var_samp?:ModelTypes["vectric_owned_item_assignments_var_samp_fields"],
	variance?:ModelTypes["vectric_owned_item_assignments_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_owned_item_assignments_avg_fields"]: {
		assignedTo?:number,
	assignment_id?:number,
	ownedItemId?:number
};
	/** aggregate max on columns */
["vectric_owned_item_assignments_max_fields"]: {
		assignedBy?:string,
	assignedTo?:ModelTypes["bigint"],
	assignment_id?:number,
	dateAssigned?:ModelTypes["timestamp"],
	ownedItemId?:number
};
	/** aggregate min on columns */
["vectric_owned_item_assignments_min_fields"]: {
		assignedBy?:string,
	assignedTo?:ModelTypes["bigint"],
	assignment_id?:number,
	dateAssigned?:ModelTypes["timestamp"],
	ownedItemId?:number
};
	/** response of any mutation on the table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_owned_item_assignments"][]
};
	/** aggregate stddev on columns */
["vectric_owned_item_assignments_stddev_fields"]: {
		assignedTo?:number,
	assignment_id?:number,
	ownedItemId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_owned_item_assignments_stddev_pop_fields"]: {
		assignedTo?:number,
	assignment_id?:number,
	ownedItemId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_owned_item_assignments_stddev_samp_fields"]: {
		assignedTo?:number,
	assignment_id?:number,
	ownedItemId?:number
};
	/** aggregate sum on columns */
["vectric_owned_item_assignments_sum_fields"]: {
		assignedTo?:ModelTypes["bigint"],
	assignment_id?:number,
	ownedItemId?:number
};
	/** aggregate var_pop on columns */
["vectric_owned_item_assignments_var_pop_fields"]: {
		assignedTo?:number,
	assignment_id?:number,
	ownedItemId?:number
};
	/** aggregate var_samp on columns */
["vectric_owned_item_assignments_var_samp_fields"]: {
		assignedTo?:number,
	assignment_id?:number,
	ownedItemId?:number
};
	/** aggregate variance on columns */
["vectric_owned_item_assignments_variance_fields"]: {
		assignedTo?:number,
	assignment_id?:number,
	ownedItemId?:number
};
	/** columns and relationships of "vectric.owned_items" */
["vectric_owned_items"]: {
		amendedBy?:string,
	/** An object relationship */
	assignment?:ModelTypes["vectric_owned_item_assignments"],
	createdBy:string,
	/** An object relationship */
	customer?:ModelTypes["vectric_sales_customers"],
	customerId?:ModelTypes["bigint"],
	dateAmended?:ModelTypes["timestamp"],
	dateCreated:ModelTypes["timestamp"],
	/** An array relationship */
	entitlements:ModelTypes["vectric_entitlements"][],
	/** An aggregate relationship */
	entitlements_aggregate:ModelTypes["vectric_entitlements_aggregate"],
	/** An object relationship */
	licenceScope:ModelTypes["vectric_organization_licence_scope"],
	notes?:string,
	/** An object relationship */
	orderItem?:ModelTypes["vectric_organization_order_items"],
	orderItemId?:number,
	/** An object relationship */
	organization?:ModelTypes["vectric_organizations"],
	organizationId?:number,
	ownedItemId:number,
	/** An object relationship */
	ownedProduct:ModelTypes["vectric_owned_products"],
	ownedProductId:number,
	record_date:ModelTypes["timestamp"],
	scope:ModelTypes["vectric_organization_licence_scope_enum"],
	status:number,
	subscription?:boolean
};
	/** aggregated selection of "vectric.owned_items" */
["vectric_owned_items_aggregate"]: {
		aggregate?:ModelTypes["vectric_owned_items_aggregate_fields"],
	nodes:ModelTypes["vectric_owned_items"][]
};
	/** aggregate fields of "vectric.owned_items" */
["vectric_owned_items_aggregate_fields"]: {
		avg?:ModelTypes["vectric_owned_items_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_owned_items_max_fields"],
	min?:ModelTypes["vectric_owned_items_min_fields"],
	stddev?:ModelTypes["vectric_owned_items_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_owned_items_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_owned_items_stddev_samp_fields"],
	sum?:ModelTypes["vectric_owned_items_sum_fields"],
	var_pop?:ModelTypes["vectric_owned_items_var_pop_fields"],
	var_samp?:ModelTypes["vectric_owned_items_var_samp_fields"],
	variance?:ModelTypes["vectric_owned_items_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_owned_items_avg_fields"]: {
		customerId?:number,
	orderItemId?:number,
	organizationId?:number,
	ownedItemId?:number,
	ownedProductId?:number,
	status?:number
};
	/** aggregate max on columns */
["vectric_owned_items_max_fields"]: {
		amendedBy?:string,
	createdBy?:string,
	customerId?:ModelTypes["bigint"],
	dateAmended?:ModelTypes["timestamp"],
	dateCreated?:ModelTypes["timestamp"],
	notes?:string,
	orderItemId?:number,
	organizationId?:number,
	ownedItemId?:number,
	ownedProductId?:number,
	record_date?:ModelTypes["timestamp"],
	status?:number
};
	/** aggregate min on columns */
["vectric_owned_items_min_fields"]: {
		amendedBy?:string,
	createdBy?:string,
	customerId?:ModelTypes["bigint"],
	dateAmended?:ModelTypes["timestamp"],
	dateCreated?:ModelTypes["timestamp"],
	notes?:string,
	orderItemId?:number,
	organizationId?:number,
	ownedItemId?:number,
	ownedProductId?:number,
	record_date?:ModelTypes["timestamp"],
	status?:number
};
	/** response of any mutation on the table "vectric.owned_items" */
["vectric_owned_items_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_owned_items"][]
};
	/** aggregate stddev on columns */
["vectric_owned_items_stddev_fields"]: {
		customerId?:number,
	orderItemId?:number,
	organizationId?:number,
	ownedItemId?:number,
	ownedProductId?:number,
	status?:number
};
	/** aggregate stddev_pop on columns */
["vectric_owned_items_stddev_pop_fields"]: {
		customerId?:number,
	orderItemId?:number,
	organizationId?:number,
	ownedItemId?:number,
	ownedProductId?:number,
	status?:number
};
	/** aggregate stddev_samp on columns */
["vectric_owned_items_stddev_samp_fields"]: {
		customerId?:number,
	orderItemId?:number,
	organizationId?:number,
	ownedItemId?:number,
	ownedProductId?:number,
	status?:number
};
	/** aggregate sum on columns */
["vectric_owned_items_sum_fields"]: {
		customerId?:ModelTypes["bigint"],
	orderItemId?:number,
	organizationId?:number,
	ownedItemId?:number,
	ownedProductId?:number,
	status?:number
};
	/** aggregate var_pop on columns */
["vectric_owned_items_var_pop_fields"]: {
		customerId?:number,
	orderItemId?:number,
	organizationId?:number,
	ownedItemId?:number,
	ownedProductId?:number,
	status?:number
};
	/** aggregate var_samp on columns */
["vectric_owned_items_var_samp_fields"]: {
		customerId?:number,
	orderItemId?:number,
	organizationId?:number,
	ownedItemId?:number,
	ownedProductId?:number,
	status?:number
};
	/** aggregate variance on columns */
["vectric_owned_items_variance_fields"]: {
		customerId?:number,
	orderItemId?:number,
	organizationId?:number,
	ownedItemId?:number,
	ownedProductId?:number,
	status?:number
};
	/** columns and relationships of "vectric.owned_products" */
["vectric_owned_products"]: {
		enabled?:boolean,
	enhancement?:boolean,
	productId:number,
	productName:string,
	/** An object relationship */
	productType:ModelTypes["vectric_products_producttype"],
	productTypeId:number,
	subscription?:boolean
};
	/** aggregated selection of "vectric.owned_products" */
["vectric_owned_products_aggregate"]: {
		aggregate?:ModelTypes["vectric_owned_products_aggregate_fields"],
	nodes:ModelTypes["vectric_owned_products"][]
};
	/** aggregate fields of "vectric.owned_products" */
["vectric_owned_products_aggregate_fields"]: {
		avg?:ModelTypes["vectric_owned_products_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_owned_products_max_fields"],
	min?:ModelTypes["vectric_owned_products_min_fields"],
	stddev?:ModelTypes["vectric_owned_products_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_owned_products_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_owned_products_stddev_samp_fields"],
	sum?:ModelTypes["vectric_owned_products_sum_fields"],
	var_pop?:ModelTypes["vectric_owned_products_var_pop_fields"],
	var_samp?:ModelTypes["vectric_owned_products_var_samp_fields"],
	variance?:ModelTypes["vectric_owned_products_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_owned_products_avg_fields"]: {
		productId?:number,
	productTypeId?:number
};
	/** aggregate max on columns */
["vectric_owned_products_max_fields"]: {
		productId?:number,
	productName?:string,
	productTypeId?:number
};
	/** aggregate min on columns */
["vectric_owned_products_min_fields"]: {
		productId?:number,
	productName?:string,
	productTypeId?:number
};
	/** response of any mutation on the table "vectric.owned_products" */
["vectric_owned_products_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_owned_products"][]
};
	/** aggregate stddev on columns */
["vectric_owned_products_stddev_fields"]: {
		productId?:number,
	productTypeId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_owned_products_stddev_pop_fields"]: {
		productId?:number,
	productTypeId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_owned_products_stddev_samp_fields"]: {
		productId?:number,
	productTypeId?:number
};
	/** aggregate sum on columns */
["vectric_owned_products_sum_fields"]: {
		productId?:number,
	productTypeId?:number
};
	/** aggregate var_pop on columns */
["vectric_owned_products_var_pop_fields"]: {
		productId?:number,
	productTypeId?:number
};
	/** aggregate var_samp on columns */
["vectric_owned_products_var_samp_fields"]: {
		productId?:number,
	productTypeId?:number
};
	/** aggregate variance on columns */
["vectric_owned_products_variance_fields"]: {
		productId?:number,
	productTypeId?:number
};
	/** columns and relationships of "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links"]: {
		clipartChildId:ModelTypes["bigint"],
	clipartCollectionLinkId:ModelTypes["bigint"],
	clipartParentId:ModelTypes["bigint"],
	/** An object relationship */
	collection:ModelTypes["vectric_products_products"],
	/** An object relationship */
	project:ModelTypes["vectric_products_products"]
};
	/** aggregated selection of "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_aggregate"]: {
		aggregate?:ModelTypes["vectric_products_clipartcollection_links_aggregate_fields"],
	nodes:ModelTypes["vectric_products_clipartcollection_links"][]
};
	/** aggregate fields of "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_aggregate_fields"]: {
		avg?:ModelTypes["vectric_products_clipartcollection_links_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_products_clipartcollection_links_max_fields"],
	min?:ModelTypes["vectric_products_clipartcollection_links_min_fields"],
	stddev?:ModelTypes["vectric_products_clipartcollection_links_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_products_clipartcollection_links_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_products_clipartcollection_links_stddev_samp_fields"],
	sum?:ModelTypes["vectric_products_clipartcollection_links_sum_fields"],
	var_pop?:ModelTypes["vectric_products_clipartcollection_links_var_pop_fields"],
	var_samp?:ModelTypes["vectric_products_clipartcollection_links_var_samp_fields"],
	variance?:ModelTypes["vectric_products_clipartcollection_links_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_products_clipartcollection_links_avg_fields"]: {
		clipartChildId?:number,
	clipartCollectionLinkId?:number,
	clipartParentId?:number
};
	/** aggregate max on columns */
["vectric_products_clipartcollection_links_max_fields"]: {
		clipartChildId?:ModelTypes["bigint"],
	clipartCollectionLinkId?:ModelTypes["bigint"],
	clipartParentId?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_products_clipartcollection_links_min_fields"]: {
		clipartChildId?:ModelTypes["bigint"],
	clipartCollectionLinkId?:ModelTypes["bigint"],
	clipartParentId?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_products_clipartcollection_links"][]
};
	/** aggregate stddev on columns */
["vectric_products_clipartcollection_links_stddev_fields"]: {
		clipartChildId?:number,
	clipartCollectionLinkId?:number,
	clipartParentId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_products_clipartcollection_links_stddev_pop_fields"]: {
		clipartChildId?:number,
	clipartCollectionLinkId?:number,
	clipartParentId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_products_clipartcollection_links_stddev_samp_fields"]: {
		clipartChildId?:number,
	clipartCollectionLinkId?:number,
	clipartParentId?:number
};
	/** aggregate sum on columns */
["vectric_products_clipartcollection_links_sum_fields"]: {
		clipartChildId?:ModelTypes["bigint"],
	clipartCollectionLinkId?:ModelTypes["bigint"],
	clipartParentId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_products_clipartcollection_links_var_pop_fields"]: {
		clipartChildId?:number,
	clipartCollectionLinkId?:number,
	clipartParentId?:number
};
	/** aggregate var_samp on columns */
["vectric_products_clipartcollection_links_var_samp_fields"]: {
		clipartChildId?:number,
	clipartCollectionLinkId?:number,
	clipartParentId?:number
};
	/** aggregate variance on columns */
["vectric_products_clipartcollection_links_variance_fields"]: {
		clipartChildId?:number,
	clipartCollectionLinkId?:number,
	clipartParentId?:number
};
	/** columns and relationships of "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility"]: {
		eligibilityId:ModelTypes["bigint"],
	fastspringurl:string,
	/** An object relationship */
	fromProduct:ModelTypes["vectric_products_products"],
	fromproduct:ModelTypes["bigint"],
	moreinfolink?:string,
	price:ModelTypes["numeric"],
	summary?:string,
	/** An object relationship */
	toProduct:ModelTypes["vectric_products_products"],
	toproduct:ModelTypes["bigint"],
	visibletocustomers:boolean,
	visibletostaff:boolean
};
	/** aggregated selection of "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_aggregate"]: {
		aggregate?:ModelTypes["vectric_products_enhancement_eligibility_aggregate_fields"],
	nodes:ModelTypes["vectric_products_enhancement_eligibility"][]
};
	/** aggregate fields of "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_aggregate_fields"]: {
		avg?:ModelTypes["vectric_products_enhancement_eligibility_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_products_enhancement_eligibility_max_fields"],
	min?:ModelTypes["vectric_products_enhancement_eligibility_min_fields"],
	stddev?:ModelTypes["vectric_products_enhancement_eligibility_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_products_enhancement_eligibility_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_products_enhancement_eligibility_stddev_samp_fields"],
	sum?:ModelTypes["vectric_products_enhancement_eligibility_sum_fields"],
	var_pop?:ModelTypes["vectric_products_enhancement_eligibility_var_pop_fields"],
	var_samp?:ModelTypes["vectric_products_enhancement_eligibility_var_samp_fields"],
	variance?:ModelTypes["vectric_products_enhancement_eligibility_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_products_enhancement_eligibility_avg_fields"]: {
		eligibilityId?:number,
	fromproduct?:number,
	price?:number,
	toproduct?:number
};
	/** aggregate max on columns */
["vectric_products_enhancement_eligibility_max_fields"]: {
		eligibilityId?:ModelTypes["bigint"],
	fastspringurl?:string,
	fromproduct?:ModelTypes["bigint"],
	moreinfolink?:string,
	price?:ModelTypes["numeric"],
	summary?:string,
	toproduct?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_products_enhancement_eligibility_min_fields"]: {
		eligibilityId?:ModelTypes["bigint"],
	fastspringurl?:string,
	fromproduct?:ModelTypes["bigint"],
	moreinfolink?:string,
	price?:ModelTypes["numeric"],
	summary?:string,
	toproduct?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_products_enhancement_eligibility"][]
};
	/** aggregate stddev on columns */
["vectric_products_enhancement_eligibility_stddev_fields"]: {
		eligibilityId?:number,
	fromproduct?:number,
	price?:number,
	toproduct?:number
};
	/** aggregate stddev_pop on columns */
["vectric_products_enhancement_eligibility_stddev_pop_fields"]: {
		eligibilityId?:number,
	fromproduct?:number,
	price?:number,
	toproduct?:number
};
	/** aggregate stddev_samp on columns */
["vectric_products_enhancement_eligibility_stddev_samp_fields"]: {
		eligibilityId?:number,
	fromproduct?:number,
	price?:number,
	toproduct?:number
};
	/** aggregate sum on columns */
["vectric_products_enhancement_eligibility_sum_fields"]: {
		eligibilityId?:ModelTypes["bigint"],
	fromproduct?:ModelTypes["bigint"],
	price?:ModelTypes["numeric"],
	toproduct?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_products_enhancement_eligibility_var_pop_fields"]: {
		eligibilityId?:number,
	fromproduct?:number,
	price?:number,
	toproduct?:number
};
	/** aggregate var_samp on columns */
["vectric_products_enhancement_eligibility_var_samp_fields"]: {
		eligibilityId?:number,
	fromproduct?:number,
	price?:number,
	toproduct?:number
};
	/** aggregate variance on columns */
["vectric_products_enhancement_eligibility_variance_fields"]: {
		eligibilityId?:number,
	fromproduct?:number,
	price?:number,
	toproduct?:number
};
	/** columns and relationships of "vectric.products_freeclipart" */
["vectric_products_freeclipart"]: {
		/** An object relationship */
	freeClipart?:ModelTypes["vectric_freeclipart"],
	freeClipartId?:ModelTypes["bigint"],
	/** An object relationship */
	product?:ModelTypes["vectric_products_products"],
	productFreeClipartId:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.products_freeclipart" */
["vectric_products_freeclipart_aggregate"]: {
		aggregate?:ModelTypes["vectric_products_freeclipart_aggregate_fields"],
	nodes:ModelTypes["vectric_products_freeclipart"][]
};
	/** aggregate fields of "vectric.products_freeclipart" */
["vectric_products_freeclipart_aggregate_fields"]: {
		avg?:ModelTypes["vectric_products_freeclipart_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_products_freeclipart_max_fields"],
	min?:ModelTypes["vectric_products_freeclipart_min_fields"],
	stddev?:ModelTypes["vectric_products_freeclipart_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_products_freeclipart_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_products_freeclipart_stddev_samp_fields"],
	sum?:ModelTypes["vectric_products_freeclipart_sum_fields"],
	var_pop?:ModelTypes["vectric_products_freeclipart_var_pop_fields"],
	var_samp?:ModelTypes["vectric_products_freeclipart_var_samp_fields"],
	variance?:ModelTypes["vectric_products_freeclipart_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_products_freeclipart_avg_fields"]: {
		freeClipartId?:number,
	productFreeClipartId?:number,
	productId?:number
};
	/** aggregate max on columns */
["vectric_products_freeclipart_max_fields"]: {
		freeClipartId?:ModelTypes["bigint"],
	productFreeClipartId?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_products_freeclipart_min_fields"]: {
		freeClipartId?:ModelTypes["bigint"],
	productFreeClipartId?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.products_freeclipart" */
["vectric_products_freeclipart_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_products_freeclipart"][]
};
	/** aggregate stddev on columns */
["vectric_products_freeclipart_stddev_fields"]: {
		freeClipartId?:number,
	productFreeClipartId?:number,
	productId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_products_freeclipart_stddev_pop_fields"]: {
		freeClipartId?:number,
	productFreeClipartId?:number,
	productId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_products_freeclipart_stddev_samp_fields"]: {
		freeClipartId?:number,
	productFreeClipartId?:number,
	productId?:number
};
	/** aggregate sum on columns */
["vectric_products_freeclipart_sum_fields"]: {
		freeClipartId?:ModelTypes["bigint"],
	productFreeClipartId?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_products_freeclipart_var_pop_fields"]: {
		freeClipartId?:number,
	productFreeClipartId?:number,
	productId?:number
};
	/** aggregate var_samp on columns */
["vectric_products_freeclipart_var_samp_fields"]: {
		freeClipartId?:number,
	productFreeClipartId?:number,
	productId?:number
};
	/** aggregate variance on columns */
["vectric_products_freeclipart_variance_fields"]: {
		freeClipartId?:number,
	productFreeClipartId?:number,
	productId?:number
};
	/** columns and relationships of "vectric.products_fulfilments" */
["vectric_products_fulfilments"]: {
		description?:string,
	downloadSize?:string,
	fulfilmentId:ModelTypes["bigint"],
	fulfilmentName:string,
	fulfilmenttypeid?:ModelTypes["bigint"],
	location:string,
	objectName:string,
	/** An object relationship */
	type?:ModelTypes["vectric_products_fulfilmenttypes"]
};
	/** aggregated selection of "vectric.products_fulfilments" */
["vectric_products_fulfilments_aggregate"]: {
		aggregate?:ModelTypes["vectric_products_fulfilments_aggregate_fields"],
	nodes:ModelTypes["vectric_products_fulfilments"][]
};
	/** aggregate fields of "vectric.products_fulfilments" */
["vectric_products_fulfilments_aggregate_fields"]: {
		avg?:ModelTypes["vectric_products_fulfilments_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_products_fulfilments_max_fields"],
	min?:ModelTypes["vectric_products_fulfilments_min_fields"],
	stddev?:ModelTypes["vectric_products_fulfilments_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_products_fulfilments_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_products_fulfilments_stddev_samp_fields"],
	sum?:ModelTypes["vectric_products_fulfilments_sum_fields"],
	var_pop?:ModelTypes["vectric_products_fulfilments_var_pop_fields"],
	var_samp?:ModelTypes["vectric_products_fulfilments_var_samp_fields"],
	variance?:ModelTypes["vectric_products_fulfilments_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_products_fulfilments_avg_fields"]: {
		fulfilmentId?:number,
	fulfilmenttypeid?:number
};
	/** aggregate max on columns */
["vectric_products_fulfilments_max_fields"]: {
		description?:string,
	downloadSize?:string,
	fulfilmentId?:ModelTypes["bigint"],
	fulfilmentName?:string,
	fulfilmenttypeid?:ModelTypes["bigint"],
	location?:string,
	objectName?:string
};
	/** aggregate min on columns */
["vectric_products_fulfilments_min_fields"]: {
		description?:string,
	downloadSize?:string,
	fulfilmentId?:ModelTypes["bigint"],
	fulfilmentName?:string,
	fulfilmenttypeid?:ModelTypes["bigint"],
	location?:string,
	objectName?:string
};
	/** response of any mutation on the table "vectric.products_fulfilments" */
["vectric_products_fulfilments_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_products_fulfilments"][]
};
	/** aggregate stddev on columns */
["vectric_products_fulfilments_stddev_fields"]: {
		fulfilmentId?:number,
	fulfilmenttypeid?:number
};
	/** aggregate stddev_pop on columns */
["vectric_products_fulfilments_stddev_pop_fields"]: {
		fulfilmentId?:number,
	fulfilmenttypeid?:number
};
	/** aggregate stddev_samp on columns */
["vectric_products_fulfilments_stddev_samp_fields"]: {
		fulfilmentId?:number,
	fulfilmenttypeid?:number
};
	/** aggregate sum on columns */
["vectric_products_fulfilments_sum_fields"]: {
		fulfilmentId?:ModelTypes["bigint"],
	fulfilmenttypeid?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_products_fulfilments_var_pop_fields"]: {
		fulfilmentId?:number,
	fulfilmenttypeid?:number
};
	/** aggregate var_samp on columns */
["vectric_products_fulfilments_var_samp_fields"]: {
		fulfilmentId?:number,
	fulfilmenttypeid?:number
};
	/** aggregate variance on columns */
["vectric_products_fulfilments_variance_fields"]: {
		fulfilmentId?:number,
	fulfilmenttypeid?:number
};
	/** columns and relationships of "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes"]: {
		fulfilmenttypeid:ModelTypes["bigint"],
	typename:string
};
	/** aggregated selection of "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_aggregate"]: {
		aggregate?:ModelTypes["vectric_products_fulfilmenttypes_aggregate_fields"],
	nodes:ModelTypes["vectric_products_fulfilmenttypes"][]
};
	/** aggregate fields of "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_aggregate_fields"]: {
		avg?:ModelTypes["vectric_products_fulfilmenttypes_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_products_fulfilmenttypes_max_fields"],
	min?:ModelTypes["vectric_products_fulfilmenttypes_min_fields"],
	stddev?:ModelTypes["vectric_products_fulfilmenttypes_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_products_fulfilmenttypes_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_products_fulfilmenttypes_stddev_samp_fields"],
	sum?:ModelTypes["vectric_products_fulfilmenttypes_sum_fields"],
	var_pop?:ModelTypes["vectric_products_fulfilmenttypes_var_pop_fields"],
	var_samp?:ModelTypes["vectric_products_fulfilmenttypes_var_samp_fields"],
	variance?:ModelTypes["vectric_products_fulfilmenttypes_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_products_fulfilmenttypes_avg_fields"]: {
		fulfilmenttypeid?:number
};
	/** aggregate max on columns */
["vectric_products_fulfilmenttypes_max_fields"]: {
		fulfilmenttypeid?:ModelTypes["bigint"],
	typename?:string
};
	/** aggregate min on columns */
["vectric_products_fulfilmenttypes_min_fields"]: {
		fulfilmenttypeid?:ModelTypes["bigint"],
	typename?:string
};
	/** response of any mutation on the table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_products_fulfilmenttypes"][]
};
	/** aggregate stddev on columns */
["vectric_products_fulfilmenttypes_stddev_fields"]: {
		fulfilmenttypeid?:number
};
	/** aggregate stddev_pop on columns */
["vectric_products_fulfilmenttypes_stddev_pop_fields"]: {
		fulfilmenttypeid?:number
};
	/** aggregate stddev_samp on columns */
["vectric_products_fulfilmenttypes_stddev_samp_fields"]: {
		fulfilmenttypeid?:number
};
	/** aggregate sum on columns */
["vectric_products_fulfilmenttypes_sum_fields"]: {
		fulfilmenttypeid?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_products_fulfilmenttypes_var_pop_fields"]: {
		fulfilmenttypeid?:number
};
	/** aggregate var_samp on columns */
["vectric_products_fulfilmenttypes_var_samp_fields"]: {
		fulfilmenttypeid?:number
};
	/** aggregate variance on columns */
["vectric_products_fulfilmenttypes_variance_fields"]: {
		fulfilmenttypeid?:number
};
	/** columns and relationships of "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments"]: {
		/** An object relationship */
	fulfilment:ModelTypes["vectric_products_fulfilments"],
	fulfilmentid:ModelTypes["bigint"],
	/** An object relationship */
	product:ModelTypes["vectric_products_products"],
	productfulfilmentid:ModelTypes["bigint"],
	productid:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_aggregate"]: {
		aggregate?:ModelTypes["vectric_products_product_fulfilments_aggregate_fields"],
	nodes:ModelTypes["vectric_products_product_fulfilments"][]
};
	/** aggregate fields of "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_aggregate_fields"]: {
		avg?:ModelTypes["vectric_products_product_fulfilments_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_products_product_fulfilments_max_fields"],
	min?:ModelTypes["vectric_products_product_fulfilments_min_fields"],
	stddev?:ModelTypes["vectric_products_product_fulfilments_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_products_product_fulfilments_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_products_product_fulfilments_stddev_samp_fields"],
	sum?:ModelTypes["vectric_products_product_fulfilments_sum_fields"],
	var_pop?:ModelTypes["vectric_products_product_fulfilments_var_pop_fields"],
	var_samp?:ModelTypes["vectric_products_product_fulfilments_var_samp_fields"],
	variance?:ModelTypes["vectric_products_product_fulfilments_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_products_product_fulfilments_avg_fields"]: {
		fulfilmentid?:number,
	productfulfilmentid?:number,
	productid?:number
};
	/** aggregate max on columns */
["vectric_products_product_fulfilments_max_fields"]: {
		fulfilmentid?:ModelTypes["bigint"],
	productfulfilmentid?:ModelTypes["bigint"],
	productid?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_products_product_fulfilments_min_fields"]: {
		fulfilmentid?:ModelTypes["bigint"],
	productfulfilmentid?:ModelTypes["bigint"],
	productid?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_products_product_fulfilments"][]
};
	/** aggregate stddev on columns */
["vectric_products_product_fulfilments_stddev_fields"]: {
		fulfilmentid?:number,
	productfulfilmentid?:number,
	productid?:number
};
	/** aggregate stddev_pop on columns */
["vectric_products_product_fulfilments_stddev_pop_fields"]: {
		fulfilmentid?:number,
	productfulfilmentid?:number,
	productid?:number
};
	/** aggregate stddev_samp on columns */
["vectric_products_product_fulfilments_stddev_samp_fields"]: {
		fulfilmentid?:number,
	productfulfilmentid?:number,
	productid?:number
};
	/** aggregate sum on columns */
["vectric_products_product_fulfilments_sum_fields"]: {
		fulfilmentid?:ModelTypes["bigint"],
	productfulfilmentid?:ModelTypes["bigint"],
	productid?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_products_product_fulfilments_var_pop_fields"]: {
		fulfilmentid?:number,
	productfulfilmentid?:number,
	productid?:number
};
	/** aggregate var_samp on columns */
["vectric_products_product_fulfilments_var_samp_fields"]: {
		fulfilmentid?:number,
	productfulfilmentid?:number,
	productid?:number
};
	/** aggregate variance on columns */
["vectric_products_product_fulfilments_variance_fields"]: {
		fulfilmentid?:number,
	productfulfilmentid?:number,
	productid?:number
};
	/** columns and relationships of "vectric.products_product_licence_type" */
["vectric_products_product_licence_type"]: {
		type:string
};
	/** aggregated selection of "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_aggregate"]: {
		aggregate?:ModelTypes["vectric_products_product_licence_type_aggregate_fields"],
	nodes:ModelTypes["vectric_products_product_licence_type"][]
};
	/** aggregate fields of "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_aggregate_fields"]: {
		count:number,
	max?:ModelTypes["vectric_products_product_licence_type_max_fields"],
	min?:ModelTypes["vectric_products_product_licence_type_min_fields"]
};
	/** aggregate max on columns */
["vectric_products_product_licence_type_max_fields"]: {
		type?:string
};
	/** aggregate min on columns */
["vectric_products_product_licence_type_min_fields"]: {
		type?:string
};
	/** response of any mutation on the table "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_products_product_licence_type"][]
};
	/** columns and relationships of "vectric.products_products" */
["vectric_products_products"]: {
		enabled:boolean,
	externalid?:ModelTypes["bigint"],
	fastspringId?:string,
	free:boolean,
	/** An object relationship */
	latestVersion?:ModelTypes["vectric_products_versioncodes"],
	latestversion?:ModelTypes["bigint"],
	licenceType:ModelTypes["vectric_products_product_licence_type_enum"],
	media:boolean,
	/** An array relationship */
	potentialEnhancements:ModelTypes["vectric_products_enhancement_eligibility"][],
	/** An aggregate relationship */
	potentialEnhancements_aggregate:ModelTypes["vectric_products_enhancement_eligibility_aggregate"],
	/** An array relationship */
	potentialUpgrades:ModelTypes["vectric_active_upgrades"][],
	/** An aggregate relationship */
	potentialUpgrades_aggregate:ModelTypes["vectric_active_upgrades_aggregate"],
	productID:ModelTypes["bigint"],
	productName:string,
	/** An object relationship */
	productType:ModelTypes["vectric_products_producttype"],
	/** An array relationship */
	product_fulfilments:ModelTypes["vectric_products_product_fulfilments"][],
	/** An aggregate relationship */
	product_fulfilments_aggregate:ModelTypes["vectric_products_product_fulfilments_aggregate"],
	receivesClipart:boolean,
	releaseDate?:ModelTypes["date"],
	requireslicence?:boolean,
	type:ModelTypes["bigint"],
	upgradefromtypeid?:ModelTypes["bigint"],
	/** An array relationship */
	versions:ModelTypes["vectric_products_versioncodes"][],
	/** An aggregate relationship */
	versions_aggregate:ModelTypes["vectric_products_versioncodes_aggregate"]
};
	/** aggregated selection of "vectric.products_products" */
["vectric_products_products_aggregate"]: {
		aggregate?:ModelTypes["vectric_products_products_aggregate_fields"],
	nodes:ModelTypes["vectric_products_products"][]
};
	/** aggregate fields of "vectric.products_products" */
["vectric_products_products_aggregate_fields"]: {
		avg?:ModelTypes["vectric_products_products_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_products_products_max_fields"],
	min?:ModelTypes["vectric_products_products_min_fields"],
	stddev?:ModelTypes["vectric_products_products_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_products_products_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_products_products_stddev_samp_fields"],
	sum?:ModelTypes["vectric_products_products_sum_fields"],
	var_pop?:ModelTypes["vectric_products_products_var_pop_fields"],
	var_samp?:ModelTypes["vectric_products_products_var_samp_fields"],
	variance?:ModelTypes["vectric_products_products_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_products_products_avg_fields"]: {
		externalid?:number,
	latestversion?:number,
	productID?:number,
	type?:number,
	upgradefromtypeid?:number
};
	/** aggregate max on columns */
["vectric_products_products_max_fields"]: {
		externalid?:ModelTypes["bigint"],
	fastspringId?:string,
	latestversion?:ModelTypes["bigint"],
	productID?:ModelTypes["bigint"],
	productName?:string,
	releaseDate?:ModelTypes["date"],
	type?:ModelTypes["bigint"],
	upgradefromtypeid?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_products_products_min_fields"]: {
		externalid?:ModelTypes["bigint"],
	fastspringId?:string,
	latestversion?:ModelTypes["bigint"],
	productID?:ModelTypes["bigint"],
	productName?:string,
	releaseDate?:ModelTypes["date"],
	type?:ModelTypes["bigint"],
	upgradefromtypeid?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.products_products" */
["vectric_products_products_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_products_products"][]
};
	/** aggregate stddev on columns */
["vectric_products_products_stddev_fields"]: {
		externalid?:number,
	latestversion?:number,
	productID?:number,
	type?:number,
	upgradefromtypeid?:number
};
	/** aggregate stddev_pop on columns */
["vectric_products_products_stddev_pop_fields"]: {
		externalid?:number,
	latestversion?:number,
	productID?:number,
	type?:number,
	upgradefromtypeid?:number
};
	/** aggregate stddev_samp on columns */
["vectric_products_products_stddev_samp_fields"]: {
		externalid?:number,
	latestversion?:number,
	productID?:number,
	type?:number,
	upgradefromtypeid?:number
};
	/** aggregate sum on columns */
["vectric_products_products_sum_fields"]: {
		externalid?:ModelTypes["bigint"],
	latestversion?:ModelTypes["bigint"],
	productID?:ModelTypes["bigint"],
	type?:ModelTypes["bigint"],
	upgradefromtypeid?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_products_products_var_pop_fields"]: {
		externalid?:number,
	latestversion?:number,
	productID?:number,
	type?:number,
	upgradefromtypeid?:number
};
	/** aggregate var_samp on columns */
["vectric_products_products_var_samp_fields"]: {
		externalid?:number,
	latestversion?:number,
	productID?:number,
	type?:number,
	upgradefromtypeid?:number
};
	/** aggregate variance on columns */
["vectric_products_products_variance_fields"]: {
		externalid?:number,
	latestversion?:number,
	productID?:number,
	type?:number,
	upgradefromtypeid?:number
};
	/** columns and relationships of "vectric.products_producttype" */
["vectric_products_producttype"]: {
		productTypeId:ModelTypes["bigint"],
	productTypeName:string,
	/** An array relationship */
	products:ModelTypes["vectric_products_products"][],
	/** An aggregate relationship */
	products_aggregate:ModelTypes["vectric_products_products_aggregate"],
	seq?:number
};
	/** aggregated selection of "vectric.products_producttype" */
["vectric_products_producttype_aggregate"]: {
		aggregate?:ModelTypes["vectric_products_producttype_aggregate_fields"],
	nodes:ModelTypes["vectric_products_producttype"][]
};
	/** aggregate fields of "vectric.products_producttype" */
["vectric_products_producttype_aggregate_fields"]: {
		avg?:ModelTypes["vectric_products_producttype_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_products_producttype_max_fields"],
	min?:ModelTypes["vectric_products_producttype_min_fields"],
	stddev?:ModelTypes["vectric_products_producttype_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_products_producttype_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_products_producttype_stddev_samp_fields"],
	sum?:ModelTypes["vectric_products_producttype_sum_fields"],
	var_pop?:ModelTypes["vectric_products_producttype_var_pop_fields"],
	var_samp?:ModelTypes["vectric_products_producttype_var_samp_fields"],
	variance?:ModelTypes["vectric_products_producttype_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_products_producttype_avg_fields"]: {
		productTypeId?:number,
	seq?:number
};
	/** aggregate max on columns */
["vectric_products_producttype_max_fields"]: {
		productTypeId?:ModelTypes["bigint"],
	productTypeName?:string,
	seq?:number
};
	/** aggregate min on columns */
["vectric_products_producttype_min_fields"]: {
		productTypeId?:ModelTypes["bigint"],
	productTypeName?:string,
	seq?:number
};
	/** response of any mutation on the table "vectric.products_producttype" */
["vectric_products_producttype_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_products_producttype"][]
};
	/** aggregate stddev on columns */
["vectric_products_producttype_stddev_fields"]: {
		productTypeId?:number,
	seq?:number
};
	/** aggregate stddev_pop on columns */
["vectric_products_producttype_stddev_pop_fields"]: {
		productTypeId?:number,
	seq?:number
};
	/** aggregate stddev_samp on columns */
["vectric_products_producttype_stddev_samp_fields"]: {
		productTypeId?:number,
	seq?:number
};
	/** aggregate sum on columns */
["vectric_products_producttype_sum_fields"]: {
		productTypeId?:ModelTypes["bigint"],
	seq?:number
};
	/** aggregate var_pop on columns */
["vectric_products_producttype_var_pop_fields"]: {
		productTypeId?:number,
	seq?:number
};
	/** aggregate var_samp on columns */
["vectric_products_producttype_var_samp_fields"]: {
		productTypeId?:number,
	seq?:number
};
	/** aggregate variance on columns */
["vectric_products_producttype_variance_fields"]: {
		productTypeId?:number,
	seq?:number
};
	/** columns and relationships of "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility"]: {
		eligibilityid:ModelTypes["bigint"],
	fastspringproductid:string,
	fastspringurl:string,
	fromtype:ModelTypes["bigint"],
	maxmajorversion:ModelTypes["bigint"],
	minmajorversion:ModelTypes["bigint"],
	price:ModelTypes["numeric"],
	/** An object relationship */
	productsUpgradeFromType:ModelTypes["vectric_products_producttype"],
	/** An object relationship */
	productsUpgradeToProduct:ModelTypes["vectric_products_products"],
	summary?:string,
	toproduct:ModelTypes["bigint"],
	updatelink?:string,
	visibletocustomers:boolean,
	visibletostaff:boolean
};
	/** aggregated selection of "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_aggregate"]: {
		aggregate?:ModelTypes["vectric_products_upgrade_eligibility_aggregate_fields"],
	nodes:ModelTypes["vectric_products_upgrade_eligibility"][]
};
	/** aggregate fields of "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_aggregate_fields"]: {
		avg?:ModelTypes["vectric_products_upgrade_eligibility_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_products_upgrade_eligibility_max_fields"],
	min?:ModelTypes["vectric_products_upgrade_eligibility_min_fields"],
	stddev?:ModelTypes["vectric_products_upgrade_eligibility_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_products_upgrade_eligibility_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_products_upgrade_eligibility_stddev_samp_fields"],
	sum?:ModelTypes["vectric_products_upgrade_eligibility_sum_fields"],
	var_pop?:ModelTypes["vectric_products_upgrade_eligibility_var_pop_fields"],
	var_samp?:ModelTypes["vectric_products_upgrade_eligibility_var_samp_fields"],
	variance?:ModelTypes["vectric_products_upgrade_eligibility_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_products_upgrade_eligibility_avg_fields"]: {
		eligibilityid?:number,
	fromtype?:number,
	maxmajorversion?:number,
	minmajorversion?:number,
	price?:number,
	toproduct?:number
};
	/** aggregate max on columns */
["vectric_products_upgrade_eligibility_max_fields"]: {
		eligibilityid?:ModelTypes["bigint"],
	fastspringproductid?:string,
	fastspringurl?:string,
	fromtype?:ModelTypes["bigint"],
	maxmajorversion?:ModelTypes["bigint"],
	minmajorversion?:ModelTypes["bigint"],
	price?:ModelTypes["numeric"],
	summary?:string,
	toproduct?:ModelTypes["bigint"],
	updatelink?:string
};
	/** aggregate min on columns */
["vectric_products_upgrade_eligibility_min_fields"]: {
		eligibilityid?:ModelTypes["bigint"],
	fastspringproductid?:string,
	fastspringurl?:string,
	fromtype?:ModelTypes["bigint"],
	maxmajorversion?:ModelTypes["bigint"],
	minmajorversion?:ModelTypes["bigint"],
	price?:ModelTypes["numeric"],
	summary?:string,
	toproduct?:ModelTypes["bigint"],
	updatelink?:string
};
	/** response of any mutation on the table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_products_upgrade_eligibility"][]
};
	/** aggregate stddev on columns */
["vectric_products_upgrade_eligibility_stddev_fields"]: {
		eligibilityid?:number,
	fromtype?:number,
	maxmajorversion?:number,
	minmajorversion?:number,
	price?:number,
	toproduct?:number
};
	/** aggregate stddev_pop on columns */
["vectric_products_upgrade_eligibility_stddev_pop_fields"]: {
		eligibilityid?:number,
	fromtype?:number,
	maxmajorversion?:number,
	minmajorversion?:number,
	price?:number,
	toproduct?:number
};
	/** aggregate stddev_samp on columns */
["vectric_products_upgrade_eligibility_stddev_samp_fields"]: {
		eligibilityid?:number,
	fromtype?:number,
	maxmajorversion?:number,
	minmajorversion?:number,
	price?:number,
	toproduct?:number
};
	/** aggregate sum on columns */
["vectric_products_upgrade_eligibility_sum_fields"]: {
		eligibilityid?:ModelTypes["bigint"],
	fromtype?:ModelTypes["bigint"],
	maxmajorversion?:ModelTypes["bigint"],
	minmajorversion?:ModelTypes["bigint"],
	price?:ModelTypes["numeric"],
	toproduct?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_products_upgrade_eligibility_var_pop_fields"]: {
		eligibilityid?:number,
	fromtype?:number,
	maxmajorversion?:number,
	minmajorversion?:number,
	price?:number,
	toproduct?:number
};
	/** aggregate var_samp on columns */
["vectric_products_upgrade_eligibility_var_samp_fields"]: {
		eligibilityid?:number,
	fromtype?:number,
	maxmajorversion?:number,
	minmajorversion?:number,
	price?:number,
	toproduct?:number
};
	/** aggregate variance on columns */
["vectric_products_upgrade_eligibility_variance_fields"]: {
		eligibilityid?:number,
	fromtype?:number,
	maxmajorversion?:number,
	minmajorversion?:number,
	price?:number,
	toproduct?:number
};
	/** columns and relationships of "vectric.products_versioncodes" */
["vectric_products_versioncodes"]: {
		displayVersion?:string,
	latest:boolean,
	majorVersion?:ModelTypes["bigint"],
	minorVersionOOX?:ModelTypes["bigint"],
	minorVersionOXO?:ModelTypes["bigint"],
	minorVersionXOO?:ModelTypes["bigint"],
	notifying?:boolean,
	patchurl?:string,
	/** An object relationship */
	product?:ModelTypes["vectric_products_products"],
	productid?:ModelTypes["bigint"],
	releaseDate?:ModelTypes["date"],
	url?:string,
	versioncodeid:ModelTypes["bigint"],
	visible:boolean
};
	/** aggregated selection of "vectric.products_versioncodes" */
["vectric_products_versioncodes_aggregate"]: {
		aggregate?:ModelTypes["vectric_products_versioncodes_aggregate_fields"],
	nodes:ModelTypes["vectric_products_versioncodes"][]
};
	/** aggregate fields of "vectric.products_versioncodes" */
["vectric_products_versioncodes_aggregate_fields"]: {
		avg?:ModelTypes["vectric_products_versioncodes_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_products_versioncodes_max_fields"],
	min?:ModelTypes["vectric_products_versioncodes_min_fields"],
	stddev?:ModelTypes["vectric_products_versioncodes_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_products_versioncodes_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_products_versioncodes_stddev_samp_fields"],
	sum?:ModelTypes["vectric_products_versioncodes_sum_fields"],
	var_pop?:ModelTypes["vectric_products_versioncodes_var_pop_fields"],
	var_samp?:ModelTypes["vectric_products_versioncodes_var_samp_fields"],
	variance?:ModelTypes["vectric_products_versioncodes_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_products_versioncodes_avg_fields"]: {
		majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	productid?:number,
	versioncodeid?:number
};
	/** aggregate max on columns */
["vectric_products_versioncodes_max_fields"]: {
		displayVersion?:string,
	majorVersion?:ModelTypes["bigint"],
	minorVersionOOX?:ModelTypes["bigint"],
	minorVersionOXO?:ModelTypes["bigint"],
	minorVersionXOO?:ModelTypes["bigint"],
	patchurl?:string,
	productid?:ModelTypes["bigint"],
	releaseDate?:ModelTypes["date"],
	url?:string,
	versioncodeid?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_products_versioncodes_min_fields"]: {
		displayVersion?:string,
	majorVersion?:ModelTypes["bigint"],
	minorVersionOOX?:ModelTypes["bigint"],
	minorVersionOXO?:ModelTypes["bigint"],
	minorVersionXOO?:ModelTypes["bigint"],
	patchurl?:string,
	productid?:ModelTypes["bigint"],
	releaseDate?:ModelTypes["date"],
	url?:string,
	versioncodeid?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.products_versioncodes" */
["vectric_products_versioncodes_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_products_versioncodes"][]
};
	/** aggregate stddev on columns */
["vectric_products_versioncodes_stddev_fields"]: {
		majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	productid?:number,
	versioncodeid?:number
};
	/** aggregate stddev_pop on columns */
["vectric_products_versioncodes_stddev_pop_fields"]: {
		majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	productid?:number,
	versioncodeid?:number
};
	/** aggregate stddev_samp on columns */
["vectric_products_versioncodes_stddev_samp_fields"]: {
		majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	productid?:number,
	versioncodeid?:number
};
	/** aggregate sum on columns */
["vectric_products_versioncodes_sum_fields"]: {
		majorVersion?:ModelTypes["bigint"],
	minorVersionOOX?:ModelTypes["bigint"],
	minorVersionOXO?:ModelTypes["bigint"],
	minorVersionXOO?:ModelTypes["bigint"],
	productid?:ModelTypes["bigint"],
	versioncodeid?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_products_versioncodes_var_pop_fields"]: {
		majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	productid?:number,
	versioncodeid?:number
};
	/** aggregate var_samp on columns */
["vectric_products_versioncodes_var_samp_fields"]: {
		majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	productid?:number,
	versioncodeid?:number
};
	/** aggregate variance on columns */
["vectric_products_versioncodes_variance_fields"]: {
		majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	productid?:number,
	versioncodeid?:number
};
	/** columns and relationships of "vectric.questions" */
["vectric_questions"]: {
		/** An array relationship */
	customer_responses:ModelTypes["vectric_customer_responses"][],
	/** An aggregate relationship */
	customer_responses_aggregate:ModelTypes["vectric_customer_responses_aggregate"],
	multipleanswers?:boolean,
	questionid:ModelTypes["bigint"],
	questiontext?:string,
	/** fetch data from the table: "vectric.responses" */
	responses:ModelTypes["vectric_responses"][],
	/** fetch aggregated fields from the table: "vectric.responses" */
	responses_aggregate:ModelTypes["vectric_responses_aggregate"]
};
	/** aggregated selection of "vectric.questions" */
["vectric_questions_aggregate"]: {
		aggregate?:ModelTypes["vectric_questions_aggregate_fields"],
	nodes:ModelTypes["vectric_questions"][]
};
	/** aggregate fields of "vectric.questions" */
["vectric_questions_aggregate_fields"]: {
		avg?:ModelTypes["vectric_questions_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_questions_max_fields"],
	min?:ModelTypes["vectric_questions_min_fields"],
	stddev?:ModelTypes["vectric_questions_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_questions_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_questions_stddev_samp_fields"],
	sum?:ModelTypes["vectric_questions_sum_fields"],
	var_pop?:ModelTypes["vectric_questions_var_pop_fields"],
	var_samp?:ModelTypes["vectric_questions_var_samp_fields"],
	variance?:ModelTypes["vectric_questions_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_questions_avg_fields"]: {
		questionid?:number
};
	/** aggregate max on columns */
["vectric_questions_max_fields"]: {
		questionid?:ModelTypes["bigint"],
	questiontext?:string
};
	/** aggregate min on columns */
["vectric_questions_min_fields"]: {
		questionid?:ModelTypes["bigint"],
	questiontext?:string
};
	/** response of any mutation on the table "vectric.questions" */
["vectric_questions_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_questions"][]
};
	/** aggregate stddev on columns */
["vectric_questions_stddev_fields"]: {
		questionid?:number
};
	/** aggregate stddev_pop on columns */
["vectric_questions_stddev_pop_fields"]: {
		questionid?:number
};
	/** aggregate stddev_samp on columns */
["vectric_questions_stddev_samp_fields"]: {
		questionid?:number
};
	/** aggregate sum on columns */
["vectric_questions_sum_fields"]: {
		questionid?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_questions_var_pop_fields"]: {
		questionid?:number
};
	/** aggregate var_samp on columns */
["vectric_questions_var_samp_fields"]: {
		questionid?:number
};
	/** aggregate variance on columns */
["vectric_questions_variance_fields"]: {
		questionid?:number
};
	/** columns and relationships of "vectric.responses" */
["vectric_responses"]: {
		questionid:ModelTypes["bigint"],
	responseid:ModelTypes["bigint"],
	responsetext?:string
};
	/** aggregated selection of "vectric.responses" */
["vectric_responses_aggregate"]: {
		aggregate?:ModelTypes["vectric_responses_aggregate_fields"],
	nodes:ModelTypes["vectric_responses"][]
};
	/** aggregate fields of "vectric.responses" */
["vectric_responses_aggregate_fields"]: {
		avg?:ModelTypes["vectric_responses_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_responses_max_fields"],
	min?:ModelTypes["vectric_responses_min_fields"],
	stddev?:ModelTypes["vectric_responses_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_responses_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_responses_stddev_samp_fields"],
	sum?:ModelTypes["vectric_responses_sum_fields"],
	var_pop?:ModelTypes["vectric_responses_var_pop_fields"],
	var_samp?:ModelTypes["vectric_responses_var_samp_fields"],
	variance?:ModelTypes["vectric_responses_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_responses_avg_fields"]: {
		questionid?:number,
	responseid?:number
};
	/** aggregate max on columns */
["vectric_responses_max_fields"]: {
		questionid?:ModelTypes["bigint"],
	responseid?:ModelTypes["bigint"],
	responsetext?:string
};
	/** aggregate min on columns */
["vectric_responses_min_fields"]: {
		questionid?:ModelTypes["bigint"],
	responseid?:ModelTypes["bigint"],
	responsetext?:string
};
	/** response of any mutation on the table "vectric.responses" */
["vectric_responses_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_responses"][]
};
	/** aggregate stddev on columns */
["vectric_responses_stddev_fields"]: {
		questionid?:number,
	responseid?:number
};
	/** aggregate stddev_pop on columns */
["vectric_responses_stddev_pop_fields"]: {
		questionid?:number,
	responseid?:number
};
	/** aggregate stddev_samp on columns */
["vectric_responses_stddev_samp_fields"]: {
		questionid?:number,
	responseid?:number
};
	/** aggregate sum on columns */
["vectric_responses_sum_fields"]: {
		questionid?:ModelTypes["bigint"],
	responseid?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_responses_var_pop_fields"]: {
		questionid?:number,
	responseid?:number
};
	/** aggregate var_samp on columns */
["vectric_responses_var_samp_fields"]: {
		questionid?:number,
	responseid?:number
};
	/** aggregate variance on columns */
["vectric_responses_variance_fields"]: {
		questionid?:number,
	responseid?:number
};
	/** columns and relationships of "vectric.saleable_products" */
["vectric_saleable_products"]: {
		enabled?:boolean,
	fastspringId?:string,
	free?:boolean,
	media?:boolean,
	productId:number,
	productName:string,
	productTypeId:number,
	receivesClipart?:boolean,
	subscription?:boolean
};
	/** aggregated selection of "vectric.saleable_products" */
["vectric_saleable_products_aggregate"]: {
		aggregate?:ModelTypes["vectric_saleable_products_aggregate_fields"],
	nodes:ModelTypes["vectric_saleable_products"][]
};
	/** aggregate fields of "vectric.saleable_products" */
["vectric_saleable_products_aggregate_fields"]: {
		avg?:ModelTypes["vectric_saleable_products_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_saleable_products_max_fields"],
	min?:ModelTypes["vectric_saleable_products_min_fields"],
	stddev?:ModelTypes["vectric_saleable_products_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_saleable_products_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_saleable_products_stddev_samp_fields"],
	sum?:ModelTypes["vectric_saleable_products_sum_fields"],
	var_pop?:ModelTypes["vectric_saleable_products_var_pop_fields"],
	var_samp?:ModelTypes["vectric_saleable_products_var_samp_fields"],
	variance?:ModelTypes["vectric_saleable_products_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_saleable_products_avg_fields"]: {
		productId?:number,
	productTypeId?:number
};
	/** aggregate max on columns */
["vectric_saleable_products_max_fields"]: {
		fastspringId?:string,
	productId?:number,
	productName?:string,
	productTypeId?:number
};
	/** aggregate min on columns */
["vectric_saleable_products_min_fields"]: {
		fastspringId?:string,
	productId?:number,
	productName?:string,
	productTypeId?:number
};
	/** response of any mutation on the table "vectric.saleable_products" */
["vectric_saleable_products_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_saleable_products"][]
};
	/** aggregate stddev on columns */
["vectric_saleable_products_stddev_fields"]: {
		productId?:number,
	productTypeId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_saleable_products_stddev_pop_fields"]: {
		productId?:number,
	productTypeId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_saleable_products_stddev_samp_fields"]: {
		productId?:number,
	productTypeId?:number
};
	/** aggregate sum on columns */
["vectric_saleable_products_sum_fields"]: {
		productId?:number,
	productTypeId?:number
};
	/** aggregate var_pop on columns */
["vectric_saleable_products_var_pop_fields"]: {
		productId?:number,
	productTypeId?:number
};
	/** aggregate var_samp on columns */
["vectric_saleable_products_var_samp_fields"]: {
		productId?:number,
	productTypeId?:number
};
	/** aggregate variance on columns */
["vectric_saleable_products_variance_fields"]: {
		productId?:number,
	productTypeId?:number
};
	/** columns and relationships of "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads"]: {
		customerId?:ModelTypes["bigint"],
	downloadDate?:ModelTypes["timestamptz"],
	downloadId:ModelTypes["bigint"],
	fulfilmentId?:ModelTypes["bigint"],
	ipAddress?:string
};
	/** aggregated selection of "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_aggregate"]: {
		aggregate?:ModelTypes["vectric_sales_customer_downloads_aggregate_fields"],
	nodes:ModelTypes["vectric_sales_customer_downloads"][]
};
	/** aggregate fields of "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_aggregate_fields"]: {
		avg?:ModelTypes["vectric_sales_customer_downloads_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_sales_customer_downloads_max_fields"],
	min?:ModelTypes["vectric_sales_customer_downloads_min_fields"],
	stddev?:ModelTypes["vectric_sales_customer_downloads_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_sales_customer_downloads_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_sales_customer_downloads_stddev_samp_fields"],
	sum?:ModelTypes["vectric_sales_customer_downloads_sum_fields"],
	var_pop?:ModelTypes["vectric_sales_customer_downloads_var_pop_fields"],
	var_samp?:ModelTypes["vectric_sales_customer_downloads_var_samp_fields"],
	variance?:ModelTypes["vectric_sales_customer_downloads_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_sales_customer_downloads_avg_fields"]: {
		customerId?:number,
	downloadId?:number,
	fulfilmentId?:number
};
	/** aggregate max on columns */
["vectric_sales_customer_downloads_max_fields"]: {
		customerId?:ModelTypes["bigint"],
	downloadDate?:ModelTypes["timestamptz"],
	downloadId?:ModelTypes["bigint"],
	fulfilmentId?:ModelTypes["bigint"],
	ipAddress?:string
};
	/** aggregate min on columns */
["vectric_sales_customer_downloads_min_fields"]: {
		customerId?:ModelTypes["bigint"],
	downloadDate?:ModelTypes["timestamptz"],
	downloadId?:ModelTypes["bigint"],
	fulfilmentId?:ModelTypes["bigint"],
	ipAddress?:string
};
	/** response of any mutation on the table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_sales_customer_downloads"][]
};
	/** aggregate stddev on columns */
["vectric_sales_customer_downloads_stddev_fields"]: {
		customerId?:number,
	downloadId?:number,
	fulfilmentId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_sales_customer_downloads_stddev_pop_fields"]: {
		customerId?:number,
	downloadId?:number,
	fulfilmentId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_sales_customer_downloads_stddev_samp_fields"]: {
		customerId?:number,
	downloadId?:number,
	fulfilmentId?:number
};
	/** aggregate sum on columns */
["vectric_sales_customer_downloads_sum_fields"]: {
		customerId?:ModelTypes["bigint"],
	downloadId?:ModelTypes["bigint"],
	fulfilmentId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_sales_customer_downloads_var_pop_fields"]: {
		customerId?:number,
	downloadId?:number,
	fulfilmentId?:number
};
	/** aggregate var_samp on columns */
["vectric_sales_customer_downloads_var_samp_fields"]: {
		customerId?:number,
	downloadId?:number,
	fulfilmentId?:number
};
	/** aggregate variance on columns */
["vectric_sales_customer_downloads_variance_fields"]: {
		customerId?:number,
	downloadId?:number,
	fulfilmentId?:number
};
	/** columns and relationships of "vectric.sales_customers" */
["vectric_sales_customers"]: {
		acceptedTerms:boolean,
	amendedby?:string,
	companyName?:string,
	/** An object relationship */
	country?:ModelTypes["vectric_countries"],
	countrycode?:ModelTypes["bigint"],
	createdby?:string,
	customerAddressLine?:string,
	customerId:ModelTypes["bigint"],
	customerName?:string,
	/** An array relationship */
	customerSales:ModelTypes["vectric_customer_sales"][],
	/** An aggregate relationship */
	customerSales_aggregate:ModelTypes["vectric_customer_sales_aggregate"],
	customerTelephone?:string,
	customerType:string,
	customerstatusid:ModelTypes["bigint"],
	customeruuid:ModelTypes["uuid"],
	dateAcceptedTerms?:ModelTypes["timestamptz"],
	dateCreated?:ModelTypes["timestamptz"],
	dateMarketingConsentUpdated?:ModelTypes["timestamptz"],
	dateUpgradeEmailConsentUpdates?:ModelTypes["timestamptz"],
	dateamended?:ModelTypes["timestamptz"],
	email:string,
	/** An array relationship */
	freeClipartTokens:ModelTypes["vectric_free_clipart_tokens"][],
	/** An aggregate relationship */
	freeClipartTokens_aggregate:ModelTypes["vectric_free_clipart_tokens_aggregate"],
	language?:string,
	lastLogin?:ModelTypes["timestamptz"],
	lastipaddress?:string,
	location?:string,
	/** An array relationship */
	memberships:ModelTypes["vectric_group_user_role"][],
	/** An aggregate relationship */
	memberships_aggregate:ModelTypes["vectric_group_user_role_aggregate"],
	mergedfromcustomerid?:ModelTypes["bigint"],
	mergedtocustomerid?:ModelTypes["bigint"],
	notes?:string,
	/** An array relationship */
	orders:ModelTypes["vectric_sales_orders"][],
	/** An aggregate relationship */
	orders_aggregate:ModelTypes["vectric_sales_orders_aggregate"],
	/** An array relationship */
	organizationMemberships:ModelTypes["vectric_memberships"][],
	/** An aggregate relationship */
	organizationMemberships_aggregate:ModelTypes["vectric_memberships_aggregate"],
	/** An array relationship */
	partnerMemberships:ModelTypes["vectric_oem_staff_customer"][],
	/** An aggregate relationship */
	partnerMemberships_aggregate:ModelTypes["vectric_oem_staff_customer_aggregate"],
	receivingMarketingEmails:boolean,
	receivingUpgradeEmails:boolean,
	registeredUsername:string,
	/** An object relationship */
	user?:ModelTypes["vectric_security_users"],
	verified:boolean
};
	/** aggregated selection of "vectric.sales_customers" */
["vectric_sales_customers_aggregate"]: {
		aggregate?:ModelTypes["vectric_sales_customers_aggregate_fields"],
	nodes:ModelTypes["vectric_sales_customers"][]
};
	/** aggregate fields of "vectric.sales_customers" */
["vectric_sales_customers_aggregate_fields"]: {
		avg?:ModelTypes["vectric_sales_customers_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_sales_customers_max_fields"],
	min?:ModelTypes["vectric_sales_customers_min_fields"],
	stddev?:ModelTypes["vectric_sales_customers_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_sales_customers_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_sales_customers_stddev_samp_fields"],
	sum?:ModelTypes["vectric_sales_customers_sum_fields"],
	var_pop?:ModelTypes["vectric_sales_customers_var_pop_fields"],
	var_samp?:ModelTypes["vectric_sales_customers_var_samp_fields"],
	variance?:ModelTypes["vectric_sales_customers_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_sales_customers_avg_fields"]: {
		countrycode?:number,
	customerId?:number,
	customerstatusid?:number,
	mergedfromcustomerid?:number,
	mergedtocustomerid?:number
};
	/** aggregate max on columns */
["vectric_sales_customers_max_fields"]: {
		amendedby?:string,
	companyName?:string,
	countrycode?:ModelTypes["bigint"],
	createdby?:string,
	customerAddressLine?:string,
	customerId?:ModelTypes["bigint"],
	customerName?:string,
	customerTelephone?:string,
	customerType?:string,
	customerstatusid?:ModelTypes["bigint"],
	customeruuid?:ModelTypes["uuid"],
	dateAcceptedTerms?:ModelTypes["timestamptz"],
	dateCreated?:ModelTypes["timestamptz"],
	dateMarketingConsentUpdated?:ModelTypes["timestamptz"],
	dateUpgradeEmailConsentUpdates?:ModelTypes["timestamptz"],
	dateamended?:ModelTypes["timestamptz"],
	email?:string,
	language?:string,
	lastLogin?:ModelTypes["timestamptz"],
	lastipaddress?:string,
	location?:string,
	mergedfromcustomerid?:ModelTypes["bigint"],
	mergedtocustomerid?:ModelTypes["bigint"],
	notes?:string,
	registeredUsername?:string
};
	/** aggregate min on columns */
["vectric_sales_customers_min_fields"]: {
		amendedby?:string,
	companyName?:string,
	countrycode?:ModelTypes["bigint"],
	createdby?:string,
	customerAddressLine?:string,
	customerId?:ModelTypes["bigint"],
	customerName?:string,
	customerTelephone?:string,
	customerType?:string,
	customerstatusid?:ModelTypes["bigint"],
	customeruuid?:ModelTypes["uuid"],
	dateAcceptedTerms?:ModelTypes["timestamptz"],
	dateCreated?:ModelTypes["timestamptz"],
	dateMarketingConsentUpdated?:ModelTypes["timestamptz"],
	dateUpgradeEmailConsentUpdates?:ModelTypes["timestamptz"],
	dateamended?:ModelTypes["timestamptz"],
	email?:string,
	language?:string,
	lastLogin?:ModelTypes["timestamptz"],
	lastipaddress?:string,
	location?:string,
	mergedfromcustomerid?:ModelTypes["bigint"],
	mergedtocustomerid?:ModelTypes["bigint"],
	notes?:string,
	registeredUsername?:string
};
	/** response of any mutation on the table "vectric.sales_customers" */
["vectric_sales_customers_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_sales_customers"][]
};
	/** aggregate stddev on columns */
["vectric_sales_customers_stddev_fields"]: {
		countrycode?:number,
	customerId?:number,
	customerstatusid?:number,
	mergedfromcustomerid?:number,
	mergedtocustomerid?:number
};
	/** aggregate stddev_pop on columns */
["vectric_sales_customers_stddev_pop_fields"]: {
		countrycode?:number,
	customerId?:number,
	customerstatusid?:number,
	mergedfromcustomerid?:number,
	mergedtocustomerid?:number
};
	/** aggregate stddev_samp on columns */
["vectric_sales_customers_stddev_samp_fields"]: {
		countrycode?:number,
	customerId?:number,
	customerstatusid?:number,
	mergedfromcustomerid?:number,
	mergedtocustomerid?:number
};
	/** aggregate sum on columns */
["vectric_sales_customers_sum_fields"]: {
		countrycode?:ModelTypes["bigint"],
	customerId?:ModelTypes["bigint"],
	customerstatusid?:ModelTypes["bigint"],
	mergedfromcustomerid?:ModelTypes["bigint"],
	mergedtocustomerid?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_sales_customers_var_pop_fields"]: {
		countrycode?:number,
	customerId?:number,
	customerstatusid?:number,
	mergedfromcustomerid?:number,
	mergedtocustomerid?:number
};
	/** aggregate var_samp on columns */
["vectric_sales_customers_var_samp_fields"]: {
		countrycode?:number,
	customerId?:number,
	customerstatusid?:number,
	mergedfromcustomerid?:number,
	mergedtocustomerid?:number
};
	/** aggregate variance on columns */
["vectric_sales_customers_variance_fields"]: {
		countrycode?:number,
	customerId?:number,
	customerstatusid?:number,
	mergedfromcustomerid?:number,
	mergedtocustomerid?:number
};
	/** columns and relationships of "vectric.sales_customerupdates" */
["vectric_sales_customerupdates"]: {
		changedBy?:string,
	customerId:ModelTypes["bigint"],
	customerUpdateId:ModelTypes["bigint"],
	dateChanged:ModelTypes["timestamptz"],
	fieldName:string,
	newValue:string,
	oldValue?:string
};
	/** aggregated selection of "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_aggregate"]: {
		aggregate?:ModelTypes["vectric_sales_customerupdates_aggregate_fields"],
	nodes:ModelTypes["vectric_sales_customerupdates"][]
};
	/** aggregate fields of "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_aggregate_fields"]: {
		avg?:ModelTypes["vectric_sales_customerupdates_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_sales_customerupdates_max_fields"],
	min?:ModelTypes["vectric_sales_customerupdates_min_fields"],
	stddev?:ModelTypes["vectric_sales_customerupdates_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_sales_customerupdates_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_sales_customerupdates_stddev_samp_fields"],
	sum?:ModelTypes["vectric_sales_customerupdates_sum_fields"],
	var_pop?:ModelTypes["vectric_sales_customerupdates_var_pop_fields"],
	var_samp?:ModelTypes["vectric_sales_customerupdates_var_samp_fields"],
	variance?:ModelTypes["vectric_sales_customerupdates_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_sales_customerupdates_avg_fields"]: {
		customerId?:number,
	customerUpdateId?:number
};
	/** aggregate max on columns */
["vectric_sales_customerupdates_max_fields"]: {
		changedBy?:string,
	customerId?:ModelTypes["bigint"],
	customerUpdateId?:ModelTypes["bigint"],
	dateChanged?:ModelTypes["timestamptz"],
	fieldName?:string,
	newValue?:string,
	oldValue?:string
};
	/** aggregate min on columns */
["vectric_sales_customerupdates_min_fields"]: {
		changedBy?:string,
	customerId?:ModelTypes["bigint"],
	customerUpdateId?:ModelTypes["bigint"],
	dateChanged?:ModelTypes["timestamptz"],
	fieldName?:string,
	newValue?:string,
	oldValue?:string
};
	/** response of any mutation on the table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_sales_customerupdates"][]
};
	/** aggregate stddev on columns */
["vectric_sales_customerupdates_stddev_fields"]: {
		customerId?:number,
	customerUpdateId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_sales_customerupdates_stddev_pop_fields"]: {
		customerId?:number,
	customerUpdateId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_sales_customerupdates_stddev_samp_fields"]: {
		customerId?:number,
	customerUpdateId?:number
};
	/** aggregate sum on columns */
["vectric_sales_customerupdates_sum_fields"]: {
		customerId?:ModelTypes["bigint"],
	customerUpdateId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_sales_customerupdates_var_pop_fields"]: {
		customerId?:number,
	customerUpdateId?:number
};
	/** aggregate var_samp on columns */
["vectric_sales_customerupdates_var_samp_fields"]: {
		customerId?:number,
	customerUpdateId?:number
};
	/** aggregate variance on columns */
["vectric_sales_customerupdates_variance_fields"]: {
		customerId?:number,
	customerUpdateId?:number
};
	/** columns and relationships of "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles"]: {
		allocatedBy?:string,
	allocationBatch?:string,
	/** An object relationship */
	allocationType:ModelTypes["vectric_oem_licence_allocation_type"],
	allocationTypeId:ModelTypes["bigint"],
	bundleId:string,
	dateAllocated?:ModelTypes["timestamptz"],
	dateCreated:ModelTypes["timestamptz"],
	/** An array relationship */
	licences:ModelTypes["vectric_sales_oemlicences"][],
	/** An aggregate relationship */
	licences_aggregate:ModelTypes["vectric_sales_oemlicences_aggregate"],
	notes?:string,
	/** An object relationship */
	partner?:ModelTypes["vectric_oem_partners"],
	partnerId:ModelTypes["bigint"],
	product:ModelTypes["bigint"],
	productDisplayName?:string,
	registrationDate?:ModelTypes["timestamptz"],
	typeDisplayName?:string
};
	/** aggregated selection of "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_aggregate"]: {
		aggregate?:ModelTypes["vectric_sales_oem_bundles_aggregate_fields"],
	nodes:ModelTypes["vectric_sales_oem_bundles"][]
};
	/** aggregate fields of "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_aggregate_fields"]: {
		avg?:ModelTypes["vectric_sales_oem_bundles_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_sales_oem_bundles_max_fields"],
	min?:ModelTypes["vectric_sales_oem_bundles_min_fields"],
	stddev?:ModelTypes["vectric_sales_oem_bundles_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_sales_oem_bundles_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_sales_oem_bundles_stddev_samp_fields"],
	sum?:ModelTypes["vectric_sales_oem_bundles_sum_fields"],
	var_pop?:ModelTypes["vectric_sales_oem_bundles_var_pop_fields"],
	var_samp?:ModelTypes["vectric_sales_oem_bundles_var_samp_fields"],
	variance?:ModelTypes["vectric_sales_oem_bundles_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_sales_oem_bundles_avg_fields"]: {
		allocationTypeId?:number,
	partnerId?:number,
	product?:number
};
	/** aggregate max on columns */
["vectric_sales_oem_bundles_max_fields"]: {
		allocatedBy?:string,
	allocationBatch?:string,
	allocationTypeId?:ModelTypes["bigint"],
	bundleId?:string,
	dateAllocated?:ModelTypes["timestamptz"],
	dateCreated?:ModelTypes["timestamptz"],
	notes?:string,
	partnerId?:ModelTypes["bigint"],
	product?:ModelTypes["bigint"],
	productDisplayName?:string,
	registrationDate?:ModelTypes["timestamptz"],
	typeDisplayName?:string
};
	/** aggregate min on columns */
["vectric_sales_oem_bundles_min_fields"]: {
		allocatedBy?:string,
	allocationBatch?:string,
	allocationTypeId?:ModelTypes["bigint"],
	bundleId?:string,
	dateAllocated?:ModelTypes["timestamptz"],
	dateCreated?:ModelTypes["timestamptz"],
	notes?:string,
	partnerId?:ModelTypes["bigint"],
	product?:ModelTypes["bigint"],
	productDisplayName?:string,
	registrationDate?:ModelTypes["timestamptz"],
	typeDisplayName?:string
};
	/** response of any mutation on the table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_sales_oem_bundles"][]
};
	/** aggregate stddev on columns */
["vectric_sales_oem_bundles_stddev_fields"]: {
		allocationTypeId?:number,
	partnerId?:number,
	product?:number
};
	/** aggregate stddev_pop on columns */
["vectric_sales_oem_bundles_stddev_pop_fields"]: {
		allocationTypeId?:number,
	partnerId?:number,
	product?:number
};
	/** aggregate stddev_samp on columns */
["vectric_sales_oem_bundles_stddev_samp_fields"]: {
		allocationTypeId?:number,
	partnerId?:number,
	product?:number
};
	/** aggregate sum on columns */
["vectric_sales_oem_bundles_sum_fields"]: {
		allocationTypeId?:ModelTypes["bigint"],
	partnerId?:ModelTypes["bigint"],
	product?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_sales_oem_bundles_var_pop_fields"]: {
		allocationTypeId?:number,
	partnerId?:number,
	product?:number
};
	/** aggregate var_samp on columns */
["vectric_sales_oem_bundles_var_samp_fields"]: {
		allocationTypeId?:number,
	partnerId?:number,
	product?:number
};
	/** aggregate variance on columns */
["vectric_sales_oem_bundles_variance_fields"]: {
		allocationTypeId?:number,
	partnerId?:number,
	product?:number
};
	/** columns and relationships of "vectric.sales_oemlicences" */
["vectric_sales_oemlicences"]: {
		allocatedBy?:string,
	/** An object relationship */
	allocationType:ModelTypes["vectric_oem_licence_allocation_type"],
	allocationTypeId:ModelTypes["bigint"],
	dateAllocated?:ModelTypes["timestamptz"],
	dateCreated:ModelTypes["timestamptz"],
	disabled?:boolean,
	licenceCode:string,
	/** An array relationship */
	licenceLogRows:ModelTypes["vectric_licence_log"][],
	/** An aggregate relationship */
	licenceLogRows_aggregate:ModelTypes["vectric_licence_log_aggregate"],
	mediaProvided?:boolean,
	oemBundleId:string,
	oemLicenceId:ModelTypes["bigint"],
	orderItemProductId?:ModelTypes["bigint"],
	/** An object relationship */
	partner?:ModelTypes["vectric_oem_partners"],
	partnerId?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"],
	productName:string,
	registrationDate?:ModelTypes["timestamptz"],
	saleItemId?:ModelTypes["bigint"],
	version:ModelTypes["smallint"]
};
	/** aggregated selection of "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_aggregate"]: {
		aggregate?:ModelTypes["vectric_sales_oemlicences_aggregate_fields"],
	nodes:ModelTypes["vectric_sales_oemlicences"][]
};
	/** aggregate fields of "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_aggregate_fields"]: {
		avg?:ModelTypes["vectric_sales_oemlicences_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_sales_oemlicences_max_fields"],
	min?:ModelTypes["vectric_sales_oemlicences_min_fields"],
	stddev?:ModelTypes["vectric_sales_oemlicences_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_sales_oemlicences_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_sales_oemlicences_stddev_samp_fields"],
	sum?:ModelTypes["vectric_sales_oemlicences_sum_fields"],
	var_pop?:ModelTypes["vectric_sales_oemlicences_var_pop_fields"],
	var_samp?:ModelTypes["vectric_sales_oemlicences_var_samp_fields"],
	variance?:ModelTypes["vectric_sales_oemlicences_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_sales_oemlicences_avg_fields"]: {
		allocationTypeId?:number,
	oemLicenceId?:number,
	orderItemProductId?:number,
	partnerId?:number,
	productId?:number,
	saleItemId?:number,
	version?:number
};
	/** aggregate max on columns */
["vectric_sales_oemlicences_max_fields"]: {
		allocatedBy?:string,
	allocationTypeId?:ModelTypes["bigint"],
	dateAllocated?:ModelTypes["timestamptz"],
	dateCreated?:ModelTypes["timestamptz"],
	licenceCode?:string,
	oemBundleId?:string,
	oemLicenceId?:ModelTypes["bigint"],
	orderItemProductId?:ModelTypes["bigint"],
	partnerId?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"],
	productName?:string,
	registrationDate?:ModelTypes["timestamptz"],
	saleItemId?:ModelTypes["bigint"],
	version?:ModelTypes["smallint"]
};
	/** aggregate min on columns */
["vectric_sales_oemlicences_min_fields"]: {
		allocatedBy?:string,
	allocationTypeId?:ModelTypes["bigint"],
	dateAllocated?:ModelTypes["timestamptz"],
	dateCreated?:ModelTypes["timestamptz"],
	licenceCode?:string,
	oemBundleId?:string,
	oemLicenceId?:ModelTypes["bigint"],
	orderItemProductId?:ModelTypes["bigint"],
	partnerId?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"],
	productName?:string,
	registrationDate?:ModelTypes["timestamptz"],
	saleItemId?:ModelTypes["bigint"],
	version?:ModelTypes["smallint"]
};
	/** response of any mutation on the table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_sales_oemlicences"][]
};
	/** aggregate stddev on columns */
["vectric_sales_oemlicences_stddev_fields"]: {
		allocationTypeId?:number,
	oemLicenceId?:number,
	orderItemProductId?:number,
	partnerId?:number,
	productId?:number,
	saleItemId?:number,
	version?:number
};
	/** aggregate stddev_pop on columns */
["vectric_sales_oemlicences_stddev_pop_fields"]: {
		allocationTypeId?:number,
	oemLicenceId?:number,
	orderItemProductId?:number,
	partnerId?:number,
	productId?:number,
	saleItemId?:number,
	version?:number
};
	/** aggregate stddev_samp on columns */
["vectric_sales_oemlicences_stddev_samp_fields"]: {
		allocationTypeId?:number,
	oemLicenceId?:number,
	orderItemProductId?:number,
	partnerId?:number,
	productId?:number,
	saleItemId?:number,
	version?:number
};
	/** aggregate sum on columns */
["vectric_sales_oemlicences_sum_fields"]: {
		allocationTypeId?:ModelTypes["bigint"],
	oemLicenceId?:ModelTypes["bigint"],
	orderItemProductId?:ModelTypes["bigint"],
	partnerId?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"],
	saleItemId?:ModelTypes["bigint"],
	version?:ModelTypes["smallint"]
};
	/** aggregate var_pop on columns */
["vectric_sales_oemlicences_var_pop_fields"]: {
		allocationTypeId?:number,
	oemLicenceId?:number,
	orderItemProductId?:number,
	partnerId?:number,
	productId?:number,
	saleItemId?:number,
	version?:number
};
	/** aggregate var_samp on columns */
["vectric_sales_oemlicences_var_samp_fields"]: {
		allocationTypeId?:number,
	oemLicenceId?:number,
	orderItemProductId?:number,
	partnerId?:number,
	productId?:number,
	saleItemId?:number,
	version?:number
};
	/** aggregate variance on columns */
["vectric_sales_oemlicences_variance_fields"]: {
		allocationTypeId?:number,
	oemLicenceId?:number,
	orderItemProductId?:number,
	partnerId?:number,
	productId?:number,
	saleItemId?:number,
	version?:number
};
	/** columns and relationships of "vectric.sales_orders" */
["vectric_sales_orders"]: {
		amendedby?:string,
	createdby?:string,
	customerId:ModelTypes["bigint"],
	dateCreated?:ModelTypes["timestamptz"],
	dateamended?:ModelTypes["timestamptz"],
	mergedfromcustomerid?:ModelTypes["bigint"],
	orderDate:ModelTypes["timestamptz"],
	orderId:string,
	purchaser?:string,
	registrationemailsent?:ModelTypes["date"],
	salenote?:string,
	/** An array relationship */
	salesItems:ModelTypes["vectric_sales_salesitems"][],
	/** An aggregate relationship */
	salesItems_aggregate:ModelTypes["vectric_sales_salesitems_aggregate"],
	/** An object relationship */
	sales_customer:ModelTypes["vectric_sales_customers"],
	salesdetails?:string,
	salesummary?:string,
	validationcomments?:string,
	veccode?:string
};
	/** aggregated selection of "vectric.sales_orders" */
["vectric_sales_orders_aggregate"]: {
		aggregate?:ModelTypes["vectric_sales_orders_aggregate_fields"],
	nodes:ModelTypes["vectric_sales_orders"][]
};
	/** aggregate fields of "vectric.sales_orders" */
["vectric_sales_orders_aggregate_fields"]: {
		avg?:ModelTypes["vectric_sales_orders_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_sales_orders_max_fields"],
	min?:ModelTypes["vectric_sales_orders_min_fields"],
	stddev?:ModelTypes["vectric_sales_orders_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_sales_orders_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_sales_orders_stddev_samp_fields"],
	sum?:ModelTypes["vectric_sales_orders_sum_fields"],
	var_pop?:ModelTypes["vectric_sales_orders_var_pop_fields"],
	var_samp?:ModelTypes["vectric_sales_orders_var_samp_fields"],
	variance?:ModelTypes["vectric_sales_orders_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_sales_orders_avg_fields"]: {
		customerId?:number,
	mergedfromcustomerid?:number
};
	/** aggregate max on columns */
["vectric_sales_orders_max_fields"]: {
		amendedby?:string,
	createdby?:string,
	customerId?:ModelTypes["bigint"],
	dateCreated?:ModelTypes["timestamptz"],
	dateamended?:ModelTypes["timestamptz"],
	mergedfromcustomerid?:ModelTypes["bigint"],
	orderDate?:ModelTypes["timestamptz"],
	orderId?:string,
	purchaser?:string,
	registrationemailsent?:ModelTypes["date"],
	salenote?:string,
	salesdetails?:string,
	salesummary?:string,
	validationcomments?:string,
	veccode?:string
};
	/** aggregate min on columns */
["vectric_sales_orders_min_fields"]: {
		amendedby?:string,
	createdby?:string,
	customerId?:ModelTypes["bigint"],
	dateCreated?:ModelTypes["timestamptz"],
	dateamended?:ModelTypes["timestamptz"],
	mergedfromcustomerid?:ModelTypes["bigint"],
	orderDate?:ModelTypes["timestamptz"],
	orderId?:string,
	purchaser?:string,
	registrationemailsent?:ModelTypes["date"],
	salenote?:string,
	salesdetails?:string,
	salesummary?:string,
	validationcomments?:string,
	veccode?:string
};
	/** response of any mutation on the table "vectric.sales_orders" */
["vectric_sales_orders_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_sales_orders"][]
};
	/** aggregate stddev on columns */
["vectric_sales_orders_stddev_fields"]: {
		customerId?:number,
	mergedfromcustomerid?:number
};
	/** aggregate stddev_pop on columns */
["vectric_sales_orders_stddev_pop_fields"]: {
		customerId?:number,
	mergedfromcustomerid?:number
};
	/** aggregate stddev_samp on columns */
["vectric_sales_orders_stddev_samp_fields"]: {
		customerId?:number,
	mergedfromcustomerid?:number
};
	/** aggregate sum on columns */
["vectric_sales_orders_sum_fields"]: {
		customerId?:ModelTypes["bigint"],
	mergedfromcustomerid?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_sales_orders_var_pop_fields"]: {
		customerId?:number,
	mergedfromcustomerid?:number
};
	/** aggregate var_samp on columns */
["vectric_sales_orders_var_samp_fields"]: {
		customerId?:number,
	mergedfromcustomerid?:number
};
	/** aggregate variance on columns */
["vectric_sales_orders_variance_fields"]: {
		customerId?:number,
	mergedfromcustomerid?:number
};
	/** columns and relationships of "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products"]: {
		/** An array relationship */
	addOns:ModelTypes["vectric_sales_salesitem_products"][],
	/** An aggregate relationship */
	addOns_aggregate:ModelTypes["vectric_sales_salesitem_products_aggregate"],
	amended?:ModelTypes["timestamptz"],
	amendedby?:string,
	emailsubject?:string,
	/** An object relationship */
	enhanceSalesItemProduct?:ModelTypes["vectric_sales_salesitem_products"],
	/** An array relationship */
	enhancementTokens:ModelTypes["vectric_enhancement_tokens"][],
	/** An aggregate relationship */
	enhancementTokens_aggregate:ModelTypes["vectric_enhancement_tokens_aggregate"],
	enhances?:ModelTypes["bigint"],
	/** An array relationship */
	freeClipartTokens:ModelTypes["vectric_free_clipart_tokens"][],
	/** An aggregate relationship */
	freeClipartTokens_aggregate:ModelTypes["vectric_free_clipart_tokens_aggregate"],
	licenceCode:string,
	licenceIdAsDisplay:boolean,
	licenceType?:string,
	oembundleid?:string,
	/** An object relationship */
	product:ModelTypes["vectric_products_products"],
	productId:ModelTypes["bigint"],
	registeredUsername:string,
	resentdate?:ModelTypes["timestamptz"],
	/** An object relationship */
	salesItem:ModelTypes["vectric_sales_salesitems"],
	salesItemProductId:ModelTypes["bigint"],
	/** An object relationship */
	salesItemProductStatus?:ModelTypes["vectric_sales_salesitemproduct_status"],
	salesitemid:ModelTypes["bigint"],
	status:ModelTypes["bigint"],
	transfersalesitem?:ModelTypes["bigint"],
	/** An array relationship */
	upgradeTokens:ModelTypes["vectric_upgrade_tokens"][],
	/** An aggregate relationship */
	upgradeTokens_aggregate:ModelTypes["vectric_upgrade_tokens_aggregate"],
	upgradesalesitem?:ModelTypes["bigint"],
	versioncodeid?:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_aggregate"]: {
		aggregate?:ModelTypes["vectric_sales_salesitem_products_aggregate_fields"],
	nodes:ModelTypes["vectric_sales_salesitem_products"][]
};
	/** aggregate fields of "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_aggregate_fields"]: {
		avg?:ModelTypes["vectric_sales_salesitem_products_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_sales_salesitem_products_max_fields"],
	min?:ModelTypes["vectric_sales_salesitem_products_min_fields"],
	stddev?:ModelTypes["vectric_sales_salesitem_products_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_sales_salesitem_products_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_sales_salesitem_products_stddev_samp_fields"],
	sum?:ModelTypes["vectric_sales_salesitem_products_sum_fields"],
	var_pop?:ModelTypes["vectric_sales_salesitem_products_var_pop_fields"],
	var_samp?:ModelTypes["vectric_sales_salesitem_products_var_samp_fields"],
	variance?:ModelTypes["vectric_sales_salesitem_products_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_sales_salesitem_products_avg_fields"]: {
		enhances?:number,
	productId?:number,
	salesItemProductId?:number,
	salesitemid?:number,
	status?:number,
	transfersalesitem?:number,
	upgradesalesitem?:number,
	versioncodeid?:number
};
	/** aggregate max on columns */
["vectric_sales_salesitem_products_max_fields"]: {
		amended?:ModelTypes["timestamptz"],
	amendedby?:string,
	emailsubject?:string,
	enhances?:ModelTypes["bigint"],
	licenceCode?:string,
	licenceType?:string,
	oembundleid?:string,
	productId?:ModelTypes["bigint"],
	registeredUsername?:string,
	resentdate?:ModelTypes["timestamptz"],
	salesItemProductId?:ModelTypes["bigint"],
	salesitemid?:ModelTypes["bigint"],
	status?:ModelTypes["bigint"],
	transfersalesitem?:ModelTypes["bigint"],
	upgradesalesitem?:ModelTypes["bigint"],
	versioncodeid?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_sales_salesitem_products_min_fields"]: {
		amended?:ModelTypes["timestamptz"],
	amendedby?:string,
	emailsubject?:string,
	enhances?:ModelTypes["bigint"],
	licenceCode?:string,
	licenceType?:string,
	oembundleid?:string,
	productId?:ModelTypes["bigint"],
	registeredUsername?:string,
	resentdate?:ModelTypes["timestamptz"],
	salesItemProductId?:ModelTypes["bigint"],
	salesitemid?:ModelTypes["bigint"],
	status?:ModelTypes["bigint"],
	transfersalesitem?:ModelTypes["bigint"],
	upgradesalesitem?:ModelTypes["bigint"],
	versioncodeid?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_sales_salesitem_products"][]
};
	/** aggregate stddev on columns */
["vectric_sales_salesitem_products_stddev_fields"]: {
		enhances?:number,
	productId?:number,
	salesItemProductId?:number,
	salesitemid?:number,
	status?:number,
	transfersalesitem?:number,
	upgradesalesitem?:number,
	versioncodeid?:number
};
	/** aggregate stddev_pop on columns */
["vectric_sales_salesitem_products_stddev_pop_fields"]: {
		enhances?:number,
	productId?:number,
	salesItemProductId?:number,
	salesitemid?:number,
	status?:number,
	transfersalesitem?:number,
	upgradesalesitem?:number,
	versioncodeid?:number
};
	/** aggregate stddev_samp on columns */
["vectric_sales_salesitem_products_stddev_samp_fields"]: {
		enhances?:number,
	productId?:number,
	salesItemProductId?:number,
	salesitemid?:number,
	status?:number,
	transfersalesitem?:number,
	upgradesalesitem?:number,
	versioncodeid?:number
};
	/** aggregate sum on columns */
["vectric_sales_salesitem_products_sum_fields"]: {
		enhances?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"],
	salesItemProductId?:ModelTypes["bigint"],
	salesitemid?:ModelTypes["bigint"],
	status?:ModelTypes["bigint"],
	transfersalesitem?:ModelTypes["bigint"],
	upgradesalesitem?:ModelTypes["bigint"],
	versioncodeid?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_sales_salesitem_products_var_pop_fields"]: {
		enhances?:number,
	productId?:number,
	salesItemProductId?:number,
	salesitemid?:number,
	status?:number,
	transfersalesitem?:number,
	upgradesalesitem?:number,
	versioncodeid?:number
};
	/** aggregate var_samp on columns */
["vectric_sales_salesitem_products_var_samp_fields"]: {
		enhances?:number,
	productId?:number,
	salesItemProductId?:number,
	salesitemid?:number,
	status?:number,
	transfersalesitem?:number,
	upgradesalesitem?:number,
	versioncodeid?:number
};
	/** aggregate variance on columns */
["vectric_sales_salesitem_products_variance_fields"]: {
		enhances?:number,
	productId?:number,
	salesItemProductId?:number,
	salesitemid?:number,
	status?:number,
	transfersalesitem?:number,
	upgradesalesitem?:number,
	versioncodeid?:number
};
	/** columns and relationships of "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status"]: {
		status:string,
	statusid:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_aggregate"]: {
		aggregate?:ModelTypes["vectric_sales_salesitemproduct_status_aggregate_fields"],
	nodes:ModelTypes["vectric_sales_salesitemproduct_status"][]
};
	/** aggregate fields of "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_aggregate_fields"]: {
		avg?:ModelTypes["vectric_sales_salesitemproduct_status_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_sales_salesitemproduct_status_max_fields"],
	min?:ModelTypes["vectric_sales_salesitemproduct_status_min_fields"],
	stddev?:ModelTypes["vectric_sales_salesitemproduct_status_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_sales_salesitemproduct_status_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_sales_salesitemproduct_status_stddev_samp_fields"],
	sum?:ModelTypes["vectric_sales_salesitemproduct_status_sum_fields"],
	var_pop?:ModelTypes["vectric_sales_salesitemproduct_status_var_pop_fields"],
	var_samp?:ModelTypes["vectric_sales_salesitemproduct_status_var_samp_fields"],
	variance?:ModelTypes["vectric_sales_salesitemproduct_status_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_sales_salesitemproduct_status_avg_fields"]: {
		statusid?:number
};
	/** aggregate max on columns */
["vectric_sales_salesitemproduct_status_max_fields"]: {
		status?:string,
	statusid?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_sales_salesitemproduct_status_min_fields"]: {
		status?:string,
	statusid?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_sales_salesitemproduct_status"][]
};
	/** aggregate stddev on columns */
["vectric_sales_salesitemproduct_status_stddev_fields"]: {
		statusid?:number
};
	/** aggregate stddev_pop on columns */
["vectric_sales_salesitemproduct_status_stddev_pop_fields"]: {
		statusid?:number
};
	/** aggregate stddev_samp on columns */
["vectric_sales_salesitemproduct_status_stddev_samp_fields"]: {
		statusid?:number
};
	/** aggregate sum on columns */
["vectric_sales_salesitemproduct_status_sum_fields"]: {
		statusid?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_sales_salesitemproduct_status_var_pop_fields"]: {
		statusid?:number
};
	/** aggregate var_samp on columns */
["vectric_sales_salesitemproduct_status_var_samp_fields"]: {
		statusid?:number
};
	/** aggregate variance on columns */
["vectric_sales_salesitemproduct_status_variance_fields"]: {
		statusid?:number
};
	/** columns and relationships of "vectric.sales_salesitems" */
["vectric_sales_salesitems"]: {
		amendedby?:string,
	/** An object relationship */
	customerSale?:ModelTypes["vectric_customer_sales"],
	dateamended?:ModelTypes["timestamptz"],
	orderid:string,
	/** An object relationship */
	product:ModelTypes["vectric_products_products"],
	productid:ModelTypes["bigint"],
	/** An array relationship */
	salesItemProducts:ModelTypes["vectric_sales_salesitem_products"][],
	/** An aggregate relationship */
	salesItemProducts_aggregate:ModelTypes["vectric_sales_salesitem_products_aggregate"],
	/** An object relationship */
	sales_order:ModelTypes["vectric_sales_orders"],
	salesitemid:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.sales_salesitems" */
["vectric_sales_salesitems_aggregate"]: {
		aggregate?:ModelTypes["vectric_sales_salesitems_aggregate_fields"],
	nodes:ModelTypes["vectric_sales_salesitems"][]
};
	/** aggregate fields of "vectric.sales_salesitems" */
["vectric_sales_salesitems_aggregate_fields"]: {
		avg?:ModelTypes["vectric_sales_salesitems_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_sales_salesitems_max_fields"],
	min?:ModelTypes["vectric_sales_salesitems_min_fields"],
	stddev?:ModelTypes["vectric_sales_salesitems_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_sales_salesitems_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_sales_salesitems_stddev_samp_fields"],
	sum?:ModelTypes["vectric_sales_salesitems_sum_fields"],
	var_pop?:ModelTypes["vectric_sales_salesitems_var_pop_fields"],
	var_samp?:ModelTypes["vectric_sales_salesitems_var_samp_fields"],
	variance?:ModelTypes["vectric_sales_salesitems_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_sales_salesitems_avg_fields"]: {
		productid?:number,
	salesitemid?:number
};
	/** aggregate max on columns */
["vectric_sales_salesitems_max_fields"]: {
		amendedby?:string,
	dateamended?:ModelTypes["timestamptz"],
	orderid?:string,
	productid?:ModelTypes["bigint"],
	salesitemid?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_sales_salesitems_min_fields"]: {
		amendedby?:string,
	dateamended?:ModelTypes["timestamptz"],
	orderid?:string,
	productid?:ModelTypes["bigint"],
	salesitemid?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.sales_salesitems" */
["vectric_sales_salesitems_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_sales_salesitems"][]
};
	/** aggregate stddev on columns */
["vectric_sales_salesitems_stddev_fields"]: {
		productid?:number,
	salesitemid?:number
};
	/** aggregate stddev_pop on columns */
["vectric_sales_salesitems_stddev_pop_fields"]: {
		productid?:number,
	salesitemid?:number
};
	/** aggregate stddev_samp on columns */
["vectric_sales_salesitems_stddev_samp_fields"]: {
		productid?:number,
	salesitemid?:number
};
	/** aggregate sum on columns */
["vectric_sales_salesitems_sum_fields"]: {
		productid?:ModelTypes["bigint"],
	salesitemid?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_sales_salesitems_var_pop_fields"]: {
		productid?:number,
	salesitemid?:number
};
	/** aggregate var_samp on columns */
["vectric_sales_salesitems_var_samp_fields"]: {
		productid?:number,
	salesitemid?:number
};
	/** aggregate variance on columns */
["vectric_sales_salesitems_variance_fields"]: {
		productid?:number,
	salesitemid?:number
};
	/** columns and relationships of "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate"]: {
		lang?:string,
	/** An object relationship */
	languageCode?:ModelTypes["vectric_language_codes"],
	sender:string,
	signedBy:string,
	subject:string,
	template:string,
	templateName:string,
	templateTimestamp:ModelTypes["timestamptz"]
};
	/** aggregated selection of "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_aggregate"]: {
		aggregate?:ModelTypes["vectric_sales_velocitytemplate_aggregate_fields"],
	nodes:ModelTypes["vectric_sales_velocitytemplate"][]
};
	/** aggregate fields of "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_aggregate_fields"]: {
		count:number,
	max?:ModelTypes["vectric_sales_velocitytemplate_max_fields"],
	min?:ModelTypes["vectric_sales_velocitytemplate_min_fields"]
};
	/** aggregate max on columns */
["vectric_sales_velocitytemplate_max_fields"]: {
		lang?:string,
	sender?:string,
	signedBy?:string,
	subject?:string,
	template?:string,
	templateName?:string,
	templateTimestamp?:ModelTypes["timestamptz"]
};
	/** aggregate min on columns */
["vectric_sales_velocitytemplate_min_fields"]: {
		lang?:string,
	sender?:string,
	signedBy?:string,
	subject?:string,
	template?:string,
	templateName?:string,
	templateTimestamp?:ModelTypes["timestamptz"]
};
	/** response of any mutation on the table "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_sales_velocitytemplate"][]
};
	/** columns and relationships of "vectric.scheduled_emails" */
["vectric_scheduled_emails"]: {
		createdOn:ModelTypes["timestamp"],
	customerId?:ModelTypes["bigint"],
	id:number,
	processed?:boolean,
	processedOn?:ModelTypes["timestamp"],
	sendTo:string,
	templateId:string,
	variables?:string
};
	/** aggregated selection of "vectric.scheduled_emails" */
["vectric_scheduled_emails_aggregate"]: {
		aggregate?:ModelTypes["vectric_scheduled_emails_aggregate_fields"],
	nodes:ModelTypes["vectric_scheduled_emails"][]
};
	/** aggregate fields of "vectric.scheduled_emails" */
["vectric_scheduled_emails_aggregate_fields"]: {
		avg?:ModelTypes["vectric_scheduled_emails_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_scheduled_emails_max_fields"],
	min?:ModelTypes["vectric_scheduled_emails_min_fields"],
	stddev?:ModelTypes["vectric_scheduled_emails_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_scheduled_emails_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_scheduled_emails_stddev_samp_fields"],
	sum?:ModelTypes["vectric_scheduled_emails_sum_fields"],
	var_pop?:ModelTypes["vectric_scheduled_emails_var_pop_fields"],
	var_samp?:ModelTypes["vectric_scheduled_emails_var_samp_fields"],
	variance?:ModelTypes["vectric_scheduled_emails_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_scheduled_emails_avg_fields"]: {
		customerId?:number,
	id?:number
};
	/** aggregate max on columns */
["vectric_scheduled_emails_max_fields"]: {
		createdOn?:ModelTypes["timestamp"],
	customerId?:ModelTypes["bigint"],
	id?:number,
	processedOn?:ModelTypes["timestamp"],
	sendTo?:string,
	templateId?:string,
	variables?:string
};
	/** aggregate min on columns */
["vectric_scheduled_emails_min_fields"]: {
		createdOn?:ModelTypes["timestamp"],
	customerId?:ModelTypes["bigint"],
	id?:number,
	processedOn?:ModelTypes["timestamp"],
	sendTo?:string,
	templateId?:string,
	variables?:string
};
	/** response of any mutation on the table "vectric.scheduled_emails" */
["vectric_scheduled_emails_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_scheduled_emails"][]
};
	/** aggregate stddev on columns */
["vectric_scheduled_emails_stddev_fields"]: {
		customerId?:number,
	id?:number
};
	/** aggregate stddev_pop on columns */
["vectric_scheduled_emails_stddev_pop_fields"]: {
		customerId?:number,
	id?:number
};
	/** aggregate stddev_samp on columns */
["vectric_scheduled_emails_stddev_samp_fields"]: {
		customerId?:number,
	id?:number
};
	/** aggregate sum on columns */
["vectric_scheduled_emails_sum_fields"]: {
		customerId?:ModelTypes["bigint"],
	id?:number
};
	/** aggregate var_pop on columns */
["vectric_scheduled_emails_var_pop_fields"]: {
		customerId?:number,
	id?:number
};
	/** aggregate var_samp on columns */
["vectric_scheduled_emails_var_samp_fields"]: {
		customerId?:number,
	id?:number
};
	/** aggregate variance on columns */
["vectric_scheduled_emails_variance_fields"]: {
		customerId?:number,
	id?:number
};
	/** columns and relationships of "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens"]: {
		customerId?:ModelTypes["bigint"],
	expiryDate?:ModelTypes["timestamptz"],
	token:string,
	username:string
};
	/** aggregated selection of "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_aggregate"]: {
		aggregate?:ModelTypes["vectric_security_emailverificationtokens_aggregate_fields"],
	nodes:ModelTypes["vectric_security_emailverificationtokens"][]
};
	/** aggregate fields of "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_aggregate_fields"]: {
		avg?:ModelTypes["vectric_security_emailverificationtokens_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_security_emailverificationtokens_max_fields"],
	min?:ModelTypes["vectric_security_emailverificationtokens_min_fields"],
	stddev?:ModelTypes["vectric_security_emailverificationtokens_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_security_emailverificationtokens_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_security_emailverificationtokens_stddev_samp_fields"],
	sum?:ModelTypes["vectric_security_emailverificationtokens_sum_fields"],
	var_pop?:ModelTypes["vectric_security_emailverificationtokens_var_pop_fields"],
	var_samp?:ModelTypes["vectric_security_emailverificationtokens_var_samp_fields"],
	variance?:ModelTypes["vectric_security_emailverificationtokens_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_security_emailverificationtokens_avg_fields"]: {
		customerId?:number
};
	/** aggregate max on columns */
["vectric_security_emailverificationtokens_max_fields"]: {
		customerId?:ModelTypes["bigint"],
	expiryDate?:ModelTypes["timestamptz"],
	token?:string,
	username?:string
};
	/** aggregate min on columns */
["vectric_security_emailverificationtokens_min_fields"]: {
		customerId?:ModelTypes["bigint"],
	expiryDate?:ModelTypes["timestamptz"],
	token?:string,
	username?:string
};
	/** response of any mutation on the table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_security_emailverificationtokens"][]
};
	/** aggregate stddev on columns */
["vectric_security_emailverificationtokens_stddev_fields"]: {
		customerId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_security_emailverificationtokens_stddev_pop_fields"]: {
		customerId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_security_emailverificationtokens_stddev_samp_fields"]: {
		customerId?:number
};
	/** aggregate sum on columns */
["vectric_security_emailverificationtokens_sum_fields"]: {
		customerId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_security_emailverificationtokens_var_pop_fields"]: {
		customerId?:number
};
	/** aggregate var_samp on columns */
["vectric_security_emailverificationtokens_var_samp_fields"]: {
		customerId?:number
};
	/** aggregate variance on columns */
["vectric_security_emailverificationtokens_variance_fields"]: {
		customerId?:number
};
	/** columns and relationships of "vectric.security_group_authorities" */
["vectric_security_group_authorities"]: {
		authority:string,
	groupId:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.security_group_authorities" */
["vectric_security_group_authorities_aggregate"]: {
		aggregate?:ModelTypes["vectric_security_group_authorities_aggregate_fields"],
	nodes:ModelTypes["vectric_security_group_authorities"][]
};
	/** aggregate fields of "vectric.security_group_authorities" */
["vectric_security_group_authorities_aggregate_fields"]: {
		avg?:ModelTypes["vectric_security_group_authorities_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_security_group_authorities_max_fields"],
	min?:ModelTypes["vectric_security_group_authorities_min_fields"],
	stddev?:ModelTypes["vectric_security_group_authorities_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_security_group_authorities_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_security_group_authorities_stddev_samp_fields"],
	sum?:ModelTypes["vectric_security_group_authorities_sum_fields"],
	var_pop?:ModelTypes["vectric_security_group_authorities_var_pop_fields"],
	var_samp?:ModelTypes["vectric_security_group_authorities_var_samp_fields"],
	variance?:ModelTypes["vectric_security_group_authorities_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_security_group_authorities_avg_fields"]: {
		groupId?:number
};
	/** aggregate max on columns */
["vectric_security_group_authorities_max_fields"]: {
		authority?:string,
	groupId?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_security_group_authorities_min_fields"]: {
		authority?:string,
	groupId?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.security_group_authorities" */
["vectric_security_group_authorities_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_security_group_authorities"][]
};
	/** aggregate stddev on columns */
["vectric_security_group_authorities_stddev_fields"]: {
		groupId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_security_group_authorities_stddev_pop_fields"]: {
		groupId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_security_group_authorities_stddev_samp_fields"]: {
		groupId?:number
};
	/** aggregate sum on columns */
["vectric_security_group_authorities_sum_fields"]: {
		groupId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_security_group_authorities_var_pop_fields"]: {
		groupId?:number
};
	/** aggregate var_samp on columns */
["vectric_security_group_authorities_var_samp_fields"]: {
		groupId?:number
};
	/** aggregate variance on columns */
["vectric_security_group_authorities_variance_fields"]: {
		groupId?:number
};
	/** columns and relationships of "vectric.security_group_members" */
["vectric_security_group_members"]: {
		/** An array relationship */
	groupAuthorities:ModelTypes["vectric_security_group_authorities"][],
	/** An aggregate relationship */
	groupAuthorities_aggregate:ModelTypes["vectric_security_group_authorities_aggregate"],
	groupId:ModelTypes["bigint"],
	id:ModelTypes["bigint"],
	/** An object relationship */
	securityUser?:ModelTypes["vectric_security_users"],
	username?:string
};
	/** aggregated selection of "vectric.security_group_members" */
["vectric_security_group_members_aggregate"]: {
		aggregate?:ModelTypes["vectric_security_group_members_aggregate_fields"],
	nodes:ModelTypes["vectric_security_group_members"][]
};
	/** aggregate fields of "vectric.security_group_members" */
["vectric_security_group_members_aggregate_fields"]: {
		avg?:ModelTypes["vectric_security_group_members_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_security_group_members_max_fields"],
	min?:ModelTypes["vectric_security_group_members_min_fields"],
	stddev?:ModelTypes["vectric_security_group_members_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_security_group_members_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_security_group_members_stddev_samp_fields"],
	sum?:ModelTypes["vectric_security_group_members_sum_fields"],
	var_pop?:ModelTypes["vectric_security_group_members_var_pop_fields"],
	var_samp?:ModelTypes["vectric_security_group_members_var_samp_fields"],
	variance?:ModelTypes["vectric_security_group_members_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_security_group_members_avg_fields"]: {
		groupId?:number,
	id?:number
};
	/** aggregate max on columns */
["vectric_security_group_members_max_fields"]: {
		groupId?:ModelTypes["bigint"],
	id?:ModelTypes["bigint"],
	username?:string
};
	/** aggregate min on columns */
["vectric_security_group_members_min_fields"]: {
		groupId?:ModelTypes["bigint"],
	id?:ModelTypes["bigint"],
	username?:string
};
	/** response of any mutation on the table "vectric.security_group_members" */
["vectric_security_group_members_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_security_group_members"][]
};
	/** aggregate stddev on columns */
["vectric_security_group_members_stddev_fields"]: {
		groupId?:number,
	id?:number
};
	/** aggregate stddev_pop on columns */
["vectric_security_group_members_stddev_pop_fields"]: {
		groupId?:number,
	id?:number
};
	/** aggregate stddev_samp on columns */
["vectric_security_group_members_stddev_samp_fields"]: {
		groupId?:number,
	id?:number
};
	/** aggregate sum on columns */
["vectric_security_group_members_sum_fields"]: {
		groupId?:ModelTypes["bigint"],
	id?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_security_group_members_var_pop_fields"]: {
		groupId?:number,
	id?:number
};
	/** aggregate var_samp on columns */
["vectric_security_group_members_var_samp_fields"]: {
		groupId?:number,
	id?:number
};
	/** aggregate variance on columns */
["vectric_security_group_members_variance_fields"]: {
		groupId?:number,
	id?:number
};
	/** columns and relationships of "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens"]: {
		expiryDate:ModelTypes["timestamptz"],
	token:string,
	username:string
};
	/** aggregated selection of "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_aggregate"]: {
		aggregate?:ModelTypes["vectric_security_passwordresettokens_aggregate_fields"],
	nodes:ModelTypes["vectric_security_passwordresettokens"][]
};
	/** aggregate fields of "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_aggregate_fields"]: {
		count:number,
	max?:ModelTypes["vectric_security_passwordresettokens_max_fields"],
	min?:ModelTypes["vectric_security_passwordresettokens_min_fields"]
};
	/** aggregate max on columns */
["vectric_security_passwordresettokens_max_fields"]: {
		expiryDate?:ModelTypes["timestamptz"],
	token?:string,
	username?:string
};
	/** aggregate min on columns */
["vectric_security_passwordresettokens_min_fields"]: {
		expiryDate?:ModelTypes["timestamptz"],
	token?:string,
	username?:string
};
	/** response of any mutation on the table "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_security_passwordresettokens"][]
};
	/** columns and relationships of "vectric.security_userinvitations" */
["vectric_security_userinvitations"]: {
		acceptedDate?:ModelTypes["timestamptz"],
	adminofid?:ModelTypes["bigint"],
	createDate?:ModelTypes["timestamptz"],
	customerId?:ModelTypes["bigint"],
	expirydate?:ModelTypes["timestamptz"],
	staffofid?:ModelTypes["bigint"],
	token:string,
	username:string
};
	/** aggregated selection of "vectric.security_userinvitations" */
["vectric_security_userinvitations_aggregate"]: {
		aggregate?:ModelTypes["vectric_security_userinvitations_aggregate_fields"],
	nodes:ModelTypes["vectric_security_userinvitations"][]
};
	/** aggregate fields of "vectric.security_userinvitations" */
["vectric_security_userinvitations_aggregate_fields"]: {
		avg?:ModelTypes["vectric_security_userinvitations_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_security_userinvitations_max_fields"],
	min?:ModelTypes["vectric_security_userinvitations_min_fields"],
	stddev?:ModelTypes["vectric_security_userinvitations_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_security_userinvitations_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_security_userinvitations_stddev_samp_fields"],
	sum?:ModelTypes["vectric_security_userinvitations_sum_fields"],
	var_pop?:ModelTypes["vectric_security_userinvitations_var_pop_fields"],
	var_samp?:ModelTypes["vectric_security_userinvitations_var_samp_fields"],
	variance?:ModelTypes["vectric_security_userinvitations_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_security_userinvitations_avg_fields"]: {
		adminofid?:number,
	customerId?:number,
	staffofid?:number
};
	/** aggregate max on columns */
["vectric_security_userinvitations_max_fields"]: {
		acceptedDate?:ModelTypes["timestamptz"],
	adminofid?:ModelTypes["bigint"],
	createDate?:ModelTypes["timestamptz"],
	customerId?:ModelTypes["bigint"],
	expirydate?:ModelTypes["timestamptz"],
	staffofid?:ModelTypes["bigint"],
	token?:string,
	username?:string
};
	/** aggregate min on columns */
["vectric_security_userinvitations_min_fields"]: {
		acceptedDate?:ModelTypes["timestamptz"],
	adminofid?:ModelTypes["bigint"],
	createDate?:ModelTypes["timestamptz"],
	customerId?:ModelTypes["bigint"],
	expirydate?:ModelTypes["timestamptz"],
	staffofid?:ModelTypes["bigint"],
	token?:string,
	username?:string
};
	/** response of any mutation on the table "vectric.security_userinvitations" */
["vectric_security_userinvitations_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_security_userinvitations"][]
};
	/** aggregate stddev on columns */
["vectric_security_userinvitations_stddev_fields"]: {
		adminofid?:number,
	customerId?:number,
	staffofid?:number
};
	/** aggregate stddev_pop on columns */
["vectric_security_userinvitations_stddev_pop_fields"]: {
		adminofid?:number,
	customerId?:number,
	staffofid?:number
};
	/** aggregate stddev_samp on columns */
["vectric_security_userinvitations_stddev_samp_fields"]: {
		adminofid?:number,
	customerId?:number,
	staffofid?:number
};
	/** aggregate sum on columns */
["vectric_security_userinvitations_sum_fields"]: {
		adminofid?:ModelTypes["bigint"],
	customerId?:ModelTypes["bigint"],
	staffofid?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_security_userinvitations_var_pop_fields"]: {
		adminofid?:number,
	customerId?:number,
	staffofid?:number
};
	/** aggregate var_samp on columns */
["vectric_security_userinvitations_var_samp_fields"]: {
		adminofid?:number,
	customerId?:number,
	staffofid?:number
};
	/** aggregate variance on columns */
["vectric_security_userinvitations_variance_fields"]: {
		adminofid?:number,
	customerId?:number,
	staffofid?:number
};
	/** columns and relationships of "vectric.security_users" */
["vectric_security_users"]: {
		accountNonExpired:boolean,
	credentialsNonExpired:boolean,
	enabled:boolean,
	password:string,
	salesCustomerId?:ModelTypes["bigint"],
	/** An array relationship */
	securityGroups:ModelTypes["vectric_security_group_members"][],
	/** An aggregate relationship */
	securityGroups_aggregate:ModelTypes["vectric_security_group_members_aggregate"],
	username:string,
	voucherCode?:string
};
	/** aggregated selection of "vectric.security_users" */
["vectric_security_users_aggregate"]: {
		aggregate?:ModelTypes["vectric_security_users_aggregate_fields"],
	nodes:ModelTypes["vectric_security_users"][]
};
	/** aggregate fields of "vectric.security_users" */
["vectric_security_users_aggregate_fields"]: {
		avg?:ModelTypes["vectric_security_users_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_security_users_max_fields"],
	min?:ModelTypes["vectric_security_users_min_fields"],
	stddev?:ModelTypes["vectric_security_users_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_security_users_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_security_users_stddev_samp_fields"],
	sum?:ModelTypes["vectric_security_users_sum_fields"],
	var_pop?:ModelTypes["vectric_security_users_var_pop_fields"],
	var_samp?:ModelTypes["vectric_security_users_var_samp_fields"],
	variance?:ModelTypes["vectric_security_users_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_security_users_avg_fields"]: {
		salesCustomerId?:number
};
	/** aggregate max on columns */
["vectric_security_users_max_fields"]: {
		password?:string,
	salesCustomerId?:ModelTypes["bigint"],
	username?:string,
	voucherCode?:string
};
	/** aggregate min on columns */
["vectric_security_users_min_fields"]: {
		password?:string,
	salesCustomerId?:ModelTypes["bigint"],
	username?:string,
	voucherCode?:string
};
	/** response of any mutation on the table "vectric.security_users" */
["vectric_security_users_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_security_users"][]
};
	/** aggregate stddev on columns */
["vectric_security_users_stddev_fields"]: {
		salesCustomerId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_security_users_stddev_pop_fields"]: {
		salesCustomerId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_security_users_stddev_samp_fields"]: {
		salesCustomerId?:number
};
	/** aggregate sum on columns */
["vectric_security_users_sum_fields"]: {
		salesCustomerId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_security_users_var_pop_fields"]: {
		salesCustomerId?:number
};
	/** aggregate var_samp on columns */
["vectric_security_users_var_samp_fields"]: {
		salesCustomerId?:number
};
	/** aggregate variance on columns */
["vectric_security_users_variance_fields"]: {
		salesCustomerId?:number
};
	/** columns and relationships of "vectric.site_option_location" */
["vectric_site_option_location"]: {
		locationid:ModelTypes["bigint"],
	name?:string
};
	/** aggregated selection of "vectric.site_option_location" */
["vectric_site_option_location_aggregate"]: {
		aggregate?:ModelTypes["vectric_site_option_location_aggregate_fields"],
	nodes:ModelTypes["vectric_site_option_location"][]
};
	/** aggregate fields of "vectric.site_option_location" */
["vectric_site_option_location_aggregate_fields"]: {
		avg?:ModelTypes["vectric_site_option_location_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_site_option_location_max_fields"],
	min?:ModelTypes["vectric_site_option_location_min_fields"],
	stddev?:ModelTypes["vectric_site_option_location_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_site_option_location_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_site_option_location_stddev_samp_fields"],
	sum?:ModelTypes["vectric_site_option_location_sum_fields"],
	var_pop?:ModelTypes["vectric_site_option_location_var_pop_fields"],
	var_samp?:ModelTypes["vectric_site_option_location_var_samp_fields"],
	variance?:ModelTypes["vectric_site_option_location_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_site_option_location_avg_fields"]: {
		locationid?:number
};
	/** aggregate max on columns */
["vectric_site_option_location_max_fields"]: {
		locationid?:ModelTypes["bigint"],
	name?:string
};
	/** aggregate min on columns */
["vectric_site_option_location_min_fields"]: {
		locationid?:ModelTypes["bigint"],
	name?:string
};
	/** response of any mutation on the table "vectric.site_option_location" */
["vectric_site_option_location_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_site_option_location"][]
};
	/** aggregate stddev on columns */
["vectric_site_option_location_stddev_fields"]: {
		locationid?:number
};
	/** aggregate stddev_pop on columns */
["vectric_site_option_location_stddev_pop_fields"]: {
		locationid?:number
};
	/** aggregate stddev_samp on columns */
["vectric_site_option_location_stddev_samp_fields"]: {
		locationid?:number
};
	/** aggregate sum on columns */
["vectric_site_option_location_sum_fields"]: {
		locationid?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_site_option_location_var_pop_fields"]: {
		locationid?:number
};
	/** aggregate var_samp on columns */
["vectric_site_option_location_var_samp_fields"]: {
		locationid?:number
};
	/** aggregate variance on columns */
["vectric_site_option_location_variance_fields"]: {
		locationid?:number
};
	/** columns and relationships of "vectric.site_options" */
["vectric_site_options"]: {
		description?:string,
	optionid:ModelTypes["bigint"],
	optionname:string,
	/** An object relationship */
	site_optiositeOptionLocationn_location:ModelTypes["vectric_site_option_location"],
	siteid:ModelTypes["bigint"],
	stringval?:string,
	value?:boolean
};
	/** aggregated selection of "vectric.site_options" */
["vectric_site_options_aggregate"]: {
		aggregate?:ModelTypes["vectric_site_options_aggregate_fields"],
	nodes:ModelTypes["vectric_site_options"][]
};
	/** aggregate fields of "vectric.site_options" */
["vectric_site_options_aggregate_fields"]: {
		avg?:ModelTypes["vectric_site_options_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_site_options_max_fields"],
	min?:ModelTypes["vectric_site_options_min_fields"],
	stddev?:ModelTypes["vectric_site_options_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_site_options_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_site_options_stddev_samp_fields"],
	sum?:ModelTypes["vectric_site_options_sum_fields"],
	var_pop?:ModelTypes["vectric_site_options_var_pop_fields"],
	var_samp?:ModelTypes["vectric_site_options_var_samp_fields"],
	variance?:ModelTypes["vectric_site_options_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_site_options_avg_fields"]: {
		optionid?:number,
	siteid?:number
};
	/** aggregate max on columns */
["vectric_site_options_max_fields"]: {
		description?:string,
	optionid?:ModelTypes["bigint"],
	optionname?:string,
	siteid?:ModelTypes["bigint"],
	stringval?:string
};
	/** aggregate min on columns */
["vectric_site_options_min_fields"]: {
		description?:string,
	optionid?:ModelTypes["bigint"],
	optionname?:string,
	siteid?:ModelTypes["bigint"],
	stringval?:string
};
	/** response of any mutation on the table "vectric.site_options" */
["vectric_site_options_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_site_options"][]
};
	/** aggregate stddev on columns */
["vectric_site_options_stddev_fields"]: {
		optionid?:number,
	siteid?:number
};
	/** aggregate stddev_pop on columns */
["vectric_site_options_stddev_pop_fields"]: {
		optionid?:number,
	siteid?:number
};
	/** aggregate stddev_samp on columns */
["vectric_site_options_stddev_samp_fields"]: {
		optionid?:number,
	siteid?:number
};
	/** aggregate sum on columns */
["vectric_site_options_sum_fields"]: {
		optionid?:ModelTypes["bigint"],
	siteid?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_site_options_var_pop_fields"]: {
		optionid?:number,
	siteid?:number
};
	/** aggregate var_samp on columns */
["vectric_site_options_var_samp_fields"]: {
		optionid?:number,
	siteid?:number
};
	/** aggregate variance on columns */
["vectric_site_options_variance_fields"]: {
		optionid?:number,
	siteid?:number
};
	/** columns and relationships of "vectric.subscription_contract_status" */
["vectric_subscription_contract_status"]: {
		status:string
};
	/** aggregated selection of "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_aggregate"]: {
		aggregate?:ModelTypes["vectric_subscription_contract_status_aggregate_fields"],
	nodes:ModelTypes["vectric_subscription_contract_status"][]
};
	/** aggregate fields of "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_aggregate_fields"]: {
		count:number,
	max?:ModelTypes["vectric_subscription_contract_status_max_fields"],
	min?:ModelTypes["vectric_subscription_contract_status_min_fields"]
};
	/** aggregate max on columns */
["vectric_subscription_contract_status_max_fields"]: {
		status?:string
};
	/** aggregate min on columns */
["vectric_subscription_contract_status_min_fields"]: {
		status?:string
};
	/** response of any mutation on the table "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_subscription_contract_status"][]
};
	/** columns and relationships of "vectric.subscription_contracts" */
["vectric_subscription_contracts"]: {
		dateEnding:ModelTypes["timestamp"],
	dateStarted:ModelTypes["timestamp"],
	/** An array relationship */
	events:ModelTypes["vectric_subscription_events"][],
	/** An aggregate relationship */
	events_aggregate:ModelTypes["vectric_subscription_events_aggregate"],
	/** An object relationship */
	orderItem:ModelTypes["vectric_organization_order_items"],
	orderItemId:number,
	status:string,
	subscriptionContractId:number,
	subscriptionId:string
};
	/** aggregated selection of "vectric.subscription_contracts" */
["vectric_subscription_contracts_aggregate"]: {
		aggregate?:ModelTypes["vectric_subscription_contracts_aggregate_fields"],
	nodes:ModelTypes["vectric_subscription_contracts"][]
};
	/** aggregate fields of "vectric.subscription_contracts" */
["vectric_subscription_contracts_aggregate_fields"]: {
		avg?:ModelTypes["vectric_subscription_contracts_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_subscription_contracts_max_fields"],
	min?:ModelTypes["vectric_subscription_contracts_min_fields"],
	stddev?:ModelTypes["vectric_subscription_contracts_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_subscription_contracts_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_subscription_contracts_stddev_samp_fields"],
	sum?:ModelTypes["vectric_subscription_contracts_sum_fields"],
	var_pop?:ModelTypes["vectric_subscription_contracts_var_pop_fields"],
	var_samp?:ModelTypes["vectric_subscription_contracts_var_samp_fields"],
	variance?:ModelTypes["vectric_subscription_contracts_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_subscription_contracts_avg_fields"]: {
		orderItemId?:number,
	subscriptionContractId?:number
};
	/** aggregate max on columns */
["vectric_subscription_contracts_max_fields"]: {
		dateEnding?:ModelTypes["timestamp"],
	dateStarted?:ModelTypes["timestamp"],
	orderItemId?:number,
	status?:string,
	subscriptionContractId?:number,
	subscriptionId?:string
};
	/** aggregate min on columns */
["vectric_subscription_contracts_min_fields"]: {
		dateEnding?:ModelTypes["timestamp"],
	dateStarted?:ModelTypes["timestamp"],
	orderItemId?:number,
	status?:string,
	subscriptionContractId?:number,
	subscriptionId?:string
};
	/** response of any mutation on the table "vectric.subscription_contracts" */
["vectric_subscription_contracts_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_subscription_contracts"][]
};
	/** aggregate stddev on columns */
["vectric_subscription_contracts_stddev_fields"]: {
		orderItemId?:number,
	subscriptionContractId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_subscription_contracts_stddev_pop_fields"]: {
		orderItemId?:number,
	subscriptionContractId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_subscription_contracts_stddev_samp_fields"]: {
		orderItemId?:number,
	subscriptionContractId?:number
};
	/** aggregate sum on columns */
["vectric_subscription_contracts_sum_fields"]: {
		orderItemId?:number,
	subscriptionContractId?:number
};
	/** aggregate var_pop on columns */
["vectric_subscription_contracts_var_pop_fields"]: {
		orderItemId?:number,
	subscriptionContractId?:number
};
	/** aggregate var_samp on columns */
["vectric_subscription_contracts_var_samp_fields"]: {
		orderItemId?:number,
	subscriptionContractId?:number
};
	/** aggregate variance on columns */
["vectric_subscription_contracts_variance_fields"]: {
		orderItemId?:number,
	subscriptionContractId?:number
};
	/** columns and relationships of "vectric.subscription_events" */
["vectric_subscription_events"]: {
		actionTaken:string,
	dateCreated:ModelTypes["timestamp"],
	dateProcessed?:ModelTypes["timestamp"],
	eventId:number,
	eventType:string,
	fastspringInternalOrderId?:string,
	fastspringOrderReference?:string,
	fastspringSubscriptionId:string,
	orderItemId?:number,
	subscriptionContractId?:number,
	subscriptionDateStarted?:ModelTypes["timestamp"],
	subscriptionDeactivationDate?:ModelTypes["timestamp"],
	subscriptionNextRebillDate?:ModelTypes["timestamp"]
};
	/** aggregated selection of "vectric.subscription_events" */
["vectric_subscription_events_aggregate"]: {
		aggregate?:ModelTypes["vectric_subscription_events_aggregate_fields"],
	nodes:ModelTypes["vectric_subscription_events"][]
};
	/** aggregate fields of "vectric.subscription_events" */
["vectric_subscription_events_aggregate_fields"]: {
		avg?:ModelTypes["vectric_subscription_events_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_subscription_events_max_fields"],
	min?:ModelTypes["vectric_subscription_events_min_fields"],
	stddev?:ModelTypes["vectric_subscription_events_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_subscription_events_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_subscription_events_stddev_samp_fields"],
	sum?:ModelTypes["vectric_subscription_events_sum_fields"],
	var_pop?:ModelTypes["vectric_subscription_events_var_pop_fields"],
	var_samp?:ModelTypes["vectric_subscription_events_var_samp_fields"],
	variance?:ModelTypes["vectric_subscription_events_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_subscription_events_avg_fields"]: {
		eventId?:number,
	orderItemId?:number,
	subscriptionContractId?:number
};
	/** aggregate max on columns */
["vectric_subscription_events_max_fields"]: {
		actionTaken?:string,
	dateCreated?:ModelTypes["timestamp"],
	dateProcessed?:ModelTypes["timestamp"],
	eventId?:number,
	eventType?:string,
	fastspringInternalOrderId?:string,
	fastspringOrderReference?:string,
	fastspringSubscriptionId?:string,
	orderItemId?:number,
	subscriptionContractId?:number,
	subscriptionDateStarted?:ModelTypes["timestamp"],
	subscriptionDeactivationDate?:ModelTypes["timestamp"],
	subscriptionNextRebillDate?:ModelTypes["timestamp"]
};
	/** aggregate min on columns */
["vectric_subscription_events_min_fields"]: {
		actionTaken?:string,
	dateCreated?:ModelTypes["timestamp"],
	dateProcessed?:ModelTypes["timestamp"],
	eventId?:number,
	eventType?:string,
	fastspringInternalOrderId?:string,
	fastspringOrderReference?:string,
	fastspringSubscriptionId?:string,
	orderItemId?:number,
	subscriptionContractId?:number,
	subscriptionDateStarted?:ModelTypes["timestamp"],
	subscriptionDeactivationDate?:ModelTypes["timestamp"],
	subscriptionNextRebillDate?:ModelTypes["timestamp"]
};
	/** response of any mutation on the table "vectric.subscription_events" */
["vectric_subscription_events_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_subscription_events"][]
};
	/** aggregate stddev on columns */
["vectric_subscription_events_stddev_fields"]: {
		eventId?:number,
	orderItemId?:number,
	subscriptionContractId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_subscription_events_stddev_pop_fields"]: {
		eventId?:number,
	orderItemId?:number,
	subscriptionContractId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_subscription_events_stddev_samp_fields"]: {
		eventId?:number,
	orderItemId?:number,
	subscriptionContractId?:number
};
	/** aggregate sum on columns */
["vectric_subscription_events_sum_fields"]: {
		eventId?:number,
	orderItemId?:number,
	subscriptionContractId?:number
};
	/** aggregate var_pop on columns */
["vectric_subscription_events_var_pop_fields"]: {
		eventId?:number,
	orderItemId?:number,
	subscriptionContractId?:number
};
	/** aggregate var_samp on columns */
["vectric_subscription_events_var_samp_fields"]: {
		eventId?:number,
	orderItemId?:number,
	subscriptionContractId?:number
};
	/** aggregate variance on columns */
["vectric_subscription_events_variance_fields"]: {
		eventId?:number,
	orderItemId?:number,
	subscriptionContractId?:number
};
	/** columns and relationships of "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token"]: {
		/** An object relationship */
	customer:ModelTypes["vectric_sales_customers"],
	customerId:ModelTypes["bigint"],
	dateExpired:ModelTypes["timestamptz"],
	dateGenerated:ModelTypes["timestamptz"],
	/** An object relationship */
	product:ModelTypes["vectric_products_products"],
	productId:ModelTypes["bigint"],
	token:string,
	toolpathSaverTokenId:ModelTypes["bigint"],
	used:number
};
	/** aggregated selection of "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_aggregate"]: {
		aggregate?:ModelTypes["vectric_toolpath_saver_token_aggregate_fields"],
	nodes:ModelTypes["vectric_toolpath_saver_token"][]
};
	/** aggregate fields of "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_aggregate_fields"]: {
		avg?:ModelTypes["vectric_toolpath_saver_token_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_toolpath_saver_token_max_fields"],
	min?:ModelTypes["vectric_toolpath_saver_token_min_fields"],
	stddev?:ModelTypes["vectric_toolpath_saver_token_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_toolpath_saver_token_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_toolpath_saver_token_stddev_samp_fields"],
	sum?:ModelTypes["vectric_toolpath_saver_token_sum_fields"],
	var_pop?:ModelTypes["vectric_toolpath_saver_token_var_pop_fields"],
	var_samp?:ModelTypes["vectric_toolpath_saver_token_var_samp_fields"],
	variance?:ModelTypes["vectric_toolpath_saver_token_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_toolpath_saver_token_avg_fields"]: {
		customerId?:number,
	productId?:number,
	toolpathSaverTokenId?:number,
	used?:number
};
	/** aggregate max on columns */
["vectric_toolpath_saver_token_max_fields"]: {
		customerId?:ModelTypes["bigint"],
	dateExpired?:ModelTypes["timestamptz"],
	dateGenerated?:ModelTypes["timestamptz"],
	productId?:ModelTypes["bigint"],
	token?:string,
	toolpathSaverTokenId?:ModelTypes["bigint"],
	used?:number
};
	/** aggregate min on columns */
["vectric_toolpath_saver_token_min_fields"]: {
		customerId?:ModelTypes["bigint"],
	dateExpired?:ModelTypes["timestamptz"],
	dateGenerated?:ModelTypes["timestamptz"],
	productId?:ModelTypes["bigint"],
	token?:string,
	toolpathSaverTokenId?:ModelTypes["bigint"],
	used?:number
};
	/** response of any mutation on the table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_toolpath_saver_token"][]
};
	/** aggregate stddev on columns */
["vectric_toolpath_saver_token_stddev_fields"]: {
		customerId?:number,
	productId?:number,
	toolpathSaverTokenId?:number,
	used?:number
};
	/** aggregate stddev_pop on columns */
["vectric_toolpath_saver_token_stddev_pop_fields"]: {
		customerId?:number,
	productId?:number,
	toolpathSaverTokenId?:number,
	used?:number
};
	/** aggregate stddev_samp on columns */
["vectric_toolpath_saver_token_stddev_samp_fields"]: {
		customerId?:number,
	productId?:number,
	toolpathSaverTokenId?:number,
	used?:number
};
	/** aggregate sum on columns */
["vectric_toolpath_saver_token_sum_fields"]: {
		customerId?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"],
	toolpathSaverTokenId?:ModelTypes["bigint"],
	used?:number
};
	/** aggregate var_pop on columns */
["vectric_toolpath_saver_token_var_pop_fields"]: {
		customerId?:number,
	productId?:number,
	toolpathSaverTokenId?:number,
	used?:number
};
	/** aggregate var_samp on columns */
["vectric_toolpath_saver_token_var_samp_fields"]: {
		customerId?:number,
	productId?:number,
	toolpathSaverTokenId?:number,
	used?:number
};
	/** aggregate variance on columns */
["vectric_toolpath_saver_token_variance_fields"]: {
		customerId?:number,
	productId?:number,
	toolpathSaverTokenId?:number,
	used?:number
};
	/** columns and relationships of "vectric.trial_order" */
["vectric_trial_order"]: {
		/** An object relationship */
	customer:ModelTypes["vectric_sales_customers"],
	customerId:ModelTypes["bigint"],
	endDate?:ModelTypes["timestamptz"],
	orderId:ModelTypes["bigint"],
	/** An object relationship */
	product:ModelTypes["vectric_products_products"],
	productId:ModelTypes["bigint"],
	startDate?:ModelTypes["timestamptz"],
	valid:boolean
};
	/** aggregated selection of "vectric.trial_order" */
["vectric_trial_order_aggregate"]: {
		aggregate?:ModelTypes["vectric_trial_order_aggregate_fields"],
	nodes:ModelTypes["vectric_trial_order"][]
};
	/** aggregate fields of "vectric.trial_order" */
["vectric_trial_order_aggregate_fields"]: {
		avg?:ModelTypes["vectric_trial_order_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_trial_order_max_fields"],
	min?:ModelTypes["vectric_trial_order_min_fields"],
	stddev?:ModelTypes["vectric_trial_order_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_trial_order_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_trial_order_stddev_samp_fields"],
	sum?:ModelTypes["vectric_trial_order_sum_fields"],
	var_pop?:ModelTypes["vectric_trial_order_var_pop_fields"],
	var_samp?:ModelTypes["vectric_trial_order_var_samp_fields"],
	variance?:ModelTypes["vectric_trial_order_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_trial_order_avg_fields"]: {
		customerId?:number,
	orderId?:number,
	productId?:number
};
	/** aggregate max on columns */
["vectric_trial_order_max_fields"]: {
		customerId?:ModelTypes["bigint"],
	endDate?:ModelTypes["timestamptz"],
	orderId?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"],
	startDate?:ModelTypes["timestamptz"]
};
	/** aggregate min on columns */
["vectric_trial_order_min_fields"]: {
		customerId?:ModelTypes["bigint"],
	endDate?:ModelTypes["timestamptz"],
	orderId?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"],
	startDate?:ModelTypes["timestamptz"]
};
	/** response of any mutation on the table "vectric.trial_order" */
["vectric_trial_order_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_trial_order"][]
};
	/** aggregate stddev on columns */
["vectric_trial_order_stddev_fields"]: {
		customerId?:number,
	orderId?:number,
	productId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_trial_order_stddev_pop_fields"]: {
		customerId?:number,
	orderId?:number,
	productId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_trial_order_stddev_samp_fields"]: {
		customerId?:number,
	orderId?:number,
	productId?:number
};
	/** aggregate sum on columns */
["vectric_trial_order_sum_fields"]: {
		customerId?:ModelTypes["bigint"],
	orderId?:ModelTypes["bigint"],
	productId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_trial_order_var_pop_fields"]: {
		customerId?:number,
	orderId?:number,
	productId?:number
};
	/** aggregate var_samp on columns */
["vectric_trial_order_var_samp_fields"]: {
		customerId?:number,
	orderId?:number,
	productId?:number
};
	/** aggregate variance on columns */
["vectric_trial_order_variance_fields"]: {
		customerId?:number,
	orderId?:number,
	productId?:number
};
	/** columns and relationships of "vectric.update_requests" */
["vectric_update_requests"]: {
		dateAccessed?:ModelTypes["timestamptz"],
	ipAddress?:string,
	majorVersion?:ModelTypes["bigint"],
	minorVersionOOX?:ModelTypes["bigint"],
	minorVersionOXO?:ModelTypes["bigint"],
	minorVersionXOO?:ModelTypes["bigint"],
	osMajorVersion?:ModelTypes["bigint"],
	osMinorVersion?:ModelTypes["bigint"],
	productName?:string,
	requestId:ModelTypes["bigint"],
	wProcessorArch?:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.update_requests" */
["vectric_update_requests_aggregate"]: {
		aggregate?:ModelTypes["vectric_update_requests_aggregate_fields"],
	nodes:ModelTypes["vectric_update_requests"][]
};
	/** aggregate fields of "vectric.update_requests" */
["vectric_update_requests_aggregate_fields"]: {
		avg?:ModelTypes["vectric_update_requests_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_update_requests_max_fields"],
	min?:ModelTypes["vectric_update_requests_min_fields"],
	stddev?:ModelTypes["vectric_update_requests_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_update_requests_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_update_requests_stddev_samp_fields"],
	sum?:ModelTypes["vectric_update_requests_sum_fields"],
	var_pop?:ModelTypes["vectric_update_requests_var_pop_fields"],
	var_samp?:ModelTypes["vectric_update_requests_var_samp_fields"],
	variance?:ModelTypes["vectric_update_requests_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_update_requests_avg_fields"]: {
		majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	osMajorVersion?:number,
	osMinorVersion?:number,
	requestId?:number,
	wProcessorArch?:number
};
	/** aggregate max on columns */
["vectric_update_requests_max_fields"]: {
		dateAccessed?:ModelTypes["timestamptz"],
	ipAddress?:string,
	majorVersion?:ModelTypes["bigint"],
	minorVersionOOX?:ModelTypes["bigint"],
	minorVersionOXO?:ModelTypes["bigint"],
	minorVersionXOO?:ModelTypes["bigint"],
	osMajorVersion?:ModelTypes["bigint"],
	osMinorVersion?:ModelTypes["bigint"],
	productName?:string,
	requestId?:ModelTypes["bigint"],
	wProcessorArch?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_update_requests_min_fields"]: {
		dateAccessed?:ModelTypes["timestamptz"],
	ipAddress?:string,
	majorVersion?:ModelTypes["bigint"],
	minorVersionOOX?:ModelTypes["bigint"],
	minorVersionOXO?:ModelTypes["bigint"],
	minorVersionXOO?:ModelTypes["bigint"],
	osMajorVersion?:ModelTypes["bigint"],
	osMinorVersion?:ModelTypes["bigint"],
	productName?:string,
	requestId?:ModelTypes["bigint"],
	wProcessorArch?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.update_requests" */
["vectric_update_requests_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_update_requests"][]
};
	/** aggregate stddev on columns */
["vectric_update_requests_stddev_fields"]: {
		majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	osMajorVersion?:number,
	osMinorVersion?:number,
	requestId?:number,
	wProcessorArch?:number
};
	/** aggregate stddev_pop on columns */
["vectric_update_requests_stddev_pop_fields"]: {
		majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	osMajorVersion?:number,
	osMinorVersion?:number,
	requestId?:number,
	wProcessorArch?:number
};
	/** aggregate stddev_samp on columns */
["vectric_update_requests_stddev_samp_fields"]: {
		majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	osMajorVersion?:number,
	osMinorVersion?:number,
	requestId?:number,
	wProcessorArch?:number
};
	/** aggregate sum on columns */
["vectric_update_requests_sum_fields"]: {
		majorVersion?:ModelTypes["bigint"],
	minorVersionOOX?:ModelTypes["bigint"],
	minorVersionOXO?:ModelTypes["bigint"],
	minorVersionXOO?:ModelTypes["bigint"],
	osMajorVersion?:ModelTypes["bigint"],
	osMinorVersion?:ModelTypes["bigint"],
	requestId?:ModelTypes["bigint"],
	wProcessorArch?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_update_requests_var_pop_fields"]: {
		majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	osMajorVersion?:number,
	osMinorVersion?:number,
	requestId?:number,
	wProcessorArch?:number
};
	/** aggregate var_samp on columns */
["vectric_update_requests_var_samp_fields"]: {
		majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	osMajorVersion?:number,
	osMinorVersion?:number,
	requestId?:number,
	wProcessorArch?:number
};
	/** aggregate variance on columns */
["vectric_update_requests_variance_fields"]: {
		majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	osMajorVersion?:number,
	osMinorVersion?:number,
	requestId?:number,
	wProcessorArch?:number
};
	/** columns and relationships of "vectric.upgrade_tokens" */
["vectric_upgrade_tokens"]: {
		customerId:ModelTypes["bigint"],
	dateCreated:ModelTypes["timestamptz"],
	dateUsed?:ModelTypes["timestamptz"],
	/** An object relationship */
	fromProduct:ModelTypes["vectric_sales_salesitem_products"],
	orderItemProductId:ModelTypes["bigint"],
	/** An object relationship */
	toProduct?:ModelTypes["vectric_products_upgrade_eligibility"],
	token:string,
	upgradeEligibilityId?:ModelTypes["bigint"],
	upgradedToOrderItemProduct?:ModelTypes["bigint"],
	used:boolean
};
	/** aggregated selection of "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_aggregate"]: {
		aggregate?:ModelTypes["vectric_upgrade_tokens_aggregate_fields"],
	nodes:ModelTypes["vectric_upgrade_tokens"][]
};
	/** aggregate fields of "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_aggregate_fields"]: {
		avg?:ModelTypes["vectric_upgrade_tokens_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_upgrade_tokens_max_fields"],
	min?:ModelTypes["vectric_upgrade_tokens_min_fields"],
	stddev?:ModelTypes["vectric_upgrade_tokens_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_upgrade_tokens_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_upgrade_tokens_stddev_samp_fields"],
	sum?:ModelTypes["vectric_upgrade_tokens_sum_fields"],
	var_pop?:ModelTypes["vectric_upgrade_tokens_var_pop_fields"],
	var_samp?:ModelTypes["vectric_upgrade_tokens_var_samp_fields"],
	variance?:ModelTypes["vectric_upgrade_tokens_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_upgrade_tokens_avg_fields"]: {
		customerId?:number,
	orderItemProductId?:number,
	upgradeEligibilityId?:number,
	upgradedToOrderItemProduct?:number
};
	/** aggregate max on columns */
["vectric_upgrade_tokens_max_fields"]: {
		customerId?:ModelTypes["bigint"],
	dateCreated?:ModelTypes["timestamptz"],
	dateUsed?:ModelTypes["timestamptz"],
	orderItemProductId?:ModelTypes["bigint"],
	token?:string,
	upgradeEligibilityId?:ModelTypes["bigint"],
	upgradedToOrderItemProduct?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_upgrade_tokens_min_fields"]: {
		customerId?:ModelTypes["bigint"],
	dateCreated?:ModelTypes["timestamptz"],
	dateUsed?:ModelTypes["timestamptz"],
	orderItemProductId?:ModelTypes["bigint"],
	token?:string,
	upgradeEligibilityId?:ModelTypes["bigint"],
	upgradedToOrderItemProduct?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_upgrade_tokens"][]
};
	/** aggregate stddev on columns */
["vectric_upgrade_tokens_stddev_fields"]: {
		customerId?:number,
	orderItemProductId?:number,
	upgradeEligibilityId?:number,
	upgradedToOrderItemProduct?:number
};
	/** aggregate stddev_pop on columns */
["vectric_upgrade_tokens_stddev_pop_fields"]: {
		customerId?:number,
	orderItemProductId?:number,
	upgradeEligibilityId?:number,
	upgradedToOrderItemProduct?:number
};
	/** aggregate stddev_samp on columns */
["vectric_upgrade_tokens_stddev_samp_fields"]: {
		customerId?:number,
	orderItemProductId?:number,
	upgradeEligibilityId?:number,
	upgradedToOrderItemProduct?:number
};
	/** aggregate sum on columns */
["vectric_upgrade_tokens_sum_fields"]: {
		customerId?:ModelTypes["bigint"],
	orderItemProductId?:ModelTypes["bigint"],
	upgradeEligibilityId?:ModelTypes["bigint"],
	upgradedToOrderItemProduct?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_upgrade_tokens_var_pop_fields"]: {
		customerId?:number,
	orderItemProductId?:number,
	upgradeEligibilityId?:number,
	upgradedToOrderItemProduct?:number
};
	/** aggregate var_samp on columns */
["vectric_upgrade_tokens_var_samp_fields"]: {
		customerId?:number,
	orderItemProductId?:number,
	upgradeEligibilityId?:number,
	upgradedToOrderItemProduct?:number
};
	/** aggregate variance on columns */
["vectric_upgrade_tokens_variance_fields"]: {
		customerId?:number,
	orderItemProductId?:number,
	upgradeEligibilityId?:number,
	upgradedToOrderItemProduct?:number
};
	/** columns and relationships of "vectric.upgrades_feature" */
["vectric_upgrades_feature"]: {
		enabled:boolean,
	extendedDescription?:string,
	featureId:string,
	title?:string,
	/** An array relationship */
	upgradeProductTypeFeatures:ModelTypes["vectric_upgrades_product_type_feature"][],
	/** An aggregate relationship */
	upgradeProductTypeFeatures_aggregate:ModelTypes["vectric_upgrades_product_type_feature_aggregate"],
	/** fetch data from the table: "vectric.upgrades_version_feature" */
	upgradeVersionFeatures:ModelTypes["vectric_upgrades_version_feature"][],
	/** An aggregate relationship */
	upgradeVersionFeatures_aggregate:ModelTypes["vectric_upgrades_version_feature_aggregate"]
};
	/** aggregated selection of "vectric.upgrades_feature" */
["vectric_upgrades_feature_aggregate"]: {
		aggregate?:ModelTypes["vectric_upgrades_feature_aggregate_fields"],
	nodes:ModelTypes["vectric_upgrades_feature"][]
};
	/** aggregate fields of "vectric.upgrades_feature" */
["vectric_upgrades_feature_aggregate_fields"]: {
		count:number,
	max?:ModelTypes["vectric_upgrades_feature_max_fields"],
	min?:ModelTypes["vectric_upgrades_feature_min_fields"]
};
	/** aggregate max on columns */
["vectric_upgrades_feature_max_fields"]: {
		extendedDescription?:string,
	featureId?:string,
	title?:string
};
	/** aggregate min on columns */
["vectric_upgrades_feature_min_fields"]: {
		extendedDescription?:string,
	featureId?:string,
	title?:string
};
	/** response of any mutation on the table "vectric.upgrades_feature" */
["vectric_upgrades_feature_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_upgrades_feature"][]
};
	/** columns and relationships of "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature"]: {
		feature?:string,
	fromProductType:ModelTypes["bigint"],
	/** An object relationship */
	fromProductTypeObject:ModelTypes["vectric_products_producttype"],
	ranking?:ModelTypes["bigint"],
	toProductType:ModelTypes["bigint"],
	/** An object relationship */
	toProductTypeObject:ModelTypes["vectric_products_producttype"],
	/** An object relationship */
	upgradeFeatureObject?:ModelTypes["vectric_upgrades_feature"],
	upgradeId:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_aggregate"]: {
		aggregate?:ModelTypes["vectric_upgrades_product_type_feature_aggregate_fields"],
	nodes:ModelTypes["vectric_upgrades_product_type_feature"][]
};
	/** aggregate fields of "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_aggregate_fields"]: {
		avg?:ModelTypes["vectric_upgrades_product_type_feature_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_upgrades_product_type_feature_max_fields"],
	min?:ModelTypes["vectric_upgrades_product_type_feature_min_fields"],
	stddev?:ModelTypes["vectric_upgrades_product_type_feature_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_upgrades_product_type_feature_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_upgrades_product_type_feature_stddev_samp_fields"],
	sum?:ModelTypes["vectric_upgrades_product_type_feature_sum_fields"],
	var_pop?:ModelTypes["vectric_upgrades_product_type_feature_var_pop_fields"],
	var_samp?:ModelTypes["vectric_upgrades_product_type_feature_var_samp_fields"],
	variance?:ModelTypes["vectric_upgrades_product_type_feature_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_upgrades_product_type_feature_avg_fields"]: {
		fromProductType?:number,
	ranking?:number,
	toProductType?:number,
	upgradeId?:number
};
	/** aggregate max on columns */
["vectric_upgrades_product_type_feature_max_fields"]: {
		feature?:string,
	fromProductType?:ModelTypes["bigint"],
	ranking?:ModelTypes["bigint"],
	toProductType?:ModelTypes["bigint"],
	upgradeId?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_upgrades_product_type_feature_min_fields"]: {
		feature?:string,
	fromProductType?:ModelTypes["bigint"],
	ranking?:ModelTypes["bigint"],
	toProductType?:ModelTypes["bigint"],
	upgradeId?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_upgrades_product_type_feature"][]
};
	/** aggregate stddev on columns */
["vectric_upgrades_product_type_feature_stddev_fields"]: {
		fromProductType?:number,
	ranking?:number,
	toProductType?:number,
	upgradeId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_upgrades_product_type_feature_stddev_pop_fields"]: {
		fromProductType?:number,
	ranking?:number,
	toProductType?:number,
	upgradeId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_upgrades_product_type_feature_stddev_samp_fields"]: {
		fromProductType?:number,
	ranking?:number,
	toProductType?:number,
	upgradeId?:number
};
	/** aggregate sum on columns */
["vectric_upgrades_product_type_feature_sum_fields"]: {
		fromProductType?:ModelTypes["bigint"],
	ranking?:ModelTypes["bigint"],
	toProductType?:ModelTypes["bigint"],
	upgradeId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_upgrades_product_type_feature_var_pop_fields"]: {
		fromProductType?:number,
	ranking?:number,
	toProductType?:number,
	upgradeId?:number
};
	/** aggregate var_samp on columns */
["vectric_upgrades_product_type_feature_var_samp_fields"]: {
		fromProductType?:number,
	ranking?:number,
	toProductType?:number,
	upgradeId?:number
};
	/** aggregate variance on columns */
["vectric_upgrades_product_type_feature_variance_fields"]: {
		fromProductType?:number,
	ranking?:number,
	toProductType?:number,
	upgradeId?:number
};
	/** columns and relationships of "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature"]: {
		feature?:string,
	majorVersion?:ModelTypes["bigint"],
	minorVersion?:ModelTypes["bigint"],
	productType:ModelTypes["bigint"],
	/** An object relationship */
	productTypeObject:ModelTypes["vectric_products_producttype"],
	ranking?:ModelTypes["bigint"],
	/** An object relationship */
	upgradeFeatureObject?:ModelTypes["vectric_upgrades_feature"],
	upgradeId:ModelTypes["bigint"]
};
	/** aggregated selection of "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_aggregate"]: {
		aggregate?:ModelTypes["vectric_upgrades_version_feature_aggregate_fields"],
	nodes:ModelTypes["vectric_upgrades_version_feature"][]
};
	/** aggregate fields of "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_aggregate_fields"]: {
		avg?:ModelTypes["vectric_upgrades_version_feature_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_upgrades_version_feature_max_fields"],
	min?:ModelTypes["vectric_upgrades_version_feature_min_fields"],
	stddev?:ModelTypes["vectric_upgrades_version_feature_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_upgrades_version_feature_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_upgrades_version_feature_stddev_samp_fields"],
	sum?:ModelTypes["vectric_upgrades_version_feature_sum_fields"],
	var_pop?:ModelTypes["vectric_upgrades_version_feature_var_pop_fields"],
	var_samp?:ModelTypes["vectric_upgrades_version_feature_var_samp_fields"],
	variance?:ModelTypes["vectric_upgrades_version_feature_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_upgrades_version_feature_avg_fields"]: {
		majorVersion?:number,
	minorVersion?:number,
	productType?:number,
	ranking?:number,
	upgradeId?:number
};
	/** aggregate max on columns */
["vectric_upgrades_version_feature_max_fields"]: {
		feature?:string,
	majorVersion?:ModelTypes["bigint"],
	minorVersion?:ModelTypes["bigint"],
	productType?:ModelTypes["bigint"],
	ranking?:ModelTypes["bigint"],
	upgradeId?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_upgrades_version_feature_min_fields"]: {
		feature?:string,
	majorVersion?:ModelTypes["bigint"],
	minorVersion?:ModelTypes["bigint"],
	productType?:ModelTypes["bigint"],
	ranking?:ModelTypes["bigint"],
	upgradeId?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_upgrades_version_feature"][]
};
	/** aggregate stddev on columns */
["vectric_upgrades_version_feature_stddev_fields"]: {
		majorVersion?:number,
	minorVersion?:number,
	productType?:number,
	ranking?:number,
	upgradeId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_upgrades_version_feature_stddev_pop_fields"]: {
		majorVersion?:number,
	minorVersion?:number,
	productType?:number,
	ranking?:number,
	upgradeId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_upgrades_version_feature_stddev_samp_fields"]: {
		majorVersion?:number,
	minorVersion?:number,
	productType?:number,
	ranking?:number,
	upgradeId?:number
};
	/** aggregate sum on columns */
["vectric_upgrades_version_feature_sum_fields"]: {
		majorVersion?:ModelTypes["bigint"],
	minorVersion?:ModelTypes["bigint"],
	productType?:ModelTypes["bigint"],
	ranking?:ModelTypes["bigint"],
	upgradeId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_upgrades_version_feature_var_pop_fields"]: {
		majorVersion?:number,
	minorVersion?:number,
	productType?:number,
	ranking?:number,
	upgradeId?:number
};
	/** aggregate var_samp on columns */
["vectric_upgrades_version_feature_var_samp_fields"]: {
		majorVersion?:number,
	minorVersion?:number,
	productType?:number,
	ranking?:number,
	upgradeId?:number
};
	/** aggregate variance on columns */
["vectric_upgrades_version_feature_variance_fields"]: {
		majorVersion?:number,
	minorVersion?:number,
	productType?:number,
	ranking?:number,
	upgradeId?:number
};
	/** columns and relationships of "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees"]: {
		attendeeid:ModelTypes["bigint"],
	bringingsample?:boolean,
	company?:string,
	customerid?:ModelTypes["bigint"],
	diet?:string,
	email?:string,
	fastspringreference?:string,
	firstname?:string,
	forumname?:string,
	lastname?:string,
	notes?:string,
	productid?:ModelTypes["bigint"],
	purchasedate?:ModelTypes["timestamptz"],
	reference:string,
	state?:string,
	status?:string,
	tshirtsize?:string,
	uk?:boolean
};
	/** aggregated selection of "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_aggregate"]: {
		aggregate?:ModelTypes["vectric_usergroup_2019_attendees_aggregate_fields"],
	nodes:ModelTypes["vectric_usergroup_2019_attendees"][]
};
	/** aggregate fields of "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_aggregate_fields"]: {
		avg?:ModelTypes["vectric_usergroup_2019_attendees_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_usergroup_2019_attendees_max_fields"],
	min?:ModelTypes["vectric_usergroup_2019_attendees_min_fields"],
	stddev?:ModelTypes["vectric_usergroup_2019_attendees_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_usergroup_2019_attendees_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_usergroup_2019_attendees_stddev_samp_fields"],
	sum?:ModelTypes["vectric_usergroup_2019_attendees_sum_fields"],
	var_pop?:ModelTypes["vectric_usergroup_2019_attendees_var_pop_fields"],
	var_samp?:ModelTypes["vectric_usergroup_2019_attendees_var_samp_fields"],
	variance?:ModelTypes["vectric_usergroup_2019_attendees_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_usergroup_2019_attendees_avg_fields"]: {
		attendeeid?:number,
	customerid?:number,
	productid?:number
};
	/** aggregate max on columns */
["vectric_usergroup_2019_attendees_max_fields"]: {
		attendeeid?:ModelTypes["bigint"],
	company?:string,
	customerid?:ModelTypes["bigint"],
	diet?:string,
	email?:string,
	fastspringreference?:string,
	firstname?:string,
	forumname?:string,
	lastname?:string,
	notes?:string,
	productid?:ModelTypes["bigint"],
	purchasedate?:ModelTypes["timestamptz"],
	reference?:string,
	state?:string,
	status?:string,
	tshirtsize?:string
};
	/** aggregate min on columns */
["vectric_usergroup_2019_attendees_min_fields"]: {
		attendeeid?:ModelTypes["bigint"],
	company?:string,
	customerid?:ModelTypes["bigint"],
	diet?:string,
	email?:string,
	fastspringreference?:string,
	firstname?:string,
	forumname?:string,
	lastname?:string,
	notes?:string,
	productid?:ModelTypes["bigint"],
	purchasedate?:ModelTypes["timestamptz"],
	reference?:string,
	state?:string,
	status?:string,
	tshirtsize?:string
};
	/** response of any mutation on the table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_usergroup_2019_attendees"][]
};
	/** aggregate stddev on columns */
["vectric_usergroup_2019_attendees_stddev_fields"]: {
		attendeeid?:number,
	customerid?:number,
	productid?:number
};
	/** aggregate stddev_pop on columns */
["vectric_usergroup_2019_attendees_stddev_pop_fields"]: {
		attendeeid?:number,
	customerid?:number,
	productid?:number
};
	/** aggregate stddev_samp on columns */
["vectric_usergroup_2019_attendees_stddev_samp_fields"]: {
		attendeeid?:number,
	customerid?:number,
	productid?:number
};
	/** aggregate sum on columns */
["vectric_usergroup_2019_attendees_sum_fields"]: {
		attendeeid?:ModelTypes["bigint"],
	customerid?:ModelTypes["bigint"],
	productid?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_usergroup_2019_attendees_var_pop_fields"]: {
		attendeeid?:number,
	customerid?:number,
	productid?:number
};
	/** aggregate var_samp on columns */
["vectric_usergroup_2019_attendees_var_samp_fields"]: {
		attendeeid?:number,
	customerid?:number,
	productid?:number
};
	/** aggregate variance on columns */
["vectric_usergroup_2019_attendees_variance_fields"]: {
		attendeeid?:number,
	customerid?:number,
	productid?:number
};
	/** columns and relationships of "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist"]: {
		attendeeid:ModelTypes["bigint"],
	customerid?:ModelTypes["bigint"],
	desiredquantity:ModelTypes["bigint"],
	email?:string,
	invitationdate?:ModelTypes["timestamptz"],
	productid?:ModelTypes["bigint"],
	reference:string,
	status?:string
};
	/** aggregated selection of "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_aggregate"]: {
		aggregate?:ModelTypes["vectric_usergroup_2019_waitlist_aggregate_fields"],
	nodes:ModelTypes["vectric_usergroup_2019_waitlist"][]
};
	/** aggregate fields of "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_aggregate_fields"]: {
		avg?:ModelTypes["vectric_usergroup_2019_waitlist_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_usergroup_2019_waitlist_max_fields"],
	min?:ModelTypes["vectric_usergroup_2019_waitlist_min_fields"],
	stddev?:ModelTypes["vectric_usergroup_2019_waitlist_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_usergroup_2019_waitlist_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_usergroup_2019_waitlist_stddev_samp_fields"],
	sum?:ModelTypes["vectric_usergroup_2019_waitlist_sum_fields"],
	var_pop?:ModelTypes["vectric_usergroup_2019_waitlist_var_pop_fields"],
	var_samp?:ModelTypes["vectric_usergroup_2019_waitlist_var_samp_fields"],
	variance?:ModelTypes["vectric_usergroup_2019_waitlist_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_usergroup_2019_waitlist_avg_fields"]: {
		attendeeid?:number,
	customerid?:number,
	desiredquantity?:number,
	productid?:number
};
	/** aggregate max on columns */
["vectric_usergroup_2019_waitlist_max_fields"]: {
		attendeeid?:ModelTypes["bigint"],
	customerid?:ModelTypes["bigint"],
	desiredquantity?:ModelTypes["bigint"],
	email?:string,
	invitationdate?:ModelTypes["timestamptz"],
	productid?:ModelTypes["bigint"],
	reference?:string,
	status?:string
};
	/** aggregate min on columns */
["vectric_usergroup_2019_waitlist_min_fields"]: {
		attendeeid?:ModelTypes["bigint"],
	customerid?:ModelTypes["bigint"],
	desiredquantity?:ModelTypes["bigint"],
	email?:string,
	invitationdate?:ModelTypes["timestamptz"],
	productid?:ModelTypes["bigint"],
	reference?:string,
	status?:string
};
	/** response of any mutation on the table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_usergroup_2019_waitlist"][]
};
	/** aggregate stddev on columns */
["vectric_usergroup_2019_waitlist_stddev_fields"]: {
		attendeeid?:number,
	customerid?:number,
	desiredquantity?:number,
	productid?:number
};
	/** aggregate stddev_pop on columns */
["vectric_usergroup_2019_waitlist_stddev_pop_fields"]: {
		attendeeid?:number,
	customerid?:number,
	desiredquantity?:number,
	productid?:number
};
	/** aggregate stddev_samp on columns */
["vectric_usergroup_2019_waitlist_stddev_samp_fields"]: {
		attendeeid?:number,
	customerid?:number,
	desiredquantity?:number,
	productid?:number
};
	/** aggregate sum on columns */
["vectric_usergroup_2019_waitlist_sum_fields"]: {
		attendeeid?:ModelTypes["bigint"],
	customerid?:ModelTypes["bigint"],
	desiredquantity?:ModelTypes["bigint"],
	productid?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_usergroup_2019_waitlist_var_pop_fields"]: {
		attendeeid?:number,
	customerid?:number,
	desiredquantity?:number,
	productid?:number
};
	/** aggregate var_samp on columns */
["vectric_usergroup_2019_waitlist_var_samp_fields"]: {
		attendeeid?:number,
	customerid?:number,
	desiredquantity?:number,
	productid?:number
};
	/** aggregate variance on columns */
["vectric_usergroup_2019_waitlist_variance_fields"]: {
		attendeeid?:number,
	customerid?:number,
	desiredquantity?:number,
	productid?:number
};
	/** columns and relationships of "vectric.version_code" */
["vectric_version_code"]: {
		displayVersion?:string,
	latest:boolean,
	majorVersion?:ModelTypes["bigint"],
	minorVersionOOX?:ModelTypes["bigint"],
	minorVersionOXO?:ModelTypes["bigint"],
	minorVersionXOO?:ModelTypes["bigint"],
	notifying?:boolean,
	patchUrl?:string,
	releaseDate?:ModelTypes["date"],
	url?:string,
	versionCodeId:ModelTypes["bigint"],
	visible:boolean
};
	/** aggregated selection of "vectric.version_code" */
["vectric_version_code_aggregate"]: {
		aggregate?:ModelTypes["vectric_version_code_aggregate_fields"],
	nodes:ModelTypes["vectric_version_code"][]
};
	/** aggregate fields of "vectric.version_code" */
["vectric_version_code_aggregate_fields"]: {
		avg?:ModelTypes["vectric_version_code_avg_fields"],
	count:number,
	max?:ModelTypes["vectric_version_code_max_fields"],
	min?:ModelTypes["vectric_version_code_min_fields"],
	stddev?:ModelTypes["vectric_version_code_stddev_fields"],
	stddev_pop?:ModelTypes["vectric_version_code_stddev_pop_fields"],
	stddev_samp?:ModelTypes["vectric_version_code_stddev_samp_fields"],
	sum?:ModelTypes["vectric_version_code_sum_fields"],
	var_pop?:ModelTypes["vectric_version_code_var_pop_fields"],
	var_samp?:ModelTypes["vectric_version_code_var_samp_fields"],
	variance?:ModelTypes["vectric_version_code_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_version_code_avg_fields"]: {
		majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	versionCodeId?:number
};
	/** aggregate max on columns */
["vectric_version_code_max_fields"]: {
		displayVersion?:string,
	majorVersion?:ModelTypes["bigint"],
	minorVersionOOX?:ModelTypes["bigint"],
	minorVersionOXO?:ModelTypes["bigint"],
	minorVersionXOO?:ModelTypes["bigint"],
	patchUrl?:string,
	releaseDate?:ModelTypes["date"],
	url?:string,
	versionCodeId?:ModelTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_version_code_min_fields"]: {
		displayVersion?:string,
	majorVersion?:ModelTypes["bigint"],
	minorVersionOOX?:ModelTypes["bigint"],
	minorVersionOXO?:ModelTypes["bigint"],
	minorVersionXOO?:ModelTypes["bigint"],
	patchUrl?:string,
	releaseDate?:ModelTypes["date"],
	url?:string,
	versionCodeId?:ModelTypes["bigint"]
};
	/** response of any mutation on the table "vectric.version_code" */
["vectric_version_code_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows:number,
	/** data from the rows affected by the mutation */
	returning:ModelTypes["vectric_version_code"][]
};
	/** aggregate stddev on columns */
["vectric_version_code_stddev_fields"]: {
		majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	versionCodeId?:number
};
	/** aggregate stddev_pop on columns */
["vectric_version_code_stddev_pop_fields"]: {
		majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	versionCodeId?:number
};
	/** aggregate stddev_samp on columns */
["vectric_version_code_stddev_samp_fields"]: {
		majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	versionCodeId?:number
};
	/** aggregate sum on columns */
["vectric_version_code_sum_fields"]: {
		majorVersion?:ModelTypes["bigint"],
	minorVersionOOX?:ModelTypes["bigint"],
	minorVersionOXO?:ModelTypes["bigint"],
	minorVersionXOO?:ModelTypes["bigint"],
	versionCodeId?:ModelTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_version_code_var_pop_fields"]: {
		majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	versionCodeId?:number
};
	/** aggregate var_samp on columns */
["vectric_version_code_var_samp_fields"]: {
		majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	versionCodeId?:number
};
	/** aggregate variance on columns */
["vectric_version_code_variance_fields"]: {
		majorVersion?:number,
	minorVersionOOX?:number,
	minorVersionOXO?:number,
	minorVersionXOO?:number,
	versionCodeId?:number
};
	/** column ordering options */
["order_by"]: GraphQLTypes["order_by"];
	/** select columns of table "vectric.active_memberships" */
["vectric_active_memberships_select_column"]: GraphQLTypes["vectric_active_memberships_select_column"];
	/** select columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_select_column"]: GraphQLTypes["vectric_active_upgrades_select_column"];
	/** select columns of table "vectric.allocatable_bundles" */
["vectric_allocatable_bundles_select_column"]: GraphQLTypes["vectric_allocatable_bundles_select_column"];
	/** select columns of table "vectric.allocatable_licence_count" */
["vectric_allocatable_licence_count_select_column"]: GraphQLTypes["vectric_allocatable_licence_count_select_column"];
	/** select columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_select_column"]: GraphQLTypes["vectric_allocated_bundles_select_column"];
	/** unique or primary key constraints on table "vectric.allocation_summary" */
["vectric_allocation_summary_constraint"]: GraphQLTypes["vectric_allocation_summary_constraint"];
	/** unique or primary key constraints on table "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_constraint"]: GraphQLTypes["vectric_allocation_summary_file_type_constraint"];
	["vectric_allocation_summary_file_type_enum"]: GraphQLTypes["vectric_allocation_summary_file_type_enum"];
	/** select columns of table "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_select_column"]: GraphQLTypes["vectric_allocation_summary_file_type_select_column"];
	/** update columns of table "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_update_column"]: GraphQLTypes["vectric_allocation_summary_file_type_update_column"];
	/** select columns of table "vectric.allocation_summary" */
["vectric_allocation_summary_select_column"]: GraphQLTypes["vectric_allocation_summary_select_column"];
	/** update columns of table "vectric.allocation_summary" */
["vectric_allocation_summary_update_column"]: GraphQLTypes["vectric_allocation_summary_update_column"];
	/** unique or primary key constraints on table "vectric.continents" */
["vectric_continents_constraint"]: GraphQLTypes["vectric_continents_constraint"];
	/** select columns of table "vectric.continents" */
["vectric_continents_select_column"]: GraphQLTypes["vectric_continents_select_column"];
	/** update columns of table "vectric.continents" */
["vectric_continents_update_column"]: GraphQLTypes["vectric_continents_update_column"];
	/** unique or primary key constraints on table "vectric.countries" */
["vectric_countries_constraint"]: GraphQLTypes["vectric_countries_constraint"];
	/** select columns of table "vectric.countries" */
["vectric_countries_select_column"]: GraphQLTypes["vectric_countries_select_column"];
	/** update columns of table "vectric.countries" */
["vectric_countries_update_column"]: GraphQLTypes["vectric_countries_update_column"];
	/** unique or primary key constraints on table "vectric.customer_area" */
["vectric_customer_area_constraint"]: GraphQLTypes["vectric_customer_area_constraint"];
	/** unique or primary key constraints on table "vectric.customer_area_file" */
["vectric_customer_area_file_constraint"]: GraphQLTypes["vectric_customer_area_file_constraint"];
	/** select columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_select_column"]: GraphQLTypes["vectric_customer_area_file_select_column"];
	/** update columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_update_column"]: GraphQLTypes["vectric_customer_area_file_update_column"];
	/** select columns of table "vectric.customer_area" */
["vectric_customer_area_select_column"]: GraphQLTypes["vectric_customer_area_select_column"];
	/** update columns of table "vectric.customer_area" */
["vectric_customer_area_update_column"]: GraphQLTypes["vectric_customer_area_update_column"];
	/** unique or primary key constraints on table "vectric.customer_responses" */
["vectric_customer_responses_constraint"]: GraphQLTypes["vectric_customer_responses_constraint"];
	/** select columns of table "vectric.customer_responses" */
["vectric_customer_responses_select_column"]: GraphQLTypes["vectric_customer_responses_select_column"];
	/** update columns of table "vectric.customer_responses" */
["vectric_customer_responses_update_column"]: GraphQLTypes["vectric_customer_responses_update_column"];
	/** select columns of table "vectric.customer_sales" */
["vectric_customer_sales_select_column"]: GraphQLTypes["vectric_customer_sales_select_column"];
	/** unique or primary key constraints on table "vectric.customer_status" */
["vectric_customer_status_constraint"]: GraphQLTypes["vectric_customer_status_constraint"];
	/** select columns of table "vectric.customer_status" */
["vectric_customer_status_select_column"]: GraphQLTypes["vectric_customer_status_select_column"];
	/** update columns of table "vectric.customer_status" */
["vectric_customer_status_update_column"]: GraphQLTypes["vectric_customer_status_update_column"];
	/** unique or primary key constraints on table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_constraint"]: GraphQLTypes["vectric_customer_zd_uploads_constraint"];
	/** select columns of table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_select_column"]: GraphQLTypes["vectric_customer_zd_uploads_select_column"];
	/** update columns of table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_update_column"]: GraphQLTypes["vectric_customer_zd_uploads_update_column"];
	/** unique or primary key constraints on table "vectric.download" */
["vectric_download_constraint"]: GraphQLTypes["vectric_download_constraint"];
	/** unique or primary key constraints on table "vectric.download_record" */
["vectric_download_record_constraint"]: GraphQLTypes["vectric_download_record_constraint"];
	/** select columns of table "vectric.download_record" */
["vectric_download_record_select_column"]: GraphQLTypes["vectric_download_record_select_column"];
	/** update columns of table "vectric.download_record" */
["vectric_download_record_update_column"]: GraphQLTypes["vectric_download_record_update_column"];
	/** select columns of table "vectric.download" */
["vectric_download_select_column"]: GraphQLTypes["vectric_download_select_column"];
	/** update columns of table "vectric.download" */
["vectric_download_update_column"]: GraphQLTypes["vectric_download_update_column"];
	/** unique or primary key constraints on table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_constraint"]: GraphQLTypes["vectric_enhancement_tokens_constraint"];
	/** select columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_select_column"]: GraphQLTypes["vectric_enhancement_tokens_select_column"];
	/** update columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_update_column"]: GraphQLTypes["vectric_enhancement_tokens_update_column"];
	/** select columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_select_column"]: GraphQLTypes["vectric_entitled_product_version_code_view_select_column"];
	/** unique or primary key constraints on table "vectric.entitled_products" */
["vectric_entitled_products_constraint"]: GraphQLTypes["vectric_entitled_products_constraint"];
	/** select columns of table "vectric.entitled_products" */
["vectric_entitled_products_select_column"]: GraphQLTypes["vectric_entitled_products_select_column"];
	/** update columns of table "vectric.entitled_products" */
["vectric_entitled_products_update_column"]: GraphQLTypes["vectric_entitled_products_update_column"];
	/** unique or primary key constraints on table "vectric.entitlement_licences" */
["vectric_entitlement_licences_constraint"]: GraphQLTypes["vectric_entitlement_licences_constraint"];
	/** select columns of table "vectric.entitlement_licences" */
["vectric_entitlement_licences_select_column"]: GraphQLTypes["vectric_entitlement_licences_select_column"];
	/** update columns of table "vectric.entitlement_licences" */
["vectric_entitlement_licences_update_column"]: GraphQLTypes["vectric_entitlement_licences_update_column"];
	/** unique or primary key constraints on table "vectric.entitlements" */
["vectric_entitlements_constraint"]: GraphQLTypes["vectric_entitlements_constraint"];
	/** select columns of table "vectric.entitlements" */
["vectric_entitlements_select_column"]: GraphQLTypes["vectric_entitlements_select_column"];
	/** update columns of table "vectric.entitlements" */
["vectric_entitlements_update_column"]: GraphQLTypes["vectric_entitlements_update_column"];
	/** unique or primary key constraints on table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_constraint"]: GraphQLTypes["vectric_free_clipart_tokens_constraint"];
	/** select columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_select_column"]: GraphQLTypes["vectric_free_clipart_tokens_select_column"];
	/** update columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_update_column"]: GraphQLTypes["vectric_free_clipart_tokens_update_column"];
	/** unique or primary key constraints on table "vectric.freeclipart_category" */
["vectric_freeclipart_category_constraint"]: GraphQLTypes["vectric_freeclipart_category_constraint"];
	/** select columns of table "vectric.freeclipart_category" */
["vectric_freeclipart_category_select_column"]: GraphQLTypes["vectric_freeclipart_category_select_column"];
	/** update columns of table "vectric.freeclipart_category" */
["vectric_freeclipart_category_update_column"]: GraphQLTypes["vectric_freeclipart_category_update_column"];
	/** unique or primary key constraints on table "vectric.freeclipart" */
["vectric_freeclipart_constraint"]: GraphQLTypes["vectric_freeclipart_constraint"];
	/** unique or primary key constraints on table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_constraint"]: GraphQLTypes["vectric_freeclipart_download_record_constraint"];
	/** select columns of table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_select_column"]: GraphQLTypes["vectric_freeclipart_download_record_select_column"];
	/** update columns of table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_update_column"]: GraphQLTypes["vectric_freeclipart_download_record_update_column"];
	/** select columns of table "vectric.freeclipart" */
["vectric_freeclipart_select_column"]: GraphQLTypes["vectric_freeclipart_select_column"];
	/** update columns of table "vectric.freeclipart" */
["vectric_freeclipart_update_column"]: GraphQLTypes["vectric_freeclipart_update_column"];
	/** select columns of table "vectric.group_info" */
["vectric_group_info_select_column"]: GraphQLTypes["vectric_group_info_select_column"];
	/** unique or primary key constraints on table "vectric.group_roles" */
["vectric_group_roles_constraint"]: GraphQLTypes["vectric_group_roles_constraint"];
	/** select columns of table "vectric.group_roles" */
["vectric_group_roles_select_column"]: GraphQLTypes["vectric_group_roles_select_column"];
	/** update columns of table "vectric.group_roles" */
["vectric_group_roles_update_column"]: GraphQLTypes["vectric_group_roles_update_column"];
	/** unique or primary key constraints on table "vectric.group_user_role" */
["vectric_group_user_role_constraint"]: GraphQLTypes["vectric_group_user_role_constraint"];
	/** select columns of table "vectric.group_user_role" */
["vectric_group_user_role_select_column"]: GraphQLTypes["vectric_group_user_role_select_column"];
	/** update columns of table "vectric.group_user_role" */
["vectric_group_user_role_update_column"]: GraphQLTypes["vectric_group_user_role_update_column"];
	/** unique or primary key constraints on table "vectric.groups" */
["vectric_groups_constraint"]: GraphQLTypes["vectric_groups_constraint"];
	/** select columns of table "vectric.groups" */
["vectric_groups_select_column"]: GraphQLTypes["vectric_groups_select_column"];
	/** update columns of table "vectric.groups" */
["vectric_groups_update_column"]: GraphQLTypes["vectric_groups_update_column"];
	/** unique or primary key constraints on table "vectric.language_codes" */
["vectric_language_codes_constraint"]: GraphQLTypes["vectric_language_codes_constraint"];
	/** select columns of table "vectric.language_codes" */
["vectric_language_codes_select_column"]: GraphQLTypes["vectric_language_codes_select_column"];
	/** update columns of table "vectric.language_codes" */
["vectric_language_codes_update_column"]: GraphQLTypes["vectric_language_codes_update_column"];
	/** unique or primary key constraints on table "vectric.licence_log" */
["vectric_licence_log_constraint"]: GraphQLTypes["vectric_licence_log_constraint"];
	/** select columns of table "vectric.licence_log" */
["vectric_licence_log_select_column"]: GraphQLTypes["vectric_licence_log_select_column"];
	/** update columns of table "vectric.licence_log" */
["vectric_licence_log_update_column"]: GraphQLTypes["vectric_licence_log_update_column"];
	/** unique or primary key constraints on table "vectric.linkshortener_links" */
["vectric_linkshortener_links_constraint"]: GraphQLTypes["vectric_linkshortener_links_constraint"];
	/** select columns of table "vectric.linkshortener_links" */
["vectric_linkshortener_links_select_column"]: GraphQLTypes["vectric_linkshortener_links_select_column"];
	/** update columns of table "vectric.linkshortener_links" */
["vectric_linkshortener_links_update_column"]: GraphQLTypes["vectric_linkshortener_links_update_column"];
	/** unique or primary key constraints on table "vectric.makerspace_requests" */
["vectric_makerspace_requests_constraint"]: GraphQLTypes["vectric_makerspace_requests_constraint"];
	/** select columns of table "vectric.makerspace_requests" */
["vectric_makerspace_requests_select_column"]: GraphQLTypes["vectric_makerspace_requests_select_column"];
	/** update columns of table "vectric.makerspace_requests" */
["vectric_makerspace_requests_update_column"]: GraphQLTypes["vectric_makerspace_requests_update_column"];
	/** unique or primary key constraints on table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_constraint"]: GraphQLTypes["vectric_membership_invitation_status_constraint"];
	["vectric_membership_invitation_status_enum"]: GraphQLTypes["vectric_membership_invitation_status_enum"];
	/** select columns of table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_select_column"]: GraphQLTypes["vectric_membership_invitation_status_select_column"];
	/** update columns of table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_update_column"]: GraphQLTypes["vectric_membership_invitation_status_update_column"];
	/** unique or primary key constraints on table "vectric.membership_invitations" */
["vectric_membership_invitations_constraint"]: GraphQLTypes["vectric_membership_invitations_constraint"];
	/** select columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_select_column"]: GraphQLTypes["vectric_membership_invitations_select_column"];
	/** update columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_update_column"]: GraphQLTypes["vectric_membership_invitations_update_column"];
	/** unique or primary key constraints on table "vectric.membership_roles" */
["vectric_membership_roles_constraint"]: GraphQLTypes["vectric_membership_roles_constraint"];
	["vectric_membership_roles_enum"]: GraphQLTypes["vectric_membership_roles_enum"];
	/** select columns of table "vectric.membership_roles" */
["vectric_membership_roles_select_column"]: GraphQLTypes["vectric_membership_roles_select_column"];
	/** update columns of table "vectric.membership_roles" */
["vectric_membership_roles_update_column"]: GraphQLTypes["vectric_membership_roles_update_column"];
	/** unique or primary key constraints on table "vectric.membership_status" */
["vectric_membership_status_constraint"]: GraphQLTypes["vectric_membership_status_constraint"];
	["vectric_membership_status_enum"]: GraphQLTypes["vectric_membership_status_enum"];
	/** select columns of table "vectric.membership_status" */
["vectric_membership_status_select_column"]: GraphQLTypes["vectric_membership_status_select_column"];
	/** update columns of table "vectric.membership_status" */
["vectric_membership_status_update_column"]: GraphQLTypes["vectric_membership_status_update_column"];
	/** unique or primary key constraints on table "vectric.memberships" */
["vectric_memberships_constraint"]: GraphQLTypes["vectric_memberships_constraint"];
	/** select columns of table "vectric.memberships" */
["vectric_memberships_select_column"]: GraphQLTypes["vectric_memberships_select_column"];
	/** update columns of table "vectric.memberships" */
["vectric_memberships_update_column"]: GraphQLTypes["vectric_memberships_update_column"];
	/** unique or primary key constraints on table "vectric.oauth_client_details" */
["vectric_oauth_client_details_constraint"]: GraphQLTypes["vectric_oauth_client_details_constraint"];
	/** select columns of table "vectric.oauth_client_details" */
["vectric_oauth_client_details_select_column"]: GraphQLTypes["vectric_oauth_client_details_select_column"];
	/** update columns of table "vectric.oauth_client_details" */
["vectric_oauth_client_details_update_column"]: GraphQLTypes["vectric_oauth_client_details_update_column"];
	/** select columns of table "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails_select_column"]: GraphQLTypes["vectric_oem_allocation_emails_select_column"];
	/** unique or primary key constraints on table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_constraint"]: GraphQLTypes["vectric_oem_detailed_products_constraint"];
	/** select columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_select_column"]: GraphQLTypes["vectric_oem_detailed_products_select_column"];
	/** update columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_update_column"]: GraphQLTypes["vectric_oem_detailed_products_update_column"];
	/** unique or primary key constraints on table "vectric.oem_eval_request" */
["vectric_oem_eval_request_constraint"]: GraphQLTypes["vectric_oem_eval_request_constraint"];
	/** select columns of table "vectric.oem_eval_request" */
["vectric_oem_eval_request_select_column"]: GraphQLTypes["vectric_oem_eval_request_select_column"];
	/** update columns of table "vectric.oem_eval_request" */
["vectric_oem_eval_request_update_column"]: GraphQLTypes["vectric_oem_eval_request_update_column"];
	/** unique or primary key constraints on table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_constraint"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_constraint"];
	/** select columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_select_column"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_select_column"];
	/** update columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_update_column"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_update_column"];
	/** unique or primary key constraints on table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_constraint"]: GraphQLTypes["vectric_oem_fastspring_item_constraint"];
	/** select columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_select_column"]: GraphQLTypes["vectric_oem_fastspring_item_select_column"];
	/** update columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_update_column"]: GraphQLTypes["vectric_oem_fastspring_item_update_column"];
	/** unique or primary key constraints on table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_constraint"]: GraphQLTypes["vectric_oem_fastspring_order_constraint"];
	/** select columns of table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_select_column"]: GraphQLTypes["vectric_oem_fastspring_order_select_column"];
	/** update columns of table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_update_column"]: GraphQLTypes["vectric_oem_fastspring_order_update_column"];
	/** unique or primary key constraints on table "vectric.oem_invite_status" */
["vectric_oem_invite_status_constraint"]: GraphQLTypes["vectric_oem_invite_status_constraint"];
	/** select columns of table "vectric.oem_invite_status" */
["vectric_oem_invite_status_select_column"]: GraphQLTypes["vectric_oem_invite_status_select_column"];
	/** update columns of table "vectric.oem_invite_status" */
["vectric_oem_invite_status_update_column"]: GraphQLTypes["vectric_oem_invite_status_update_column"];
	/** unique or primary key constraints on table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_constraint"]: GraphQLTypes["vectric_oem_licence_allocation_type_constraint"];
	/** select columns of table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_select_column"]: GraphQLTypes["vectric_oem_licence_allocation_type_select_column"];
	/** update columns of table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_update_column"]: GraphQLTypes["vectric_oem_licence_allocation_type_update_column"];
	/** unique or primary key constraints on table "vectric.oem_partners" */
["vectric_oem_partners_constraint"]: GraphQLTypes["vectric_oem_partners_constraint"];
	/** select columns of table "vectric.oem_partners" */
["vectric_oem_partners_select_column"]: GraphQLTypes["vectric_oem_partners_select_column"];
	/** update columns of table "vectric.oem_partners" */
["vectric_oem_partners_update_column"]: GraphQLTypes["vectric_oem_partners_update_column"];
	/** unique or primary key constraints on table "vectric.oem_products" */
["vectric_oem_products_constraint"]: GraphQLTypes["vectric_oem_products_constraint"];
	/** select columns of table "vectric.oem_products" */
["vectric_oem_products_select_column"]: GraphQLTypes["vectric_oem_products_select_column"];
	/** update columns of table "vectric.oem_products" */
["vectric_oem_products_update_column"]: GraphQLTypes["vectric_oem_products_update_column"];
	/** unique or primary key constraints on table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_constraint"]: GraphQLTypes["vectric_oem_purchase_options_constraint"];
	/** select columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_select_column"]: GraphQLTypes["vectric_oem_purchase_options_select_column"];
	/** update columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_update_column"]: GraphQLTypes["vectric_oem_purchase_options_update_column"];
	/** select columns of table "vectric.oem_staff_admin_ownership" */
["vectric_oem_staff_admin_ownership_select_column"]: GraphQLTypes["vectric_oem_staff_admin_ownership_select_column"];
	/** unique or primary key constraints on table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_constraint"]: GraphQLTypes["vectric_oem_staff_customer_constraint"];
	/** select columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_select_column"]: GraphQLTypes["vectric_oem_staff_customer_select_column"];
	/** update columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_update_column"]: GraphQLTypes["vectric_oem_staff_customer_update_column"];
	/** unique or primary key constraints on table "vectric.organization_audit" */
["vectric_organization_audit_constraint"]: GraphQLTypes["vectric_organization_audit_constraint"];
	/** select columns of table "vectric.organization_audit" */
["vectric_organization_audit_select_column"]: GraphQLTypes["vectric_organization_audit_select_column"];
	/** update columns of table "vectric.organization_audit" */
["vectric_organization_audit_update_column"]: GraphQLTypes["vectric_organization_audit_update_column"];
	/** unique or primary key constraints on table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_constraint"]: GraphQLTypes["vectric_organization_licence_scope_constraint"];
	["vectric_organization_licence_scope_enum"]: GraphQLTypes["vectric_organization_licence_scope_enum"];
	/** select columns of table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_select_column"]: GraphQLTypes["vectric_organization_licence_scope_select_column"];
	/** update columns of table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_update_column"]: GraphQLTypes["vectric_organization_licence_scope_update_column"];
	/** select columns of table "vectric.organization_memberships_admin_access" */
["vectric_organization_memberships_admin_access_select_column"]: GraphQLTypes["vectric_organization_memberships_admin_access_select_column"];
	/** unique or primary key constraints on table "vectric.organization_order_items" */
["vectric_organization_order_items_constraint"]: GraphQLTypes["vectric_organization_order_items_constraint"];
	/** select columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_select_column"]: GraphQLTypes["vectric_organization_order_items_select_column"];
	/** update columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_update_column"]: GraphQLTypes["vectric_organization_order_items_update_column"];
	/** unique or primary key constraints on table "vectric.organization_orders" */
["vectric_organization_orders_constraint"]: GraphQLTypes["vectric_organization_orders_constraint"];
	/** select columns of table "vectric.organization_orders" */
["vectric_organization_orders_select_column"]: GraphQLTypes["vectric_organization_orders_select_column"];
	/** update columns of table "vectric.organization_orders" */
["vectric_organization_orders_update_column"]: GraphQLTypes["vectric_organization_orders_update_column"];
	/** unique or primary key constraints on table "vectric.organization_types" */
["vectric_organization_types_constraint"]: GraphQLTypes["vectric_organization_types_constraint"];
	["vectric_organization_types_enum"]: GraphQLTypes["vectric_organization_types_enum"];
	/** select columns of table "vectric.organization_types" */
["vectric_organization_types_select_column"]: GraphQLTypes["vectric_organization_types_select_column"];
	/** update columns of table "vectric.organization_types" */
["vectric_organization_types_update_column"]: GraphQLTypes["vectric_organization_types_update_column"];
	/** unique or primary key constraints on table "vectric.organizations" */
["vectric_organizations_constraint"]: GraphQLTypes["vectric_organizations_constraint"];
	/** select columns of table "vectric.organizations" */
["vectric_organizations_select_column"]: GraphQLTypes["vectric_organizations_select_column"];
	/** update columns of table "vectric.organizations" */
["vectric_organizations_update_column"]: GraphQLTypes["vectric_organizations_update_column"];
	/** unique or primary key constraints on table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_constraint"]: GraphQLTypes["vectric_owned_item_assignments_constraint"];
	/** select columns of table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_select_column"]: GraphQLTypes["vectric_owned_item_assignments_select_column"];
	/** update columns of table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_update_column"]: GraphQLTypes["vectric_owned_item_assignments_update_column"];
	/** unique or primary key constraints on table "vectric.owned_items" */
["vectric_owned_items_constraint"]: GraphQLTypes["vectric_owned_items_constraint"];
	/** select columns of table "vectric.owned_items" */
["vectric_owned_items_select_column"]: GraphQLTypes["vectric_owned_items_select_column"];
	/** update columns of table "vectric.owned_items" */
["vectric_owned_items_update_column"]: GraphQLTypes["vectric_owned_items_update_column"];
	/** unique or primary key constraints on table "vectric.owned_products" */
["vectric_owned_products_constraint"]: GraphQLTypes["vectric_owned_products_constraint"];
	/** select columns of table "vectric.owned_products" */
["vectric_owned_products_select_column"]: GraphQLTypes["vectric_owned_products_select_column"];
	/** update columns of table "vectric.owned_products" */
["vectric_owned_products_update_column"]: GraphQLTypes["vectric_owned_products_update_column"];
	/** unique or primary key constraints on table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_constraint"]: GraphQLTypes["vectric_products_clipartcollection_links_constraint"];
	/** select columns of table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_select_column"]: GraphQLTypes["vectric_products_clipartcollection_links_select_column"];
	/** update columns of table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_update_column"]: GraphQLTypes["vectric_products_clipartcollection_links_update_column"];
	/** unique or primary key constraints on table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_constraint"]: GraphQLTypes["vectric_products_enhancement_eligibility_constraint"];
	/** select columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_select_column"]: GraphQLTypes["vectric_products_enhancement_eligibility_select_column"];
	/** update columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_update_column"]: GraphQLTypes["vectric_products_enhancement_eligibility_update_column"];
	/** unique or primary key constraints on table "vectric.products_freeclipart" */
["vectric_products_freeclipart_constraint"]: GraphQLTypes["vectric_products_freeclipart_constraint"];
	/** select columns of table "vectric.products_freeclipart" */
["vectric_products_freeclipart_select_column"]: GraphQLTypes["vectric_products_freeclipart_select_column"];
	/** update columns of table "vectric.products_freeclipart" */
["vectric_products_freeclipart_update_column"]: GraphQLTypes["vectric_products_freeclipart_update_column"];
	/** unique or primary key constraints on table "vectric.products_fulfilments" */
["vectric_products_fulfilments_constraint"]: GraphQLTypes["vectric_products_fulfilments_constraint"];
	/** select columns of table "vectric.products_fulfilments" */
["vectric_products_fulfilments_select_column"]: GraphQLTypes["vectric_products_fulfilments_select_column"];
	/** update columns of table "vectric.products_fulfilments" */
["vectric_products_fulfilments_update_column"]: GraphQLTypes["vectric_products_fulfilments_update_column"];
	/** unique or primary key constraints on table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_constraint"]: GraphQLTypes["vectric_products_fulfilmenttypes_constraint"];
	/** select columns of table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_select_column"]: GraphQLTypes["vectric_products_fulfilmenttypes_select_column"];
	/** update columns of table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_update_column"]: GraphQLTypes["vectric_products_fulfilmenttypes_update_column"];
	/** unique or primary key constraints on table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_constraint"]: GraphQLTypes["vectric_products_product_fulfilments_constraint"];
	/** select columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_select_column"]: GraphQLTypes["vectric_products_product_fulfilments_select_column"];
	/** update columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_update_column"]: GraphQLTypes["vectric_products_product_fulfilments_update_column"];
	/** unique or primary key constraints on table "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_constraint"]: GraphQLTypes["vectric_products_product_licence_type_constraint"];
	["vectric_products_product_licence_type_enum"]: GraphQLTypes["vectric_products_product_licence_type_enum"];
	/** select columns of table "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_select_column"]: GraphQLTypes["vectric_products_product_licence_type_select_column"];
	/** update columns of table "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_update_column"]: GraphQLTypes["vectric_products_product_licence_type_update_column"];
	/** unique or primary key constraints on table "vectric.products_products" */
["vectric_products_products_constraint"]: GraphQLTypes["vectric_products_products_constraint"];
	/** select columns of table "vectric.products_products" */
["vectric_products_products_select_column"]: GraphQLTypes["vectric_products_products_select_column"];
	/** update columns of table "vectric.products_products" */
["vectric_products_products_update_column"]: GraphQLTypes["vectric_products_products_update_column"];
	/** unique or primary key constraints on table "vectric.products_producttype" */
["vectric_products_producttype_constraint"]: GraphQLTypes["vectric_products_producttype_constraint"];
	/** select columns of table "vectric.products_producttype" */
["vectric_products_producttype_select_column"]: GraphQLTypes["vectric_products_producttype_select_column"];
	/** update columns of table "vectric.products_producttype" */
["vectric_products_producttype_update_column"]: GraphQLTypes["vectric_products_producttype_update_column"];
	/** unique or primary key constraints on table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_constraint"]: GraphQLTypes["vectric_products_upgrade_eligibility_constraint"];
	/** select columns of table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_select_column"]: GraphQLTypes["vectric_products_upgrade_eligibility_select_column"];
	/** update columns of table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_update_column"]: GraphQLTypes["vectric_products_upgrade_eligibility_update_column"];
	/** unique or primary key constraints on table "vectric.products_versioncodes" */
["vectric_products_versioncodes_constraint"]: GraphQLTypes["vectric_products_versioncodes_constraint"];
	/** select columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_select_column"]: GraphQLTypes["vectric_products_versioncodes_select_column"];
	/** update columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_update_column"]: GraphQLTypes["vectric_products_versioncodes_update_column"];
	/** unique or primary key constraints on table "vectric.questions" */
["vectric_questions_constraint"]: GraphQLTypes["vectric_questions_constraint"];
	/** select columns of table "vectric.questions" */
["vectric_questions_select_column"]: GraphQLTypes["vectric_questions_select_column"];
	/** update columns of table "vectric.questions" */
["vectric_questions_update_column"]: GraphQLTypes["vectric_questions_update_column"];
	/** unique or primary key constraints on table "vectric.responses" */
["vectric_responses_constraint"]: GraphQLTypes["vectric_responses_constraint"];
	/** select columns of table "vectric.responses" */
["vectric_responses_select_column"]: GraphQLTypes["vectric_responses_select_column"];
	/** update columns of table "vectric.responses" */
["vectric_responses_update_column"]: GraphQLTypes["vectric_responses_update_column"];
	/** unique or primary key constraints on table "vectric.saleable_products" */
["vectric_saleable_products_constraint"]: GraphQLTypes["vectric_saleable_products_constraint"];
	/** select columns of table "vectric.saleable_products" */
["vectric_saleable_products_select_column"]: GraphQLTypes["vectric_saleable_products_select_column"];
	/** update columns of table "vectric.saleable_products" */
["vectric_saleable_products_update_column"]: GraphQLTypes["vectric_saleable_products_update_column"];
	/** unique or primary key constraints on table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_constraint"]: GraphQLTypes["vectric_sales_customer_downloads_constraint"];
	/** select columns of table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_select_column"]: GraphQLTypes["vectric_sales_customer_downloads_select_column"];
	/** update columns of table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_update_column"]: GraphQLTypes["vectric_sales_customer_downloads_update_column"];
	/** unique or primary key constraints on table "vectric.sales_customers" */
["vectric_sales_customers_constraint"]: GraphQLTypes["vectric_sales_customers_constraint"];
	/** select columns of table "vectric.sales_customers" */
["vectric_sales_customers_select_column"]: GraphQLTypes["vectric_sales_customers_select_column"];
	/** update columns of table "vectric.sales_customers" */
["vectric_sales_customers_update_column"]: GraphQLTypes["vectric_sales_customers_update_column"];
	/** unique or primary key constraints on table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_constraint"]: GraphQLTypes["vectric_sales_customerupdates_constraint"];
	/** select columns of table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_select_column"]: GraphQLTypes["vectric_sales_customerupdates_select_column"];
	/** update columns of table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_update_column"]: GraphQLTypes["vectric_sales_customerupdates_update_column"];
	/** unique or primary key constraints on table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_constraint"]: GraphQLTypes["vectric_sales_oem_bundles_constraint"];
	/** select columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_select_column"]: GraphQLTypes["vectric_sales_oem_bundles_select_column"];
	/** update columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_update_column"]: GraphQLTypes["vectric_sales_oem_bundles_update_column"];
	/** unique or primary key constraints on table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_constraint"]: GraphQLTypes["vectric_sales_oemlicences_constraint"];
	/** select columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_select_column"]: GraphQLTypes["vectric_sales_oemlicences_select_column"];
	/** update columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_update_column"]: GraphQLTypes["vectric_sales_oemlicences_update_column"];
	/** unique or primary key constraints on table "vectric.sales_orders" */
["vectric_sales_orders_constraint"]: GraphQLTypes["vectric_sales_orders_constraint"];
	/** select columns of table "vectric.sales_orders" */
["vectric_sales_orders_select_column"]: GraphQLTypes["vectric_sales_orders_select_column"];
	/** update columns of table "vectric.sales_orders" */
["vectric_sales_orders_update_column"]: GraphQLTypes["vectric_sales_orders_update_column"];
	/** unique or primary key constraints on table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_constraint"]: GraphQLTypes["vectric_sales_salesitem_products_constraint"];
	/** select columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_select_column"]: GraphQLTypes["vectric_sales_salesitem_products_select_column"];
	/** update columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_update_column"]: GraphQLTypes["vectric_sales_salesitem_products_update_column"];
	/** unique or primary key constraints on table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_constraint"]: GraphQLTypes["vectric_sales_salesitemproduct_status_constraint"];
	/** select columns of table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_select_column"]: GraphQLTypes["vectric_sales_salesitemproduct_status_select_column"];
	/** update columns of table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_update_column"]: GraphQLTypes["vectric_sales_salesitemproduct_status_update_column"];
	/** unique or primary key constraints on table "vectric.sales_salesitems" */
["vectric_sales_salesitems_constraint"]: GraphQLTypes["vectric_sales_salesitems_constraint"];
	/** select columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_select_column"]: GraphQLTypes["vectric_sales_salesitems_select_column"];
	/** update columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_update_column"]: GraphQLTypes["vectric_sales_salesitems_update_column"];
	/** unique or primary key constraints on table "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_constraint"]: GraphQLTypes["vectric_sales_velocitytemplate_constraint"];
	/** select columns of table "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_select_column"]: GraphQLTypes["vectric_sales_velocitytemplate_select_column"];
	/** update columns of table "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_update_column"]: GraphQLTypes["vectric_sales_velocitytemplate_update_column"];
	/** unique or primary key constraints on table "vectric.scheduled_emails" */
["vectric_scheduled_emails_constraint"]: GraphQLTypes["vectric_scheduled_emails_constraint"];
	/** select columns of table "vectric.scheduled_emails" */
["vectric_scheduled_emails_select_column"]: GraphQLTypes["vectric_scheduled_emails_select_column"];
	/** update columns of table "vectric.scheduled_emails" */
["vectric_scheduled_emails_update_column"]: GraphQLTypes["vectric_scheduled_emails_update_column"];
	/** unique or primary key constraints on table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_constraint"]: GraphQLTypes["vectric_security_emailverificationtokens_constraint"];
	/** select columns of table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_select_column"]: GraphQLTypes["vectric_security_emailverificationtokens_select_column"];
	/** update columns of table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_update_column"]: GraphQLTypes["vectric_security_emailverificationtokens_update_column"];
	/** select columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_select_column"]: GraphQLTypes["vectric_security_group_authorities_select_column"];
	/** unique or primary key constraints on table "vectric.security_group_members" */
["vectric_security_group_members_constraint"]: GraphQLTypes["vectric_security_group_members_constraint"];
	/** select columns of table "vectric.security_group_members" */
["vectric_security_group_members_select_column"]: GraphQLTypes["vectric_security_group_members_select_column"];
	/** update columns of table "vectric.security_group_members" */
["vectric_security_group_members_update_column"]: GraphQLTypes["vectric_security_group_members_update_column"];
	/** unique or primary key constraints on table "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_constraint"]: GraphQLTypes["vectric_security_passwordresettokens_constraint"];
	/** select columns of table "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_select_column"]: GraphQLTypes["vectric_security_passwordresettokens_select_column"];
	/** update columns of table "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_update_column"]: GraphQLTypes["vectric_security_passwordresettokens_update_column"];
	/** unique or primary key constraints on table "vectric.security_userinvitations" */
["vectric_security_userinvitations_constraint"]: GraphQLTypes["vectric_security_userinvitations_constraint"];
	/** select columns of table "vectric.security_userinvitations" */
["vectric_security_userinvitations_select_column"]: GraphQLTypes["vectric_security_userinvitations_select_column"];
	/** update columns of table "vectric.security_userinvitations" */
["vectric_security_userinvitations_update_column"]: GraphQLTypes["vectric_security_userinvitations_update_column"];
	/** unique or primary key constraints on table "vectric.security_users" */
["vectric_security_users_constraint"]: GraphQLTypes["vectric_security_users_constraint"];
	/** select columns of table "vectric.security_users" */
["vectric_security_users_select_column"]: GraphQLTypes["vectric_security_users_select_column"];
	/** update columns of table "vectric.security_users" */
["vectric_security_users_update_column"]: GraphQLTypes["vectric_security_users_update_column"];
	/** unique or primary key constraints on table "vectric.site_option_location" */
["vectric_site_option_location_constraint"]: GraphQLTypes["vectric_site_option_location_constraint"];
	/** select columns of table "vectric.site_option_location" */
["vectric_site_option_location_select_column"]: GraphQLTypes["vectric_site_option_location_select_column"];
	/** update columns of table "vectric.site_option_location" */
["vectric_site_option_location_update_column"]: GraphQLTypes["vectric_site_option_location_update_column"];
	/** unique or primary key constraints on table "vectric.site_options" */
["vectric_site_options_constraint"]: GraphQLTypes["vectric_site_options_constraint"];
	/** select columns of table "vectric.site_options" */
["vectric_site_options_select_column"]: GraphQLTypes["vectric_site_options_select_column"];
	/** update columns of table "vectric.site_options" */
["vectric_site_options_update_column"]: GraphQLTypes["vectric_site_options_update_column"];
	/** unique or primary key constraints on table "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_constraint"]: GraphQLTypes["vectric_subscription_contract_status_constraint"];
	/** select columns of table "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_select_column"]: GraphQLTypes["vectric_subscription_contract_status_select_column"];
	/** update columns of table "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_update_column"]: GraphQLTypes["vectric_subscription_contract_status_update_column"];
	/** unique or primary key constraints on table "vectric.subscription_contracts" */
["vectric_subscription_contracts_constraint"]: GraphQLTypes["vectric_subscription_contracts_constraint"];
	/** select columns of table "vectric.subscription_contracts" */
["vectric_subscription_contracts_select_column"]: GraphQLTypes["vectric_subscription_contracts_select_column"];
	/** update columns of table "vectric.subscription_contracts" */
["vectric_subscription_contracts_update_column"]: GraphQLTypes["vectric_subscription_contracts_update_column"];
	/** unique or primary key constraints on table "vectric.subscription_events" */
["vectric_subscription_events_constraint"]: GraphQLTypes["vectric_subscription_events_constraint"];
	/** select columns of table "vectric.subscription_events" */
["vectric_subscription_events_select_column"]: GraphQLTypes["vectric_subscription_events_select_column"];
	/** update columns of table "vectric.subscription_events" */
["vectric_subscription_events_update_column"]: GraphQLTypes["vectric_subscription_events_update_column"];
	/** unique or primary key constraints on table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_constraint"]: GraphQLTypes["vectric_toolpath_saver_token_constraint"];
	/** select columns of table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_select_column"]: GraphQLTypes["vectric_toolpath_saver_token_select_column"];
	/** update columns of table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_update_column"]: GraphQLTypes["vectric_toolpath_saver_token_update_column"];
	/** unique or primary key constraints on table "vectric.trial_order" */
["vectric_trial_order_constraint"]: GraphQLTypes["vectric_trial_order_constraint"];
	/** select columns of table "vectric.trial_order" */
["vectric_trial_order_select_column"]: GraphQLTypes["vectric_trial_order_select_column"];
	/** update columns of table "vectric.trial_order" */
["vectric_trial_order_update_column"]: GraphQLTypes["vectric_trial_order_update_column"];
	/** unique or primary key constraints on table "vectric.update_requests" */
["vectric_update_requests_constraint"]: GraphQLTypes["vectric_update_requests_constraint"];
	/** select columns of table "vectric.update_requests" */
["vectric_update_requests_select_column"]: GraphQLTypes["vectric_update_requests_select_column"];
	/** update columns of table "vectric.update_requests" */
["vectric_update_requests_update_column"]: GraphQLTypes["vectric_update_requests_update_column"];
	/** unique or primary key constraints on table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_constraint"]: GraphQLTypes["vectric_upgrade_tokens_constraint"];
	/** select columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_select_column"]: GraphQLTypes["vectric_upgrade_tokens_select_column"];
	/** update columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_update_column"]: GraphQLTypes["vectric_upgrade_tokens_update_column"];
	/** unique or primary key constraints on table "vectric.upgrades_feature" */
["vectric_upgrades_feature_constraint"]: GraphQLTypes["vectric_upgrades_feature_constraint"];
	/** select columns of table "vectric.upgrades_feature" */
["vectric_upgrades_feature_select_column"]: GraphQLTypes["vectric_upgrades_feature_select_column"];
	/** update columns of table "vectric.upgrades_feature" */
["vectric_upgrades_feature_update_column"]: GraphQLTypes["vectric_upgrades_feature_update_column"];
	/** unique or primary key constraints on table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_constraint"]: GraphQLTypes["vectric_upgrades_product_type_feature_constraint"];
	/** select columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_select_column"]: GraphQLTypes["vectric_upgrades_product_type_feature_select_column"];
	/** update columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_update_column"]: GraphQLTypes["vectric_upgrades_product_type_feature_update_column"];
	/** unique or primary key constraints on table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_constraint"]: GraphQLTypes["vectric_upgrades_version_feature_constraint"];
	/** select columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_select_column"]: GraphQLTypes["vectric_upgrades_version_feature_select_column"];
	/** update columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_update_column"]: GraphQLTypes["vectric_upgrades_version_feature_update_column"];
	/** unique or primary key constraints on table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_constraint"]: GraphQLTypes["vectric_usergroup_2019_attendees_constraint"];
	/** select columns of table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_select_column"]: GraphQLTypes["vectric_usergroup_2019_attendees_select_column"];
	/** update columns of table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_update_column"]: GraphQLTypes["vectric_usergroup_2019_attendees_update_column"];
	/** unique or primary key constraints on table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_constraint"]: GraphQLTypes["vectric_usergroup_2019_waitlist_constraint"];
	/** select columns of table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_select_column"]: GraphQLTypes["vectric_usergroup_2019_waitlist_select_column"];
	/** update columns of table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_update_column"]: GraphQLTypes["vectric_usergroup_2019_waitlist_update_column"];
	/** unique or primary key constraints on table "vectric.version_code" */
["vectric_version_code_constraint"]: GraphQLTypes["vectric_version_code_constraint"];
	/** select columns of table "vectric.version_code" */
["vectric_version_code_select_column"]: GraphQLTypes["vectric_version_code_select_column"];
	/** update columns of table "vectric.version_code" */
["vectric_version_code_update_column"]: GraphQLTypes["vectric_version_code_update_column"];
	["bigint"]:any;
	["bpchar"]:any;
	["date"]:any;
	["jsonb"]:any;
	["numeric"]:any;
	["smallint"]:any;
	["timestamp"]:any;
	["timestamptz"]:any;
	["uuid"]:any;
	["AddFreeClipartRequest"]: GraphQLTypes["AddFreeClipartRequest"];
	["AddLicenceInput"]: GraphQLTypes["AddLicenceInput"];
	["AddTestBundleInput"]: GraphQLTypes["AddTestBundleInput"];
	["AllocateLicenceRequest"]: GraphQLTypes["AllocateLicenceRequest"];
	["AssignmentInput"]: GraphQLTypes["AssignmentInput"];
	/** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
["Boolean_comparison_exp"]: GraphQLTypes["Boolean_comparison_exp"];
	["CheckEmailForSignUpInput"]: GraphQLTypes["CheckEmailForSignUpInput"];
	["EvaluationLicenceRequest"]: GraphQLTypes["EvaluationLicenceRequest"];
	/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
["Int_comparison_exp"]: GraphQLTypes["Int_comparison_exp"];
	["OemFSRequest"]: GraphQLTypes["OemFSRequest"];
	["OrganizationAddNewMemberRequest"]: GraphQLTypes["OrganizationAddNewMemberRequest"];
	["OrganizationEditMemberRequest"]: GraphQLTypes["OrganizationEditMemberRequest"];
	["RegisterInviteInput"]: GraphQLTypes["RegisterInviteInput"];
	["SecureFSItemsInput"]: GraphQLTypes["SecureFSItemsInput"];
	["SignUpInput"]: GraphQLTypes["SignUpInput"];
	/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
["String_comparison_exp"]: GraphQLTypes["String_comparison_exp"];
	["TestOrderInput"]: GraphQLTypes["TestOrderInput"];
	["TransferInput"]: GraphQLTypes["TransferInput"];
	["UnassignItemInput"]: GraphQLTypes["UnassignItemInput"];
	/** Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'. */
["bigint_comparison_exp"]: GraphQLTypes["bigint_comparison_exp"];
	/** Boolean expression to compare columns of type "bpchar". All fields are combined with logical 'AND'. */
["bpchar_comparison_exp"]: GraphQLTypes["bpchar_comparison_exp"];
	/** Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'. */
["date_comparison_exp"]: GraphQLTypes["date_comparison_exp"];
	/** Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'. */
["jsonb_comparison_exp"]: GraphQLTypes["jsonb_comparison_exp"];
	/** Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'. */
["numeric_comparison_exp"]: GraphQLTypes["numeric_comparison_exp"];
	["sendLicenceAllocationEmailRequest"]: GraphQLTypes["sendLicenceAllocationEmailRequest"];
	/** Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'. */
["smallint_comparison_exp"]: GraphQLTypes["smallint_comparison_exp"];
	/** Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'. */
["timestamp_comparison_exp"]: GraphQLTypes["timestamp_comparison_exp"];
	/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
["timestamptz_comparison_exp"]: GraphQLTypes["timestamptz_comparison_exp"];
	/** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
["uuid_comparison_exp"]: GraphQLTypes["uuid_comparison_exp"];
	/** order by aggregate values of table "vectric.active_memberships" */
["vectric_active_memberships_aggregate_order_by"]: GraphQLTypes["vectric_active_memberships_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.active_memberships" */
["vectric_active_memberships_arr_rel_insert_input"]: GraphQLTypes["vectric_active_memberships_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_avg_order_by"]: GraphQLTypes["vectric_active_memberships_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.active_memberships". All fields are combined with a logical 'AND'. */
["vectric_active_memberships_bool_exp"]: GraphQLTypes["vectric_active_memberships_bool_exp"];
	/** input type for inserting data into table "vectric.active_memberships" */
["vectric_active_memberships_insert_input"]: GraphQLTypes["vectric_active_memberships_insert_input"];
	/** order by max() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_max_order_by"]: GraphQLTypes["vectric_active_memberships_max_order_by"];
	/** order by min() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_min_order_by"]: GraphQLTypes["vectric_active_memberships_min_order_by"];
	/** Ordering options when selecting data from "vectric.active_memberships". */
["vectric_active_memberships_order_by"]: GraphQLTypes["vectric_active_memberships_order_by"];
	/** order by stddev() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_stddev_order_by"]: GraphQLTypes["vectric_active_memberships_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_stddev_pop_order_by"]: GraphQLTypes["vectric_active_memberships_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_stddev_samp_order_by"]: GraphQLTypes["vectric_active_memberships_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_sum_order_by"]: GraphQLTypes["vectric_active_memberships_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_var_pop_order_by"]: GraphQLTypes["vectric_active_memberships_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_var_samp_order_by"]: GraphQLTypes["vectric_active_memberships_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_variance_order_by"]: GraphQLTypes["vectric_active_memberships_variance_order_by"];
	/** order by aggregate values of table "vectric.active_upgrades" */
["vectric_active_upgrades_aggregate_order_by"]: GraphQLTypes["vectric_active_upgrades_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.active_upgrades" */
["vectric_active_upgrades_arr_rel_insert_input"]: GraphQLTypes["vectric_active_upgrades_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_avg_order_by"]: GraphQLTypes["vectric_active_upgrades_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.active_upgrades". All fields are combined with a logical 'AND'. */
["vectric_active_upgrades_bool_exp"]: GraphQLTypes["vectric_active_upgrades_bool_exp"];
	/** input type for inserting data into table "vectric.active_upgrades" */
["vectric_active_upgrades_insert_input"]: GraphQLTypes["vectric_active_upgrades_insert_input"];
	/** order by max() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_max_order_by"]: GraphQLTypes["vectric_active_upgrades_max_order_by"];
	/** order by min() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_min_order_by"]: GraphQLTypes["vectric_active_upgrades_min_order_by"];
	/** Ordering options when selecting data from "vectric.active_upgrades". */
["vectric_active_upgrades_order_by"]: GraphQLTypes["vectric_active_upgrades_order_by"];
	/** order by stddev() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_stddev_order_by"]: GraphQLTypes["vectric_active_upgrades_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_stddev_pop_order_by"]: GraphQLTypes["vectric_active_upgrades_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_stddev_samp_order_by"]: GraphQLTypes["vectric_active_upgrades_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_sum_order_by"]: GraphQLTypes["vectric_active_upgrades_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_var_pop_order_by"]: GraphQLTypes["vectric_active_upgrades_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_var_samp_order_by"]: GraphQLTypes["vectric_active_upgrades_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_variance_order_by"]: GraphQLTypes["vectric_active_upgrades_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.allocatable_bundles". All fields are combined with a logical 'AND'. */
["vectric_allocatable_bundles_bool_exp"]: GraphQLTypes["vectric_allocatable_bundles_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.allocatable_bundles" */
["vectric_allocatable_bundles_inc_input"]: GraphQLTypes["vectric_allocatable_bundles_inc_input"];
	/** input type for inserting data into table "vectric.allocatable_bundles" */
["vectric_allocatable_bundles_insert_input"]: GraphQLTypes["vectric_allocatable_bundles_insert_input"];
	/** Ordering options when selecting data from "vectric.allocatable_bundles". */
["vectric_allocatable_bundles_order_by"]: GraphQLTypes["vectric_allocatable_bundles_order_by"];
	/** input type for updating data in table "vectric.allocatable_bundles" */
["vectric_allocatable_bundles_set_input"]: GraphQLTypes["vectric_allocatable_bundles_set_input"];
	/** Boolean expression to filter rows from the table "vectric.allocatable_licence_count". All fields are combined with a logical 'AND'. */
["vectric_allocatable_licence_count_bool_exp"]: GraphQLTypes["vectric_allocatable_licence_count_bool_exp"];
	/** Ordering options when selecting data from "vectric.allocatable_licence_count". */
["vectric_allocatable_licence_count_order_by"]: GraphQLTypes["vectric_allocatable_licence_count_order_by"];
	/** order by aggregate values of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_aggregate_order_by"]: GraphQLTypes["vectric_allocated_bundles_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.allocated_bundles" */
["vectric_allocated_bundles_arr_rel_insert_input"]: GraphQLTypes["vectric_allocated_bundles_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_avg_order_by"]: GraphQLTypes["vectric_allocated_bundles_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.allocated_bundles". All fields are combined with a logical 'AND'. */
["vectric_allocated_bundles_bool_exp"]: GraphQLTypes["vectric_allocated_bundles_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.allocated_bundles" */
["vectric_allocated_bundles_inc_input"]: GraphQLTypes["vectric_allocated_bundles_inc_input"];
	/** input type for inserting data into table "vectric.allocated_bundles" */
["vectric_allocated_bundles_insert_input"]: GraphQLTypes["vectric_allocated_bundles_insert_input"];
	/** order by max() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_max_order_by"]: GraphQLTypes["vectric_allocated_bundles_max_order_by"];
	/** order by min() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_min_order_by"]: GraphQLTypes["vectric_allocated_bundles_min_order_by"];
	/** Ordering options when selecting data from "vectric.allocated_bundles". */
["vectric_allocated_bundles_order_by"]: GraphQLTypes["vectric_allocated_bundles_order_by"];
	/** input type for updating data in table "vectric.allocated_bundles" */
["vectric_allocated_bundles_set_input"]: GraphQLTypes["vectric_allocated_bundles_set_input"];
	/** order by stddev() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_stddev_order_by"]: GraphQLTypes["vectric_allocated_bundles_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_stddev_pop_order_by"]: GraphQLTypes["vectric_allocated_bundles_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_stddev_samp_order_by"]: GraphQLTypes["vectric_allocated_bundles_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_sum_order_by"]: GraphQLTypes["vectric_allocated_bundles_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_var_pop_order_by"]: GraphQLTypes["vectric_allocated_bundles_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_var_samp_order_by"]: GraphQLTypes["vectric_allocated_bundles_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_variance_order_by"]: GraphQLTypes["vectric_allocated_bundles_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.allocation_summary". All fields are combined with a logical 'AND'. */
["vectric_allocation_summary_bool_exp"]: GraphQLTypes["vectric_allocation_summary_bool_exp"];
	/** Boolean expression to filter rows from the table "vectric.allocation_summary_file_type". All fields are combined with a logical 'AND'. */
["vectric_allocation_summary_file_type_bool_exp"]: GraphQLTypes["vectric_allocation_summary_file_type_bool_exp"];
	/** Boolean expression to compare columns of type "vectric_allocation_summary_file_type_enum". All fields are combined with logical 'AND'. */
["vectric_allocation_summary_file_type_enum_comparison_exp"]: GraphQLTypes["vectric_allocation_summary_file_type_enum_comparison_exp"];
	/** input type for inserting data into table "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_insert_input"]: GraphQLTypes["vectric_allocation_summary_file_type_insert_input"];
	/** on conflict condition type for table "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_on_conflict"]: GraphQLTypes["vectric_allocation_summary_file_type_on_conflict"];
	/** Ordering options when selecting data from "vectric.allocation_summary_file_type". */
["vectric_allocation_summary_file_type_order_by"]: GraphQLTypes["vectric_allocation_summary_file_type_order_by"];
	/** primary key columns input for table: vectric_allocation_summary_file_type */
["vectric_allocation_summary_file_type_pk_columns_input"]: GraphQLTypes["vectric_allocation_summary_file_type_pk_columns_input"];
	/** input type for updating data in table "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_set_input"]: GraphQLTypes["vectric_allocation_summary_file_type_set_input"];
	/** input type for incrementing numeric columns in table "vectric.allocation_summary" */
["vectric_allocation_summary_inc_input"]: GraphQLTypes["vectric_allocation_summary_inc_input"];
	/** input type for inserting data into table "vectric.allocation_summary" */
["vectric_allocation_summary_insert_input"]: GraphQLTypes["vectric_allocation_summary_insert_input"];
	/** on conflict condition type for table "vectric.allocation_summary" */
["vectric_allocation_summary_on_conflict"]: GraphQLTypes["vectric_allocation_summary_on_conflict"];
	/** Ordering options when selecting data from "vectric.allocation_summary". */
["vectric_allocation_summary_order_by"]: GraphQLTypes["vectric_allocation_summary_order_by"];
	/** primary key columns input for table: vectric_allocation_summary */
["vectric_allocation_summary_pk_columns_input"]: GraphQLTypes["vectric_allocation_summary_pk_columns_input"];
	/** input type for updating data in table "vectric.allocation_summary" */
["vectric_allocation_summary_set_input"]: GraphQLTypes["vectric_allocation_summary_set_input"];
	/** Boolean expression to filter rows from the table "vectric.continents". All fields are combined with a logical 'AND'. */
["vectric_continents_bool_exp"]: GraphQLTypes["vectric_continents_bool_exp"];
	/** input type for inserting data into table "vectric.continents" */
["vectric_continents_insert_input"]: GraphQLTypes["vectric_continents_insert_input"];
	/** input type for inserting object relation for remote table "vectric.continents" */
["vectric_continents_obj_rel_insert_input"]: GraphQLTypes["vectric_continents_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.continents" */
["vectric_continents_on_conflict"]: GraphQLTypes["vectric_continents_on_conflict"];
	/** Ordering options when selecting data from "vectric.continents". */
["vectric_continents_order_by"]: GraphQLTypes["vectric_continents_order_by"];
	/** primary key columns input for table: vectric_continents */
["vectric_continents_pk_columns_input"]: GraphQLTypes["vectric_continents_pk_columns_input"];
	/** input type for updating data in table "vectric.continents" */
["vectric_continents_set_input"]: GraphQLTypes["vectric_continents_set_input"];
	/** Boolean expression to filter rows from the table "vectric.countries". All fields are combined with a logical 'AND'. */
["vectric_countries_bool_exp"]: GraphQLTypes["vectric_countries_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.countries" */
["vectric_countries_inc_input"]: GraphQLTypes["vectric_countries_inc_input"];
	/** input type for inserting data into table "vectric.countries" */
["vectric_countries_insert_input"]: GraphQLTypes["vectric_countries_insert_input"];
	/** input type for inserting object relation for remote table "vectric.countries" */
["vectric_countries_obj_rel_insert_input"]: GraphQLTypes["vectric_countries_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.countries" */
["vectric_countries_on_conflict"]: GraphQLTypes["vectric_countries_on_conflict"];
	/** Ordering options when selecting data from "vectric.countries". */
["vectric_countries_order_by"]: GraphQLTypes["vectric_countries_order_by"];
	/** primary key columns input for table: vectric_countries */
["vectric_countries_pk_columns_input"]: GraphQLTypes["vectric_countries_pk_columns_input"];
	/** input type for updating data in table "vectric.countries" */
["vectric_countries_set_input"]: GraphQLTypes["vectric_countries_set_input"];
	/** Boolean expression to filter rows from the table "vectric.customer_area". All fields are combined with a logical 'AND'. */
["vectric_customer_area_bool_exp"]: GraphQLTypes["vectric_customer_area_bool_exp"];
	/** order by aggregate values of table "vectric.customer_area_file" */
["vectric_customer_area_file_aggregate_order_by"]: GraphQLTypes["vectric_customer_area_file_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.customer_area_file" */
["vectric_customer_area_file_arr_rel_insert_input"]: GraphQLTypes["vectric_customer_area_file_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_avg_order_by"]: GraphQLTypes["vectric_customer_area_file_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.customer_area_file". All fields are combined with a logical 'AND'. */
["vectric_customer_area_file_bool_exp"]: GraphQLTypes["vectric_customer_area_file_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.customer_area_file" */
["vectric_customer_area_file_inc_input"]: GraphQLTypes["vectric_customer_area_file_inc_input"];
	/** input type for inserting data into table "vectric.customer_area_file" */
["vectric_customer_area_file_insert_input"]: GraphQLTypes["vectric_customer_area_file_insert_input"];
	/** order by max() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_max_order_by"]: GraphQLTypes["vectric_customer_area_file_max_order_by"];
	/** order by min() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_min_order_by"]: GraphQLTypes["vectric_customer_area_file_min_order_by"];
	/** on conflict condition type for table "vectric.customer_area_file" */
["vectric_customer_area_file_on_conflict"]: GraphQLTypes["vectric_customer_area_file_on_conflict"];
	/** Ordering options when selecting data from "vectric.customer_area_file". */
["vectric_customer_area_file_order_by"]: GraphQLTypes["vectric_customer_area_file_order_by"];
	/** primary key columns input for table: vectric_customer_area_file */
["vectric_customer_area_file_pk_columns_input"]: GraphQLTypes["vectric_customer_area_file_pk_columns_input"];
	/** input type for updating data in table "vectric.customer_area_file" */
["vectric_customer_area_file_set_input"]: GraphQLTypes["vectric_customer_area_file_set_input"];
	/** order by stddev() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_stddev_order_by"]: GraphQLTypes["vectric_customer_area_file_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_stddev_pop_order_by"]: GraphQLTypes["vectric_customer_area_file_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_stddev_samp_order_by"]: GraphQLTypes["vectric_customer_area_file_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_sum_order_by"]: GraphQLTypes["vectric_customer_area_file_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_var_pop_order_by"]: GraphQLTypes["vectric_customer_area_file_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_var_samp_order_by"]: GraphQLTypes["vectric_customer_area_file_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_variance_order_by"]: GraphQLTypes["vectric_customer_area_file_variance_order_by"];
	/** input type for incrementing numeric columns in table "vectric.customer_area" */
["vectric_customer_area_inc_input"]: GraphQLTypes["vectric_customer_area_inc_input"];
	/** input type for inserting data into table "vectric.customer_area" */
["vectric_customer_area_insert_input"]: GraphQLTypes["vectric_customer_area_insert_input"];
	/** input type for inserting object relation for remote table "vectric.customer_area" */
["vectric_customer_area_obj_rel_insert_input"]: GraphQLTypes["vectric_customer_area_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.customer_area" */
["vectric_customer_area_on_conflict"]: GraphQLTypes["vectric_customer_area_on_conflict"];
	/** Ordering options when selecting data from "vectric.customer_area". */
["vectric_customer_area_order_by"]: GraphQLTypes["vectric_customer_area_order_by"];
	/** primary key columns input for table: vectric_customer_area */
["vectric_customer_area_pk_columns_input"]: GraphQLTypes["vectric_customer_area_pk_columns_input"];
	/** input type for updating data in table "vectric.customer_area" */
["vectric_customer_area_set_input"]: GraphQLTypes["vectric_customer_area_set_input"];
	/** order by aggregate values of table "vectric.customer_responses" */
["vectric_customer_responses_aggregate_order_by"]: GraphQLTypes["vectric_customer_responses_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.customer_responses" */
["vectric_customer_responses_arr_rel_insert_input"]: GraphQLTypes["vectric_customer_responses_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_avg_order_by"]: GraphQLTypes["vectric_customer_responses_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.customer_responses". All fields are combined with a logical 'AND'. */
["vectric_customer_responses_bool_exp"]: GraphQLTypes["vectric_customer_responses_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.customer_responses" */
["vectric_customer_responses_inc_input"]: GraphQLTypes["vectric_customer_responses_inc_input"];
	/** input type for inserting data into table "vectric.customer_responses" */
["vectric_customer_responses_insert_input"]: GraphQLTypes["vectric_customer_responses_insert_input"];
	/** order by max() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_max_order_by"]: GraphQLTypes["vectric_customer_responses_max_order_by"];
	/** order by min() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_min_order_by"]: GraphQLTypes["vectric_customer_responses_min_order_by"];
	/** on conflict condition type for table "vectric.customer_responses" */
["vectric_customer_responses_on_conflict"]: GraphQLTypes["vectric_customer_responses_on_conflict"];
	/** Ordering options when selecting data from "vectric.customer_responses". */
["vectric_customer_responses_order_by"]: GraphQLTypes["vectric_customer_responses_order_by"];
	/** primary key columns input for table: vectric_customer_responses */
["vectric_customer_responses_pk_columns_input"]: GraphQLTypes["vectric_customer_responses_pk_columns_input"];
	/** input type for updating data in table "vectric.customer_responses" */
["vectric_customer_responses_set_input"]: GraphQLTypes["vectric_customer_responses_set_input"];
	/** order by stddev() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_stddev_order_by"]: GraphQLTypes["vectric_customer_responses_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_stddev_pop_order_by"]: GraphQLTypes["vectric_customer_responses_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_stddev_samp_order_by"]: GraphQLTypes["vectric_customer_responses_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_sum_order_by"]: GraphQLTypes["vectric_customer_responses_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_var_pop_order_by"]: GraphQLTypes["vectric_customer_responses_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_var_samp_order_by"]: GraphQLTypes["vectric_customer_responses_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_variance_order_by"]: GraphQLTypes["vectric_customer_responses_variance_order_by"];
	/** order by aggregate values of table "vectric.customer_sales" */
["vectric_customer_sales_aggregate_order_by"]: GraphQLTypes["vectric_customer_sales_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.customer_sales" */
["vectric_customer_sales_arr_rel_insert_input"]: GraphQLTypes["vectric_customer_sales_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_avg_order_by"]: GraphQLTypes["vectric_customer_sales_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.customer_sales". All fields are combined with a logical 'AND'. */
["vectric_customer_sales_bool_exp"]: GraphQLTypes["vectric_customer_sales_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.customer_sales" */
["vectric_customer_sales_inc_input"]: GraphQLTypes["vectric_customer_sales_inc_input"];
	/** input type for inserting data into table "vectric.customer_sales" */
["vectric_customer_sales_insert_input"]: GraphQLTypes["vectric_customer_sales_insert_input"];
	/** order by max() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_max_order_by"]: GraphQLTypes["vectric_customer_sales_max_order_by"];
	/** order by min() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_min_order_by"]: GraphQLTypes["vectric_customer_sales_min_order_by"];
	/** input type for inserting object relation for remote table "vectric.customer_sales" */
["vectric_customer_sales_obj_rel_insert_input"]: GraphQLTypes["vectric_customer_sales_obj_rel_insert_input"];
	/** Ordering options when selecting data from "vectric.customer_sales". */
["vectric_customer_sales_order_by"]: GraphQLTypes["vectric_customer_sales_order_by"];
	/** input type for updating data in table "vectric.customer_sales" */
["vectric_customer_sales_set_input"]: GraphQLTypes["vectric_customer_sales_set_input"];
	/** order by stddev() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_stddev_order_by"]: GraphQLTypes["vectric_customer_sales_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_stddev_pop_order_by"]: GraphQLTypes["vectric_customer_sales_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_stddev_samp_order_by"]: GraphQLTypes["vectric_customer_sales_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_sum_order_by"]: GraphQLTypes["vectric_customer_sales_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_var_pop_order_by"]: GraphQLTypes["vectric_customer_sales_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_var_samp_order_by"]: GraphQLTypes["vectric_customer_sales_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_variance_order_by"]: GraphQLTypes["vectric_customer_sales_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.customer_status". All fields are combined with a logical 'AND'. */
["vectric_customer_status_bool_exp"]: GraphQLTypes["vectric_customer_status_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.customer_status" */
["vectric_customer_status_inc_input"]: GraphQLTypes["vectric_customer_status_inc_input"];
	/** input type for inserting data into table "vectric.customer_status" */
["vectric_customer_status_insert_input"]: GraphQLTypes["vectric_customer_status_insert_input"];
	/** on conflict condition type for table "vectric.customer_status" */
["vectric_customer_status_on_conflict"]: GraphQLTypes["vectric_customer_status_on_conflict"];
	/** Ordering options when selecting data from "vectric.customer_status". */
["vectric_customer_status_order_by"]: GraphQLTypes["vectric_customer_status_order_by"];
	/** primary key columns input for table: vectric_customer_status */
["vectric_customer_status_pk_columns_input"]: GraphQLTypes["vectric_customer_status_pk_columns_input"];
	/** input type for updating data in table "vectric.customer_status" */
["vectric_customer_status_set_input"]: GraphQLTypes["vectric_customer_status_set_input"];
	/** Boolean expression to filter rows from the table "vectric.customer_zd_uploads". All fields are combined with a logical 'AND'. */
["vectric_customer_zd_uploads_bool_exp"]: GraphQLTypes["vectric_customer_zd_uploads_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_inc_input"]: GraphQLTypes["vectric_customer_zd_uploads_inc_input"];
	/** input type for inserting data into table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_insert_input"]: GraphQLTypes["vectric_customer_zd_uploads_insert_input"];
	/** on conflict condition type for table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_on_conflict"]: GraphQLTypes["vectric_customer_zd_uploads_on_conflict"];
	/** Ordering options when selecting data from "vectric.customer_zd_uploads". */
["vectric_customer_zd_uploads_order_by"]: GraphQLTypes["vectric_customer_zd_uploads_order_by"];
	/** primary key columns input for table: vectric_customer_zd_uploads */
["vectric_customer_zd_uploads_pk_columns_input"]: GraphQLTypes["vectric_customer_zd_uploads_pk_columns_input"];
	/** input type for updating data in table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_set_input"]: GraphQLTypes["vectric_customer_zd_uploads_set_input"];
	/** Boolean expression to filter rows from the table "vectric.download". All fields are combined with a logical 'AND'. */
["vectric_download_bool_exp"]: GraphQLTypes["vectric_download_bool_exp"];
	/** input type for inserting data into table "vectric.download" */
["vectric_download_insert_input"]: GraphQLTypes["vectric_download_insert_input"];
	/** on conflict condition type for table "vectric.download" */
["vectric_download_on_conflict"]: GraphQLTypes["vectric_download_on_conflict"];
	/** Ordering options when selecting data from "vectric.download". */
["vectric_download_order_by"]: GraphQLTypes["vectric_download_order_by"];
	/** primary key columns input for table: vectric_download */
["vectric_download_pk_columns_input"]: GraphQLTypes["vectric_download_pk_columns_input"];
	/** Boolean expression to filter rows from the table "vectric.download_record". All fields are combined with a logical 'AND'. */
["vectric_download_record_bool_exp"]: GraphQLTypes["vectric_download_record_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.download_record" */
["vectric_download_record_inc_input"]: GraphQLTypes["vectric_download_record_inc_input"];
	/** input type for inserting data into table "vectric.download_record" */
["vectric_download_record_insert_input"]: GraphQLTypes["vectric_download_record_insert_input"];
	/** on conflict condition type for table "vectric.download_record" */
["vectric_download_record_on_conflict"]: GraphQLTypes["vectric_download_record_on_conflict"];
	/** Ordering options when selecting data from "vectric.download_record". */
["vectric_download_record_order_by"]: GraphQLTypes["vectric_download_record_order_by"];
	/** primary key columns input for table: vectric_download_record */
["vectric_download_record_pk_columns_input"]: GraphQLTypes["vectric_download_record_pk_columns_input"];
	/** input type for updating data in table "vectric.download_record" */
["vectric_download_record_set_input"]: GraphQLTypes["vectric_download_record_set_input"];
	/** input type for updating data in table "vectric.download" */
["vectric_download_set_input"]: GraphQLTypes["vectric_download_set_input"];
	/** order by aggregate values of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_aggregate_order_by"]: GraphQLTypes["vectric_enhancement_tokens_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_arr_rel_insert_input"]: GraphQLTypes["vectric_enhancement_tokens_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_avg_order_by"]: GraphQLTypes["vectric_enhancement_tokens_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.enhancement_tokens". All fields are combined with a logical 'AND'. */
["vectric_enhancement_tokens_bool_exp"]: GraphQLTypes["vectric_enhancement_tokens_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_inc_input"]: GraphQLTypes["vectric_enhancement_tokens_inc_input"];
	/** input type for inserting data into table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_insert_input"]: GraphQLTypes["vectric_enhancement_tokens_insert_input"];
	/** order by max() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_max_order_by"]: GraphQLTypes["vectric_enhancement_tokens_max_order_by"];
	/** order by min() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_min_order_by"]: GraphQLTypes["vectric_enhancement_tokens_min_order_by"];
	/** on conflict condition type for table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_on_conflict"]: GraphQLTypes["vectric_enhancement_tokens_on_conflict"];
	/** Ordering options when selecting data from "vectric.enhancement_tokens". */
["vectric_enhancement_tokens_order_by"]: GraphQLTypes["vectric_enhancement_tokens_order_by"];
	/** primary key columns input for table: vectric_enhancement_tokens */
["vectric_enhancement_tokens_pk_columns_input"]: GraphQLTypes["vectric_enhancement_tokens_pk_columns_input"];
	/** input type for updating data in table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_set_input"]: GraphQLTypes["vectric_enhancement_tokens_set_input"];
	/** order by stddev() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_stddev_order_by"]: GraphQLTypes["vectric_enhancement_tokens_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_stddev_pop_order_by"]: GraphQLTypes["vectric_enhancement_tokens_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_stddev_samp_order_by"]: GraphQLTypes["vectric_enhancement_tokens_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_sum_order_by"]: GraphQLTypes["vectric_enhancement_tokens_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_var_pop_order_by"]: GraphQLTypes["vectric_enhancement_tokens_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_var_samp_order_by"]: GraphQLTypes["vectric_enhancement_tokens_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_variance_order_by"]: GraphQLTypes["vectric_enhancement_tokens_variance_order_by"];
	/** order by aggregate values of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_aggregate_order_by"]: GraphQLTypes["vectric_entitled_product_version_code_view_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_arr_rel_insert_input"]: GraphQLTypes["vectric_entitled_product_version_code_view_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_avg_order_by"]: GraphQLTypes["vectric_entitled_product_version_code_view_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.entitled_product_version_code_view". All fields are combined with a logical 'AND'. */
["vectric_entitled_product_version_code_view_bool_exp"]: GraphQLTypes["vectric_entitled_product_version_code_view_bool_exp"];
	/** input type for inserting data into table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_insert_input"]: GraphQLTypes["vectric_entitled_product_version_code_view_insert_input"];
	/** order by max() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_max_order_by"]: GraphQLTypes["vectric_entitled_product_version_code_view_max_order_by"];
	/** order by min() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_min_order_by"]: GraphQLTypes["vectric_entitled_product_version_code_view_min_order_by"];
	/** Ordering options when selecting data from "vectric.entitled_product_version_code_view". */
["vectric_entitled_product_version_code_view_order_by"]: GraphQLTypes["vectric_entitled_product_version_code_view_order_by"];
	/** order by stddev() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_stddev_order_by"]: GraphQLTypes["vectric_entitled_product_version_code_view_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_stddev_pop_order_by"]: GraphQLTypes["vectric_entitled_product_version_code_view_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_stddev_samp_order_by"]: GraphQLTypes["vectric_entitled_product_version_code_view_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_sum_order_by"]: GraphQLTypes["vectric_entitled_product_version_code_view_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_var_pop_order_by"]: GraphQLTypes["vectric_entitled_product_version_code_view_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_var_samp_order_by"]: GraphQLTypes["vectric_entitled_product_version_code_view_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_variance_order_by"]: GraphQLTypes["vectric_entitled_product_version_code_view_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.entitled_products". All fields are combined with a logical 'AND'. */
["vectric_entitled_products_bool_exp"]: GraphQLTypes["vectric_entitled_products_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.entitled_products" */
["vectric_entitled_products_inc_input"]: GraphQLTypes["vectric_entitled_products_inc_input"];
	/** input type for inserting data into table "vectric.entitled_products" */
["vectric_entitled_products_insert_input"]: GraphQLTypes["vectric_entitled_products_insert_input"];
	/** input type for inserting object relation for remote table "vectric.entitled_products" */
["vectric_entitled_products_obj_rel_insert_input"]: GraphQLTypes["vectric_entitled_products_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.entitled_products" */
["vectric_entitled_products_on_conflict"]: GraphQLTypes["vectric_entitled_products_on_conflict"];
	/** Ordering options when selecting data from "vectric.entitled_products". */
["vectric_entitled_products_order_by"]: GraphQLTypes["vectric_entitled_products_order_by"];
	/** primary key columns input for table: vectric_entitled_products */
["vectric_entitled_products_pk_columns_input"]: GraphQLTypes["vectric_entitled_products_pk_columns_input"];
	/** input type for updating data in table "vectric.entitled_products" */
["vectric_entitled_products_set_input"]: GraphQLTypes["vectric_entitled_products_set_input"];
	/** Boolean expression to filter rows from the table "vectric.entitlement_licences". All fields are combined with a logical 'AND'. */
["vectric_entitlement_licences_bool_exp"]: GraphQLTypes["vectric_entitlement_licences_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.entitlement_licences" */
["vectric_entitlement_licences_inc_input"]: GraphQLTypes["vectric_entitlement_licences_inc_input"];
	/** input type for inserting data into table "vectric.entitlement_licences" */
["vectric_entitlement_licences_insert_input"]: GraphQLTypes["vectric_entitlement_licences_insert_input"];
	/** input type for inserting object relation for remote table "vectric.entitlement_licences" */
["vectric_entitlement_licences_obj_rel_insert_input"]: GraphQLTypes["vectric_entitlement_licences_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.entitlement_licences" */
["vectric_entitlement_licences_on_conflict"]: GraphQLTypes["vectric_entitlement_licences_on_conflict"];
	/** Ordering options when selecting data from "vectric.entitlement_licences". */
["vectric_entitlement_licences_order_by"]: GraphQLTypes["vectric_entitlement_licences_order_by"];
	/** primary key columns input for table: vectric_entitlement_licences */
["vectric_entitlement_licences_pk_columns_input"]: GraphQLTypes["vectric_entitlement_licences_pk_columns_input"];
	/** input type for updating data in table "vectric.entitlement_licences" */
["vectric_entitlement_licences_set_input"]: GraphQLTypes["vectric_entitlement_licences_set_input"];
	/** order by aggregate values of table "vectric.entitlements" */
["vectric_entitlements_aggregate_order_by"]: GraphQLTypes["vectric_entitlements_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.entitlements" */
["vectric_entitlements_arr_rel_insert_input"]: GraphQLTypes["vectric_entitlements_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.entitlements" */
["vectric_entitlements_avg_order_by"]: GraphQLTypes["vectric_entitlements_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.entitlements". All fields are combined with a logical 'AND'. */
["vectric_entitlements_bool_exp"]: GraphQLTypes["vectric_entitlements_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.entitlements" */
["vectric_entitlements_inc_input"]: GraphQLTypes["vectric_entitlements_inc_input"];
	/** input type for inserting data into table "vectric.entitlements" */
["vectric_entitlements_insert_input"]: GraphQLTypes["vectric_entitlements_insert_input"];
	/** order by max() on columns of table "vectric.entitlements" */
["vectric_entitlements_max_order_by"]: GraphQLTypes["vectric_entitlements_max_order_by"];
	/** order by min() on columns of table "vectric.entitlements" */
["vectric_entitlements_min_order_by"]: GraphQLTypes["vectric_entitlements_min_order_by"];
	/** input type for inserting object relation for remote table "vectric.entitlements" */
["vectric_entitlements_obj_rel_insert_input"]: GraphQLTypes["vectric_entitlements_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.entitlements" */
["vectric_entitlements_on_conflict"]: GraphQLTypes["vectric_entitlements_on_conflict"];
	/** Ordering options when selecting data from "vectric.entitlements". */
["vectric_entitlements_order_by"]: GraphQLTypes["vectric_entitlements_order_by"];
	/** primary key columns input for table: vectric_entitlements */
["vectric_entitlements_pk_columns_input"]: GraphQLTypes["vectric_entitlements_pk_columns_input"];
	/** input type for updating data in table "vectric.entitlements" */
["vectric_entitlements_set_input"]: GraphQLTypes["vectric_entitlements_set_input"];
	/** order by stddev() on columns of table "vectric.entitlements" */
["vectric_entitlements_stddev_order_by"]: GraphQLTypes["vectric_entitlements_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.entitlements" */
["vectric_entitlements_stddev_pop_order_by"]: GraphQLTypes["vectric_entitlements_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.entitlements" */
["vectric_entitlements_stddev_samp_order_by"]: GraphQLTypes["vectric_entitlements_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.entitlements" */
["vectric_entitlements_sum_order_by"]: GraphQLTypes["vectric_entitlements_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.entitlements" */
["vectric_entitlements_var_pop_order_by"]: GraphQLTypes["vectric_entitlements_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.entitlements" */
["vectric_entitlements_var_samp_order_by"]: GraphQLTypes["vectric_entitlements_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.entitlements" */
["vectric_entitlements_variance_order_by"]: GraphQLTypes["vectric_entitlements_variance_order_by"];
	/** order by aggregate values of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_aggregate_order_by"]: GraphQLTypes["vectric_free_clipart_tokens_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_arr_rel_insert_input"]: GraphQLTypes["vectric_free_clipart_tokens_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_avg_order_by"]: GraphQLTypes["vectric_free_clipart_tokens_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.free_clipart_tokens". All fields are combined with a logical 'AND'. */
["vectric_free_clipart_tokens_bool_exp"]: GraphQLTypes["vectric_free_clipart_tokens_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_inc_input"]: GraphQLTypes["vectric_free_clipart_tokens_inc_input"];
	/** input type for inserting data into table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_insert_input"]: GraphQLTypes["vectric_free_clipart_tokens_insert_input"];
	/** order by max() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_max_order_by"]: GraphQLTypes["vectric_free_clipart_tokens_max_order_by"];
	/** order by min() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_min_order_by"]: GraphQLTypes["vectric_free_clipart_tokens_min_order_by"];
	/** on conflict condition type for table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_on_conflict"]: GraphQLTypes["vectric_free_clipart_tokens_on_conflict"];
	/** Ordering options when selecting data from "vectric.free_clipart_tokens". */
["vectric_free_clipart_tokens_order_by"]: GraphQLTypes["vectric_free_clipart_tokens_order_by"];
	/** primary key columns input for table: vectric_free_clipart_tokens */
["vectric_free_clipart_tokens_pk_columns_input"]: GraphQLTypes["vectric_free_clipart_tokens_pk_columns_input"];
	/** input type for updating data in table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_set_input"]: GraphQLTypes["vectric_free_clipart_tokens_set_input"];
	/** order by stddev() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_stddev_order_by"]: GraphQLTypes["vectric_free_clipart_tokens_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_stddev_pop_order_by"]: GraphQLTypes["vectric_free_clipart_tokens_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_stddev_samp_order_by"]: GraphQLTypes["vectric_free_clipart_tokens_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_sum_order_by"]: GraphQLTypes["vectric_free_clipart_tokens_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_var_pop_order_by"]: GraphQLTypes["vectric_free_clipart_tokens_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_var_samp_order_by"]: GraphQLTypes["vectric_free_clipart_tokens_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_variance_order_by"]: GraphQLTypes["vectric_free_clipart_tokens_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.freeclipart". All fields are combined with a logical 'AND'. */
["vectric_freeclipart_bool_exp"]: GraphQLTypes["vectric_freeclipart_bool_exp"];
	/** Boolean expression to filter rows from the table "vectric.freeclipart_category". All fields are combined with a logical 'AND'. */
["vectric_freeclipart_category_bool_exp"]: GraphQLTypes["vectric_freeclipart_category_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.freeclipart_category" */
["vectric_freeclipart_category_inc_input"]: GraphQLTypes["vectric_freeclipart_category_inc_input"];
	/** input type for inserting data into table "vectric.freeclipart_category" */
["vectric_freeclipart_category_insert_input"]: GraphQLTypes["vectric_freeclipart_category_insert_input"];
	/** input type for inserting object relation for remote table "vectric.freeclipart_category" */
["vectric_freeclipart_category_obj_rel_insert_input"]: GraphQLTypes["vectric_freeclipart_category_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.freeclipart_category" */
["vectric_freeclipart_category_on_conflict"]: GraphQLTypes["vectric_freeclipart_category_on_conflict"];
	/** Ordering options when selecting data from "vectric.freeclipart_category". */
["vectric_freeclipart_category_order_by"]: GraphQLTypes["vectric_freeclipart_category_order_by"];
	/** primary key columns input for table: vectric_freeclipart_category */
["vectric_freeclipart_category_pk_columns_input"]: GraphQLTypes["vectric_freeclipart_category_pk_columns_input"];
	/** input type for updating data in table "vectric.freeclipart_category" */
["vectric_freeclipart_category_set_input"]: GraphQLTypes["vectric_freeclipart_category_set_input"];
	/** Boolean expression to filter rows from the table "vectric.freeclipart_download_record". All fields are combined with a logical 'AND'. */
["vectric_freeclipart_download_record_bool_exp"]: GraphQLTypes["vectric_freeclipart_download_record_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_inc_input"]: GraphQLTypes["vectric_freeclipart_download_record_inc_input"];
	/** input type for inserting data into table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_insert_input"]: GraphQLTypes["vectric_freeclipart_download_record_insert_input"];
	/** on conflict condition type for table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_on_conflict"]: GraphQLTypes["vectric_freeclipart_download_record_on_conflict"];
	/** Ordering options when selecting data from "vectric.freeclipart_download_record". */
["vectric_freeclipart_download_record_order_by"]: GraphQLTypes["vectric_freeclipart_download_record_order_by"];
	/** primary key columns input for table: vectric_freeclipart_download_record */
["vectric_freeclipart_download_record_pk_columns_input"]: GraphQLTypes["vectric_freeclipart_download_record_pk_columns_input"];
	/** input type for updating data in table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_set_input"]: GraphQLTypes["vectric_freeclipart_download_record_set_input"];
	/** input type for incrementing numeric columns in table "vectric.freeclipart" */
["vectric_freeclipart_inc_input"]: GraphQLTypes["vectric_freeclipart_inc_input"];
	/** input type for inserting data into table "vectric.freeclipart" */
["vectric_freeclipart_insert_input"]: GraphQLTypes["vectric_freeclipart_insert_input"];
	/** input type for inserting object relation for remote table "vectric.freeclipart" */
["vectric_freeclipart_obj_rel_insert_input"]: GraphQLTypes["vectric_freeclipart_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.freeclipart" */
["vectric_freeclipart_on_conflict"]: GraphQLTypes["vectric_freeclipart_on_conflict"];
	/** Ordering options when selecting data from "vectric.freeclipart". */
["vectric_freeclipart_order_by"]: GraphQLTypes["vectric_freeclipart_order_by"];
	/** primary key columns input for table: vectric_freeclipart */
["vectric_freeclipart_pk_columns_input"]: GraphQLTypes["vectric_freeclipart_pk_columns_input"];
	/** input type for updating data in table "vectric.freeclipart" */
["vectric_freeclipart_set_input"]: GraphQLTypes["vectric_freeclipart_set_input"];
	/** Boolean expression to filter rows from the table "vectric.group_info". All fields are combined with a logical 'AND'. */
["vectric_group_info_bool_exp"]: GraphQLTypes["vectric_group_info_bool_exp"];
	/** Ordering options when selecting data from "vectric.group_info". */
["vectric_group_info_order_by"]: GraphQLTypes["vectric_group_info_order_by"];
	/** Boolean expression to filter rows from the table "vectric.group_roles". All fields are combined with a logical 'AND'. */
["vectric_group_roles_bool_exp"]: GraphQLTypes["vectric_group_roles_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.group_roles" */
["vectric_group_roles_inc_input"]: GraphQLTypes["vectric_group_roles_inc_input"];
	/** input type for inserting data into table "vectric.group_roles" */
["vectric_group_roles_insert_input"]: GraphQLTypes["vectric_group_roles_insert_input"];
	/** input type for inserting object relation for remote table "vectric.group_roles" */
["vectric_group_roles_obj_rel_insert_input"]: GraphQLTypes["vectric_group_roles_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.group_roles" */
["vectric_group_roles_on_conflict"]: GraphQLTypes["vectric_group_roles_on_conflict"];
	/** Ordering options when selecting data from "vectric.group_roles". */
["vectric_group_roles_order_by"]: GraphQLTypes["vectric_group_roles_order_by"];
	/** primary key columns input for table: vectric_group_roles */
["vectric_group_roles_pk_columns_input"]: GraphQLTypes["vectric_group_roles_pk_columns_input"];
	/** input type for updating data in table "vectric.group_roles" */
["vectric_group_roles_set_input"]: GraphQLTypes["vectric_group_roles_set_input"];
	/** order by aggregate values of table "vectric.group_user_role" */
["vectric_group_user_role_aggregate_order_by"]: GraphQLTypes["vectric_group_user_role_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.group_user_role" */
["vectric_group_user_role_arr_rel_insert_input"]: GraphQLTypes["vectric_group_user_role_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_avg_order_by"]: GraphQLTypes["vectric_group_user_role_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.group_user_role". All fields are combined with a logical 'AND'. */
["vectric_group_user_role_bool_exp"]: GraphQLTypes["vectric_group_user_role_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.group_user_role" */
["vectric_group_user_role_inc_input"]: GraphQLTypes["vectric_group_user_role_inc_input"];
	/** input type for inserting data into table "vectric.group_user_role" */
["vectric_group_user_role_insert_input"]: GraphQLTypes["vectric_group_user_role_insert_input"];
	/** order by max() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_max_order_by"]: GraphQLTypes["vectric_group_user_role_max_order_by"];
	/** order by min() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_min_order_by"]: GraphQLTypes["vectric_group_user_role_min_order_by"];
	/** on conflict condition type for table "vectric.group_user_role" */
["vectric_group_user_role_on_conflict"]: GraphQLTypes["vectric_group_user_role_on_conflict"];
	/** Ordering options when selecting data from "vectric.group_user_role". */
["vectric_group_user_role_order_by"]: GraphQLTypes["vectric_group_user_role_order_by"];
	/** primary key columns input for table: vectric_group_user_role */
["vectric_group_user_role_pk_columns_input"]: GraphQLTypes["vectric_group_user_role_pk_columns_input"];
	/** input type for updating data in table "vectric.group_user_role" */
["vectric_group_user_role_set_input"]: GraphQLTypes["vectric_group_user_role_set_input"];
	/** order by stddev() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_stddev_order_by"]: GraphQLTypes["vectric_group_user_role_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_stddev_pop_order_by"]: GraphQLTypes["vectric_group_user_role_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_stddev_samp_order_by"]: GraphQLTypes["vectric_group_user_role_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_sum_order_by"]: GraphQLTypes["vectric_group_user_role_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_var_pop_order_by"]: GraphQLTypes["vectric_group_user_role_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_var_samp_order_by"]: GraphQLTypes["vectric_group_user_role_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_variance_order_by"]: GraphQLTypes["vectric_group_user_role_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.groups". All fields are combined with a logical 'AND'. */
["vectric_groups_bool_exp"]: GraphQLTypes["vectric_groups_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.groups" */
["vectric_groups_inc_input"]: GraphQLTypes["vectric_groups_inc_input"];
	/** input type for inserting data into table "vectric.groups" */
["vectric_groups_insert_input"]: GraphQLTypes["vectric_groups_insert_input"];
	/** input type for inserting object relation for remote table "vectric.groups" */
["vectric_groups_obj_rel_insert_input"]: GraphQLTypes["vectric_groups_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.groups" */
["vectric_groups_on_conflict"]: GraphQLTypes["vectric_groups_on_conflict"];
	/** Ordering options when selecting data from "vectric.groups". */
["vectric_groups_order_by"]: GraphQLTypes["vectric_groups_order_by"];
	/** primary key columns input for table: vectric_groups */
["vectric_groups_pk_columns_input"]: GraphQLTypes["vectric_groups_pk_columns_input"];
	/** input type for updating data in table "vectric.groups" */
["vectric_groups_set_input"]: GraphQLTypes["vectric_groups_set_input"];
	/** Boolean expression to filter rows from the table "vectric.language_codes". All fields are combined with a logical 'AND'. */
["vectric_language_codes_bool_exp"]: GraphQLTypes["vectric_language_codes_bool_exp"];
	/** input type for inserting data into table "vectric.language_codes" */
["vectric_language_codes_insert_input"]: GraphQLTypes["vectric_language_codes_insert_input"];
	/** input type for inserting object relation for remote table "vectric.language_codes" */
["vectric_language_codes_obj_rel_insert_input"]: GraphQLTypes["vectric_language_codes_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.language_codes" */
["vectric_language_codes_on_conflict"]: GraphQLTypes["vectric_language_codes_on_conflict"];
	/** Ordering options when selecting data from "vectric.language_codes". */
["vectric_language_codes_order_by"]: GraphQLTypes["vectric_language_codes_order_by"];
	/** primary key columns input for table: vectric_language_codes */
["vectric_language_codes_pk_columns_input"]: GraphQLTypes["vectric_language_codes_pk_columns_input"];
	/** input type for updating data in table "vectric.language_codes" */
["vectric_language_codes_set_input"]: GraphQLTypes["vectric_language_codes_set_input"];
	/** order by aggregate values of table "vectric.licence_log" */
["vectric_licence_log_aggregate_order_by"]: GraphQLTypes["vectric_licence_log_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.licence_log" */
["vectric_licence_log_arr_rel_insert_input"]: GraphQLTypes["vectric_licence_log_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.licence_log" */
["vectric_licence_log_avg_order_by"]: GraphQLTypes["vectric_licence_log_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.licence_log". All fields are combined with a logical 'AND'. */
["vectric_licence_log_bool_exp"]: GraphQLTypes["vectric_licence_log_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.licence_log" */
["vectric_licence_log_inc_input"]: GraphQLTypes["vectric_licence_log_inc_input"];
	/** input type for inserting data into table "vectric.licence_log" */
["vectric_licence_log_insert_input"]: GraphQLTypes["vectric_licence_log_insert_input"];
	/** order by max() on columns of table "vectric.licence_log" */
["vectric_licence_log_max_order_by"]: GraphQLTypes["vectric_licence_log_max_order_by"];
	/** order by min() on columns of table "vectric.licence_log" */
["vectric_licence_log_min_order_by"]: GraphQLTypes["vectric_licence_log_min_order_by"];
	/** on conflict condition type for table "vectric.licence_log" */
["vectric_licence_log_on_conflict"]: GraphQLTypes["vectric_licence_log_on_conflict"];
	/** Ordering options when selecting data from "vectric.licence_log". */
["vectric_licence_log_order_by"]: GraphQLTypes["vectric_licence_log_order_by"];
	/** primary key columns input for table: vectric_licence_log */
["vectric_licence_log_pk_columns_input"]: GraphQLTypes["vectric_licence_log_pk_columns_input"];
	/** input type for updating data in table "vectric.licence_log" */
["vectric_licence_log_set_input"]: GraphQLTypes["vectric_licence_log_set_input"];
	/** order by stddev() on columns of table "vectric.licence_log" */
["vectric_licence_log_stddev_order_by"]: GraphQLTypes["vectric_licence_log_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.licence_log" */
["vectric_licence_log_stddev_pop_order_by"]: GraphQLTypes["vectric_licence_log_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.licence_log" */
["vectric_licence_log_stddev_samp_order_by"]: GraphQLTypes["vectric_licence_log_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.licence_log" */
["vectric_licence_log_sum_order_by"]: GraphQLTypes["vectric_licence_log_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.licence_log" */
["vectric_licence_log_var_pop_order_by"]: GraphQLTypes["vectric_licence_log_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.licence_log" */
["vectric_licence_log_var_samp_order_by"]: GraphQLTypes["vectric_licence_log_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.licence_log" */
["vectric_licence_log_variance_order_by"]: GraphQLTypes["vectric_licence_log_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.linkshortener_links". All fields are combined with a logical 'AND'. */
["vectric_linkshortener_links_bool_exp"]: GraphQLTypes["vectric_linkshortener_links_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.linkshortener_links" */
["vectric_linkshortener_links_inc_input"]: GraphQLTypes["vectric_linkshortener_links_inc_input"];
	/** input type for inserting data into table "vectric.linkshortener_links" */
["vectric_linkshortener_links_insert_input"]: GraphQLTypes["vectric_linkshortener_links_insert_input"];
	/** on conflict condition type for table "vectric.linkshortener_links" */
["vectric_linkshortener_links_on_conflict"]: GraphQLTypes["vectric_linkshortener_links_on_conflict"];
	/** Ordering options when selecting data from "vectric.linkshortener_links". */
["vectric_linkshortener_links_order_by"]: GraphQLTypes["vectric_linkshortener_links_order_by"];
	/** primary key columns input for table: vectric_linkshortener_links */
["vectric_linkshortener_links_pk_columns_input"]: GraphQLTypes["vectric_linkshortener_links_pk_columns_input"];
	/** input type for updating data in table "vectric.linkshortener_links" */
["vectric_linkshortener_links_set_input"]: GraphQLTypes["vectric_linkshortener_links_set_input"];
	/** Boolean expression to filter rows from the table "vectric.makerspace_requests". All fields are combined with a logical 'AND'. */
["vectric_makerspace_requests_bool_exp"]: GraphQLTypes["vectric_makerspace_requests_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.makerspace_requests" */
["vectric_makerspace_requests_inc_input"]: GraphQLTypes["vectric_makerspace_requests_inc_input"];
	/** input type for inserting data into table "vectric.makerspace_requests" */
["vectric_makerspace_requests_insert_input"]: GraphQLTypes["vectric_makerspace_requests_insert_input"];
	/** on conflict condition type for table "vectric.makerspace_requests" */
["vectric_makerspace_requests_on_conflict"]: GraphQLTypes["vectric_makerspace_requests_on_conflict"];
	/** Ordering options when selecting data from "vectric.makerspace_requests". */
["vectric_makerspace_requests_order_by"]: GraphQLTypes["vectric_makerspace_requests_order_by"];
	/** primary key columns input for table: vectric_makerspace_requests */
["vectric_makerspace_requests_pk_columns_input"]: GraphQLTypes["vectric_makerspace_requests_pk_columns_input"];
	/** input type for updating data in table "vectric.makerspace_requests" */
["vectric_makerspace_requests_set_input"]: GraphQLTypes["vectric_makerspace_requests_set_input"];
	/** Boolean expression to filter rows from the table "vectric.membership_invitation_status". All fields are combined with a logical 'AND'. */
["vectric_membership_invitation_status_bool_exp"]: GraphQLTypes["vectric_membership_invitation_status_bool_exp"];
	/** Boolean expression to compare columns of type "vectric_membership_invitation_status_enum". All fields are combined with logical 'AND'. */
["vectric_membership_invitation_status_enum_comparison_exp"]: GraphQLTypes["vectric_membership_invitation_status_enum_comparison_exp"];
	/** input type for inserting data into table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_insert_input"]: GraphQLTypes["vectric_membership_invitation_status_insert_input"];
	/** input type for inserting object relation for remote table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_obj_rel_insert_input"]: GraphQLTypes["vectric_membership_invitation_status_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_on_conflict"]: GraphQLTypes["vectric_membership_invitation_status_on_conflict"];
	/** Ordering options when selecting data from "vectric.membership_invitation_status". */
["vectric_membership_invitation_status_order_by"]: GraphQLTypes["vectric_membership_invitation_status_order_by"];
	/** primary key columns input for table: vectric_membership_invitation_status */
["vectric_membership_invitation_status_pk_columns_input"]: GraphQLTypes["vectric_membership_invitation_status_pk_columns_input"];
	/** input type for updating data in table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_set_input"]: GraphQLTypes["vectric_membership_invitation_status_set_input"];
	/** order by aggregate values of table "vectric.membership_invitations" */
["vectric_membership_invitations_aggregate_order_by"]: GraphQLTypes["vectric_membership_invitations_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.membership_invitations" */
["vectric_membership_invitations_arr_rel_insert_input"]: GraphQLTypes["vectric_membership_invitations_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_avg_order_by"]: GraphQLTypes["vectric_membership_invitations_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.membership_invitations". All fields are combined with a logical 'AND'. */
["vectric_membership_invitations_bool_exp"]: GraphQLTypes["vectric_membership_invitations_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.membership_invitations" */
["vectric_membership_invitations_inc_input"]: GraphQLTypes["vectric_membership_invitations_inc_input"];
	/** input type for inserting data into table "vectric.membership_invitations" */
["vectric_membership_invitations_insert_input"]: GraphQLTypes["vectric_membership_invitations_insert_input"];
	/** order by max() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_max_order_by"]: GraphQLTypes["vectric_membership_invitations_max_order_by"];
	/** order by min() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_min_order_by"]: GraphQLTypes["vectric_membership_invitations_min_order_by"];
	/** on conflict condition type for table "vectric.membership_invitations" */
["vectric_membership_invitations_on_conflict"]: GraphQLTypes["vectric_membership_invitations_on_conflict"];
	/** Ordering options when selecting data from "vectric.membership_invitations". */
["vectric_membership_invitations_order_by"]: GraphQLTypes["vectric_membership_invitations_order_by"];
	/** primary key columns input for table: vectric_membership_invitations */
["vectric_membership_invitations_pk_columns_input"]: GraphQLTypes["vectric_membership_invitations_pk_columns_input"];
	/** input type for updating data in table "vectric.membership_invitations" */
["vectric_membership_invitations_set_input"]: GraphQLTypes["vectric_membership_invitations_set_input"];
	/** order by stddev() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_stddev_order_by"]: GraphQLTypes["vectric_membership_invitations_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_stddev_pop_order_by"]: GraphQLTypes["vectric_membership_invitations_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_stddev_samp_order_by"]: GraphQLTypes["vectric_membership_invitations_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_sum_order_by"]: GraphQLTypes["vectric_membership_invitations_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_var_pop_order_by"]: GraphQLTypes["vectric_membership_invitations_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_var_samp_order_by"]: GraphQLTypes["vectric_membership_invitations_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_variance_order_by"]: GraphQLTypes["vectric_membership_invitations_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.membership_roles". All fields are combined with a logical 'AND'. */
["vectric_membership_roles_bool_exp"]: GraphQLTypes["vectric_membership_roles_bool_exp"];
	/** Boolean expression to compare columns of type "vectric_membership_roles_enum". All fields are combined with logical 'AND'. */
["vectric_membership_roles_enum_comparison_exp"]: GraphQLTypes["vectric_membership_roles_enum_comparison_exp"];
	/** input type for inserting data into table "vectric.membership_roles" */
["vectric_membership_roles_insert_input"]: GraphQLTypes["vectric_membership_roles_insert_input"];
	/** input type for inserting object relation for remote table "vectric.membership_roles" */
["vectric_membership_roles_obj_rel_insert_input"]: GraphQLTypes["vectric_membership_roles_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.membership_roles" */
["vectric_membership_roles_on_conflict"]: GraphQLTypes["vectric_membership_roles_on_conflict"];
	/** Ordering options when selecting data from "vectric.membership_roles". */
["vectric_membership_roles_order_by"]: GraphQLTypes["vectric_membership_roles_order_by"];
	/** primary key columns input for table: vectric_membership_roles */
["vectric_membership_roles_pk_columns_input"]: GraphQLTypes["vectric_membership_roles_pk_columns_input"];
	/** input type for updating data in table "vectric.membership_roles" */
["vectric_membership_roles_set_input"]: GraphQLTypes["vectric_membership_roles_set_input"];
	/** Boolean expression to filter rows from the table "vectric.membership_status". All fields are combined with a logical 'AND'. */
["vectric_membership_status_bool_exp"]: GraphQLTypes["vectric_membership_status_bool_exp"];
	/** Boolean expression to compare columns of type "vectric_membership_status_enum". All fields are combined with logical 'AND'. */
["vectric_membership_status_enum_comparison_exp"]: GraphQLTypes["vectric_membership_status_enum_comparison_exp"];
	/** input type for inserting data into table "vectric.membership_status" */
["vectric_membership_status_insert_input"]: GraphQLTypes["vectric_membership_status_insert_input"];
	/** input type for inserting object relation for remote table "vectric.membership_status" */
["vectric_membership_status_obj_rel_insert_input"]: GraphQLTypes["vectric_membership_status_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.membership_status" */
["vectric_membership_status_on_conflict"]: GraphQLTypes["vectric_membership_status_on_conflict"];
	/** Ordering options when selecting data from "vectric.membership_status". */
["vectric_membership_status_order_by"]: GraphQLTypes["vectric_membership_status_order_by"];
	/** primary key columns input for table: vectric_membership_status */
["vectric_membership_status_pk_columns_input"]: GraphQLTypes["vectric_membership_status_pk_columns_input"];
	/** input type for updating data in table "vectric.membership_status" */
["vectric_membership_status_set_input"]: GraphQLTypes["vectric_membership_status_set_input"];
	/** order by aggregate values of table "vectric.memberships" */
["vectric_memberships_aggregate_order_by"]: GraphQLTypes["vectric_memberships_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.memberships" */
["vectric_memberships_arr_rel_insert_input"]: GraphQLTypes["vectric_memberships_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.memberships" */
["vectric_memberships_avg_order_by"]: GraphQLTypes["vectric_memberships_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.memberships". All fields are combined with a logical 'AND'. */
["vectric_memberships_bool_exp"]: GraphQLTypes["vectric_memberships_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.memberships" */
["vectric_memberships_inc_input"]: GraphQLTypes["vectric_memberships_inc_input"];
	/** input type for inserting data into table "vectric.memberships" */
["vectric_memberships_insert_input"]: GraphQLTypes["vectric_memberships_insert_input"];
	/** order by max() on columns of table "vectric.memberships" */
["vectric_memberships_max_order_by"]: GraphQLTypes["vectric_memberships_max_order_by"];
	/** order by min() on columns of table "vectric.memberships" */
["vectric_memberships_min_order_by"]: GraphQLTypes["vectric_memberships_min_order_by"];
	/** input type for inserting object relation for remote table "vectric.memberships" */
["vectric_memberships_obj_rel_insert_input"]: GraphQLTypes["vectric_memberships_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.memberships" */
["vectric_memberships_on_conflict"]: GraphQLTypes["vectric_memberships_on_conflict"];
	/** Ordering options when selecting data from "vectric.memberships". */
["vectric_memberships_order_by"]: GraphQLTypes["vectric_memberships_order_by"];
	/** primary key columns input for table: vectric_memberships */
["vectric_memberships_pk_columns_input"]: GraphQLTypes["vectric_memberships_pk_columns_input"];
	/** input type for updating data in table "vectric.memberships" */
["vectric_memberships_set_input"]: GraphQLTypes["vectric_memberships_set_input"];
	/** order by stddev() on columns of table "vectric.memberships" */
["vectric_memberships_stddev_order_by"]: GraphQLTypes["vectric_memberships_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.memberships" */
["vectric_memberships_stddev_pop_order_by"]: GraphQLTypes["vectric_memberships_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.memberships" */
["vectric_memberships_stddev_samp_order_by"]: GraphQLTypes["vectric_memberships_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.memberships" */
["vectric_memberships_sum_order_by"]: GraphQLTypes["vectric_memberships_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.memberships" */
["vectric_memberships_var_pop_order_by"]: GraphQLTypes["vectric_memberships_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.memberships" */
["vectric_memberships_var_samp_order_by"]: GraphQLTypes["vectric_memberships_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.memberships" */
["vectric_memberships_variance_order_by"]: GraphQLTypes["vectric_memberships_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.oauth_client_details". All fields are combined with a logical 'AND'. */
["vectric_oauth_client_details_bool_exp"]: GraphQLTypes["vectric_oauth_client_details_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.oauth_client_details" */
["vectric_oauth_client_details_inc_input"]: GraphQLTypes["vectric_oauth_client_details_inc_input"];
	/** input type for inserting data into table "vectric.oauth_client_details" */
["vectric_oauth_client_details_insert_input"]: GraphQLTypes["vectric_oauth_client_details_insert_input"];
	/** on conflict condition type for table "vectric.oauth_client_details" */
["vectric_oauth_client_details_on_conflict"]: GraphQLTypes["vectric_oauth_client_details_on_conflict"];
	/** Ordering options when selecting data from "vectric.oauth_client_details". */
["vectric_oauth_client_details_order_by"]: GraphQLTypes["vectric_oauth_client_details_order_by"];
	/** primary key columns input for table: vectric_oauth_client_details */
["vectric_oauth_client_details_pk_columns_input"]: GraphQLTypes["vectric_oauth_client_details_pk_columns_input"];
	/** input type for updating data in table "vectric.oauth_client_details" */
["vectric_oauth_client_details_set_input"]: GraphQLTypes["vectric_oauth_client_details_set_input"];
	/** Boolean expression to filter rows from the table "vectric.oem_allocation_emails". All fields are combined with a logical 'AND'. */
["vectric_oem_allocation_emails_bool_exp"]: GraphQLTypes["vectric_oem_allocation_emails_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails_inc_input"]: GraphQLTypes["vectric_oem_allocation_emails_inc_input"];
	/** input type for inserting data into table "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails_insert_input"]: GraphQLTypes["vectric_oem_allocation_emails_insert_input"];
	/** Ordering options when selecting data from "vectric.oem_allocation_emails". */
["vectric_oem_allocation_emails_order_by"]: GraphQLTypes["vectric_oem_allocation_emails_order_by"];
	/** input type for updating data in table "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails_set_input"]: GraphQLTypes["vectric_oem_allocation_emails_set_input"];
	/** order by aggregate values of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_aggregate_order_by"]: GraphQLTypes["vectric_oem_detailed_products_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_arr_rel_insert_input"]: GraphQLTypes["vectric_oem_detailed_products_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_avg_order_by"]: GraphQLTypes["vectric_oem_detailed_products_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.oem_detailed_products". All fields are combined with a logical 'AND'. */
["vectric_oem_detailed_products_bool_exp"]: GraphQLTypes["vectric_oem_detailed_products_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_inc_input"]: GraphQLTypes["vectric_oem_detailed_products_inc_input"];
	/** input type for inserting data into table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_insert_input"]: GraphQLTypes["vectric_oem_detailed_products_insert_input"];
	/** order by max() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_max_order_by"]: GraphQLTypes["vectric_oem_detailed_products_max_order_by"];
	/** order by min() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_min_order_by"]: GraphQLTypes["vectric_oem_detailed_products_min_order_by"];
	/** on conflict condition type for table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_on_conflict"]: GraphQLTypes["vectric_oem_detailed_products_on_conflict"];
	/** Ordering options when selecting data from "vectric.oem_detailed_products". */
["vectric_oem_detailed_products_order_by"]: GraphQLTypes["vectric_oem_detailed_products_order_by"];
	/** primary key columns input for table: vectric_oem_detailed_products */
["vectric_oem_detailed_products_pk_columns_input"]: GraphQLTypes["vectric_oem_detailed_products_pk_columns_input"];
	/** input type for updating data in table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_set_input"]: GraphQLTypes["vectric_oem_detailed_products_set_input"];
	/** order by stddev() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_stddev_order_by"]: GraphQLTypes["vectric_oem_detailed_products_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_stddev_pop_order_by"]: GraphQLTypes["vectric_oem_detailed_products_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_stddev_samp_order_by"]: GraphQLTypes["vectric_oem_detailed_products_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_sum_order_by"]: GraphQLTypes["vectric_oem_detailed_products_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_var_pop_order_by"]: GraphQLTypes["vectric_oem_detailed_products_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_var_samp_order_by"]: GraphQLTypes["vectric_oem_detailed_products_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_variance_order_by"]: GraphQLTypes["vectric_oem_detailed_products_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.oem_eval_request". All fields are combined with a logical 'AND'. */
["vectric_oem_eval_request_bool_exp"]: GraphQLTypes["vectric_oem_eval_request_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.oem_eval_request" */
["vectric_oem_eval_request_inc_input"]: GraphQLTypes["vectric_oem_eval_request_inc_input"];
	/** input type for inserting data into table "vectric.oem_eval_request" */
["vectric_oem_eval_request_insert_input"]: GraphQLTypes["vectric_oem_eval_request_insert_input"];
	/** input type for inserting object relation for remote table "vectric.oem_eval_request" */
["vectric_oem_eval_request_obj_rel_insert_input"]: GraphQLTypes["vectric_oem_eval_request_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.oem_eval_request" */
["vectric_oem_eval_request_on_conflict"]: GraphQLTypes["vectric_oem_eval_request_on_conflict"];
	/** Ordering options when selecting data from "vectric.oem_eval_request". */
["vectric_oem_eval_request_order_by"]: GraphQLTypes["vectric_oem_eval_request_order_by"];
	/** primary key columns input for table: vectric_oem_eval_request */
["vectric_oem_eval_request_pk_columns_input"]: GraphQLTypes["vectric_oem_eval_request_pk_columns_input"];
	/** input type for updating data in table "vectric.oem_eval_request" */
["vectric_oem_eval_request_set_input"]: GraphQLTypes["vectric_oem_eval_request_set_input"];
	/** order by aggregate values of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_aggregate_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_arr_rel_insert_input"]: GraphQLTypes["vectric_oem_fastspring_item_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_avg_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.oem_fastspring_item". All fields are combined with a logical 'AND'. */
["vectric_oem_fastspring_item_bool_exp"]: GraphQLTypes["vectric_oem_fastspring_item_bool_exp"];
	/** order by aggregate values of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_aggregate_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_arr_rel_insert_input"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_avg_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.oem_fastspring_item_bundle". All fields are combined with a logical 'AND'. */
["vectric_oem_fastspring_item_bundle_bool_exp"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_inc_input"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_inc_input"];
	/** input type for inserting data into table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_insert_input"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_insert_input"];
	/** order by max() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_max_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_max_order_by"];
	/** order by min() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_min_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_min_order_by"];
	/** on conflict condition type for table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_on_conflict"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_on_conflict"];
	/** Ordering options when selecting data from "vectric.oem_fastspring_item_bundle". */
["vectric_oem_fastspring_item_bundle_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_order_by"];
	/** primary key columns input for table: vectric_oem_fastspring_item_bundle */
["vectric_oem_fastspring_item_bundle_pk_columns_input"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_pk_columns_input"];
	/** input type for updating data in table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_set_input"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_set_input"];
	/** order by stddev() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_stddev_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_stddev_pop_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_stddev_samp_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_sum_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_var_pop_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_var_samp_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_variance_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_bundle_variance_order_by"];
	/** input type for incrementing numeric columns in table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_inc_input"]: GraphQLTypes["vectric_oem_fastspring_item_inc_input"];
	/** input type for inserting data into table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_insert_input"]: GraphQLTypes["vectric_oem_fastspring_item_insert_input"];
	/** order by max() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_max_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_max_order_by"];
	/** order by min() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_min_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_min_order_by"];
	/** input type for inserting object relation for remote table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_obj_rel_insert_input"]: GraphQLTypes["vectric_oem_fastspring_item_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_on_conflict"]: GraphQLTypes["vectric_oem_fastspring_item_on_conflict"];
	/** Ordering options when selecting data from "vectric.oem_fastspring_item". */
["vectric_oem_fastspring_item_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_order_by"];
	/** primary key columns input for table: vectric_oem_fastspring_item */
["vectric_oem_fastspring_item_pk_columns_input"]: GraphQLTypes["vectric_oem_fastspring_item_pk_columns_input"];
	/** input type for updating data in table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_set_input"]: GraphQLTypes["vectric_oem_fastspring_item_set_input"];
	/** order by stddev() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_stddev_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_stddev_pop_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_stddev_samp_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_sum_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_var_pop_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_var_samp_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_variance_order_by"]: GraphQLTypes["vectric_oem_fastspring_item_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.oem_fastspring_order". All fields are combined with a logical 'AND'. */
["vectric_oem_fastspring_order_bool_exp"]: GraphQLTypes["vectric_oem_fastspring_order_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_inc_input"]: GraphQLTypes["vectric_oem_fastspring_order_inc_input"];
	/** input type for inserting data into table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_insert_input"]: GraphQLTypes["vectric_oem_fastspring_order_insert_input"];
	/** input type for inserting object relation for remote table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_obj_rel_insert_input"]: GraphQLTypes["vectric_oem_fastspring_order_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_on_conflict"]: GraphQLTypes["vectric_oem_fastspring_order_on_conflict"];
	/** Ordering options when selecting data from "vectric.oem_fastspring_order". */
["vectric_oem_fastspring_order_order_by"]: GraphQLTypes["vectric_oem_fastspring_order_order_by"];
	/** primary key columns input for table: vectric_oem_fastspring_order */
["vectric_oem_fastspring_order_pk_columns_input"]: GraphQLTypes["vectric_oem_fastspring_order_pk_columns_input"];
	/** input type for updating data in table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_set_input"]: GraphQLTypes["vectric_oem_fastspring_order_set_input"];
	/** Boolean expression to filter rows from the table "vectric.oem_invite_status". All fields are combined with a logical 'AND'. */
["vectric_oem_invite_status_bool_exp"]: GraphQLTypes["vectric_oem_invite_status_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.oem_invite_status" */
["vectric_oem_invite_status_inc_input"]: GraphQLTypes["vectric_oem_invite_status_inc_input"];
	/** input type for inserting data into table "vectric.oem_invite_status" */
["vectric_oem_invite_status_insert_input"]: GraphQLTypes["vectric_oem_invite_status_insert_input"];
	/** input type for inserting object relation for remote table "vectric.oem_invite_status" */
["vectric_oem_invite_status_obj_rel_insert_input"]: GraphQLTypes["vectric_oem_invite_status_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.oem_invite_status" */
["vectric_oem_invite_status_on_conflict"]: GraphQLTypes["vectric_oem_invite_status_on_conflict"];
	/** Ordering options when selecting data from "vectric.oem_invite_status". */
["vectric_oem_invite_status_order_by"]: GraphQLTypes["vectric_oem_invite_status_order_by"];
	/** primary key columns input for table: vectric_oem_invite_status */
["vectric_oem_invite_status_pk_columns_input"]: GraphQLTypes["vectric_oem_invite_status_pk_columns_input"];
	/** input type for updating data in table "vectric.oem_invite_status" */
["vectric_oem_invite_status_set_input"]: GraphQLTypes["vectric_oem_invite_status_set_input"];
	/** Boolean expression to filter rows from the table "vectric.oem_licence_allocation_type". All fields are combined with a logical 'AND'. */
["vectric_oem_licence_allocation_type_bool_exp"]: GraphQLTypes["vectric_oem_licence_allocation_type_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_inc_input"]: GraphQLTypes["vectric_oem_licence_allocation_type_inc_input"];
	/** input type for inserting data into table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_insert_input"]: GraphQLTypes["vectric_oem_licence_allocation_type_insert_input"];
	/** input type for inserting object relation for remote table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_obj_rel_insert_input"]: GraphQLTypes["vectric_oem_licence_allocation_type_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_on_conflict"]: GraphQLTypes["vectric_oem_licence_allocation_type_on_conflict"];
	/** Ordering options when selecting data from "vectric.oem_licence_allocation_type". */
["vectric_oem_licence_allocation_type_order_by"]: GraphQLTypes["vectric_oem_licence_allocation_type_order_by"];
	/** primary key columns input for table: vectric_oem_licence_allocation_type */
["vectric_oem_licence_allocation_type_pk_columns_input"]: GraphQLTypes["vectric_oem_licence_allocation_type_pk_columns_input"];
	/** input type for updating data in table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_set_input"]: GraphQLTypes["vectric_oem_licence_allocation_type_set_input"];
	/** Boolean expression to filter rows from the table "vectric.oem_partners". All fields are combined with a logical 'AND'. */
["vectric_oem_partners_bool_exp"]: GraphQLTypes["vectric_oem_partners_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.oem_partners" */
["vectric_oem_partners_inc_input"]: GraphQLTypes["vectric_oem_partners_inc_input"];
	/** input type for inserting data into table "vectric.oem_partners" */
["vectric_oem_partners_insert_input"]: GraphQLTypes["vectric_oem_partners_insert_input"];
	/** input type for inserting object relation for remote table "vectric.oem_partners" */
["vectric_oem_partners_obj_rel_insert_input"]: GraphQLTypes["vectric_oem_partners_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.oem_partners" */
["vectric_oem_partners_on_conflict"]: GraphQLTypes["vectric_oem_partners_on_conflict"];
	/** Ordering options when selecting data from "vectric.oem_partners". */
["vectric_oem_partners_order_by"]: GraphQLTypes["vectric_oem_partners_order_by"];
	/** primary key columns input for table: vectric_oem_partners */
["vectric_oem_partners_pk_columns_input"]: GraphQLTypes["vectric_oem_partners_pk_columns_input"];
	/** input type for updating data in table "vectric.oem_partners" */
["vectric_oem_partners_set_input"]: GraphQLTypes["vectric_oem_partners_set_input"];
	/** Boolean expression to filter rows from the table "vectric.oem_products". All fields are combined with a logical 'AND'. */
["vectric_oem_products_bool_exp"]: GraphQLTypes["vectric_oem_products_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.oem_products" */
["vectric_oem_products_inc_input"]: GraphQLTypes["vectric_oem_products_inc_input"];
	/** input type for inserting data into table "vectric.oem_products" */
["vectric_oem_products_insert_input"]: GraphQLTypes["vectric_oem_products_insert_input"];
	/** input type for inserting object relation for remote table "vectric.oem_products" */
["vectric_oem_products_obj_rel_insert_input"]: GraphQLTypes["vectric_oem_products_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.oem_products" */
["vectric_oem_products_on_conflict"]: GraphQLTypes["vectric_oem_products_on_conflict"];
	/** Ordering options when selecting data from "vectric.oem_products". */
["vectric_oem_products_order_by"]: GraphQLTypes["vectric_oem_products_order_by"];
	/** primary key columns input for table: vectric_oem_products */
["vectric_oem_products_pk_columns_input"]: GraphQLTypes["vectric_oem_products_pk_columns_input"];
	/** input type for updating data in table "vectric.oem_products" */
["vectric_oem_products_set_input"]: GraphQLTypes["vectric_oem_products_set_input"];
	/** order by aggregate values of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_aggregate_order_by"]: GraphQLTypes["vectric_oem_purchase_options_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_arr_rel_insert_input"]: GraphQLTypes["vectric_oem_purchase_options_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_avg_order_by"]: GraphQLTypes["vectric_oem_purchase_options_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.oem_purchase_options". All fields are combined with a logical 'AND'. */
["vectric_oem_purchase_options_bool_exp"]: GraphQLTypes["vectric_oem_purchase_options_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_inc_input"]: GraphQLTypes["vectric_oem_purchase_options_inc_input"];
	/** input type for inserting data into table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_insert_input"]: GraphQLTypes["vectric_oem_purchase_options_insert_input"];
	/** order by max() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_max_order_by"]: GraphQLTypes["vectric_oem_purchase_options_max_order_by"];
	/** order by min() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_min_order_by"]: GraphQLTypes["vectric_oem_purchase_options_min_order_by"];
	/** on conflict condition type for table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_on_conflict"]: GraphQLTypes["vectric_oem_purchase_options_on_conflict"];
	/** Ordering options when selecting data from "vectric.oem_purchase_options". */
["vectric_oem_purchase_options_order_by"]: GraphQLTypes["vectric_oem_purchase_options_order_by"];
	/** primary key columns input for table: vectric_oem_purchase_options */
["vectric_oem_purchase_options_pk_columns_input"]: GraphQLTypes["vectric_oem_purchase_options_pk_columns_input"];
	/** input type for updating data in table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_set_input"]: GraphQLTypes["vectric_oem_purchase_options_set_input"];
	/** order by stddev() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_stddev_order_by"]: GraphQLTypes["vectric_oem_purchase_options_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_stddev_pop_order_by"]: GraphQLTypes["vectric_oem_purchase_options_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_stddev_samp_order_by"]: GraphQLTypes["vectric_oem_purchase_options_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_sum_order_by"]: GraphQLTypes["vectric_oem_purchase_options_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_var_pop_order_by"]: GraphQLTypes["vectric_oem_purchase_options_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_var_samp_order_by"]: GraphQLTypes["vectric_oem_purchase_options_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_variance_order_by"]: GraphQLTypes["vectric_oem_purchase_options_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.oem_staff_admin_ownership". All fields are combined with a logical 'AND'. */
["vectric_oem_staff_admin_ownership_bool_exp"]: GraphQLTypes["vectric_oem_staff_admin_ownership_bool_exp"];
	/** Ordering options when selecting data from "vectric.oem_staff_admin_ownership". */
["vectric_oem_staff_admin_ownership_order_by"]: GraphQLTypes["vectric_oem_staff_admin_ownership_order_by"];
	/** order by aggregate values of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_aggregate_order_by"]: GraphQLTypes["vectric_oem_staff_customer_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_arr_rel_insert_input"]: GraphQLTypes["vectric_oem_staff_customer_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_avg_order_by"]: GraphQLTypes["vectric_oem_staff_customer_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.oem_staff_customer". All fields are combined with a logical 'AND'. */
["vectric_oem_staff_customer_bool_exp"]: GraphQLTypes["vectric_oem_staff_customer_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_inc_input"]: GraphQLTypes["vectric_oem_staff_customer_inc_input"];
	/** input type for inserting data into table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_insert_input"]: GraphQLTypes["vectric_oem_staff_customer_insert_input"];
	/** order by max() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_max_order_by"]: GraphQLTypes["vectric_oem_staff_customer_max_order_by"];
	/** order by min() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_min_order_by"]: GraphQLTypes["vectric_oem_staff_customer_min_order_by"];
	/** on conflict condition type for table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_on_conflict"]: GraphQLTypes["vectric_oem_staff_customer_on_conflict"];
	/** Ordering options when selecting data from "vectric.oem_staff_customer". */
["vectric_oem_staff_customer_order_by"]: GraphQLTypes["vectric_oem_staff_customer_order_by"];
	/** primary key columns input for table: vectric_oem_staff_customer */
["vectric_oem_staff_customer_pk_columns_input"]: GraphQLTypes["vectric_oem_staff_customer_pk_columns_input"];
	/** input type for updating data in table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_set_input"]: GraphQLTypes["vectric_oem_staff_customer_set_input"];
	/** order by stddev() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_stddev_order_by"]: GraphQLTypes["vectric_oem_staff_customer_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_stddev_pop_order_by"]: GraphQLTypes["vectric_oem_staff_customer_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_stddev_samp_order_by"]: GraphQLTypes["vectric_oem_staff_customer_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_sum_order_by"]: GraphQLTypes["vectric_oem_staff_customer_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_var_pop_order_by"]: GraphQLTypes["vectric_oem_staff_customer_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_var_samp_order_by"]: GraphQLTypes["vectric_oem_staff_customer_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_variance_order_by"]: GraphQLTypes["vectric_oem_staff_customer_variance_order_by"];
	/** order by aggregate values of table "vectric.organization_audit" */
["vectric_organization_audit_aggregate_order_by"]: GraphQLTypes["vectric_organization_audit_aggregate_order_by"];
	/** append existing jsonb value of filtered columns with new jsonb value */
["vectric_organization_audit_append_input"]: GraphQLTypes["vectric_organization_audit_append_input"];
	/** input type for inserting array relation for remote table "vectric.organization_audit" */
["vectric_organization_audit_arr_rel_insert_input"]: GraphQLTypes["vectric_organization_audit_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_avg_order_by"]: GraphQLTypes["vectric_organization_audit_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.organization_audit". All fields are combined with a logical 'AND'. */
["vectric_organization_audit_bool_exp"]: GraphQLTypes["vectric_organization_audit_bool_exp"];
	/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
["vectric_organization_audit_delete_at_path_input"]: GraphQLTypes["vectric_organization_audit_delete_at_path_input"];
	/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
["vectric_organization_audit_delete_elem_input"]: GraphQLTypes["vectric_organization_audit_delete_elem_input"];
	/** delete key/value pair or string element. key/value pairs are matched based on their key value */
["vectric_organization_audit_delete_key_input"]: GraphQLTypes["vectric_organization_audit_delete_key_input"];
	/** input type for incrementing numeric columns in table "vectric.organization_audit" */
["vectric_organization_audit_inc_input"]: GraphQLTypes["vectric_organization_audit_inc_input"];
	/** input type for inserting data into table "vectric.organization_audit" */
["vectric_organization_audit_insert_input"]: GraphQLTypes["vectric_organization_audit_insert_input"];
	/** order by max() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_max_order_by"]: GraphQLTypes["vectric_organization_audit_max_order_by"];
	/** order by min() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_min_order_by"]: GraphQLTypes["vectric_organization_audit_min_order_by"];
	/** on conflict condition type for table "vectric.organization_audit" */
["vectric_organization_audit_on_conflict"]: GraphQLTypes["vectric_organization_audit_on_conflict"];
	/** Ordering options when selecting data from "vectric.organization_audit". */
["vectric_organization_audit_order_by"]: GraphQLTypes["vectric_organization_audit_order_by"];
	/** primary key columns input for table: vectric_organization_audit */
["vectric_organization_audit_pk_columns_input"]: GraphQLTypes["vectric_organization_audit_pk_columns_input"];
	/** prepend existing jsonb value of filtered columns with new jsonb value */
["vectric_organization_audit_prepend_input"]: GraphQLTypes["vectric_organization_audit_prepend_input"];
	/** input type for updating data in table "vectric.organization_audit" */
["vectric_organization_audit_set_input"]: GraphQLTypes["vectric_organization_audit_set_input"];
	/** order by stddev() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_stddev_order_by"]: GraphQLTypes["vectric_organization_audit_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_stddev_pop_order_by"]: GraphQLTypes["vectric_organization_audit_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_stddev_samp_order_by"]: GraphQLTypes["vectric_organization_audit_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_sum_order_by"]: GraphQLTypes["vectric_organization_audit_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_var_pop_order_by"]: GraphQLTypes["vectric_organization_audit_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_var_samp_order_by"]: GraphQLTypes["vectric_organization_audit_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_variance_order_by"]: GraphQLTypes["vectric_organization_audit_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.organization_licence_scope". All fields are combined with a logical 'AND'. */
["vectric_organization_licence_scope_bool_exp"]: GraphQLTypes["vectric_organization_licence_scope_bool_exp"];
	/** Boolean expression to compare columns of type "vectric_organization_licence_scope_enum". All fields are combined with logical 'AND'. */
["vectric_organization_licence_scope_enum_comparison_exp"]: GraphQLTypes["vectric_organization_licence_scope_enum_comparison_exp"];
	/** input type for inserting data into table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_insert_input"]: GraphQLTypes["vectric_organization_licence_scope_insert_input"];
	/** input type for inserting object relation for remote table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_obj_rel_insert_input"]: GraphQLTypes["vectric_organization_licence_scope_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_on_conflict"]: GraphQLTypes["vectric_organization_licence_scope_on_conflict"];
	/** Ordering options when selecting data from "vectric.organization_licence_scope". */
["vectric_organization_licence_scope_order_by"]: GraphQLTypes["vectric_organization_licence_scope_order_by"];
	/** primary key columns input for table: vectric_organization_licence_scope */
["vectric_organization_licence_scope_pk_columns_input"]: GraphQLTypes["vectric_organization_licence_scope_pk_columns_input"];
	/** input type for updating data in table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_set_input"]: GraphQLTypes["vectric_organization_licence_scope_set_input"];
	/** Boolean expression to filter rows from the table "vectric.organization_memberships_admin_access". All fields are combined with a logical 'AND'. */
["vectric_organization_memberships_admin_access_bool_exp"]: GraphQLTypes["vectric_organization_memberships_admin_access_bool_exp"];
	/** input type for inserting data into table "vectric.organization_memberships_admin_access" */
["vectric_organization_memberships_admin_access_insert_input"]: GraphQLTypes["vectric_organization_memberships_admin_access_insert_input"];
	/** input type for inserting object relation for remote table "vectric.organization_memberships_admin_access" */
["vectric_organization_memberships_admin_access_obj_rel_insert_input"]: GraphQLTypes["vectric_organization_memberships_admin_access_obj_rel_insert_input"];
	/** Ordering options when selecting data from "vectric.organization_memberships_admin_access". */
["vectric_organization_memberships_admin_access_order_by"]: GraphQLTypes["vectric_organization_memberships_admin_access_order_by"];
	/** order by aggregate values of table "vectric.organization_order_items" */
["vectric_organization_order_items_aggregate_order_by"]: GraphQLTypes["vectric_organization_order_items_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.organization_order_items" */
["vectric_organization_order_items_arr_rel_insert_input"]: GraphQLTypes["vectric_organization_order_items_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_avg_order_by"]: GraphQLTypes["vectric_organization_order_items_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.organization_order_items". All fields are combined with a logical 'AND'. */
["vectric_organization_order_items_bool_exp"]: GraphQLTypes["vectric_organization_order_items_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.organization_order_items" */
["vectric_organization_order_items_inc_input"]: GraphQLTypes["vectric_organization_order_items_inc_input"];
	/** input type for inserting data into table "vectric.organization_order_items" */
["vectric_organization_order_items_insert_input"]: GraphQLTypes["vectric_organization_order_items_insert_input"];
	/** order by max() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_max_order_by"]: GraphQLTypes["vectric_organization_order_items_max_order_by"];
	/** order by min() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_min_order_by"]: GraphQLTypes["vectric_organization_order_items_min_order_by"];
	/** input type for inserting object relation for remote table "vectric.organization_order_items" */
["vectric_organization_order_items_obj_rel_insert_input"]: GraphQLTypes["vectric_organization_order_items_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.organization_order_items" */
["vectric_organization_order_items_on_conflict"]: GraphQLTypes["vectric_organization_order_items_on_conflict"];
	/** Ordering options when selecting data from "vectric.organization_order_items". */
["vectric_organization_order_items_order_by"]: GraphQLTypes["vectric_organization_order_items_order_by"];
	/** primary key columns input for table: vectric_organization_order_items */
["vectric_organization_order_items_pk_columns_input"]: GraphQLTypes["vectric_organization_order_items_pk_columns_input"];
	/** input type for updating data in table "vectric.organization_order_items" */
["vectric_organization_order_items_set_input"]: GraphQLTypes["vectric_organization_order_items_set_input"];
	/** order by stddev() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_stddev_order_by"]: GraphQLTypes["vectric_organization_order_items_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_stddev_pop_order_by"]: GraphQLTypes["vectric_organization_order_items_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_stddev_samp_order_by"]: GraphQLTypes["vectric_organization_order_items_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_sum_order_by"]: GraphQLTypes["vectric_organization_order_items_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_var_pop_order_by"]: GraphQLTypes["vectric_organization_order_items_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_var_samp_order_by"]: GraphQLTypes["vectric_organization_order_items_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_variance_order_by"]: GraphQLTypes["vectric_organization_order_items_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.organization_orders". All fields are combined with a logical 'AND'. */
["vectric_organization_orders_bool_exp"]: GraphQLTypes["vectric_organization_orders_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.organization_orders" */
["vectric_organization_orders_inc_input"]: GraphQLTypes["vectric_organization_orders_inc_input"];
	/** input type for inserting data into table "vectric.organization_orders" */
["vectric_organization_orders_insert_input"]: GraphQLTypes["vectric_organization_orders_insert_input"];
	/** input type for inserting object relation for remote table "vectric.organization_orders" */
["vectric_organization_orders_obj_rel_insert_input"]: GraphQLTypes["vectric_organization_orders_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.organization_orders" */
["vectric_organization_orders_on_conflict"]: GraphQLTypes["vectric_organization_orders_on_conflict"];
	/** Ordering options when selecting data from "vectric.organization_orders". */
["vectric_organization_orders_order_by"]: GraphQLTypes["vectric_organization_orders_order_by"];
	/** primary key columns input for table: vectric_organization_orders */
["vectric_organization_orders_pk_columns_input"]: GraphQLTypes["vectric_organization_orders_pk_columns_input"];
	/** input type for updating data in table "vectric.organization_orders" */
["vectric_organization_orders_set_input"]: GraphQLTypes["vectric_organization_orders_set_input"];
	/** Boolean expression to filter rows from the table "vectric.organization_types". All fields are combined with a logical 'AND'. */
["vectric_organization_types_bool_exp"]: GraphQLTypes["vectric_organization_types_bool_exp"];
	/** Boolean expression to compare columns of type "vectric_organization_types_enum". All fields are combined with logical 'AND'. */
["vectric_organization_types_enum_comparison_exp"]: GraphQLTypes["vectric_organization_types_enum_comparison_exp"];
	/** input type for inserting data into table "vectric.organization_types" */
["vectric_organization_types_insert_input"]: GraphQLTypes["vectric_organization_types_insert_input"];
	/** input type for inserting object relation for remote table "vectric.organization_types" */
["vectric_organization_types_obj_rel_insert_input"]: GraphQLTypes["vectric_organization_types_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.organization_types" */
["vectric_organization_types_on_conflict"]: GraphQLTypes["vectric_organization_types_on_conflict"];
	/** Ordering options when selecting data from "vectric.organization_types". */
["vectric_organization_types_order_by"]: GraphQLTypes["vectric_organization_types_order_by"];
	/** primary key columns input for table: vectric_organization_types */
["vectric_organization_types_pk_columns_input"]: GraphQLTypes["vectric_organization_types_pk_columns_input"];
	/** input type for updating data in table "vectric.organization_types" */
["vectric_organization_types_set_input"]: GraphQLTypes["vectric_organization_types_set_input"];
	/** Boolean expression to filter rows from the table "vectric.organizations". All fields are combined with a logical 'AND'. */
["vectric_organizations_bool_exp"]: GraphQLTypes["vectric_organizations_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.organizations" */
["vectric_organizations_inc_input"]: GraphQLTypes["vectric_organizations_inc_input"];
	/** input type for inserting data into table "vectric.organizations" */
["vectric_organizations_insert_input"]: GraphQLTypes["vectric_organizations_insert_input"];
	/** input type for inserting object relation for remote table "vectric.organizations" */
["vectric_organizations_obj_rel_insert_input"]: GraphQLTypes["vectric_organizations_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.organizations" */
["vectric_organizations_on_conflict"]: GraphQLTypes["vectric_organizations_on_conflict"];
	/** Ordering options when selecting data from "vectric.organizations". */
["vectric_organizations_order_by"]: GraphQLTypes["vectric_organizations_order_by"];
	/** primary key columns input for table: vectric_organizations */
["vectric_organizations_pk_columns_input"]: GraphQLTypes["vectric_organizations_pk_columns_input"];
	/** input type for updating data in table "vectric.organizations" */
["vectric_organizations_set_input"]: GraphQLTypes["vectric_organizations_set_input"];
	/** Boolean expression to filter rows from the table "vectric.owned_item_assignments". All fields are combined with a logical 'AND'. */
["vectric_owned_item_assignments_bool_exp"]: GraphQLTypes["vectric_owned_item_assignments_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_inc_input"]: GraphQLTypes["vectric_owned_item_assignments_inc_input"];
	/** input type for inserting data into table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_insert_input"]: GraphQLTypes["vectric_owned_item_assignments_insert_input"];
	/** input type for inserting object relation for remote table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_obj_rel_insert_input"]: GraphQLTypes["vectric_owned_item_assignments_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_on_conflict"]: GraphQLTypes["vectric_owned_item_assignments_on_conflict"];
	/** Ordering options when selecting data from "vectric.owned_item_assignments". */
["vectric_owned_item_assignments_order_by"]: GraphQLTypes["vectric_owned_item_assignments_order_by"];
	/** primary key columns input for table: vectric_owned_item_assignments */
["vectric_owned_item_assignments_pk_columns_input"]: GraphQLTypes["vectric_owned_item_assignments_pk_columns_input"];
	/** input type for updating data in table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_set_input"]: GraphQLTypes["vectric_owned_item_assignments_set_input"];
	/** order by aggregate values of table "vectric.owned_items" */
["vectric_owned_items_aggregate_order_by"]: GraphQLTypes["vectric_owned_items_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.owned_items" */
["vectric_owned_items_arr_rel_insert_input"]: GraphQLTypes["vectric_owned_items_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.owned_items" */
["vectric_owned_items_avg_order_by"]: GraphQLTypes["vectric_owned_items_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.owned_items". All fields are combined with a logical 'AND'. */
["vectric_owned_items_bool_exp"]: GraphQLTypes["vectric_owned_items_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.owned_items" */
["vectric_owned_items_inc_input"]: GraphQLTypes["vectric_owned_items_inc_input"];
	/** input type for inserting data into table "vectric.owned_items" */
["vectric_owned_items_insert_input"]: GraphQLTypes["vectric_owned_items_insert_input"];
	/** order by max() on columns of table "vectric.owned_items" */
["vectric_owned_items_max_order_by"]: GraphQLTypes["vectric_owned_items_max_order_by"];
	/** order by min() on columns of table "vectric.owned_items" */
["vectric_owned_items_min_order_by"]: GraphQLTypes["vectric_owned_items_min_order_by"];
	/** input type for inserting object relation for remote table "vectric.owned_items" */
["vectric_owned_items_obj_rel_insert_input"]: GraphQLTypes["vectric_owned_items_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.owned_items" */
["vectric_owned_items_on_conflict"]: GraphQLTypes["vectric_owned_items_on_conflict"];
	/** Ordering options when selecting data from "vectric.owned_items". */
["vectric_owned_items_order_by"]: GraphQLTypes["vectric_owned_items_order_by"];
	/** primary key columns input for table: vectric_owned_items */
["vectric_owned_items_pk_columns_input"]: GraphQLTypes["vectric_owned_items_pk_columns_input"];
	/** input type for updating data in table "vectric.owned_items" */
["vectric_owned_items_set_input"]: GraphQLTypes["vectric_owned_items_set_input"];
	/** order by stddev() on columns of table "vectric.owned_items" */
["vectric_owned_items_stddev_order_by"]: GraphQLTypes["vectric_owned_items_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.owned_items" */
["vectric_owned_items_stddev_pop_order_by"]: GraphQLTypes["vectric_owned_items_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.owned_items" */
["vectric_owned_items_stddev_samp_order_by"]: GraphQLTypes["vectric_owned_items_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.owned_items" */
["vectric_owned_items_sum_order_by"]: GraphQLTypes["vectric_owned_items_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.owned_items" */
["vectric_owned_items_var_pop_order_by"]: GraphQLTypes["vectric_owned_items_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.owned_items" */
["vectric_owned_items_var_samp_order_by"]: GraphQLTypes["vectric_owned_items_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.owned_items" */
["vectric_owned_items_variance_order_by"]: GraphQLTypes["vectric_owned_items_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.owned_products". All fields are combined with a logical 'AND'. */
["vectric_owned_products_bool_exp"]: GraphQLTypes["vectric_owned_products_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.owned_products" */
["vectric_owned_products_inc_input"]: GraphQLTypes["vectric_owned_products_inc_input"];
	/** input type for inserting data into table "vectric.owned_products" */
["vectric_owned_products_insert_input"]: GraphQLTypes["vectric_owned_products_insert_input"];
	/** input type for inserting object relation for remote table "vectric.owned_products" */
["vectric_owned_products_obj_rel_insert_input"]: GraphQLTypes["vectric_owned_products_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.owned_products" */
["vectric_owned_products_on_conflict"]: GraphQLTypes["vectric_owned_products_on_conflict"];
	/** Ordering options when selecting data from "vectric.owned_products". */
["vectric_owned_products_order_by"]: GraphQLTypes["vectric_owned_products_order_by"];
	/** primary key columns input for table: vectric_owned_products */
["vectric_owned_products_pk_columns_input"]: GraphQLTypes["vectric_owned_products_pk_columns_input"];
	/** input type for updating data in table "vectric.owned_products" */
["vectric_owned_products_set_input"]: GraphQLTypes["vectric_owned_products_set_input"];
	/** Boolean expression to filter rows from the table "vectric.products_clipartcollection_links". All fields are combined with a logical 'AND'. */
["vectric_products_clipartcollection_links_bool_exp"]: GraphQLTypes["vectric_products_clipartcollection_links_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_inc_input"]: GraphQLTypes["vectric_products_clipartcollection_links_inc_input"];
	/** input type for inserting data into table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_insert_input"]: GraphQLTypes["vectric_products_clipartcollection_links_insert_input"];
	/** on conflict condition type for table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_on_conflict"]: GraphQLTypes["vectric_products_clipartcollection_links_on_conflict"];
	/** Ordering options when selecting data from "vectric.products_clipartcollection_links". */
["vectric_products_clipartcollection_links_order_by"]: GraphQLTypes["vectric_products_clipartcollection_links_order_by"];
	/** primary key columns input for table: vectric_products_clipartcollection_links */
["vectric_products_clipartcollection_links_pk_columns_input"]: GraphQLTypes["vectric_products_clipartcollection_links_pk_columns_input"];
	/** input type for updating data in table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_set_input"]: GraphQLTypes["vectric_products_clipartcollection_links_set_input"];
	/** order by aggregate values of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_aggregate_order_by"]: GraphQLTypes["vectric_products_enhancement_eligibility_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_arr_rel_insert_input"]: GraphQLTypes["vectric_products_enhancement_eligibility_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_avg_order_by"]: GraphQLTypes["vectric_products_enhancement_eligibility_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.products_enhancement_eligibility". All fields are combined with a logical 'AND'. */
["vectric_products_enhancement_eligibility_bool_exp"]: GraphQLTypes["vectric_products_enhancement_eligibility_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_inc_input"]: GraphQLTypes["vectric_products_enhancement_eligibility_inc_input"];
	/** input type for inserting data into table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_insert_input"]: GraphQLTypes["vectric_products_enhancement_eligibility_insert_input"];
	/** order by max() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_max_order_by"]: GraphQLTypes["vectric_products_enhancement_eligibility_max_order_by"];
	/** order by min() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_min_order_by"]: GraphQLTypes["vectric_products_enhancement_eligibility_min_order_by"];
	/** on conflict condition type for table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_on_conflict"]: GraphQLTypes["vectric_products_enhancement_eligibility_on_conflict"];
	/** Ordering options when selecting data from "vectric.products_enhancement_eligibility". */
["vectric_products_enhancement_eligibility_order_by"]: GraphQLTypes["vectric_products_enhancement_eligibility_order_by"];
	/** primary key columns input for table: vectric_products_enhancement_eligibility */
["vectric_products_enhancement_eligibility_pk_columns_input"]: GraphQLTypes["vectric_products_enhancement_eligibility_pk_columns_input"];
	/** input type for updating data in table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_set_input"]: GraphQLTypes["vectric_products_enhancement_eligibility_set_input"];
	/** order by stddev() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_stddev_order_by"]: GraphQLTypes["vectric_products_enhancement_eligibility_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_stddev_pop_order_by"]: GraphQLTypes["vectric_products_enhancement_eligibility_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_stddev_samp_order_by"]: GraphQLTypes["vectric_products_enhancement_eligibility_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_sum_order_by"]: GraphQLTypes["vectric_products_enhancement_eligibility_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_var_pop_order_by"]: GraphQLTypes["vectric_products_enhancement_eligibility_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_var_samp_order_by"]: GraphQLTypes["vectric_products_enhancement_eligibility_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_variance_order_by"]: GraphQLTypes["vectric_products_enhancement_eligibility_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.products_freeclipart". All fields are combined with a logical 'AND'. */
["vectric_products_freeclipart_bool_exp"]: GraphQLTypes["vectric_products_freeclipart_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.products_freeclipart" */
["vectric_products_freeclipart_inc_input"]: GraphQLTypes["vectric_products_freeclipart_inc_input"];
	/** input type for inserting data into table "vectric.products_freeclipart" */
["vectric_products_freeclipart_insert_input"]: GraphQLTypes["vectric_products_freeclipart_insert_input"];
	/** on conflict condition type for table "vectric.products_freeclipart" */
["vectric_products_freeclipart_on_conflict"]: GraphQLTypes["vectric_products_freeclipart_on_conflict"];
	/** Ordering options when selecting data from "vectric.products_freeclipart". */
["vectric_products_freeclipart_order_by"]: GraphQLTypes["vectric_products_freeclipart_order_by"];
	/** primary key columns input for table: vectric_products_freeclipart */
["vectric_products_freeclipart_pk_columns_input"]: GraphQLTypes["vectric_products_freeclipart_pk_columns_input"];
	/** input type for updating data in table "vectric.products_freeclipart" */
["vectric_products_freeclipart_set_input"]: GraphQLTypes["vectric_products_freeclipart_set_input"];
	/** Boolean expression to filter rows from the table "vectric.products_fulfilments". All fields are combined with a logical 'AND'. */
["vectric_products_fulfilments_bool_exp"]: GraphQLTypes["vectric_products_fulfilments_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.products_fulfilments" */
["vectric_products_fulfilments_inc_input"]: GraphQLTypes["vectric_products_fulfilments_inc_input"];
	/** input type for inserting data into table "vectric.products_fulfilments" */
["vectric_products_fulfilments_insert_input"]: GraphQLTypes["vectric_products_fulfilments_insert_input"];
	/** input type for inserting object relation for remote table "vectric.products_fulfilments" */
["vectric_products_fulfilments_obj_rel_insert_input"]: GraphQLTypes["vectric_products_fulfilments_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.products_fulfilments" */
["vectric_products_fulfilments_on_conflict"]: GraphQLTypes["vectric_products_fulfilments_on_conflict"];
	/** Ordering options when selecting data from "vectric.products_fulfilments". */
["vectric_products_fulfilments_order_by"]: GraphQLTypes["vectric_products_fulfilments_order_by"];
	/** primary key columns input for table: vectric_products_fulfilments */
["vectric_products_fulfilments_pk_columns_input"]: GraphQLTypes["vectric_products_fulfilments_pk_columns_input"];
	/** input type for updating data in table "vectric.products_fulfilments" */
["vectric_products_fulfilments_set_input"]: GraphQLTypes["vectric_products_fulfilments_set_input"];
	/** Boolean expression to filter rows from the table "vectric.products_fulfilmenttypes". All fields are combined with a logical 'AND'. */
["vectric_products_fulfilmenttypes_bool_exp"]: GraphQLTypes["vectric_products_fulfilmenttypes_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_inc_input"]: GraphQLTypes["vectric_products_fulfilmenttypes_inc_input"];
	/** input type for inserting data into table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_insert_input"]: GraphQLTypes["vectric_products_fulfilmenttypes_insert_input"];
	/** input type for inserting object relation for remote table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_obj_rel_insert_input"]: GraphQLTypes["vectric_products_fulfilmenttypes_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_on_conflict"]: GraphQLTypes["vectric_products_fulfilmenttypes_on_conflict"];
	/** Ordering options when selecting data from "vectric.products_fulfilmenttypes". */
["vectric_products_fulfilmenttypes_order_by"]: GraphQLTypes["vectric_products_fulfilmenttypes_order_by"];
	/** primary key columns input for table: vectric_products_fulfilmenttypes */
["vectric_products_fulfilmenttypes_pk_columns_input"]: GraphQLTypes["vectric_products_fulfilmenttypes_pk_columns_input"];
	/** input type for updating data in table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_set_input"]: GraphQLTypes["vectric_products_fulfilmenttypes_set_input"];
	/** order by aggregate values of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_aggregate_order_by"]: GraphQLTypes["vectric_products_product_fulfilments_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_arr_rel_insert_input"]: GraphQLTypes["vectric_products_product_fulfilments_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_avg_order_by"]: GraphQLTypes["vectric_products_product_fulfilments_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.products_product_fulfilments". All fields are combined with a logical 'AND'. */
["vectric_products_product_fulfilments_bool_exp"]: GraphQLTypes["vectric_products_product_fulfilments_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_inc_input"]: GraphQLTypes["vectric_products_product_fulfilments_inc_input"];
	/** input type for inserting data into table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_insert_input"]: GraphQLTypes["vectric_products_product_fulfilments_insert_input"];
	/** order by max() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_max_order_by"]: GraphQLTypes["vectric_products_product_fulfilments_max_order_by"];
	/** order by min() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_min_order_by"]: GraphQLTypes["vectric_products_product_fulfilments_min_order_by"];
	/** on conflict condition type for table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_on_conflict"]: GraphQLTypes["vectric_products_product_fulfilments_on_conflict"];
	/** Ordering options when selecting data from "vectric.products_product_fulfilments". */
["vectric_products_product_fulfilments_order_by"]: GraphQLTypes["vectric_products_product_fulfilments_order_by"];
	/** primary key columns input for table: vectric_products_product_fulfilments */
["vectric_products_product_fulfilments_pk_columns_input"]: GraphQLTypes["vectric_products_product_fulfilments_pk_columns_input"];
	/** input type for updating data in table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_set_input"]: GraphQLTypes["vectric_products_product_fulfilments_set_input"];
	/** order by stddev() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_stddev_order_by"]: GraphQLTypes["vectric_products_product_fulfilments_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_stddev_pop_order_by"]: GraphQLTypes["vectric_products_product_fulfilments_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_stddev_samp_order_by"]: GraphQLTypes["vectric_products_product_fulfilments_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_sum_order_by"]: GraphQLTypes["vectric_products_product_fulfilments_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_var_pop_order_by"]: GraphQLTypes["vectric_products_product_fulfilments_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_var_samp_order_by"]: GraphQLTypes["vectric_products_product_fulfilments_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_variance_order_by"]: GraphQLTypes["vectric_products_product_fulfilments_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.products_product_licence_type". All fields are combined with a logical 'AND'. */
["vectric_products_product_licence_type_bool_exp"]: GraphQLTypes["vectric_products_product_licence_type_bool_exp"];
	/** Boolean expression to compare columns of type "vectric_products_product_licence_type_enum". All fields are combined with logical 'AND'. */
["vectric_products_product_licence_type_enum_comparison_exp"]: GraphQLTypes["vectric_products_product_licence_type_enum_comparison_exp"];
	/** input type for inserting data into table "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_insert_input"]: GraphQLTypes["vectric_products_product_licence_type_insert_input"];
	/** on conflict condition type for table "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_on_conflict"]: GraphQLTypes["vectric_products_product_licence_type_on_conflict"];
	/** Ordering options when selecting data from "vectric.products_product_licence_type". */
["vectric_products_product_licence_type_order_by"]: GraphQLTypes["vectric_products_product_licence_type_order_by"];
	/** primary key columns input for table: vectric_products_product_licence_type */
["vectric_products_product_licence_type_pk_columns_input"]: GraphQLTypes["vectric_products_product_licence_type_pk_columns_input"];
	/** input type for updating data in table "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_set_input"]: GraphQLTypes["vectric_products_product_licence_type_set_input"];
	/** order by aggregate values of table "vectric.products_products" */
["vectric_products_products_aggregate_order_by"]: GraphQLTypes["vectric_products_products_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.products_products" */
["vectric_products_products_arr_rel_insert_input"]: GraphQLTypes["vectric_products_products_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.products_products" */
["vectric_products_products_avg_order_by"]: GraphQLTypes["vectric_products_products_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.products_products". All fields are combined with a logical 'AND'. */
["vectric_products_products_bool_exp"]: GraphQLTypes["vectric_products_products_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.products_products" */
["vectric_products_products_inc_input"]: GraphQLTypes["vectric_products_products_inc_input"];
	/** input type for inserting data into table "vectric.products_products" */
["vectric_products_products_insert_input"]: GraphQLTypes["vectric_products_products_insert_input"];
	/** order by max() on columns of table "vectric.products_products" */
["vectric_products_products_max_order_by"]: GraphQLTypes["vectric_products_products_max_order_by"];
	/** order by min() on columns of table "vectric.products_products" */
["vectric_products_products_min_order_by"]: GraphQLTypes["vectric_products_products_min_order_by"];
	/** input type for inserting object relation for remote table "vectric.products_products" */
["vectric_products_products_obj_rel_insert_input"]: GraphQLTypes["vectric_products_products_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.products_products" */
["vectric_products_products_on_conflict"]: GraphQLTypes["vectric_products_products_on_conflict"];
	/** Ordering options when selecting data from "vectric.products_products". */
["vectric_products_products_order_by"]: GraphQLTypes["vectric_products_products_order_by"];
	/** primary key columns input for table: vectric_products_products */
["vectric_products_products_pk_columns_input"]: GraphQLTypes["vectric_products_products_pk_columns_input"];
	/** input type for updating data in table "vectric.products_products" */
["vectric_products_products_set_input"]: GraphQLTypes["vectric_products_products_set_input"];
	/** order by stddev() on columns of table "vectric.products_products" */
["vectric_products_products_stddev_order_by"]: GraphQLTypes["vectric_products_products_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.products_products" */
["vectric_products_products_stddev_pop_order_by"]: GraphQLTypes["vectric_products_products_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.products_products" */
["vectric_products_products_stddev_samp_order_by"]: GraphQLTypes["vectric_products_products_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.products_products" */
["vectric_products_products_sum_order_by"]: GraphQLTypes["vectric_products_products_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.products_products" */
["vectric_products_products_var_pop_order_by"]: GraphQLTypes["vectric_products_products_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.products_products" */
["vectric_products_products_var_samp_order_by"]: GraphQLTypes["vectric_products_products_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.products_products" */
["vectric_products_products_variance_order_by"]: GraphQLTypes["vectric_products_products_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.products_producttype". All fields are combined with a logical 'AND'. */
["vectric_products_producttype_bool_exp"]: GraphQLTypes["vectric_products_producttype_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.products_producttype" */
["vectric_products_producttype_inc_input"]: GraphQLTypes["vectric_products_producttype_inc_input"];
	/** input type for inserting data into table "vectric.products_producttype" */
["vectric_products_producttype_insert_input"]: GraphQLTypes["vectric_products_producttype_insert_input"];
	/** input type for inserting object relation for remote table "vectric.products_producttype" */
["vectric_products_producttype_obj_rel_insert_input"]: GraphQLTypes["vectric_products_producttype_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.products_producttype" */
["vectric_products_producttype_on_conflict"]: GraphQLTypes["vectric_products_producttype_on_conflict"];
	/** Ordering options when selecting data from "vectric.products_producttype". */
["vectric_products_producttype_order_by"]: GraphQLTypes["vectric_products_producttype_order_by"];
	/** primary key columns input for table: vectric_products_producttype */
["vectric_products_producttype_pk_columns_input"]: GraphQLTypes["vectric_products_producttype_pk_columns_input"];
	/** input type for updating data in table "vectric.products_producttype" */
["vectric_products_producttype_set_input"]: GraphQLTypes["vectric_products_producttype_set_input"];
	/** Boolean expression to filter rows from the table "vectric.products_upgrade_eligibility". All fields are combined with a logical 'AND'. */
["vectric_products_upgrade_eligibility_bool_exp"]: GraphQLTypes["vectric_products_upgrade_eligibility_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_inc_input"]: GraphQLTypes["vectric_products_upgrade_eligibility_inc_input"];
	/** input type for inserting data into table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_insert_input"]: GraphQLTypes["vectric_products_upgrade_eligibility_insert_input"];
	/** input type for inserting object relation for remote table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_obj_rel_insert_input"]: GraphQLTypes["vectric_products_upgrade_eligibility_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_on_conflict"]: GraphQLTypes["vectric_products_upgrade_eligibility_on_conflict"];
	/** Ordering options when selecting data from "vectric.products_upgrade_eligibility". */
["vectric_products_upgrade_eligibility_order_by"]: GraphQLTypes["vectric_products_upgrade_eligibility_order_by"];
	/** primary key columns input for table: vectric_products_upgrade_eligibility */
["vectric_products_upgrade_eligibility_pk_columns_input"]: GraphQLTypes["vectric_products_upgrade_eligibility_pk_columns_input"];
	/** input type for updating data in table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_set_input"]: GraphQLTypes["vectric_products_upgrade_eligibility_set_input"];
	/** order by aggregate values of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_aggregate_order_by"]: GraphQLTypes["vectric_products_versioncodes_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.products_versioncodes" */
["vectric_products_versioncodes_arr_rel_insert_input"]: GraphQLTypes["vectric_products_versioncodes_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_avg_order_by"]: GraphQLTypes["vectric_products_versioncodes_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.products_versioncodes". All fields are combined with a logical 'AND'. */
["vectric_products_versioncodes_bool_exp"]: GraphQLTypes["vectric_products_versioncodes_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.products_versioncodes" */
["vectric_products_versioncodes_inc_input"]: GraphQLTypes["vectric_products_versioncodes_inc_input"];
	/** input type for inserting data into table "vectric.products_versioncodes" */
["vectric_products_versioncodes_insert_input"]: GraphQLTypes["vectric_products_versioncodes_insert_input"];
	/** order by max() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_max_order_by"]: GraphQLTypes["vectric_products_versioncodes_max_order_by"];
	/** order by min() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_min_order_by"]: GraphQLTypes["vectric_products_versioncodes_min_order_by"];
	/** input type for inserting object relation for remote table "vectric.products_versioncodes" */
["vectric_products_versioncodes_obj_rel_insert_input"]: GraphQLTypes["vectric_products_versioncodes_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.products_versioncodes" */
["vectric_products_versioncodes_on_conflict"]: GraphQLTypes["vectric_products_versioncodes_on_conflict"];
	/** Ordering options when selecting data from "vectric.products_versioncodes". */
["vectric_products_versioncodes_order_by"]: GraphQLTypes["vectric_products_versioncodes_order_by"];
	/** primary key columns input for table: vectric_products_versioncodes */
["vectric_products_versioncodes_pk_columns_input"]: GraphQLTypes["vectric_products_versioncodes_pk_columns_input"];
	/** input type for updating data in table "vectric.products_versioncodes" */
["vectric_products_versioncodes_set_input"]: GraphQLTypes["vectric_products_versioncodes_set_input"];
	/** order by stddev() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_stddev_order_by"]: GraphQLTypes["vectric_products_versioncodes_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_stddev_pop_order_by"]: GraphQLTypes["vectric_products_versioncodes_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_stddev_samp_order_by"]: GraphQLTypes["vectric_products_versioncodes_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_sum_order_by"]: GraphQLTypes["vectric_products_versioncodes_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_var_pop_order_by"]: GraphQLTypes["vectric_products_versioncodes_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_var_samp_order_by"]: GraphQLTypes["vectric_products_versioncodes_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_variance_order_by"]: GraphQLTypes["vectric_products_versioncodes_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.questions". All fields are combined with a logical 'AND'. */
["vectric_questions_bool_exp"]: GraphQLTypes["vectric_questions_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.questions" */
["vectric_questions_inc_input"]: GraphQLTypes["vectric_questions_inc_input"];
	/** input type for inserting data into table "vectric.questions" */
["vectric_questions_insert_input"]: GraphQLTypes["vectric_questions_insert_input"];
	/** input type for inserting object relation for remote table "vectric.questions" */
["vectric_questions_obj_rel_insert_input"]: GraphQLTypes["vectric_questions_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.questions" */
["vectric_questions_on_conflict"]: GraphQLTypes["vectric_questions_on_conflict"];
	/** Ordering options when selecting data from "vectric.questions". */
["vectric_questions_order_by"]: GraphQLTypes["vectric_questions_order_by"];
	/** primary key columns input for table: vectric_questions */
["vectric_questions_pk_columns_input"]: GraphQLTypes["vectric_questions_pk_columns_input"];
	/** input type for updating data in table "vectric.questions" */
["vectric_questions_set_input"]: GraphQLTypes["vectric_questions_set_input"];
	/** order by aggregate values of table "vectric.responses" */
["vectric_responses_aggregate_order_by"]: GraphQLTypes["vectric_responses_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.responses" */
["vectric_responses_arr_rel_insert_input"]: GraphQLTypes["vectric_responses_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.responses" */
["vectric_responses_avg_order_by"]: GraphQLTypes["vectric_responses_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.responses". All fields are combined with a logical 'AND'. */
["vectric_responses_bool_exp"]: GraphQLTypes["vectric_responses_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.responses" */
["vectric_responses_inc_input"]: GraphQLTypes["vectric_responses_inc_input"];
	/** input type for inserting data into table "vectric.responses" */
["vectric_responses_insert_input"]: GraphQLTypes["vectric_responses_insert_input"];
	/** order by max() on columns of table "vectric.responses" */
["vectric_responses_max_order_by"]: GraphQLTypes["vectric_responses_max_order_by"];
	/** order by min() on columns of table "vectric.responses" */
["vectric_responses_min_order_by"]: GraphQLTypes["vectric_responses_min_order_by"];
	/** input type for inserting object relation for remote table "vectric.responses" */
["vectric_responses_obj_rel_insert_input"]: GraphQLTypes["vectric_responses_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.responses" */
["vectric_responses_on_conflict"]: GraphQLTypes["vectric_responses_on_conflict"];
	/** Ordering options when selecting data from "vectric.responses". */
["vectric_responses_order_by"]: GraphQLTypes["vectric_responses_order_by"];
	/** primary key columns input for table: vectric_responses */
["vectric_responses_pk_columns_input"]: GraphQLTypes["vectric_responses_pk_columns_input"];
	/** input type for updating data in table "vectric.responses" */
["vectric_responses_set_input"]: GraphQLTypes["vectric_responses_set_input"];
	/** order by stddev() on columns of table "vectric.responses" */
["vectric_responses_stddev_order_by"]: GraphQLTypes["vectric_responses_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.responses" */
["vectric_responses_stddev_pop_order_by"]: GraphQLTypes["vectric_responses_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.responses" */
["vectric_responses_stddev_samp_order_by"]: GraphQLTypes["vectric_responses_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.responses" */
["vectric_responses_sum_order_by"]: GraphQLTypes["vectric_responses_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.responses" */
["vectric_responses_var_pop_order_by"]: GraphQLTypes["vectric_responses_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.responses" */
["vectric_responses_var_samp_order_by"]: GraphQLTypes["vectric_responses_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.responses" */
["vectric_responses_variance_order_by"]: GraphQLTypes["vectric_responses_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.saleable_products". All fields are combined with a logical 'AND'. */
["vectric_saleable_products_bool_exp"]: GraphQLTypes["vectric_saleable_products_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.saleable_products" */
["vectric_saleable_products_inc_input"]: GraphQLTypes["vectric_saleable_products_inc_input"];
	/** input type for inserting data into table "vectric.saleable_products" */
["vectric_saleable_products_insert_input"]: GraphQLTypes["vectric_saleable_products_insert_input"];
	/** input type for inserting object relation for remote table "vectric.saleable_products" */
["vectric_saleable_products_obj_rel_insert_input"]: GraphQLTypes["vectric_saleable_products_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.saleable_products" */
["vectric_saleable_products_on_conflict"]: GraphQLTypes["vectric_saleable_products_on_conflict"];
	/** Ordering options when selecting data from "vectric.saleable_products". */
["vectric_saleable_products_order_by"]: GraphQLTypes["vectric_saleable_products_order_by"];
	/** primary key columns input for table: vectric_saleable_products */
["vectric_saleable_products_pk_columns_input"]: GraphQLTypes["vectric_saleable_products_pk_columns_input"];
	/** input type for updating data in table "vectric.saleable_products" */
["vectric_saleable_products_set_input"]: GraphQLTypes["vectric_saleable_products_set_input"];
	/** Boolean expression to filter rows from the table "vectric.sales_customer_downloads". All fields are combined with a logical 'AND'. */
["vectric_sales_customer_downloads_bool_exp"]: GraphQLTypes["vectric_sales_customer_downloads_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_inc_input"]: GraphQLTypes["vectric_sales_customer_downloads_inc_input"];
	/** input type for inserting data into table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_insert_input"]: GraphQLTypes["vectric_sales_customer_downloads_insert_input"];
	/** on conflict condition type for table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_on_conflict"]: GraphQLTypes["vectric_sales_customer_downloads_on_conflict"];
	/** Ordering options when selecting data from "vectric.sales_customer_downloads". */
["vectric_sales_customer_downloads_order_by"]: GraphQLTypes["vectric_sales_customer_downloads_order_by"];
	/** primary key columns input for table: vectric_sales_customer_downloads */
["vectric_sales_customer_downloads_pk_columns_input"]: GraphQLTypes["vectric_sales_customer_downloads_pk_columns_input"];
	/** input type for updating data in table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_set_input"]: GraphQLTypes["vectric_sales_customer_downloads_set_input"];
	/** Boolean expression to filter rows from the table "vectric.sales_customers". All fields are combined with a logical 'AND'. */
["vectric_sales_customers_bool_exp"]: GraphQLTypes["vectric_sales_customers_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.sales_customers" */
["vectric_sales_customers_inc_input"]: GraphQLTypes["vectric_sales_customers_inc_input"];
	/** input type for inserting data into table "vectric.sales_customers" */
["vectric_sales_customers_insert_input"]: GraphQLTypes["vectric_sales_customers_insert_input"];
	/** input type for inserting object relation for remote table "vectric.sales_customers" */
["vectric_sales_customers_obj_rel_insert_input"]: GraphQLTypes["vectric_sales_customers_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.sales_customers" */
["vectric_sales_customers_on_conflict"]: GraphQLTypes["vectric_sales_customers_on_conflict"];
	/** Ordering options when selecting data from "vectric.sales_customers". */
["vectric_sales_customers_order_by"]: GraphQLTypes["vectric_sales_customers_order_by"];
	/** primary key columns input for table: vectric_sales_customers */
["vectric_sales_customers_pk_columns_input"]: GraphQLTypes["vectric_sales_customers_pk_columns_input"];
	/** input type for updating data in table "vectric.sales_customers" */
["vectric_sales_customers_set_input"]: GraphQLTypes["vectric_sales_customers_set_input"];
	/** Boolean expression to filter rows from the table "vectric.sales_customerupdates". All fields are combined with a logical 'AND'. */
["vectric_sales_customerupdates_bool_exp"]: GraphQLTypes["vectric_sales_customerupdates_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_inc_input"]: GraphQLTypes["vectric_sales_customerupdates_inc_input"];
	/** input type for inserting data into table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_insert_input"]: GraphQLTypes["vectric_sales_customerupdates_insert_input"];
	/** on conflict condition type for table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_on_conflict"]: GraphQLTypes["vectric_sales_customerupdates_on_conflict"];
	/** Ordering options when selecting data from "vectric.sales_customerupdates". */
["vectric_sales_customerupdates_order_by"]: GraphQLTypes["vectric_sales_customerupdates_order_by"];
	/** primary key columns input for table: vectric_sales_customerupdates */
["vectric_sales_customerupdates_pk_columns_input"]: GraphQLTypes["vectric_sales_customerupdates_pk_columns_input"];
	/** input type for updating data in table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_set_input"]: GraphQLTypes["vectric_sales_customerupdates_set_input"];
	/** order by aggregate values of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_aggregate_order_by"]: GraphQLTypes["vectric_sales_oem_bundles_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_arr_rel_insert_input"]: GraphQLTypes["vectric_sales_oem_bundles_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_avg_order_by"]: GraphQLTypes["vectric_sales_oem_bundles_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.sales_oem_bundles". All fields are combined with a logical 'AND'. */
["vectric_sales_oem_bundles_bool_exp"]: GraphQLTypes["vectric_sales_oem_bundles_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_inc_input"]: GraphQLTypes["vectric_sales_oem_bundles_inc_input"];
	/** input type for inserting data into table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_insert_input"]: GraphQLTypes["vectric_sales_oem_bundles_insert_input"];
	/** order by max() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_max_order_by"]: GraphQLTypes["vectric_sales_oem_bundles_max_order_by"];
	/** order by min() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_min_order_by"]: GraphQLTypes["vectric_sales_oem_bundles_min_order_by"];
	/** input type for inserting object relation for remote table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_obj_rel_insert_input"]: GraphQLTypes["vectric_sales_oem_bundles_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_on_conflict"]: GraphQLTypes["vectric_sales_oem_bundles_on_conflict"];
	/** Ordering options when selecting data from "vectric.sales_oem_bundles". */
["vectric_sales_oem_bundles_order_by"]: GraphQLTypes["vectric_sales_oem_bundles_order_by"];
	/** primary key columns input for table: vectric_sales_oem_bundles */
["vectric_sales_oem_bundles_pk_columns_input"]: GraphQLTypes["vectric_sales_oem_bundles_pk_columns_input"];
	/** input type for updating data in table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_set_input"]: GraphQLTypes["vectric_sales_oem_bundles_set_input"];
	/** order by stddev() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_stddev_order_by"]: GraphQLTypes["vectric_sales_oem_bundles_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_stddev_pop_order_by"]: GraphQLTypes["vectric_sales_oem_bundles_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_stddev_samp_order_by"]: GraphQLTypes["vectric_sales_oem_bundles_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_sum_order_by"]: GraphQLTypes["vectric_sales_oem_bundles_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_var_pop_order_by"]: GraphQLTypes["vectric_sales_oem_bundles_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_var_samp_order_by"]: GraphQLTypes["vectric_sales_oem_bundles_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_variance_order_by"]: GraphQLTypes["vectric_sales_oem_bundles_variance_order_by"];
	/** order by aggregate values of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_aggregate_order_by"]: GraphQLTypes["vectric_sales_oemlicences_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_arr_rel_insert_input"]: GraphQLTypes["vectric_sales_oemlicences_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_avg_order_by"]: GraphQLTypes["vectric_sales_oemlicences_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.sales_oemlicences". All fields are combined with a logical 'AND'. */
["vectric_sales_oemlicences_bool_exp"]: GraphQLTypes["vectric_sales_oemlicences_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_inc_input"]: GraphQLTypes["vectric_sales_oemlicences_inc_input"];
	/** input type for inserting data into table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_insert_input"]: GraphQLTypes["vectric_sales_oemlicences_insert_input"];
	/** order by max() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_max_order_by"]: GraphQLTypes["vectric_sales_oemlicences_max_order_by"];
	/** order by min() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_min_order_by"]: GraphQLTypes["vectric_sales_oemlicences_min_order_by"];
	/** on conflict condition type for table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_on_conflict"]: GraphQLTypes["vectric_sales_oemlicences_on_conflict"];
	/** Ordering options when selecting data from "vectric.sales_oemlicences". */
["vectric_sales_oemlicences_order_by"]: GraphQLTypes["vectric_sales_oemlicences_order_by"];
	/** primary key columns input for table: vectric_sales_oemlicences */
["vectric_sales_oemlicences_pk_columns_input"]: GraphQLTypes["vectric_sales_oemlicences_pk_columns_input"];
	/** input type for updating data in table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_set_input"]: GraphQLTypes["vectric_sales_oemlicences_set_input"];
	/** order by stddev() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_stddev_order_by"]: GraphQLTypes["vectric_sales_oemlicences_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_stddev_pop_order_by"]: GraphQLTypes["vectric_sales_oemlicences_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_stddev_samp_order_by"]: GraphQLTypes["vectric_sales_oemlicences_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_sum_order_by"]: GraphQLTypes["vectric_sales_oemlicences_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_var_pop_order_by"]: GraphQLTypes["vectric_sales_oemlicences_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_var_samp_order_by"]: GraphQLTypes["vectric_sales_oemlicences_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_variance_order_by"]: GraphQLTypes["vectric_sales_oemlicences_variance_order_by"];
	/** order by aggregate values of table "vectric.sales_orders" */
["vectric_sales_orders_aggregate_order_by"]: GraphQLTypes["vectric_sales_orders_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.sales_orders" */
["vectric_sales_orders_arr_rel_insert_input"]: GraphQLTypes["vectric_sales_orders_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_avg_order_by"]: GraphQLTypes["vectric_sales_orders_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.sales_orders". All fields are combined with a logical 'AND'. */
["vectric_sales_orders_bool_exp"]: GraphQLTypes["vectric_sales_orders_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.sales_orders" */
["vectric_sales_orders_inc_input"]: GraphQLTypes["vectric_sales_orders_inc_input"];
	/** input type for inserting data into table "vectric.sales_orders" */
["vectric_sales_orders_insert_input"]: GraphQLTypes["vectric_sales_orders_insert_input"];
	/** order by max() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_max_order_by"]: GraphQLTypes["vectric_sales_orders_max_order_by"];
	/** order by min() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_min_order_by"]: GraphQLTypes["vectric_sales_orders_min_order_by"];
	/** input type for inserting object relation for remote table "vectric.sales_orders" */
["vectric_sales_orders_obj_rel_insert_input"]: GraphQLTypes["vectric_sales_orders_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.sales_orders" */
["vectric_sales_orders_on_conflict"]: GraphQLTypes["vectric_sales_orders_on_conflict"];
	/** Ordering options when selecting data from "vectric.sales_orders". */
["vectric_sales_orders_order_by"]: GraphQLTypes["vectric_sales_orders_order_by"];
	/** primary key columns input for table: vectric_sales_orders */
["vectric_sales_orders_pk_columns_input"]: GraphQLTypes["vectric_sales_orders_pk_columns_input"];
	/** input type for updating data in table "vectric.sales_orders" */
["vectric_sales_orders_set_input"]: GraphQLTypes["vectric_sales_orders_set_input"];
	/** order by stddev() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_stddev_order_by"]: GraphQLTypes["vectric_sales_orders_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_stddev_pop_order_by"]: GraphQLTypes["vectric_sales_orders_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_stddev_samp_order_by"]: GraphQLTypes["vectric_sales_orders_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_sum_order_by"]: GraphQLTypes["vectric_sales_orders_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_var_pop_order_by"]: GraphQLTypes["vectric_sales_orders_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_var_samp_order_by"]: GraphQLTypes["vectric_sales_orders_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_variance_order_by"]: GraphQLTypes["vectric_sales_orders_variance_order_by"];
	/** order by aggregate values of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_aggregate_order_by"]: GraphQLTypes["vectric_sales_salesitem_products_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_arr_rel_insert_input"]: GraphQLTypes["vectric_sales_salesitem_products_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_avg_order_by"]: GraphQLTypes["vectric_sales_salesitem_products_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.sales_salesitem_products". All fields are combined with a logical 'AND'. */
["vectric_sales_salesitem_products_bool_exp"]: GraphQLTypes["vectric_sales_salesitem_products_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_inc_input"]: GraphQLTypes["vectric_sales_salesitem_products_inc_input"];
	/** input type for inserting data into table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_insert_input"]: GraphQLTypes["vectric_sales_salesitem_products_insert_input"];
	/** order by max() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_max_order_by"]: GraphQLTypes["vectric_sales_salesitem_products_max_order_by"];
	/** order by min() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_min_order_by"]: GraphQLTypes["vectric_sales_salesitem_products_min_order_by"];
	/** input type for inserting object relation for remote table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_obj_rel_insert_input"]: GraphQLTypes["vectric_sales_salesitem_products_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_on_conflict"]: GraphQLTypes["vectric_sales_salesitem_products_on_conflict"];
	/** Ordering options when selecting data from "vectric.sales_salesitem_products". */
["vectric_sales_salesitem_products_order_by"]: GraphQLTypes["vectric_sales_salesitem_products_order_by"];
	/** primary key columns input for table: vectric_sales_salesitem_products */
["vectric_sales_salesitem_products_pk_columns_input"]: GraphQLTypes["vectric_sales_salesitem_products_pk_columns_input"];
	/** input type for updating data in table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_set_input"]: GraphQLTypes["vectric_sales_salesitem_products_set_input"];
	/** order by stddev() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_stddev_order_by"]: GraphQLTypes["vectric_sales_salesitem_products_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_stddev_pop_order_by"]: GraphQLTypes["vectric_sales_salesitem_products_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_stddev_samp_order_by"]: GraphQLTypes["vectric_sales_salesitem_products_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_sum_order_by"]: GraphQLTypes["vectric_sales_salesitem_products_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_var_pop_order_by"]: GraphQLTypes["vectric_sales_salesitem_products_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_var_samp_order_by"]: GraphQLTypes["vectric_sales_salesitem_products_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_variance_order_by"]: GraphQLTypes["vectric_sales_salesitem_products_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.sales_salesitemproduct_status". All fields are combined with a logical 'AND'. */
["vectric_sales_salesitemproduct_status_bool_exp"]: GraphQLTypes["vectric_sales_salesitemproduct_status_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_inc_input"]: GraphQLTypes["vectric_sales_salesitemproduct_status_inc_input"];
	/** input type for inserting data into table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_insert_input"]: GraphQLTypes["vectric_sales_salesitemproduct_status_insert_input"];
	/** input type for inserting object relation for remote table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_obj_rel_insert_input"]: GraphQLTypes["vectric_sales_salesitemproduct_status_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_on_conflict"]: GraphQLTypes["vectric_sales_salesitemproduct_status_on_conflict"];
	/** Ordering options when selecting data from "vectric.sales_salesitemproduct_status". */
["vectric_sales_salesitemproduct_status_order_by"]: GraphQLTypes["vectric_sales_salesitemproduct_status_order_by"];
	/** primary key columns input for table: vectric_sales_salesitemproduct_status */
["vectric_sales_salesitemproduct_status_pk_columns_input"]: GraphQLTypes["vectric_sales_salesitemproduct_status_pk_columns_input"];
	/** input type for updating data in table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_set_input"]: GraphQLTypes["vectric_sales_salesitemproduct_status_set_input"];
	/** order by aggregate values of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_aggregate_order_by"]: GraphQLTypes["vectric_sales_salesitems_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.sales_salesitems" */
["vectric_sales_salesitems_arr_rel_insert_input"]: GraphQLTypes["vectric_sales_salesitems_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_avg_order_by"]: GraphQLTypes["vectric_sales_salesitems_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.sales_salesitems". All fields are combined with a logical 'AND'. */
["vectric_sales_salesitems_bool_exp"]: GraphQLTypes["vectric_sales_salesitems_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.sales_salesitems" */
["vectric_sales_salesitems_inc_input"]: GraphQLTypes["vectric_sales_salesitems_inc_input"];
	/** input type for inserting data into table "vectric.sales_salesitems" */
["vectric_sales_salesitems_insert_input"]: GraphQLTypes["vectric_sales_salesitems_insert_input"];
	/** order by max() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_max_order_by"]: GraphQLTypes["vectric_sales_salesitems_max_order_by"];
	/** order by min() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_min_order_by"]: GraphQLTypes["vectric_sales_salesitems_min_order_by"];
	/** input type for inserting object relation for remote table "vectric.sales_salesitems" */
["vectric_sales_salesitems_obj_rel_insert_input"]: GraphQLTypes["vectric_sales_salesitems_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.sales_salesitems" */
["vectric_sales_salesitems_on_conflict"]: GraphQLTypes["vectric_sales_salesitems_on_conflict"];
	/** Ordering options when selecting data from "vectric.sales_salesitems". */
["vectric_sales_salesitems_order_by"]: GraphQLTypes["vectric_sales_salesitems_order_by"];
	/** primary key columns input for table: vectric_sales_salesitems */
["vectric_sales_salesitems_pk_columns_input"]: GraphQLTypes["vectric_sales_salesitems_pk_columns_input"];
	/** input type for updating data in table "vectric.sales_salesitems" */
["vectric_sales_salesitems_set_input"]: GraphQLTypes["vectric_sales_salesitems_set_input"];
	/** order by stddev() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_stddev_order_by"]: GraphQLTypes["vectric_sales_salesitems_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_stddev_pop_order_by"]: GraphQLTypes["vectric_sales_salesitems_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_stddev_samp_order_by"]: GraphQLTypes["vectric_sales_salesitems_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_sum_order_by"]: GraphQLTypes["vectric_sales_salesitems_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_var_pop_order_by"]: GraphQLTypes["vectric_sales_salesitems_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_var_samp_order_by"]: GraphQLTypes["vectric_sales_salesitems_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_variance_order_by"]: GraphQLTypes["vectric_sales_salesitems_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.sales_velocitytemplate". All fields are combined with a logical 'AND'. */
["vectric_sales_velocitytemplate_bool_exp"]: GraphQLTypes["vectric_sales_velocitytemplate_bool_exp"];
	/** input type for inserting data into table "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_insert_input"]: GraphQLTypes["vectric_sales_velocitytemplate_insert_input"];
	/** on conflict condition type for table "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_on_conflict"]: GraphQLTypes["vectric_sales_velocitytemplate_on_conflict"];
	/** Ordering options when selecting data from "vectric.sales_velocitytemplate". */
["vectric_sales_velocitytemplate_order_by"]: GraphQLTypes["vectric_sales_velocitytemplate_order_by"];
	/** primary key columns input for table: vectric_sales_velocitytemplate */
["vectric_sales_velocitytemplate_pk_columns_input"]: GraphQLTypes["vectric_sales_velocitytemplate_pk_columns_input"];
	/** input type for updating data in table "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_set_input"]: GraphQLTypes["vectric_sales_velocitytemplate_set_input"];
	/** Boolean expression to filter rows from the table "vectric.scheduled_emails". All fields are combined with a logical 'AND'. */
["vectric_scheduled_emails_bool_exp"]: GraphQLTypes["vectric_scheduled_emails_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.scheduled_emails" */
["vectric_scheduled_emails_inc_input"]: GraphQLTypes["vectric_scheduled_emails_inc_input"];
	/** input type for inserting data into table "vectric.scheduled_emails" */
["vectric_scheduled_emails_insert_input"]: GraphQLTypes["vectric_scheduled_emails_insert_input"];
	/** on conflict condition type for table "vectric.scheduled_emails" */
["vectric_scheduled_emails_on_conflict"]: GraphQLTypes["vectric_scheduled_emails_on_conflict"];
	/** Ordering options when selecting data from "vectric.scheduled_emails". */
["vectric_scheduled_emails_order_by"]: GraphQLTypes["vectric_scheduled_emails_order_by"];
	/** primary key columns input for table: vectric_scheduled_emails */
["vectric_scheduled_emails_pk_columns_input"]: GraphQLTypes["vectric_scheduled_emails_pk_columns_input"];
	/** input type for updating data in table "vectric.scheduled_emails" */
["vectric_scheduled_emails_set_input"]: GraphQLTypes["vectric_scheduled_emails_set_input"];
	/** Boolean expression to filter rows from the table "vectric.security_emailverificationtokens". All fields are combined with a logical 'AND'. */
["vectric_security_emailverificationtokens_bool_exp"]: GraphQLTypes["vectric_security_emailverificationtokens_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_inc_input"]: GraphQLTypes["vectric_security_emailverificationtokens_inc_input"];
	/** input type for inserting data into table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_insert_input"]: GraphQLTypes["vectric_security_emailverificationtokens_insert_input"];
	/** on conflict condition type for table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_on_conflict"]: GraphQLTypes["vectric_security_emailverificationtokens_on_conflict"];
	/** Ordering options when selecting data from "vectric.security_emailverificationtokens". */
["vectric_security_emailverificationtokens_order_by"]: GraphQLTypes["vectric_security_emailverificationtokens_order_by"];
	/** primary key columns input for table: vectric_security_emailverificationtokens */
["vectric_security_emailverificationtokens_pk_columns_input"]: GraphQLTypes["vectric_security_emailverificationtokens_pk_columns_input"];
	/** input type for updating data in table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_set_input"]: GraphQLTypes["vectric_security_emailverificationtokens_set_input"];
	/** order by aggregate values of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_aggregate_order_by"]: GraphQLTypes["vectric_security_group_authorities_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.security_group_authorities" */
["vectric_security_group_authorities_arr_rel_insert_input"]: GraphQLTypes["vectric_security_group_authorities_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_avg_order_by"]: GraphQLTypes["vectric_security_group_authorities_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.security_group_authorities". All fields are combined with a logical 'AND'. */
["vectric_security_group_authorities_bool_exp"]: GraphQLTypes["vectric_security_group_authorities_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.security_group_authorities" */
["vectric_security_group_authorities_inc_input"]: GraphQLTypes["vectric_security_group_authorities_inc_input"];
	/** input type for inserting data into table "vectric.security_group_authorities" */
["vectric_security_group_authorities_insert_input"]: GraphQLTypes["vectric_security_group_authorities_insert_input"];
	/** order by max() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_max_order_by"]: GraphQLTypes["vectric_security_group_authorities_max_order_by"];
	/** order by min() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_min_order_by"]: GraphQLTypes["vectric_security_group_authorities_min_order_by"];
	/** Ordering options when selecting data from "vectric.security_group_authorities". */
["vectric_security_group_authorities_order_by"]: GraphQLTypes["vectric_security_group_authorities_order_by"];
	/** input type for updating data in table "vectric.security_group_authorities" */
["vectric_security_group_authorities_set_input"]: GraphQLTypes["vectric_security_group_authorities_set_input"];
	/** order by stddev() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_stddev_order_by"]: GraphQLTypes["vectric_security_group_authorities_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_stddev_pop_order_by"]: GraphQLTypes["vectric_security_group_authorities_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_stddev_samp_order_by"]: GraphQLTypes["vectric_security_group_authorities_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_sum_order_by"]: GraphQLTypes["vectric_security_group_authorities_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_var_pop_order_by"]: GraphQLTypes["vectric_security_group_authorities_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_var_samp_order_by"]: GraphQLTypes["vectric_security_group_authorities_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_variance_order_by"]: GraphQLTypes["vectric_security_group_authorities_variance_order_by"];
	/** order by aggregate values of table "vectric.security_group_members" */
["vectric_security_group_members_aggregate_order_by"]: GraphQLTypes["vectric_security_group_members_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.security_group_members" */
["vectric_security_group_members_arr_rel_insert_input"]: GraphQLTypes["vectric_security_group_members_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_avg_order_by"]: GraphQLTypes["vectric_security_group_members_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.security_group_members". All fields are combined with a logical 'AND'. */
["vectric_security_group_members_bool_exp"]: GraphQLTypes["vectric_security_group_members_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.security_group_members" */
["vectric_security_group_members_inc_input"]: GraphQLTypes["vectric_security_group_members_inc_input"];
	/** input type for inserting data into table "vectric.security_group_members" */
["vectric_security_group_members_insert_input"]: GraphQLTypes["vectric_security_group_members_insert_input"];
	/** order by max() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_max_order_by"]: GraphQLTypes["vectric_security_group_members_max_order_by"];
	/** order by min() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_min_order_by"]: GraphQLTypes["vectric_security_group_members_min_order_by"];
	/** on conflict condition type for table "vectric.security_group_members" */
["vectric_security_group_members_on_conflict"]: GraphQLTypes["vectric_security_group_members_on_conflict"];
	/** Ordering options when selecting data from "vectric.security_group_members". */
["vectric_security_group_members_order_by"]: GraphQLTypes["vectric_security_group_members_order_by"];
	/** primary key columns input for table: vectric_security_group_members */
["vectric_security_group_members_pk_columns_input"]: GraphQLTypes["vectric_security_group_members_pk_columns_input"];
	/** input type for updating data in table "vectric.security_group_members" */
["vectric_security_group_members_set_input"]: GraphQLTypes["vectric_security_group_members_set_input"];
	/** order by stddev() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_stddev_order_by"]: GraphQLTypes["vectric_security_group_members_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_stddev_pop_order_by"]: GraphQLTypes["vectric_security_group_members_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_stddev_samp_order_by"]: GraphQLTypes["vectric_security_group_members_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_sum_order_by"]: GraphQLTypes["vectric_security_group_members_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_var_pop_order_by"]: GraphQLTypes["vectric_security_group_members_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_var_samp_order_by"]: GraphQLTypes["vectric_security_group_members_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_variance_order_by"]: GraphQLTypes["vectric_security_group_members_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.security_passwordresettokens". All fields are combined with a logical 'AND'. */
["vectric_security_passwordresettokens_bool_exp"]: GraphQLTypes["vectric_security_passwordresettokens_bool_exp"];
	/** input type for inserting data into table "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_insert_input"]: GraphQLTypes["vectric_security_passwordresettokens_insert_input"];
	/** on conflict condition type for table "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_on_conflict"]: GraphQLTypes["vectric_security_passwordresettokens_on_conflict"];
	/** Ordering options when selecting data from "vectric.security_passwordresettokens". */
["vectric_security_passwordresettokens_order_by"]: GraphQLTypes["vectric_security_passwordresettokens_order_by"];
	/** primary key columns input for table: vectric_security_passwordresettokens */
["vectric_security_passwordresettokens_pk_columns_input"]: GraphQLTypes["vectric_security_passwordresettokens_pk_columns_input"];
	/** input type for updating data in table "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_set_input"]: GraphQLTypes["vectric_security_passwordresettokens_set_input"];
	/** Boolean expression to filter rows from the table "vectric.security_userinvitations". All fields are combined with a logical 'AND'. */
["vectric_security_userinvitations_bool_exp"]: GraphQLTypes["vectric_security_userinvitations_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.security_userinvitations" */
["vectric_security_userinvitations_inc_input"]: GraphQLTypes["vectric_security_userinvitations_inc_input"];
	/** input type for inserting data into table "vectric.security_userinvitations" */
["vectric_security_userinvitations_insert_input"]: GraphQLTypes["vectric_security_userinvitations_insert_input"];
	/** on conflict condition type for table "vectric.security_userinvitations" */
["vectric_security_userinvitations_on_conflict"]: GraphQLTypes["vectric_security_userinvitations_on_conflict"];
	/** Ordering options when selecting data from "vectric.security_userinvitations". */
["vectric_security_userinvitations_order_by"]: GraphQLTypes["vectric_security_userinvitations_order_by"];
	/** primary key columns input for table: vectric_security_userinvitations */
["vectric_security_userinvitations_pk_columns_input"]: GraphQLTypes["vectric_security_userinvitations_pk_columns_input"];
	/** input type for updating data in table "vectric.security_userinvitations" */
["vectric_security_userinvitations_set_input"]: GraphQLTypes["vectric_security_userinvitations_set_input"];
	/** Boolean expression to filter rows from the table "vectric.security_users". All fields are combined with a logical 'AND'. */
["vectric_security_users_bool_exp"]: GraphQLTypes["vectric_security_users_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.security_users" */
["vectric_security_users_inc_input"]: GraphQLTypes["vectric_security_users_inc_input"];
	/** input type for inserting data into table "vectric.security_users" */
["vectric_security_users_insert_input"]: GraphQLTypes["vectric_security_users_insert_input"];
	/** input type for inserting object relation for remote table "vectric.security_users" */
["vectric_security_users_obj_rel_insert_input"]: GraphQLTypes["vectric_security_users_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.security_users" */
["vectric_security_users_on_conflict"]: GraphQLTypes["vectric_security_users_on_conflict"];
	/** Ordering options when selecting data from "vectric.security_users". */
["vectric_security_users_order_by"]: GraphQLTypes["vectric_security_users_order_by"];
	/** primary key columns input for table: vectric_security_users */
["vectric_security_users_pk_columns_input"]: GraphQLTypes["vectric_security_users_pk_columns_input"];
	/** input type for updating data in table "vectric.security_users" */
["vectric_security_users_set_input"]: GraphQLTypes["vectric_security_users_set_input"];
	/** Boolean expression to filter rows from the table "vectric.site_option_location". All fields are combined with a logical 'AND'. */
["vectric_site_option_location_bool_exp"]: GraphQLTypes["vectric_site_option_location_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.site_option_location" */
["vectric_site_option_location_inc_input"]: GraphQLTypes["vectric_site_option_location_inc_input"];
	/** input type for inserting data into table "vectric.site_option_location" */
["vectric_site_option_location_insert_input"]: GraphQLTypes["vectric_site_option_location_insert_input"];
	/** input type for inserting object relation for remote table "vectric.site_option_location" */
["vectric_site_option_location_obj_rel_insert_input"]: GraphQLTypes["vectric_site_option_location_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.site_option_location" */
["vectric_site_option_location_on_conflict"]: GraphQLTypes["vectric_site_option_location_on_conflict"];
	/** Ordering options when selecting data from "vectric.site_option_location". */
["vectric_site_option_location_order_by"]: GraphQLTypes["vectric_site_option_location_order_by"];
	/** primary key columns input for table: vectric_site_option_location */
["vectric_site_option_location_pk_columns_input"]: GraphQLTypes["vectric_site_option_location_pk_columns_input"];
	/** input type for updating data in table "vectric.site_option_location" */
["vectric_site_option_location_set_input"]: GraphQLTypes["vectric_site_option_location_set_input"];
	/** Boolean expression to filter rows from the table "vectric.site_options". All fields are combined with a logical 'AND'. */
["vectric_site_options_bool_exp"]: GraphQLTypes["vectric_site_options_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.site_options" */
["vectric_site_options_inc_input"]: GraphQLTypes["vectric_site_options_inc_input"];
	/** input type for inserting data into table "vectric.site_options" */
["vectric_site_options_insert_input"]: GraphQLTypes["vectric_site_options_insert_input"];
	/** on conflict condition type for table "vectric.site_options" */
["vectric_site_options_on_conflict"]: GraphQLTypes["vectric_site_options_on_conflict"];
	/** Ordering options when selecting data from "vectric.site_options". */
["vectric_site_options_order_by"]: GraphQLTypes["vectric_site_options_order_by"];
	/** primary key columns input for table: vectric_site_options */
["vectric_site_options_pk_columns_input"]: GraphQLTypes["vectric_site_options_pk_columns_input"];
	/** input type for updating data in table "vectric.site_options" */
["vectric_site_options_set_input"]: GraphQLTypes["vectric_site_options_set_input"];
	/** Boolean expression to filter rows from the table "vectric.subscription_contract_status". All fields are combined with a logical 'AND'. */
["vectric_subscription_contract_status_bool_exp"]: GraphQLTypes["vectric_subscription_contract_status_bool_exp"];
	/** input type for inserting data into table "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_insert_input"]: GraphQLTypes["vectric_subscription_contract_status_insert_input"];
	/** on conflict condition type for table "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_on_conflict"]: GraphQLTypes["vectric_subscription_contract_status_on_conflict"];
	/** Ordering options when selecting data from "vectric.subscription_contract_status". */
["vectric_subscription_contract_status_order_by"]: GraphQLTypes["vectric_subscription_contract_status_order_by"];
	/** primary key columns input for table: vectric_subscription_contract_status */
["vectric_subscription_contract_status_pk_columns_input"]: GraphQLTypes["vectric_subscription_contract_status_pk_columns_input"];
	/** input type for updating data in table "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_set_input"]: GraphQLTypes["vectric_subscription_contract_status_set_input"];
	/** Boolean expression to filter rows from the table "vectric.subscription_contracts". All fields are combined with a logical 'AND'. */
["vectric_subscription_contracts_bool_exp"]: GraphQLTypes["vectric_subscription_contracts_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.subscription_contracts" */
["vectric_subscription_contracts_inc_input"]: GraphQLTypes["vectric_subscription_contracts_inc_input"];
	/** input type for inserting data into table "vectric.subscription_contracts" */
["vectric_subscription_contracts_insert_input"]: GraphQLTypes["vectric_subscription_contracts_insert_input"];
	/** input type for inserting object relation for remote table "vectric.subscription_contracts" */
["vectric_subscription_contracts_obj_rel_insert_input"]: GraphQLTypes["vectric_subscription_contracts_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.subscription_contracts" */
["vectric_subscription_contracts_on_conflict"]: GraphQLTypes["vectric_subscription_contracts_on_conflict"];
	/** Ordering options when selecting data from "vectric.subscription_contracts". */
["vectric_subscription_contracts_order_by"]: GraphQLTypes["vectric_subscription_contracts_order_by"];
	/** primary key columns input for table: vectric_subscription_contracts */
["vectric_subscription_contracts_pk_columns_input"]: GraphQLTypes["vectric_subscription_contracts_pk_columns_input"];
	/** input type for updating data in table "vectric.subscription_contracts" */
["vectric_subscription_contracts_set_input"]: GraphQLTypes["vectric_subscription_contracts_set_input"];
	/** order by aggregate values of table "vectric.subscription_events" */
["vectric_subscription_events_aggregate_order_by"]: GraphQLTypes["vectric_subscription_events_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.subscription_events" */
["vectric_subscription_events_arr_rel_insert_input"]: GraphQLTypes["vectric_subscription_events_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_avg_order_by"]: GraphQLTypes["vectric_subscription_events_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.subscription_events". All fields are combined with a logical 'AND'. */
["vectric_subscription_events_bool_exp"]: GraphQLTypes["vectric_subscription_events_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.subscription_events" */
["vectric_subscription_events_inc_input"]: GraphQLTypes["vectric_subscription_events_inc_input"];
	/** input type for inserting data into table "vectric.subscription_events" */
["vectric_subscription_events_insert_input"]: GraphQLTypes["vectric_subscription_events_insert_input"];
	/** order by max() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_max_order_by"]: GraphQLTypes["vectric_subscription_events_max_order_by"];
	/** order by min() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_min_order_by"]: GraphQLTypes["vectric_subscription_events_min_order_by"];
	/** on conflict condition type for table "vectric.subscription_events" */
["vectric_subscription_events_on_conflict"]: GraphQLTypes["vectric_subscription_events_on_conflict"];
	/** Ordering options when selecting data from "vectric.subscription_events". */
["vectric_subscription_events_order_by"]: GraphQLTypes["vectric_subscription_events_order_by"];
	/** primary key columns input for table: vectric_subscription_events */
["vectric_subscription_events_pk_columns_input"]: GraphQLTypes["vectric_subscription_events_pk_columns_input"];
	/** input type for updating data in table "vectric.subscription_events" */
["vectric_subscription_events_set_input"]: GraphQLTypes["vectric_subscription_events_set_input"];
	/** order by stddev() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_stddev_order_by"]: GraphQLTypes["vectric_subscription_events_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_stddev_pop_order_by"]: GraphQLTypes["vectric_subscription_events_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_stddev_samp_order_by"]: GraphQLTypes["vectric_subscription_events_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_sum_order_by"]: GraphQLTypes["vectric_subscription_events_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_var_pop_order_by"]: GraphQLTypes["vectric_subscription_events_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_var_samp_order_by"]: GraphQLTypes["vectric_subscription_events_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_variance_order_by"]: GraphQLTypes["vectric_subscription_events_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.toolpath_saver_token". All fields are combined with a logical 'AND'. */
["vectric_toolpath_saver_token_bool_exp"]: GraphQLTypes["vectric_toolpath_saver_token_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_inc_input"]: GraphQLTypes["vectric_toolpath_saver_token_inc_input"];
	/** input type for inserting data into table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_insert_input"]: GraphQLTypes["vectric_toolpath_saver_token_insert_input"];
	/** on conflict condition type for table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_on_conflict"]: GraphQLTypes["vectric_toolpath_saver_token_on_conflict"];
	/** Ordering options when selecting data from "vectric.toolpath_saver_token". */
["vectric_toolpath_saver_token_order_by"]: GraphQLTypes["vectric_toolpath_saver_token_order_by"];
	/** primary key columns input for table: vectric_toolpath_saver_token */
["vectric_toolpath_saver_token_pk_columns_input"]: GraphQLTypes["vectric_toolpath_saver_token_pk_columns_input"];
	/** input type for updating data in table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_set_input"]: GraphQLTypes["vectric_toolpath_saver_token_set_input"];
	/** Boolean expression to filter rows from the table "vectric.trial_order". All fields are combined with a logical 'AND'. */
["vectric_trial_order_bool_exp"]: GraphQLTypes["vectric_trial_order_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.trial_order" */
["vectric_trial_order_inc_input"]: GraphQLTypes["vectric_trial_order_inc_input"];
	/** input type for inserting data into table "vectric.trial_order" */
["vectric_trial_order_insert_input"]: GraphQLTypes["vectric_trial_order_insert_input"];
	/** on conflict condition type for table "vectric.trial_order" */
["vectric_trial_order_on_conflict"]: GraphQLTypes["vectric_trial_order_on_conflict"];
	/** Ordering options when selecting data from "vectric.trial_order". */
["vectric_trial_order_order_by"]: GraphQLTypes["vectric_trial_order_order_by"];
	/** primary key columns input for table: vectric_trial_order */
["vectric_trial_order_pk_columns_input"]: GraphQLTypes["vectric_trial_order_pk_columns_input"];
	/** input type for updating data in table "vectric.trial_order" */
["vectric_trial_order_set_input"]: GraphQLTypes["vectric_trial_order_set_input"];
	/** Boolean expression to filter rows from the table "vectric.update_requests". All fields are combined with a logical 'AND'. */
["vectric_update_requests_bool_exp"]: GraphQLTypes["vectric_update_requests_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.update_requests" */
["vectric_update_requests_inc_input"]: GraphQLTypes["vectric_update_requests_inc_input"];
	/** input type for inserting data into table "vectric.update_requests" */
["vectric_update_requests_insert_input"]: GraphQLTypes["vectric_update_requests_insert_input"];
	/** on conflict condition type for table "vectric.update_requests" */
["vectric_update_requests_on_conflict"]: GraphQLTypes["vectric_update_requests_on_conflict"];
	/** Ordering options when selecting data from "vectric.update_requests". */
["vectric_update_requests_order_by"]: GraphQLTypes["vectric_update_requests_order_by"];
	/** primary key columns input for table: vectric_update_requests */
["vectric_update_requests_pk_columns_input"]: GraphQLTypes["vectric_update_requests_pk_columns_input"];
	/** input type for updating data in table "vectric.update_requests" */
["vectric_update_requests_set_input"]: GraphQLTypes["vectric_update_requests_set_input"];
	/** order by aggregate values of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_aggregate_order_by"]: GraphQLTypes["vectric_upgrade_tokens_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_arr_rel_insert_input"]: GraphQLTypes["vectric_upgrade_tokens_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_avg_order_by"]: GraphQLTypes["vectric_upgrade_tokens_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.upgrade_tokens". All fields are combined with a logical 'AND'. */
["vectric_upgrade_tokens_bool_exp"]: GraphQLTypes["vectric_upgrade_tokens_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_inc_input"]: GraphQLTypes["vectric_upgrade_tokens_inc_input"];
	/** input type for inserting data into table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_insert_input"]: GraphQLTypes["vectric_upgrade_tokens_insert_input"];
	/** order by max() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_max_order_by"]: GraphQLTypes["vectric_upgrade_tokens_max_order_by"];
	/** order by min() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_min_order_by"]: GraphQLTypes["vectric_upgrade_tokens_min_order_by"];
	/** on conflict condition type for table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_on_conflict"]: GraphQLTypes["vectric_upgrade_tokens_on_conflict"];
	/** Ordering options when selecting data from "vectric.upgrade_tokens". */
["vectric_upgrade_tokens_order_by"]: GraphQLTypes["vectric_upgrade_tokens_order_by"];
	/** primary key columns input for table: vectric_upgrade_tokens */
["vectric_upgrade_tokens_pk_columns_input"]: GraphQLTypes["vectric_upgrade_tokens_pk_columns_input"];
	/** input type for updating data in table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_set_input"]: GraphQLTypes["vectric_upgrade_tokens_set_input"];
	/** order by stddev() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_stddev_order_by"]: GraphQLTypes["vectric_upgrade_tokens_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_stddev_pop_order_by"]: GraphQLTypes["vectric_upgrade_tokens_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_stddev_samp_order_by"]: GraphQLTypes["vectric_upgrade_tokens_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_sum_order_by"]: GraphQLTypes["vectric_upgrade_tokens_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_var_pop_order_by"]: GraphQLTypes["vectric_upgrade_tokens_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_var_samp_order_by"]: GraphQLTypes["vectric_upgrade_tokens_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_variance_order_by"]: GraphQLTypes["vectric_upgrade_tokens_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.upgrades_feature". All fields are combined with a logical 'AND'. */
["vectric_upgrades_feature_bool_exp"]: GraphQLTypes["vectric_upgrades_feature_bool_exp"];
	/** input type for inserting data into table "vectric.upgrades_feature" */
["vectric_upgrades_feature_insert_input"]: GraphQLTypes["vectric_upgrades_feature_insert_input"];
	/** input type for inserting object relation for remote table "vectric.upgrades_feature" */
["vectric_upgrades_feature_obj_rel_insert_input"]: GraphQLTypes["vectric_upgrades_feature_obj_rel_insert_input"];
	/** on conflict condition type for table "vectric.upgrades_feature" */
["vectric_upgrades_feature_on_conflict"]: GraphQLTypes["vectric_upgrades_feature_on_conflict"];
	/** Ordering options when selecting data from "vectric.upgrades_feature". */
["vectric_upgrades_feature_order_by"]: GraphQLTypes["vectric_upgrades_feature_order_by"];
	/** primary key columns input for table: vectric_upgrades_feature */
["vectric_upgrades_feature_pk_columns_input"]: GraphQLTypes["vectric_upgrades_feature_pk_columns_input"];
	/** input type for updating data in table "vectric.upgrades_feature" */
["vectric_upgrades_feature_set_input"]: GraphQLTypes["vectric_upgrades_feature_set_input"];
	/** order by aggregate values of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_aggregate_order_by"]: GraphQLTypes["vectric_upgrades_product_type_feature_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_arr_rel_insert_input"]: GraphQLTypes["vectric_upgrades_product_type_feature_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_avg_order_by"]: GraphQLTypes["vectric_upgrades_product_type_feature_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.upgrades_product_type_feature". All fields are combined with a logical 'AND'. */
["vectric_upgrades_product_type_feature_bool_exp"]: GraphQLTypes["vectric_upgrades_product_type_feature_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_inc_input"]: GraphQLTypes["vectric_upgrades_product_type_feature_inc_input"];
	/** input type for inserting data into table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_insert_input"]: GraphQLTypes["vectric_upgrades_product_type_feature_insert_input"];
	/** order by max() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_max_order_by"]: GraphQLTypes["vectric_upgrades_product_type_feature_max_order_by"];
	/** order by min() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_min_order_by"]: GraphQLTypes["vectric_upgrades_product_type_feature_min_order_by"];
	/** on conflict condition type for table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_on_conflict"]: GraphQLTypes["vectric_upgrades_product_type_feature_on_conflict"];
	/** Ordering options when selecting data from "vectric.upgrades_product_type_feature". */
["vectric_upgrades_product_type_feature_order_by"]: GraphQLTypes["vectric_upgrades_product_type_feature_order_by"];
	/** primary key columns input for table: vectric_upgrades_product_type_feature */
["vectric_upgrades_product_type_feature_pk_columns_input"]: GraphQLTypes["vectric_upgrades_product_type_feature_pk_columns_input"];
	/** input type for updating data in table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_set_input"]: GraphQLTypes["vectric_upgrades_product_type_feature_set_input"];
	/** order by stddev() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_stddev_order_by"]: GraphQLTypes["vectric_upgrades_product_type_feature_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_stddev_pop_order_by"]: GraphQLTypes["vectric_upgrades_product_type_feature_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_stddev_samp_order_by"]: GraphQLTypes["vectric_upgrades_product_type_feature_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_sum_order_by"]: GraphQLTypes["vectric_upgrades_product_type_feature_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_var_pop_order_by"]: GraphQLTypes["vectric_upgrades_product_type_feature_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_var_samp_order_by"]: GraphQLTypes["vectric_upgrades_product_type_feature_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_variance_order_by"]: GraphQLTypes["vectric_upgrades_product_type_feature_variance_order_by"];
	/** order by aggregate values of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_aggregate_order_by"]: GraphQLTypes["vectric_upgrades_version_feature_aggregate_order_by"];
	/** input type for inserting array relation for remote table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_arr_rel_insert_input"]: GraphQLTypes["vectric_upgrades_version_feature_arr_rel_insert_input"];
	/** order by avg() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_avg_order_by"]: GraphQLTypes["vectric_upgrades_version_feature_avg_order_by"];
	/** Boolean expression to filter rows from the table "vectric.upgrades_version_feature". All fields are combined with a logical 'AND'. */
["vectric_upgrades_version_feature_bool_exp"]: GraphQLTypes["vectric_upgrades_version_feature_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_inc_input"]: GraphQLTypes["vectric_upgrades_version_feature_inc_input"];
	/** input type for inserting data into table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_insert_input"]: GraphQLTypes["vectric_upgrades_version_feature_insert_input"];
	/** order by max() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_max_order_by"]: GraphQLTypes["vectric_upgrades_version_feature_max_order_by"];
	/** order by min() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_min_order_by"]: GraphQLTypes["vectric_upgrades_version_feature_min_order_by"];
	/** on conflict condition type for table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_on_conflict"]: GraphQLTypes["vectric_upgrades_version_feature_on_conflict"];
	/** Ordering options when selecting data from "vectric.upgrades_version_feature". */
["vectric_upgrades_version_feature_order_by"]: GraphQLTypes["vectric_upgrades_version_feature_order_by"];
	/** primary key columns input for table: vectric_upgrades_version_feature */
["vectric_upgrades_version_feature_pk_columns_input"]: GraphQLTypes["vectric_upgrades_version_feature_pk_columns_input"];
	/** input type for updating data in table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_set_input"]: GraphQLTypes["vectric_upgrades_version_feature_set_input"];
	/** order by stddev() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_stddev_order_by"]: GraphQLTypes["vectric_upgrades_version_feature_stddev_order_by"];
	/** order by stddev_pop() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_stddev_pop_order_by"]: GraphQLTypes["vectric_upgrades_version_feature_stddev_pop_order_by"];
	/** order by stddev_samp() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_stddev_samp_order_by"]: GraphQLTypes["vectric_upgrades_version_feature_stddev_samp_order_by"];
	/** order by sum() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_sum_order_by"]: GraphQLTypes["vectric_upgrades_version_feature_sum_order_by"];
	/** order by var_pop() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_var_pop_order_by"]: GraphQLTypes["vectric_upgrades_version_feature_var_pop_order_by"];
	/** order by var_samp() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_var_samp_order_by"]: GraphQLTypes["vectric_upgrades_version_feature_var_samp_order_by"];
	/** order by variance() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_variance_order_by"]: GraphQLTypes["vectric_upgrades_version_feature_variance_order_by"];
	/** Boolean expression to filter rows from the table "vectric.usergroup_2019_attendees". All fields are combined with a logical 'AND'. */
["vectric_usergroup_2019_attendees_bool_exp"]: GraphQLTypes["vectric_usergroup_2019_attendees_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_inc_input"]: GraphQLTypes["vectric_usergroup_2019_attendees_inc_input"];
	/** input type for inserting data into table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_insert_input"]: GraphQLTypes["vectric_usergroup_2019_attendees_insert_input"];
	/** on conflict condition type for table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_on_conflict"]: GraphQLTypes["vectric_usergroup_2019_attendees_on_conflict"];
	/** Ordering options when selecting data from "vectric.usergroup_2019_attendees". */
["vectric_usergroup_2019_attendees_order_by"]: GraphQLTypes["vectric_usergroup_2019_attendees_order_by"];
	/** primary key columns input for table: vectric_usergroup_2019_attendees */
["vectric_usergroup_2019_attendees_pk_columns_input"]: GraphQLTypes["vectric_usergroup_2019_attendees_pk_columns_input"];
	/** input type for updating data in table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_set_input"]: GraphQLTypes["vectric_usergroup_2019_attendees_set_input"];
	/** Boolean expression to filter rows from the table "vectric.usergroup_2019_waitlist". All fields are combined with a logical 'AND'. */
["vectric_usergroup_2019_waitlist_bool_exp"]: GraphQLTypes["vectric_usergroup_2019_waitlist_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_inc_input"]: GraphQLTypes["vectric_usergroup_2019_waitlist_inc_input"];
	/** input type for inserting data into table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_insert_input"]: GraphQLTypes["vectric_usergroup_2019_waitlist_insert_input"];
	/** on conflict condition type for table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_on_conflict"]: GraphQLTypes["vectric_usergroup_2019_waitlist_on_conflict"];
	/** Ordering options when selecting data from "vectric.usergroup_2019_waitlist". */
["vectric_usergroup_2019_waitlist_order_by"]: GraphQLTypes["vectric_usergroup_2019_waitlist_order_by"];
	/** primary key columns input for table: vectric_usergroup_2019_waitlist */
["vectric_usergroup_2019_waitlist_pk_columns_input"]: GraphQLTypes["vectric_usergroup_2019_waitlist_pk_columns_input"];
	/** input type for updating data in table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_set_input"]: GraphQLTypes["vectric_usergroup_2019_waitlist_set_input"];
	/** Boolean expression to filter rows from the table "vectric.version_code". All fields are combined with a logical 'AND'. */
["vectric_version_code_bool_exp"]: GraphQLTypes["vectric_version_code_bool_exp"];
	/** input type for incrementing numeric columns in table "vectric.version_code" */
["vectric_version_code_inc_input"]: GraphQLTypes["vectric_version_code_inc_input"];
	/** input type for inserting data into table "vectric.version_code" */
["vectric_version_code_insert_input"]: GraphQLTypes["vectric_version_code_insert_input"];
	/** on conflict condition type for table "vectric.version_code" */
["vectric_version_code_on_conflict"]: GraphQLTypes["vectric_version_code_on_conflict"];
	/** Ordering options when selecting data from "vectric.version_code". */
["vectric_version_code_order_by"]: GraphQLTypes["vectric_version_code_order_by"];
	/** primary key columns input for table: vectric_version_code */
["vectric_version_code_pk_columns_input"]: GraphQLTypes["vectric_version_code_pk_columns_input"];
	/** input type for updating data in table "vectric.version_code" */
["vectric_version_code_set_input"]: GraphQLTypes["vectric_version_code_set_input"]
    }

export type GraphQLTypes = {
    // This file was generated based on ".graphqlconfig". Do not edit manually.
	["AcceptMembershipInvitationOutput"]: {
	__typename: "AcceptMembershipInvitationOutput",
	membershipId: number,
	token: string
};
	["ActivateMembershipOutput"]: {
	__typename: "ActivateMembershipOutput",
	membershipId: number,
	status: string
};
	["AddEnhancementToken"]: {
	__typename: "AddEnhancementToken",
	token: string
};
	["AddFreeClipartResponse"]: {
	__typename: "AddFreeClipartResponse",
	salesItemProductId: GraphQLTypes["bigint"]
};
	["AddLicenceOutput"]: {
	__typename: "AddLicenceOutput",
	orderId: string
};
	["AddTestBundleOutput"]: {
	__typename: "AddTestBundleOutput",
	partnerId: GraphQLTypes["bigint"]
};
	["AddTrialOrderAction"]: {
	__typename: "AddTrialOrderAction",
	orderId: GraphQLTypes["bigint"]
};
	["AddUpgradeToken"]: {
	__typename: "AddUpgradeToken",
	token: string
};
	["AllocateLicenceResponse"]: {
	__typename: "AllocateLicenceResponse",
	/** An array relationship */
	allocationBatch: Array<GraphQLTypes["vectric_sales_oem_bundles"]>,
	/** An aggregate relationship */
	allocationBatch_aggregate: GraphQLTypes["vectric_sales_oem_bundles_aggregate"],
	batchId?: string
};
	["AssignmentOutput"]: {
	__typename: "AssignmentOutput",
	assigned: boolean
};
	["CheckEmailForSignUpOutput"]: {
	__typename: "CheckEmailForSignUpOutput",
	error?: string
};
	["DeactivateMembershipOutput"]: {
	__typename: "DeactivateMembershipOutput",
	membershipId: number,
	status: string
};
	["DeclineMembershipInvitationOutput"]: {
	__typename: "DeclineMembershipInvitationOutput",
	accessToken: string
};
	["DeletedOutput"]: {
	__typename: "DeletedOutput",
	deleted?: Array<string>
};
	["EmailVerificationOutput"]: {
	__typename: "EmailVerificationOutput",
	verified: boolean
};
	["EvaluationLicenceOutput"]: {
	__typename: "EvaluationLicenceOutput",
	orderId: string
};
	["FastspringSecureRequestOutput"]: {
	__typename: "FastspringSecureRequestOutput",
	key?: string,
	payload?: string
};
	["ForgotPassword"]: {
	__typename: "ForgotPassword",
	completed: boolean,
	username: string
};
	["GetDownloadLinkForContentProject"]: {
	__typename: "GetDownloadLinkForContentProject",
	expires: string,
	object?: string,
	url: string
};
	["GetDownloadLinkForFulfilmentOutput"]: {
	__typename: "GetDownloadLinkForFulfilmentOutput",
	expires: string,
	object: string,
	url?: string
};
	["LicenceDetailsForProductOrderItem"]: {
	__typename: "LicenceDetailsForProductOrderItem",
	licenceCode: string,
	licenceData: string,
	licenceType?: string,
	registeredUsername: string,
	salesItemProductId: GraphQLTypes["bigint"]
};
	["LicenceDetailsForProductOrderItemAndAddOns"]: {
	__typename: "LicenceDetailsForProductOrderItemAndAddOns",
	licenceCode: string,
	licenceData: string,
	licenceType?: string,
	registeredUsername: string,
	salesItemProductId: GraphQLTypes["bigint"]
};
	["MembershipInvitationCheckResult"]: {
	__typename: "MembershipInvitationCheckResult",
	customerId?: number,
	existingCustomer: boolean,
	existingUser: boolean,
	used: boolean,
	userInvitationToken?: string,
	valid: boolean
};
	["OemFastspringSecureRequestOutput"]: {
	__typename: "OemFastspringSecureRequestOutput",
	key?: string,
	payload?: string
};
	["OrganizationAddNewMemberOutput"]: {
	__typename: "OrganizationAddNewMemberOutput",
	success: boolean
};
	["OrganizationEditMemberOutput"]: {
	__typename: "OrganizationEditMemberOutput",
	success: boolean
};
	["PasswordResetOutput"]: {
	__typename: "PasswordResetOutput",
	completed: boolean
};
	["ProcessOemStaffInvitationOutput"]: {
	__typename: "ProcessOemStaffInvitationOutput",
	enabledEvaluations: GraphQLTypes["bigint"],
	staffId: GraphQLTypes["bigint"]
};
	["RegisterInvite"]: {
	__typename: "RegisterInvite",
	completed: boolean
};
	["RemoveMembershipInvitationOutput"]: {
	__typename: "RemoveMembershipInvitationOutput",
	membershipId: number
};
	["RemoveMembershipOutput"]: {
	__typename: "RemoveMembershipOutput",
	membershipId: string
};
	["RemovePartnerMemberOutput"]: {
	__typename: "RemovePartnerMemberOutput",
	removed: GraphQLTypes["bigint"]
};
	["SampleOutput"]: {
	__typename: "SampleOutput",
	output: string
};
	["SecureFSItemsOutput"]: {
	__typename: "SecureFSItemsOutput",
	key?: string,
	payload?: string
};
	["SendEmailVerificationOutput"]: {
	__typename: "SendEmailVerificationOutput",
	sentTo: string
};
	["SendLicenceAllocationEmailResponse"]: {
	__typename: "SendLicenceAllocationEmailResponse",
	sentTo: string
};
	["SignUpOutput"]: {
	__typename: "SignUpOutput",
	email: string,
	password: string
};
	["TestOrderOutput"]: {
	__typename: "TestOrderOutput",
	orderId: string
};
	["UnassignItemOutput"]: {
	__typename: "UnassignItemOutput",
	unassigned: boolean
};
	["UpgradeDetails"]: {
	__typename: "UpgradeDetails",
	customerId: number,
	fromProductName: string,
	fromProductVersion: string,
	toProductClipart: boolean,
	toProductFastspringId: string,
	toProductId: number,
	toProductName: string,
	toProductVersion: string,
	upgradeToken: string
};
	["ValidateInvitationToken"]: {
	__typename: "ValidateInvitationToken",
	accepted?: boolean,
	valid: boolean
};
	["ValidateVerificationToken"]: {
	__typename: "ValidateVerificationToken",
	valid: boolean
};
	["ZendeskUploadOutput"]: {
	__typename: "ZendeskUploadOutput",
	initialZendeskUploadId?: GraphQLTypes["bigint"]
};
	/** mutation root */
["mutation_root"]: {
	__typename: "mutation_root",
	/** insert data into the table: "vectric.security_emailverificationtokens" */
	InsertSecurityEmailVerificationTokens?: GraphQLTypes["vectric_security_emailverificationtokens_mutation_response"],
	/** Accepts a membership invitation */
	acceptMembershipInvitation?: GraphQLTypes["AcceptMembershipInvitationOutput"],
	activateMembership?: GraphQLTypes["ActivateMembershipOutput"],
	addEnhancementToken?: GraphQLTypes["AddEnhancementToken"],
	addEvaluationLicence: GraphQLTypes["EvaluationLicenceOutput"],
	addFreeClipart?: GraphQLTypes["AddFreeClipartResponse"],
	addLicence?: GraphQLTypes["AddLicenceOutput"],
	addTestBundles?: GraphQLTypes["AddTestBundleOutput"],
	addTestOrder?: GraphQLTypes["TestOrderOutput"],
	addTrialOrderAction?: GraphQLTypes["AddTrialOrderAction"],
	addUpgradeToken?: GraphQLTypes["AddUpgradeToken"],
	allocateLicence?: GraphQLTypes["AllocateLicenceResponse"],
	assignItem?: GraphQLTypes["AssignmentOutput"],
	deactivateMembership?: GraphQLTypes["DeactivateMembershipOutput"],
	declineMembershipInvitation?: GraphQLTypes["DeclineMembershipInvitationOutput"],
	/** delete data from the table: "vectric.allocation_summary" */
	deleteAllocationSummaries?: GraphQLTypes["vectric_allocation_summary_mutation_response"],
	/** delete single row from the table: "vectric.allocation_summary" */
	deleteAllocationSummaryById?: GraphQLTypes["vectric_allocation_summary"],
	/** delete single row from the table: "vectric.owned_item_assignments" */
	deleteAssignment?: GraphQLTypes["vectric_owned_item_assignments"],
	/** delete data from the table: "vectric.owned_item_assignments" */
	deleteAssignments?: GraphQLTypes["vectric_owned_item_assignments_mutation_response"],
	/** delete data from the table: "vectric.countries" */
	deleteCountries?: GraphQLTypes["vectric_countries_mutation_response"],
	/** delete single row from the table: "vectric.countries" */
	deleteCountryById?: GraphQLTypes["vectric_countries"],
	/** delete data from the table: "vectric.customer_area" */
	deleteCustomerArea?: GraphQLTypes["vectric_customer_area_mutation_response"],
	/** delete single row from the table: "vectric.customer_area" */
	deleteCustomerAreaByPk?: GraphQLTypes["vectric_customer_area"],
	/** delete data from the table: "vectric.customer_area_file" */
	deleteCustomerAreaFile?: GraphQLTypes["vectric_customer_area_file_mutation_response"],
	/** delete single row from the table: "vectric.customer_area_file" */
	deleteCustomerAreaFileByPk?: GraphQLTypes["vectric_customer_area_file"],
	/** delete single row from the table: "vectric.sales_customer_downloads" */
	deleteCustomerDownloadById?: GraphQLTypes["vectric_sales_customer_downloads"],
	/** delete data from the table: "vectric.sales_customer_downloads" */
	deleteCustomerDownloads?: GraphQLTypes["vectric_sales_customer_downloads_mutation_response"],
	/** delete single row from the table: "vectric.customer_responses" */
	deleteCustomerResponseById?: GraphQLTypes["vectric_customer_responses"],
	/** delete data from the table: "vectric.customer_responses" */
	deleteCustomerResponses?: GraphQLTypes["vectric_customer_responses_mutation_response"],
	/** delete single row from the table: "vectric.sales_velocitytemplate" */
	deleteEmailTemplate?: GraphQLTypes["vectric_sales_velocitytemplate"],
	/** delete data from the table: "vectric.sales_velocitytemplate" */
	deleteEmailTemplates?: GraphQLTypes["vectric_sales_velocitytemplate_mutation_response"],
	/** delete single row from the table: "vectric.entitled_products" */
	deleteEntitledProduct?: GraphQLTypes["vectric_entitled_products"],
	/** delete data from the table: "vectric.entitled_products" */
	deleteEntitledProducts?: GraphQLTypes["vectric_entitled_products_mutation_response"],
	/** delete single row from the table: "vectric.entitlements" */
	deleteEntitlement?: GraphQLTypes["vectric_entitlements"],
	/** delete single row from the table: "vectric.entitlement_licences" */
	deleteEntitlementLicence?: GraphQLTypes["vectric_entitlement_licences"],
	/** delete data from the table: "vectric.entitlement_licences" */
	deleteEntitlementLicences?: GraphQLTypes["vectric_entitlement_licences_mutation_response"],
	/** delete data from the table: "vectric.entitlements" */
	deleteEntitlements?: GraphQLTypes["vectric_entitlements_mutation_response"],
	/** delete data from the table: "vectric.oem_eval_request" */
	deleteEvalRequests?: GraphQLTypes["vectric_oem_eval_request_mutation_response"],
	/** delete single row from the table: "vectric.oem_eval_request" */
	deleteEvalRequestsById?: GraphQLTypes["vectric_oem_eval_request"],
	/** delete single row from the table: "vectric.memberships" */
	deleteMembershipById?: GraphQLTypes["vectric_memberships"],
	/** delete single row from the table: "vectric.membership_invitations" */
	deleteMembershipInvitationById?: GraphQLTypes["vectric_membership_invitations"],
	/** delete data from the table: "vectric.membership_invitations" */
	deleteMembershipInvitations?: GraphQLTypes["vectric_membership_invitations_mutation_response"],
	/** delete data from the table: "vectric.memberships" */
	deleteMemberships?: GraphQLTypes["vectric_memberships_mutation_response"],
	/** delete data from the table: "vectric.oem_allocation_emails" */
	deleteOemAllocationEmails?: GraphQLTypes["vectric_oem_allocation_emails_mutation_response"],
	/** delete data from the table: "vectric.oem_partners" */
	deleteOemPartner?: GraphQLTypes["vectric_oem_partners_mutation_response"],
	/** delete single row from the table: "vectric.oem_partners" */
	deleteOemPartnerById?: GraphQLTypes["vectric_oem_partners"],
	/** delete single row from the table: "vectric.oem_staff_customer" */
	deleteOemStaffCustomerById?: GraphQLTypes["vectric_oem_staff_customer"],
	/** delete data from the table: "vectric.oem_staff_customer" */
	deleteOemStaffCustomers?: GraphQLTypes["vectric_oem_staff_customer_mutation_response"],
	deleteOrderTree?: GraphQLTypes["DeletedOutput"],
	/** delete data from the table: "vectric.sales_orders" */
	deleteOrders?: GraphQLTypes["vectric_sales_orders_mutation_response"],
	/** delete single row from the table: "vectric.sales_orders" */
	deleteOrdersById?: GraphQLTypes["vectric_sales_orders"],
	/** delete single row from the table: "vectric.organizations" */
	deleteOrganization?: GraphQLTypes["vectric_organizations"],
	/** delete single row from the table: "vectric.organization_audit" */
	deleteOrganizationAuditById?: GraphQLTypes["vectric_organization_audit"],
	/** delete data from the table: "vectric.organization_audit" */
	deleteOrganizationAudits?: GraphQLTypes["vectric_organization_audit_mutation_response"],
	/** delete single row from the table: "vectric.organization_orders" */
	deleteOrganizationOrder?: GraphQLTypes["vectric_organization_orders"],
	/** delete single row from the table: "vectric.organization_order_items" */
	deleteOrganizationOrderItem?: GraphQLTypes["vectric_organization_order_items"],
	/** delete data from the table: "vectric.organization_order_items" */
	deleteOrganizationOrderItems?: GraphQLTypes["vectric_organization_order_items_mutation_response"],
	/** delete data from the table: "vectric.organization_orders" */
	deleteOrganizationOrders?: GraphQLTypes["vectric_organization_orders_mutation_response"],
	/** delete data from the table: "vectric.organizations" */
	deleteOrganizations?: GraphQLTypes["vectric_organizations_mutation_response"],
	/** delete single row from the table: "vectric.owned_items" */
	deleteOwnedItem?: GraphQLTypes["vectric_owned_items"],
	/** delete data from the table: "vectric.owned_items" */
	deleteOwnedItems?: GraphQLTypes["vectric_owned_items_mutation_response"],
	/** delete single row from the table: "vectric.owned_products" */
	deleteOwnedProduct?: GraphQLTypes["vectric_owned_products"],
	/** delete data from the table: "vectric.owned_products" */
	deleteOwnedProducts?: GraphQLTypes["vectric_owned_products_mutation_response"],
	/** delete single row from the table: "vectric.security_passwordresettokens" */
	deletePasswordResetTokenByPk?: GraphQLTypes["vectric_security_passwordresettokens"],
	/** delete data from the table: "vectric.security_passwordresettokens" */
	deletePasswordResetTokens?: GraphQLTypes["vectric_security_passwordresettokens_mutation_response"],
	/** delete data from the table: "vectric.products_products" */
	deleteProduct?: GraphQLTypes["vectric_products_products_mutation_response"],
	/** delete single row from the table: "vectric.products_products" */
	deleteProductById?: GraphQLTypes["vectric_products_products"],
	/** delete data from the table: "vectric.products_producttype" */
	deleteProductType?: GraphQLTypes["vectric_products_producttype_mutation_response"],
	/** delete single row from the table: "vectric.products_producttype" */
	deleteProductTypeById?: GraphQLTypes["vectric_products_producttype"],
	/** delete single row from the table: "vectric.products_upgrade_eligibility" */
	deleteProductUpgradeEligibility?: GraphQLTypes["vectric_products_upgrade_eligibility"],
	/** delete data from the table: "vectric.products_upgrade_eligibility" */
	deleteProductsUpgradeEligibility?: GraphQLTypes["vectric_products_upgrade_eligibility_mutation_response"],
	/** delete single row from the table: "vectric.oem_purchase_options" */
	deletePurchaseOptionByOptionId?: GraphQLTypes["vectric_oem_purchase_options"],
	/** delete data from the table: "vectric.oem_purchase_options" */
	deletePurchaseOptions?: GraphQLTypes["vectric_oem_purchase_options_mutation_response"],
	/** delete single row from the table: "vectric.questions" */
	deleteQuestionById?: GraphQLTypes["vectric_questions"],
	/** delete data from the table: "vectric.questions" */
	deleteQuestions?: GraphQLTypes["vectric_questions_mutation_response"],
	/** delete single row from the table: "vectric.responses" */
	deleteResponseById?: GraphQLTypes["vectric_responses"],
	/** delete data from the table: "vectric.responses" */
	deleteResponses?: GraphQLTypes["vectric_responses_mutation_response"],
	/** delete single row from the table: "vectric.saleable_products" */
	deleteSaleableProduct?: GraphQLTypes["vectric_saleable_products"],
	/** delete data from the table: "vectric.saleable_products" */
	deleteSaleableProducts?: GraphQLTypes["vectric_saleable_products_mutation_response"],
	/** delete single row from the table: "vectric.sales_customers" */
	deleteSalesCustomerByPk?: GraphQLTypes["vectric_sales_customers"],
	/** delete data from the table: "vectric.sales_customers" */
	deleteSalesCustomers?: GraphQLTypes["vectric_sales_customers_mutation_response"],
	/** delete single row from the table: "vectric.sales_salesitems" */
	deleteSalesItemById?: GraphQLTypes["vectric_sales_salesitems"],
	/** delete data from the table: "vectric.sales_salesitem_products" */
	deleteSalesItemProduct?: GraphQLTypes["vectric_sales_salesitem_products_mutation_response"],
	/** delete single row from the table: "vectric.sales_salesitem_products" */
	deleteSalesItemProductById?: GraphQLTypes["vectric_sales_salesitem_products"],
	/** delete data from the table: "vectric.sales_salesitems" */
	deleteSalesItems?: GraphQLTypes["vectric_sales_salesitems_mutation_response"],
	/** delete single row from the table: "vectric.sales_oem_bundles" */
	deleteSalesOEMBundleById?: GraphQLTypes["vectric_sales_oem_bundles"],
	/** delete data from the table: "vectric.sales_oem_bundles" */
	deleteSalesOemBundle?: GraphQLTypes["vectric_sales_oem_bundles_mutation_response"],
	/** delete single row from the table: "vectric.sales_oemlicences" */
	deleteSalesOemLicenceById?: GraphQLTypes["vectric_sales_oemlicences"],
	/** delete data from the table: "vectric.sales_oemlicences" */
	deleteSalesOemLicences?: GraphQLTypes["vectric_sales_oemlicences_mutation_response"],
	/** delete single row from the table: "vectric.scheduled_emails" */
	deleteScheduledEmailById?: GraphQLTypes["vectric_scheduled_emails"],
	/** delete data from the table: "vectric.scheduled_emails" */
	deleteScheduledEmails?: GraphQLTypes["vectric_scheduled_emails_mutation_response"],
	/** delete single row from the table: "vectric.security_group_members" */
	deleteSecurityGroupMemberById?: GraphQLTypes["vectric_security_group_members"],
	/** delete data from the table: "vectric.security_group_members" */
	deleteSecurityGroupMembers?: GraphQLTypes["vectric_security_group_members_mutation_response"],
	/** delete single row from the table: "vectric.site_options" */
	deleteSiteOptionById?: GraphQLTypes["vectric_site_options"],
	/** delete single row from the table: "vectric.site_option_location" */
	deleteSiteOptionLocationById?: GraphQLTypes["vectric_site_option_location"],
	/** delete data from the table: "vectric.site_option_location" */
	deleteSiteOptionLocations?: GraphQLTypes["vectric_site_option_location_mutation_response"],
	/** delete data from the table: "vectric.site_options" */
	deleteSiteOptions?: GraphQLTypes["vectric_site_options_mutation_response"],
	/** delete single row from the table: "vectric.toolpath_saver_token" */
	deleteToolpathSaveTokenById?: GraphQLTypes["vectric_toolpath_saver_token"],
	/** delete data from the table: "vectric.toolpath_saver_token" */
	deleteToolpathSaverTokens?: GraphQLTypes["vectric_toolpath_saver_token_mutation_response"],
	/** delete single row from the table: "vectric.trial_order" */
	deleteTrialOrderById?: GraphQLTypes["vectric_trial_order"],
	/** delete data from the table: "vectric.trial_order" */
	deleteTrialOrders?: GraphQLTypes["vectric_trial_order_mutation_response"],
	/** delete single row from the table: "vectric.update_requests" */
	deleteUpdateRequestById?: GraphQLTypes["vectric_update_requests"],
	/** delete data from the table: "vectric.update_requests" */
	deleteUpdateRequests?: GraphQLTypes["vectric_update_requests_mutation_response"],
	/** delete single row from the table: "vectric.upgrades_feature" */
	deleteUpgradeFeatureById?: GraphQLTypes["vectric_upgrades_feature"],
	/** delete data from the table: "vectric.upgrades_feature" */
	deleteUpgradeFeatures?: GraphQLTypes["vectric_upgrades_feature_mutation_response"],
	/** delete single row from the table: "vectric.upgrades_product_type_feature" */
	deleteUpgradeProductTypeFeatureById?: GraphQLTypes["vectric_upgrades_product_type_feature"],
	/** delete data from the table: "vectric.upgrades_product_type_feature" */
	deleteUpgradeProductTypeFeatures?: GraphQLTypes["vectric_upgrades_product_type_feature_mutation_response"],
	/** delete single row from the table: "vectric.upgrades_version_feature" */
	deleteUpgradeVersionFeatureById?: GraphQLTypes["vectric_upgrades_version_feature"],
	/** delete data from the table: "vectric.upgrades_version_feature" */
	deleteUpgradeVersionFeatures?: GraphQLTypes["vectric_upgrades_version_feature_mutation_response"],
	/** delete single row from the table: "vectric.usergroup_2019_attendees" */
	deleteUserGroupAttendeeById?: GraphQLTypes["vectric_usergroup_2019_attendees"],
	/** delete data from the table: "vectric.usergroup_2019_attendees" */
	deleteUserGroupAttendees?: GraphQLTypes["vectric_usergroup_2019_attendees_mutation_response"],
	/** delete data from the table: "vectric.usergroup_2019_waitlist" */
	deleteUserGroupWaitingListEntries?: GraphQLTypes["vectric_usergroup_2019_waitlist_mutation_response"],
	/** delete single row from the table: "vectric.usergroup_2019_waitlist" */
	deleteUserGroupWaitingListEntryById?: GraphQLTypes["vectric_usergroup_2019_waitlist"],
	/** delete single row from the table: "vectric.products_versioncodes" */
	deleteVersionCodeById?: GraphQLTypes["vectric_products_versioncodes"],
	/** delete data from the table: "vectric.products_versioncodes" */
	deleteVersionCodes?: GraphQLTypes["vectric_products_versioncodes_mutation_response"],
	/** delete single row from the table: "vectric.customer_zd_uploads" */
	deleteZendeskUploadById?: GraphQLTypes["vectric_customer_zd_uploads"],
	/** delete data from the table: "vectric.customer_zd_uploads" */
	deleteZendeskUploads?: GraphQLTypes["vectric_customer_zd_uploads_mutation_response"],
	/** delete data from the table: "vectric.allocatable_bundles" */
	delete_vectric_allocatable_bundles?: GraphQLTypes["vectric_allocatable_bundles_mutation_response"],
	/** delete data from the table: "vectric.allocated_bundles" */
	delete_vectric_allocated_bundles?: GraphQLTypes["vectric_allocated_bundles_mutation_response"],
	/** delete data from the table: "vectric.allocation_summary_file_type" */
	delete_vectric_allocation_summary_file_type?: GraphQLTypes["vectric_allocation_summary_file_type_mutation_response"],
	/** delete single row from the table: "vectric.allocation_summary_file_type" */
	delete_vectric_allocation_summary_file_type_by_pk?: GraphQLTypes["vectric_allocation_summary_file_type"],
	/** delete data from the table: "vectric.continents" */
	delete_vectric_continents?: GraphQLTypes["vectric_continents_mutation_response"],
	/** delete single row from the table: "vectric.continents" */
	delete_vectric_continents_by_pk?: GraphQLTypes["vectric_continents"],
	/** delete data from the table: "vectric.customer_sales" */
	delete_vectric_customer_sales?: GraphQLTypes["vectric_customer_sales_mutation_response"],
	/** delete data from the table: "vectric.customer_status" */
	delete_vectric_customer_status?: GraphQLTypes["vectric_customer_status_mutation_response"],
	/** delete single row from the table: "vectric.customer_status" */
	delete_vectric_customer_status_by_pk?: GraphQLTypes["vectric_customer_status"],
	/** delete data from the table: "vectric.download" */
	delete_vectric_download?: GraphQLTypes["vectric_download_mutation_response"],
	/** delete single row from the table: "vectric.download" */
	delete_vectric_download_by_pk?: GraphQLTypes["vectric_download"],
	/** delete data from the table: "vectric.download_record" */
	delete_vectric_download_record?: GraphQLTypes["vectric_download_record_mutation_response"],
	/** delete single row from the table: "vectric.download_record" */
	delete_vectric_download_record_by_pk?: GraphQLTypes["vectric_download_record"],
	/** delete data from the table: "vectric.enhancement_tokens" */
	delete_vectric_enhancement_tokens?: GraphQLTypes["vectric_enhancement_tokens_mutation_response"],
	/** delete single row from the table: "vectric.enhancement_tokens" */
	delete_vectric_enhancement_tokens_by_pk?: GraphQLTypes["vectric_enhancement_tokens"],
	/** delete data from the table: "vectric.free_clipart_tokens" */
	delete_vectric_free_clipart_tokens?: GraphQLTypes["vectric_free_clipart_tokens_mutation_response"],
	/** delete single row from the table: "vectric.free_clipart_tokens" */
	delete_vectric_free_clipart_tokens_by_pk?: GraphQLTypes["vectric_free_clipart_tokens"],
	/** delete data from the table: "vectric.freeclipart" */
	delete_vectric_freeclipart?: GraphQLTypes["vectric_freeclipart_mutation_response"],
	/** delete single row from the table: "vectric.freeclipart" */
	delete_vectric_freeclipart_by_pk?: GraphQLTypes["vectric_freeclipart"],
	/** delete data from the table: "vectric.freeclipart_category" */
	delete_vectric_freeclipart_category?: GraphQLTypes["vectric_freeclipart_category_mutation_response"],
	/** delete single row from the table: "vectric.freeclipart_category" */
	delete_vectric_freeclipart_category_by_pk?: GraphQLTypes["vectric_freeclipart_category"],
	/** delete data from the table: "vectric.freeclipart_download_record" */
	delete_vectric_freeclipart_download_record?: GraphQLTypes["vectric_freeclipart_download_record_mutation_response"],
	/** delete single row from the table: "vectric.freeclipart_download_record" */
	delete_vectric_freeclipart_download_record_by_pk?: GraphQLTypes["vectric_freeclipart_download_record"],
	/** delete data from the table: "vectric.group_roles" */
	delete_vectric_group_roles?: GraphQLTypes["vectric_group_roles_mutation_response"],
	/** delete single row from the table: "vectric.group_roles" */
	delete_vectric_group_roles_by_pk?: GraphQLTypes["vectric_group_roles"],
	/** delete data from the table: "vectric.group_user_role" */
	delete_vectric_group_user_role?: GraphQLTypes["vectric_group_user_role_mutation_response"],
	/** delete single row from the table: "vectric.group_user_role" */
	delete_vectric_group_user_role_by_pk?: GraphQLTypes["vectric_group_user_role"],
	/** delete data from the table: "vectric.groups" */
	delete_vectric_groups?: GraphQLTypes["vectric_groups_mutation_response"],
	/** delete single row from the table: "vectric.groups" */
	delete_vectric_groups_by_pk?: GraphQLTypes["vectric_groups"],
	/** delete data from the table: "vectric.language_codes" */
	delete_vectric_language_codes?: GraphQLTypes["vectric_language_codes_mutation_response"],
	/** delete single row from the table: "vectric.language_codes" */
	delete_vectric_language_codes_by_pk?: GraphQLTypes["vectric_language_codes"],
	/** delete data from the table: "vectric.licence_log" */
	delete_vectric_licence_log?: GraphQLTypes["vectric_licence_log_mutation_response"],
	/** delete single row from the table: "vectric.licence_log" */
	delete_vectric_licence_log_by_pk?: GraphQLTypes["vectric_licence_log"],
	/** delete data from the table: "vectric.linkshortener_links" */
	delete_vectric_linkshortener_links?: GraphQLTypes["vectric_linkshortener_links_mutation_response"],
	/** delete single row from the table: "vectric.linkshortener_links" */
	delete_vectric_linkshortener_links_by_pk?: GraphQLTypes["vectric_linkshortener_links"],
	/** delete data from the table: "vectric.makerspace_requests" */
	delete_vectric_makerspace_requests?: GraphQLTypes["vectric_makerspace_requests_mutation_response"],
	/** delete single row from the table: "vectric.makerspace_requests" */
	delete_vectric_makerspace_requests_by_pk?: GraphQLTypes["vectric_makerspace_requests"],
	/** delete data from the table: "vectric.membership_invitation_status" */
	delete_vectric_membership_invitation_status?: GraphQLTypes["vectric_membership_invitation_status_mutation_response"],
	/** delete single row from the table: "vectric.membership_invitation_status" */
	delete_vectric_membership_invitation_status_by_pk?: GraphQLTypes["vectric_membership_invitation_status"],
	/** delete data from the table: "vectric.membership_roles" */
	delete_vectric_membership_roles?: GraphQLTypes["vectric_membership_roles_mutation_response"],
	/** delete single row from the table: "vectric.membership_roles" */
	delete_vectric_membership_roles_by_pk?: GraphQLTypes["vectric_membership_roles"],
	/** delete data from the table: "vectric.membership_status" */
	delete_vectric_membership_status?: GraphQLTypes["vectric_membership_status_mutation_response"],
	/** delete single row from the table: "vectric.membership_status" */
	delete_vectric_membership_status_by_pk?: GraphQLTypes["vectric_membership_status"],
	/** delete data from the table: "vectric.oauth_client_details" */
	delete_vectric_oauth_client_details?: GraphQLTypes["vectric_oauth_client_details_mutation_response"],
	/** delete single row from the table: "vectric.oauth_client_details" */
	delete_vectric_oauth_client_details_by_pk?: GraphQLTypes["vectric_oauth_client_details"],
	/** delete data from the table: "vectric.oem_detailed_products" */
	delete_vectric_oem_detailed_products?: GraphQLTypes["vectric_oem_detailed_products_mutation_response"],
	/** delete single row from the table: "vectric.oem_detailed_products" */
	delete_vectric_oem_detailed_products_by_pk?: GraphQLTypes["vectric_oem_detailed_products"],
	/** delete data from the table: "vectric.oem_fastspring_item" */
	delete_vectric_oem_fastspring_item?: GraphQLTypes["vectric_oem_fastspring_item_mutation_response"],
	/** delete data from the table: "vectric.oem_fastspring_item_bundle" */
	delete_vectric_oem_fastspring_item_bundle?: GraphQLTypes["vectric_oem_fastspring_item_bundle_mutation_response"],
	/** delete single row from the table: "vectric.oem_fastspring_item_bundle" */
	delete_vectric_oem_fastspring_item_bundle_by_pk?: GraphQLTypes["vectric_oem_fastspring_item_bundle"],
	/** delete single row from the table: "vectric.oem_fastspring_item" */
	delete_vectric_oem_fastspring_item_by_pk?: GraphQLTypes["vectric_oem_fastspring_item"],
	/** delete data from the table: "vectric.oem_fastspring_order" */
	delete_vectric_oem_fastspring_order?: GraphQLTypes["vectric_oem_fastspring_order_mutation_response"],
	/** delete single row from the table: "vectric.oem_fastspring_order" */
	delete_vectric_oem_fastspring_order_by_pk?: GraphQLTypes["vectric_oem_fastspring_order"],
	/** delete data from the table: "vectric.oem_invite_status" */
	delete_vectric_oem_invite_status?: GraphQLTypes["vectric_oem_invite_status_mutation_response"],
	/** delete single row from the table: "vectric.oem_invite_status" */
	delete_vectric_oem_invite_status_by_pk?: GraphQLTypes["vectric_oem_invite_status"],
	/** delete data from the table: "vectric.oem_licence_allocation_type" */
	delete_vectric_oem_licence_allocation_type?: GraphQLTypes["vectric_oem_licence_allocation_type_mutation_response"],
	/** delete single row from the table: "vectric.oem_licence_allocation_type" */
	delete_vectric_oem_licence_allocation_type_by_pk?: GraphQLTypes["vectric_oem_licence_allocation_type"],
	/** delete data from the table: "vectric.oem_products" */
	delete_vectric_oem_products?: GraphQLTypes["vectric_oem_products_mutation_response"],
	/** delete single row from the table: "vectric.oem_products" */
	delete_vectric_oem_products_by_pk?: GraphQLTypes["vectric_oem_products"],
	/** delete data from the table: "vectric.organization_licence_scope" */
	delete_vectric_organization_licence_scope?: GraphQLTypes["vectric_organization_licence_scope_mutation_response"],
	/** delete single row from the table: "vectric.organization_licence_scope" */
	delete_vectric_organization_licence_scope_by_pk?: GraphQLTypes["vectric_organization_licence_scope"],
	/** delete data from the table: "vectric.organization_types" */
	delete_vectric_organization_types?: GraphQLTypes["vectric_organization_types_mutation_response"],
	/** delete single row from the table: "vectric.organization_types" */
	delete_vectric_organization_types_by_pk?: GraphQLTypes["vectric_organization_types"],
	/** delete data from the table: "vectric.products_clipartcollection_links" */
	delete_vectric_products_clipartcollection_links?: GraphQLTypes["vectric_products_clipartcollection_links_mutation_response"],
	/** delete single row from the table: "vectric.products_clipartcollection_links" */
	delete_vectric_products_clipartcollection_links_by_pk?: GraphQLTypes["vectric_products_clipartcollection_links"],
	/** delete data from the table: "vectric.products_enhancement_eligibility" */
	delete_vectric_products_enhancement_eligibility?: GraphQLTypes["vectric_products_enhancement_eligibility_mutation_response"],
	/** delete single row from the table: "vectric.products_enhancement_eligibility" */
	delete_vectric_products_enhancement_eligibility_by_pk?: GraphQLTypes["vectric_products_enhancement_eligibility"],
	/** delete data from the table: "vectric.products_freeclipart" */
	delete_vectric_products_freeclipart?: GraphQLTypes["vectric_products_freeclipart_mutation_response"],
	/** delete single row from the table: "vectric.products_freeclipart" */
	delete_vectric_products_freeclipart_by_pk?: GraphQLTypes["vectric_products_freeclipart"],
	/** delete data from the table: "vectric.products_fulfilments" */
	delete_vectric_products_fulfilments?: GraphQLTypes["vectric_products_fulfilments_mutation_response"],
	/** delete single row from the table: "vectric.products_fulfilments" */
	delete_vectric_products_fulfilments_by_pk?: GraphQLTypes["vectric_products_fulfilments"],
	/** delete data from the table: "vectric.products_fulfilmenttypes" */
	delete_vectric_products_fulfilmenttypes?: GraphQLTypes["vectric_products_fulfilmenttypes_mutation_response"],
	/** delete single row from the table: "vectric.products_fulfilmenttypes" */
	delete_vectric_products_fulfilmenttypes_by_pk?: GraphQLTypes["vectric_products_fulfilmenttypes"],
	/** delete data from the table: "vectric.products_product_fulfilments" */
	delete_vectric_products_product_fulfilments?: GraphQLTypes["vectric_products_product_fulfilments_mutation_response"],
	/** delete single row from the table: "vectric.products_product_fulfilments" */
	delete_vectric_products_product_fulfilments_by_pk?: GraphQLTypes["vectric_products_product_fulfilments"],
	/** delete data from the table: "vectric.products_product_licence_type" */
	delete_vectric_products_product_licence_type?: GraphQLTypes["vectric_products_product_licence_type_mutation_response"],
	/** delete single row from the table: "vectric.products_product_licence_type" */
	delete_vectric_products_product_licence_type_by_pk?: GraphQLTypes["vectric_products_product_licence_type"],
	/** delete data from the table: "vectric.sales_customerupdates" */
	delete_vectric_sales_customerupdates?: GraphQLTypes["vectric_sales_customerupdates_mutation_response"],
	/** delete single row from the table: "vectric.sales_customerupdates" */
	delete_vectric_sales_customerupdates_by_pk?: GraphQLTypes["vectric_sales_customerupdates"],
	/** delete data from the table: "vectric.sales_salesitemproduct_status" */
	delete_vectric_sales_salesitemproduct_status?: GraphQLTypes["vectric_sales_salesitemproduct_status_mutation_response"],
	/** delete single row from the table: "vectric.sales_salesitemproduct_status" */
	delete_vectric_sales_salesitemproduct_status_by_pk?: GraphQLTypes["vectric_sales_salesitemproduct_status"],
	/** delete data from the table: "vectric.security_emailverificationtokens" */
	delete_vectric_security_emailverificationtokens?: GraphQLTypes["vectric_security_emailverificationtokens_mutation_response"],
	/** delete single row from the table: "vectric.security_emailverificationtokens" */
	delete_vectric_security_emailverificationtokens_by_pk?: GraphQLTypes["vectric_security_emailverificationtokens"],
	/** delete data from the table: "vectric.security_group_authorities" */
	delete_vectric_security_group_authorities?: GraphQLTypes["vectric_security_group_authorities_mutation_response"],
	/** delete data from the table: "vectric.security_userinvitations" */
	delete_vectric_security_userinvitations?: GraphQLTypes["vectric_security_userinvitations_mutation_response"],
	/** delete single row from the table: "vectric.security_userinvitations" */
	delete_vectric_security_userinvitations_by_pk?: GraphQLTypes["vectric_security_userinvitations"],
	/** delete data from the table: "vectric.security_users" */
	delete_vectric_security_users?: GraphQLTypes["vectric_security_users_mutation_response"],
	/** delete single row from the table: "vectric.security_users" */
	delete_vectric_security_users_by_pk?: GraphQLTypes["vectric_security_users"],
	/** delete data from the table: "vectric.subscription_contract_status" */
	delete_vectric_subscription_contract_status?: GraphQLTypes["vectric_subscription_contract_status_mutation_response"],
	/** delete single row from the table: "vectric.subscription_contract_status" */
	delete_vectric_subscription_contract_status_by_pk?: GraphQLTypes["vectric_subscription_contract_status"],
	/** delete data from the table: "vectric.subscription_contracts" */
	delete_vectric_subscription_contracts?: GraphQLTypes["vectric_subscription_contracts_mutation_response"],
	/** delete single row from the table: "vectric.subscription_contracts" */
	delete_vectric_subscription_contracts_by_pk?: GraphQLTypes["vectric_subscription_contracts"],
	/** delete data from the table: "vectric.subscription_events" */
	delete_vectric_subscription_events?: GraphQLTypes["vectric_subscription_events_mutation_response"],
	/** delete single row from the table: "vectric.subscription_events" */
	delete_vectric_subscription_events_by_pk?: GraphQLTypes["vectric_subscription_events"],
	/** delete data from the table: "vectric.upgrade_tokens" */
	delete_vectric_upgrade_tokens?: GraphQLTypes["vectric_upgrade_tokens_mutation_response"],
	/** delete single row from the table: "vectric.upgrade_tokens" */
	delete_vectric_upgrade_tokens_by_pk?: GraphQLTypes["vectric_upgrade_tokens"],
	/** delete data from the table: "vectric.version_code" */
	delete_vectric_version_code?: GraphQLTypes["vectric_version_code_mutation_response"],
	/** delete single row from the table: "vectric.version_code" */
	delete_vectric_version_code_by_pk?: GraphQLTypes["vectric_version_code"],
	forgotPassword?: GraphQLTypes["ForgotPassword"],
	/** insert data into the table: "vectric.allocation_summary" */
	insertAllocationSummaries?: GraphQLTypes["vectric_allocation_summary_mutation_response"],
	/** insert a single row into the table: "vectric.owned_item_assignments" */
	insertAssignment?: GraphQLTypes["vectric_owned_item_assignments"],
	/** insert data into the table: "vectric.owned_item_assignments" */
	insertAssignments?: GraphQLTypes["vectric_owned_item_assignments_mutation_response"],
	/** insert data into the table: "vectric.countries" */
	insertCountries?: GraphQLTypes["vectric_countries_mutation_response"],
	/** insert a single row into the table: "vectric.customer_area" */
	insertCustomerArea?: GraphQLTypes["vectric_customer_area"],
	/** insert a single row into the table: "vectric.customer_area_file" */
	insertCustomerAreaFile?: GraphQLTypes["vectric_customer_area_file"],
	/** insert data into the table: "vectric.customer_area_file" */
	insertCustomerAreaFiles?: GraphQLTypes["vectric_customer_area_file_mutation_response"],
	/** insert data into the table: "vectric.customer_area" */
	insertCustomerAreas?: GraphQLTypes["vectric_customer_area_mutation_response"],
	/** insert data into the table: "vectric.sales_customer_downloads" */
	insertCustomerDownloads?: GraphQLTypes["vectric_sales_customer_downloads_mutation_response"],
	/** insert data into the table: "vectric.customer_responses" */
	insertCustomerResponses?: GraphQLTypes["vectric_customer_responses_mutation_response"],
	/** insert a single row into the table: "vectric.download" */
	insertDownload?: GraphQLTypes["vectric_download"],
	/** insert a single row into the table: "vectric.download_record" */
	insertDownloadRecord?: GraphQLTypes["vectric_download_record"],
	/** insert a single row into the table: "vectric.sales_velocitytemplate" */
	insertEmailTemplate?: GraphQLTypes["vectric_sales_velocitytemplate"],
	/** insert data into the table: "vectric.sales_velocitytemplate" */
	insertEmailTemplates?: GraphQLTypes["vectric_sales_velocitytemplate_mutation_response"],
	/** insert a single row into the table: "vectric.enhancement_tokens" */
	insertEnhancementToken?: GraphQLTypes["vectric_enhancement_tokens"],
	/** insert data into the table: "vectric.enhancement_tokens" */
	insertEnhancementTokens?: GraphQLTypes["vectric_enhancement_tokens_mutation_response"],
	/** insert a single row into the table: "vectric.entitled_products" */
	insertEntitledProduct?: GraphQLTypes["vectric_entitled_products"],
	/** insert data into the table: "vectric.entitled_products" */
	insertEntitledProducts?: GraphQLTypes["vectric_entitled_products_mutation_response"],
	/** insert a single row into the table: "vectric.entitlements" */
	insertEntitlement?: GraphQLTypes["vectric_entitlements"],
	/** insert a single row into the table: "vectric.entitlement_licences" */
	insertEntitlementLicence?: GraphQLTypes["vectric_entitlement_licences"],
	/** insert data into the table: "vectric.entitlement_licences" */
	insertEntitlementLicences?: GraphQLTypes["vectric_entitlement_licences_mutation_response"],
	/** insert data into the table: "vectric.entitlements" */
	insertEntitlements?: GraphQLTypes["vectric_entitlements_mutation_response"],
	/** insert data into the table: "vectric.oem_eval_request" */
	insertEvalRequests?: GraphQLTypes["vectric_oem_eval_request_mutation_response"],
	/** insert a single row into the table: "vectric.freeclipart_download_record" */
	insertFreeClipartDownloadRecord?: GraphQLTypes["vectric_freeclipart_download_record"],
	/** insert data into the table: "vectric.freeclipart_download_record" */
	insertFreeClipartDownloadRecords?: GraphQLTypes["vectric_freeclipart_download_record_mutation_response"],
	/** insert a single row into the table: "vectric.free_clipart_tokens" */
	insertFreeClipartToken?: GraphQLTypes["vectric_free_clipart_tokens"],
	/** insert data into the table: "vectric.free_clipart_tokens" */
	insertFreeClipartTokens?: GraphQLTypes["vectric_free_clipart_tokens_mutation_response"],
	/** insert a single row into the table: "vectric.organization_licence_scope" */
	insertLicenceScope?: GraphQLTypes["vectric_organization_licence_scope"],
	/** insert data into the table: "vectric.organization_licence_scope" */
	insertLicenceScopes?: GraphQLTypes["vectric_organization_licence_scope_mutation_response"],
	/** insert a single row into the table: "vectric.makerspace_requests" */
	insertMakerspaceRequest?: GraphQLTypes["vectric_makerspace_requests"],
	/** insert data into the table: "vectric.membership_invitations" */
	insertMembershipInvitations?: GraphQLTypes["vectric_membership_invitations_mutation_response"],
	/** insert data into the table: "vectric.memberships" */
	insertMemberships?: GraphQLTypes["vectric_memberships_mutation_response"],
	/** insert data into the table: "vectric.oem_allocation_emails" */
	insertOemAllocationEmails?: GraphQLTypes["vectric_oem_allocation_emails_mutation_response"],
	/** insert data into the table: "vectric.oem_partners" */
	insertOemPartner?: GraphQLTypes["vectric_oem_partners_mutation_response"],
	/** insert data into the table: "vectric.oem_staff_customer" */
	insertOemStaffCustomers?: GraphQLTypes["vectric_oem_staff_customer_mutation_response"],
	/** insert a single row into the table: "vectric.allocation_summary" */
	insertOneAllocationSummary?: GraphQLTypes["vectric_allocation_summary"],
	/** insert a single row into the table: "vectric.countries" */
	insertOneCountry?: GraphQLTypes["vectric_countries"],
	/** insert a single row into the table: "vectric.sales_customer_downloads" */
	insertOneCustomerDownload?: GraphQLTypes["vectric_sales_customer_downloads"],
	/** insert a single row into the table: "vectric.customer_responses" */
	insertOneCustomerResponse?: GraphQLTypes["vectric_customer_responses"],
	/** insert a single row into the table: "vectric.oem_eval_request" */
	insertOneEvalRequest?: GraphQLTypes["vectric_oem_eval_request"],
	/** insert a single row into the table: "vectric.memberships" */
	insertOneMembership?: GraphQLTypes["vectric_memberships"],
	/** insert a single row into the table: "vectric.membership_invitations" */
	insertOneMembershipInvitation?: GraphQLTypes["vectric_membership_invitations"],
	/** insert a single row into the table: "vectric.oem_allocation_emails" */
	insertOneOemAllocationEmail?: GraphQLTypes["vectric_oem_allocation_emails"],
	/** insert a single row into the table: "vectric.oem_partners" */
	insertOneOemPartner?: GraphQLTypes["vectric_oem_partners"],
	/** insert a single row into the table: "vectric.oem_staff_customer" */
	insertOneOemStaffCustomer?: GraphQLTypes["vectric_oem_staff_customer"],
	/** insert a single row into the table: "vectric.sales_orders" */
	insertOneOrder?: GraphQLTypes["vectric_sales_orders"],
	/** insert a single row into the table: "vectric.organization_audit" */
	insertOneOrganizationAudit?: GraphQLTypes["vectric_organization_audit"],
	/** insert a single row into the table: "vectric.owned_items" */
	insertOneOwnedItem?: GraphQLTypes["vectric_owned_items"],
	/** insert a single row into the table: "vectric.security_passwordresettokens" */
	insertOnePasswordResetToken?: GraphQLTypes["vectric_security_passwordresettokens"],
	/** insert a single row into the table: "vectric.products_products" */
	insertOneProduct?: GraphQLTypes["vectric_products_products"],
	/** insert a single row into the table: "vectric.products_producttype" */
	insertOneProductType?: GraphQLTypes["vectric_products_producttype"],
	/** insert a single row into the table: "vectric.products_upgrade_eligibility" */
	insertOneProductUpgradeEligibility?: GraphQLTypes["vectric_products_upgrade_eligibility"],
	/** insert a single row into the table: "vectric.oem_purchase_options" */
	insertOnePurchaseOption?: GraphQLTypes["vectric_oem_purchase_options"],
	/** insert a single row into the table: "vectric.questions" */
	insertOneQuestion?: GraphQLTypes["vectric_questions"],
	/** insert a single row into the table: "vectric.responses" */
	insertOneResponse?: GraphQLTypes["vectric_responses"],
	/** insert a single row into the table: "vectric.sales_salesitems" */
	insertOneSalesItem?: GraphQLTypes["vectric_sales_salesitems"],
	/** insert a single row into the table: "vectric.sales_salesitem_products" */
	insertOneSalesItemProduct?: GraphQLTypes["vectric_sales_salesitem_products"],
	/** insert a single row into the table: "vectric.sales_oem_bundles" */
	insertOneSalesOemBundle?: GraphQLTypes["vectric_sales_oem_bundles"],
	/** insert a single row into the table: "vectric.site_options" */
	insertOneSiteOption?: GraphQLTypes["vectric_site_options"],
	/** insert a single row into the table: "vectric.site_option_location" */
	insertOneSiteOptionLocation?: GraphQLTypes["vectric_site_option_location"],
	/** insert a single row into the table: "vectric.trial_order" */
	insertOneTrialOrder?: GraphQLTypes["vectric_trial_order"],
	/** insert a single row into the table: "vectric.update_requests" */
	insertOneUpdateRequest?: GraphQLTypes["vectric_update_requests"],
	/** insert a single row into the table: "vectric.upgrades_feature" */
	insertOneUpgradeFeature?: GraphQLTypes["vectric_upgrades_feature"],
	/** insert a single row into the table: "vectric.upgrades_product_type_feature" */
	insertOneUpgradeProductTypeFeatureById?: GraphQLTypes["vectric_upgrades_product_type_feature"],
	/** insert a single row into the table: "vectric.upgrades_version_feature" */
	insertOneUpgradeVersionFeatureById?: GraphQLTypes["vectric_upgrades_version_feature"],
	/** insert a single row into the table: "vectric.usergroup_2019_attendees" */
	insertOneUserGroupAttendee?: GraphQLTypes["vectric_usergroup_2019_attendees"],
	/** insert a single row into the table: "vectric.usergroup_2019_waitlist" */
	insertOneUserGroupWaitingListEntry?: GraphQLTypes["vectric_usergroup_2019_waitlist"],
	/** insert a single row into the table: "vectric.products_versioncodes" */
	insertOneVersionCode?: GraphQLTypes["vectric_products_versioncodes"],
	/** insert a single row into the table: "vectric.customer_zd_uploads" */
	insertOneZendeskUpload?: GraphQLTypes["vectric_customer_zd_uploads"],
	/** insert data into the table: "vectric.sales_orders" */
	insertOrders?: GraphQLTypes["vectric_sales_orders_mutation_response"],
	/** insert a single row into the table: "vectric.organizations" */
	insertOrganization?: GraphQLTypes["vectric_organizations"],
	/** insert data into the table: "vectric.organization_audit" */
	insertOrganizationAudits?: GraphQLTypes["vectric_organization_audit_mutation_response"],
	/** insert a single row into the table: "vectric.organization_orders" */
	insertOrganizationOrder?: GraphQLTypes["vectric_organization_orders"],
	/** insert a single row into the table: "vectric.organization_order_items" */
	insertOrganizationOrderItem?: GraphQLTypes["vectric_organization_order_items"],
	/** insert data into the table: "vectric.organization_order_items" */
	insertOrganizationOrderItems?: GraphQLTypes["vectric_organization_order_items_mutation_response"],
	/** insert data into the table: "vectric.organization_orders" */
	insertOrganizationOrders?: GraphQLTypes["vectric_organization_orders_mutation_response"],
	/** insert data into the table: "vectric.organizations" */
	insertOrganizations?: GraphQLTypes["vectric_organizations_mutation_response"],
	/** insert data into the table: "vectric.owned_items" */
	insertOwnedItem?: GraphQLTypes["vectric_owned_items_mutation_response"],
	/** insert a single row into the table: "vectric.owned_products" */
	insertOwnedProduct?: GraphQLTypes["vectric_owned_products"],
	/** insert data into the table: "vectric.owned_products" */
	insertOwnedProducts?: GraphQLTypes["vectric_owned_products_mutation_response"],
	/** insert data into the table: "vectric.security_passwordresettokens" */
	insertPasswordResetTokens?: GraphQLTypes["vectric_security_passwordresettokens_mutation_response"],
	/** insert data into the table: "vectric.products_producttype" */
	insertProductTypes?: GraphQLTypes["vectric_products_producttype_mutation_response"],
	/** insert data into the table: "vectric.products_products" */
	insertProducts?: GraphQLTypes["vectric_products_products_mutation_response"],
	/** insert data into the table: "vectric.products_upgrade_eligibility" */
	insertProductsUpgradeEligibility?: GraphQLTypes["vectric_products_upgrade_eligibility_mutation_response"],
	/** insert data into the table: "vectric.oem_purchase_options" */
	insertPurchaseOptions?: GraphQLTypes["vectric_oem_purchase_options_mutation_response"],
	/** insert data into the table: "vectric.questions" */
	insertQuestions?: GraphQLTypes["vectric_questions_mutation_response"],
	/** insert data into the table: "vectric.responses" */
	insertResponses?: GraphQLTypes["vectric_responses_mutation_response"],
	/** insert a single row into the table: "vectric.saleable_products" */
	insertSaleableProduct?: GraphQLTypes["vectric_saleable_products"],
	/** insert data into the table: "vectric.saleable_products" */
	insertSaleableProducts?: GraphQLTypes["vectric_saleable_products_mutation_response"],
	/** insert a single row into the table: "vectric.sales_customers" */
	insertSalesCustomer?: GraphQLTypes["vectric_sales_customers"],
	/** insert data into the table: "vectric.sales_customers" */
	insertSalesCustomers?: GraphQLTypes["vectric_sales_customers_mutation_response"],
	/** insert data into the table: "vectric.sales_salesitem_products" */
	insertSalesItemProducts?: GraphQLTypes["vectric_sales_salesitem_products_mutation_response"],
	/** insert data into the table: "vectric.sales_salesitems" */
	insertSalesItems?: GraphQLTypes["vectric_sales_salesitems_mutation_response"],
	/** insert data into the table: "vectric.sales_oem_bundles" */
	insertSalesOemBundle?: GraphQLTypes["vectric_sales_oem_bundles_mutation_response"],
	/** insert a single row into the table: "vectric.scheduled_emails" */
	insertScheduledEmail?: GraphQLTypes["vectric_scheduled_emails"],
	/** insert data into the table: "vectric.scheduled_emails" */
	insertScheduledEmails?: GraphQLTypes["vectric_scheduled_emails_mutation_response"],
	/** insert a single row into the table: "vectric.security_emailverificationtokens" */
	insertSecurityEmailVerificationToken?: GraphQLTypes["vectric_security_emailverificationtokens"],
	/** insert a single row into the table: "vectric.security_group_members" */
	insertSecurityGroupMember?: GraphQLTypes["vectric_security_group_members"],
	/** insert data into the table: "vectric.security_group_members" */
	insertSecurityGroupMembers?: GraphQLTypes["vectric_security_group_members_mutation_response"],
	/** insert a single row into the table: "vectric.security_users" */
	insertSecurityUser?: GraphQLTypes["vectric_security_users"],
	/** insert a single row into the table: "vectric.security_userinvitations" */
	insertSecurityUserInvitation?: GraphQLTypes["vectric_security_userinvitations"],
	/** insert data into the table: "vectric.security_userinvitations" */
	insertSecurityUserInvitations?: GraphQLTypes["vectric_security_userinvitations_mutation_response"],
	/** insert data into the table: "vectric.security_users" */
	insertSecurityUsers?: GraphQLTypes["vectric_security_users_mutation_response"],
	/** insert data into the table: "vectric.linkshortener_links" */
	insertShortLink?: GraphQLTypes["vectric_linkshortener_links_mutation_response"],
	/** insert a single row into the table: "vectric.linkshortener_links" */
	insertShortLinkOne?: GraphQLTypes["vectric_linkshortener_links"],
	/** insert data into the table: "vectric.site_option_location" */
	insertSiteOptionLocations?: GraphQLTypes["vectric_site_option_location_mutation_response"],
	/** insert data into the table: "vectric.site_options" */
	insertSiteOptions?: GraphQLTypes["vectric_site_options_mutation_response"],
	/** insert a single row into the table: "vectric.toolpath_saver_token" */
	insertToolpathSaverToken?: GraphQLTypes["vectric_toolpath_saver_token"],
	/** insert data into the table: "vectric.toolpath_saver_token" */
	insertToolpathSaverTokens?: GraphQLTypes["vectric_toolpath_saver_token_mutation_response"],
	/** insert data into the table: "vectric.trial_order" */
	insertTrialOrders?: GraphQLTypes["vectric_trial_order_mutation_response"],
	/** insert data into the table: "vectric.update_requests" */
	insertUpdateRequests?: GraphQLTypes["vectric_update_requests_mutation_response"],
	/** insert data into the table: "vectric.upgrades_feature" */
	insertUpgradeFeatures?: GraphQLTypes["vectric_upgrades_feature_mutation_response"],
	/** insert data into the table: "vectric.upgrades_product_type_feature" */
	insertUpgradeProductTypeFeatures?: GraphQLTypes["vectric_upgrades_product_type_feature_mutation_response"],
	/** insert a single row into the table: "vectric.upgrade_tokens" */
	insertUpgradeToken?: GraphQLTypes["vectric_upgrade_tokens"],
	/** insert data into the table: "vectric.upgrade_tokens" */
	insertUpgradeTokens?: GraphQLTypes["vectric_upgrade_tokens_mutation_response"],
	/** insert data into the table: "vectric.upgrades_version_feature" */
	insertUpgradeVersionFeatures?: GraphQLTypes["vectric_upgrades_version_feature_mutation_response"],
	/** insert data into the table: "vectric.usergroup_2019_attendees" */
	insertUserGroupAttendees?: GraphQLTypes["vectric_usergroup_2019_attendees_mutation_response"],
	/** insert data into the table: "vectric.usergroup_2019_waitlist" */
	insertUserGroupWaitingListEntries?: GraphQLTypes["vectric_usergroup_2019_waitlist_mutation_response"],
	/** insert data into the table: "vectric.products_versioncodes" */
	insertVersionCode?: GraphQLTypes["vectric_products_versioncodes_mutation_response"],
	/** insert data into the table: "vectric.customer_zd_uploads" */
	insertZendeskUploads?: GraphQLTypes["vectric_customer_zd_uploads_mutation_response"],
	/** insert data into the table: "vectric.allocatable_bundles" */
	insert_vectric_allocatable_bundles?: GraphQLTypes["vectric_allocatable_bundles_mutation_response"],
	/** insert a single row into the table: "vectric.allocatable_bundles" */
	insert_vectric_allocatable_bundles_one?: GraphQLTypes["vectric_allocatable_bundles"],
	/** insert data into the table: "vectric.allocated_bundles" */
	insert_vectric_allocated_bundles?: GraphQLTypes["vectric_allocated_bundles_mutation_response"],
	/** insert a single row into the table: "vectric.allocated_bundles" */
	insert_vectric_allocated_bundles_one?: GraphQLTypes["vectric_allocated_bundles"],
	/** insert data into the table: "vectric.allocation_summary_file_type" */
	insert_vectric_allocation_summary_file_type?: GraphQLTypes["vectric_allocation_summary_file_type_mutation_response"],
	/** insert a single row into the table: "vectric.allocation_summary_file_type" */
	insert_vectric_allocation_summary_file_type_one?: GraphQLTypes["vectric_allocation_summary_file_type"],
	/** insert data into the table: "vectric.continents" */
	insert_vectric_continents?: GraphQLTypes["vectric_continents_mutation_response"],
	/** insert a single row into the table: "vectric.continents" */
	insert_vectric_continents_one?: GraphQLTypes["vectric_continents"],
	/** insert data into the table: "vectric.customer_sales" */
	insert_vectric_customer_sales?: GraphQLTypes["vectric_customer_sales_mutation_response"],
	/** insert a single row into the table: "vectric.customer_sales" */
	insert_vectric_customer_sales_one?: GraphQLTypes["vectric_customer_sales"],
	/** insert data into the table: "vectric.customer_status" */
	insert_vectric_customer_status?: GraphQLTypes["vectric_customer_status_mutation_response"],
	/** insert a single row into the table: "vectric.customer_status" */
	insert_vectric_customer_status_one?: GraphQLTypes["vectric_customer_status"],
	/** insert data into the table: "vectric.download" */
	insert_vectric_download?: GraphQLTypes["vectric_download_mutation_response"],
	/** insert data into the table: "vectric.download_record" */
	insert_vectric_download_record?: GraphQLTypes["vectric_download_record_mutation_response"],
	/** insert data into the table: "vectric.freeclipart" */
	insert_vectric_freeclipart?: GraphQLTypes["vectric_freeclipart_mutation_response"],
	/** insert data into the table: "vectric.freeclipart_category" */
	insert_vectric_freeclipart_category?: GraphQLTypes["vectric_freeclipart_category_mutation_response"],
	/** insert a single row into the table: "vectric.freeclipart_category" */
	insert_vectric_freeclipart_category_one?: GraphQLTypes["vectric_freeclipart_category"],
	/** insert a single row into the table: "vectric.freeclipart" */
	insert_vectric_freeclipart_one?: GraphQLTypes["vectric_freeclipart"],
	/** insert data into the table: "vectric.group_roles" */
	insert_vectric_group_roles?: GraphQLTypes["vectric_group_roles_mutation_response"],
	/** insert a single row into the table: "vectric.group_roles" */
	insert_vectric_group_roles_one?: GraphQLTypes["vectric_group_roles"],
	/** insert data into the table: "vectric.group_user_role" */
	insert_vectric_group_user_role?: GraphQLTypes["vectric_group_user_role_mutation_response"],
	/** insert a single row into the table: "vectric.group_user_role" */
	insert_vectric_group_user_role_one?: GraphQLTypes["vectric_group_user_role"],
	/** insert data into the table: "vectric.groups" */
	insert_vectric_groups?: GraphQLTypes["vectric_groups_mutation_response"],
	/** insert a single row into the table: "vectric.groups" */
	insert_vectric_groups_one?: GraphQLTypes["vectric_groups"],
	/** insert data into the table: "vectric.language_codes" */
	insert_vectric_language_codes?: GraphQLTypes["vectric_language_codes_mutation_response"],
	/** insert a single row into the table: "vectric.language_codes" */
	insert_vectric_language_codes_one?: GraphQLTypes["vectric_language_codes"],
	/** insert data into the table: "vectric.licence_log" */
	insert_vectric_licence_log?: GraphQLTypes["vectric_licence_log_mutation_response"],
	/** insert a single row into the table: "vectric.licence_log" */
	insert_vectric_licence_log_one?: GraphQLTypes["vectric_licence_log"],
	/** insert data into the table: "vectric.makerspace_requests" */
	insert_vectric_makerspace_requests?: GraphQLTypes["vectric_makerspace_requests_mutation_response"],
	/** insert data into the table: "vectric.membership_invitation_status" */
	insert_vectric_membership_invitation_status?: GraphQLTypes["vectric_membership_invitation_status_mutation_response"],
	/** insert a single row into the table: "vectric.membership_invitation_status" */
	insert_vectric_membership_invitation_status_one?: GraphQLTypes["vectric_membership_invitation_status"],
	/** insert data into the table: "vectric.membership_roles" */
	insert_vectric_membership_roles?: GraphQLTypes["vectric_membership_roles_mutation_response"],
	/** insert a single row into the table: "vectric.membership_roles" */
	insert_vectric_membership_roles_one?: GraphQLTypes["vectric_membership_roles"],
	/** insert data into the table: "vectric.membership_status" */
	insert_vectric_membership_status?: GraphQLTypes["vectric_membership_status_mutation_response"],
	/** insert a single row into the table: "vectric.membership_status" */
	insert_vectric_membership_status_one?: GraphQLTypes["vectric_membership_status"],
	/** insert data into the table: "vectric.oauth_client_details" */
	insert_vectric_oauth_client_details?: GraphQLTypes["vectric_oauth_client_details_mutation_response"],
	/** insert a single row into the table: "vectric.oauth_client_details" */
	insert_vectric_oauth_client_details_one?: GraphQLTypes["vectric_oauth_client_details"],
	/** insert data into the table: "vectric.oem_detailed_products" */
	insert_vectric_oem_detailed_products?: GraphQLTypes["vectric_oem_detailed_products_mutation_response"],
	/** insert a single row into the table: "vectric.oem_detailed_products" */
	insert_vectric_oem_detailed_products_one?: GraphQLTypes["vectric_oem_detailed_products"],
	/** insert data into the table: "vectric.oem_fastspring_item" */
	insert_vectric_oem_fastspring_item?: GraphQLTypes["vectric_oem_fastspring_item_mutation_response"],
	/** insert data into the table: "vectric.oem_fastspring_item_bundle" */
	insert_vectric_oem_fastspring_item_bundle?: GraphQLTypes["vectric_oem_fastspring_item_bundle_mutation_response"],
	/** insert a single row into the table: "vectric.oem_fastspring_item_bundle" */
	insert_vectric_oem_fastspring_item_bundle_one?: GraphQLTypes["vectric_oem_fastspring_item_bundle"],
	/** insert a single row into the table: "vectric.oem_fastspring_item" */
	insert_vectric_oem_fastspring_item_one?: GraphQLTypes["vectric_oem_fastspring_item"],
	/** insert data into the table: "vectric.oem_fastspring_order" */
	insert_vectric_oem_fastspring_order?: GraphQLTypes["vectric_oem_fastspring_order_mutation_response"],
	/** insert a single row into the table: "vectric.oem_fastspring_order" */
	insert_vectric_oem_fastspring_order_one?: GraphQLTypes["vectric_oem_fastspring_order"],
	/** insert data into the table: "vectric.oem_invite_status" */
	insert_vectric_oem_invite_status?: GraphQLTypes["vectric_oem_invite_status_mutation_response"],
	/** insert a single row into the table: "vectric.oem_invite_status" */
	insert_vectric_oem_invite_status_one?: GraphQLTypes["vectric_oem_invite_status"],
	/** insert data into the table: "vectric.oem_licence_allocation_type" */
	insert_vectric_oem_licence_allocation_type?: GraphQLTypes["vectric_oem_licence_allocation_type_mutation_response"],
	/** insert a single row into the table: "vectric.oem_licence_allocation_type" */
	insert_vectric_oem_licence_allocation_type_one?: GraphQLTypes["vectric_oem_licence_allocation_type"],
	/** insert data into the table: "vectric.oem_products" */
	insert_vectric_oem_products?: GraphQLTypes["vectric_oem_products_mutation_response"],
	/** insert a single row into the table: "vectric.oem_products" */
	insert_vectric_oem_products_one?: GraphQLTypes["vectric_oem_products"],
	/** insert data into the table: "vectric.organization_types" */
	insert_vectric_organization_types?: GraphQLTypes["vectric_organization_types_mutation_response"],
	/** insert a single row into the table: "vectric.organization_types" */
	insert_vectric_organization_types_one?: GraphQLTypes["vectric_organization_types"],
	/** insert data into the table: "vectric.products_clipartcollection_links" */
	insert_vectric_products_clipartcollection_links?: GraphQLTypes["vectric_products_clipartcollection_links_mutation_response"],
	/** insert a single row into the table: "vectric.products_clipartcollection_links" */
	insert_vectric_products_clipartcollection_links_one?: GraphQLTypes["vectric_products_clipartcollection_links"],
	/** insert data into the table: "vectric.products_enhancement_eligibility" */
	insert_vectric_products_enhancement_eligibility?: GraphQLTypes["vectric_products_enhancement_eligibility_mutation_response"],
	/** insert a single row into the table: "vectric.products_enhancement_eligibility" */
	insert_vectric_products_enhancement_eligibility_one?: GraphQLTypes["vectric_products_enhancement_eligibility"],
	/** insert data into the table: "vectric.products_freeclipart" */
	insert_vectric_products_freeclipart?: GraphQLTypes["vectric_products_freeclipart_mutation_response"],
	/** insert a single row into the table: "vectric.products_freeclipart" */
	insert_vectric_products_freeclipart_one?: GraphQLTypes["vectric_products_freeclipart"],
	/** insert data into the table: "vectric.products_fulfilments" */
	insert_vectric_products_fulfilments?: GraphQLTypes["vectric_products_fulfilments_mutation_response"],
	/** insert a single row into the table: "vectric.products_fulfilments" */
	insert_vectric_products_fulfilments_one?: GraphQLTypes["vectric_products_fulfilments"],
	/** insert data into the table: "vectric.products_fulfilmenttypes" */
	insert_vectric_products_fulfilmenttypes?: GraphQLTypes["vectric_products_fulfilmenttypes_mutation_response"],
	/** insert a single row into the table: "vectric.products_fulfilmenttypes" */
	insert_vectric_products_fulfilmenttypes_one?: GraphQLTypes["vectric_products_fulfilmenttypes"],
	/** insert data into the table: "vectric.products_product_fulfilments" */
	insert_vectric_products_product_fulfilments?: GraphQLTypes["vectric_products_product_fulfilments_mutation_response"],
	/** insert a single row into the table: "vectric.products_product_fulfilments" */
	insert_vectric_products_product_fulfilments_one?: GraphQLTypes["vectric_products_product_fulfilments"],
	/** insert data into the table: "vectric.products_product_licence_type" */
	insert_vectric_products_product_licence_type?: GraphQLTypes["vectric_products_product_licence_type_mutation_response"],
	/** insert a single row into the table: "vectric.products_product_licence_type" */
	insert_vectric_products_product_licence_type_one?: GraphQLTypes["vectric_products_product_licence_type"],
	/** insert data into the table: "vectric.sales_customerupdates" */
	insert_vectric_sales_customerupdates?: GraphQLTypes["vectric_sales_customerupdates_mutation_response"],
	/** insert a single row into the table: "vectric.sales_customerupdates" */
	insert_vectric_sales_customerupdates_one?: GraphQLTypes["vectric_sales_customerupdates"],
	/** insert data into the table: "vectric.sales_oemlicences" */
	insert_vectric_sales_oemlicences?: GraphQLTypes["vectric_sales_oemlicences_mutation_response"],
	/** insert a single row into the table: "vectric.sales_oemlicences" */
	insert_vectric_sales_oemlicences_one?: GraphQLTypes["vectric_sales_oemlicences"],
	/** insert data into the table: "vectric.sales_salesitemproduct_status" */
	insert_vectric_sales_salesitemproduct_status?: GraphQLTypes["vectric_sales_salesitemproduct_status_mutation_response"],
	/** insert a single row into the table: "vectric.sales_salesitemproduct_status" */
	insert_vectric_sales_salesitemproduct_status_one?: GraphQLTypes["vectric_sales_salesitemproduct_status"],
	/** insert data into the table: "vectric.security_group_authorities" */
	insert_vectric_security_group_authorities?: GraphQLTypes["vectric_security_group_authorities_mutation_response"],
	/** insert a single row into the table: "vectric.security_group_authorities" */
	insert_vectric_security_group_authorities_one?: GraphQLTypes["vectric_security_group_authorities"],
	/** insert data into the table: "vectric.subscription_contract_status" */
	insert_vectric_subscription_contract_status?: GraphQLTypes["vectric_subscription_contract_status_mutation_response"],
	/** insert a single row into the table: "vectric.subscription_contract_status" */
	insert_vectric_subscription_contract_status_one?: GraphQLTypes["vectric_subscription_contract_status"],
	/** insert data into the table: "vectric.subscription_contracts" */
	insert_vectric_subscription_contracts?: GraphQLTypes["vectric_subscription_contracts_mutation_response"],
	/** insert a single row into the table: "vectric.subscription_contracts" */
	insert_vectric_subscription_contracts_one?: GraphQLTypes["vectric_subscription_contracts"],
	/** insert data into the table: "vectric.subscription_events" */
	insert_vectric_subscription_events?: GraphQLTypes["vectric_subscription_events_mutation_response"],
	/** insert a single row into the table: "vectric.subscription_events" */
	insert_vectric_subscription_events_one?: GraphQLTypes["vectric_subscription_events"],
	/** insert data into the table: "vectric.version_code" */
	insert_vectric_version_code?: GraphQLTypes["vectric_version_code_mutation_response"],
	/** insert a single row into the table: "vectric.version_code" */
	insert_vectric_version_code_one?: GraphQLTypes["vectric_version_code"],
	oemSecureFsRequest?: GraphQLTypes["OemFastspringSecureRequestOutput"],
	organizationAddNewMember?: GraphQLTypes["OrganizationAddNewMemberOutput"],
	organizationEditMember?: GraphQLTypes["OrganizationEditMemberOutput"],
	passwordReset?: GraphQLTypes["PasswordResetOutput"],
	processOemStaffInvitation?: GraphQLTypes["ProcessOemStaffInvitationOutput"],
	registerInvite?: GraphQLTypes["RegisterInvite"],
	removeMembership?: GraphQLTypes["RemoveMembershipOutput"],
	removeMembershipInvitation?: GraphQLTypes["RemoveMembershipInvitationOutput"],
	removePartnerMember?: GraphQLTypes["RemovePartnerMemberOutput"],
	secureFSItems?: GraphQLTypes["SecureFSItemsOutput"],
	sendEmailVerification?: GraphQLTypes["SendEmailVerificationOutput"],
	sendLicenceAllocationEmail?: GraphQLTypes["SendLicenceAllocationEmailResponse"],
	signUp?: GraphQLTypes["SignUpOutput"],
	transferOrderItemProduct?: GraphQLTypes["SampleOutput"],
	unassignItem?: GraphQLTypes["UnassignItemOutput"],
	/** update data of the table: "vectric.allocation_summary" */
	updateAllocationSummaries?: GraphQLTypes["vectric_allocation_summary_mutation_response"],
	/** update single row of the table: "vectric.allocation_summary" */
	updateAllocationSummaryById?: GraphQLTypes["vectric_allocation_summary"],
	/** update single row of the table: "vectric.owned_item_assignments" */
	updateAssignment?: GraphQLTypes["vectric_owned_item_assignments"],
	/** update data of the table: "vectric.owned_item_assignments" */
	updateAssignments?: GraphQLTypes["vectric_owned_item_assignments_mutation_response"],
	/** update data of the table: "vectric.countries" */
	updateCountries?: GraphQLTypes["vectric_countries_mutation_response"],
	/** update single row of the table: "vectric.countries" */
	updateCountryById?: GraphQLTypes["vectric_countries"],
	/** update data of the table: "vectric.sales_customers" */
	updateCustomer?: GraphQLTypes["vectric_sales_customers_mutation_response"],
	/** update single row of the table: "vectric.customer_area_file" */
	updateCustomerAreaFileByPk?: GraphQLTypes["vectric_customer_area_file"],
	/** update single row of the table: "vectric.sales_customers" */
	updateCustomerById?: GraphQLTypes["vectric_sales_customers"],
	/** update single row of the table: "vectric.sales_customer_downloads" */
	updateCustomerDownloadById?: GraphQLTypes["vectric_sales_customer_downloads"],
	/** update data of the table: "vectric.sales_customer_downloads" */
	updateCustomerDownloads?: GraphQLTypes["vectric_sales_customer_downloads_mutation_response"],
	/** update single row of the table: "vectric.customer_responses" */
	updateCustomerResponseById?: GraphQLTypes["vectric_customer_responses"],
	/** update data of the table: "vectric.customer_responses" */
	updateCustomerResponses?: GraphQLTypes["vectric_customer_responses_mutation_response"],
	/** update single row of the table: "vectric.sales_velocitytemplate" */
	updateEmailTemplate?: GraphQLTypes["vectric_sales_velocitytemplate"],
	/** update data of the table: "vectric.sales_velocitytemplate" */
	updateEmailTemplates?: GraphQLTypes["vectric_sales_velocitytemplate_mutation_response"],
	/** update single row of the table: "vectric.entitled_products" */
	updateEntitleProduct?: GraphQLTypes["vectric_entitled_products"],
	/** update data of the table: "vectric.entitled_products" */
	updateEntitledProducts?: GraphQLTypes["vectric_entitled_products_mutation_response"],
	/** update single row of the table: "vectric.entitlements" */
	updateEntitlement?: GraphQLTypes["vectric_entitlements"],
	/** update single row of the table: "vectric.entitlement_licences" */
	updateEntitlementLicence?: GraphQLTypes["vectric_entitlement_licences"],
	/** update data of the table: "vectric.entitlement_licences" */
	updateEntitlementLicences?: GraphQLTypes["vectric_entitlement_licences_mutation_response"],
	/** update data of the table: "vectric.entitlements" */
	updateEntitlements?: GraphQLTypes["vectric_entitlements_mutation_response"],
	/** update data of the table: "vectric.oem_eval_request" */
	updateEvalRequest?: GraphQLTypes["vectric_oem_eval_request_mutation_response"],
	/** update single row of the table: "vectric.oem_eval_request" */
	updateEvalRequestById?: GraphQLTypes["vectric_oem_eval_request"],
	/** update single row of the table: "vectric.free_clipart_tokens" */
	updateFreeClipartTokenByPk?: GraphQLTypes["vectric_free_clipart_tokens"],
	/** update single row of the table: "vectric.organization_licence_scope" */
	updateLicenceScope?: GraphQLTypes["vectric_organization_licence_scope"],
	/** update data of the table: "vectric.organization_licence_scope" */
	updateLicenceScopes?: GraphQLTypes["vectric_organization_licence_scope_mutation_response"],
	/** update single row of the table: "vectric.memberships" */
	updateMembershipById?: GraphQLTypes["vectric_memberships"],
	/** update single row of the table: "vectric.membership_invitations" */
	updateMembershipInvitationById?: GraphQLTypes["vectric_membership_invitations"],
	/** update data of the table: "vectric.membership_invitations" */
	updateMembershipInvitations?: GraphQLTypes["vectric_membership_invitations_mutation_response"],
	/** update data of the table: "vectric.memberships" */
	updateMemberships?: GraphQLTypes["vectric_memberships_mutation_response"],
	/** update data of the table: "vectric.oem_allocation_emails" */
	updateOemAllocationEmails?: GraphQLTypes["vectric_oem_allocation_emails_mutation_response"],
	/** update data of the table: "vectric.oem_partners" */
	updateOemPartner?: GraphQLTypes["vectric_oem_partners_mutation_response"],
	/** update single row of the table: "vectric.oem_partners" */
	updateOemPartnerById?: GraphQLTypes["vectric_oem_partners"],
	/** update single row of the table: "vectric.oem_staff_customer" */
	updateOemStaffCustomerById?: GraphQLTypes["vectric_oem_staff_customer"],
	/** update data of the table: "vectric.oem_staff_customer" */
	updateOemStaffCustomers?: GraphQLTypes["vectric_oem_staff_customer_mutation_response"],
	/** update data of the table: "vectric.sales_orders" */
	updateOrder?: GraphQLTypes["vectric_sales_orders_mutation_response"],
	/** update single row of the table: "vectric.sales_orders" */
	updateOrderById?: GraphQLTypes["vectric_sales_orders"],
	/** update single row of the table: "vectric.organizations" */
	updateOrganization?: GraphQLTypes["vectric_organizations"],
	/** update single row of the table: "vectric.organization_audit" */
	updateOrganizationAuditById?: GraphQLTypes["vectric_organization_audit"],
	/** update data of the table: "vectric.organization_audit" */
	updateOrganizationAudits?: GraphQLTypes["vectric_organization_audit_mutation_response"],
	/** update single row of the table: "vectric.organization_orders" */
	updateOrganizationOrder?: GraphQLTypes["vectric_organization_orders"],
	/** update single row of the table: "vectric.organization_order_items" */
	updateOrganizationOrderItem?: GraphQLTypes["vectric_organization_order_items"],
	/** update data of the table: "vectric.organization_order_items" */
	updateOrganizationOrderItems?: GraphQLTypes["vectric_organization_order_items_mutation_response"],
	/** update data of the table: "vectric.organization_orders" */
	updateOrganizationOrders?: GraphQLTypes["vectric_organization_orders_mutation_response"],
	/** update data of the table: "vectric.organizations" */
	updateOrganizations?: GraphQLTypes["vectric_organizations_mutation_response"],
	/** update single row of the table: "vectric.owned_items" */
	updateOwnedItem?: GraphQLTypes["vectric_owned_items"],
	/** update data of the table: "vectric.owned_items" */
	updateOwnedItems?: GraphQLTypes["vectric_owned_items_mutation_response"],
	/** update single row of the table: "vectric.owned_products" */
	updateOwnedProduct?: GraphQLTypes["vectric_owned_products"],
	/** update data of the table: "vectric.owned_products" */
	updateOwnedProducts?: GraphQLTypes["vectric_owned_products_mutation_response"],
	/** update single row of the table: "vectric.products_products" */
	updateProductById?: GraphQLTypes["vectric_products_products"],
	/** update single row of the table: "vectric.products_producttype" */
	updateProductTypeById?: GraphQLTypes["vectric_products_producttype"],
	/** update data of the table: "vectric.products_producttype" */
	updateProductTypes?: GraphQLTypes["vectric_products_producttype_mutation_response"],
	/** update single row of the table: "vectric.products_upgrade_eligibility" */
	updateProductUpgradeEligibility?: GraphQLTypes["vectric_products_upgrade_eligibility"],
	/** update data of the table: "vectric.products_products" */
	updateProducts?: GraphQLTypes["vectric_products_products_mutation_response"],
	/** update data of the table: "vectric.products_upgrade_eligibility" */
	updateProductsUpgradeEligibility?: GraphQLTypes["vectric_products_upgrade_eligibility_mutation_response"],
	/** update single row of the table: "vectric.oem_purchase_options" */
	updatePurchaseOptionByOptionId?: GraphQLTypes["vectric_oem_purchase_options"],
	/** update data of the table: "vectric.oem_purchase_options" */
	updatePurchaseOptions?: GraphQLTypes["vectric_oem_purchase_options_mutation_response"],
	/** update single row of the table: "vectric.questions" */
	updateQuestionById?: GraphQLTypes["vectric_questions"],
	/** update data of the table: "vectric.questions" */
	updateQuestions?: GraphQLTypes["vectric_questions_mutation_response"],
	/** update single row of the table: "vectric.responses" */
	updateResponseById?: GraphQLTypes["vectric_responses"],
	/** update data of the table: "vectric.responses" */
	updateResponses?: GraphQLTypes["vectric_responses_mutation_response"],
	/** update single row of the table: "vectric.saleable_products" */
	updateSaleableProduct?: GraphQLTypes["vectric_saleable_products"],
	/** update data of the table: "vectric.saleable_products" */
	updateSaleableProducts?: GraphQLTypes["vectric_saleable_products_mutation_response"],
	/** update single row of the table: "vectric.sales_salesitems" */
	updateSalesItemById?: GraphQLTypes["vectric_sales_salesitems"],
	/** update data of the table: "vectric.sales_salesitem_products" */
	updateSalesItemProduces?: GraphQLTypes["vectric_sales_salesitem_products_mutation_response"],
	/** update single row of the table: "vectric.sales_salesitem_products" */
	updateSalesItemProductById?: GraphQLTypes["vectric_sales_salesitem_products"],
	/** update data of the table: "vectric.sales_salesitems" */
	updateSalesItems?: GraphQLTypes["vectric_sales_salesitems_mutation_response"],
	/** update data of the table: "vectric.sales_oem_bundles" */
	updateSalesOemBundle?: GraphQLTypes["vectric_sales_oem_bundles_mutation_response"],
	/** update single row of the table: "vectric.sales_oem_bundles" */
	updateSalesOemBundleById?: GraphQLTypes["vectric_sales_oem_bundles"],
	/** update data of the table: "vectric.scheduled_emails" */
	updateScheduledEmails?: GraphQLTypes["vectric_scheduled_emails_mutation_response"],
	/** update single row of the table: "vectric.scheduled_emails" */
	updateScheduledEmailsById?: GraphQLTypes["vectric_scheduled_emails"],
	/** update single row of the table: "vectric.security_users" */
	updateSecurityUserByPk?: GraphQLTypes["vectric_security_users"],
	/** update data of the table: "vectric.security_users" */
	updateSecurityUsers?: GraphQLTypes["vectric_security_users_mutation_response"],
	/** update single row of the table: "vectric.linkshortener_links" */
	updateShortLinkByHash?: GraphQLTypes["vectric_linkshortener_links"],
	/** update data of the table: "vectric.linkshortener_links" */
	updateShortLinks?: GraphQLTypes["vectric_linkshortener_links_mutation_response"],
	/** update single row of the table: "vectric.site_options" */
	updateSiteOptionById?: GraphQLTypes["vectric_site_options"],
	/** update single row of the table: "vectric.site_option_location" */
	updateSiteOptionLocationById?: GraphQLTypes["vectric_site_option_location"],
	/** update data of the table: "vectric.site_option_location" */
	updateSiteOptionLocations?: GraphQLTypes["vectric_site_option_location_mutation_response"],
	/** update data of the table: "vectric.site_options" */
	updateSiteOptions?: GraphQLTypes["vectric_site_options_mutation_response"],
	/** update single row of the table: "vectric.toolpath_saver_token" */
	updateToolpathSaverTokenById?: GraphQLTypes["vectric_toolpath_saver_token"],
	/** update data of the table: "vectric.toolpath_saver_token" */
	updateToolpathSaverTokens?: GraphQLTypes["vectric_toolpath_saver_token_mutation_response"],
	/** update single row of the table: "vectric.trial_order" */
	updateTrialOrderById?: GraphQLTypes["vectric_trial_order"],
	/** update data of the table: "vectric.trial_order" */
	updateTrialOrders?: GraphQLTypes["vectric_trial_order_mutation_response"],
	/** update data of the table: "vectric.update_requests" */
	updateUpdateRequests?: GraphQLTypes["vectric_update_requests_mutation_response"],
	/** update single row of the table: "vectric.upgrades_feature" */
	updateUpgradeFeatureById?: GraphQLTypes["vectric_upgrades_feature"],
	/** update data of the table: "vectric.upgrades_feature" */
	updateUpgradeFeatures?: GraphQLTypes["vectric_upgrades_feature_mutation_response"],
	/** update single row of the table: "vectric.upgrades_product_type_feature" */
	updateUpgradeProductTypeFeatureById?: GraphQLTypes["vectric_upgrades_product_type_feature"],
	/** update data of the table: "vectric.upgrades_product_type_feature" */
	updateUpgradeProductTypeFeatures?: GraphQLTypes["vectric_upgrades_product_type_feature_mutation_response"],
	/** update single row of the table: "vectric.upgrades_version_feature" */
	updateUpgradeVersionFeatureById?: GraphQLTypes["vectric_upgrades_version_feature"],
	/** update data of the table: "vectric.upgrades_version_feature" */
	updateUpgradeVersionFeatures?: GraphQLTypes["vectric_upgrades_version_feature_mutation_response"],
	/** update single row of the table: "vectric.usergroup_2019_attendees" */
	updateUserGroupAttendeeById?: GraphQLTypes["vectric_usergroup_2019_attendees"],
	/** update data of the table: "vectric.usergroup_2019_attendees" */
	updateUserGroupAttendees?: GraphQLTypes["vectric_usergroup_2019_attendees_mutation_response"],
	/** update data of the table: "vectric.usergroup_2019_waitlist" */
	updateUserGroupWaitingListEntries?: GraphQLTypes["vectric_usergroup_2019_waitlist_mutation_response"],
	/** update single row of the table: "vectric.usergroup_2019_waitlist" */
	updateUserGroupWaitingListEntryById?: GraphQLTypes["vectric_usergroup_2019_waitlist"],
	/** update single row of the table: "vectric.security_userinvitations" */
	updateUserInvitationByToken?: GraphQLTypes["vectric_security_userinvitations"],
	/** update single row of the table: "vectric.products_versioncodes" */
	updateVersionCodeById?: GraphQLTypes["vectric_products_versioncodes"],
	/** update data of the table: "vectric.products_versioncodes" */
	updateVersionCodes?: GraphQLTypes["vectric_products_versioncodes_mutation_response"],
	/** update single row of the table: "vectric.customer_zd_uploads" */
	updateZendeskUploadById?: GraphQLTypes["vectric_customer_zd_uploads"],
	/** update data of the table: "vectric.customer_zd_uploads" */
	updateZendeskUploads?: GraphQLTypes["vectric_customer_zd_uploads_mutation_response"],
	/** update data of the table: "vectric.allocatable_bundles" */
	update_vectric_allocatable_bundles?: GraphQLTypes["vectric_allocatable_bundles_mutation_response"],
	/** update data of the table: "vectric.allocated_bundles" */
	update_vectric_allocated_bundles?: GraphQLTypes["vectric_allocated_bundles_mutation_response"],
	/** update data of the table: "vectric.allocation_summary_file_type" */
	update_vectric_allocation_summary_file_type?: GraphQLTypes["vectric_allocation_summary_file_type_mutation_response"],
	/** update single row of the table: "vectric.allocation_summary_file_type" */
	update_vectric_allocation_summary_file_type_by_pk?: GraphQLTypes["vectric_allocation_summary_file_type"],
	/** update data of the table: "vectric.continents" */
	update_vectric_continents?: GraphQLTypes["vectric_continents_mutation_response"],
	/** update single row of the table: "vectric.continents" */
	update_vectric_continents_by_pk?: GraphQLTypes["vectric_continents"],
	/** update data of the table: "vectric.customer_area" */
	update_vectric_customer_area?: GraphQLTypes["vectric_customer_area_mutation_response"],
	/** update single row of the table: "vectric.customer_area" */
	update_vectric_customer_area_by_pk?: GraphQLTypes["vectric_customer_area"],
	/** update data of the table: "vectric.customer_area_file" */
	update_vectric_customer_area_file?: GraphQLTypes["vectric_customer_area_file_mutation_response"],
	/** update data of the table: "vectric.customer_sales" */
	update_vectric_customer_sales?: GraphQLTypes["vectric_customer_sales_mutation_response"],
	/** update data of the table: "vectric.customer_status" */
	update_vectric_customer_status?: GraphQLTypes["vectric_customer_status_mutation_response"],
	/** update single row of the table: "vectric.customer_status" */
	update_vectric_customer_status_by_pk?: GraphQLTypes["vectric_customer_status"],
	/** update data of the table: "vectric.download" */
	update_vectric_download?: GraphQLTypes["vectric_download_mutation_response"],
	/** update single row of the table: "vectric.download" */
	update_vectric_download_by_pk?: GraphQLTypes["vectric_download"],
	/** update data of the table: "vectric.download_record" */
	update_vectric_download_record?: GraphQLTypes["vectric_download_record_mutation_response"],
	/** update single row of the table: "vectric.download_record" */
	update_vectric_download_record_by_pk?: GraphQLTypes["vectric_download_record"],
	/** update data of the table: "vectric.enhancement_tokens" */
	update_vectric_enhancement_tokens?: GraphQLTypes["vectric_enhancement_tokens_mutation_response"],
	/** update single row of the table: "vectric.enhancement_tokens" */
	update_vectric_enhancement_tokens_by_pk?: GraphQLTypes["vectric_enhancement_tokens"],
	/** update data of the table: "vectric.free_clipart_tokens" */
	update_vectric_free_clipart_tokens?: GraphQLTypes["vectric_free_clipart_tokens_mutation_response"],
	/** update data of the table: "vectric.freeclipart" */
	update_vectric_freeclipart?: GraphQLTypes["vectric_freeclipart_mutation_response"],
	/** update single row of the table: "vectric.freeclipart" */
	update_vectric_freeclipart_by_pk?: GraphQLTypes["vectric_freeclipart"],
	/** update data of the table: "vectric.freeclipart_category" */
	update_vectric_freeclipart_category?: GraphQLTypes["vectric_freeclipart_category_mutation_response"],
	/** update single row of the table: "vectric.freeclipart_category" */
	update_vectric_freeclipart_category_by_pk?: GraphQLTypes["vectric_freeclipart_category"],
	/** update data of the table: "vectric.freeclipart_download_record" */
	update_vectric_freeclipart_download_record?: GraphQLTypes["vectric_freeclipart_download_record_mutation_response"],
	/** update single row of the table: "vectric.freeclipart_download_record" */
	update_vectric_freeclipart_download_record_by_pk?: GraphQLTypes["vectric_freeclipart_download_record"],
	/** update data of the table: "vectric.group_roles" */
	update_vectric_group_roles?: GraphQLTypes["vectric_group_roles_mutation_response"],
	/** update single row of the table: "vectric.group_roles" */
	update_vectric_group_roles_by_pk?: GraphQLTypes["vectric_group_roles"],
	/** update data of the table: "vectric.group_user_role" */
	update_vectric_group_user_role?: GraphQLTypes["vectric_group_user_role_mutation_response"],
	/** update single row of the table: "vectric.group_user_role" */
	update_vectric_group_user_role_by_pk?: GraphQLTypes["vectric_group_user_role"],
	/** update data of the table: "vectric.groups" */
	update_vectric_groups?: GraphQLTypes["vectric_groups_mutation_response"],
	/** update single row of the table: "vectric.groups" */
	update_vectric_groups_by_pk?: GraphQLTypes["vectric_groups"],
	/** update data of the table: "vectric.language_codes" */
	update_vectric_language_codes?: GraphQLTypes["vectric_language_codes_mutation_response"],
	/** update single row of the table: "vectric.language_codes" */
	update_vectric_language_codes_by_pk?: GraphQLTypes["vectric_language_codes"],
	/** update data of the table: "vectric.licence_log" */
	update_vectric_licence_log?: GraphQLTypes["vectric_licence_log_mutation_response"],
	/** update single row of the table: "vectric.licence_log" */
	update_vectric_licence_log_by_pk?: GraphQLTypes["vectric_licence_log"],
	/** update data of the table: "vectric.makerspace_requests" */
	update_vectric_makerspace_requests?: GraphQLTypes["vectric_makerspace_requests_mutation_response"],
	/** update single row of the table: "vectric.makerspace_requests" */
	update_vectric_makerspace_requests_by_pk?: GraphQLTypes["vectric_makerspace_requests"],
	/** update data of the table: "vectric.membership_invitation_status" */
	update_vectric_membership_invitation_status?: GraphQLTypes["vectric_membership_invitation_status_mutation_response"],
	/** update single row of the table: "vectric.membership_invitation_status" */
	update_vectric_membership_invitation_status_by_pk?: GraphQLTypes["vectric_membership_invitation_status"],
	/** update data of the table: "vectric.membership_roles" */
	update_vectric_membership_roles?: GraphQLTypes["vectric_membership_roles_mutation_response"],
	/** update single row of the table: "vectric.membership_roles" */
	update_vectric_membership_roles_by_pk?: GraphQLTypes["vectric_membership_roles"],
	/** update data of the table: "vectric.membership_status" */
	update_vectric_membership_status?: GraphQLTypes["vectric_membership_status_mutation_response"],
	/** update single row of the table: "vectric.membership_status" */
	update_vectric_membership_status_by_pk?: GraphQLTypes["vectric_membership_status"],
	/** update data of the table: "vectric.oauth_client_details" */
	update_vectric_oauth_client_details?: GraphQLTypes["vectric_oauth_client_details_mutation_response"],
	/** update single row of the table: "vectric.oauth_client_details" */
	update_vectric_oauth_client_details_by_pk?: GraphQLTypes["vectric_oauth_client_details"],
	/** update data of the table: "vectric.oem_detailed_products" */
	update_vectric_oem_detailed_products?: GraphQLTypes["vectric_oem_detailed_products_mutation_response"],
	/** update single row of the table: "vectric.oem_detailed_products" */
	update_vectric_oem_detailed_products_by_pk?: GraphQLTypes["vectric_oem_detailed_products"],
	/** update data of the table: "vectric.oem_fastspring_item" */
	update_vectric_oem_fastspring_item?: GraphQLTypes["vectric_oem_fastspring_item_mutation_response"],
	/** update data of the table: "vectric.oem_fastspring_item_bundle" */
	update_vectric_oem_fastspring_item_bundle?: GraphQLTypes["vectric_oem_fastspring_item_bundle_mutation_response"],
	/** update single row of the table: "vectric.oem_fastspring_item_bundle" */
	update_vectric_oem_fastspring_item_bundle_by_pk?: GraphQLTypes["vectric_oem_fastspring_item_bundle"],
	/** update single row of the table: "vectric.oem_fastspring_item" */
	update_vectric_oem_fastspring_item_by_pk?: GraphQLTypes["vectric_oem_fastspring_item"],
	/** update data of the table: "vectric.oem_fastspring_order" */
	update_vectric_oem_fastspring_order?: GraphQLTypes["vectric_oem_fastspring_order_mutation_response"],
	/** update single row of the table: "vectric.oem_fastspring_order" */
	update_vectric_oem_fastspring_order_by_pk?: GraphQLTypes["vectric_oem_fastspring_order"],
	/** update data of the table: "vectric.oem_invite_status" */
	update_vectric_oem_invite_status?: GraphQLTypes["vectric_oem_invite_status_mutation_response"],
	/** update single row of the table: "vectric.oem_invite_status" */
	update_vectric_oem_invite_status_by_pk?: GraphQLTypes["vectric_oem_invite_status"],
	/** update data of the table: "vectric.oem_licence_allocation_type" */
	update_vectric_oem_licence_allocation_type?: GraphQLTypes["vectric_oem_licence_allocation_type_mutation_response"],
	/** update single row of the table: "vectric.oem_licence_allocation_type" */
	update_vectric_oem_licence_allocation_type_by_pk?: GraphQLTypes["vectric_oem_licence_allocation_type"],
	/** update data of the table: "vectric.oem_products" */
	update_vectric_oem_products?: GraphQLTypes["vectric_oem_products_mutation_response"],
	/** update single row of the table: "vectric.oem_products" */
	update_vectric_oem_products_by_pk?: GraphQLTypes["vectric_oem_products"],
	/** update data of the table: "vectric.organization_types" */
	update_vectric_organization_types?: GraphQLTypes["vectric_organization_types_mutation_response"],
	/** update single row of the table: "vectric.organization_types" */
	update_vectric_organization_types_by_pk?: GraphQLTypes["vectric_organization_types"],
	/** update data of the table: "vectric.products_clipartcollection_links" */
	update_vectric_products_clipartcollection_links?: GraphQLTypes["vectric_products_clipartcollection_links_mutation_response"],
	/** update single row of the table: "vectric.products_clipartcollection_links" */
	update_vectric_products_clipartcollection_links_by_pk?: GraphQLTypes["vectric_products_clipartcollection_links"],
	/** update data of the table: "vectric.products_enhancement_eligibility" */
	update_vectric_products_enhancement_eligibility?: GraphQLTypes["vectric_products_enhancement_eligibility_mutation_response"],
	/** update single row of the table: "vectric.products_enhancement_eligibility" */
	update_vectric_products_enhancement_eligibility_by_pk?: GraphQLTypes["vectric_products_enhancement_eligibility"],
	/** update data of the table: "vectric.products_freeclipart" */
	update_vectric_products_freeclipart?: GraphQLTypes["vectric_products_freeclipart_mutation_response"],
	/** update single row of the table: "vectric.products_freeclipart" */
	update_vectric_products_freeclipart_by_pk?: GraphQLTypes["vectric_products_freeclipart"],
	/** update data of the table: "vectric.products_fulfilments" */
	update_vectric_products_fulfilments?: GraphQLTypes["vectric_products_fulfilments_mutation_response"],
	/** update single row of the table: "vectric.products_fulfilments" */
	update_vectric_products_fulfilments_by_pk?: GraphQLTypes["vectric_products_fulfilments"],
	/** update data of the table: "vectric.products_fulfilmenttypes" */
	update_vectric_products_fulfilmenttypes?: GraphQLTypes["vectric_products_fulfilmenttypes_mutation_response"],
	/** update single row of the table: "vectric.products_fulfilmenttypes" */
	update_vectric_products_fulfilmenttypes_by_pk?: GraphQLTypes["vectric_products_fulfilmenttypes"],
	/** update data of the table: "vectric.products_product_fulfilments" */
	update_vectric_products_product_fulfilments?: GraphQLTypes["vectric_products_product_fulfilments_mutation_response"],
	/** update single row of the table: "vectric.products_product_fulfilments" */
	update_vectric_products_product_fulfilments_by_pk?: GraphQLTypes["vectric_products_product_fulfilments"],
	/** update data of the table: "vectric.products_product_licence_type" */
	update_vectric_products_product_licence_type?: GraphQLTypes["vectric_products_product_licence_type_mutation_response"],
	/** update single row of the table: "vectric.products_product_licence_type" */
	update_vectric_products_product_licence_type_by_pk?: GraphQLTypes["vectric_products_product_licence_type"],
	/** update data of the table: "vectric.sales_customerupdates" */
	update_vectric_sales_customerupdates?: GraphQLTypes["vectric_sales_customerupdates_mutation_response"],
	/** update single row of the table: "vectric.sales_customerupdates" */
	update_vectric_sales_customerupdates_by_pk?: GraphQLTypes["vectric_sales_customerupdates"],
	/** update data of the table: "vectric.sales_oemlicences" */
	update_vectric_sales_oemlicences?: GraphQLTypes["vectric_sales_oemlicences_mutation_response"],
	/** update single row of the table: "vectric.sales_oemlicences" */
	update_vectric_sales_oemlicences_by_pk?: GraphQLTypes["vectric_sales_oemlicences"],
	/** update data of the table: "vectric.sales_salesitemproduct_status" */
	update_vectric_sales_salesitemproduct_status?: GraphQLTypes["vectric_sales_salesitemproduct_status_mutation_response"],
	/** update single row of the table: "vectric.sales_salesitemproduct_status" */
	update_vectric_sales_salesitemproduct_status_by_pk?: GraphQLTypes["vectric_sales_salesitemproduct_status"],
	/** update data of the table: "vectric.security_emailverificationtokens" */
	update_vectric_security_emailverificationtokens?: GraphQLTypes["vectric_security_emailverificationtokens_mutation_response"],
	/** update single row of the table: "vectric.security_emailverificationtokens" */
	update_vectric_security_emailverificationtokens_by_pk?: GraphQLTypes["vectric_security_emailverificationtokens"],
	/** update data of the table: "vectric.security_group_authorities" */
	update_vectric_security_group_authorities?: GraphQLTypes["vectric_security_group_authorities_mutation_response"],
	/** update data of the table: "vectric.security_group_members" */
	update_vectric_security_group_members?: GraphQLTypes["vectric_security_group_members_mutation_response"],
	/** update single row of the table: "vectric.security_group_members" */
	update_vectric_security_group_members_by_pk?: GraphQLTypes["vectric_security_group_members"],
	/** update data of the table: "vectric.security_passwordresettokens" */
	update_vectric_security_passwordresettokens?: GraphQLTypes["vectric_security_passwordresettokens_mutation_response"],
	/** update single row of the table: "vectric.security_passwordresettokens" */
	update_vectric_security_passwordresettokens_by_pk?: GraphQLTypes["vectric_security_passwordresettokens"],
	/** update data of the table: "vectric.security_userinvitations" */
	update_vectric_security_userinvitations?: GraphQLTypes["vectric_security_userinvitations_mutation_response"],
	/** update data of the table: "vectric.subscription_contract_status" */
	update_vectric_subscription_contract_status?: GraphQLTypes["vectric_subscription_contract_status_mutation_response"],
	/** update single row of the table: "vectric.subscription_contract_status" */
	update_vectric_subscription_contract_status_by_pk?: GraphQLTypes["vectric_subscription_contract_status"],
	/** update data of the table: "vectric.subscription_contracts" */
	update_vectric_subscription_contracts?: GraphQLTypes["vectric_subscription_contracts_mutation_response"],
	/** update single row of the table: "vectric.subscription_contracts" */
	update_vectric_subscription_contracts_by_pk?: GraphQLTypes["vectric_subscription_contracts"],
	/** update data of the table: "vectric.subscription_events" */
	update_vectric_subscription_events?: GraphQLTypes["vectric_subscription_events_mutation_response"],
	/** update single row of the table: "vectric.subscription_events" */
	update_vectric_subscription_events_by_pk?: GraphQLTypes["vectric_subscription_events"],
	/** update single row of the table: "vectric.update_requests" */
	update_vectric_update_requests_by_pk?: GraphQLTypes["vectric_update_requests"],
	/** update data of the table: "vectric.upgrade_tokens" */
	update_vectric_upgrade_tokens?: GraphQLTypes["vectric_upgrade_tokens_mutation_response"],
	/** update single row of the table: "vectric.upgrade_tokens" */
	update_vectric_upgrade_tokens_by_pk?: GraphQLTypes["vectric_upgrade_tokens"],
	/** update data of the table: "vectric.version_code" */
	update_vectric_version_code?: GraphQLTypes["vectric_version_code_mutation_response"],
	/** update single row of the table: "vectric.version_code" */
	update_vectric_version_code_by_pk?: GraphQLTypes["vectric_version_code"],
	upgradeDetailsFromToken?: GraphQLTypes["UpgradeDetails"],
	validateFSRequest?: GraphQLTypes["FastspringSecureRequestOutput"],
	verifyEmail?: GraphQLTypes["EmailVerificationOutput"],
	zendeskUpload?: GraphQLTypes["ZendeskUploadOutput"]
};
	["query_root"]: {
	__typename: "query_root",
	/** fetch data from the table: "vectric.usergroup_2019_attendees" using primary key columns */
	UserGroupAttendeeById?: GraphQLTypes["vectric_usergroup_2019_attendees"],
	/** fetch data from the table: "vectric.usergroup_2019_attendees" */
	UserGroupAttendees: Array<GraphQLTypes["vectric_usergroup_2019_attendees"]>,
	/** fetch aggregated fields from the table: "vectric.usergroup_2019_attendees" */
	UserGroupAttendees_aggregate: GraphQLTypes["vectric_usergroup_2019_attendees_aggregate"],
	/** fetch data from the table: "vectric.allocatable_bundles" */
	allocatableBundles: Array<GraphQLTypes["vectric_allocatable_bundles"]>,
	/** fetch data from the table: "vectric.allocatable_licence_count" */
	allocatableLicenceCount: Array<GraphQLTypes["vectric_allocatable_licence_count"]>,
	/** fetch aggregated fields from the table: "vectric.allocatable_licence_count" */
	allocatableLicenceCount_aggregate: GraphQLTypes["vectric_allocatable_licence_count_aggregate"],
	/** fetch data from the table: "vectric.allocated_bundles" */
	allocatedBundles: Array<GraphQLTypes["vectric_allocated_bundles"]>,
	/** fetch data from the table: "vectric.allocation_summary" */
	allocationSummaries: Array<GraphQLTypes["vectric_allocation_summary"]>,
	/** fetch data from the table: "vectric.allocation_summary" using primary key columns */
	allocationSummaryById?: GraphQLTypes["vectric_allocation_summary"],
	/** fetch aggregated fields from the table: "vectric.allocation_summary" */
	allocationSummary_aggregate: GraphQLTypes["vectric_allocation_summary_aggregate"],
	/** fetch data from the table: "vectric.owned_item_assignments" using primary key columns */
	assignment?: GraphQLTypes["vectric_owned_item_assignments"],
	/** fetch data from the table: "vectric.owned_item_assignments" */
	assignments: Array<GraphQLTypes["vectric_owned_item_assignments"]>,
	/** fetch aggregated fields from the table: "vectric.owned_item_assignments" */
	assignments_aggregate: GraphQLTypes["vectric_owned_item_assignments_aggregate"],
	checkSignUpEmail?: GraphQLTypes["CheckEmailForSignUpOutput"],
	/** fetch data from the table: "vectric.products_clipartcollection_links" */
	clipartCollection: Array<GraphQLTypes["vectric_products_clipartcollection_links"]>,
	/** fetch data from the table: "vectric.countries" */
	countries: Array<GraphQLTypes["vectric_countries"]>,
	/** fetch aggregated fields from the table: "vectric.countries" */
	countries_aggregate: GraphQLTypes["vectric_countries_aggregate"],
	/** fetch data from the table: "vectric.countries" using primary key columns */
	countryById?: GraphQLTypes["vectric_countries"],
	/** fetch data from the table: "vectric.customer_area" */
	customerArea: Array<GraphQLTypes["vectric_customer_area"]>,
	/** fetch data from the table: "vectric.customer_area" using primary key columns */
	customerAreaByPk?: GraphQLTypes["vectric_customer_area"],
	/** fetch data from the table: "vectric.customer_area_file" */
	customerAreaFile: Array<GraphQLTypes["vectric_customer_area_file"]>,
	/** fetch data from the table: "vectric.customer_area_file" using primary key columns */
	customerAreaFileByPk?: GraphQLTypes["vectric_customer_area_file"],
	/** fetch data from the table: "vectric.sales_customers" using primary key columns */
	customerById?: GraphQLTypes["vectric_sales_customers"],
	/** fetch data from the table: "vectric.customer_responses" using primary key columns */
	customerResponseById?: GraphQLTypes["vectric_customer_responses"],
	/** fetch data from the table: "vectric.customer_responses" */
	customerResponses: Array<GraphQLTypes["vectric_customer_responses"]>,
	/** fetch aggregated fields from the table: "vectric.customer_responses" */
	customerResponses_aggregate: GraphQLTypes["vectric_customer_responses_aggregate"],
	/** An array relationship */
	customerSales: Array<GraphQLTypes["vectric_customer_sales"]>,
	/** An aggregate relationship */
	customerSales_aggregate: GraphQLTypes["vectric_customer_sales_aggregate"],
	/** fetch data from the table: "vectric.customer_status" */
	customerStatus: Array<GraphQLTypes["vectric_customer_status"]>,
	/** fetch data from the table: "vectric.customer_status" using primary key columns */
	customerStatusById?: GraphQLTypes["vectric_customer_status"],
	/** fetch data from the table: "vectric.sales_customers" */
	customers: Array<GraphQLTypes["vectric_sales_customers"]>,
	/** fetch data from the table: "vectric.download" using primary key columns */
	downloadByPk?: GraphQLTypes["vectric_download"],
	/** fetch data from the table: "vectric.sales_velocitytemplate" using primary key columns */
	emailTemplate?: GraphQLTypes["vectric_sales_velocitytemplate"],
	/** fetch aggregated fields from the table: "vectric.sales_velocitytemplate" */
	emailTemplate_aggregate: GraphQLTypes["vectric_sales_velocitytemplate_aggregate"],
	/** fetch data from the table: "vectric.sales_velocitytemplate" */
	emailTemplates: Array<GraphQLTypes["vectric_sales_velocitytemplate"]>,
	/** An array relationship */
	enhancementTokens: Array<GraphQLTypes["vectric_enhancement_tokens"]>,
	/** fetch data from the table: "vectric.entitled_products" using primary key columns */
	entitledProduct?: GraphQLTypes["vectric_entitled_products"],
	/** fetch data from the table: "vectric.entitled_products" */
	entitledProducts: Array<GraphQLTypes["vectric_entitled_products"]>,
	/** fetch aggregated fields from the table: "vectric.entitled_products" */
	entitledProducts_aggregate: GraphQLTypes["vectric_entitled_products_aggregate"],
	/** fetch data from the table: "vectric.entitlements" using primary key columns */
	entitlement?: GraphQLTypes["vectric_entitlements"],
	/** fetch data from the table: "vectric.entitlement_licences" using primary key columns */
	entitlementLicence?: GraphQLTypes["vectric_entitlement_licences"],
	/** fetch aggregated fields from the table: "vectric.entitlement_licences" */
	entitlementLicence_aggregate: GraphQLTypes["vectric_entitlement_licences_aggregate"],
	/** fetch data from the table: "vectric.entitlement_licences" */
	entitlementLicences: Array<GraphQLTypes["vectric_entitlement_licences"]>,
	/** An array relationship */
	entitlements: Array<GraphQLTypes["vectric_entitlements"]>,
	/** An aggregate relationship */
	entitlements_aggregate: GraphQLTypes["vectric_entitlements_aggregate"],
	/** fetch data from the table: "vectric.oem_eval_request" using primary key columns */
	evalRequestById?: GraphQLTypes["vectric_oem_eval_request"],
	/** fetch aggregated fields from the table: "vectric.oem_eval_request" */
	evalRequest_aggregate: GraphQLTypes["vectric_oem_eval_request_aggregate"],
	/** fetch data from the table: "vectric.oem_eval_request" */
	evalRequests: Array<GraphQLTypes["vectric_oem_eval_request"]>,
	/** fetch data from the table: "vectric.freeclipart" */
	freeClipart: Array<GraphQLTypes["vectric_freeclipart"]>,
	/** fetch data from the table: "vectric.freeclipart_category" */
	freeClipartCategory: Array<GraphQLTypes["vectric_freeclipart_category"]>,
	/** fetch data from the table: "vectric.free_clipart_tokens" using primary key columns */
	freeClipartTokenByPk?: GraphQLTypes["vectric_free_clipart_tokens"],
	/** An array relationship */
	freeClipartTokens: Array<GraphQLTypes["vectric_free_clipart_tokens"]>,
	getAdminDownloadLinkForFulfilment?: GraphQLTypes["GetDownloadLinkForFulfilmentOutput"],
	getDownloadLinkForFulfilment?: GraphQLTypes["GetDownloadLinkForFulfilmentOutput"],
	getDownloadLinkForPrivateProject?: GraphQLTypes["GetDownloadLinkForContentProject"],
	getLicenceDetailsForProductOrderItemAndAddOns?: Array<GraphQLTypes["LicenceDetailsForProductOrderItemAndAddOns"] | undefined>,
	getLicenceDetailsForProductOrderItems: Array<GraphQLTypes["LicenceDetailsForProductOrderItem"]>,
	/** fetch data from the table: "vectric.organization_licence_scope" using primary key columns */
	licenceScope?: GraphQLTypes["vectric_organization_licence_scope"],
	/** fetch aggregated fields from the table: "vectric.organization_licence_scope" */
	licenceScope_aggregate: GraphQLTypes["vectric_organization_licence_scope_aggregate"],
	/** fetch data from the table: "vectric.organization_licence_scope" */
	licenceScopes: Array<GraphQLTypes["vectric_organization_licence_scope"]>,
	/** fetch data from the table: "vectric.memberships" using primary key columns */
	membershipById?: GraphQLTypes["vectric_memberships"],
	/** fetch data from the table: "vectric.membership_invitations" using primary key columns */
	membershipInvitationById?: GraphQLTypes["vectric_membership_invitations"],
	membershipInvitationCheck?: GraphQLTypes["MembershipInvitationCheckResult"],
	/** An array relationship */
	membershipInvitations: Array<GraphQLTypes["vectric_membership_invitations"]>,
	/** An aggregate relationship */
	membershipInvitations_aggregate: GraphQLTypes["vectric_membership_invitations_aggregate"],
	/** An array relationship */
	memberships: Array<GraphQLTypes["vectric_memberships"]>,
	/** An aggregate relationship */
	memberships_aggregate: GraphQLTypes["vectric_memberships_aggregate"],
	/** fetch data from the table: "vectric.oem_allocation_emails" */
	oemAllocationEmails: Array<GraphQLTypes["vectric_oem_allocation_emails"]>,
	/** fetch aggregated fields from the table: "vectric.oem_allocation_emails" */
	oemAllocationEmails_aggregate: GraphQLTypes["vectric_oem_allocation_emails_aggregate"],
	/** fetch data from the table: "vectric.sales_oem_bundles" */
	oemBundles: Array<GraphQLTypes["vectric_sales_oem_bundles"]>,
	/** fetch data from the table: "vectric.sales_oem_bundles" using primary key columns */
	oemBundlesById?: GraphQLTypes["vectric_sales_oem_bundles"],
	/** fetch aggregated fields from the table: "vectric.sales_oem_bundles" */
	oemBundles_aggregate: GraphQLTypes["vectric_sales_oem_bundles_aggregate"],
	/** fetch data from the table: "vectric.oem_fastspring_item" */
	oemFastspringItem: Array<GraphQLTypes["vectric_oem_fastspring_item"]>,
	/** fetch data from the table: "vectric.oem_fastspring_item" using primary key columns */
	oemFastspringItemById?: GraphQLTypes["vectric_oem_fastspring_item"],
	/** fetch aggregated fields from the table: "vectric.oem_fastspring_item" */
	oemFastspringItem_aggregate: GraphQLTypes["vectric_oem_fastspring_item_aggregate"],
	/** fetch data from the table: "vectric.oem_fastspring_order" */
	oemFastspringOrder: Array<GraphQLTypes["vectric_oem_fastspring_order"]>,
	/** fetch data from the table: "vectric.oem_fastspring_order" using primary key columns */
	oemFastspringOrderById?: GraphQLTypes["vectric_oem_fastspring_order"],
	/** fetch aggregated fields from the table: "vectric.oem_fastspring_order" */
	oemFastspringOrder_aggregate: GraphQLTypes["vectric_oem_fastspring_order_aggregate"],
	/** fetch data from the table: "vectric.oem_licence_allocation_type" */
	oemLicenceAllocationType: Array<GraphQLTypes["vectric_oem_licence_allocation_type"]>,
	/** fetch data from the table: "vectric.sales_oemlicences" */
	oemLicences: Array<GraphQLTypes["vectric_sales_oemlicences"]>,
	/** fetch data from the table: "vectric.sales_oemlicences" using primary key columns */
	oemLicencesById?: GraphQLTypes["vectric_sales_oemlicences"],
	/** fetch data from the table: "vectric.oem_partners" */
	oemPartners: Array<GraphQLTypes["vectric_oem_partners"]>,
	/** fetch data from the table: "vectric.oem_partners" using primary key columns */
	oemPartnersById?: GraphQLTypes["vectric_oem_partners"],
	/** fetch data from the table: "vectric.oem_products" using primary key columns */
	oemProductByPk?: GraphQLTypes["vectric_oem_products"],
	/** fetch data from the table: "vectric.oem_products" */
	oemProducts: Array<GraphQLTypes["vectric_oem_products"]>,
	/** fetch data from the table: "vectric.oem_purchase_options" */
	oemPurchaseOptions: Array<GraphQLTypes["vectric_oem_purchase_options"]>,
	/** fetch data from the table: "vectric.oem_purchase_options" using primary key columns */
	oemPurchaseOptionsByOptionId?: GraphQLTypes["vectric_oem_purchase_options"],
	/** fetch aggregated fields from the table: "vectric.oem_purchase_options" */
	oemPurchaseOptions_aggregate: GraphQLTypes["vectric_oem_purchase_options_aggregate"],
	/** fetch data from the table: "vectric.oem_staff_customer" using primary key columns */
	oemStaffCustomerById?: GraphQLTypes["vectric_oem_staff_customer"],
	/** fetch data from the table: "vectric.oem_staff_customer" */
	oemStaffCustomers: Array<GraphQLTypes["vectric_oem_staff_customer"]>,
	/** fetch aggregated fields from the table: "vectric.oem_staff_customer" */
	oemStaffCustomers_aggregate: GraphQLTypes["vectric_oem_staff_customer_aggregate"],
	/** fetch data from the table: "vectric.oem_staff_admin_ownership" */
	oemStaffMembershipDetails: Array<GraphQLTypes["vectric_oem_staff_admin_ownership"]>,
	/** An array relationship */
	orders: Array<GraphQLTypes["vectric_sales_orders"]>,
	/** fetch data from the table: "vectric.sales_orders" using primary key columns */
	ordersByOrderId?: GraphQLTypes["vectric_sales_orders"],
	/** fetch data from the table: "vectric.organization_audit" using primary key columns */
	organizationAuditById?: GraphQLTypes["vectric_organization_audit"],
	/** fetch aggregated fields from the table: "vectric.organization_audit" */
	organizationAudit_aggregate: GraphQLTypes["vectric_organization_audit_aggregate"],
	/** fetch data from the table: "vectric.organizations" using primary key columns */
	organizationById?: GraphQLTypes["vectric_organizations"],
	/** fetch data from the table: "vectric.organization_memberships_admin_access" */
	organizationMembershipsAdminAccess: Array<GraphQLTypes["vectric_organization_memberships_admin_access"]>,
	/** fetch data from the table: "vectric.organization_orders" using primary key columns */
	organizationOrder?: GraphQLTypes["vectric_organization_orders"],
	/** fetch data from the table: "vectric.organization_order_items" using primary key columns */
	organizationOrderItem?: GraphQLTypes["vectric_organization_order_items"],
	/** fetch data from the table: "vectric.organization_order_items" */
	organizationOrderItems: Array<GraphQLTypes["vectric_organization_order_items"]>,
	/** fetch data from the table: "vectric.organization_orders" */
	organizationOrders: Array<GraphQLTypes["vectric_organization_orders"]>,
	/** fetch aggregated fields from the table: "vectric.organizations" */
	organization_aggregate: GraphQLTypes["vectric_organizations_aggregate"],
	/** fetch data from the table: "vectric.organizations" */
	organizations: Array<GraphQLTypes["vectric_organizations"]>,
	/** fetch data from the table: "vectric.organization_audit" */
	organiztionAudits: Array<GraphQLTypes["vectric_organization_audit"]>,
	/** fetch data from the table: "vectric.owned_items" using primary key columns */
	ownedItem?: GraphQLTypes["vectric_owned_items"],
	/** An array relationship */
	ownedItems: Array<GraphQLTypes["vectric_owned_items"]>,
	/** An aggregate relationship */
	ownedItems_aggregate: GraphQLTypes["vectric_owned_items_aggregate"],
	/** fetch data from the table: "vectric.owned_products" using primary key columns */
	ownedProduct?: GraphQLTypes["vectric_owned_products"],
	/** fetch data from the table: "vectric.owned_products" */
	ownedProducts: Array<GraphQLTypes["vectric_owned_products"]>,
	/** fetch aggregated fields from the table: "vectric.owned_products" */
	ownedProducts_aggregate: GraphQLTypes["vectric_owned_products_aggregate"],
	/** fetch data from the table: "vectric.security_passwordresettokens" */
	passwordResetTokens: Array<GraphQLTypes["vectric_security_passwordresettokens"]>,
	/** fetch data from the table: "vectric.security_passwordresettokens" using primary key columns */
	passwordResetTokensByPk?: GraphQLTypes["vectric_security_passwordresettokens"],
	/** fetch data from the table: "vectric.products_products" using primary key columns */
	productById?: GraphQLTypes["vectric_products_products"],
	/** fetch data from the table: "vectric.products_enhancement_eligibility" */
	productEnhancementEligibility: Array<GraphQLTypes["vectric_products_enhancement_eligibility"]>,
	/** fetch data from the table: "vectric.products_producttype" */
	productTypes: Array<GraphQLTypes["vectric_products_producttype"]>,
	/** fetch data from the table: "vectric.products_producttype" using primary key columns */
	productTypesById?: GraphQLTypes["vectric_products_producttype"],
	/** fetch data from the table: "vectric.products_upgrade_eligibility" using primary key columns */
	productUpgradeEligibilityById?: GraphQLTypes["vectric_products_upgrade_eligibility"],
	/** An array relationship */
	products: Array<GraphQLTypes["vectric_products_products"]>,
	/** fetch data from the table: "vectric.products_freeclipart" */
	productsFreeClipart: Array<GraphQLTypes["vectric_products_freeclipart"]>,
	/** fetch data from the table: "vectric.products_upgrade_eligibility" */
	productsUpgradeEligibility: Array<GraphQLTypes["vectric_products_upgrade_eligibility"]>,
	/** fetch data from the table: "vectric.questions" using primary key columns */
	questionById?: GraphQLTypes["vectric_questions"],
	/** fetch data from the table: "vectric.questions" */
	questions: Array<GraphQLTypes["vectric_questions"]>,
	/** fetch aggregated fields from the table: "vectric.questions" */
	questions_aggregate: GraphQLTypes["vectric_questions_aggregate"],
	/** fetch data from the table: "vectric.responses" using primary key columns */
	responseById?: GraphQLTypes["vectric_responses"],
	/** fetch data from the table: "vectric.responses" */
	responses: Array<GraphQLTypes["vectric_responses"]>,
	/** fetch aggregated fields from the table: "vectric.responses" */
	responses_aggregate: GraphQLTypes["vectric_responses_aggregate"],
	/** fetch data from the table: "vectric.saleable_products" using primary key columns */
	saleableProduct?: GraphQLTypes["vectric_saleable_products"],
	/** fetch data from the table: "vectric.saleable_products" */
	saleableProducts: Array<GraphQLTypes["vectric_saleable_products"]>,
	/** fetch aggregated fields from the table: "vectric.saleable_products" */
	saleableProducts_aggregate: GraphQLTypes["vectric_saleable_products_aggregate"],
	/** fetch aggregated fields from the table: "vectric.sales_customers" */
	salesCustomers_aggregate: GraphQLTypes["vectric_sales_customers_aggregate"],
	/** fetch data from the table: "vectric.sales_salesitem_products" */
	salesItemProduct: Array<GraphQLTypes["vectric_sales_salesitem_products"]>,
	/** fetch data from the table: "vectric.sales_salesitem_products" using primary key columns */
	salesItemProductById?: GraphQLTypes["vectric_sales_salesitem_products"],
	/** An array relationship */
	salesItems: Array<GraphQLTypes["vectric_sales_salesitems"]>,
	/** fetch data from the table: "vectric.sales_salesitems" using primary key columns */
	salesItemsById?: GraphQLTypes["vectric_sales_salesitems"],
	/** fetch data from the table: "vectric.scheduled_emails" */
	scheduledEmails: Array<GraphQLTypes["vectric_scheduled_emails"]>,
	/** fetch data from the table: "vectric.scheduled_emails" using primary key columns */
	scheduledEmailsById?: GraphQLTypes["vectric_scheduled_emails"],
	/** fetch aggregated fields from the table: "vectric.scheduled_emails" */
	scheduledEmails_aggregate: GraphQLTypes["vectric_scheduled_emails_aggregate"],
	/** fetch data from the table: "vectric.security_emailverificationtokens" using primary key columns */
	securityEmailVerificationTokenByToken?: GraphQLTypes["vectric_security_emailverificationtokens"],
	/** fetch data from the table: "vectric.security_emailverificationtokens" */
	securityEmailVerificationTokens: Array<GraphQLTypes["vectric_security_emailverificationtokens"]>,
	/** fetch data from the table: "vectric.security_userinvitations" */
	securityUserInvitations: Array<GraphQLTypes["vectric_security_userinvitations"]>,
	/** fetch data from the table: "vectric.security_users" */
	securityUsers: Array<GraphQLTypes["vectric_security_users"]>,
	/** fetch data from the table: "vectric.sales_customer_downloads" */
	selectCustomerDownloads: Array<GraphQLTypes["vectric_sales_customer_downloads"]>,
	/** fetch data from the table: "vectric.sales_customer_downloads" using primary key columns */
	selectCustomerDownloadsById?: GraphQLTypes["vectric_sales_customer_downloads"],
	/** fetch aggregated fields from the table: "vectric.sales_customer_downloads" */
	selectCustomerDownloads_aggregate: GraphQLTypes["vectric_sales_customer_downloads_aggregate"],
	/** fetch data from the table: "vectric.security_group_members" using primary key columns */
	selectSecurityGroupMembersById?: GraphQLTypes["vectric_security_group_members"],
	/** fetch data from the table: "vectric.security_group_members" */
	selectSecurityGrupMemebers: Array<GraphQLTypes["vectric_security_group_members"]>,
	/** fetch data from the table: "vectric.linkshortener_links" */
	shortLinks: Array<GraphQLTypes["vectric_linkshortener_links"]>,
	/** fetch data from the table: "vectric.linkshortener_links" using primary key columns */
	shortLinksByHash?: GraphQLTypes["vectric_linkshortener_links"],
	/** fetch aggregated fields from the table: "vectric.site_option_location" */
	siteOptionLocation_aggregate: GraphQLTypes["vectric_site_option_location_aggregate"],
	/** fetch data from the table: "vectric.site_option_location" */
	siteOptionLocations: Array<GraphQLTypes["vectric_site_option_location"]>,
	/** fetch data from the table: "vectric.site_option_location" using primary key columns */
	siteOptionLocationsById?: GraphQLTypes["vectric_site_option_location"],
	/** fetch data from the table: "vectric.site_options" */
	siteOptions: Array<GraphQLTypes["vectric_site_options"]>,
	/** fetch data from the table: "vectric.site_options" using primary key columns */
	siteOptionsById?: GraphQLTypes["vectric_site_options"],
	/** fetch aggregated fields from the table: "vectric.site_options" */
	siteOptions_aggregate: GraphQLTypes["vectric_site_options_aggregate"],
	testAction?: GraphQLTypes["SampleOutput"],
	/** fetch aggregated fields from the table: "vectric.toolpath_saver_token" */
	toolpathSaveToken_aggregate: GraphQLTypes["vectric_toolpath_saver_token_aggregate"],
	/** fetch data from the table: "vectric.toolpath_saver_token" using primary key columns */
	toolpathSaverTokenById?: GraphQLTypes["vectric_toolpath_saver_token"],
	/** fetch data from the table: "vectric.toolpath_saver_token" */
	toolpathSaverTokens: Array<GraphQLTypes["vectric_toolpath_saver_token"]>,
	/** fetch data from the table: "vectric.trial_order" using primary key columns */
	trialOrderById?: GraphQLTypes["vectric_trial_order"],
	/** fetch data from the table: "vectric.trial_order" */
	trialOrders: Array<GraphQLTypes["vectric_trial_order"]>,
	/** fetch aggregated fields from the table: "vectric.trial_order" */
	trialOrders_aggregate: GraphQLTypes["vectric_trial_order_aggregate"],
	/** fetch data from the table: "vectric.update_requests" using primary key columns */
	updateRequestById?: GraphQLTypes["vectric_update_requests"],
	/** fetch data from the table: "vectric.update_requests" */
	updateRequests: Array<GraphQLTypes["vectric_update_requests"]>,
	/** fetch data from the table: "vectric.upgrades_feature" using primary key columns */
	upgradeFeatureById?: GraphQLTypes["vectric_upgrades_feature"],
	/** fetch data from the table: "vectric.upgrades_feature" */
	upgradeFeatures: Array<GraphQLTypes["vectric_upgrades_feature"]>,
	/** fetch aggregated fields from the table: "vectric.upgrades_feature" */
	upgradeFeatures_aggregate: GraphQLTypes["vectric_upgrades_feature_aggregate"],
	/** fetch data from the table: "vectric.upgrades_product_type_feature" using primary key columns */
	upgradeProductTypeFeatureById?: GraphQLTypes["vectric_upgrades_product_type_feature"],
	/** An array relationship */
	upgradeProductTypeFeatures: Array<GraphQLTypes["vectric_upgrades_product_type_feature"]>,
	/** An aggregate relationship */
	upgradeProductTypeFeatures_aggregate: GraphQLTypes["vectric_upgrades_product_type_feature_aggregate"],
	/** An array relationship */
	upgradeTokens: Array<GraphQLTypes["vectric_upgrade_tokens"]>,
	/** fetch data from the table: "vectric.upgrade_tokens" using primary key columns */
	upgradeTokensById?: GraphQLTypes["vectric_upgrade_tokens"],
	/** fetch data from the table: "vectric.upgrades_version_feature" using primary key columns */
	upgradeVersionFeatureById?: GraphQLTypes["vectric_upgrades_version_feature"],
	/** fetch data from the table: "vectric.upgrades_version_feature" */
	upgradeVersionFeatures: Array<GraphQLTypes["vectric_upgrades_version_feature"]>,
	/** An aggregate relationship */
	upgradeVersionFeatures_aggregate: GraphQLTypes["vectric_upgrades_version_feature_aggregate"],
	/** fetch data from the table: "vectric.usergroup_2019_waitlist" */
	userGroupWaitingListEntries: Array<GraphQLTypes["vectric_usergroup_2019_waitlist"]>,
	/** fetch aggregated fields from the table: "vectric.usergroup_2019_waitlist" */
	userGroupWaitingListEntries_aggregate: GraphQLTypes["vectric_usergroup_2019_waitlist_aggregate"],
	/** fetch data from the table: "vectric.usergroup_2019_waitlist" using primary key columns */
	userGroupWaitingListEntryById?: GraphQLTypes["vectric_usergroup_2019_waitlist"],
	validateInvitationToken?: GraphQLTypes["ValidateInvitationToken"],
	validateVerificationToken: GraphQLTypes["ValidateVerificationToken"],
	/** fetch data from the table: "vectric.active_memberships" */
	vectric_active_memberships: Array<GraphQLTypes["vectric_active_memberships"]>,
	/** fetch aggregated fields from the table: "vectric.active_memberships" */
	vectric_active_memberships_aggregate: GraphQLTypes["vectric_active_memberships_aggregate"],
	/** fetch data from the table: "vectric.active_upgrades" */
	vectric_active_upgrades: Array<GraphQLTypes["vectric_active_upgrades"]>,
	/** fetch aggregated fields from the table: "vectric.active_upgrades" */
	vectric_active_upgrades_aggregate: GraphQLTypes["vectric_active_upgrades_aggregate"],
	/** fetch aggregated fields from the table: "vectric.allocatable_bundles" */
	vectric_allocatable_bundles_aggregate: GraphQLTypes["vectric_allocatable_bundles_aggregate"],
	/** fetch aggregated fields from the table: "vectric.allocated_bundles" */
	vectric_allocated_bundles_aggregate: GraphQLTypes["vectric_allocated_bundles_aggregate"],
	/** fetch data from the table: "vectric.allocation_summary_file_type" */
	vectric_allocation_summary_file_type: Array<GraphQLTypes["vectric_allocation_summary_file_type"]>,
	/** fetch aggregated fields from the table: "vectric.allocation_summary_file_type" */
	vectric_allocation_summary_file_type_aggregate: GraphQLTypes["vectric_allocation_summary_file_type_aggregate"],
	/** fetch data from the table: "vectric.allocation_summary_file_type" using primary key columns */
	vectric_allocation_summary_file_type_by_pk?: GraphQLTypes["vectric_allocation_summary_file_type"],
	/** fetch data from the table: "vectric.continents" */
	vectric_continents: Array<GraphQLTypes["vectric_continents"]>,
	/** fetch aggregated fields from the table: "vectric.continents" */
	vectric_continents_aggregate: GraphQLTypes["vectric_continents_aggregate"],
	/** fetch data from the table: "vectric.continents" using primary key columns */
	vectric_continents_by_pk?: GraphQLTypes["vectric_continents"],
	/** fetch aggregated fields from the table: "vectric.customer_area" */
	vectric_customer_area_aggregate: GraphQLTypes["vectric_customer_area_aggregate"],
	/** fetch aggregated fields from the table: "vectric.customer_area_file" */
	vectric_customer_area_file_aggregate: GraphQLTypes["vectric_customer_area_file_aggregate"],
	/** fetch aggregated fields from the table: "vectric.customer_status" */
	vectric_customer_status_aggregate: GraphQLTypes["vectric_customer_status_aggregate"],
	/** fetch data from the table: "vectric.download" */
	vectric_download: Array<GraphQLTypes["vectric_download"]>,
	/** fetch aggregated fields from the table: "vectric.download" */
	vectric_download_aggregate: GraphQLTypes["vectric_download_aggregate"],
	/** fetch data from the table: "vectric.download_record" */
	vectric_download_record: Array<GraphQLTypes["vectric_download_record"]>,
	/** fetch aggregated fields from the table: "vectric.download_record" */
	vectric_download_record_aggregate: GraphQLTypes["vectric_download_record_aggregate"],
	/** fetch data from the table: "vectric.download_record" using primary key columns */
	vectric_download_record_by_pk?: GraphQLTypes["vectric_download_record"],
	/** fetch aggregated fields from the table: "vectric.enhancement_tokens" */
	vectric_enhancement_tokens_aggregate: GraphQLTypes["vectric_enhancement_tokens_aggregate"],
	/** fetch data from the table: "vectric.enhancement_tokens" using primary key columns */
	vectric_enhancement_tokens_by_pk?: GraphQLTypes["vectric_enhancement_tokens"],
	/** fetch data from the table: "vectric.entitled_product_version_code_view" */
	vectric_entitled_product_version_code_view: Array<GraphQLTypes["vectric_entitled_product_version_code_view"]>,
	/** fetch aggregated fields from the table: "vectric.entitled_product_version_code_view" */
	vectric_entitled_product_version_code_view_aggregate: GraphQLTypes["vectric_entitled_product_version_code_view_aggregate"],
	/** fetch aggregated fields from the table: "vectric.free_clipart_tokens" */
	vectric_free_clipart_tokens_aggregate: GraphQLTypes["vectric_free_clipart_tokens_aggregate"],
	/** fetch aggregated fields from the table: "vectric.freeclipart" */
	vectric_freeclipart_aggregate: GraphQLTypes["vectric_freeclipart_aggregate"],
	/** fetch data from the table: "vectric.freeclipart" using primary key columns */
	vectric_freeclipart_by_pk?: GraphQLTypes["vectric_freeclipart"],
	/** fetch aggregated fields from the table: "vectric.freeclipart_category" */
	vectric_freeclipart_category_aggregate: GraphQLTypes["vectric_freeclipart_category_aggregate"],
	/** fetch data from the table: "vectric.freeclipart_category" using primary key columns */
	vectric_freeclipart_category_by_pk?: GraphQLTypes["vectric_freeclipart_category"],
	/** fetch data from the table: "vectric.freeclipart_download_record" */
	vectric_freeclipart_download_record: Array<GraphQLTypes["vectric_freeclipart_download_record"]>,
	/** fetch aggregated fields from the table: "vectric.freeclipart_download_record" */
	vectric_freeclipart_download_record_aggregate: GraphQLTypes["vectric_freeclipart_download_record_aggregate"],
	/** fetch data from the table: "vectric.freeclipart_download_record" using primary key columns */
	vectric_freeclipart_download_record_by_pk?: GraphQLTypes["vectric_freeclipart_download_record"],
	/** fetch data from the table: "vectric.group_info" */
	vectric_group_info: Array<GraphQLTypes["vectric_group_info"]>,
	/** fetch aggregated fields from the table: "vectric.group_info" */
	vectric_group_info_aggregate: GraphQLTypes["vectric_group_info_aggregate"],
	/** fetch data from the table: "vectric.group_roles" */
	vectric_group_roles: Array<GraphQLTypes["vectric_group_roles"]>,
	/** fetch aggregated fields from the table: "vectric.group_roles" */
	vectric_group_roles_aggregate: GraphQLTypes["vectric_group_roles_aggregate"],
	/** fetch data from the table: "vectric.group_roles" using primary key columns */
	vectric_group_roles_by_pk?: GraphQLTypes["vectric_group_roles"],
	/** fetch data from the table: "vectric.group_user_role" */
	vectric_group_user_role: Array<GraphQLTypes["vectric_group_user_role"]>,
	/** fetch aggregated fields from the table: "vectric.group_user_role" */
	vectric_group_user_role_aggregate: GraphQLTypes["vectric_group_user_role_aggregate"],
	/** fetch data from the table: "vectric.group_user_role" using primary key columns */
	vectric_group_user_role_by_pk?: GraphQLTypes["vectric_group_user_role"],
	/** fetch data from the table: "vectric.groups" */
	vectric_groups: Array<GraphQLTypes["vectric_groups"]>,
	/** fetch aggregated fields from the table: "vectric.groups" */
	vectric_groups_aggregate: GraphQLTypes["vectric_groups_aggregate"],
	/** fetch data from the table: "vectric.groups" using primary key columns */
	vectric_groups_by_pk?: GraphQLTypes["vectric_groups"],
	/** fetch data from the table: "vectric.language_codes" */
	vectric_language_codes: Array<GraphQLTypes["vectric_language_codes"]>,
	/** fetch aggregated fields from the table: "vectric.language_codes" */
	vectric_language_codes_aggregate: GraphQLTypes["vectric_language_codes_aggregate"],
	/** fetch data from the table: "vectric.language_codes" using primary key columns */
	vectric_language_codes_by_pk?: GraphQLTypes["vectric_language_codes"],
	/** fetch data from the table: "vectric.licence_log" */
	vectric_licence_log: Array<GraphQLTypes["vectric_licence_log"]>,
	/** fetch aggregated fields from the table: "vectric.licence_log" */
	vectric_licence_log_aggregate: GraphQLTypes["vectric_licence_log_aggregate"],
	/** fetch data from the table: "vectric.licence_log" using primary key columns */
	vectric_licence_log_by_pk?: GraphQLTypes["vectric_licence_log"],
	/** fetch aggregated fields from the table: "vectric.linkshortener_links" */
	vectric_linkshortener_links_aggregate: GraphQLTypes["vectric_linkshortener_links_aggregate"],
	/** fetch data from the table: "vectric.makerspace_requests" */
	vectric_makerspace_requests: Array<GraphQLTypes["vectric_makerspace_requests"]>,
	/** fetch aggregated fields from the table: "vectric.makerspace_requests" */
	vectric_makerspace_requests_aggregate: GraphQLTypes["vectric_makerspace_requests_aggregate"],
	/** fetch data from the table: "vectric.makerspace_requests" using primary key columns */
	vectric_makerspace_requests_by_pk?: GraphQLTypes["vectric_makerspace_requests"],
	/** fetch data from the table: "vectric.membership_invitation_status" */
	vectric_membership_invitation_status: Array<GraphQLTypes["vectric_membership_invitation_status"]>,
	/** fetch aggregated fields from the table: "vectric.membership_invitation_status" */
	vectric_membership_invitation_status_aggregate: GraphQLTypes["vectric_membership_invitation_status_aggregate"],
	/** fetch data from the table: "vectric.membership_invitation_status" using primary key columns */
	vectric_membership_invitation_status_by_pk?: GraphQLTypes["vectric_membership_invitation_status"],
	/** fetch data from the table: "vectric.membership_roles" */
	vectric_membership_roles: Array<GraphQLTypes["vectric_membership_roles"]>,
	/** fetch aggregated fields from the table: "vectric.membership_roles" */
	vectric_membership_roles_aggregate: GraphQLTypes["vectric_membership_roles_aggregate"],
	/** fetch data from the table: "vectric.membership_roles" using primary key columns */
	vectric_membership_roles_by_pk?: GraphQLTypes["vectric_membership_roles"],
	/** fetch data from the table: "vectric.membership_status" */
	vectric_membership_status: Array<GraphQLTypes["vectric_membership_status"]>,
	/** fetch aggregated fields from the table: "vectric.membership_status" */
	vectric_membership_status_aggregate: GraphQLTypes["vectric_membership_status_aggregate"],
	/** fetch data from the table: "vectric.membership_status" using primary key columns */
	vectric_membership_status_by_pk?: GraphQLTypes["vectric_membership_status"],
	/** fetch data from the table: "vectric.oauth_client_details" */
	vectric_oauth_client_details: Array<GraphQLTypes["vectric_oauth_client_details"]>,
	/** fetch aggregated fields from the table: "vectric.oauth_client_details" */
	vectric_oauth_client_details_aggregate: GraphQLTypes["vectric_oauth_client_details_aggregate"],
	/** fetch data from the table: "vectric.oauth_client_details" using primary key columns */
	vectric_oauth_client_details_by_pk?: GraphQLTypes["vectric_oauth_client_details"],
	/** fetch data from the table: "vectric.oem_detailed_products" */
	vectric_oem_detailed_products: Array<GraphQLTypes["vectric_oem_detailed_products"]>,
	/** fetch aggregated fields from the table: "vectric.oem_detailed_products" */
	vectric_oem_detailed_products_aggregate: GraphQLTypes["vectric_oem_detailed_products_aggregate"],
	/** fetch data from the table: "vectric.oem_detailed_products" using primary key columns */
	vectric_oem_detailed_products_by_pk?: GraphQLTypes["vectric_oem_detailed_products"],
	/** fetch data from the table: "vectric.oem_fastspring_item_bundle" */
	vectric_oem_fastspring_item_bundle: Array<GraphQLTypes["vectric_oem_fastspring_item_bundle"]>,
	/** fetch aggregated fields from the table: "vectric.oem_fastspring_item_bundle" */
	vectric_oem_fastspring_item_bundle_aggregate: GraphQLTypes["vectric_oem_fastspring_item_bundle_aggregate"],
	/** fetch data from the table: "vectric.oem_fastspring_item_bundle" using primary key columns */
	vectric_oem_fastspring_item_bundle_by_pk?: GraphQLTypes["vectric_oem_fastspring_item_bundle"],
	/** fetch data from the table: "vectric.oem_invite_status" */
	vectric_oem_invite_status: Array<GraphQLTypes["vectric_oem_invite_status"]>,
	/** fetch aggregated fields from the table: "vectric.oem_invite_status" */
	vectric_oem_invite_status_aggregate: GraphQLTypes["vectric_oem_invite_status_aggregate"],
	/** fetch data from the table: "vectric.oem_invite_status" using primary key columns */
	vectric_oem_invite_status_by_pk?: GraphQLTypes["vectric_oem_invite_status"],
	/** fetch aggregated fields from the table: "vectric.oem_licence_allocation_type" */
	vectric_oem_licence_allocation_type_aggregate: GraphQLTypes["vectric_oem_licence_allocation_type_aggregate"],
	/** fetch data from the table: "vectric.oem_licence_allocation_type" using primary key columns */
	vectric_oem_licence_allocation_type_by_pk?: GraphQLTypes["vectric_oem_licence_allocation_type"],
	/** fetch aggregated fields from the table: "vectric.oem_partners" */
	vectric_oem_partners_aggregate: GraphQLTypes["vectric_oem_partners_aggregate"],
	/** fetch aggregated fields from the table: "vectric.oem_products" */
	vectric_oem_products_aggregate: GraphQLTypes["vectric_oem_products_aggregate"],
	/** fetch aggregated fields from the table: "vectric.oem_staff_admin_ownership" */
	vectric_oem_staff_admin_ownership_aggregate: GraphQLTypes["vectric_oem_staff_admin_ownership_aggregate"],
	/** fetch aggregated fields from the table: "vectric.organization_memberships_admin_access" */
	vectric_organization_memberships_admin_access_aggregate: GraphQLTypes["vectric_organization_memberships_admin_access_aggregate"],
	/** fetch aggregated fields from the table: "vectric.organization_order_items" */
	vectric_organization_order_items_aggregate: GraphQLTypes["vectric_organization_order_items_aggregate"],
	/** fetch aggregated fields from the table: "vectric.organization_orders" */
	vectric_organization_orders_aggregate: GraphQLTypes["vectric_organization_orders_aggregate"],
	/** fetch data from the table: "vectric.organization_types" */
	vectric_organization_types: Array<GraphQLTypes["vectric_organization_types"]>,
	/** fetch aggregated fields from the table: "vectric.organization_types" */
	vectric_organization_types_aggregate: GraphQLTypes["vectric_organization_types_aggregate"],
	/** fetch data from the table: "vectric.organization_types" using primary key columns */
	vectric_organization_types_by_pk?: GraphQLTypes["vectric_organization_types"],
	/** fetch aggregated fields from the table: "vectric.products_clipartcollection_links" */
	vectric_products_clipartcollection_links_aggregate: GraphQLTypes["vectric_products_clipartcollection_links_aggregate"],
	/** fetch data from the table: "vectric.products_clipartcollection_links" using primary key columns */
	vectric_products_clipartcollection_links_by_pk?: GraphQLTypes["vectric_products_clipartcollection_links"],
	/** fetch aggregated fields from the table: "vectric.products_enhancement_eligibility" */
	vectric_products_enhancement_eligibility_aggregate: GraphQLTypes["vectric_products_enhancement_eligibility_aggregate"],
	/** fetch data from the table: "vectric.products_enhancement_eligibility" using primary key columns */
	vectric_products_enhancement_eligibility_by_pk?: GraphQLTypes["vectric_products_enhancement_eligibility"],
	/** fetch aggregated fields from the table: "vectric.products_freeclipart" */
	vectric_products_freeclipart_aggregate: GraphQLTypes["vectric_products_freeclipart_aggregate"],
	/** fetch data from the table: "vectric.products_freeclipart" using primary key columns */
	vectric_products_freeclipart_by_pk?: GraphQLTypes["vectric_products_freeclipart"],
	/** fetch data from the table: "vectric.products_fulfilments" */
	vectric_products_fulfilments: Array<GraphQLTypes["vectric_products_fulfilments"]>,
	/** fetch aggregated fields from the table: "vectric.products_fulfilments" */
	vectric_products_fulfilments_aggregate: GraphQLTypes["vectric_products_fulfilments_aggregate"],
	/** fetch data from the table: "vectric.products_fulfilments" using primary key columns */
	vectric_products_fulfilments_by_pk?: GraphQLTypes["vectric_products_fulfilments"],
	/** fetch data from the table: "vectric.products_fulfilmenttypes" */
	vectric_products_fulfilmenttypes: Array<GraphQLTypes["vectric_products_fulfilmenttypes"]>,
	/** fetch aggregated fields from the table: "vectric.products_fulfilmenttypes" */
	vectric_products_fulfilmenttypes_aggregate: GraphQLTypes["vectric_products_fulfilmenttypes_aggregate"],
	/** fetch data from the table: "vectric.products_fulfilmenttypes" using primary key columns */
	vectric_products_fulfilmenttypes_by_pk?: GraphQLTypes["vectric_products_fulfilmenttypes"],
	/** fetch data from the table: "vectric.products_product_fulfilments" */
	vectric_products_product_fulfilments: Array<GraphQLTypes["vectric_products_product_fulfilments"]>,
	/** fetch aggregated fields from the table: "vectric.products_product_fulfilments" */
	vectric_products_product_fulfilments_aggregate: GraphQLTypes["vectric_products_product_fulfilments_aggregate"],
	/** fetch data from the table: "vectric.products_product_fulfilments" using primary key columns */
	vectric_products_product_fulfilments_by_pk?: GraphQLTypes["vectric_products_product_fulfilments"],
	/** fetch data from the table: "vectric.products_product_licence_type" */
	vectric_products_product_licence_type: Array<GraphQLTypes["vectric_products_product_licence_type"]>,
	/** fetch aggregated fields from the table: "vectric.products_product_licence_type" */
	vectric_products_product_licence_type_aggregate: GraphQLTypes["vectric_products_product_licence_type_aggregate"],
	/** fetch data from the table: "vectric.products_product_licence_type" using primary key columns */
	vectric_products_product_licence_type_by_pk?: GraphQLTypes["vectric_products_product_licence_type"],
	/** fetch aggregated fields from the table: "vectric.products_products" */
	vectric_products_products_aggregate: GraphQLTypes["vectric_products_products_aggregate"],
	/** fetch aggregated fields from the table: "vectric.products_producttype" */
	vectric_products_producttype_aggregate: GraphQLTypes["vectric_products_producttype_aggregate"],
	/** fetch aggregated fields from the table: "vectric.products_upgrade_eligibility" */
	vectric_products_upgrade_eligibility_aggregate: GraphQLTypes["vectric_products_upgrade_eligibility_aggregate"],
	/** fetch data from the table: "vectric.sales_customerupdates" */
	vectric_sales_customerupdates: Array<GraphQLTypes["vectric_sales_customerupdates"]>,
	/** fetch aggregated fields from the table: "vectric.sales_customerupdates" */
	vectric_sales_customerupdates_aggregate: GraphQLTypes["vectric_sales_customerupdates_aggregate"],
	/** fetch data from the table: "vectric.sales_customerupdates" using primary key columns */
	vectric_sales_customerupdates_by_pk?: GraphQLTypes["vectric_sales_customerupdates"],
	/** fetch aggregated fields from the table: "vectric.sales_oemlicences" */
	vectric_sales_oemlicences_aggregate: GraphQLTypes["vectric_sales_oemlicences_aggregate"],
	/** fetch aggregated fields from the table: "vectric.sales_orders" */
	vectric_sales_orders_aggregate: GraphQLTypes["vectric_sales_orders_aggregate"],
	/** fetch aggregated fields from the table: "vectric.sales_salesitem_products" */
	vectric_sales_salesitem_products_aggregate: GraphQLTypes["vectric_sales_salesitem_products_aggregate"],
	/** fetch data from the table: "vectric.sales_salesitemproduct_status" */
	vectric_sales_salesitemproduct_status: Array<GraphQLTypes["vectric_sales_salesitemproduct_status"]>,
	/** fetch aggregated fields from the table: "vectric.sales_salesitemproduct_status" */
	vectric_sales_salesitemproduct_status_aggregate: GraphQLTypes["vectric_sales_salesitemproduct_status_aggregate"],
	/** fetch data from the table: "vectric.sales_salesitemproduct_status" using primary key columns */
	vectric_sales_salesitemproduct_status_by_pk?: GraphQLTypes["vectric_sales_salesitemproduct_status"],
	/** fetch aggregated fields from the table: "vectric.sales_salesitems" */
	vectric_sales_salesitems_aggregate: GraphQLTypes["vectric_sales_salesitems_aggregate"],
	/** fetch aggregated fields from the table: "vectric.security_emailverificationtokens" */
	vectric_security_emailverificationtokens_aggregate: GraphQLTypes["vectric_security_emailverificationtokens_aggregate"],
	/** fetch data from the table: "vectric.security_group_authorities" */
	vectric_security_group_authorities: Array<GraphQLTypes["vectric_security_group_authorities"]>,
	/** fetch aggregated fields from the table: "vectric.security_group_authorities" */
	vectric_security_group_authorities_aggregate: GraphQLTypes["vectric_security_group_authorities_aggregate"],
	/** fetch aggregated fields from the table: "vectric.security_group_members" */
	vectric_security_group_members_aggregate: GraphQLTypes["vectric_security_group_members_aggregate"],
	/** fetch aggregated fields from the table: "vectric.security_passwordresettokens" */
	vectric_security_passwordresettokens_aggregate: GraphQLTypes["vectric_security_passwordresettokens_aggregate"],
	/** fetch aggregated fields from the table: "vectric.security_userinvitations" */
	vectric_security_userinvitations_aggregate: GraphQLTypes["vectric_security_userinvitations_aggregate"],
	/** fetch data from the table: "vectric.security_userinvitations" using primary key columns */
	vectric_security_userinvitations_by_pk?: GraphQLTypes["vectric_security_userinvitations"],
	/** fetch aggregated fields from the table: "vectric.security_users" */
	vectric_security_users_aggregate: GraphQLTypes["vectric_security_users_aggregate"],
	/** fetch data from the table: "vectric.security_users" using primary key columns */
	vectric_security_users_by_pk?: GraphQLTypes["vectric_security_users"],
	/** fetch data from the table: "vectric.subscription_contract_status" */
	vectric_subscription_contract_status: Array<GraphQLTypes["vectric_subscription_contract_status"]>,
	/** fetch aggregated fields from the table: "vectric.subscription_contract_status" */
	vectric_subscription_contract_status_aggregate: GraphQLTypes["vectric_subscription_contract_status_aggregate"],
	/** fetch data from the table: "vectric.subscription_contract_status" using primary key columns */
	vectric_subscription_contract_status_by_pk?: GraphQLTypes["vectric_subscription_contract_status"],
	/** fetch data from the table: "vectric.subscription_contracts" */
	vectric_subscription_contracts: Array<GraphQLTypes["vectric_subscription_contracts"]>,
	/** fetch aggregated fields from the table: "vectric.subscription_contracts" */
	vectric_subscription_contracts_aggregate: GraphQLTypes["vectric_subscription_contracts_aggregate"],
	/** fetch data from the table: "vectric.subscription_contracts" using primary key columns */
	vectric_subscription_contracts_by_pk?: GraphQLTypes["vectric_subscription_contracts"],
	/** fetch data from the table: "vectric.subscription_events" */
	vectric_subscription_events: Array<GraphQLTypes["vectric_subscription_events"]>,
	/** fetch aggregated fields from the table: "vectric.subscription_events" */
	vectric_subscription_events_aggregate: GraphQLTypes["vectric_subscription_events_aggregate"],
	/** fetch data from the table: "vectric.subscription_events" using primary key columns */
	vectric_subscription_events_by_pk?: GraphQLTypes["vectric_subscription_events"],
	/** fetch aggregated fields from the table: "vectric.update_requests" */
	vectric_update_requests_aggregate: GraphQLTypes["vectric_update_requests_aggregate"],
	/** fetch aggregated fields from the table: "vectric.upgrade_tokens" */
	vectric_upgrade_tokens_aggregate: GraphQLTypes["vectric_upgrade_tokens_aggregate"],
	/** fetch data from the table: "vectric.version_code" */
	vectric_version_code: Array<GraphQLTypes["vectric_version_code"]>,
	/** fetch aggregated fields from the table: "vectric.version_code" */
	vectric_version_code_aggregate: GraphQLTypes["vectric_version_code_aggregate"],
	/** fetch data from the table: "vectric.version_code" using primary key columns */
	vectric_version_code_by_pk?: GraphQLTypes["vectric_version_code"],
	/** fetch data from the table: "vectric.products_versioncodes" using primary key columns */
	versionCodeById?: GraphQLTypes["vectric_products_versioncodes"],
	/** fetch data from the table: "vectric.products_versioncodes" */
	versionCodes: Array<GraphQLTypes["vectric_products_versioncodes"]>,
	/** fetch aggregated fields from the table: "vectric.products_versioncodes" */
	versionCodes_aggregate: GraphQLTypes["vectric_products_versioncodes_aggregate"],
	/** fetch data from the table: "vectric.customer_zd_uploads" */
	zendeskUploads: Array<GraphQLTypes["vectric_customer_zd_uploads"]>,
	/** fetch data from the table: "vectric.customer_zd_uploads" using primary key columns */
	zendeskUploadsById?: GraphQLTypes["vectric_customer_zd_uploads"],
	/** fetch aggregated fields from the table: "vectric.customer_zd_uploads" */
	zendeskUploads_aggregate: GraphQLTypes["vectric_customer_zd_uploads_aggregate"]
};
	["subscription_root"]: {
	__typename: "subscription_root",
	/** fetch data from the table: "vectric.usergroup_2019_attendees" using primary key columns */
	UserGroupAttendeeById?: GraphQLTypes["vectric_usergroup_2019_attendees"],
	/** fetch data from the table: "vectric.usergroup_2019_attendees" */
	UserGroupAttendees: Array<GraphQLTypes["vectric_usergroup_2019_attendees"]>,
	/** fetch aggregated fields from the table: "vectric.usergroup_2019_attendees" */
	UserGroupAttendees_aggregate: GraphQLTypes["vectric_usergroup_2019_attendees_aggregate"],
	/** fetch data from the table: "vectric.allocatable_bundles" */
	allocatableBundles: Array<GraphQLTypes["vectric_allocatable_bundles"]>,
	/** fetch data from the table: "vectric.allocatable_licence_count" */
	allocatableLicenceCount: Array<GraphQLTypes["vectric_allocatable_licence_count"]>,
	/** fetch aggregated fields from the table: "vectric.allocatable_licence_count" */
	allocatableLicenceCount_aggregate: GraphQLTypes["vectric_allocatable_licence_count_aggregate"],
	/** fetch data from the table: "vectric.allocated_bundles" */
	allocatedBundles: Array<GraphQLTypes["vectric_allocated_bundles"]>,
	/** fetch data from the table: "vectric.allocation_summary" */
	allocationSummaries: Array<GraphQLTypes["vectric_allocation_summary"]>,
	/** fetch data from the table: "vectric.allocation_summary" using primary key columns */
	allocationSummaryById?: GraphQLTypes["vectric_allocation_summary"],
	/** fetch aggregated fields from the table: "vectric.allocation_summary" */
	allocationSummary_aggregate: GraphQLTypes["vectric_allocation_summary_aggregate"],
	/** fetch data from the table: "vectric.owned_item_assignments" using primary key columns */
	assignment?: GraphQLTypes["vectric_owned_item_assignments"],
	/** fetch data from the table: "vectric.owned_item_assignments" */
	assignments: Array<GraphQLTypes["vectric_owned_item_assignments"]>,
	/** fetch aggregated fields from the table: "vectric.owned_item_assignments" */
	assignments_aggregate: GraphQLTypes["vectric_owned_item_assignments_aggregate"],
	/** fetch data from the table: "vectric.products_clipartcollection_links" */
	clipartCollection: Array<GraphQLTypes["vectric_products_clipartcollection_links"]>,
	/** fetch data from the table: "vectric.countries" */
	countries: Array<GraphQLTypes["vectric_countries"]>,
	/** fetch aggregated fields from the table: "vectric.countries" */
	countries_aggregate: GraphQLTypes["vectric_countries_aggregate"],
	/** fetch data from the table: "vectric.countries" using primary key columns */
	countryById?: GraphQLTypes["vectric_countries"],
	/** fetch data from the table: "vectric.customer_area" */
	customerArea: Array<GraphQLTypes["vectric_customer_area"]>,
	/** fetch data from the table: "vectric.customer_area" using primary key columns */
	customerAreaByPk?: GraphQLTypes["vectric_customer_area"],
	/** fetch data from the table: "vectric.customer_area_file" */
	customerAreaFile: Array<GraphQLTypes["vectric_customer_area_file"]>,
	/** fetch data from the table: "vectric.customer_area_file" using primary key columns */
	customerAreaFileByPk?: GraphQLTypes["vectric_customer_area_file"],
	/** fetch data from the table: "vectric.sales_customers" using primary key columns */
	customerById?: GraphQLTypes["vectric_sales_customers"],
	/** fetch data from the table: "vectric.customer_responses" using primary key columns */
	customerResponseById?: GraphQLTypes["vectric_customer_responses"],
	/** fetch data from the table: "vectric.customer_responses" */
	customerResponses: Array<GraphQLTypes["vectric_customer_responses"]>,
	/** fetch aggregated fields from the table: "vectric.customer_responses" */
	customerResponses_aggregate: GraphQLTypes["vectric_customer_responses_aggregate"],
	/** An array relationship */
	customerSales: Array<GraphQLTypes["vectric_customer_sales"]>,
	/** An aggregate relationship */
	customerSales_aggregate: GraphQLTypes["vectric_customer_sales_aggregate"],
	/** fetch data from the table: "vectric.customer_status" */
	customerStatus: Array<GraphQLTypes["vectric_customer_status"]>,
	/** fetch data from the table: "vectric.customer_status" using primary key columns */
	customerStatusById?: GraphQLTypes["vectric_customer_status"],
	/** fetch data from the table: "vectric.sales_customers" */
	customers: Array<GraphQLTypes["vectric_sales_customers"]>,
	/** fetch data from the table: "vectric.download" using primary key columns */
	downloadByPk?: GraphQLTypes["vectric_download"],
	/** fetch data from the table: "vectric.sales_velocitytemplate" using primary key columns */
	emailTemplate?: GraphQLTypes["vectric_sales_velocitytemplate"],
	/** fetch aggregated fields from the table: "vectric.sales_velocitytemplate" */
	emailTemplate_aggregate: GraphQLTypes["vectric_sales_velocitytemplate_aggregate"],
	/** fetch data from the table: "vectric.sales_velocitytemplate" */
	emailTemplates: Array<GraphQLTypes["vectric_sales_velocitytemplate"]>,
	/** An array relationship */
	enhancementTokens: Array<GraphQLTypes["vectric_enhancement_tokens"]>,
	/** fetch data from the table: "vectric.entitled_products" using primary key columns */
	entitledProduct?: GraphQLTypes["vectric_entitled_products"],
	/** fetch data from the table: "vectric.entitled_products" */
	entitledProducts: Array<GraphQLTypes["vectric_entitled_products"]>,
	/** fetch aggregated fields from the table: "vectric.entitled_products" */
	entitledProducts_aggregate: GraphQLTypes["vectric_entitled_products_aggregate"],
	/** fetch data from the table: "vectric.entitlements" using primary key columns */
	entitlement?: GraphQLTypes["vectric_entitlements"],
	/** fetch data from the table: "vectric.entitlement_licences" using primary key columns */
	entitlementLicence?: GraphQLTypes["vectric_entitlement_licences"],
	/** fetch aggregated fields from the table: "vectric.entitlement_licences" */
	entitlementLicence_aggregate: GraphQLTypes["vectric_entitlement_licences_aggregate"],
	/** fetch data from the table: "vectric.entitlement_licences" */
	entitlementLicences: Array<GraphQLTypes["vectric_entitlement_licences"]>,
	/** An array relationship */
	entitlements: Array<GraphQLTypes["vectric_entitlements"]>,
	/** An aggregate relationship */
	entitlements_aggregate: GraphQLTypes["vectric_entitlements_aggregate"],
	/** fetch data from the table: "vectric.oem_eval_request" using primary key columns */
	evalRequestById?: GraphQLTypes["vectric_oem_eval_request"],
	/** fetch aggregated fields from the table: "vectric.oem_eval_request" */
	evalRequest_aggregate: GraphQLTypes["vectric_oem_eval_request_aggregate"],
	/** fetch data from the table: "vectric.oem_eval_request" */
	evalRequests: Array<GraphQLTypes["vectric_oem_eval_request"]>,
	/** fetch data from the table: "vectric.freeclipart" */
	freeClipart: Array<GraphQLTypes["vectric_freeclipart"]>,
	/** fetch data from the table: "vectric.freeclipart_category" */
	freeClipartCategory: Array<GraphQLTypes["vectric_freeclipart_category"]>,
	/** fetch data from the table: "vectric.free_clipart_tokens" using primary key columns */
	freeClipartTokenByPk?: GraphQLTypes["vectric_free_clipart_tokens"],
	/** An array relationship */
	freeClipartTokens: Array<GraphQLTypes["vectric_free_clipart_tokens"]>,
	/** fetch data from the table: "vectric.organization_licence_scope" using primary key columns */
	licenceScope?: GraphQLTypes["vectric_organization_licence_scope"],
	/** fetch aggregated fields from the table: "vectric.organization_licence_scope" */
	licenceScope_aggregate: GraphQLTypes["vectric_organization_licence_scope_aggregate"],
	/** fetch data from the table: "vectric.organization_licence_scope" */
	licenceScopes: Array<GraphQLTypes["vectric_organization_licence_scope"]>,
	/** fetch data from the table: "vectric.memberships" using primary key columns */
	membershipById?: GraphQLTypes["vectric_memberships"],
	/** fetch data from the table: "vectric.membership_invitations" using primary key columns */
	membershipInvitationById?: GraphQLTypes["vectric_membership_invitations"],
	/** An array relationship */
	membershipInvitations: Array<GraphQLTypes["vectric_membership_invitations"]>,
	/** An aggregate relationship */
	membershipInvitations_aggregate: GraphQLTypes["vectric_membership_invitations_aggregate"],
	/** An array relationship */
	memberships: Array<GraphQLTypes["vectric_memberships"]>,
	/** An aggregate relationship */
	memberships_aggregate: GraphQLTypes["vectric_memberships_aggregate"],
	/** fetch data from the table: "vectric.oem_allocation_emails" */
	oemAllocationEmails: Array<GraphQLTypes["vectric_oem_allocation_emails"]>,
	/** fetch aggregated fields from the table: "vectric.oem_allocation_emails" */
	oemAllocationEmails_aggregate: GraphQLTypes["vectric_oem_allocation_emails_aggregate"],
	/** fetch data from the table: "vectric.sales_oem_bundles" */
	oemBundles: Array<GraphQLTypes["vectric_sales_oem_bundles"]>,
	/** fetch data from the table: "vectric.sales_oem_bundles" using primary key columns */
	oemBundlesById?: GraphQLTypes["vectric_sales_oem_bundles"],
	/** fetch aggregated fields from the table: "vectric.sales_oem_bundles" */
	oemBundles_aggregate: GraphQLTypes["vectric_sales_oem_bundles_aggregate"],
	/** fetch data from the table: "vectric.oem_fastspring_item" */
	oemFastspringItem: Array<GraphQLTypes["vectric_oem_fastspring_item"]>,
	/** fetch data from the table: "vectric.oem_fastspring_item" using primary key columns */
	oemFastspringItemById?: GraphQLTypes["vectric_oem_fastspring_item"],
	/** fetch aggregated fields from the table: "vectric.oem_fastspring_item" */
	oemFastspringItem_aggregate: GraphQLTypes["vectric_oem_fastspring_item_aggregate"],
	/** fetch data from the table: "vectric.oem_fastspring_order" */
	oemFastspringOrder: Array<GraphQLTypes["vectric_oem_fastspring_order"]>,
	/** fetch data from the table: "vectric.oem_fastspring_order" using primary key columns */
	oemFastspringOrderById?: GraphQLTypes["vectric_oem_fastspring_order"],
	/** fetch aggregated fields from the table: "vectric.oem_fastspring_order" */
	oemFastspringOrder_aggregate: GraphQLTypes["vectric_oem_fastspring_order_aggregate"],
	/** fetch data from the table: "vectric.oem_licence_allocation_type" */
	oemLicenceAllocationType: Array<GraphQLTypes["vectric_oem_licence_allocation_type"]>,
	/** fetch data from the table: "vectric.sales_oemlicences" */
	oemLicences: Array<GraphQLTypes["vectric_sales_oemlicences"]>,
	/** fetch data from the table: "vectric.sales_oemlicences" using primary key columns */
	oemLicencesById?: GraphQLTypes["vectric_sales_oemlicences"],
	/** fetch data from the table: "vectric.oem_partners" */
	oemPartners: Array<GraphQLTypes["vectric_oem_partners"]>,
	/** fetch data from the table: "vectric.oem_partners" using primary key columns */
	oemPartnersById?: GraphQLTypes["vectric_oem_partners"],
	/** fetch data from the table: "vectric.oem_products" using primary key columns */
	oemProductByPk?: GraphQLTypes["vectric_oem_products"],
	/** fetch data from the table: "vectric.oem_products" */
	oemProducts: Array<GraphQLTypes["vectric_oem_products"]>,
	/** fetch data from the table: "vectric.oem_purchase_options" */
	oemPurchaseOptions: Array<GraphQLTypes["vectric_oem_purchase_options"]>,
	/** fetch data from the table: "vectric.oem_purchase_options" using primary key columns */
	oemPurchaseOptionsByOptionId?: GraphQLTypes["vectric_oem_purchase_options"],
	/** fetch aggregated fields from the table: "vectric.oem_purchase_options" */
	oemPurchaseOptions_aggregate: GraphQLTypes["vectric_oem_purchase_options_aggregate"],
	/** fetch data from the table: "vectric.oem_staff_customer" using primary key columns */
	oemStaffCustomerById?: GraphQLTypes["vectric_oem_staff_customer"],
	/** fetch data from the table: "vectric.oem_staff_customer" */
	oemStaffCustomers: Array<GraphQLTypes["vectric_oem_staff_customer"]>,
	/** fetch aggregated fields from the table: "vectric.oem_staff_customer" */
	oemStaffCustomers_aggregate: GraphQLTypes["vectric_oem_staff_customer_aggregate"],
	/** fetch data from the table: "vectric.oem_staff_admin_ownership" */
	oemStaffMembershipDetails: Array<GraphQLTypes["vectric_oem_staff_admin_ownership"]>,
	/** An array relationship */
	orders: Array<GraphQLTypes["vectric_sales_orders"]>,
	/** fetch data from the table: "vectric.sales_orders" using primary key columns */
	ordersByOrderId?: GraphQLTypes["vectric_sales_orders"],
	/** fetch data from the table: "vectric.organization_audit" using primary key columns */
	organizationAuditById?: GraphQLTypes["vectric_organization_audit"],
	/** fetch aggregated fields from the table: "vectric.organization_audit" */
	organizationAudit_aggregate: GraphQLTypes["vectric_organization_audit_aggregate"],
	/** fetch data from the table: "vectric.organizations" using primary key columns */
	organizationById?: GraphQLTypes["vectric_organizations"],
	/** fetch data from the table: "vectric.organization_memberships_admin_access" */
	organizationMembershipsAdminAccess: Array<GraphQLTypes["vectric_organization_memberships_admin_access"]>,
	/** fetch data from the table: "vectric.organization_orders" using primary key columns */
	organizationOrder?: GraphQLTypes["vectric_organization_orders"],
	/** fetch data from the table: "vectric.organization_order_items" using primary key columns */
	organizationOrderItem?: GraphQLTypes["vectric_organization_order_items"],
	/** fetch data from the table: "vectric.organization_order_items" */
	organizationOrderItems: Array<GraphQLTypes["vectric_organization_order_items"]>,
	/** fetch data from the table: "vectric.organization_orders" */
	organizationOrders: Array<GraphQLTypes["vectric_organization_orders"]>,
	/** fetch aggregated fields from the table: "vectric.organizations" */
	organization_aggregate: GraphQLTypes["vectric_organizations_aggregate"],
	/** fetch data from the table: "vectric.organizations" */
	organizations: Array<GraphQLTypes["vectric_organizations"]>,
	/** fetch data from the table: "vectric.organization_audit" */
	organiztionAudits: Array<GraphQLTypes["vectric_organization_audit"]>,
	/** fetch data from the table: "vectric.owned_items" using primary key columns */
	ownedItem?: GraphQLTypes["vectric_owned_items"],
	/** An array relationship */
	ownedItems: Array<GraphQLTypes["vectric_owned_items"]>,
	/** An aggregate relationship */
	ownedItems_aggregate: GraphQLTypes["vectric_owned_items_aggregate"],
	/** fetch data from the table: "vectric.owned_products" using primary key columns */
	ownedProduct?: GraphQLTypes["vectric_owned_products"],
	/** fetch data from the table: "vectric.owned_products" */
	ownedProducts: Array<GraphQLTypes["vectric_owned_products"]>,
	/** fetch aggregated fields from the table: "vectric.owned_products" */
	ownedProducts_aggregate: GraphQLTypes["vectric_owned_products_aggregate"],
	/** fetch data from the table: "vectric.security_passwordresettokens" */
	passwordResetTokens: Array<GraphQLTypes["vectric_security_passwordresettokens"]>,
	/** fetch data from the table: "vectric.security_passwordresettokens" using primary key columns */
	passwordResetTokensByPk?: GraphQLTypes["vectric_security_passwordresettokens"],
	/** fetch data from the table: "vectric.products_products" using primary key columns */
	productById?: GraphQLTypes["vectric_products_products"],
	/** fetch data from the table: "vectric.products_enhancement_eligibility" */
	productEnhancementEligibility: Array<GraphQLTypes["vectric_products_enhancement_eligibility"]>,
	/** fetch data from the table: "vectric.products_producttype" */
	productTypes: Array<GraphQLTypes["vectric_products_producttype"]>,
	/** fetch data from the table: "vectric.products_producttype" using primary key columns */
	productTypesById?: GraphQLTypes["vectric_products_producttype"],
	/** fetch data from the table: "vectric.products_upgrade_eligibility" using primary key columns */
	productUpgradeEligibilityById?: GraphQLTypes["vectric_products_upgrade_eligibility"],
	/** An array relationship */
	products: Array<GraphQLTypes["vectric_products_products"]>,
	/** fetch data from the table: "vectric.products_freeclipart" */
	productsFreeClipart: Array<GraphQLTypes["vectric_products_freeclipart"]>,
	/** fetch data from the table: "vectric.products_upgrade_eligibility" */
	productsUpgradeEligibility: Array<GraphQLTypes["vectric_products_upgrade_eligibility"]>,
	/** fetch data from the table: "vectric.questions" using primary key columns */
	questionById?: GraphQLTypes["vectric_questions"],
	/** fetch data from the table: "vectric.questions" */
	questions: Array<GraphQLTypes["vectric_questions"]>,
	/** fetch aggregated fields from the table: "vectric.questions" */
	questions_aggregate: GraphQLTypes["vectric_questions_aggregate"],
	/** fetch data from the table: "vectric.responses" using primary key columns */
	responseById?: GraphQLTypes["vectric_responses"],
	/** fetch data from the table: "vectric.responses" */
	responses: Array<GraphQLTypes["vectric_responses"]>,
	/** fetch aggregated fields from the table: "vectric.responses" */
	responses_aggregate: GraphQLTypes["vectric_responses_aggregate"],
	/** fetch data from the table: "vectric.saleable_products" using primary key columns */
	saleableProduct?: GraphQLTypes["vectric_saleable_products"],
	/** fetch data from the table: "vectric.saleable_products" */
	saleableProducts: Array<GraphQLTypes["vectric_saleable_products"]>,
	/** fetch aggregated fields from the table: "vectric.saleable_products" */
	saleableProducts_aggregate: GraphQLTypes["vectric_saleable_products_aggregate"],
	/** fetch aggregated fields from the table: "vectric.sales_customers" */
	salesCustomers_aggregate: GraphQLTypes["vectric_sales_customers_aggregate"],
	/** fetch data from the table: "vectric.sales_salesitem_products" */
	salesItemProduct: Array<GraphQLTypes["vectric_sales_salesitem_products"]>,
	/** fetch data from the table: "vectric.sales_salesitem_products" using primary key columns */
	salesItemProductById?: GraphQLTypes["vectric_sales_salesitem_products"],
	/** An array relationship */
	salesItems: Array<GraphQLTypes["vectric_sales_salesitems"]>,
	/** fetch data from the table: "vectric.sales_salesitems" using primary key columns */
	salesItemsById?: GraphQLTypes["vectric_sales_salesitems"],
	/** fetch data from the table: "vectric.scheduled_emails" */
	scheduledEmails: Array<GraphQLTypes["vectric_scheduled_emails"]>,
	/** fetch data from the table: "vectric.scheduled_emails" using primary key columns */
	scheduledEmailsById?: GraphQLTypes["vectric_scheduled_emails"],
	/** fetch aggregated fields from the table: "vectric.scheduled_emails" */
	scheduledEmails_aggregate: GraphQLTypes["vectric_scheduled_emails_aggregate"],
	/** fetch data from the table: "vectric.security_emailverificationtokens" using primary key columns */
	securityEmailVerificationTokenByToken?: GraphQLTypes["vectric_security_emailverificationtokens"],
	/** fetch data from the table: "vectric.security_emailverificationtokens" */
	securityEmailVerificationTokens: Array<GraphQLTypes["vectric_security_emailverificationtokens"]>,
	/** fetch data from the table: "vectric.security_userinvitations" */
	securityUserInvitations: Array<GraphQLTypes["vectric_security_userinvitations"]>,
	/** fetch data from the table: "vectric.security_users" */
	securityUsers: Array<GraphQLTypes["vectric_security_users"]>,
	/** fetch data from the table: "vectric.sales_customer_downloads" */
	selectCustomerDownloads: Array<GraphQLTypes["vectric_sales_customer_downloads"]>,
	/** fetch data from the table: "vectric.sales_customer_downloads" using primary key columns */
	selectCustomerDownloadsById?: GraphQLTypes["vectric_sales_customer_downloads"],
	/** fetch aggregated fields from the table: "vectric.sales_customer_downloads" */
	selectCustomerDownloads_aggregate: GraphQLTypes["vectric_sales_customer_downloads_aggregate"],
	/** fetch data from the table: "vectric.security_group_members" using primary key columns */
	selectSecurityGroupMembersById?: GraphQLTypes["vectric_security_group_members"],
	/** fetch data from the table: "vectric.security_group_members" */
	selectSecurityGrupMemebers: Array<GraphQLTypes["vectric_security_group_members"]>,
	/** fetch data from the table: "vectric.linkshortener_links" */
	shortLinks: Array<GraphQLTypes["vectric_linkshortener_links"]>,
	/** fetch data from the table: "vectric.linkshortener_links" using primary key columns */
	shortLinksByHash?: GraphQLTypes["vectric_linkshortener_links"],
	/** fetch aggregated fields from the table: "vectric.site_option_location" */
	siteOptionLocation_aggregate: GraphQLTypes["vectric_site_option_location_aggregate"],
	/** fetch data from the table: "vectric.site_option_location" */
	siteOptionLocations: Array<GraphQLTypes["vectric_site_option_location"]>,
	/** fetch data from the table: "vectric.site_option_location" using primary key columns */
	siteOptionLocationsById?: GraphQLTypes["vectric_site_option_location"],
	/** fetch data from the table: "vectric.site_options" */
	siteOptions: Array<GraphQLTypes["vectric_site_options"]>,
	/** fetch data from the table: "vectric.site_options" using primary key columns */
	siteOptionsById?: GraphQLTypes["vectric_site_options"],
	/** fetch aggregated fields from the table: "vectric.site_options" */
	siteOptions_aggregate: GraphQLTypes["vectric_site_options_aggregate"],
	/** fetch aggregated fields from the table: "vectric.toolpath_saver_token" */
	toolpathSaveToken_aggregate: GraphQLTypes["vectric_toolpath_saver_token_aggregate"],
	/** fetch data from the table: "vectric.toolpath_saver_token" using primary key columns */
	toolpathSaverTokenById?: GraphQLTypes["vectric_toolpath_saver_token"],
	/** fetch data from the table: "vectric.toolpath_saver_token" */
	toolpathSaverTokens: Array<GraphQLTypes["vectric_toolpath_saver_token"]>,
	/** fetch data from the table: "vectric.trial_order" using primary key columns */
	trialOrderById?: GraphQLTypes["vectric_trial_order"],
	/** fetch data from the table: "vectric.trial_order" */
	trialOrders: Array<GraphQLTypes["vectric_trial_order"]>,
	/** fetch aggregated fields from the table: "vectric.trial_order" */
	trialOrders_aggregate: GraphQLTypes["vectric_trial_order_aggregate"],
	/** fetch data from the table: "vectric.update_requests" using primary key columns */
	updateRequestById?: GraphQLTypes["vectric_update_requests"],
	/** fetch data from the table: "vectric.update_requests" */
	updateRequests: Array<GraphQLTypes["vectric_update_requests"]>,
	/** fetch data from the table: "vectric.upgrades_feature" using primary key columns */
	upgradeFeatureById?: GraphQLTypes["vectric_upgrades_feature"],
	/** fetch data from the table: "vectric.upgrades_feature" */
	upgradeFeatures: Array<GraphQLTypes["vectric_upgrades_feature"]>,
	/** fetch aggregated fields from the table: "vectric.upgrades_feature" */
	upgradeFeatures_aggregate: GraphQLTypes["vectric_upgrades_feature_aggregate"],
	/** fetch data from the table: "vectric.upgrades_product_type_feature" using primary key columns */
	upgradeProductTypeFeatureById?: GraphQLTypes["vectric_upgrades_product_type_feature"],
	/** An array relationship */
	upgradeProductTypeFeatures: Array<GraphQLTypes["vectric_upgrades_product_type_feature"]>,
	/** An aggregate relationship */
	upgradeProductTypeFeatures_aggregate: GraphQLTypes["vectric_upgrades_product_type_feature_aggregate"],
	/** An array relationship */
	upgradeTokens: Array<GraphQLTypes["vectric_upgrade_tokens"]>,
	/** fetch data from the table: "vectric.upgrade_tokens" using primary key columns */
	upgradeTokensById?: GraphQLTypes["vectric_upgrade_tokens"],
	/** fetch data from the table: "vectric.upgrades_version_feature" using primary key columns */
	upgradeVersionFeatureById?: GraphQLTypes["vectric_upgrades_version_feature"],
	/** fetch data from the table: "vectric.upgrades_version_feature" */
	upgradeVersionFeatures: Array<GraphQLTypes["vectric_upgrades_version_feature"]>,
	/** An aggregate relationship */
	upgradeVersionFeatures_aggregate: GraphQLTypes["vectric_upgrades_version_feature_aggregate"],
	/** fetch data from the table: "vectric.usergroup_2019_waitlist" */
	userGroupWaitingListEntries: Array<GraphQLTypes["vectric_usergroup_2019_waitlist"]>,
	/** fetch aggregated fields from the table: "vectric.usergroup_2019_waitlist" */
	userGroupWaitingListEntries_aggregate: GraphQLTypes["vectric_usergroup_2019_waitlist_aggregate"],
	/** fetch data from the table: "vectric.usergroup_2019_waitlist" using primary key columns */
	userGroupWaitingListEntryById?: GraphQLTypes["vectric_usergroup_2019_waitlist"],
	/** fetch data from the table: "vectric.active_memberships" */
	vectric_active_memberships: Array<GraphQLTypes["vectric_active_memberships"]>,
	/** fetch aggregated fields from the table: "vectric.active_memberships" */
	vectric_active_memberships_aggregate: GraphQLTypes["vectric_active_memberships_aggregate"],
	/** fetch data from the table: "vectric.active_upgrades" */
	vectric_active_upgrades: Array<GraphQLTypes["vectric_active_upgrades"]>,
	/** fetch aggregated fields from the table: "vectric.active_upgrades" */
	vectric_active_upgrades_aggregate: GraphQLTypes["vectric_active_upgrades_aggregate"],
	/** fetch aggregated fields from the table: "vectric.allocatable_bundles" */
	vectric_allocatable_bundles_aggregate: GraphQLTypes["vectric_allocatable_bundles_aggregate"],
	/** fetch aggregated fields from the table: "vectric.allocated_bundles" */
	vectric_allocated_bundles_aggregate: GraphQLTypes["vectric_allocated_bundles_aggregate"],
	/** fetch data from the table: "vectric.allocation_summary_file_type" */
	vectric_allocation_summary_file_type: Array<GraphQLTypes["vectric_allocation_summary_file_type"]>,
	/** fetch aggregated fields from the table: "vectric.allocation_summary_file_type" */
	vectric_allocation_summary_file_type_aggregate: GraphQLTypes["vectric_allocation_summary_file_type_aggregate"],
	/** fetch data from the table: "vectric.allocation_summary_file_type" using primary key columns */
	vectric_allocation_summary_file_type_by_pk?: GraphQLTypes["vectric_allocation_summary_file_type"],
	/** fetch data from the table: "vectric.continents" */
	vectric_continents: Array<GraphQLTypes["vectric_continents"]>,
	/** fetch aggregated fields from the table: "vectric.continents" */
	vectric_continents_aggregate: GraphQLTypes["vectric_continents_aggregate"],
	/** fetch data from the table: "vectric.continents" using primary key columns */
	vectric_continents_by_pk?: GraphQLTypes["vectric_continents"],
	/** fetch aggregated fields from the table: "vectric.customer_area" */
	vectric_customer_area_aggregate: GraphQLTypes["vectric_customer_area_aggregate"],
	/** fetch aggregated fields from the table: "vectric.customer_area_file" */
	vectric_customer_area_file_aggregate: GraphQLTypes["vectric_customer_area_file_aggregate"],
	/** fetch aggregated fields from the table: "vectric.customer_status" */
	vectric_customer_status_aggregate: GraphQLTypes["vectric_customer_status_aggregate"],
	/** fetch data from the table: "vectric.download" */
	vectric_download: Array<GraphQLTypes["vectric_download"]>,
	/** fetch aggregated fields from the table: "vectric.download" */
	vectric_download_aggregate: GraphQLTypes["vectric_download_aggregate"],
	/** fetch data from the table: "vectric.download_record" */
	vectric_download_record: Array<GraphQLTypes["vectric_download_record"]>,
	/** fetch aggregated fields from the table: "vectric.download_record" */
	vectric_download_record_aggregate: GraphQLTypes["vectric_download_record_aggregate"],
	/** fetch data from the table: "vectric.download_record" using primary key columns */
	vectric_download_record_by_pk?: GraphQLTypes["vectric_download_record"],
	/** fetch aggregated fields from the table: "vectric.enhancement_tokens" */
	vectric_enhancement_tokens_aggregate: GraphQLTypes["vectric_enhancement_tokens_aggregate"],
	/** fetch data from the table: "vectric.enhancement_tokens" using primary key columns */
	vectric_enhancement_tokens_by_pk?: GraphQLTypes["vectric_enhancement_tokens"],
	/** fetch data from the table: "vectric.entitled_product_version_code_view" */
	vectric_entitled_product_version_code_view: Array<GraphQLTypes["vectric_entitled_product_version_code_view"]>,
	/** fetch aggregated fields from the table: "vectric.entitled_product_version_code_view" */
	vectric_entitled_product_version_code_view_aggregate: GraphQLTypes["vectric_entitled_product_version_code_view_aggregate"],
	/** fetch aggregated fields from the table: "vectric.free_clipart_tokens" */
	vectric_free_clipart_tokens_aggregate: GraphQLTypes["vectric_free_clipart_tokens_aggregate"],
	/** fetch aggregated fields from the table: "vectric.freeclipart" */
	vectric_freeclipart_aggregate: GraphQLTypes["vectric_freeclipart_aggregate"],
	/** fetch data from the table: "vectric.freeclipart" using primary key columns */
	vectric_freeclipart_by_pk?: GraphQLTypes["vectric_freeclipart"],
	/** fetch aggregated fields from the table: "vectric.freeclipart_category" */
	vectric_freeclipart_category_aggregate: GraphQLTypes["vectric_freeclipart_category_aggregate"],
	/** fetch data from the table: "vectric.freeclipart_category" using primary key columns */
	vectric_freeclipart_category_by_pk?: GraphQLTypes["vectric_freeclipart_category"],
	/** fetch data from the table: "vectric.freeclipart_download_record" */
	vectric_freeclipart_download_record: Array<GraphQLTypes["vectric_freeclipart_download_record"]>,
	/** fetch aggregated fields from the table: "vectric.freeclipart_download_record" */
	vectric_freeclipart_download_record_aggregate: GraphQLTypes["vectric_freeclipart_download_record_aggregate"],
	/** fetch data from the table: "vectric.freeclipart_download_record" using primary key columns */
	vectric_freeclipart_download_record_by_pk?: GraphQLTypes["vectric_freeclipart_download_record"],
	/** fetch data from the table: "vectric.group_info" */
	vectric_group_info: Array<GraphQLTypes["vectric_group_info"]>,
	/** fetch aggregated fields from the table: "vectric.group_info" */
	vectric_group_info_aggregate: GraphQLTypes["vectric_group_info_aggregate"],
	/** fetch data from the table: "vectric.group_roles" */
	vectric_group_roles: Array<GraphQLTypes["vectric_group_roles"]>,
	/** fetch aggregated fields from the table: "vectric.group_roles" */
	vectric_group_roles_aggregate: GraphQLTypes["vectric_group_roles_aggregate"],
	/** fetch data from the table: "vectric.group_roles" using primary key columns */
	vectric_group_roles_by_pk?: GraphQLTypes["vectric_group_roles"],
	/** fetch data from the table: "vectric.group_user_role" */
	vectric_group_user_role: Array<GraphQLTypes["vectric_group_user_role"]>,
	/** fetch aggregated fields from the table: "vectric.group_user_role" */
	vectric_group_user_role_aggregate: GraphQLTypes["vectric_group_user_role_aggregate"],
	/** fetch data from the table: "vectric.group_user_role" using primary key columns */
	vectric_group_user_role_by_pk?: GraphQLTypes["vectric_group_user_role"],
	/** fetch data from the table: "vectric.groups" */
	vectric_groups: Array<GraphQLTypes["vectric_groups"]>,
	/** fetch aggregated fields from the table: "vectric.groups" */
	vectric_groups_aggregate: GraphQLTypes["vectric_groups_aggregate"],
	/** fetch data from the table: "vectric.groups" using primary key columns */
	vectric_groups_by_pk?: GraphQLTypes["vectric_groups"],
	/** fetch data from the table: "vectric.language_codes" */
	vectric_language_codes: Array<GraphQLTypes["vectric_language_codes"]>,
	/** fetch aggregated fields from the table: "vectric.language_codes" */
	vectric_language_codes_aggregate: GraphQLTypes["vectric_language_codes_aggregate"],
	/** fetch data from the table: "vectric.language_codes" using primary key columns */
	vectric_language_codes_by_pk?: GraphQLTypes["vectric_language_codes"],
	/** fetch data from the table: "vectric.licence_log" */
	vectric_licence_log: Array<GraphQLTypes["vectric_licence_log"]>,
	/** fetch aggregated fields from the table: "vectric.licence_log" */
	vectric_licence_log_aggregate: GraphQLTypes["vectric_licence_log_aggregate"],
	/** fetch data from the table: "vectric.licence_log" using primary key columns */
	vectric_licence_log_by_pk?: GraphQLTypes["vectric_licence_log"],
	/** fetch aggregated fields from the table: "vectric.linkshortener_links" */
	vectric_linkshortener_links_aggregate: GraphQLTypes["vectric_linkshortener_links_aggregate"],
	/** fetch data from the table: "vectric.makerspace_requests" */
	vectric_makerspace_requests: Array<GraphQLTypes["vectric_makerspace_requests"]>,
	/** fetch aggregated fields from the table: "vectric.makerspace_requests" */
	vectric_makerspace_requests_aggregate: GraphQLTypes["vectric_makerspace_requests_aggregate"],
	/** fetch data from the table: "vectric.makerspace_requests" using primary key columns */
	vectric_makerspace_requests_by_pk?: GraphQLTypes["vectric_makerspace_requests"],
	/** fetch data from the table: "vectric.membership_invitation_status" */
	vectric_membership_invitation_status: Array<GraphQLTypes["vectric_membership_invitation_status"]>,
	/** fetch aggregated fields from the table: "vectric.membership_invitation_status" */
	vectric_membership_invitation_status_aggregate: GraphQLTypes["vectric_membership_invitation_status_aggregate"],
	/** fetch data from the table: "vectric.membership_invitation_status" using primary key columns */
	vectric_membership_invitation_status_by_pk?: GraphQLTypes["vectric_membership_invitation_status"],
	/** fetch data from the table: "vectric.membership_roles" */
	vectric_membership_roles: Array<GraphQLTypes["vectric_membership_roles"]>,
	/** fetch aggregated fields from the table: "vectric.membership_roles" */
	vectric_membership_roles_aggregate: GraphQLTypes["vectric_membership_roles_aggregate"],
	/** fetch data from the table: "vectric.membership_roles" using primary key columns */
	vectric_membership_roles_by_pk?: GraphQLTypes["vectric_membership_roles"],
	/** fetch data from the table: "vectric.membership_status" */
	vectric_membership_status: Array<GraphQLTypes["vectric_membership_status"]>,
	/** fetch aggregated fields from the table: "vectric.membership_status" */
	vectric_membership_status_aggregate: GraphQLTypes["vectric_membership_status_aggregate"],
	/** fetch data from the table: "vectric.membership_status" using primary key columns */
	vectric_membership_status_by_pk?: GraphQLTypes["vectric_membership_status"],
	/** fetch data from the table: "vectric.oauth_client_details" */
	vectric_oauth_client_details: Array<GraphQLTypes["vectric_oauth_client_details"]>,
	/** fetch aggregated fields from the table: "vectric.oauth_client_details" */
	vectric_oauth_client_details_aggregate: GraphQLTypes["vectric_oauth_client_details_aggregate"],
	/** fetch data from the table: "vectric.oauth_client_details" using primary key columns */
	vectric_oauth_client_details_by_pk?: GraphQLTypes["vectric_oauth_client_details"],
	/** fetch data from the table: "vectric.oem_detailed_products" */
	vectric_oem_detailed_products: Array<GraphQLTypes["vectric_oem_detailed_products"]>,
	/** fetch aggregated fields from the table: "vectric.oem_detailed_products" */
	vectric_oem_detailed_products_aggregate: GraphQLTypes["vectric_oem_detailed_products_aggregate"],
	/** fetch data from the table: "vectric.oem_detailed_products" using primary key columns */
	vectric_oem_detailed_products_by_pk?: GraphQLTypes["vectric_oem_detailed_products"],
	/** fetch data from the table: "vectric.oem_fastspring_item_bundle" */
	vectric_oem_fastspring_item_bundle: Array<GraphQLTypes["vectric_oem_fastspring_item_bundle"]>,
	/** fetch aggregated fields from the table: "vectric.oem_fastspring_item_bundle" */
	vectric_oem_fastspring_item_bundle_aggregate: GraphQLTypes["vectric_oem_fastspring_item_bundle_aggregate"],
	/** fetch data from the table: "vectric.oem_fastspring_item_bundle" using primary key columns */
	vectric_oem_fastspring_item_bundle_by_pk?: GraphQLTypes["vectric_oem_fastspring_item_bundle"],
	/** fetch data from the table: "vectric.oem_invite_status" */
	vectric_oem_invite_status: Array<GraphQLTypes["vectric_oem_invite_status"]>,
	/** fetch aggregated fields from the table: "vectric.oem_invite_status" */
	vectric_oem_invite_status_aggregate: GraphQLTypes["vectric_oem_invite_status_aggregate"],
	/** fetch data from the table: "vectric.oem_invite_status" using primary key columns */
	vectric_oem_invite_status_by_pk?: GraphQLTypes["vectric_oem_invite_status"],
	/** fetch aggregated fields from the table: "vectric.oem_licence_allocation_type" */
	vectric_oem_licence_allocation_type_aggregate: GraphQLTypes["vectric_oem_licence_allocation_type_aggregate"],
	/** fetch data from the table: "vectric.oem_licence_allocation_type" using primary key columns */
	vectric_oem_licence_allocation_type_by_pk?: GraphQLTypes["vectric_oem_licence_allocation_type"],
	/** fetch aggregated fields from the table: "vectric.oem_partners" */
	vectric_oem_partners_aggregate: GraphQLTypes["vectric_oem_partners_aggregate"],
	/** fetch aggregated fields from the table: "vectric.oem_products" */
	vectric_oem_products_aggregate: GraphQLTypes["vectric_oem_products_aggregate"],
	/** fetch aggregated fields from the table: "vectric.oem_staff_admin_ownership" */
	vectric_oem_staff_admin_ownership_aggregate: GraphQLTypes["vectric_oem_staff_admin_ownership_aggregate"],
	/** fetch aggregated fields from the table: "vectric.organization_memberships_admin_access" */
	vectric_organization_memberships_admin_access_aggregate: GraphQLTypes["vectric_organization_memberships_admin_access_aggregate"],
	/** fetch aggregated fields from the table: "vectric.organization_order_items" */
	vectric_organization_order_items_aggregate: GraphQLTypes["vectric_organization_order_items_aggregate"],
	/** fetch aggregated fields from the table: "vectric.organization_orders" */
	vectric_organization_orders_aggregate: GraphQLTypes["vectric_organization_orders_aggregate"],
	/** fetch data from the table: "vectric.organization_types" */
	vectric_organization_types: Array<GraphQLTypes["vectric_organization_types"]>,
	/** fetch aggregated fields from the table: "vectric.organization_types" */
	vectric_organization_types_aggregate: GraphQLTypes["vectric_organization_types_aggregate"],
	/** fetch data from the table: "vectric.organization_types" using primary key columns */
	vectric_organization_types_by_pk?: GraphQLTypes["vectric_organization_types"],
	/** fetch aggregated fields from the table: "vectric.products_clipartcollection_links" */
	vectric_products_clipartcollection_links_aggregate: GraphQLTypes["vectric_products_clipartcollection_links_aggregate"],
	/** fetch data from the table: "vectric.products_clipartcollection_links" using primary key columns */
	vectric_products_clipartcollection_links_by_pk?: GraphQLTypes["vectric_products_clipartcollection_links"],
	/** fetch aggregated fields from the table: "vectric.products_enhancement_eligibility" */
	vectric_products_enhancement_eligibility_aggregate: GraphQLTypes["vectric_products_enhancement_eligibility_aggregate"],
	/** fetch data from the table: "vectric.products_enhancement_eligibility" using primary key columns */
	vectric_products_enhancement_eligibility_by_pk?: GraphQLTypes["vectric_products_enhancement_eligibility"],
	/** fetch aggregated fields from the table: "vectric.products_freeclipart" */
	vectric_products_freeclipart_aggregate: GraphQLTypes["vectric_products_freeclipart_aggregate"],
	/** fetch data from the table: "vectric.products_freeclipart" using primary key columns */
	vectric_products_freeclipart_by_pk?: GraphQLTypes["vectric_products_freeclipart"],
	/** fetch data from the table: "vectric.products_fulfilments" */
	vectric_products_fulfilments: Array<GraphQLTypes["vectric_products_fulfilments"]>,
	/** fetch aggregated fields from the table: "vectric.products_fulfilments" */
	vectric_products_fulfilments_aggregate: GraphQLTypes["vectric_products_fulfilments_aggregate"],
	/** fetch data from the table: "vectric.products_fulfilments" using primary key columns */
	vectric_products_fulfilments_by_pk?: GraphQLTypes["vectric_products_fulfilments"],
	/** fetch data from the table: "vectric.products_fulfilmenttypes" */
	vectric_products_fulfilmenttypes: Array<GraphQLTypes["vectric_products_fulfilmenttypes"]>,
	/** fetch aggregated fields from the table: "vectric.products_fulfilmenttypes" */
	vectric_products_fulfilmenttypes_aggregate: GraphQLTypes["vectric_products_fulfilmenttypes_aggregate"],
	/** fetch data from the table: "vectric.products_fulfilmenttypes" using primary key columns */
	vectric_products_fulfilmenttypes_by_pk?: GraphQLTypes["vectric_products_fulfilmenttypes"],
	/** fetch data from the table: "vectric.products_product_fulfilments" */
	vectric_products_product_fulfilments: Array<GraphQLTypes["vectric_products_product_fulfilments"]>,
	/** fetch aggregated fields from the table: "vectric.products_product_fulfilments" */
	vectric_products_product_fulfilments_aggregate: GraphQLTypes["vectric_products_product_fulfilments_aggregate"],
	/** fetch data from the table: "vectric.products_product_fulfilments" using primary key columns */
	vectric_products_product_fulfilments_by_pk?: GraphQLTypes["vectric_products_product_fulfilments"],
	/** fetch data from the table: "vectric.products_product_licence_type" */
	vectric_products_product_licence_type: Array<GraphQLTypes["vectric_products_product_licence_type"]>,
	/** fetch aggregated fields from the table: "vectric.products_product_licence_type" */
	vectric_products_product_licence_type_aggregate: GraphQLTypes["vectric_products_product_licence_type_aggregate"],
	/** fetch data from the table: "vectric.products_product_licence_type" using primary key columns */
	vectric_products_product_licence_type_by_pk?: GraphQLTypes["vectric_products_product_licence_type"],
	/** fetch aggregated fields from the table: "vectric.products_products" */
	vectric_products_products_aggregate: GraphQLTypes["vectric_products_products_aggregate"],
	/** fetch aggregated fields from the table: "vectric.products_producttype" */
	vectric_products_producttype_aggregate: GraphQLTypes["vectric_products_producttype_aggregate"],
	/** fetch aggregated fields from the table: "vectric.products_upgrade_eligibility" */
	vectric_products_upgrade_eligibility_aggregate: GraphQLTypes["vectric_products_upgrade_eligibility_aggregate"],
	/** fetch data from the table: "vectric.sales_customerupdates" */
	vectric_sales_customerupdates: Array<GraphQLTypes["vectric_sales_customerupdates"]>,
	/** fetch aggregated fields from the table: "vectric.sales_customerupdates" */
	vectric_sales_customerupdates_aggregate: GraphQLTypes["vectric_sales_customerupdates_aggregate"],
	/** fetch data from the table: "vectric.sales_customerupdates" using primary key columns */
	vectric_sales_customerupdates_by_pk?: GraphQLTypes["vectric_sales_customerupdates"],
	/** fetch aggregated fields from the table: "vectric.sales_oemlicences" */
	vectric_sales_oemlicences_aggregate: GraphQLTypes["vectric_sales_oemlicences_aggregate"],
	/** fetch aggregated fields from the table: "vectric.sales_orders" */
	vectric_sales_orders_aggregate: GraphQLTypes["vectric_sales_orders_aggregate"],
	/** fetch aggregated fields from the table: "vectric.sales_salesitem_products" */
	vectric_sales_salesitem_products_aggregate: GraphQLTypes["vectric_sales_salesitem_products_aggregate"],
	/** fetch data from the table: "vectric.sales_salesitemproduct_status" */
	vectric_sales_salesitemproduct_status: Array<GraphQLTypes["vectric_sales_salesitemproduct_status"]>,
	/** fetch aggregated fields from the table: "vectric.sales_salesitemproduct_status" */
	vectric_sales_salesitemproduct_status_aggregate: GraphQLTypes["vectric_sales_salesitemproduct_status_aggregate"],
	/** fetch data from the table: "vectric.sales_salesitemproduct_status" using primary key columns */
	vectric_sales_salesitemproduct_status_by_pk?: GraphQLTypes["vectric_sales_salesitemproduct_status"],
	/** fetch aggregated fields from the table: "vectric.sales_salesitems" */
	vectric_sales_salesitems_aggregate: GraphQLTypes["vectric_sales_salesitems_aggregate"],
	/** fetch aggregated fields from the table: "vectric.security_emailverificationtokens" */
	vectric_security_emailverificationtokens_aggregate: GraphQLTypes["vectric_security_emailverificationtokens_aggregate"],
	/** fetch data from the table: "vectric.security_group_authorities" */
	vectric_security_group_authorities: Array<GraphQLTypes["vectric_security_group_authorities"]>,
	/** fetch aggregated fields from the table: "vectric.security_group_authorities" */
	vectric_security_group_authorities_aggregate: GraphQLTypes["vectric_security_group_authorities_aggregate"],
	/** fetch aggregated fields from the table: "vectric.security_group_members" */
	vectric_security_group_members_aggregate: GraphQLTypes["vectric_security_group_members_aggregate"],
	/** fetch aggregated fields from the table: "vectric.security_passwordresettokens" */
	vectric_security_passwordresettokens_aggregate: GraphQLTypes["vectric_security_passwordresettokens_aggregate"],
	/** fetch aggregated fields from the table: "vectric.security_userinvitations" */
	vectric_security_userinvitations_aggregate: GraphQLTypes["vectric_security_userinvitations_aggregate"],
	/** fetch data from the table: "vectric.security_userinvitations" using primary key columns */
	vectric_security_userinvitations_by_pk?: GraphQLTypes["vectric_security_userinvitations"],
	/** fetch aggregated fields from the table: "vectric.security_users" */
	vectric_security_users_aggregate: GraphQLTypes["vectric_security_users_aggregate"],
	/** fetch data from the table: "vectric.security_users" using primary key columns */
	vectric_security_users_by_pk?: GraphQLTypes["vectric_security_users"],
	/** fetch data from the table: "vectric.subscription_contract_status" */
	vectric_subscription_contract_status: Array<GraphQLTypes["vectric_subscription_contract_status"]>,
	/** fetch aggregated fields from the table: "vectric.subscription_contract_status" */
	vectric_subscription_contract_status_aggregate: GraphQLTypes["vectric_subscription_contract_status_aggregate"],
	/** fetch data from the table: "vectric.subscription_contract_status" using primary key columns */
	vectric_subscription_contract_status_by_pk?: GraphQLTypes["vectric_subscription_contract_status"],
	/** fetch data from the table: "vectric.subscription_contracts" */
	vectric_subscription_contracts: Array<GraphQLTypes["vectric_subscription_contracts"]>,
	/** fetch aggregated fields from the table: "vectric.subscription_contracts" */
	vectric_subscription_contracts_aggregate: GraphQLTypes["vectric_subscription_contracts_aggregate"],
	/** fetch data from the table: "vectric.subscription_contracts" using primary key columns */
	vectric_subscription_contracts_by_pk?: GraphQLTypes["vectric_subscription_contracts"],
	/** fetch data from the table: "vectric.subscription_events" */
	vectric_subscription_events: Array<GraphQLTypes["vectric_subscription_events"]>,
	/** fetch aggregated fields from the table: "vectric.subscription_events" */
	vectric_subscription_events_aggregate: GraphQLTypes["vectric_subscription_events_aggregate"],
	/** fetch data from the table: "vectric.subscription_events" using primary key columns */
	vectric_subscription_events_by_pk?: GraphQLTypes["vectric_subscription_events"],
	/** fetch aggregated fields from the table: "vectric.update_requests" */
	vectric_update_requests_aggregate: GraphQLTypes["vectric_update_requests_aggregate"],
	/** fetch aggregated fields from the table: "vectric.upgrade_tokens" */
	vectric_upgrade_tokens_aggregate: GraphQLTypes["vectric_upgrade_tokens_aggregate"],
	/** fetch data from the table: "vectric.version_code" */
	vectric_version_code: Array<GraphQLTypes["vectric_version_code"]>,
	/** fetch aggregated fields from the table: "vectric.version_code" */
	vectric_version_code_aggregate: GraphQLTypes["vectric_version_code_aggregate"],
	/** fetch data from the table: "vectric.version_code" using primary key columns */
	vectric_version_code_by_pk?: GraphQLTypes["vectric_version_code"],
	/** fetch data from the table: "vectric.products_versioncodes" using primary key columns */
	versionCodeById?: GraphQLTypes["vectric_products_versioncodes"],
	/** fetch data from the table: "vectric.products_versioncodes" */
	versionCodes: Array<GraphQLTypes["vectric_products_versioncodes"]>,
	/** fetch aggregated fields from the table: "vectric.products_versioncodes" */
	versionCodes_aggregate: GraphQLTypes["vectric_products_versioncodes_aggregate"],
	/** fetch data from the table: "vectric.customer_zd_uploads" */
	zendeskUploads: Array<GraphQLTypes["vectric_customer_zd_uploads"]>,
	/** fetch data from the table: "vectric.customer_zd_uploads" using primary key columns */
	zendeskUploadsById?: GraphQLTypes["vectric_customer_zd_uploads"],
	/** fetch aggregated fields from the table: "vectric.customer_zd_uploads" */
	zendeskUploads_aggregate: GraphQLTypes["vectric_customer_zd_uploads_aggregate"]
};
	/** columns and relationships of "vectric.active_memberships" */
["vectric_active_memberships"]: {
	__typename: "vectric_active_memberships",
	customerId?: GraphQLTypes["bigint"],
	isAdmin?: boolean,
	membershipId?: number,
	/** An object relationship */
	organization?: GraphQLTypes["vectric_organizations"],
	organizationId?: number,
	role?: string
};
	/** aggregated selection of "vectric.active_memberships" */
["vectric_active_memberships_aggregate"]: {
	__typename: "vectric_active_memberships_aggregate",
	aggregate?: GraphQLTypes["vectric_active_memberships_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_active_memberships"]>
};
	/** aggregate fields of "vectric.active_memberships" */
["vectric_active_memberships_aggregate_fields"]: {
	__typename: "vectric_active_memberships_aggregate_fields",
	avg?: GraphQLTypes["vectric_active_memberships_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_active_memberships_max_fields"],
	min?: GraphQLTypes["vectric_active_memberships_min_fields"],
	stddev?: GraphQLTypes["vectric_active_memberships_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_active_memberships_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_active_memberships_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_active_memberships_sum_fields"],
	var_pop?: GraphQLTypes["vectric_active_memberships_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_active_memberships_var_samp_fields"],
	variance?: GraphQLTypes["vectric_active_memberships_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_active_memberships_avg_fields"]: {
	__typename: "vectric_active_memberships_avg_fields",
	customerId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** aggregate max on columns */
["vectric_active_memberships_max_fields"]: {
	__typename: "vectric_active_memberships_max_fields",
	customerId?: GraphQLTypes["bigint"],
	membershipId?: number,
	organizationId?: number,
	role?: string
};
	/** aggregate min on columns */
["vectric_active_memberships_min_fields"]: {
	__typename: "vectric_active_memberships_min_fields",
	customerId?: GraphQLTypes["bigint"],
	membershipId?: number,
	organizationId?: number,
	role?: string
};
	/** aggregate stddev on columns */
["vectric_active_memberships_stddev_fields"]: {
	__typename: "vectric_active_memberships_stddev_fields",
	customerId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_active_memberships_stddev_pop_fields"]: {
	__typename: "vectric_active_memberships_stddev_pop_fields",
	customerId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_active_memberships_stddev_samp_fields"]: {
	__typename: "vectric_active_memberships_stddev_samp_fields",
	customerId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** aggregate sum on columns */
["vectric_active_memberships_sum_fields"]: {
	__typename: "vectric_active_memberships_sum_fields",
	customerId?: GraphQLTypes["bigint"],
	membershipId?: number,
	organizationId?: number
};
	/** aggregate var_pop on columns */
["vectric_active_memberships_var_pop_fields"]: {
	__typename: "vectric_active_memberships_var_pop_fields",
	customerId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** aggregate var_samp on columns */
["vectric_active_memberships_var_samp_fields"]: {
	__typename: "vectric_active_memberships_var_samp_fields",
	customerId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** aggregate variance on columns */
["vectric_active_memberships_variance_fields"]: {
	__typename: "vectric_active_memberships_variance_fields",
	customerId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** columns and relationships of "vectric.active_upgrades" */
["vectric_active_upgrades"]: {
	__typename: "vectric_active_upgrades",
	eligibility_id?: GraphQLTypes["bigint"],
	fastspring_id?: string,
	/** An object relationship */
	fromProduct?: GraphQLTypes["vectric_products_products"],
	from_product_id?: GraphQLTypes["bigint"],
	from_product_name?: string,
	price?: GraphQLTypes["numeric"],
	summary?: string,
	/** An object relationship */
	toProduct?: GraphQLTypes["vectric_products_products"],
	to_product_id?: GraphQLTypes["bigint"],
	to_product_name?: string
};
	/** aggregated selection of "vectric.active_upgrades" */
["vectric_active_upgrades_aggregate"]: {
	__typename: "vectric_active_upgrades_aggregate",
	aggregate?: GraphQLTypes["vectric_active_upgrades_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_active_upgrades"]>
};
	/** aggregate fields of "vectric.active_upgrades" */
["vectric_active_upgrades_aggregate_fields"]: {
	__typename: "vectric_active_upgrades_aggregate_fields",
	avg?: GraphQLTypes["vectric_active_upgrades_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_active_upgrades_max_fields"],
	min?: GraphQLTypes["vectric_active_upgrades_min_fields"],
	stddev?: GraphQLTypes["vectric_active_upgrades_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_active_upgrades_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_active_upgrades_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_active_upgrades_sum_fields"],
	var_pop?: GraphQLTypes["vectric_active_upgrades_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_active_upgrades_var_samp_fields"],
	variance?: GraphQLTypes["vectric_active_upgrades_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_active_upgrades_avg_fields"]: {
	__typename: "vectric_active_upgrades_avg_fields",
	eligibility_id?: number,
	from_product_id?: number,
	price?: number,
	to_product_id?: number
};
	/** aggregate max on columns */
["vectric_active_upgrades_max_fields"]: {
	__typename: "vectric_active_upgrades_max_fields",
	eligibility_id?: GraphQLTypes["bigint"],
	fastspring_id?: string,
	from_product_id?: GraphQLTypes["bigint"],
	from_product_name?: string,
	price?: GraphQLTypes["numeric"],
	summary?: string,
	to_product_id?: GraphQLTypes["bigint"],
	to_product_name?: string
};
	/** aggregate min on columns */
["vectric_active_upgrades_min_fields"]: {
	__typename: "vectric_active_upgrades_min_fields",
	eligibility_id?: GraphQLTypes["bigint"],
	fastspring_id?: string,
	from_product_id?: GraphQLTypes["bigint"],
	from_product_name?: string,
	price?: GraphQLTypes["numeric"],
	summary?: string,
	to_product_id?: GraphQLTypes["bigint"],
	to_product_name?: string
};
	/** aggregate stddev on columns */
["vectric_active_upgrades_stddev_fields"]: {
	__typename: "vectric_active_upgrades_stddev_fields",
	eligibility_id?: number,
	from_product_id?: number,
	price?: number,
	to_product_id?: number
};
	/** aggregate stddev_pop on columns */
["vectric_active_upgrades_stddev_pop_fields"]: {
	__typename: "vectric_active_upgrades_stddev_pop_fields",
	eligibility_id?: number,
	from_product_id?: number,
	price?: number,
	to_product_id?: number
};
	/** aggregate stddev_samp on columns */
["vectric_active_upgrades_stddev_samp_fields"]: {
	__typename: "vectric_active_upgrades_stddev_samp_fields",
	eligibility_id?: number,
	from_product_id?: number,
	price?: number,
	to_product_id?: number
};
	/** aggregate sum on columns */
["vectric_active_upgrades_sum_fields"]: {
	__typename: "vectric_active_upgrades_sum_fields",
	eligibility_id?: GraphQLTypes["bigint"],
	from_product_id?: GraphQLTypes["bigint"],
	price?: GraphQLTypes["numeric"],
	to_product_id?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_active_upgrades_var_pop_fields"]: {
	__typename: "vectric_active_upgrades_var_pop_fields",
	eligibility_id?: number,
	from_product_id?: number,
	price?: number,
	to_product_id?: number
};
	/** aggregate var_samp on columns */
["vectric_active_upgrades_var_samp_fields"]: {
	__typename: "vectric_active_upgrades_var_samp_fields",
	eligibility_id?: number,
	from_product_id?: number,
	price?: number,
	to_product_id?: number
};
	/** aggregate variance on columns */
["vectric_active_upgrades_variance_fields"]: {
	__typename: "vectric_active_upgrades_variance_fields",
	eligibility_id?: number,
	from_product_id?: number,
	price?: number,
	to_product_id?: number
};
	/** columns and relationships of "vectric.allocatable_bundles" */
["vectric_allocatable_bundles"]: {
	__typename: "vectric_allocatable_bundles",
	/** An object relationship */
	allocatableProduct?: GraphQLTypes["vectric_products_products"],
	bundleId?: string,
	/** An array relationship */
	licences: Array<GraphQLTypes["vectric_sales_oemlicences"]>,
	/** An aggregate relationship */
	licences_aggregate: GraphQLTypes["vectric_sales_oemlicences_aggregate"],
	/** An object relationship */
	partner?: GraphQLTypes["vectric_oem_partners"],
	partnerId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["bigint"],
	productDisplayName?: string,
	typeDisplayName?: string
};
	/** aggregated selection of "vectric.allocatable_bundles" */
["vectric_allocatable_bundles_aggregate"]: {
	__typename: "vectric_allocatable_bundles_aggregate",
	aggregate?: GraphQLTypes["vectric_allocatable_bundles_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_allocatable_bundles"]>
};
	/** aggregate fields of "vectric.allocatable_bundles" */
["vectric_allocatable_bundles_aggregate_fields"]: {
	__typename: "vectric_allocatable_bundles_aggregate_fields",
	avg?: GraphQLTypes["vectric_allocatable_bundles_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_allocatable_bundles_max_fields"],
	min?: GraphQLTypes["vectric_allocatable_bundles_min_fields"],
	stddev?: GraphQLTypes["vectric_allocatable_bundles_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_allocatable_bundles_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_allocatable_bundles_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_allocatable_bundles_sum_fields"],
	var_pop?: GraphQLTypes["vectric_allocatable_bundles_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_allocatable_bundles_var_samp_fields"],
	variance?: GraphQLTypes["vectric_allocatable_bundles_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_allocatable_bundles_avg_fields"]: {
	__typename: "vectric_allocatable_bundles_avg_fields",
	partnerId?: number,
	product?: number
};
	/** aggregate max on columns */
["vectric_allocatable_bundles_max_fields"]: {
	__typename: "vectric_allocatable_bundles_max_fields",
	bundleId?: string,
	partnerId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["bigint"],
	productDisplayName?: string,
	typeDisplayName?: string
};
	/** aggregate min on columns */
["vectric_allocatable_bundles_min_fields"]: {
	__typename: "vectric_allocatable_bundles_min_fields",
	bundleId?: string,
	partnerId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["bigint"],
	productDisplayName?: string,
	typeDisplayName?: string
};
	/** response of any mutation on the table "vectric.allocatable_bundles" */
["vectric_allocatable_bundles_mutation_response"]: {
	__typename: "vectric_allocatable_bundles_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_allocatable_bundles"]>
};
	/** aggregate stddev on columns */
["vectric_allocatable_bundles_stddev_fields"]: {
	__typename: "vectric_allocatable_bundles_stddev_fields",
	partnerId?: number,
	product?: number
};
	/** aggregate stddev_pop on columns */
["vectric_allocatable_bundles_stddev_pop_fields"]: {
	__typename: "vectric_allocatable_bundles_stddev_pop_fields",
	partnerId?: number,
	product?: number
};
	/** aggregate stddev_samp on columns */
["vectric_allocatable_bundles_stddev_samp_fields"]: {
	__typename: "vectric_allocatable_bundles_stddev_samp_fields",
	partnerId?: number,
	product?: number
};
	/** aggregate sum on columns */
["vectric_allocatable_bundles_sum_fields"]: {
	__typename: "vectric_allocatable_bundles_sum_fields",
	partnerId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_allocatable_bundles_var_pop_fields"]: {
	__typename: "vectric_allocatable_bundles_var_pop_fields",
	partnerId?: number,
	product?: number
};
	/** aggregate var_samp on columns */
["vectric_allocatable_bundles_var_samp_fields"]: {
	__typename: "vectric_allocatable_bundles_var_samp_fields",
	partnerId?: number,
	product?: number
};
	/** aggregate variance on columns */
["vectric_allocatable_bundles_variance_fields"]: {
	__typename: "vectric_allocatable_bundles_variance_fields",
	partnerId?: number,
	product?: number
};
	/** columns and relationships of "vectric.allocatable_licence_count" */
["vectric_allocatable_licence_count"]: {
	__typename: "vectric_allocatable_licence_count",
	/** An object relationship */
	allocatableProduct?: GraphQLTypes["vectric_products_products"],
	availableCount?: GraphQLTypes["bigint"],
	oemPartnerId?: GraphQLTypes["bigint"],
	/** An object relationship */
	partner?: GraphQLTypes["vectric_oem_partners"],
	productId?: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.allocatable_licence_count" */
["vectric_allocatable_licence_count_aggregate"]: {
	__typename: "vectric_allocatable_licence_count_aggregate",
	aggregate?: GraphQLTypes["vectric_allocatable_licence_count_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_allocatable_licence_count"]>
};
	/** aggregate fields of "vectric.allocatable_licence_count" */
["vectric_allocatable_licence_count_aggregate_fields"]: {
	__typename: "vectric_allocatable_licence_count_aggregate_fields",
	avg?: GraphQLTypes["vectric_allocatable_licence_count_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_allocatable_licence_count_max_fields"],
	min?: GraphQLTypes["vectric_allocatable_licence_count_min_fields"],
	stddev?: GraphQLTypes["vectric_allocatable_licence_count_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_allocatable_licence_count_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_allocatable_licence_count_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_allocatable_licence_count_sum_fields"],
	var_pop?: GraphQLTypes["vectric_allocatable_licence_count_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_allocatable_licence_count_var_samp_fields"],
	variance?: GraphQLTypes["vectric_allocatable_licence_count_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_allocatable_licence_count_avg_fields"]: {
	__typename: "vectric_allocatable_licence_count_avg_fields",
	availableCount?: number,
	oemPartnerId?: number,
	productId?: number
};
	/** aggregate max on columns */
["vectric_allocatable_licence_count_max_fields"]: {
	__typename: "vectric_allocatable_licence_count_max_fields",
	availableCount?: GraphQLTypes["bigint"],
	oemPartnerId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_allocatable_licence_count_min_fields"]: {
	__typename: "vectric_allocatable_licence_count_min_fields",
	availableCount?: GraphQLTypes["bigint"],
	oemPartnerId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** aggregate stddev on columns */
["vectric_allocatable_licence_count_stddev_fields"]: {
	__typename: "vectric_allocatable_licence_count_stddev_fields",
	availableCount?: number,
	oemPartnerId?: number,
	productId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_allocatable_licence_count_stddev_pop_fields"]: {
	__typename: "vectric_allocatable_licence_count_stddev_pop_fields",
	availableCount?: number,
	oemPartnerId?: number,
	productId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_allocatable_licence_count_stddev_samp_fields"]: {
	__typename: "vectric_allocatable_licence_count_stddev_samp_fields",
	availableCount?: number,
	oemPartnerId?: number,
	productId?: number
};
	/** aggregate sum on columns */
["vectric_allocatable_licence_count_sum_fields"]: {
	__typename: "vectric_allocatable_licence_count_sum_fields",
	availableCount?: GraphQLTypes["bigint"],
	oemPartnerId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_allocatable_licence_count_var_pop_fields"]: {
	__typename: "vectric_allocatable_licence_count_var_pop_fields",
	availableCount?: number,
	oemPartnerId?: number,
	productId?: number
};
	/** aggregate var_samp on columns */
["vectric_allocatable_licence_count_var_samp_fields"]: {
	__typename: "vectric_allocatable_licence_count_var_samp_fields",
	availableCount?: number,
	oemPartnerId?: number,
	productId?: number
};
	/** aggregate variance on columns */
["vectric_allocatable_licence_count_variance_fields"]: {
	__typename: "vectric_allocatable_licence_count_variance_fields",
	availableCount?: number,
	oemPartnerId?: number,
	productId?: number
};
	/** columns and relationships of "vectric.allocated_bundles" */
["vectric_allocated_bundles"]: {
	__typename: "vectric_allocated_bundles",
	allocatedby?: string,
	allocationbatch?: string,
	allocationtype?: GraphQLTypes["bigint"],
	bundleId?: string,
	dateAllocated?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateOriginallyRegistered?: GraphQLTypes["timestamptz"],
	/** An array relationship */
	licences: Array<GraphQLTypes["vectric_sales_oemlicences"]>,
	/** An aggregate relationship */
	licences_aggregate: GraphQLTypes["vectric_sales_oemlicences_aggregate"],
	notes?: string,
	/** An object relationship */
	partner?: GraphQLTypes["vectric_oem_partners"],
	partnerId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["bigint"],
	productDisplayName?: string,
	typeDisplayName?: string
};
	/** aggregated selection of "vectric.allocated_bundles" */
["vectric_allocated_bundles_aggregate"]: {
	__typename: "vectric_allocated_bundles_aggregate",
	aggregate?: GraphQLTypes["vectric_allocated_bundles_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_allocated_bundles"]>
};
	/** aggregate fields of "vectric.allocated_bundles" */
["vectric_allocated_bundles_aggregate_fields"]: {
	__typename: "vectric_allocated_bundles_aggregate_fields",
	avg?: GraphQLTypes["vectric_allocated_bundles_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_allocated_bundles_max_fields"],
	min?: GraphQLTypes["vectric_allocated_bundles_min_fields"],
	stddev?: GraphQLTypes["vectric_allocated_bundles_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_allocated_bundles_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_allocated_bundles_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_allocated_bundles_sum_fields"],
	var_pop?: GraphQLTypes["vectric_allocated_bundles_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_allocated_bundles_var_samp_fields"],
	variance?: GraphQLTypes["vectric_allocated_bundles_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_allocated_bundles_avg_fields"]: {
	__typename: "vectric_allocated_bundles_avg_fields",
	allocationtype?: number,
	partnerId?: number,
	product?: number
};
	/** aggregate max on columns */
["vectric_allocated_bundles_max_fields"]: {
	__typename: "vectric_allocated_bundles_max_fields",
	allocatedby?: string,
	allocationbatch?: string,
	allocationtype?: GraphQLTypes["bigint"],
	bundleId?: string,
	dateAllocated?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateOriginallyRegistered?: GraphQLTypes["timestamptz"],
	notes?: string,
	partnerId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["bigint"],
	productDisplayName?: string,
	typeDisplayName?: string
};
	/** aggregate min on columns */
["vectric_allocated_bundles_min_fields"]: {
	__typename: "vectric_allocated_bundles_min_fields",
	allocatedby?: string,
	allocationbatch?: string,
	allocationtype?: GraphQLTypes["bigint"],
	bundleId?: string,
	dateAllocated?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateOriginallyRegistered?: GraphQLTypes["timestamptz"],
	notes?: string,
	partnerId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["bigint"],
	productDisplayName?: string,
	typeDisplayName?: string
};
	/** response of any mutation on the table "vectric.allocated_bundles" */
["vectric_allocated_bundles_mutation_response"]: {
	__typename: "vectric_allocated_bundles_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_allocated_bundles"]>
};
	/** aggregate stddev on columns */
["vectric_allocated_bundles_stddev_fields"]: {
	__typename: "vectric_allocated_bundles_stddev_fields",
	allocationtype?: number,
	partnerId?: number,
	product?: number
};
	/** aggregate stddev_pop on columns */
["vectric_allocated_bundles_stddev_pop_fields"]: {
	__typename: "vectric_allocated_bundles_stddev_pop_fields",
	allocationtype?: number,
	partnerId?: number,
	product?: number
};
	/** aggregate stddev_samp on columns */
["vectric_allocated_bundles_stddev_samp_fields"]: {
	__typename: "vectric_allocated_bundles_stddev_samp_fields",
	allocationtype?: number,
	partnerId?: number,
	product?: number
};
	/** aggregate sum on columns */
["vectric_allocated_bundles_sum_fields"]: {
	__typename: "vectric_allocated_bundles_sum_fields",
	allocationtype?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_allocated_bundles_var_pop_fields"]: {
	__typename: "vectric_allocated_bundles_var_pop_fields",
	allocationtype?: number,
	partnerId?: number,
	product?: number
};
	/** aggregate var_samp on columns */
["vectric_allocated_bundles_var_samp_fields"]: {
	__typename: "vectric_allocated_bundles_var_samp_fields",
	allocationtype?: number,
	partnerId?: number,
	product?: number
};
	/** aggregate variance on columns */
["vectric_allocated_bundles_variance_fields"]: {
	__typename: "vectric_allocated_bundles_variance_fields",
	allocationtype?: number,
	partnerId?: number,
	product?: number
};
	/** File locations for batch summaries


columns and relationships of "vectric.allocation_summary" */
["vectric_allocation_summary"]: {
	__typename: "vectric_allocation_summary",
	/** An array relationship */
	batch: Array<GraphQLTypes["vectric_allocated_bundles"]>,
	batchId: string,
	/** An aggregate relationship */
	batch_aggregate: GraphQLTypes["vectric_allocated_bundles_aggregate"],
	bucket: string,
	id: number,
	location: string,
	/** An object relationship */
	partner: GraphQLTypes["vectric_oem_partners"],
	partnerId: number,
	signedUrl?: string,
	type: GraphQLTypes["vectric_allocation_summary_file_type_enum"]
};
	/** aggregated selection of "vectric.allocation_summary" */
["vectric_allocation_summary_aggregate"]: {
	__typename: "vectric_allocation_summary_aggregate",
	aggregate?: GraphQLTypes["vectric_allocation_summary_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_allocation_summary"]>
};
	/** aggregate fields of "vectric.allocation_summary" */
["vectric_allocation_summary_aggregate_fields"]: {
	__typename: "vectric_allocation_summary_aggregate_fields",
	avg?: GraphQLTypes["vectric_allocation_summary_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_allocation_summary_max_fields"],
	min?: GraphQLTypes["vectric_allocation_summary_min_fields"],
	stddev?: GraphQLTypes["vectric_allocation_summary_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_allocation_summary_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_allocation_summary_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_allocation_summary_sum_fields"],
	var_pop?: GraphQLTypes["vectric_allocation_summary_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_allocation_summary_var_samp_fields"],
	variance?: GraphQLTypes["vectric_allocation_summary_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_allocation_summary_avg_fields"]: {
	__typename: "vectric_allocation_summary_avg_fields",
	id?: number,
	partnerId?: number
};
	/** File types for the summaries


columns and relationships of "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type"]: {
	__typename: "vectric_allocation_summary_file_type",
	type: string
};
	/** aggregated selection of "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_aggregate"]: {
	__typename: "vectric_allocation_summary_file_type_aggregate",
	aggregate?: GraphQLTypes["vectric_allocation_summary_file_type_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_allocation_summary_file_type"]>
};
	/** aggregate fields of "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_aggregate_fields"]: {
	__typename: "vectric_allocation_summary_file_type_aggregate_fields",
	count: number,
	max?: GraphQLTypes["vectric_allocation_summary_file_type_max_fields"],
	min?: GraphQLTypes["vectric_allocation_summary_file_type_min_fields"]
};
	/** aggregate max on columns */
["vectric_allocation_summary_file_type_max_fields"]: {
	__typename: "vectric_allocation_summary_file_type_max_fields",
	type?: string
};
	/** aggregate min on columns */
["vectric_allocation_summary_file_type_min_fields"]: {
	__typename: "vectric_allocation_summary_file_type_min_fields",
	type?: string
};
	/** response of any mutation on the table "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_mutation_response"]: {
	__typename: "vectric_allocation_summary_file_type_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_allocation_summary_file_type"]>
};
	/** aggregate max on columns */
["vectric_allocation_summary_max_fields"]: {
	__typename: "vectric_allocation_summary_max_fields",
	batchId?: string,
	bucket?: string,
	id?: number,
	location?: string,
	partnerId?: number,
	signedUrl?: string
};
	/** aggregate min on columns */
["vectric_allocation_summary_min_fields"]: {
	__typename: "vectric_allocation_summary_min_fields",
	batchId?: string,
	bucket?: string,
	id?: number,
	location?: string,
	partnerId?: number,
	signedUrl?: string
};
	/** response of any mutation on the table "vectric.allocation_summary" */
["vectric_allocation_summary_mutation_response"]: {
	__typename: "vectric_allocation_summary_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_allocation_summary"]>
};
	/** aggregate stddev on columns */
["vectric_allocation_summary_stddev_fields"]: {
	__typename: "vectric_allocation_summary_stddev_fields",
	id?: number,
	partnerId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_allocation_summary_stddev_pop_fields"]: {
	__typename: "vectric_allocation_summary_stddev_pop_fields",
	id?: number,
	partnerId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_allocation_summary_stddev_samp_fields"]: {
	__typename: "vectric_allocation_summary_stddev_samp_fields",
	id?: number,
	partnerId?: number
};
	/** aggregate sum on columns */
["vectric_allocation_summary_sum_fields"]: {
	__typename: "vectric_allocation_summary_sum_fields",
	id?: number,
	partnerId?: number
};
	/** aggregate var_pop on columns */
["vectric_allocation_summary_var_pop_fields"]: {
	__typename: "vectric_allocation_summary_var_pop_fields",
	id?: number,
	partnerId?: number
};
	/** aggregate var_samp on columns */
["vectric_allocation_summary_var_samp_fields"]: {
	__typename: "vectric_allocation_summary_var_samp_fields",
	id?: number,
	partnerId?: number
};
	/** aggregate variance on columns */
["vectric_allocation_summary_variance_fields"]: {
	__typename: "vectric_allocation_summary_variance_fields",
	id?: number,
	partnerId?: number
};
	/** columns and relationships of "vectric.continents" */
["vectric_continents"]: {
	__typename: "vectric_continents",
	/** Continent code */
	code: GraphQLTypes["bpchar"],
	name?: string
};
	/** aggregated selection of "vectric.continents" */
["vectric_continents_aggregate"]: {
	__typename: "vectric_continents_aggregate",
	aggregate?: GraphQLTypes["vectric_continents_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_continents"]>
};
	/** aggregate fields of "vectric.continents" */
["vectric_continents_aggregate_fields"]: {
	__typename: "vectric_continents_aggregate_fields",
	count: number,
	max?: GraphQLTypes["vectric_continents_max_fields"],
	min?: GraphQLTypes["vectric_continents_min_fields"]
};
	/** aggregate max on columns */
["vectric_continents_max_fields"]: {
	__typename: "vectric_continents_max_fields",
	/** Continent code */
	code?: GraphQLTypes["bpchar"],
	name?: string
};
	/** aggregate min on columns */
["vectric_continents_min_fields"]: {
	__typename: "vectric_continents_min_fields",
	/** Continent code */
	code?: GraphQLTypes["bpchar"],
	name?: string
};
	/** response of any mutation on the table "vectric.continents" */
["vectric_continents_mutation_response"]: {
	__typename: "vectric_continents_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_continents"]>
};
	/** columns and relationships of "vectric.countries" */
["vectric_countries"]: {
	__typename: "vectric_countries",
	/** Two-letter country code (ISO 3166-1 alpha-2) */
	code: GraphQLTypes["bpchar"],
	/** An object relationship */
	continent: GraphQLTypes["vectric_continents"],
	continentcode: GraphQLTypes["bpchar"],
	countryid: GraphQLTypes["bigint"],
	displayorder: number,
	/** Full English country name */
	fullname: string,
	/** Three-letter country code (ISO 3166-1 alpha-3) */
	iso3: GraphQLTypes["bpchar"],
	/** English country name */
	name: string,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number: number
};
	/** aggregated selection of "vectric.countries" */
["vectric_countries_aggregate"]: {
	__typename: "vectric_countries_aggregate",
	aggregate?: GraphQLTypes["vectric_countries_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_countries"]>
};
	/** aggregate fields of "vectric.countries" */
["vectric_countries_aggregate_fields"]: {
	__typename: "vectric_countries_aggregate_fields",
	avg?: GraphQLTypes["vectric_countries_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_countries_max_fields"],
	min?: GraphQLTypes["vectric_countries_min_fields"],
	stddev?: GraphQLTypes["vectric_countries_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_countries_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_countries_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_countries_sum_fields"],
	var_pop?: GraphQLTypes["vectric_countries_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_countries_var_samp_fields"],
	variance?: GraphQLTypes["vectric_countries_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_countries_avg_fields"]: {
	__typename: "vectric_countries_avg_fields",
	countryid?: number,
	displayorder?: number,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?: number
};
	/** aggregate max on columns */
["vectric_countries_max_fields"]: {
	__typename: "vectric_countries_max_fields",
	/** Two-letter country code (ISO 3166-1 alpha-2) */
	code?: GraphQLTypes["bpchar"],
	continentcode?: GraphQLTypes["bpchar"],
	countryid?: GraphQLTypes["bigint"],
	displayorder?: number,
	/** Full English country name */
	fullname?: string,
	/** Three-letter country code (ISO 3166-1 alpha-3) */
	iso3?: GraphQLTypes["bpchar"],
	/** English country name */
	name?: string,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?: number
};
	/** aggregate min on columns */
["vectric_countries_min_fields"]: {
	__typename: "vectric_countries_min_fields",
	/** Two-letter country code (ISO 3166-1 alpha-2) */
	code?: GraphQLTypes["bpchar"],
	continentcode?: GraphQLTypes["bpchar"],
	countryid?: GraphQLTypes["bigint"],
	displayorder?: number,
	/** Full English country name */
	fullname?: string,
	/** Three-letter country code (ISO 3166-1 alpha-3) */
	iso3?: GraphQLTypes["bpchar"],
	/** English country name */
	name?: string,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?: number
};
	/** response of any mutation on the table "vectric.countries" */
["vectric_countries_mutation_response"]: {
	__typename: "vectric_countries_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_countries"]>
};
	/** aggregate stddev on columns */
["vectric_countries_stddev_fields"]: {
	__typename: "vectric_countries_stddev_fields",
	countryid?: number,
	displayorder?: number,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?: number
};
	/** aggregate stddev_pop on columns */
["vectric_countries_stddev_pop_fields"]: {
	__typename: "vectric_countries_stddev_pop_fields",
	countryid?: number,
	displayorder?: number,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?: number
};
	/** aggregate stddev_samp on columns */
["vectric_countries_stddev_samp_fields"]: {
	__typename: "vectric_countries_stddev_samp_fields",
	countryid?: number,
	displayorder?: number,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?: number
};
	/** aggregate sum on columns */
["vectric_countries_sum_fields"]: {
	__typename: "vectric_countries_sum_fields",
	countryid?: GraphQLTypes["bigint"],
	displayorder?: number,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?: number
};
	/** aggregate var_pop on columns */
["vectric_countries_var_pop_fields"]: {
	__typename: "vectric_countries_var_pop_fields",
	countryid?: number,
	displayorder?: number,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?: number
};
	/** aggregate var_samp on columns */
["vectric_countries_var_samp_fields"]: {
	__typename: "vectric_countries_var_samp_fields",
	countryid?: number,
	displayorder?: number,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?: number
};
	/** aggregate variance on columns */
["vectric_countries_variance_fields"]: {
	__typename: "vectric_countries_variance_fields",
	countryid?: number,
	displayorder?: number,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?: number
};
	/** columns and relationships of "vectric.customer_area" */
["vectric_customer_area"]: {
	__typename: "vectric_customer_area",
	bucketName: string,
	/** An object relationship */
	customer: GraphQLTypes["vectric_sales_customers"],
	/** An array relationship */
	customerAreaFiles: Array<GraphQLTypes["vectric_customer_area_file"]>,
	/** An aggregate relationship */
	customerAreaFiles_aggregate: GraphQLTypes["vectric_customer_area_file_aggregate"],
	customerAreaId: GraphQLTypes["bigint"],
	customerId: GraphQLTypes["bigint"],
	objectName: string
};
	/** aggregated selection of "vectric.customer_area" */
["vectric_customer_area_aggregate"]: {
	__typename: "vectric_customer_area_aggregate",
	aggregate?: GraphQLTypes["vectric_customer_area_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_customer_area"]>
};
	/** aggregate fields of "vectric.customer_area" */
["vectric_customer_area_aggregate_fields"]: {
	__typename: "vectric_customer_area_aggregate_fields",
	avg?: GraphQLTypes["vectric_customer_area_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_customer_area_max_fields"],
	min?: GraphQLTypes["vectric_customer_area_min_fields"],
	stddev?: GraphQLTypes["vectric_customer_area_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_customer_area_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_customer_area_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_customer_area_sum_fields"],
	var_pop?: GraphQLTypes["vectric_customer_area_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_customer_area_var_samp_fields"],
	variance?: GraphQLTypes["vectric_customer_area_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_customer_area_avg_fields"]: {
	__typename: "vectric_customer_area_avg_fields",
	customerAreaId?: number,
	customerId?: number
};
	/** columns and relationships of "vectric.customer_area_file" */
["vectric_customer_area_file"]: {
	__typename: "vectric_customer_area_file",
	/** An object relationship */
	customerArea: GraphQLTypes["vectric_customer_area"],
	customerAreaFileId: GraphQLTypes["bigint"],
	customerAreaId: GraphQLTypes["bigint"],
	dateUploaded: GraphQLTypes["timestamptz"],
	fileKey: string,
	fileName: string,
	objectName: string,
	/** An object relationship */
	product?: GraphQLTypes["vectric_products_products"],
	productId?: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.customer_area_file" */
["vectric_customer_area_file_aggregate"]: {
	__typename: "vectric_customer_area_file_aggregate",
	aggregate?: GraphQLTypes["vectric_customer_area_file_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_customer_area_file"]>
};
	/** aggregate fields of "vectric.customer_area_file" */
["vectric_customer_area_file_aggregate_fields"]: {
	__typename: "vectric_customer_area_file_aggregate_fields",
	avg?: GraphQLTypes["vectric_customer_area_file_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_customer_area_file_max_fields"],
	min?: GraphQLTypes["vectric_customer_area_file_min_fields"],
	stddev?: GraphQLTypes["vectric_customer_area_file_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_customer_area_file_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_customer_area_file_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_customer_area_file_sum_fields"],
	var_pop?: GraphQLTypes["vectric_customer_area_file_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_customer_area_file_var_samp_fields"],
	variance?: GraphQLTypes["vectric_customer_area_file_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_customer_area_file_avg_fields"]: {
	__typename: "vectric_customer_area_file_avg_fields",
	customerAreaFileId?: number,
	customerAreaId?: number,
	productId?: number
};
	/** aggregate max on columns */
["vectric_customer_area_file_max_fields"]: {
	__typename: "vectric_customer_area_file_max_fields",
	customerAreaFileId?: GraphQLTypes["bigint"],
	customerAreaId?: GraphQLTypes["bigint"],
	dateUploaded?: GraphQLTypes["timestamptz"],
	fileKey?: string,
	fileName?: string,
	objectName?: string,
	productId?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_customer_area_file_min_fields"]: {
	__typename: "vectric_customer_area_file_min_fields",
	customerAreaFileId?: GraphQLTypes["bigint"],
	customerAreaId?: GraphQLTypes["bigint"],
	dateUploaded?: GraphQLTypes["timestamptz"],
	fileKey?: string,
	fileName?: string,
	objectName?: string,
	productId?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.customer_area_file" */
["vectric_customer_area_file_mutation_response"]: {
	__typename: "vectric_customer_area_file_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_customer_area_file"]>
};
	/** aggregate stddev on columns */
["vectric_customer_area_file_stddev_fields"]: {
	__typename: "vectric_customer_area_file_stddev_fields",
	customerAreaFileId?: number,
	customerAreaId?: number,
	productId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_customer_area_file_stddev_pop_fields"]: {
	__typename: "vectric_customer_area_file_stddev_pop_fields",
	customerAreaFileId?: number,
	customerAreaId?: number,
	productId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_customer_area_file_stddev_samp_fields"]: {
	__typename: "vectric_customer_area_file_stddev_samp_fields",
	customerAreaFileId?: number,
	customerAreaId?: number,
	productId?: number
};
	/** aggregate sum on columns */
["vectric_customer_area_file_sum_fields"]: {
	__typename: "vectric_customer_area_file_sum_fields",
	customerAreaFileId?: GraphQLTypes["bigint"],
	customerAreaId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_customer_area_file_var_pop_fields"]: {
	__typename: "vectric_customer_area_file_var_pop_fields",
	customerAreaFileId?: number,
	customerAreaId?: number,
	productId?: number
};
	/** aggregate var_samp on columns */
["vectric_customer_area_file_var_samp_fields"]: {
	__typename: "vectric_customer_area_file_var_samp_fields",
	customerAreaFileId?: number,
	customerAreaId?: number,
	productId?: number
};
	/** aggregate variance on columns */
["vectric_customer_area_file_variance_fields"]: {
	__typename: "vectric_customer_area_file_variance_fields",
	customerAreaFileId?: number,
	customerAreaId?: number,
	productId?: number
};
	/** aggregate max on columns */
["vectric_customer_area_max_fields"]: {
	__typename: "vectric_customer_area_max_fields",
	bucketName?: string,
	customerAreaId?: GraphQLTypes["bigint"],
	customerId?: GraphQLTypes["bigint"],
	objectName?: string
};
	/** aggregate min on columns */
["vectric_customer_area_min_fields"]: {
	__typename: "vectric_customer_area_min_fields",
	bucketName?: string,
	customerAreaId?: GraphQLTypes["bigint"],
	customerId?: GraphQLTypes["bigint"],
	objectName?: string
};
	/** response of any mutation on the table "vectric.customer_area" */
["vectric_customer_area_mutation_response"]: {
	__typename: "vectric_customer_area_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_customer_area"]>
};
	/** aggregate stddev on columns */
["vectric_customer_area_stddev_fields"]: {
	__typename: "vectric_customer_area_stddev_fields",
	customerAreaId?: number,
	customerId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_customer_area_stddev_pop_fields"]: {
	__typename: "vectric_customer_area_stddev_pop_fields",
	customerAreaId?: number,
	customerId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_customer_area_stddev_samp_fields"]: {
	__typename: "vectric_customer_area_stddev_samp_fields",
	customerAreaId?: number,
	customerId?: number
};
	/** aggregate sum on columns */
["vectric_customer_area_sum_fields"]: {
	__typename: "vectric_customer_area_sum_fields",
	customerAreaId?: GraphQLTypes["bigint"],
	customerId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_customer_area_var_pop_fields"]: {
	__typename: "vectric_customer_area_var_pop_fields",
	customerAreaId?: number,
	customerId?: number
};
	/** aggregate var_samp on columns */
["vectric_customer_area_var_samp_fields"]: {
	__typename: "vectric_customer_area_var_samp_fields",
	customerAreaId?: number,
	customerId?: number
};
	/** aggregate variance on columns */
["vectric_customer_area_variance_fields"]: {
	__typename: "vectric_customer_area_variance_fields",
	customerAreaId?: number,
	customerId?: number
};
	/** columns and relationships of "vectric.customer_responses" */
["vectric_customer_responses"]: {
	__typename: "vectric_customer_responses",
	customerid: GraphQLTypes["bigint"],
	customerresponseid: GraphQLTypes["bigint"],
	othertext?: string,
	/** An object relationship */
	question: GraphQLTypes["vectric_questions"],
	questionid: GraphQLTypes["bigint"],
	/** An object relationship */
	response: GraphQLTypes["vectric_responses"],
	responseid: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.customer_responses" */
["vectric_customer_responses_aggregate"]: {
	__typename: "vectric_customer_responses_aggregate",
	aggregate?: GraphQLTypes["vectric_customer_responses_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_customer_responses"]>
};
	/** aggregate fields of "vectric.customer_responses" */
["vectric_customer_responses_aggregate_fields"]: {
	__typename: "vectric_customer_responses_aggregate_fields",
	avg?: GraphQLTypes["vectric_customer_responses_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_customer_responses_max_fields"],
	min?: GraphQLTypes["vectric_customer_responses_min_fields"],
	stddev?: GraphQLTypes["vectric_customer_responses_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_customer_responses_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_customer_responses_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_customer_responses_sum_fields"],
	var_pop?: GraphQLTypes["vectric_customer_responses_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_customer_responses_var_samp_fields"],
	variance?: GraphQLTypes["vectric_customer_responses_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_customer_responses_avg_fields"]: {
	__typename: "vectric_customer_responses_avg_fields",
	customerid?: number,
	customerresponseid?: number,
	questionid?: number,
	responseid?: number
};
	/** aggregate max on columns */
["vectric_customer_responses_max_fields"]: {
	__typename: "vectric_customer_responses_max_fields",
	customerid?: GraphQLTypes["bigint"],
	customerresponseid?: GraphQLTypes["bigint"],
	othertext?: string,
	questionid?: GraphQLTypes["bigint"],
	responseid?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_customer_responses_min_fields"]: {
	__typename: "vectric_customer_responses_min_fields",
	customerid?: GraphQLTypes["bigint"],
	customerresponseid?: GraphQLTypes["bigint"],
	othertext?: string,
	questionid?: GraphQLTypes["bigint"],
	responseid?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.customer_responses" */
["vectric_customer_responses_mutation_response"]: {
	__typename: "vectric_customer_responses_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_customer_responses"]>
};
	/** aggregate stddev on columns */
["vectric_customer_responses_stddev_fields"]: {
	__typename: "vectric_customer_responses_stddev_fields",
	customerid?: number,
	customerresponseid?: number,
	questionid?: number,
	responseid?: number
};
	/** aggregate stddev_pop on columns */
["vectric_customer_responses_stddev_pop_fields"]: {
	__typename: "vectric_customer_responses_stddev_pop_fields",
	customerid?: number,
	customerresponseid?: number,
	questionid?: number,
	responseid?: number
};
	/** aggregate stddev_samp on columns */
["vectric_customer_responses_stddev_samp_fields"]: {
	__typename: "vectric_customer_responses_stddev_samp_fields",
	customerid?: number,
	customerresponseid?: number,
	questionid?: number,
	responseid?: number
};
	/** aggregate sum on columns */
["vectric_customer_responses_sum_fields"]: {
	__typename: "vectric_customer_responses_sum_fields",
	customerid?: GraphQLTypes["bigint"],
	customerresponseid?: GraphQLTypes["bigint"],
	questionid?: GraphQLTypes["bigint"],
	responseid?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_customer_responses_var_pop_fields"]: {
	__typename: "vectric_customer_responses_var_pop_fields",
	customerid?: number,
	customerresponseid?: number,
	questionid?: number,
	responseid?: number
};
	/** aggregate var_samp on columns */
["vectric_customer_responses_var_samp_fields"]: {
	__typename: "vectric_customer_responses_var_samp_fields",
	customerid?: number,
	customerresponseid?: number,
	questionid?: number,
	responseid?: number
};
	/** aggregate variance on columns */
["vectric_customer_responses_variance_fields"]: {
	__typename: "vectric_customer_responses_variance_fields",
	customerid?: number,
	customerresponseid?: number,
	questionid?: number,
	responseid?: number
};
	/** columns and relationships of "vectric.customer_sales" */
["vectric_customer_sales"]: {
	__typename: "vectric_customer_sales",
	customerId?: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	orderDate?: GraphQLTypes["timestamptz"],
	orderId?: string,
	/** An array relationship */
	salesItems: Array<GraphQLTypes["vectric_sales_salesitems"]>,
	/** An aggregate relationship */
	salesItems_aggregate: GraphQLTypes["vectric_sales_salesitems_aggregate"],
	veccode?: string
};
	/** aggregated selection of "vectric.customer_sales" */
["vectric_customer_sales_aggregate"]: {
	__typename: "vectric_customer_sales_aggregate",
	aggregate?: GraphQLTypes["vectric_customer_sales_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_customer_sales"]>
};
	/** aggregate fields of "vectric.customer_sales" */
["vectric_customer_sales_aggregate_fields"]: {
	__typename: "vectric_customer_sales_aggregate_fields",
	avg?: GraphQLTypes["vectric_customer_sales_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_customer_sales_max_fields"],
	min?: GraphQLTypes["vectric_customer_sales_min_fields"],
	stddev?: GraphQLTypes["vectric_customer_sales_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_customer_sales_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_customer_sales_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_customer_sales_sum_fields"],
	var_pop?: GraphQLTypes["vectric_customer_sales_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_customer_sales_var_samp_fields"],
	variance?: GraphQLTypes["vectric_customer_sales_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_customer_sales_avg_fields"]: {
	__typename: "vectric_customer_sales_avg_fields",
	customerId?: number
};
	/** aggregate max on columns */
["vectric_customer_sales_max_fields"]: {
	__typename: "vectric_customer_sales_max_fields",
	customerId?: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	orderDate?: GraphQLTypes["timestamptz"],
	orderId?: string,
	veccode?: string
};
	/** aggregate min on columns */
["vectric_customer_sales_min_fields"]: {
	__typename: "vectric_customer_sales_min_fields",
	customerId?: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	orderDate?: GraphQLTypes["timestamptz"],
	orderId?: string,
	veccode?: string
};
	/** response of any mutation on the table "vectric.customer_sales" */
["vectric_customer_sales_mutation_response"]: {
	__typename: "vectric_customer_sales_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_customer_sales"]>
};
	/** aggregate stddev on columns */
["vectric_customer_sales_stddev_fields"]: {
	__typename: "vectric_customer_sales_stddev_fields",
	customerId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_customer_sales_stddev_pop_fields"]: {
	__typename: "vectric_customer_sales_stddev_pop_fields",
	customerId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_customer_sales_stddev_samp_fields"]: {
	__typename: "vectric_customer_sales_stddev_samp_fields",
	customerId?: number
};
	/** aggregate sum on columns */
["vectric_customer_sales_sum_fields"]: {
	__typename: "vectric_customer_sales_sum_fields",
	customerId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_customer_sales_var_pop_fields"]: {
	__typename: "vectric_customer_sales_var_pop_fields",
	customerId?: number
};
	/** aggregate var_samp on columns */
["vectric_customer_sales_var_samp_fields"]: {
	__typename: "vectric_customer_sales_var_samp_fields",
	customerId?: number
};
	/** aggregate variance on columns */
["vectric_customer_sales_variance_fields"]: {
	__typename: "vectric_customer_sales_variance_fields",
	customerId?: number
};
	/** columns and relationships of "vectric.customer_status" */
["vectric_customer_status"]: {
	__typename: "vectric_customer_status",
	status?: string,
	statusId: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.customer_status" */
["vectric_customer_status_aggregate"]: {
	__typename: "vectric_customer_status_aggregate",
	aggregate?: GraphQLTypes["vectric_customer_status_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_customer_status"]>
};
	/** aggregate fields of "vectric.customer_status" */
["vectric_customer_status_aggregate_fields"]: {
	__typename: "vectric_customer_status_aggregate_fields",
	avg?: GraphQLTypes["vectric_customer_status_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_customer_status_max_fields"],
	min?: GraphQLTypes["vectric_customer_status_min_fields"],
	stddev?: GraphQLTypes["vectric_customer_status_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_customer_status_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_customer_status_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_customer_status_sum_fields"],
	var_pop?: GraphQLTypes["vectric_customer_status_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_customer_status_var_samp_fields"],
	variance?: GraphQLTypes["vectric_customer_status_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_customer_status_avg_fields"]: {
	__typename: "vectric_customer_status_avg_fields",
	statusId?: number
};
	/** aggregate max on columns */
["vectric_customer_status_max_fields"]: {
	__typename: "vectric_customer_status_max_fields",
	status?: string,
	statusId?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_customer_status_min_fields"]: {
	__typename: "vectric_customer_status_min_fields",
	status?: string,
	statusId?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.customer_status" */
["vectric_customer_status_mutation_response"]: {
	__typename: "vectric_customer_status_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_customer_status"]>
};
	/** aggregate stddev on columns */
["vectric_customer_status_stddev_fields"]: {
	__typename: "vectric_customer_status_stddev_fields",
	statusId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_customer_status_stddev_pop_fields"]: {
	__typename: "vectric_customer_status_stddev_pop_fields",
	statusId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_customer_status_stddev_samp_fields"]: {
	__typename: "vectric_customer_status_stddev_samp_fields",
	statusId?: number
};
	/** aggregate sum on columns */
["vectric_customer_status_sum_fields"]: {
	__typename: "vectric_customer_status_sum_fields",
	statusId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_customer_status_var_pop_fields"]: {
	__typename: "vectric_customer_status_var_pop_fields",
	statusId?: number
};
	/** aggregate var_samp on columns */
["vectric_customer_status_var_samp_fields"]: {
	__typename: "vectric_customer_status_var_samp_fields",
	statusId?: number
};
	/** aggregate variance on columns */
["vectric_customer_status_variance_fields"]: {
	__typename: "vectric_customer_status_variance_fields",
	statusId?: number
};
	/** columns and relationships of "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads"]: {
	__typename: "vectric_customer_zd_uploads",
	createdBy: GraphQLTypes["bigint"],
	/** An object relationship */
	customer: GraphQLTypes["vectric_sales_customers"],
	customerId: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateUploaded?: GraphQLTypes["timestamptz"],
	location?: string,
	objectName?: string,
	shorturlhash?: string,
	/** An object relationship */
	staff?: GraphQLTypes["vectric_sales_customers"],
	ticketId: string,
	zdUploadId: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_aggregate"]: {
	__typename: "vectric_customer_zd_uploads_aggregate",
	aggregate?: GraphQLTypes["vectric_customer_zd_uploads_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_customer_zd_uploads"]>
};
	/** aggregate fields of "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_aggregate_fields"]: {
	__typename: "vectric_customer_zd_uploads_aggregate_fields",
	avg?: GraphQLTypes["vectric_customer_zd_uploads_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_customer_zd_uploads_max_fields"],
	min?: GraphQLTypes["vectric_customer_zd_uploads_min_fields"],
	stddev?: GraphQLTypes["vectric_customer_zd_uploads_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_customer_zd_uploads_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_customer_zd_uploads_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_customer_zd_uploads_sum_fields"],
	var_pop?: GraphQLTypes["vectric_customer_zd_uploads_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_customer_zd_uploads_var_samp_fields"],
	variance?: GraphQLTypes["vectric_customer_zd_uploads_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_customer_zd_uploads_avg_fields"]: {
	__typename: "vectric_customer_zd_uploads_avg_fields",
	createdBy?: number,
	customerId?: number,
	zdUploadId?: number
};
	/** aggregate max on columns */
["vectric_customer_zd_uploads_max_fields"]: {
	__typename: "vectric_customer_zd_uploads_max_fields",
	createdBy?: GraphQLTypes["bigint"],
	customerId?: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateUploaded?: GraphQLTypes["timestamptz"],
	location?: string,
	objectName?: string,
	shorturlhash?: string,
	ticketId?: string,
	zdUploadId?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_customer_zd_uploads_min_fields"]: {
	__typename: "vectric_customer_zd_uploads_min_fields",
	createdBy?: GraphQLTypes["bigint"],
	customerId?: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateUploaded?: GraphQLTypes["timestamptz"],
	location?: string,
	objectName?: string,
	shorturlhash?: string,
	ticketId?: string,
	zdUploadId?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_mutation_response"]: {
	__typename: "vectric_customer_zd_uploads_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_customer_zd_uploads"]>
};
	/** aggregate stddev on columns */
["vectric_customer_zd_uploads_stddev_fields"]: {
	__typename: "vectric_customer_zd_uploads_stddev_fields",
	createdBy?: number,
	customerId?: number,
	zdUploadId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_customer_zd_uploads_stddev_pop_fields"]: {
	__typename: "vectric_customer_zd_uploads_stddev_pop_fields",
	createdBy?: number,
	customerId?: number,
	zdUploadId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_customer_zd_uploads_stddev_samp_fields"]: {
	__typename: "vectric_customer_zd_uploads_stddev_samp_fields",
	createdBy?: number,
	customerId?: number,
	zdUploadId?: number
};
	/** aggregate sum on columns */
["vectric_customer_zd_uploads_sum_fields"]: {
	__typename: "vectric_customer_zd_uploads_sum_fields",
	createdBy?: GraphQLTypes["bigint"],
	customerId?: GraphQLTypes["bigint"],
	zdUploadId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_customer_zd_uploads_var_pop_fields"]: {
	__typename: "vectric_customer_zd_uploads_var_pop_fields",
	createdBy?: number,
	customerId?: number,
	zdUploadId?: number
};
	/** aggregate var_samp on columns */
["vectric_customer_zd_uploads_var_samp_fields"]: {
	__typename: "vectric_customer_zd_uploads_var_samp_fields",
	createdBy?: number,
	customerId?: number,
	zdUploadId?: number
};
	/** aggregate variance on columns */
["vectric_customer_zd_uploads_variance_fields"]: {
	__typename: "vectric_customer_zd_uploads_variance_fields",
	createdBy?: number,
	customerId?: number,
	zdUploadId?: number
};
	/** columns and relationships of "vectric.download" */
["vectric_download"]: {
	__typename: "vectric_download",
	bucketName?: string,
	description?: string,
	downloadId: string,
	downloadSize: string,
	groupId?: string,
	name: string,
	objectName?: string,
	previewImageUrl?: string,
	uploadDate?: GraphQLTypes["timestamptz"]
};
	/** aggregated selection of "vectric.download" */
["vectric_download_aggregate"]: {
	__typename: "vectric_download_aggregate",
	aggregate?: GraphQLTypes["vectric_download_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_download"]>
};
	/** aggregate fields of "vectric.download" */
["vectric_download_aggregate_fields"]: {
	__typename: "vectric_download_aggregate_fields",
	count: number,
	max?: GraphQLTypes["vectric_download_max_fields"],
	min?: GraphQLTypes["vectric_download_min_fields"]
};
	/** aggregate max on columns */
["vectric_download_max_fields"]: {
	__typename: "vectric_download_max_fields",
	bucketName?: string,
	description?: string,
	downloadId?: string,
	downloadSize?: string,
	groupId?: string,
	name?: string,
	objectName?: string,
	previewImageUrl?: string,
	uploadDate?: GraphQLTypes["timestamptz"]
};
	/** aggregate min on columns */
["vectric_download_min_fields"]: {
	__typename: "vectric_download_min_fields",
	bucketName?: string,
	description?: string,
	downloadId?: string,
	downloadSize?: string,
	groupId?: string,
	name?: string,
	objectName?: string,
	previewImageUrl?: string,
	uploadDate?: GraphQLTypes["timestamptz"]
};
	/** response of any mutation on the table "vectric.download" */
["vectric_download_mutation_response"]: {
	__typename: "vectric_download_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_download"]>
};
	/** columns and relationships of "vectric.download_record" */
["vectric_download_record"]: {
	__typename: "vectric_download_record",
	customerId: GraphQLTypes["bigint"],
	downloadDate?: GraphQLTypes["timestamptz"],
	downloadId?: string,
	id: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.download_record" */
["vectric_download_record_aggregate"]: {
	__typename: "vectric_download_record_aggregate",
	aggregate?: GraphQLTypes["vectric_download_record_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_download_record"]>
};
	/** aggregate fields of "vectric.download_record" */
["vectric_download_record_aggregate_fields"]: {
	__typename: "vectric_download_record_aggregate_fields",
	avg?: GraphQLTypes["vectric_download_record_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_download_record_max_fields"],
	min?: GraphQLTypes["vectric_download_record_min_fields"],
	stddev?: GraphQLTypes["vectric_download_record_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_download_record_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_download_record_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_download_record_sum_fields"],
	var_pop?: GraphQLTypes["vectric_download_record_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_download_record_var_samp_fields"],
	variance?: GraphQLTypes["vectric_download_record_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_download_record_avg_fields"]: {
	__typename: "vectric_download_record_avg_fields",
	customerId?: number,
	id?: number
};
	/** aggregate max on columns */
["vectric_download_record_max_fields"]: {
	__typename: "vectric_download_record_max_fields",
	customerId?: GraphQLTypes["bigint"],
	downloadDate?: GraphQLTypes["timestamptz"],
	downloadId?: string,
	id?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_download_record_min_fields"]: {
	__typename: "vectric_download_record_min_fields",
	customerId?: GraphQLTypes["bigint"],
	downloadDate?: GraphQLTypes["timestamptz"],
	downloadId?: string,
	id?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.download_record" */
["vectric_download_record_mutation_response"]: {
	__typename: "vectric_download_record_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_download_record"]>
};
	/** aggregate stddev on columns */
["vectric_download_record_stddev_fields"]: {
	__typename: "vectric_download_record_stddev_fields",
	customerId?: number,
	id?: number
};
	/** aggregate stddev_pop on columns */
["vectric_download_record_stddev_pop_fields"]: {
	__typename: "vectric_download_record_stddev_pop_fields",
	customerId?: number,
	id?: number
};
	/** aggregate stddev_samp on columns */
["vectric_download_record_stddev_samp_fields"]: {
	__typename: "vectric_download_record_stddev_samp_fields",
	customerId?: number,
	id?: number
};
	/** aggregate sum on columns */
["vectric_download_record_sum_fields"]: {
	__typename: "vectric_download_record_sum_fields",
	customerId?: GraphQLTypes["bigint"],
	id?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_download_record_var_pop_fields"]: {
	__typename: "vectric_download_record_var_pop_fields",
	customerId?: number,
	id?: number
};
	/** aggregate var_samp on columns */
["vectric_download_record_var_samp_fields"]: {
	__typename: "vectric_download_record_var_samp_fields",
	customerId?: number,
	id?: number
};
	/** aggregate variance on columns */
["vectric_download_record_variance_fields"]: {
	__typename: "vectric_download_record_variance_fields",
	customerId?: number,
	id?: number
};
	/** columns and relationships of "vectric.enhancement_tokens" */
["vectric_enhancement_tokens"]: {
	__typename: "vectric_enhancement_tokens",
	customerId: GraphQLTypes["bigint"],
	dateCreated: GraphQLTypes["timestamptz"],
	dateUsed?: GraphQLTypes["timestamptz"],
	enhancementEligibilityId?: GraphQLTypes["bigint"],
	enhancementOrderItemProductId?: GraphQLTypes["bigint"],
	orderItemProductId: GraphQLTypes["bigint"],
	token: string,
	used: boolean
};
	/** aggregated selection of "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_aggregate"]: {
	__typename: "vectric_enhancement_tokens_aggregate",
	aggregate?: GraphQLTypes["vectric_enhancement_tokens_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_enhancement_tokens"]>
};
	/** aggregate fields of "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_aggregate_fields"]: {
	__typename: "vectric_enhancement_tokens_aggregate_fields",
	avg?: GraphQLTypes["vectric_enhancement_tokens_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_enhancement_tokens_max_fields"],
	min?: GraphQLTypes["vectric_enhancement_tokens_min_fields"],
	stddev?: GraphQLTypes["vectric_enhancement_tokens_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_enhancement_tokens_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_enhancement_tokens_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_enhancement_tokens_sum_fields"],
	var_pop?: GraphQLTypes["vectric_enhancement_tokens_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_enhancement_tokens_var_samp_fields"],
	variance?: GraphQLTypes["vectric_enhancement_tokens_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_enhancement_tokens_avg_fields"]: {
	__typename: "vectric_enhancement_tokens_avg_fields",
	customerId?: number,
	enhancementEligibilityId?: number,
	enhancementOrderItemProductId?: number,
	orderItemProductId?: number
};
	/** aggregate max on columns */
["vectric_enhancement_tokens_max_fields"]: {
	__typename: "vectric_enhancement_tokens_max_fields",
	customerId?: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateUsed?: GraphQLTypes["timestamptz"],
	enhancementEligibilityId?: GraphQLTypes["bigint"],
	enhancementOrderItemProductId?: GraphQLTypes["bigint"],
	orderItemProductId?: GraphQLTypes["bigint"],
	token?: string
};
	/** aggregate min on columns */
["vectric_enhancement_tokens_min_fields"]: {
	__typename: "vectric_enhancement_tokens_min_fields",
	customerId?: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateUsed?: GraphQLTypes["timestamptz"],
	enhancementEligibilityId?: GraphQLTypes["bigint"],
	enhancementOrderItemProductId?: GraphQLTypes["bigint"],
	orderItemProductId?: GraphQLTypes["bigint"],
	token?: string
};
	/** response of any mutation on the table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_mutation_response"]: {
	__typename: "vectric_enhancement_tokens_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_enhancement_tokens"]>
};
	/** aggregate stddev on columns */
["vectric_enhancement_tokens_stddev_fields"]: {
	__typename: "vectric_enhancement_tokens_stddev_fields",
	customerId?: number,
	enhancementEligibilityId?: number,
	enhancementOrderItemProductId?: number,
	orderItemProductId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_enhancement_tokens_stddev_pop_fields"]: {
	__typename: "vectric_enhancement_tokens_stddev_pop_fields",
	customerId?: number,
	enhancementEligibilityId?: number,
	enhancementOrderItemProductId?: number,
	orderItemProductId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_enhancement_tokens_stddev_samp_fields"]: {
	__typename: "vectric_enhancement_tokens_stddev_samp_fields",
	customerId?: number,
	enhancementEligibilityId?: number,
	enhancementOrderItemProductId?: number,
	orderItemProductId?: number
};
	/** aggregate sum on columns */
["vectric_enhancement_tokens_sum_fields"]: {
	__typename: "vectric_enhancement_tokens_sum_fields",
	customerId?: GraphQLTypes["bigint"],
	enhancementEligibilityId?: GraphQLTypes["bigint"],
	enhancementOrderItemProductId?: GraphQLTypes["bigint"],
	orderItemProductId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_enhancement_tokens_var_pop_fields"]: {
	__typename: "vectric_enhancement_tokens_var_pop_fields",
	customerId?: number,
	enhancementEligibilityId?: number,
	enhancementOrderItemProductId?: number,
	orderItemProductId?: number
};
	/** aggregate var_samp on columns */
["vectric_enhancement_tokens_var_samp_fields"]: {
	__typename: "vectric_enhancement_tokens_var_samp_fields",
	customerId?: number,
	enhancementEligibilityId?: number,
	enhancementOrderItemProductId?: number,
	orderItemProductId?: number
};
	/** aggregate variance on columns */
["vectric_enhancement_tokens_variance_fields"]: {
	__typename: "vectric_enhancement_tokens_variance_fields",
	customerId?: number,
	enhancementEligibilityId?: number,
	enhancementOrderItemProductId?: number,
	orderItemProductId?: number
};
	/** columns and relationships of "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view"]: {
	__typename: "vectric_entitled_product_version_code_view",
	displayVersion?: string,
	entitled_product_id?: GraphQLTypes["bigint"],
	latest?: boolean,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	notifying?: boolean,
	patchUrl?: string,
	releaseDate?: GraphQLTypes["date"],
	url?: string,
	versionCodeId?: GraphQLTypes["bigint"],
	visible?: boolean
};
	/** aggregated selection of "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_aggregate"]: {
	__typename: "vectric_entitled_product_version_code_view_aggregate",
	aggregate?: GraphQLTypes["vectric_entitled_product_version_code_view_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_entitled_product_version_code_view"]>
};
	/** aggregate fields of "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_aggregate_fields"]: {
	__typename: "vectric_entitled_product_version_code_view_aggregate_fields",
	avg?: GraphQLTypes["vectric_entitled_product_version_code_view_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_entitled_product_version_code_view_max_fields"],
	min?: GraphQLTypes["vectric_entitled_product_version_code_view_min_fields"],
	stddev?: GraphQLTypes["vectric_entitled_product_version_code_view_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_entitled_product_version_code_view_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_entitled_product_version_code_view_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_entitled_product_version_code_view_sum_fields"],
	var_pop?: GraphQLTypes["vectric_entitled_product_version_code_view_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_entitled_product_version_code_view_var_samp_fields"],
	variance?: GraphQLTypes["vectric_entitled_product_version_code_view_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_entitled_product_version_code_view_avg_fields"]: {
	__typename: "vectric_entitled_product_version_code_view_avg_fields",
	entitled_product_id?: number,
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	versionCodeId?: number
};
	/** aggregate max on columns */
["vectric_entitled_product_version_code_view_max_fields"]: {
	__typename: "vectric_entitled_product_version_code_view_max_fields",
	displayVersion?: string,
	entitled_product_id?: GraphQLTypes["bigint"],
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	patchUrl?: string,
	releaseDate?: GraphQLTypes["date"],
	url?: string,
	versionCodeId?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_entitled_product_version_code_view_min_fields"]: {
	__typename: "vectric_entitled_product_version_code_view_min_fields",
	displayVersion?: string,
	entitled_product_id?: GraphQLTypes["bigint"],
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	patchUrl?: string,
	releaseDate?: GraphQLTypes["date"],
	url?: string,
	versionCodeId?: GraphQLTypes["bigint"]
};
	/** aggregate stddev on columns */
["vectric_entitled_product_version_code_view_stddev_fields"]: {
	__typename: "vectric_entitled_product_version_code_view_stddev_fields",
	entitled_product_id?: number,
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	versionCodeId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_entitled_product_version_code_view_stddev_pop_fields"]: {
	__typename: "vectric_entitled_product_version_code_view_stddev_pop_fields",
	entitled_product_id?: number,
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	versionCodeId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_entitled_product_version_code_view_stddev_samp_fields"]: {
	__typename: "vectric_entitled_product_version_code_view_stddev_samp_fields",
	entitled_product_id?: number,
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	versionCodeId?: number
};
	/** aggregate sum on columns */
["vectric_entitled_product_version_code_view_sum_fields"]: {
	__typename: "vectric_entitled_product_version_code_view_sum_fields",
	entitled_product_id?: GraphQLTypes["bigint"],
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	versionCodeId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_entitled_product_version_code_view_var_pop_fields"]: {
	__typename: "vectric_entitled_product_version_code_view_var_pop_fields",
	entitled_product_id?: number,
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	versionCodeId?: number
};
	/** aggregate var_samp on columns */
["vectric_entitled_product_version_code_view_var_samp_fields"]: {
	__typename: "vectric_entitled_product_version_code_view_var_samp_fields",
	entitled_product_id?: number,
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	versionCodeId?: number
};
	/** aggregate variance on columns */
["vectric_entitled_product_version_code_view_variance_fields"]: {
	__typename: "vectric_entitled_product_version_code_view_variance_fields",
	entitled_product_id?: number,
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	versionCodeId?: number
};
	/** columns and relationships of "vectric.entitled_products" */
["vectric_entitled_products"]: {
	__typename: "vectric_entitled_products",
	enabled?: boolean,
	/** An object relationship */
	latestVersion?: GraphQLTypes["vectric_products_versioncodes"],
	latestVersionId?: number,
	licenceType: GraphQLTypes["vectric_products_product_licence_type_enum"],
	productId: number,
	productName: string,
	/** An object relationship */
	productType: GraphQLTypes["vectric_products_producttype"],
	productTypeId: number,
	releaseDate?: GraphQLTypes["timestamp"],
	requiresLicence?: boolean,
	/** An array relationship */
	versions: Array<GraphQLTypes["vectric_entitled_product_version_code_view"]>,
	/** An aggregate relationship */
	versions_aggregate: GraphQLTypes["vectric_entitled_product_version_code_view_aggregate"]
};
	/** aggregated selection of "vectric.entitled_products" */
["vectric_entitled_products_aggregate"]: {
	__typename: "vectric_entitled_products_aggregate",
	aggregate?: GraphQLTypes["vectric_entitled_products_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_entitled_products"]>
};
	/** aggregate fields of "vectric.entitled_products" */
["vectric_entitled_products_aggregate_fields"]: {
	__typename: "vectric_entitled_products_aggregate_fields",
	avg?: GraphQLTypes["vectric_entitled_products_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_entitled_products_max_fields"],
	min?: GraphQLTypes["vectric_entitled_products_min_fields"],
	stddev?: GraphQLTypes["vectric_entitled_products_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_entitled_products_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_entitled_products_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_entitled_products_sum_fields"],
	var_pop?: GraphQLTypes["vectric_entitled_products_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_entitled_products_var_samp_fields"],
	variance?: GraphQLTypes["vectric_entitled_products_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_entitled_products_avg_fields"]: {
	__typename: "vectric_entitled_products_avg_fields",
	latestVersionId?: number,
	productId?: number,
	productTypeId?: number
};
	/** aggregate max on columns */
["vectric_entitled_products_max_fields"]: {
	__typename: "vectric_entitled_products_max_fields",
	latestVersionId?: number,
	productId?: number,
	productName?: string,
	productTypeId?: number,
	releaseDate?: GraphQLTypes["timestamp"]
};
	/** aggregate min on columns */
["vectric_entitled_products_min_fields"]: {
	__typename: "vectric_entitled_products_min_fields",
	latestVersionId?: number,
	productId?: number,
	productName?: string,
	productTypeId?: number,
	releaseDate?: GraphQLTypes["timestamp"]
};
	/** response of any mutation on the table "vectric.entitled_products" */
["vectric_entitled_products_mutation_response"]: {
	__typename: "vectric_entitled_products_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_entitled_products"]>
};
	/** aggregate stddev on columns */
["vectric_entitled_products_stddev_fields"]: {
	__typename: "vectric_entitled_products_stddev_fields",
	latestVersionId?: number,
	productId?: number,
	productTypeId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_entitled_products_stddev_pop_fields"]: {
	__typename: "vectric_entitled_products_stddev_pop_fields",
	latestVersionId?: number,
	productId?: number,
	productTypeId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_entitled_products_stddev_samp_fields"]: {
	__typename: "vectric_entitled_products_stddev_samp_fields",
	latestVersionId?: number,
	productId?: number,
	productTypeId?: number
};
	/** aggregate sum on columns */
["vectric_entitled_products_sum_fields"]: {
	__typename: "vectric_entitled_products_sum_fields",
	latestVersionId?: number,
	productId?: number,
	productTypeId?: number
};
	/** aggregate var_pop on columns */
["vectric_entitled_products_var_pop_fields"]: {
	__typename: "vectric_entitled_products_var_pop_fields",
	latestVersionId?: number,
	productId?: number,
	productTypeId?: number
};
	/** aggregate var_samp on columns */
["vectric_entitled_products_var_samp_fields"]: {
	__typename: "vectric_entitled_products_var_samp_fields",
	latestVersionId?: number,
	productId?: number,
	productTypeId?: number
};
	/** aggregate variance on columns */
["vectric_entitled_products_variance_fields"]: {
	__typename: "vectric_entitled_products_variance_fields",
	latestVersionId?: number,
	productId?: number,
	productTypeId?: number
};
	/** columns and relationships of "vectric.entitlement_licences" */
["vectric_entitlement_licences"]: {
	__typename: "vectric_entitlement_licences",
	/** An object relationship */
	entitledProduct: GraphQLTypes["vectric_entitled_products"],
	/** An object relationship */
	entitlement: GraphQLTypes["vectric_entitlements"],
	entitlementId: number,
	entitlementLicenceId: number,
	licenceCode: string,
	licenceIdAsDisplay?: boolean,
	licenceType: string,
	productId: number,
	registeredUsername: string
};
	/** aggregated selection of "vectric.entitlement_licences" */
["vectric_entitlement_licences_aggregate"]: {
	__typename: "vectric_entitlement_licences_aggregate",
	aggregate?: GraphQLTypes["vectric_entitlement_licences_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_entitlement_licences"]>
};
	/** aggregate fields of "vectric.entitlement_licences" */
["vectric_entitlement_licences_aggregate_fields"]: {
	__typename: "vectric_entitlement_licences_aggregate_fields",
	avg?: GraphQLTypes["vectric_entitlement_licences_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_entitlement_licences_max_fields"],
	min?: GraphQLTypes["vectric_entitlement_licences_min_fields"],
	stddev?: GraphQLTypes["vectric_entitlement_licences_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_entitlement_licences_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_entitlement_licences_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_entitlement_licences_sum_fields"],
	var_pop?: GraphQLTypes["vectric_entitlement_licences_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_entitlement_licences_var_samp_fields"],
	variance?: GraphQLTypes["vectric_entitlement_licences_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_entitlement_licences_avg_fields"]: {
	__typename: "vectric_entitlement_licences_avg_fields",
	entitlementId?: number,
	entitlementLicenceId?: number,
	productId?: number
};
	/** aggregate max on columns */
["vectric_entitlement_licences_max_fields"]: {
	__typename: "vectric_entitlement_licences_max_fields",
	entitlementId?: number,
	entitlementLicenceId?: number,
	licenceCode?: string,
	licenceType?: string,
	productId?: number,
	registeredUsername?: string
};
	/** aggregate min on columns */
["vectric_entitlement_licences_min_fields"]: {
	__typename: "vectric_entitlement_licences_min_fields",
	entitlementId?: number,
	entitlementLicenceId?: number,
	licenceCode?: string,
	licenceType?: string,
	productId?: number,
	registeredUsername?: string
};
	/** response of any mutation on the table "vectric.entitlement_licences" */
["vectric_entitlement_licences_mutation_response"]: {
	__typename: "vectric_entitlement_licences_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_entitlement_licences"]>
};
	/** aggregate stddev on columns */
["vectric_entitlement_licences_stddev_fields"]: {
	__typename: "vectric_entitlement_licences_stddev_fields",
	entitlementId?: number,
	entitlementLicenceId?: number,
	productId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_entitlement_licences_stddev_pop_fields"]: {
	__typename: "vectric_entitlement_licences_stddev_pop_fields",
	entitlementId?: number,
	entitlementLicenceId?: number,
	productId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_entitlement_licences_stddev_samp_fields"]: {
	__typename: "vectric_entitlement_licences_stddev_samp_fields",
	entitlementId?: number,
	entitlementLicenceId?: number,
	productId?: number
};
	/** aggregate sum on columns */
["vectric_entitlement_licences_sum_fields"]: {
	__typename: "vectric_entitlement_licences_sum_fields",
	entitlementId?: number,
	entitlementLicenceId?: number,
	productId?: number
};
	/** aggregate var_pop on columns */
["vectric_entitlement_licences_var_pop_fields"]: {
	__typename: "vectric_entitlement_licences_var_pop_fields",
	entitlementId?: number,
	entitlementLicenceId?: number,
	productId?: number
};
	/** aggregate var_samp on columns */
["vectric_entitlement_licences_var_samp_fields"]: {
	__typename: "vectric_entitlement_licences_var_samp_fields",
	entitlementId?: number,
	entitlementLicenceId?: number,
	productId?: number
};
	/** aggregate variance on columns */
["vectric_entitlement_licences_variance_fields"]: {
	__typename: "vectric_entitlement_licences_variance_fields",
	entitlementId?: number,
	entitlementLicenceId?: number,
	productId?: number
};
	/** columns and relationships of "vectric.entitlements" */
["vectric_entitlements"]: {
	__typename: "vectric_entitlements",
	amendedBy?: string,
	createdBy: string,
	dateAmended?: GraphQLTypes["timestamp"],
	dateCreated?: GraphQLTypes["timestamp"],
	/** An object relationship */
	entitledProduct: GraphQLTypes["vectric_entitled_products"],
	entitledProductId: number,
	entitlementId: number,
	/** An object relationship */
	licence?: GraphQLTypes["vectric_entitlement_licences"],
	/** An object relationship */
	ownedItem: GraphQLTypes["vectric_owned_items"],
	ownedItemId: number,
	statusId: number
};
	/** aggregated selection of "vectric.entitlements" */
["vectric_entitlements_aggregate"]: {
	__typename: "vectric_entitlements_aggregate",
	aggregate?: GraphQLTypes["vectric_entitlements_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_entitlements"]>
};
	/** aggregate fields of "vectric.entitlements" */
["vectric_entitlements_aggregate_fields"]: {
	__typename: "vectric_entitlements_aggregate_fields",
	avg?: GraphQLTypes["vectric_entitlements_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_entitlements_max_fields"],
	min?: GraphQLTypes["vectric_entitlements_min_fields"],
	stddev?: GraphQLTypes["vectric_entitlements_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_entitlements_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_entitlements_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_entitlements_sum_fields"],
	var_pop?: GraphQLTypes["vectric_entitlements_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_entitlements_var_samp_fields"],
	variance?: GraphQLTypes["vectric_entitlements_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_entitlements_avg_fields"]: {
	__typename: "vectric_entitlements_avg_fields",
	entitledProductId?: number,
	entitlementId?: number,
	ownedItemId?: number,
	statusId?: number
};
	/** aggregate max on columns */
["vectric_entitlements_max_fields"]: {
	__typename: "vectric_entitlements_max_fields",
	amendedBy?: string,
	createdBy?: string,
	dateAmended?: GraphQLTypes["timestamp"],
	dateCreated?: GraphQLTypes["timestamp"],
	entitledProductId?: number,
	entitlementId?: number,
	ownedItemId?: number,
	statusId?: number
};
	/** aggregate min on columns */
["vectric_entitlements_min_fields"]: {
	__typename: "vectric_entitlements_min_fields",
	amendedBy?: string,
	createdBy?: string,
	dateAmended?: GraphQLTypes["timestamp"],
	dateCreated?: GraphQLTypes["timestamp"],
	entitledProductId?: number,
	entitlementId?: number,
	ownedItemId?: number,
	statusId?: number
};
	/** response of any mutation on the table "vectric.entitlements" */
["vectric_entitlements_mutation_response"]: {
	__typename: "vectric_entitlements_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_entitlements"]>
};
	/** aggregate stddev on columns */
["vectric_entitlements_stddev_fields"]: {
	__typename: "vectric_entitlements_stddev_fields",
	entitledProductId?: number,
	entitlementId?: number,
	ownedItemId?: number,
	statusId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_entitlements_stddev_pop_fields"]: {
	__typename: "vectric_entitlements_stddev_pop_fields",
	entitledProductId?: number,
	entitlementId?: number,
	ownedItemId?: number,
	statusId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_entitlements_stddev_samp_fields"]: {
	__typename: "vectric_entitlements_stddev_samp_fields",
	entitledProductId?: number,
	entitlementId?: number,
	ownedItemId?: number,
	statusId?: number
};
	/** aggregate sum on columns */
["vectric_entitlements_sum_fields"]: {
	__typename: "vectric_entitlements_sum_fields",
	entitledProductId?: number,
	entitlementId?: number,
	ownedItemId?: number,
	statusId?: number
};
	/** aggregate var_pop on columns */
["vectric_entitlements_var_pop_fields"]: {
	__typename: "vectric_entitlements_var_pop_fields",
	entitledProductId?: number,
	entitlementId?: number,
	ownedItemId?: number,
	statusId?: number
};
	/** aggregate var_samp on columns */
["vectric_entitlements_var_samp_fields"]: {
	__typename: "vectric_entitlements_var_samp_fields",
	entitledProductId?: number,
	entitlementId?: number,
	ownedItemId?: number,
	statusId?: number
};
	/** aggregate variance on columns */
["vectric_entitlements_variance_fields"]: {
	__typename: "vectric_entitlements_variance_fields",
	entitledProductId?: number,
	entitlementId?: number,
	ownedItemId?: number,
	statusId?: number
};
	/** columns and relationships of "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens"]: {
	__typename: "vectric_free_clipart_tokens",
	clipartToken: string,
	completed: boolean,
	customerId: GraphQLTypes["bigint"],
	dateAdded?: GraphQLTypes["timestamptz"],
	dateSelected?: GraphQLTypes["timestamptz"],
	/** An object relationship */
	redeemableToken: GraphQLTypes["vectric_sales_salesitem_products"],
	redeemableTokenOip: GraphQLTypes["bigint"],
	replacementOip?: GraphQLTypes["bigint"],
	/** An object relationship */
	toV10Product?: GraphQLTypes["vectric_products_products"],
	v10Product: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_aggregate"]: {
	__typename: "vectric_free_clipart_tokens_aggregate",
	aggregate?: GraphQLTypes["vectric_free_clipart_tokens_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_free_clipart_tokens"]>
};
	/** aggregate fields of "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_aggregate_fields"]: {
	__typename: "vectric_free_clipart_tokens_aggregate_fields",
	avg?: GraphQLTypes["vectric_free_clipart_tokens_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_free_clipart_tokens_max_fields"],
	min?: GraphQLTypes["vectric_free_clipart_tokens_min_fields"],
	stddev?: GraphQLTypes["vectric_free_clipart_tokens_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_free_clipart_tokens_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_free_clipart_tokens_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_free_clipart_tokens_sum_fields"],
	var_pop?: GraphQLTypes["vectric_free_clipart_tokens_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_free_clipart_tokens_var_samp_fields"],
	variance?: GraphQLTypes["vectric_free_clipart_tokens_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_free_clipart_tokens_avg_fields"]: {
	__typename: "vectric_free_clipart_tokens_avg_fields",
	customerId?: number,
	redeemableTokenOip?: number,
	replacementOip?: number,
	v10Product?: number
};
	/** aggregate max on columns */
["vectric_free_clipart_tokens_max_fields"]: {
	__typename: "vectric_free_clipart_tokens_max_fields",
	clipartToken?: string,
	customerId?: GraphQLTypes["bigint"],
	dateAdded?: GraphQLTypes["timestamptz"],
	dateSelected?: GraphQLTypes["timestamptz"],
	redeemableTokenOip?: GraphQLTypes["bigint"],
	replacementOip?: GraphQLTypes["bigint"],
	v10Product?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_free_clipart_tokens_min_fields"]: {
	__typename: "vectric_free_clipart_tokens_min_fields",
	clipartToken?: string,
	customerId?: GraphQLTypes["bigint"],
	dateAdded?: GraphQLTypes["timestamptz"],
	dateSelected?: GraphQLTypes["timestamptz"],
	redeemableTokenOip?: GraphQLTypes["bigint"],
	replacementOip?: GraphQLTypes["bigint"],
	v10Product?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_mutation_response"]: {
	__typename: "vectric_free_clipart_tokens_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_free_clipart_tokens"]>
};
	/** aggregate stddev on columns */
["vectric_free_clipart_tokens_stddev_fields"]: {
	__typename: "vectric_free_clipart_tokens_stddev_fields",
	customerId?: number,
	redeemableTokenOip?: number,
	replacementOip?: number,
	v10Product?: number
};
	/** aggregate stddev_pop on columns */
["vectric_free_clipart_tokens_stddev_pop_fields"]: {
	__typename: "vectric_free_clipart_tokens_stddev_pop_fields",
	customerId?: number,
	redeemableTokenOip?: number,
	replacementOip?: number,
	v10Product?: number
};
	/** aggregate stddev_samp on columns */
["vectric_free_clipart_tokens_stddev_samp_fields"]: {
	__typename: "vectric_free_clipart_tokens_stddev_samp_fields",
	customerId?: number,
	redeemableTokenOip?: number,
	replacementOip?: number,
	v10Product?: number
};
	/** aggregate sum on columns */
["vectric_free_clipart_tokens_sum_fields"]: {
	__typename: "vectric_free_clipart_tokens_sum_fields",
	customerId?: GraphQLTypes["bigint"],
	redeemableTokenOip?: GraphQLTypes["bigint"],
	replacementOip?: GraphQLTypes["bigint"],
	v10Product?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_free_clipart_tokens_var_pop_fields"]: {
	__typename: "vectric_free_clipart_tokens_var_pop_fields",
	customerId?: number,
	redeemableTokenOip?: number,
	replacementOip?: number,
	v10Product?: number
};
	/** aggregate var_samp on columns */
["vectric_free_clipart_tokens_var_samp_fields"]: {
	__typename: "vectric_free_clipart_tokens_var_samp_fields",
	customerId?: number,
	redeemableTokenOip?: number,
	replacementOip?: number,
	v10Product?: number
};
	/** aggregate variance on columns */
["vectric_free_clipart_tokens_variance_fields"]: {
	__typename: "vectric_free_clipart_tokens_variance_fields",
	customerId?: number,
	redeemableTokenOip?: number,
	replacementOip?: number,
	v10Product?: number
};
	/** columns and relationships of "vectric.freeclipart" */
["vectric_freeclipart"]: {
	__typename: "vectric_freeclipart",
	accessId?: string,
	/** An object relationship */
	category?: GraphQLTypes["vectric_freeclipart_category"],
	categoryId?: GraphQLTypes["bigint"],
	freeClipartId: GraphQLTypes["bigint"],
	location?: string,
	name?: string,
	objectName?: string,
	previewImgUrl?: string
};
	/** aggregated selection of "vectric.freeclipart" */
["vectric_freeclipart_aggregate"]: {
	__typename: "vectric_freeclipart_aggregate",
	aggregate?: GraphQLTypes["vectric_freeclipart_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_freeclipart"]>
};
	/** aggregate fields of "vectric.freeclipart" */
["vectric_freeclipart_aggregate_fields"]: {
	__typename: "vectric_freeclipart_aggregate_fields",
	avg?: GraphQLTypes["vectric_freeclipart_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_freeclipart_max_fields"],
	min?: GraphQLTypes["vectric_freeclipart_min_fields"],
	stddev?: GraphQLTypes["vectric_freeclipart_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_freeclipart_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_freeclipart_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_freeclipart_sum_fields"],
	var_pop?: GraphQLTypes["vectric_freeclipart_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_freeclipart_var_samp_fields"],
	variance?: GraphQLTypes["vectric_freeclipart_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_freeclipart_avg_fields"]: {
	__typename: "vectric_freeclipart_avg_fields",
	categoryId?: number,
	freeClipartId?: number
};
	/** columns and relationships of "vectric.freeclipart_category" */
["vectric_freeclipart_category"]: {
	__typename: "vectric_freeclipart_category",
	categoryId: GraphQLTypes["bigint"],
	name?: string
};
	/** aggregated selection of "vectric.freeclipart_category" */
["vectric_freeclipart_category_aggregate"]: {
	__typename: "vectric_freeclipart_category_aggregate",
	aggregate?: GraphQLTypes["vectric_freeclipart_category_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_freeclipart_category"]>
};
	/** aggregate fields of "vectric.freeclipart_category" */
["vectric_freeclipart_category_aggregate_fields"]: {
	__typename: "vectric_freeclipart_category_aggregate_fields",
	avg?: GraphQLTypes["vectric_freeclipart_category_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_freeclipart_category_max_fields"],
	min?: GraphQLTypes["vectric_freeclipart_category_min_fields"],
	stddev?: GraphQLTypes["vectric_freeclipart_category_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_freeclipart_category_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_freeclipart_category_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_freeclipart_category_sum_fields"],
	var_pop?: GraphQLTypes["vectric_freeclipart_category_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_freeclipart_category_var_samp_fields"],
	variance?: GraphQLTypes["vectric_freeclipart_category_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_freeclipart_category_avg_fields"]: {
	__typename: "vectric_freeclipart_category_avg_fields",
	categoryId?: number
};
	/** aggregate max on columns */
["vectric_freeclipart_category_max_fields"]: {
	__typename: "vectric_freeclipart_category_max_fields",
	categoryId?: GraphQLTypes["bigint"],
	name?: string
};
	/** aggregate min on columns */
["vectric_freeclipart_category_min_fields"]: {
	__typename: "vectric_freeclipart_category_min_fields",
	categoryId?: GraphQLTypes["bigint"],
	name?: string
};
	/** response of any mutation on the table "vectric.freeclipart_category" */
["vectric_freeclipart_category_mutation_response"]: {
	__typename: "vectric_freeclipart_category_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_freeclipart_category"]>
};
	/** aggregate stddev on columns */
["vectric_freeclipart_category_stddev_fields"]: {
	__typename: "vectric_freeclipart_category_stddev_fields",
	categoryId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_freeclipart_category_stddev_pop_fields"]: {
	__typename: "vectric_freeclipart_category_stddev_pop_fields",
	categoryId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_freeclipart_category_stddev_samp_fields"]: {
	__typename: "vectric_freeclipart_category_stddev_samp_fields",
	categoryId?: number
};
	/** aggregate sum on columns */
["vectric_freeclipart_category_sum_fields"]: {
	__typename: "vectric_freeclipart_category_sum_fields",
	categoryId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_freeclipart_category_var_pop_fields"]: {
	__typename: "vectric_freeclipart_category_var_pop_fields",
	categoryId?: number
};
	/** aggregate var_samp on columns */
["vectric_freeclipart_category_var_samp_fields"]: {
	__typename: "vectric_freeclipart_category_var_samp_fields",
	categoryId?: number
};
	/** aggregate variance on columns */
["vectric_freeclipart_category_variance_fields"]: {
	__typename: "vectric_freeclipart_category_variance_fields",
	categoryId?: number
};
	/** columns and relationships of "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record"]: {
	__typename: "vectric_freeclipart_download_record",
	customerId?: GraphQLTypes["bigint"],
	downloadDate?: GraphQLTypes["timestamptz"],
	downloadId: GraphQLTypes["bigint"],
	freeClipartResourceId?: GraphQLTypes["bigint"],
	ipAddress?: string
};
	/** aggregated selection of "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_aggregate"]: {
	__typename: "vectric_freeclipart_download_record_aggregate",
	aggregate?: GraphQLTypes["vectric_freeclipart_download_record_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_freeclipart_download_record"]>
};
	/** aggregate fields of "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_aggregate_fields"]: {
	__typename: "vectric_freeclipart_download_record_aggregate_fields",
	avg?: GraphQLTypes["vectric_freeclipart_download_record_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_freeclipart_download_record_max_fields"],
	min?: GraphQLTypes["vectric_freeclipart_download_record_min_fields"],
	stddev?: GraphQLTypes["vectric_freeclipart_download_record_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_freeclipart_download_record_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_freeclipart_download_record_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_freeclipart_download_record_sum_fields"],
	var_pop?: GraphQLTypes["vectric_freeclipart_download_record_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_freeclipart_download_record_var_samp_fields"],
	variance?: GraphQLTypes["vectric_freeclipart_download_record_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_freeclipart_download_record_avg_fields"]: {
	__typename: "vectric_freeclipart_download_record_avg_fields",
	customerId?: number,
	downloadId?: number,
	freeClipartResourceId?: number
};
	/** aggregate max on columns */
["vectric_freeclipart_download_record_max_fields"]: {
	__typename: "vectric_freeclipart_download_record_max_fields",
	customerId?: GraphQLTypes["bigint"],
	downloadDate?: GraphQLTypes["timestamptz"],
	downloadId?: GraphQLTypes["bigint"],
	freeClipartResourceId?: GraphQLTypes["bigint"],
	ipAddress?: string
};
	/** aggregate min on columns */
["vectric_freeclipart_download_record_min_fields"]: {
	__typename: "vectric_freeclipart_download_record_min_fields",
	customerId?: GraphQLTypes["bigint"],
	downloadDate?: GraphQLTypes["timestamptz"],
	downloadId?: GraphQLTypes["bigint"],
	freeClipartResourceId?: GraphQLTypes["bigint"],
	ipAddress?: string
};
	/** response of any mutation on the table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_mutation_response"]: {
	__typename: "vectric_freeclipart_download_record_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_freeclipart_download_record"]>
};
	/** aggregate stddev on columns */
["vectric_freeclipart_download_record_stddev_fields"]: {
	__typename: "vectric_freeclipart_download_record_stddev_fields",
	customerId?: number,
	downloadId?: number,
	freeClipartResourceId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_freeclipart_download_record_stddev_pop_fields"]: {
	__typename: "vectric_freeclipart_download_record_stddev_pop_fields",
	customerId?: number,
	downloadId?: number,
	freeClipartResourceId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_freeclipart_download_record_stddev_samp_fields"]: {
	__typename: "vectric_freeclipart_download_record_stddev_samp_fields",
	customerId?: number,
	downloadId?: number,
	freeClipartResourceId?: number
};
	/** aggregate sum on columns */
["vectric_freeclipart_download_record_sum_fields"]: {
	__typename: "vectric_freeclipart_download_record_sum_fields",
	customerId?: GraphQLTypes["bigint"],
	downloadId?: GraphQLTypes["bigint"],
	freeClipartResourceId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_freeclipart_download_record_var_pop_fields"]: {
	__typename: "vectric_freeclipart_download_record_var_pop_fields",
	customerId?: number,
	downloadId?: number,
	freeClipartResourceId?: number
};
	/** aggregate var_samp on columns */
["vectric_freeclipart_download_record_var_samp_fields"]: {
	__typename: "vectric_freeclipart_download_record_var_samp_fields",
	customerId?: number,
	downloadId?: number,
	freeClipartResourceId?: number
};
	/** aggregate variance on columns */
["vectric_freeclipart_download_record_variance_fields"]: {
	__typename: "vectric_freeclipart_download_record_variance_fields",
	customerId?: number,
	downloadId?: number,
	freeClipartResourceId?: number
};
	/** aggregate max on columns */
["vectric_freeclipart_max_fields"]: {
	__typename: "vectric_freeclipart_max_fields",
	accessId?: string,
	categoryId?: GraphQLTypes["bigint"],
	freeClipartId?: GraphQLTypes["bigint"],
	location?: string,
	name?: string,
	objectName?: string,
	previewImgUrl?: string
};
	/** aggregate min on columns */
["vectric_freeclipart_min_fields"]: {
	__typename: "vectric_freeclipart_min_fields",
	accessId?: string,
	categoryId?: GraphQLTypes["bigint"],
	freeClipartId?: GraphQLTypes["bigint"],
	location?: string,
	name?: string,
	objectName?: string,
	previewImgUrl?: string
};
	/** response of any mutation on the table "vectric.freeclipart" */
["vectric_freeclipart_mutation_response"]: {
	__typename: "vectric_freeclipart_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_freeclipart"]>
};
	/** aggregate stddev on columns */
["vectric_freeclipart_stddev_fields"]: {
	__typename: "vectric_freeclipart_stddev_fields",
	categoryId?: number,
	freeClipartId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_freeclipart_stddev_pop_fields"]: {
	__typename: "vectric_freeclipart_stddev_pop_fields",
	categoryId?: number,
	freeClipartId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_freeclipart_stddev_samp_fields"]: {
	__typename: "vectric_freeclipart_stddev_samp_fields",
	categoryId?: number,
	freeClipartId?: number
};
	/** aggregate sum on columns */
["vectric_freeclipart_sum_fields"]: {
	__typename: "vectric_freeclipart_sum_fields",
	categoryId?: GraphQLTypes["bigint"],
	freeClipartId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_freeclipart_var_pop_fields"]: {
	__typename: "vectric_freeclipart_var_pop_fields",
	categoryId?: number,
	freeClipartId?: number
};
	/** aggregate var_samp on columns */
["vectric_freeclipart_var_samp_fields"]: {
	__typename: "vectric_freeclipart_var_samp_fields",
	categoryId?: number,
	freeClipartId?: number
};
	/** aggregate variance on columns */
["vectric_freeclipart_variance_fields"]: {
	__typename: "vectric_freeclipart_variance_fields",
	categoryId?: number,
	freeClipartId?: number
};
	/** columns and relationships of "vectric.group_info" */
["vectric_group_info"]: {
	__typename: "vectric_group_info",
	customerid?: GraphQLTypes["bigint"],
	group_id?: number,
	group_name?: string,
	role?: string
};
	/** aggregated selection of "vectric.group_info" */
["vectric_group_info_aggregate"]: {
	__typename: "vectric_group_info_aggregate",
	aggregate?: GraphQLTypes["vectric_group_info_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_group_info"]>
};
	/** aggregate fields of "vectric.group_info" */
["vectric_group_info_aggregate_fields"]: {
	__typename: "vectric_group_info_aggregate_fields",
	avg?: GraphQLTypes["vectric_group_info_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_group_info_max_fields"],
	min?: GraphQLTypes["vectric_group_info_min_fields"],
	stddev?: GraphQLTypes["vectric_group_info_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_group_info_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_group_info_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_group_info_sum_fields"],
	var_pop?: GraphQLTypes["vectric_group_info_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_group_info_var_samp_fields"],
	variance?: GraphQLTypes["vectric_group_info_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_group_info_avg_fields"]: {
	__typename: "vectric_group_info_avg_fields",
	customerid?: number,
	group_id?: number
};
	/** aggregate max on columns */
["vectric_group_info_max_fields"]: {
	__typename: "vectric_group_info_max_fields",
	customerid?: GraphQLTypes["bigint"],
	group_id?: number,
	group_name?: string,
	role?: string
};
	/** aggregate min on columns */
["vectric_group_info_min_fields"]: {
	__typename: "vectric_group_info_min_fields",
	customerid?: GraphQLTypes["bigint"],
	group_id?: number,
	group_name?: string,
	role?: string
};
	/** aggregate stddev on columns */
["vectric_group_info_stddev_fields"]: {
	__typename: "vectric_group_info_stddev_fields",
	customerid?: number,
	group_id?: number
};
	/** aggregate stddev_pop on columns */
["vectric_group_info_stddev_pop_fields"]: {
	__typename: "vectric_group_info_stddev_pop_fields",
	customerid?: number,
	group_id?: number
};
	/** aggregate stddev_samp on columns */
["vectric_group_info_stddev_samp_fields"]: {
	__typename: "vectric_group_info_stddev_samp_fields",
	customerid?: number,
	group_id?: number
};
	/** aggregate sum on columns */
["vectric_group_info_sum_fields"]: {
	__typename: "vectric_group_info_sum_fields",
	customerid?: GraphQLTypes["bigint"],
	group_id?: number
};
	/** aggregate var_pop on columns */
["vectric_group_info_var_pop_fields"]: {
	__typename: "vectric_group_info_var_pop_fields",
	customerid?: number,
	group_id?: number
};
	/** aggregate var_samp on columns */
["vectric_group_info_var_samp_fields"]: {
	__typename: "vectric_group_info_var_samp_fields",
	customerid?: number,
	group_id?: number
};
	/** aggregate variance on columns */
["vectric_group_info_variance_fields"]: {
	__typename: "vectric_group_info_variance_fields",
	customerid?: number,
	group_id?: number
};
	/** columns and relationships of "vectric.group_roles" */
["vectric_group_roles"]: {
	__typename: "vectric_group_roles",
	id: number,
	role: string
};
	/** aggregated selection of "vectric.group_roles" */
["vectric_group_roles_aggregate"]: {
	__typename: "vectric_group_roles_aggregate",
	aggregate?: GraphQLTypes["vectric_group_roles_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_group_roles"]>
};
	/** aggregate fields of "vectric.group_roles" */
["vectric_group_roles_aggregate_fields"]: {
	__typename: "vectric_group_roles_aggregate_fields",
	avg?: GraphQLTypes["vectric_group_roles_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_group_roles_max_fields"],
	min?: GraphQLTypes["vectric_group_roles_min_fields"],
	stddev?: GraphQLTypes["vectric_group_roles_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_group_roles_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_group_roles_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_group_roles_sum_fields"],
	var_pop?: GraphQLTypes["vectric_group_roles_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_group_roles_var_samp_fields"],
	variance?: GraphQLTypes["vectric_group_roles_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_group_roles_avg_fields"]: {
	__typename: "vectric_group_roles_avg_fields",
	id?: number
};
	/** aggregate max on columns */
["vectric_group_roles_max_fields"]: {
	__typename: "vectric_group_roles_max_fields",
	id?: number,
	role?: string
};
	/** aggregate min on columns */
["vectric_group_roles_min_fields"]: {
	__typename: "vectric_group_roles_min_fields",
	id?: number,
	role?: string
};
	/** response of any mutation on the table "vectric.group_roles" */
["vectric_group_roles_mutation_response"]: {
	__typename: "vectric_group_roles_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_group_roles"]>
};
	/** aggregate stddev on columns */
["vectric_group_roles_stddev_fields"]: {
	__typename: "vectric_group_roles_stddev_fields",
	id?: number
};
	/** aggregate stddev_pop on columns */
["vectric_group_roles_stddev_pop_fields"]: {
	__typename: "vectric_group_roles_stddev_pop_fields",
	id?: number
};
	/** aggregate stddev_samp on columns */
["vectric_group_roles_stddev_samp_fields"]: {
	__typename: "vectric_group_roles_stddev_samp_fields",
	id?: number
};
	/** aggregate sum on columns */
["vectric_group_roles_sum_fields"]: {
	__typename: "vectric_group_roles_sum_fields",
	id?: number
};
	/** aggregate var_pop on columns */
["vectric_group_roles_var_pop_fields"]: {
	__typename: "vectric_group_roles_var_pop_fields",
	id?: number
};
	/** aggregate var_samp on columns */
["vectric_group_roles_var_samp_fields"]: {
	__typename: "vectric_group_roles_var_samp_fields",
	id?: number
};
	/** aggregate variance on columns */
["vectric_group_roles_variance_fields"]: {
	__typename: "vectric_group_roles_variance_fields",
	id?: number
};
	/** columns and relationships of "vectric.group_user_role" */
["vectric_group_user_role"]: {
	__typename: "vectric_group_user_role",
	/** An object relationship */
	customer: GraphQLTypes["vectric_sales_customers"],
	customer_id: GraphQLTypes["bigint"],
	/** An object relationship */
	group: GraphQLTypes["vectric_groups"],
	group_id: number,
	/** An object relationship */
	role: GraphQLTypes["vectric_group_roles"],
	role_id: number
};
	/** aggregated selection of "vectric.group_user_role" */
["vectric_group_user_role_aggregate"]: {
	__typename: "vectric_group_user_role_aggregate",
	aggregate?: GraphQLTypes["vectric_group_user_role_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_group_user_role"]>
};
	/** aggregate fields of "vectric.group_user_role" */
["vectric_group_user_role_aggregate_fields"]: {
	__typename: "vectric_group_user_role_aggregate_fields",
	avg?: GraphQLTypes["vectric_group_user_role_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_group_user_role_max_fields"],
	min?: GraphQLTypes["vectric_group_user_role_min_fields"],
	stddev?: GraphQLTypes["vectric_group_user_role_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_group_user_role_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_group_user_role_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_group_user_role_sum_fields"],
	var_pop?: GraphQLTypes["vectric_group_user_role_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_group_user_role_var_samp_fields"],
	variance?: GraphQLTypes["vectric_group_user_role_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_group_user_role_avg_fields"]: {
	__typename: "vectric_group_user_role_avg_fields",
	customer_id?: number,
	group_id?: number,
	role_id?: number
};
	/** aggregate max on columns */
["vectric_group_user_role_max_fields"]: {
	__typename: "vectric_group_user_role_max_fields",
	customer_id?: GraphQLTypes["bigint"],
	group_id?: number,
	role_id?: number
};
	/** aggregate min on columns */
["vectric_group_user_role_min_fields"]: {
	__typename: "vectric_group_user_role_min_fields",
	customer_id?: GraphQLTypes["bigint"],
	group_id?: number,
	role_id?: number
};
	/** response of any mutation on the table "vectric.group_user_role" */
["vectric_group_user_role_mutation_response"]: {
	__typename: "vectric_group_user_role_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_group_user_role"]>
};
	/** aggregate stddev on columns */
["vectric_group_user_role_stddev_fields"]: {
	__typename: "vectric_group_user_role_stddev_fields",
	customer_id?: number,
	group_id?: number,
	role_id?: number
};
	/** aggregate stddev_pop on columns */
["vectric_group_user_role_stddev_pop_fields"]: {
	__typename: "vectric_group_user_role_stddev_pop_fields",
	customer_id?: number,
	group_id?: number,
	role_id?: number
};
	/** aggregate stddev_samp on columns */
["vectric_group_user_role_stddev_samp_fields"]: {
	__typename: "vectric_group_user_role_stddev_samp_fields",
	customer_id?: number,
	group_id?: number,
	role_id?: number
};
	/** aggregate sum on columns */
["vectric_group_user_role_sum_fields"]: {
	__typename: "vectric_group_user_role_sum_fields",
	customer_id?: GraphQLTypes["bigint"],
	group_id?: number,
	role_id?: number
};
	/** aggregate var_pop on columns */
["vectric_group_user_role_var_pop_fields"]: {
	__typename: "vectric_group_user_role_var_pop_fields",
	customer_id?: number,
	group_id?: number,
	role_id?: number
};
	/** aggregate var_samp on columns */
["vectric_group_user_role_var_samp_fields"]: {
	__typename: "vectric_group_user_role_var_samp_fields",
	customer_id?: number,
	group_id?: number,
	role_id?: number
};
	/** aggregate variance on columns */
["vectric_group_user_role_variance_fields"]: {
	__typename: "vectric_group_user_role_variance_fields",
	customer_id?: number,
	group_id?: number,
	role_id?: number
};
	/** columns and relationships of "vectric.groups" */
["vectric_groups"]: {
	__typename: "vectric_groups",
	created_at: GraphQLTypes["timestamp"],
	group_name: string,
	id: number,
	/** An array relationship */
	members: Array<GraphQLTypes["vectric_group_user_role"]>,
	/** An aggregate relationship */
	members_aggregate: GraphQLTypes["vectric_group_user_role_aggregate"]
};
	/** aggregated selection of "vectric.groups" */
["vectric_groups_aggregate"]: {
	__typename: "vectric_groups_aggregate",
	aggregate?: GraphQLTypes["vectric_groups_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_groups"]>
};
	/** aggregate fields of "vectric.groups" */
["vectric_groups_aggregate_fields"]: {
	__typename: "vectric_groups_aggregate_fields",
	avg?: GraphQLTypes["vectric_groups_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_groups_max_fields"],
	min?: GraphQLTypes["vectric_groups_min_fields"],
	stddev?: GraphQLTypes["vectric_groups_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_groups_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_groups_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_groups_sum_fields"],
	var_pop?: GraphQLTypes["vectric_groups_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_groups_var_samp_fields"],
	variance?: GraphQLTypes["vectric_groups_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_groups_avg_fields"]: {
	__typename: "vectric_groups_avg_fields",
	id?: number
};
	/** aggregate max on columns */
["vectric_groups_max_fields"]: {
	__typename: "vectric_groups_max_fields",
	created_at?: GraphQLTypes["timestamp"],
	group_name?: string,
	id?: number
};
	/** aggregate min on columns */
["vectric_groups_min_fields"]: {
	__typename: "vectric_groups_min_fields",
	created_at?: GraphQLTypes["timestamp"],
	group_name?: string,
	id?: number
};
	/** response of any mutation on the table "vectric.groups" */
["vectric_groups_mutation_response"]: {
	__typename: "vectric_groups_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_groups"]>
};
	/** aggregate stddev on columns */
["vectric_groups_stddev_fields"]: {
	__typename: "vectric_groups_stddev_fields",
	id?: number
};
	/** aggregate stddev_pop on columns */
["vectric_groups_stddev_pop_fields"]: {
	__typename: "vectric_groups_stddev_pop_fields",
	id?: number
};
	/** aggregate stddev_samp on columns */
["vectric_groups_stddev_samp_fields"]: {
	__typename: "vectric_groups_stddev_samp_fields",
	id?: number
};
	/** aggregate sum on columns */
["vectric_groups_sum_fields"]: {
	__typename: "vectric_groups_sum_fields",
	id?: number
};
	/** aggregate var_pop on columns */
["vectric_groups_var_pop_fields"]: {
	__typename: "vectric_groups_var_pop_fields",
	id?: number
};
	/** aggregate var_samp on columns */
["vectric_groups_var_samp_fields"]: {
	__typename: "vectric_groups_var_samp_fields",
	id?: number
};
	/** aggregate variance on columns */
["vectric_groups_variance_fields"]: {
	__typename: "vectric_groups_variance_fields",
	id?: number
};
	/** columns and relationships of "vectric.language_codes" */
["vectric_language_codes"]: {
	__typename: "vectric_language_codes",
	name?: string,
	/** ISO 639-2 Code */
	threeLetterCode: GraphQLTypes["bpchar"],
	/** ISO 639-1 Code */
	twoLetterCode?: string
};
	/** aggregated selection of "vectric.language_codes" */
["vectric_language_codes_aggregate"]: {
	__typename: "vectric_language_codes_aggregate",
	aggregate?: GraphQLTypes["vectric_language_codes_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_language_codes"]>
};
	/** aggregate fields of "vectric.language_codes" */
["vectric_language_codes_aggregate_fields"]: {
	__typename: "vectric_language_codes_aggregate_fields",
	count: number,
	max?: GraphQLTypes["vectric_language_codes_max_fields"],
	min?: GraphQLTypes["vectric_language_codes_min_fields"]
};
	/** aggregate max on columns */
["vectric_language_codes_max_fields"]: {
	__typename: "vectric_language_codes_max_fields",
	name?: string,
	/** ISO 639-2 Code */
	threeLetterCode?: GraphQLTypes["bpchar"],
	/** ISO 639-1 Code */
	twoLetterCode?: string
};
	/** aggregate min on columns */
["vectric_language_codes_min_fields"]: {
	__typename: "vectric_language_codes_min_fields",
	name?: string,
	/** ISO 639-2 Code */
	threeLetterCode?: GraphQLTypes["bpchar"],
	/** ISO 639-1 Code */
	twoLetterCode?: string
};
	/** response of any mutation on the table "vectric.language_codes" */
["vectric_language_codes_mutation_response"]: {
	__typename: "vectric_language_codes_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_language_codes"]>
};
	/** columns and relationships of "vectric.licence_log" */
["vectric_licence_log"]: {
	__typename: "vectric_licence_log",
	batchId?: string,
	createdBy?: string,
	dateCreated?: GraphQLTypes["timestamptz"],
	licenceCode?: string,
	licenceId: GraphQLTypes["bigint"],
	oemLicenceId?: GraphQLTypes["bigint"],
	productName?: string,
	registeredUsername?: string,
	shortUrlHash?: string
};
	/** aggregated selection of "vectric.licence_log" */
["vectric_licence_log_aggregate"]: {
	__typename: "vectric_licence_log_aggregate",
	aggregate?: GraphQLTypes["vectric_licence_log_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_licence_log"]>
};
	/** aggregate fields of "vectric.licence_log" */
["vectric_licence_log_aggregate_fields"]: {
	__typename: "vectric_licence_log_aggregate_fields",
	avg?: GraphQLTypes["vectric_licence_log_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_licence_log_max_fields"],
	min?: GraphQLTypes["vectric_licence_log_min_fields"],
	stddev?: GraphQLTypes["vectric_licence_log_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_licence_log_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_licence_log_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_licence_log_sum_fields"],
	var_pop?: GraphQLTypes["vectric_licence_log_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_licence_log_var_samp_fields"],
	variance?: GraphQLTypes["vectric_licence_log_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_licence_log_avg_fields"]: {
	__typename: "vectric_licence_log_avg_fields",
	licenceId?: number,
	oemLicenceId?: number
};
	/** aggregate max on columns */
["vectric_licence_log_max_fields"]: {
	__typename: "vectric_licence_log_max_fields",
	batchId?: string,
	createdBy?: string,
	dateCreated?: GraphQLTypes["timestamptz"],
	licenceCode?: string,
	licenceId?: GraphQLTypes["bigint"],
	oemLicenceId?: GraphQLTypes["bigint"],
	productName?: string,
	registeredUsername?: string,
	shortUrlHash?: string
};
	/** aggregate min on columns */
["vectric_licence_log_min_fields"]: {
	__typename: "vectric_licence_log_min_fields",
	batchId?: string,
	createdBy?: string,
	dateCreated?: GraphQLTypes["timestamptz"],
	licenceCode?: string,
	licenceId?: GraphQLTypes["bigint"],
	oemLicenceId?: GraphQLTypes["bigint"],
	productName?: string,
	registeredUsername?: string,
	shortUrlHash?: string
};
	/** response of any mutation on the table "vectric.licence_log" */
["vectric_licence_log_mutation_response"]: {
	__typename: "vectric_licence_log_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_licence_log"]>
};
	/** aggregate stddev on columns */
["vectric_licence_log_stddev_fields"]: {
	__typename: "vectric_licence_log_stddev_fields",
	licenceId?: number,
	oemLicenceId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_licence_log_stddev_pop_fields"]: {
	__typename: "vectric_licence_log_stddev_pop_fields",
	licenceId?: number,
	oemLicenceId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_licence_log_stddev_samp_fields"]: {
	__typename: "vectric_licence_log_stddev_samp_fields",
	licenceId?: number,
	oemLicenceId?: number
};
	/** aggregate sum on columns */
["vectric_licence_log_sum_fields"]: {
	__typename: "vectric_licence_log_sum_fields",
	licenceId?: GraphQLTypes["bigint"],
	oemLicenceId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_licence_log_var_pop_fields"]: {
	__typename: "vectric_licence_log_var_pop_fields",
	licenceId?: number,
	oemLicenceId?: number
};
	/** aggregate var_samp on columns */
["vectric_licence_log_var_samp_fields"]: {
	__typename: "vectric_licence_log_var_samp_fields",
	licenceId?: number,
	oemLicenceId?: number
};
	/** aggregate variance on columns */
["vectric_licence_log_variance_fields"]: {
	__typename: "vectric_licence_log_variance_fields",
	licenceId?: number,
	oemLicenceId?: number
};
	/** columns and relationships of "vectric.linkshortener_links" */
["vectric_linkshortener_links"]: {
	__typename: "vectric_linkshortener_links",
	expiryDate: GraphQLTypes["timestamptz"],
	limitDownloads: boolean,
	longUrl?: string,
	remainingDownloads?: GraphQLTypes["smallint"],
	shortUrlHash: string
};
	/** aggregated selection of "vectric.linkshortener_links" */
["vectric_linkshortener_links_aggregate"]: {
	__typename: "vectric_linkshortener_links_aggregate",
	aggregate?: GraphQLTypes["vectric_linkshortener_links_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_linkshortener_links"]>
};
	/** aggregate fields of "vectric.linkshortener_links" */
["vectric_linkshortener_links_aggregate_fields"]: {
	__typename: "vectric_linkshortener_links_aggregate_fields",
	avg?: GraphQLTypes["vectric_linkshortener_links_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_linkshortener_links_max_fields"],
	min?: GraphQLTypes["vectric_linkshortener_links_min_fields"],
	stddev?: GraphQLTypes["vectric_linkshortener_links_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_linkshortener_links_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_linkshortener_links_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_linkshortener_links_sum_fields"],
	var_pop?: GraphQLTypes["vectric_linkshortener_links_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_linkshortener_links_var_samp_fields"],
	variance?: GraphQLTypes["vectric_linkshortener_links_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_linkshortener_links_avg_fields"]: {
	__typename: "vectric_linkshortener_links_avg_fields",
	remainingDownloads?: number
};
	/** aggregate max on columns */
["vectric_linkshortener_links_max_fields"]: {
	__typename: "vectric_linkshortener_links_max_fields",
	expiryDate?: GraphQLTypes["timestamptz"],
	longUrl?: string,
	remainingDownloads?: GraphQLTypes["smallint"],
	shortUrlHash?: string
};
	/** aggregate min on columns */
["vectric_linkshortener_links_min_fields"]: {
	__typename: "vectric_linkshortener_links_min_fields",
	expiryDate?: GraphQLTypes["timestamptz"],
	longUrl?: string,
	remainingDownloads?: GraphQLTypes["smallint"],
	shortUrlHash?: string
};
	/** response of any mutation on the table "vectric.linkshortener_links" */
["vectric_linkshortener_links_mutation_response"]: {
	__typename: "vectric_linkshortener_links_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_linkshortener_links"]>
};
	/** aggregate stddev on columns */
["vectric_linkshortener_links_stddev_fields"]: {
	__typename: "vectric_linkshortener_links_stddev_fields",
	remainingDownloads?: number
};
	/** aggregate stddev_pop on columns */
["vectric_linkshortener_links_stddev_pop_fields"]: {
	__typename: "vectric_linkshortener_links_stddev_pop_fields",
	remainingDownloads?: number
};
	/** aggregate stddev_samp on columns */
["vectric_linkshortener_links_stddev_samp_fields"]: {
	__typename: "vectric_linkshortener_links_stddev_samp_fields",
	remainingDownloads?: number
};
	/** aggregate sum on columns */
["vectric_linkshortener_links_sum_fields"]: {
	__typename: "vectric_linkshortener_links_sum_fields",
	remainingDownloads?: GraphQLTypes["smallint"]
};
	/** aggregate var_pop on columns */
["vectric_linkshortener_links_var_pop_fields"]: {
	__typename: "vectric_linkshortener_links_var_pop_fields",
	remainingDownloads?: number
};
	/** aggregate var_samp on columns */
["vectric_linkshortener_links_var_samp_fields"]: {
	__typename: "vectric_linkshortener_links_var_samp_fields",
	remainingDownloads?: number
};
	/** aggregate variance on columns */
["vectric_linkshortener_links_variance_fields"]: {
	__typename: "vectric_linkshortener_links_variance_fields",
	remainingDownloads?: number
};
	/** columns and relationships of "vectric.makerspace_requests" */
["vectric_makerspace_requests"]: {
	__typename: "vectric_makerspace_requests",
	ipAddress?: string,
	licenceCode?: string,
	licenceGenerated?: string,
	makerspaceDiskId?: string,
	makerspaceId?: string,
	requestDate?: GraphQLTypes["timestamptz"],
	requestId: GraphQLTypes["bigint"],
	salesItemProductId?: GraphQLTypes["bigint"],
	trialDiskId?: string,
	trialLayerUuid?: string
};
	/** aggregated selection of "vectric.makerspace_requests" */
["vectric_makerspace_requests_aggregate"]: {
	__typename: "vectric_makerspace_requests_aggregate",
	aggregate?: GraphQLTypes["vectric_makerspace_requests_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_makerspace_requests"]>
};
	/** aggregate fields of "vectric.makerspace_requests" */
["vectric_makerspace_requests_aggregate_fields"]: {
	__typename: "vectric_makerspace_requests_aggregate_fields",
	avg?: GraphQLTypes["vectric_makerspace_requests_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_makerspace_requests_max_fields"],
	min?: GraphQLTypes["vectric_makerspace_requests_min_fields"],
	stddev?: GraphQLTypes["vectric_makerspace_requests_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_makerspace_requests_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_makerspace_requests_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_makerspace_requests_sum_fields"],
	var_pop?: GraphQLTypes["vectric_makerspace_requests_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_makerspace_requests_var_samp_fields"],
	variance?: GraphQLTypes["vectric_makerspace_requests_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_makerspace_requests_avg_fields"]: {
	__typename: "vectric_makerspace_requests_avg_fields",
	requestId?: number,
	salesItemProductId?: number
};
	/** aggregate max on columns */
["vectric_makerspace_requests_max_fields"]: {
	__typename: "vectric_makerspace_requests_max_fields",
	ipAddress?: string,
	licenceCode?: string,
	licenceGenerated?: string,
	makerspaceDiskId?: string,
	makerspaceId?: string,
	requestDate?: GraphQLTypes["timestamptz"],
	requestId?: GraphQLTypes["bigint"],
	salesItemProductId?: GraphQLTypes["bigint"],
	trialDiskId?: string,
	trialLayerUuid?: string
};
	/** aggregate min on columns */
["vectric_makerspace_requests_min_fields"]: {
	__typename: "vectric_makerspace_requests_min_fields",
	ipAddress?: string,
	licenceCode?: string,
	licenceGenerated?: string,
	makerspaceDiskId?: string,
	makerspaceId?: string,
	requestDate?: GraphQLTypes["timestamptz"],
	requestId?: GraphQLTypes["bigint"],
	salesItemProductId?: GraphQLTypes["bigint"],
	trialDiskId?: string,
	trialLayerUuid?: string
};
	/** response of any mutation on the table "vectric.makerspace_requests" */
["vectric_makerspace_requests_mutation_response"]: {
	__typename: "vectric_makerspace_requests_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_makerspace_requests"]>
};
	/** aggregate stddev on columns */
["vectric_makerspace_requests_stddev_fields"]: {
	__typename: "vectric_makerspace_requests_stddev_fields",
	requestId?: number,
	salesItemProductId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_makerspace_requests_stddev_pop_fields"]: {
	__typename: "vectric_makerspace_requests_stddev_pop_fields",
	requestId?: number,
	salesItemProductId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_makerspace_requests_stddev_samp_fields"]: {
	__typename: "vectric_makerspace_requests_stddev_samp_fields",
	requestId?: number,
	salesItemProductId?: number
};
	/** aggregate sum on columns */
["vectric_makerspace_requests_sum_fields"]: {
	__typename: "vectric_makerspace_requests_sum_fields",
	requestId?: GraphQLTypes["bigint"],
	salesItemProductId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_makerspace_requests_var_pop_fields"]: {
	__typename: "vectric_makerspace_requests_var_pop_fields",
	requestId?: number,
	salesItemProductId?: number
};
	/** aggregate var_samp on columns */
["vectric_makerspace_requests_var_samp_fields"]: {
	__typename: "vectric_makerspace_requests_var_samp_fields",
	requestId?: number,
	salesItemProductId?: number
};
	/** aggregate variance on columns */
["vectric_makerspace_requests_variance_fields"]: {
	__typename: "vectric_makerspace_requests_variance_fields",
	requestId?: number,
	salesItemProductId?: number
};
	/** columns and relationships of "vectric.membership_invitation_status" */
["vectric_membership_invitation_status"]: {
	__typename: "vectric_membership_invitation_status",
	status: string
};
	/** aggregated selection of "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_aggregate"]: {
	__typename: "vectric_membership_invitation_status_aggregate",
	aggregate?: GraphQLTypes["vectric_membership_invitation_status_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_membership_invitation_status"]>
};
	/** aggregate fields of "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_aggregate_fields"]: {
	__typename: "vectric_membership_invitation_status_aggregate_fields",
	count: number,
	max?: GraphQLTypes["vectric_membership_invitation_status_max_fields"],
	min?: GraphQLTypes["vectric_membership_invitation_status_min_fields"]
};
	/** aggregate max on columns */
["vectric_membership_invitation_status_max_fields"]: {
	__typename: "vectric_membership_invitation_status_max_fields",
	status?: string
};
	/** aggregate min on columns */
["vectric_membership_invitation_status_min_fields"]: {
	__typename: "vectric_membership_invitation_status_min_fields",
	status?: string
};
	/** response of any mutation on the table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_mutation_response"]: {
	__typename: "vectric_membership_invitation_status_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_membership_invitation_status"]>
};
	/** columns and relationships of "vectric.membership_invitations" */
["vectric_membership_invitations"]: {
	__typename: "vectric_membership_invitations",
	dateInvited: GraphQLTypes["timestamp"],
	dateProcessed?: GraphQLTypes["timestamp"],
	email: string,
	invitationId: number,
	invitationStatus: GraphQLTypes["vectric_membership_invitation_status_enum"],
	invitedBy: string,
	/** An object relationship */
	membership: GraphQLTypes["vectric_memberships"],
	membershipId: number,
	/** An object relationship */
	organization: GraphQLTypes["vectric_organizations"],
	organizationId: number,
	/** An object relationship */
	status: GraphQLTypes["vectric_membership_invitation_status"],
	token: string
};
	/** aggregated selection of "vectric.membership_invitations" */
["vectric_membership_invitations_aggregate"]: {
	__typename: "vectric_membership_invitations_aggregate",
	aggregate?: GraphQLTypes["vectric_membership_invitations_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_membership_invitations"]>
};
	/** aggregate fields of "vectric.membership_invitations" */
["vectric_membership_invitations_aggregate_fields"]: {
	__typename: "vectric_membership_invitations_aggregate_fields",
	avg?: GraphQLTypes["vectric_membership_invitations_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_membership_invitations_max_fields"],
	min?: GraphQLTypes["vectric_membership_invitations_min_fields"],
	stddev?: GraphQLTypes["vectric_membership_invitations_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_membership_invitations_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_membership_invitations_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_membership_invitations_sum_fields"],
	var_pop?: GraphQLTypes["vectric_membership_invitations_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_membership_invitations_var_samp_fields"],
	variance?: GraphQLTypes["vectric_membership_invitations_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_membership_invitations_avg_fields"]: {
	__typename: "vectric_membership_invitations_avg_fields",
	invitationId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** aggregate max on columns */
["vectric_membership_invitations_max_fields"]: {
	__typename: "vectric_membership_invitations_max_fields",
	dateInvited?: GraphQLTypes["timestamp"],
	dateProcessed?: GraphQLTypes["timestamp"],
	email?: string,
	invitationId?: number,
	invitedBy?: string,
	membershipId?: number,
	organizationId?: number,
	token?: string
};
	/** aggregate min on columns */
["vectric_membership_invitations_min_fields"]: {
	__typename: "vectric_membership_invitations_min_fields",
	dateInvited?: GraphQLTypes["timestamp"],
	dateProcessed?: GraphQLTypes["timestamp"],
	email?: string,
	invitationId?: number,
	invitedBy?: string,
	membershipId?: number,
	organizationId?: number,
	token?: string
};
	/** response of any mutation on the table "vectric.membership_invitations" */
["vectric_membership_invitations_mutation_response"]: {
	__typename: "vectric_membership_invitations_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_membership_invitations"]>
};
	/** aggregate stddev on columns */
["vectric_membership_invitations_stddev_fields"]: {
	__typename: "vectric_membership_invitations_stddev_fields",
	invitationId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_membership_invitations_stddev_pop_fields"]: {
	__typename: "vectric_membership_invitations_stddev_pop_fields",
	invitationId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_membership_invitations_stddev_samp_fields"]: {
	__typename: "vectric_membership_invitations_stddev_samp_fields",
	invitationId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** aggregate sum on columns */
["vectric_membership_invitations_sum_fields"]: {
	__typename: "vectric_membership_invitations_sum_fields",
	invitationId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** aggregate var_pop on columns */
["vectric_membership_invitations_var_pop_fields"]: {
	__typename: "vectric_membership_invitations_var_pop_fields",
	invitationId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** aggregate var_samp on columns */
["vectric_membership_invitations_var_samp_fields"]: {
	__typename: "vectric_membership_invitations_var_samp_fields",
	invitationId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** aggregate variance on columns */
["vectric_membership_invitations_variance_fields"]: {
	__typename: "vectric_membership_invitations_variance_fields",
	invitationId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** columns and relationships of "vectric.membership_roles" */
["vectric_membership_roles"]: {
	__typename: "vectric_membership_roles",
	role: string
};
	/** aggregated selection of "vectric.membership_roles" */
["vectric_membership_roles_aggregate"]: {
	__typename: "vectric_membership_roles_aggregate",
	aggregate?: GraphQLTypes["vectric_membership_roles_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_membership_roles"]>
};
	/** aggregate fields of "vectric.membership_roles" */
["vectric_membership_roles_aggregate_fields"]: {
	__typename: "vectric_membership_roles_aggregate_fields",
	count: number,
	max?: GraphQLTypes["vectric_membership_roles_max_fields"],
	min?: GraphQLTypes["vectric_membership_roles_min_fields"]
};
	/** aggregate max on columns */
["vectric_membership_roles_max_fields"]: {
	__typename: "vectric_membership_roles_max_fields",
	role?: string
};
	/** aggregate min on columns */
["vectric_membership_roles_min_fields"]: {
	__typename: "vectric_membership_roles_min_fields",
	role?: string
};
	/** response of any mutation on the table "vectric.membership_roles" */
["vectric_membership_roles_mutation_response"]: {
	__typename: "vectric_membership_roles_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_membership_roles"]>
};
	/** columns and relationships of "vectric.membership_status" */
["vectric_membership_status"]: {
	__typename: "vectric_membership_status",
	status: string
};
	/** aggregated selection of "vectric.membership_status" */
["vectric_membership_status_aggregate"]: {
	__typename: "vectric_membership_status_aggregate",
	aggregate?: GraphQLTypes["vectric_membership_status_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_membership_status"]>
};
	/** aggregate fields of "vectric.membership_status" */
["vectric_membership_status_aggregate_fields"]: {
	__typename: "vectric_membership_status_aggregate_fields",
	count: number,
	max?: GraphQLTypes["vectric_membership_status_max_fields"],
	min?: GraphQLTypes["vectric_membership_status_min_fields"]
};
	/** aggregate max on columns */
["vectric_membership_status_max_fields"]: {
	__typename: "vectric_membership_status_max_fields",
	status?: string
};
	/** aggregate min on columns */
["vectric_membership_status_min_fields"]: {
	__typename: "vectric_membership_status_min_fields",
	status?: string
};
	/** response of any mutation on the table "vectric.membership_status" */
["vectric_membership_status_mutation_response"]: {
	__typename: "vectric_membership_status_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_membership_status"]>
};
	/** columns and relationships of "vectric.memberships" */
["vectric_memberships"]: {
	__typename: "vectric_memberships",
	/** An array relationship */
	activeMembers: Array<GraphQLTypes["vectric_active_memberships"]>,
	/** An aggregate relationship */
	activeMembers_aggregate: GraphQLTypes["vectric_active_memberships_aggregate"],
	addedBy: string,
	amendedBy?: string,
	/** An object relationship */
	customer?: GraphQLTypes["vectric_sales_customers"],
	customerId?: GraphQLTypes["bigint"],
	dateAdded: GraphQLTypes["timestamp"],
	dateAmended?: GraphQLTypes["timestamp"],
	membershipId: number,
	/** An array relationship */
	membershipInvitations: Array<GraphQLTypes["vectric_membership_invitations"]>,
	/** An aggregate relationship */
	membershipInvitations_aggregate: GraphQLTypes["vectric_membership_invitations_aggregate"],
	/** An object relationship */
	membershipRole: GraphQLTypes["vectric_membership_roles"],
	/** An object relationship */
	membershipStatus: GraphQLTypes["vectric_membership_status"],
	/** An object relationship */
	organization: GraphQLTypes["vectric_organizations"],
	organizationId: number,
	role: GraphQLTypes["vectric_membership_roles_enum"],
	status: GraphQLTypes["vectric_membership_status_enum"]
};
	/** aggregated selection of "vectric.memberships" */
["vectric_memberships_aggregate"]: {
	__typename: "vectric_memberships_aggregate",
	aggregate?: GraphQLTypes["vectric_memberships_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_memberships"]>
};
	/** aggregate fields of "vectric.memberships" */
["vectric_memberships_aggregate_fields"]: {
	__typename: "vectric_memberships_aggregate_fields",
	avg?: GraphQLTypes["vectric_memberships_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_memberships_max_fields"],
	min?: GraphQLTypes["vectric_memberships_min_fields"],
	stddev?: GraphQLTypes["vectric_memberships_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_memberships_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_memberships_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_memberships_sum_fields"],
	var_pop?: GraphQLTypes["vectric_memberships_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_memberships_var_samp_fields"],
	variance?: GraphQLTypes["vectric_memberships_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_memberships_avg_fields"]: {
	__typename: "vectric_memberships_avg_fields",
	customerId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** aggregate max on columns */
["vectric_memberships_max_fields"]: {
	__typename: "vectric_memberships_max_fields",
	addedBy?: string,
	amendedBy?: string,
	customerId?: GraphQLTypes["bigint"],
	dateAdded?: GraphQLTypes["timestamp"],
	dateAmended?: GraphQLTypes["timestamp"],
	membershipId?: number,
	organizationId?: number
};
	/** aggregate min on columns */
["vectric_memberships_min_fields"]: {
	__typename: "vectric_memberships_min_fields",
	addedBy?: string,
	amendedBy?: string,
	customerId?: GraphQLTypes["bigint"],
	dateAdded?: GraphQLTypes["timestamp"],
	dateAmended?: GraphQLTypes["timestamp"],
	membershipId?: number,
	organizationId?: number
};
	/** response of any mutation on the table "vectric.memberships" */
["vectric_memberships_mutation_response"]: {
	__typename: "vectric_memberships_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_memberships"]>
};
	/** aggregate stddev on columns */
["vectric_memberships_stddev_fields"]: {
	__typename: "vectric_memberships_stddev_fields",
	customerId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_memberships_stddev_pop_fields"]: {
	__typename: "vectric_memberships_stddev_pop_fields",
	customerId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_memberships_stddev_samp_fields"]: {
	__typename: "vectric_memberships_stddev_samp_fields",
	customerId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** aggregate sum on columns */
["vectric_memberships_sum_fields"]: {
	__typename: "vectric_memberships_sum_fields",
	customerId?: GraphQLTypes["bigint"],
	membershipId?: number,
	organizationId?: number
};
	/** aggregate var_pop on columns */
["vectric_memberships_var_pop_fields"]: {
	__typename: "vectric_memberships_var_pop_fields",
	customerId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** aggregate var_samp on columns */
["vectric_memberships_var_samp_fields"]: {
	__typename: "vectric_memberships_var_samp_fields",
	customerId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** aggregate variance on columns */
["vectric_memberships_variance_fields"]: {
	__typename: "vectric_memberships_variance_fields",
	customerId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** columns and relationships of "vectric.oauth_client_details" */
["vectric_oauth_client_details"]: {
	__typename: "vectric_oauth_client_details",
	access_token_validity?: GraphQLTypes["bigint"],
	additional_information?: string,
	authorities?: string,
	authorized_grant_types?: string,
	autoapprove?: string,
	client_id: string,
	client_secret?: string,
	refresh_token_validity?: GraphQLTypes["bigint"],
	resource_ids?: string,
	scope?: string,
	web_server_redirect_uri?: string
};
	/** aggregated selection of "vectric.oauth_client_details" */
["vectric_oauth_client_details_aggregate"]: {
	__typename: "vectric_oauth_client_details_aggregate",
	aggregate?: GraphQLTypes["vectric_oauth_client_details_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_oauth_client_details"]>
};
	/** aggregate fields of "vectric.oauth_client_details" */
["vectric_oauth_client_details_aggregate_fields"]: {
	__typename: "vectric_oauth_client_details_aggregate_fields",
	avg?: GraphQLTypes["vectric_oauth_client_details_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_oauth_client_details_max_fields"],
	min?: GraphQLTypes["vectric_oauth_client_details_min_fields"],
	stddev?: GraphQLTypes["vectric_oauth_client_details_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_oauth_client_details_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_oauth_client_details_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_oauth_client_details_sum_fields"],
	var_pop?: GraphQLTypes["vectric_oauth_client_details_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_oauth_client_details_var_samp_fields"],
	variance?: GraphQLTypes["vectric_oauth_client_details_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oauth_client_details_avg_fields"]: {
	__typename: "vectric_oauth_client_details_avg_fields",
	access_token_validity?: number,
	refresh_token_validity?: number
};
	/** aggregate max on columns */
["vectric_oauth_client_details_max_fields"]: {
	__typename: "vectric_oauth_client_details_max_fields",
	access_token_validity?: GraphQLTypes["bigint"],
	additional_information?: string,
	authorities?: string,
	authorized_grant_types?: string,
	autoapprove?: string,
	client_id?: string,
	client_secret?: string,
	refresh_token_validity?: GraphQLTypes["bigint"],
	resource_ids?: string,
	scope?: string,
	web_server_redirect_uri?: string
};
	/** aggregate min on columns */
["vectric_oauth_client_details_min_fields"]: {
	__typename: "vectric_oauth_client_details_min_fields",
	access_token_validity?: GraphQLTypes["bigint"],
	additional_information?: string,
	authorities?: string,
	authorized_grant_types?: string,
	autoapprove?: string,
	client_id?: string,
	client_secret?: string,
	refresh_token_validity?: GraphQLTypes["bigint"],
	resource_ids?: string,
	scope?: string,
	web_server_redirect_uri?: string
};
	/** response of any mutation on the table "vectric.oauth_client_details" */
["vectric_oauth_client_details_mutation_response"]: {
	__typename: "vectric_oauth_client_details_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_oauth_client_details"]>
};
	/** aggregate stddev on columns */
["vectric_oauth_client_details_stddev_fields"]: {
	__typename: "vectric_oauth_client_details_stddev_fields",
	access_token_validity?: number,
	refresh_token_validity?: number
};
	/** aggregate stddev_pop on columns */
["vectric_oauth_client_details_stddev_pop_fields"]: {
	__typename: "vectric_oauth_client_details_stddev_pop_fields",
	access_token_validity?: number,
	refresh_token_validity?: number
};
	/** aggregate stddev_samp on columns */
["vectric_oauth_client_details_stddev_samp_fields"]: {
	__typename: "vectric_oauth_client_details_stddev_samp_fields",
	access_token_validity?: number,
	refresh_token_validity?: number
};
	/** aggregate sum on columns */
["vectric_oauth_client_details_sum_fields"]: {
	__typename: "vectric_oauth_client_details_sum_fields",
	access_token_validity?: GraphQLTypes["bigint"],
	refresh_token_validity?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oauth_client_details_var_pop_fields"]: {
	__typename: "vectric_oauth_client_details_var_pop_fields",
	access_token_validity?: number,
	refresh_token_validity?: number
};
	/** aggregate var_samp on columns */
["vectric_oauth_client_details_var_samp_fields"]: {
	__typename: "vectric_oauth_client_details_var_samp_fields",
	access_token_validity?: number,
	refresh_token_validity?: number
};
	/** aggregate variance on columns */
["vectric_oauth_client_details_variance_fields"]: {
	__typename: "vectric_oauth_client_details_variance_fields",
	access_token_validity?: number,
	refresh_token_validity?: number
};
	/** columns and relationships of "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails"]: {
	__typename: "vectric_oem_allocation_emails",
	bundle_id: string,
	date: GraphQLTypes["timestamp"],
	email_to: string,
	/** An object relationship */
	oem_customer: GraphQLTypes["vectric_sales_customers"],
	oem_customer_id: GraphQLTypes["bigint"],
	/** An object relationship */
	oem_partner: GraphQLTypes["vectric_oem_partners"],
	partner_id: GraphQLTypes["bigint"],
	/** An object relationship */
	sales_oem_bundle: GraphQLTypes["vectric_sales_oem_bundles"]
};
	/** aggregated selection of "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails_aggregate"]: {
	__typename: "vectric_oem_allocation_emails_aggregate",
	aggregate?: GraphQLTypes["vectric_oem_allocation_emails_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_oem_allocation_emails"]>
};
	/** aggregate fields of "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails_aggregate_fields"]: {
	__typename: "vectric_oem_allocation_emails_aggregate_fields",
	avg?: GraphQLTypes["vectric_oem_allocation_emails_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_oem_allocation_emails_max_fields"],
	min?: GraphQLTypes["vectric_oem_allocation_emails_min_fields"],
	stddev?: GraphQLTypes["vectric_oem_allocation_emails_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_oem_allocation_emails_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_oem_allocation_emails_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_oem_allocation_emails_sum_fields"],
	var_pop?: GraphQLTypes["vectric_oem_allocation_emails_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_oem_allocation_emails_var_samp_fields"],
	variance?: GraphQLTypes["vectric_oem_allocation_emails_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_allocation_emails_avg_fields"]: {
	__typename: "vectric_oem_allocation_emails_avg_fields",
	oem_customer_id?: number,
	partner_id?: number
};
	/** aggregate max on columns */
["vectric_oem_allocation_emails_max_fields"]: {
	__typename: "vectric_oem_allocation_emails_max_fields",
	bundle_id?: string,
	date?: GraphQLTypes["timestamp"],
	email_to?: string,
	oem_customer_id?: GraphQLTypes["bigint"],
	partner_id?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_oem_allocation_emails_min_fields"]: {
	__typename: "vectric_oem_allocation_emails_min_fields",
	bundle_id?: string,
	date?: GraphQLTypes["timestamp"],
	email_to?: string,
	oem_customer_id?: GraphQLTypes["bigint"],
	partner_id?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails_mutation_response"]: {
	__typename: "vectric_oem_allocation_emails_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_oem_allocation_emails"]>
};
	/** aggregate stddev on columns */
["vectric_oem_allocation_emails_stddev_fields"]: {
	__typename: "vectric_oem_allocation_emails_stddev_fields",
	oem_customer_id?: number,
	partner_id?: number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_allocation_emails_stddev_pop_fields"]: {
	__typename: "vectric_oem_allocation_emails_stddev_pop_fields",
	oem_customer_id?: number,
	partner_id?: number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_allocation_emails_stddev_samp_fields"]: {
	__typename: "vectric_oem_allocation_emails_stddev_samp_fields",
	oem_customer_id?: number,
	partner_id?: number
};
	/** aggregate sum on columns */
["vectric_oem_allocation_emails_sum_fields"]: {
	__typename: "vectric_oem_allocation_emails_sum_fields",
	oem_customer_id?: GraphQLTypes["bigint"],
	partner_id?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_allocation_emails_var_pop_fields"]: {
	__typename: "vectric_oem_allocation_emails_var_pop_fields",
	oem_customer_id?: number,
	partner_id?: number
};
	/** aggregate var_samp on columns */
["vectric_oem_allocation_emails_var_samp_fields"]: {
	__typename: "vectric_oem_allocation_emails_var_samp_fields",
	oem_customer_id?: number,
	partner_id?: number
};
	/** aggregate variance on columns */
["vectric_oem_allocation_emails_variance_fields"]: {
	__typename: "vectric_oem_allocation_emails_variance_fields",
	oem_customer_id?: number,
	partner_id?: number
};
	/** columns and relationships of "vectric.oem_detailed_products" */
["vectric_oem_detailed_products"]: {
	__typename: "vectric_oem_detailed_products",
	id: GraphQLTypes["bigint"],
	oemProductId: GraphQLTypes["bigint"],
	/** An object relationship */
	product: GraphQLTypes["vectric_products_products"],
	productId: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_aggregate"]: {
	__typename: "vectric_oem_detailed_products_aggregate",
	aggregate?: GraphQLTypes["vectric_oem_detailed_products_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_oem_detailed_products"]>
};
	/** aggregate fields of "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_aggregate_fields"]: {
	__typename: "vectric_oem_detailed_products_aggregate_fields",
	avg?: GraphQLTypes["vectric_oem_detailed_products_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_oem_detailed_products_max_fields"],
	min?: GraphQLTypes["vectric_oem_detailed_products_min_fields"],
	stddev?: GraphQLTypes["vectric_oem_detailed_products_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_oem_detailed_products_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_oem_detailed_products_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_oem_detailed_products_sum_fields"],
	var_pop?: GraphQLTypes["vectric_oem_detailed_products_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_oem_detailed_products_var_samp_fields"],
	variance?: GraphQLTypes["vectric_oem_detailed_products_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_detailed_products_avg_fields"]: {
	__typename: "vectric_oem_detailed_products_avg_fields",
	id?: number,
	oemProductId?: number,
	productId?: number
};
	/** aggregate max on columns */
["vectric_oem_detailed_products_max_fields"]: {
	__typename: "vectric_oem_detailed_products_max_fields",
	id?: GraphQLTypes["bigint"],
	oemProductId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_oem_detailed_products_min_fields"]: {
	__typename: "vectric_oem_detailed_products_min_fields",
	id?: GraphQLTypes["bigint"],
	oemProductId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_mutation_response"]: {
	__typename: "vectric_oem_detailed_products_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_oem_detailed_products"]>
};
	/** aggregate stddev on columns */
["vectric_oem_detailed_products_stddev_fields"]: {
	__typename: "vectric_oem_detailed_products_stddev_fields",
	id?: number,
	oemProductId?: number,
	productId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_detailed_products_stddev_pop_fields"]: {
	__typename: "vectric_oem_detailed_products_stddev_pop_fields",
	id?: number,
	oemProductId?: number,
	productId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_detailed_products_stddev_samp_fields"]: {
	__typename: "vectric_oem_detailed_products_stddev_samp_fields",
	id?: number,
	oemProductId?: number,
	productId?: number
};
	/** aggregate sum on columns */
["vectric_oem_detailed_products_sum_fields"]: {
	__typename: "vectric_oem_detailed_products_sum_fields",
	id?: GraphQLTypes["bigint"],
	oemProductId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_detailed_products_var_pop_fields"]: {
	__typename: "vectric_oem_detailed_products_var_pop_fields",
	id?: number,
	oemProductId?: number,
	productId?: number
};
	/** aggregate var_samp on columns */
["vectric_oem_detailed_products_var_samp_fields"]: {
	__typename: "vectric_oem_detailed_products_var_samp_fields",
	id?: number,
	oemProductId?: number,
	productId?: number
};
	/** aggregate variance on columns */
["vectric_oem_detailed_products_variance_fields"]: {
	__typename: "vectric_oem_detailed_products_variance_fields",
	id?: number,
	oemProductId?: number,
	productId?: number
};
	/** columns and relationships of "vectric.oem_eval_request" */
["vectric_oem_eval_request"]: {
	__typename: "vectric_oem_eval_request",
	/** An object relationship */
	customer: GraphQLTypes["vectric_sales_customers"],
	customerId: GraphQLTypes["bigint"],
	dateProcessed?: GraphQLTypes["timestamptz"],
	dateRequested?: GraphQLTypes["timestamptz"],
	expired: boolean,
	granted: boolean,
	/** An object relationship */
	partner?: GraphQLTypes["vectric_oem_partners"],
	partnerId?: GraphQLTypes["bigint"],
	processed: boolean,
	processedBy?: string,
	replacedBy?: GraphQLTypes["bigint"],
	/** An object relationship */
	replacementRequest?: GraphQLTypes["vectric_oem_eval_request"],
	requestId: GraphQLTypes["bigint"],
	requestedBy: GraphQLTypes["bigint"],
	/** An object relationship */
	requester: GraphQLTypes["vectric_sales_customers"],
	vloggerId?: number
};
	/** aggregated selection of "vectric.oem_eval_request" */
["vectric_oem_eval_request_aggregate"]: {
	__typename: "vectric_oem_eval_request_aggregate",
	aggregate?: GraphQLTypes["vectric_oem_eval_request_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_oem_eval_request"]>
};
	/** aggregate fields of "vectric.oem_eval_request" */
["vectric_oem_eval_request_aggregate_fields"]: {
	__typename: "vectric_oem_eval_request_aggregate_fields",
	avg?: GraphQLTypes["vectric_oem_eval_request_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_oem_eval_request_max_fields"],
	min?: GraphQLTypes["vectric_oem_eval_request_min_fields"],
	stddev?: GraphQLTypes["vectric_oem_eval_request_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_oem_eval_request_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_oem_eval_request_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_oem_eval_request_sum_fields"],
	var_pop?: GraphQLTypes["vectric_oem_eval_request_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_oem_eval_request_var_samp_fields"],
	variance?: GraphQLTypes["vectric_oem_eval_request_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_eval_request_avg_fields"]: {
	__typename: "vectric_oem_eval_request_avg_fields",
	customerId?: number,
	partnerId?: number,
	replacedBy?: number,
	requestId?: number,
	requestedBy?: number,
	vloggerId?: number
};
	/** aggregate max on columns */
["vectric_oem_eval_request_max_fields"]: {
	__typename: "vectric_oem_eval_request_max_fields",
	customerId?: GraphQLTypes["bigint"],
	dateProcessed?: GraphQLTypes["timestamptz"],
	dateRequested?: GraphQLTypes["timestamptz"],
	partnerId?: GraphQLTypes["bigint"],
	processedBy?: string,
	replacedBy?: GraphQLTypes["bigint"],
	requestId?: GraphQLTypes["bigint"],
	requestedBy?: GraphQLTypes["bigint"],
	vloggerId?: number
};
	/** aggregate min on columns */
["vectric_oem_eval_request_min_fields"]: {
	__typename: "vectric_oem_eval_request_min_fields",
	customerId?: GraphQLTypes["bigint"],
	dateProcessed?: GraphQLTypes["timestamptz"],
	dateRequested?: GraphQLTypes["timestamptz"],
	partnerId?: GraphQLTypes["bigint"],
	processedBy?: string,
	replacedBy?: GraphQLTypes["bigint"],
	requestId?: GraphQLTypes["bigint"],
	requestedBy?: GraphQLTypes["bigint"],
	vloggerId?: number
};
	/** response of any mutation on the table "vectric.oem_eval_request" */
["vectric_oem_eval_request_mutation_response"]: {
	__typename: "vectric_oem_eval_request_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_oem_eval_request"]>
};
	/** aggregate stddev on columns */
["vectric_oem_eval_request_stddev_fields"]: {
	__typename: "vectric_oem_eval_request_stddev_fields",
	customerId?: number,
	partnerId?: number,
	replacedBy?: number,
	requestId?: number,
	requestedBy?: number,
	vloggerId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_eval_request_stddev_pop_fields"]: {
	__typename: "vectric_oem_eval_request_stddev_pop_fields",
	customerId?: number,
	partnerId?: number,
	replacedBy?: number,
	requestId?: number,
	requestedBy?: number,
	vloggerId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_eval_request_stddev_samp_fields"]: {
	__typename: "vectric_oem_eval_request_stddev_samp_fields",
	customerId?: number,
	partnerId?: number,
	replacedBy?: number,
	requestId?: number,
	requestedBy?: number,
	vloggerId?: number
};
	/** aggregate sum on columns */
["vectric_oem_eval_request_sum_fields"]: {
	__typename: "vectric_oem_eval_request_sum_fields",
	customerId?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"],
	replacedBy?: GraphQLTypes["bigint"],
	requestId?: GraphQLTypes["bigint"],
	requestedBy?: GraphQLTypes["bigint"],
	vloggerId?: number
};
	/** aggregate var_pop on columns */
["vectric_oem_eval_request_var_pop_fields"]: {
	__typename: "vectric_oem_eval_request_var_pop_fields",
	customerId?: number,
	partnerId?: number,
	replacedBy?: number,
	requestId?: number,
	requestedBy?: number,
	vloggerId?: number
};
	/** aggregate var_samp on columns */
["vectric_oem_eval_request_var_samp_fields"]: {
	__typename: "vectric_oem_eval_request_var_samp_fields",
	customerId?: number,
	partnerId?: number,
	replacedBy?: number,
	requestId?: number,
	requestedBy?: number,
	vloggerId?: number
};
	/** aggregate variance on columns */
["vectric_oem_eval_request_variance_fields"]: {
	__typename: "vectric_oem_eval_request_variance_fields",
	customerId?: number,
	partnerId?: number,
	replacedBy?: number,
	requestId?: number,
	requestedBy?: number,
	vloggerId?: number
};
	/** columns and relationships of "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item"]: {
	__typename: "vectric_oem_fastspring_item",
	batchId?: string,
	discountValue?: GraphQLTypes["numeric"],
	/** An array relationship */
	itemBundle: Array<GraphQLTypes["vectric_oem_fastspring_item_bundle"]>,
	/** An aggregate relationship */
	itemBundle_aggregate: GraphQLTypes["vectric_oem_fastspring_item_bundle_aggregate"],
	itemId: GraphQLTypes["bigint"],
	/** An object relationship */
	oemProduct?: GraphQLTypes["vectric_oem_products"],
	oemProductId?: GraphQLTypes["bigint"],
	/** An object relationship */
	order?: GraphQLTypes["vectric_oem_fastspring_order"],
	orderId?: GraphQLTypes["bigint"],
	priceTotal?: GraphQLTypes["numeric"],
	productName?: string,
	quantity?: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_aggregate"]: {
	__typename: "vectric_oem_fastspring_item_aggregate",
	aggregate?: GraphQLTypes["vectric_oem_fastspring_item_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_oem_fastspring_item"]>
};
	/** aggregate fields of "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_aggregate_fields"]: {
	__typename: "vectric_oem_fastspring_item_aggregate_fields",
	avg?: GraphQLTypes["vectric_oem_fastspring_item_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_oem_fastspring_item_max_fields"],
	min?: GraphQLTypes["vectric_oem_fastspring_item_min_fields"],
	stddev?: GraphQLTypes["vectric_oem_fastspring_item_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_oem_fastspring_item_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_oem_fastspring_item_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_oem_fastspring_item_sum_fields"],
	var_pop?: GraphQLTypes["vectric_oem_fastspring_item_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_oem_fastspring_item_var_samp_fields"],
	variance?: GraphQLTypes["vectric_oem_fastspring_item_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_fastspring_item_avg_fields"]: {
	__typename: "vectric_oem_fastspring_item_avg_fields",
	discountValue?: number,
	itemId?: number,
	oemProductId?: number,
	orderId?: number,
	priceTotal?: number,
	quantity?: number
};
	/** columns and relationships of "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle"]: {
	__typename: "vectric_oem_fastspring_item_bundle",
	/** An object relationship */
	bundle: GraphQLTypes["vectric_sales_oem_bundles"],
	bundleId: string,
	/** An object relationship */
	fastspringItem: GraphQLTypes["vectric_oem_fastspring_item"],
	fastspringItemId: GraphQLTypes["bigint"],
	itemBundleId: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_aggregate"]: {
	__typename: "vectric_oem_fastspring_item_bundle_aggregate",
	aggregate?: GraphQLTypes["vectric_oem_fastspring_item_bundle_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_oem_fastspring_item_bundle"]>
};
	/** aggregate fields of "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_aggregate_fields"]: {
	__typename: "vectric_oem_fastspring_item_bundle_aggregate_fields",
	avg?: GraphQLTypes["vectric_oem_fastspring_item_bundle_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_oem_fastspring_item_bundle_max_fields"],
	min?: GraphQLTypes["vectric_oem_fastspring_item_bundle_min_fields"],
	stddev?: GraphQLTypes["vectric_oem_fastspring_item_bundle_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_oem_fastspring_item_bundle_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_oem_fastspring_item_bundle_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_oem_fastspring_item_bundle_sum_fields"],
	var_pop?: GraphQLTypes["vectric_oem_fastspring_item_bundle_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_oem_fastspring_item_bundle_var_samp_fields"],
	variance?: GraphQLTypes["vectric_oem_fastspring_item_bundle_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_fastspring_item_bundle_avg_fields"]: {
	__typename: "vectric_oem_fastspring_item_bundle_avg_fields",
	fastspringItemId?: number,
	itemBundleId?: number
};
	/** aggregate max on columns */
["vectric_oem_fastspring_item_bundle_max_fields"]: {
	__typename: "vectric_oem_fastspring_item_bundle_max_fields",
	bundleId?: string,
	fastspringItemId?: GraphQLTypes["bigint"],
	itemBundleId?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_oem_fastspring_item_bundle_min_fields"]: {
	__typename: "vectric_oem_fastspring_item_bundle_min_fields",
	bundleId?: string,
	fastspringItemId?: GraphQLTypes["bigint"],
	itemBundleId?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_mutation_response"]: {
	__typename: "vectric_oem_fastspring_item_bundle_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_oem_fastspring_item_bundle"]>
};
	/** aggregate stddev on columns */
["vectric_oem_fastspring_item_bundle_stddev_fields"]: {
	__typename: "vectric_oem_fastspring_item_bundle_stddev_fields",
	fastspringItemId?: number,
	itemBundleId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_fastspring_item_bundle_stddev_pop_fields"]: {
	__typename: "vectric_oem_fastspring_item_bundle_stddev_pop_fields",
	fastspringItemId?: number,
	itemBundleId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_fastspring_item_bundle_stddev_samp_fields"]: {
	__typename: "vectric_oem_fastspring_item_bundle_stddev_samp_fields",
	fastspringItemId?: number,
	itemBundleId?: number
};
	/** aggregate sum on columns */
["vectric_oem_fastspring_item_bundle_sum_fields"]: {
	__typename: "vectric_oem_fastspring_item_bundle_sum_fields",
	fastspringItemId?: GraphQLTypes["bigint"],
	itemBundleId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_fastspring_item_bundle_var_pop_fields"]: {
	__typename: "vectric_oem_fastspring_item_bundle_var_pop_fields",
	fastspringItemId?: number,
	itemBundleId?: number
};
	/** aggregate var_samp on columns */
["vectric_oem_fastspring_item_bundle_var_samp_fields"]: {
	__typename: "vectric_oem_fastspring_item_bundle_var_samp_fields",
	fastspringItemId?: number,
	itemBundleId?: number
};
	/** aggregate variance on columns */
["vectric_oem_fastspring_item_bundle_variance_fields"]: {
	__typename: "vectric_oem_fastspring_item_bundle_variance_fields",
	fastspringItemId?: number,
	itemBundleId?: number
};
	/** aggregate max on columns */
["vectric_oem_fastspring_item_max_fields"]: {
	__typename: "vectric_oem_fastspring_item_max_fields",
	batchId?: string,
	discountValue?: GraphQLTypes["numeric"],
	itemId?: GraphQLTypes["bigint"],
	oemProductId?: GraphQLTypes["bigint"],
	orderId?: GraphQLTypes["bigint"],
	priceTotal?: GraphQLTypes["numeric"],
	productName?: string,
	quantity?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_oem_fastspring_item_min_fields"]: {
	__typename: "vectric_oem_fastspring_item_min_fields",
	batchId?: string,
	discountValue?: GraphQLTypes["numeric"],
	itemId?: GraphQLTypes["bigint"],
	oemProductId?: GraphQLTypes["bigint"],
	orderId?: GraphQLTypes["bigint"],
	priceTotal?: GraphQLTypes["numeric"],
	productName?: string,
	quantity?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_mutation_response"]: {
	__typename: "vectric_oem_fastspring_item_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_oem_fastspring_item"]>
};
	/** aggregate stddev on columns */
["vectric_oem_fastspring_item_stddev_fields"]: {
	__typename: "vectric_oem_fastspring_item_stddev_fields",
	discountValue?: number,
	itemId?: number,
	oemProductId?: number,
	orderId?: number,
	priceTotal?: number,
	quantity?: number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_fastspring_item_stddev_pop_fields"]: {
	__typename: "vectric_oem_fastspring_item_stddev_pop_fields",
	discountValue?: number,
	itemId?: number,
	oemProductId?: number,
	orderId?: number,
	priceTotal?: number,
	quantity?: number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_fastspring_item_stddev_samp_fields"]: {
	__typename: "vectric_oem_fastspring_item_stddev_samp_fields",
	discountValue?: number,
	itemId?: number,
	oemProductId?: number,
	orderId?: number,
	priceTotal?: number,
	quantity?: number
};
	/** aggregate sum on columns */
["vectric_oem_fastspring_item_sum_fields"]: {
	__typename: "vectric_oem_fastspring_item_sum_fields",
	discountValue?: GraphQLTypes["numeric"],
	itemId?: GraphQLTypes["bigint"],
	oemProductId?: GraphQLTypes["bigint"],
	orderId?: GraphQLTypes["bigint"],
	priceTotal?: GraphQLTypes["numeric"],
	quantity?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_fastspring_item_var_pop_fields"]: {
	__typename: "vectric_oem_fastspring_item_var_pop_fields",
	discountValue?: number,
	itemId?: number,
	oemProductId?: number,
	orderId?: number,
	priceTotal?: number,
	quantity?: number
};
	/** aggregate var_samp on columns */
["vectric_oem_fastspring_item_var_samp_fields"]: {
	__typename: "vectric_oem_fastspring_item_var_samp_fields",
	discountValue?: number,
	itemId?: number,
	oemProductId?: number,
	orderId?: number,
	priceTotal?: number,
	quantity?: number
};
	/** aggregate variance on columns */
["vectric_oem_fastspring_item_variance_fields"]: {
	__typename: "vectric_oem_fastspring_item_variance_fields",
	discountValue?: number,
	itemId?: number,
	oemProductId?: number,
	orderId?: number,
	priceTotal?: number,
	quantity?: number
};
	/** columns and relationships of "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order"]: {
	__typename: "vectric_oem_fastspring_order",
	actionTaken?: GraphQLTypes["bigint"],
	amendedBy?: string,
	city?: string,
	createdBy?: string,
	currency: string,
	customerId?: GraphQLTypes["bigint"],
	dateAmended?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateProcessed?: GraphQLTypes["timestamptz"],
	fastSpringCustomerId: GraphQLTypes["bigint"],
	/** An array relationship */
	items: Array<GraphQLTypes["vectric_oem_fastspring_item"]>,
	/** An aggregate relationship */
	items_aggregate: GraphQLTypes["vectric_oem_fastspring_item_aggregate"],
	language?: string,
	notes?: string,
	orderId: GraphQLTypes["bigint"],
	orderReference: string,
	/** An object relationship */
	partner: GraphQLTypes["vectric_oem_partners"],
	partnerId: GraphQLTypes["bigint"],
	postalCode?: string,
	processedBy?: string,
	region?: string,
	route?: string,
	subTotal?: GraphQLTypes["numeric"],
	tax?: GraphQLTypes["numeric"],
	total?: GraphQLTypes["numeric"]
};
	/** aggregated selection of "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_aggregate"]: {
	__typename: "vectric_oem_fastspring_order_aggregate",
	aggregate?: GraphQLTypes["vectric_oem_fastspring_order_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_oem_fastspring_order"]>
};
	/** aggregate fields of "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_aggregate_fields"]: {
	__typename: "vectric_oem_fastspring_order_aggregate_fields",
	avg?: GraphQLTypes["vectric_oem_fastspring_order_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_oem_fastspring_order_max_fields"],
	min?: GraphQLTypes["vectric_oem_fastspring_order_min_fields"],
	stddev?: GraphQLTypes["vectric_oem_fastspring_order_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_oem_fastspring_order_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_oem_fastspring_order_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_oem_fastspring_order_sum_fields"],
	var_pop?: GraphQLTypes["vectric_oem_fastspring_order_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_oem_fastspring_order_var_samp_fields"],
	variance?: GraphQLTypes["vectric_oem_fastspring_order_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_fastspring_order_avg_fields"]: {
	__typename: "vectric_oem_fastspring_order_avg_fields",
	actionTaken?: number,
	customerId?: number,
	fastSpringCustomerId?: number,
	orderId?: number,
	partnerId?: number,
	subTotal?: number,
	tax?: number,
	total?: number
};
	/** aggregate max on columns */
["vectric_oem_fastspring_order_max_fields"]: {
	__typename: "vectric_oem_fastspring_order_max_fields",
	actionTaken?: GraphQLTypes["bigint"],
	amendedBy?: string,
	city?: string,
	createdBy?: string,
	currency?: string,
	customerId?: GraphQLTypes["bigint"],
	dateAmended?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateProcessed?: GraphQLTypes["timestamptz"],
	fastSpringCustomerId?: GraphQLTypes["bigint"],
	language?: string,
	notes?: string,
	orderId?: GraphQLTypes["bigint"],
	orderReference?: string,
	partnerId?: GraphQLTypes["bigint"],
	postalCode?: string,
	processedBy?: string,
	region?: string,
	route?: string,
	subTotal?: GraphQLTypes["numeric"],
	tax?: GraphQLTypes["numeric"],
	total?: GraphQLTypes["numeric"]
};
	/** aggregate min on columns */
["vectric_oem_fastspring_order_min_fields"]: {
	__typename: "vectric_oem_fastspring_order_min_fields",
	actionTaken?: GraphQLTypes["bigint"],
	amendedBy?: string,
	city?: string,
	createdBy?: string,
	currency?: string,
	customerId?: GraphQLTypes["bigint"],
	dateAmended?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateProcessed?: GraphQLTypes["timestamptz"],
	fastSpringCustomerId?: GraphQLTypes["bigint"],
	language?: string,
	notes?: string,
	orderId?: GraphQLTypes["bigint"],
	orderReference?: string,
	partnerId?: GraphQLTypes["bigint"],
	postalCode?: string,
	processedBy?: string,
	region?: string,
	route?: string,
	subTotal?: GraphQLTypes["numeric"],
	tax?: GraphQLTypes["numeric"],
	total?: GraphQLTypes["numeric"]
};
	/** response of any mutation on the table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_mutation_response"]: {
	__typename: "vectric_oem_fastspring_order_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_oem_fastspring_order"]>
};
	/** aggregate stddev on columns */
["vectric_oem_fastspring_order_stddev_fields"]: {
	__typename: "vectric_oem_fastspring_order_stddev_fields",
	actionTaken?: number,
	customerId?: number,
	fastSpringCustomerId?: number,
	orderId?: number,
	partnerId?: number,
	subTotal?: number,
	tax?: number,
	total?: number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_fastspring_order_stddev_pop_fields"]: {
	__typename: "vectric_oem_fastspring_order_stddev_pop_fields",
	actionTaken?: number,
	customerId?: number,
	fastSpringCustomerId?: number,
	orderId?: number,
	partnerId?: number,
	subTotal?: number,
	tax?: number,
	total?: number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_fastspring_order_stddev_samp_fields"]: {
	__typename: "vectric_oem_fastspring_order_stddev_samp_fields",
	actionTaken?: number,
	customerId?: number,
	fastSpringCustomerId?: number,
	orderId?: number,
	partnerId?: number,
	subTotal?: number,
	tax?: number,
	total?: number
};
	/** aggregate sum on columns */
["vectric_oem_fastspring_order_sum_fields"]: {
	__typename: "vectric_oem_fastspring_order_sum_fields",
	actionTaken?: GraphQLTypes["bigint"],
	customerId?: GraphQLTypes["bigint"],
	fastSpringCustomerId?: GraphQLTypes["bigint"],
	orderId?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"],
	subTotal?: GraphQLTypes["numeric"],
	tax?: GraphQLTypes["numeric"],
	total?: GraphQLTypes["numeric"]
};
	/** aggregate var_pop on columns */
["vectric_oem_fastspring_order_var_pop_fields"]: {
	__typename: "vectric_oem_fastspring_order_var_pop_fields",
	actionTaken?: number,
	customerId?: number,
	fastSpringCustomerId?: number,
	orderId?: number,
	partnerId?: number,
	subTotal?: number,
	tax?: number,
	total?: number
};
	/** aggregate var_samp on columns */
["vectric_oem_fastspring_order_var_samp_fields"]: {
	__typename: "vectric_oem_fastspring_order_var_samp_fields",
	actionTaken?: number,
	customerId?: number,
	fastSpringCustomerId?: number,
	orderId?: number,
	partnerId?: number,
	subTotal?: number,
	tax?: number,
	total?: number
};
	/** aggregate variance on columns */
["vectric_oem_fastspring_order_variance_fields"]: {
	__typename: "vectric_oem_fastspring_order_variance_fields",
	actionTaken?: number,
	customerId?: number,
	fastSpringCustomerId?: number,
	orderId?: number,
	partnerId?: number,
	subTotal?: number,
	tax?: number,
	total?: number
};
	/** columns and relationships of "vectric.oem_invite_status" */
["vectric_oem_invite_status"]: {
	__typename: "vectric_oem_invite_status",
	status: string,
	statusId: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.oem_invite_status" */
["vectric_oem_invite_status_aggregate"]: {
	__typename: "vectric_oem_invite_status_aggregate",
	aggregate?: GraphQLTypes["vectric_oem_invite_status_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_oem_invite_status"]>
};
	/** aggregate fields of "vectric.oem_invite_status" */
["vectric_oem_invite_status_aggregate_fields"]: {
	__typename: "vectric_oem_invite_status_aggregate_fields",
	avg?: GraphQLTypes["vectric_oem_invite_status_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_oem_invite_status_max_fields"],
	min?: GraphQLTypes["vectric_oem_invite_status_min_fields"],
	stddev?: GraphQLTypes["vectric_oem_invite_status_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_oem_invite_status_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_oem_invite_status_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_oem_invite_status_sum_fields"],
	var_pop?: GraphQLTypes["vectric_oem_invite_status_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_oem_invite_status_var_samp_fields"],
	variance?: GraphQLTypes["vectric_oem_invite_status_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_invite_status_avg_fields"]: {
	__typename: "vectric_oem_invite_status_avg_fields",
	statusId?: number
};
	/** aggregate max on columns */
["vectric_oem_invite_status_max_fields"]: {
	__typename: "vectric_oem_invite_status_max_fields",
	status?: string,
	statusId?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_oem_invite_status_min_fields"]: {
	__typename: "vectric_oem_invite_status_min_fields",
	status?: string,
	statusId?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.oem_invite_status" */
["vectric_oem_invite_status_mutation_response"]: {
	__typename: "vectric_oem_invite_status_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_oem_invite_status"]>
};
	/** aggregate stddev on columns */
["vectric_oem_invite_status_stddev_fields"]: {
	__typename: "vectric_oem_invite_status_stddev_fields",
	statusId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_invite_status_stddev_pop_fields"]: {
	__typename: "vectric_oem_invite_status_stddev_pop_fields",
	statusId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_invite_status_stddev_samp_fields"]: {
	__typename: "vectric_oem_invite_status_stddev_samp_fields",
	statusId?: number
};
	/** aggregate sum on columns */
["vectric_oem_invite_status_sum_fields"]: {
	__typename: "vectric_oem_invite_status_sum_fields",
	statusId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_invite_status_var_pop_fields"]: {
	__typename: "vectric_oem_invite_status_var_pop_fields",
	statusId?: number
};
	/** aggregate var_samp on columns */
["vectric_oem_invite_status_var_samp_fields"]: {
	__typename: "vectric_oem_invite_status_var_samp_fields",
	statusId?: number
};
	/** aggregate variance on columns */
["vectric_oem_invite_status_variance_fields"]: {
	__typename: "vectric_oem_invite_status_variance_fields",
	statusId?: number
};
	/** columns and relationships of "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type"]: {
	__typename: "vectric_oem_licence_allocation_type",
	allocationTypeId: GraphQLTypes["bigint"],
	typeName: string
};
	/** aggregated selection of "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_aggregate"]: {
	__typename: "vectric_oem_licence_allocation_type_aggregate",
	aggregate?: GraphQLTypes["vectric_oem_licence_allocation_type_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_oem_licence_allocation_type"]>
};
	/** aggregate fields of "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_aggregate_fields"]: {
	__typename: "vectric_oem_licence_allocation_type_aggregate_fields",
	avg?: GraphQLTypes["vectric_oem_licence_allocation_type_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_oem_licence_allocation_type_max_fields"],
	min?: GraphQLTypes["vectric_oem_licence_allocation_type_min_fields"],
	stddev?: GraphQLTypes["vectric_oem_licence_allocation_type_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_oem_licence_allocation_type_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_oem_licence_allocation_type_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_oem_licence_allocation_type_sum_fields"],
	var_pop?: GraphQLTypes["vectric_oem_licence_allocation_type_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_oem_licence_allocation_type_var_samp_fields"],
	variance?: GraphQLTypes["vectric_oem_licence_allocation_type_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_licence_allocation_type_avg_fields"]: {
	__typename: "vectric_oem_licence_allocation_type_avg_fields",
	allocationTypeId?: number
};
	/** aggregate max on columns */
["vectric_oem_licence_allocation_type_max_fields"]: {
	__typename: "vectric_oem_licence_allocation_type_max_fields",
	allocationTypeId?: GraphQLTypes["bigint"],
	typeName?: string
};
	/** aggregate min on columns */
["vectric_oem_licence_allocation_type_min_fields"]: {
	__typename: "vectric_oem_licence_allocation_type_min_fields",
	allocationTypeId?: GraphQLTypes["bigint"],
	typeName?: string
};
	/** response of any mutation on the table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_mutation_response"]: {
	__typename: "vectric_oem_licence_allocation_type_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_oem_licence_allocation_type"]>
};
	/** aggregate stddev on columns */
["vectric_oem_licence_allocation_type_stddev_fields"]: {
	__typename: "vectric_oem_licence_allocation_type_stddev_fields",
	allocationTypeId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_licence_allocation_type_stddev_pop_fields"]: {
	__typename: "vectric_oem_licence_allocation_type_stddev_pop_fields",
	allocationTypeId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_licence_allocation_type_stddev_samp_fields"]: {
	__typename: "vectric_oem_licence_allocation_type_stddev_samp_fields",
	allocationTypeId?: number
};
	/** aggregate sum on columns */
["vectric_oem_licence_allocation_type_sum_fields"]: {
	__typename: "vectric_oem_licence_allocation_type_sum_fields",
	allocationTypeId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_licence_allocation_type_var_pop_fields"]: {
	__typename: "vectric_oem_licence_allocation_type_var_pop_fields",
	allocationTypeId?: number
};
	/** aggregate var_samp on columns */
["vectric_oem_licence_allocation_type_var_samp_fields"]: {
	__typename: "vectric_oem_licence_allocation_type_var_samp_fields",
	allocationTypeId?: number
};
	/** aggregate variance on columns */
["vectric_oem_licence_allocation_type_variance_fields"]: {
	__typename: "vectric_oem_licence_allocation_type_variance_fields",
	allocationTypeId?: number
};
	/** columns and relationships of "vectric.oem_partners" */
["vectric_oem_partners"]: {
	__typename: "vectric_oem_partners",
	/** An array relationship */
	bundles: Array<GraphQLTypes["vectric_sales_oem_bundles"]>,
	/** An aggregate relationship */
	bundles_aggregate: GraphQLTypes["vectric_sales_oem_bundles_aggregate"],
	codePrefix: string,
	countrycode?: GraphQLTypes["bigint"],
	dateOfLastBatch?: GraphQLTypes["timestamptz"],
	displayName: string,
	inactive?: boolean,
	nextIssue?: GraphQLTypes["bigint"],
	partnerId: GraphQLTypes["bigint"],
	/** An array relationship */
	purchaseOptions: Array<GraphQLTypes["vectric_oem_purchase_options"]>,
	/** An aggregate relationship */
	purchaseOptions_aggregate: GraphQLTypes["vectric_oem_purchase_options_aggregate"],
	/** An array relationship */
	staff: Array<GraphQLTypes["vectric_oem_staff_customer"]>,
	/** An aggregate relationship */
	staff_aggregate: GraphQLTypes["vectric_oem_staff_customer_aggregate"]
};
	/** aggregated selection of "vectric.oem_partners" */
["vectric_oem_partners_aggregate"]: {
	__typename: "vectric_oem_partners_aggregate",
	aggregate?: GraphQLTypes["vectric_oem_partners_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_oem_partners"]>
};
	/** aggregate fields of "vectric.oem_partners" */
["vectric_oem_partners_aggregate_fields"]: {
	__typename: "vectric_oem_partners_aggregate_fields",
	avg?: GraphQLTypes["vectric_oem_partners_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_oem_partners_max_fields"],
	min?: GraphQLTypes["vectric_oem_partners_min_fields"],
	stddev?: GraphQLTypes["vectric_oem_partners_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_oem_partners_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_oem_partners_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_oem_partners_sum_fields"],
	var_pop?: GraphQLTypes["vectric_oem_partners_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_oem_partners_var_samp_fields"],
	variance?: GraphQLTypes["vectric_oem_partners_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_partners_avg_fields"]: {
	__typename: "vectric_oem_partners_avg_fields",
	countrycode?: number,
	nextIssue?: number,
	partnerId?: number
};
	/** aggregate max on columns */
["vectric_oem_partners_max_fields"]: {
	__typename: "vectric_oem_partners_max_fields",
	codePrefix?: string,
	countrycode?: GraphQLTypes["bigint"],
	dateOfLastBatch?: GraphQLTypes["timestamptz"],
	displayName?: string,
	nextIssue?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_oem_partners_min_fields"]: {
	__typename: "vectric_oem_partners_min_fields",
	codePrefix?: string,
	countrycode?: GraphQLTypes["bigint"],
	dateOfLastBatch?: GraphQLTypes["timestamptz"],
	displayName?: string,
	nextIssue?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.oem_partners" */
["vectric_oem_partners_mutation_response"]: {
	__typename: "vectric_oem_partners_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_oem_partners"]>
};
	/** aggregate stddev on columns */
["vectric_oem_partners_stddev_fields"]: {
	__typename: "vectric_oem_partners_stddev_fields",
	countrycode?: number,
	nextIssue?: number,
	partnerId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_partners_stddev_pop_fields"]: {
	__typename: "vectric_oem_partners_stddev_pop_fields",
	countrycode?: number,
	nextIssue?: number,
	partnerId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_partners_stddev_samp_fields"]: {
	__typename: "vectric_oem_partners_stddev_samp_fields",
	countrycode?: number,
	nextIssue?: number,
	partnerId?: number
};
	/** aggregate sum on columns */
["vectric_oem_partners_sum_fields"]: {
	__typename: "vectric_oem_partners_sum_fields",
	countrycode?: GraphQLTypes["bigint"],
	nextIssue?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_partners_var_pop_fields"]: {
	__typename: "vectric_oem_partners_var_pop_fields",
	countrycode?: number,
	nextIssue?: number,
	partnerId?: number
};
	/** aggregate var_samp on columns */
["vectric_oem_partners_var_samp_fields"]: {
	__typename: "vectric_oem_partners_var_samp_fields",
	countrycode?: number,
	nextIssue?: number,
	partnerId?: number
};
	/** aggregate variance on columns */
["vectric_oem_partners_variance_fields"]: {
	__typename: "vectric_oem_partners_variance_fields",
	countrycode?: number,
	nextIssue?: number,
	partnerId?: number
};
	/** columns and relationships of "vectric.oem_products" */
["vectric_oem_products"]: {
	__typename: "vectric_oem_products",
	/** An array relationship */
	detailedProducts: Array<GraphQLTypes["vectric_oem_detailed_products"]>,
	/** An aggregate relationship */
	detailedProducts_aggregate: GraphQLTypes["vectric_oem_detailed_products_aggregate"],
	enabled: boolean,
	oemFastspringId: string,
	oemProductId: GraphQLTypes["bigint"],
	/** An object relationship */
	product: GraphQLTypes["vectric_products_products"],
	productId: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.oem_products" */
["vectric_oem_products_aggregate"]: {
	__typename: "vectric_oem_products_aggregate",
	aggregate?: GraphQLTypes["vectric_oem_products_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_oem_products"]>
};
	/** aggregate fields of "vectric.oem_products" */
["vectric_oem_products_aggregate_fields"]: {
	__typename: "vectric_oem_products_aggregate_fields",
	avg?: GraphQLTypes["vectric_oem_products_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_oem_products_max_fields"],
	min?: GraphQLTypes["vectric_oem_products_min_fields"],
	stddev?: GraphQLTypes["vectric_oem_products_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_oem_products_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_oem_products_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_oem_products_sum_fields"],
	var_pop?: GraphQLTypes["vectric_oem_products_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_oem_products_var_samp_fields"],
	variance?: GraphQLTypes["vectric_oem_products_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_products_avg_fields"]: {
	__typename: "vectric_oem_products_avg_fields",
	oemProductId?: number,
	productId?: number
};
	/** aggregate max on columns */
["vectric_oem_products_max_fields"]: {
	__typename: "vectric_oem_products_max_fields",
	oemFastspringId?: string,
	oemProductId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_oem_products_min_fields"]: {
	__typename: "vectric_oem_products_min_fields",
	oemFastspringId?: string,
	oemProductId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.oem_products" */
["vectric_oem_products_mutation_response"]: {
	__typename: "vectric_oem_products_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_oem_products"]>
};
	/** aggregate stddev on columns */
["vectric_oem_products_stddev_fields"]: {
	__typename: "vectric_oem_products_stddev_fields",
	oemProductId?: number,
	productId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_products_stddev_pop_fields"]: {
	__typename: "vectric_oem_products_stddev_pop_fields",
	oemProductId?: number,
	productId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_products_stddev_samp_fields"]: {
	__typename: "vectric_oem_products_stddev_samp_fields",
	oemProductId?: number,
	productId?: number
};
	/** aggregate sum on columns */
["vectric_oem_products_sum_fields"]: {
	__typename: "vectric_oem_products_sum_fields",
	oemProductId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_products_var_pop_fields"]: {
	__typename: "vectric_oem_products_var_pop_fields",
	oemProductId?: number,
	productId?: number
};
	/** aggregate var_samp on columns */
["vectric_oem_products_var_samp_fields"]: {
	__typename: "vectric_oem_products_var_samp_fields",
	oemProductId?: number,
	productId?: number
};
	/** aggregate variance on columns */
["vectric_oem_products_variance_fields"]: {
	__typename: "vectric_oem_products_variance_fields",
	oemProductId?: number,
	productId?: number
};
	/** columns and relationships of "vectric.oem_purchase_options" */
["vectric_oem_purchase_options"]: {
	__typename: "vectric_oem_purchase_options",
	emailLicenceDetails: boolean,
	maxQuantity: GraphQLTypes["bigint"],
	minQuantity: GraphQLTypes["bigint"],
	multipleLicences?: boolean,
	optionId: GraphQLTypes["bigint"],
	/** An object relationship */
	partner: GraphQLTypes["vectric_oem_partners"],
	partnerId: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_aggregate"]: {
	__typename: "vectric_oem_purchase_options_aggregate",
	aggregate?: GraphQLTypes["vectric_oem_purchase_options_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_oem_purchase_options"]>
};
	/** aggregate fields of "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_aggregate_fields"]: {
	__typename: "vectric_oem_purchase_options_aggregate_fields",
	avg?: GraphQLTypes["vectric_oem_purchase_options_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_oem_purchase_options_max_fields"],
	min?: GraphQLTypes["vectric_oem_purchase_options_min_fields"],
	stddev?: GraphQLTypes["vectric_oem_purchase_options_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_oem_purchase_options_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_oem_purchase_options_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_oem_purchase_options_sum_fields"],
	var_pop?: GraphQLTypes["vectric_oem_purchase_options_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_oem_purchase_options_var_samp_fields"],
	variance?: GraphQLTypes["vectric_oem_purchase_options_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_purchase_options_avg_fields"]: {
	__typename: "vectric_oem_purchase_options_avg_fields",
	maxQuantity?: number,
	minQuantity?: number,
	optionId?: number,
	partnerId?: number
};
	/** aggregate max on columns */
["vectric_oem_purchase_options_max_fields"]: {
	__typename: "vectric_oem_purchase_options_max_fields",
	maxQuantity?: GraphQLTypes["bigint"],
	minQuantity?: GraphQLTypes["bigint"],
	optionId?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_oem_purchase_options_min_fields"]: {
	__typename: "vectric_oem_purchase_options_min_fields",
	maxQuantity?: GraphQLTypes["bigint"],
	minQuantity?: GraphQLTypes["bigint"],
	optionId?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_mutation_response"]: {
	__typename: "vectric_oem_purchase_options_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_oem_purchase_options"]>
};
	/** aggregate stddev on columns */
["vectric_oem_purchase_options_stddev_fields"]: {
	__typename: "vectric_oem_purchase_options_stddev_fields",
	maxQuantity?: number,
	minQuantity?: number,
	optionId?: number,
	partnerId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_purchase_options_stddev_pop_fields"]: {
	__typename: "vectric_oem_purchase_options_stddev_pop_fields",
	maxQuantity?: number,
	minQuantity?: number,
	optionId?: number,
	partnerId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_purchase_options_stddev_samp_fields"]: {
	__typename: "vectric_oem_purchase_options_stddev_samp_fields",
	maxQuantity?: number,
	minQuantity?: number,
	optionId?: number,
	partnerId?: number
};
	/** aggregate sum on columns */
["vectric_oem_purchase_options_sum_fields"]: {
	__typename: "vectric_oem_purchase_options_sum_fields",
	maxQuantity?: GraphQLTypes["bigint"],
	minQuantity?: GraphQLTypes["bigint"],
	optionId?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_purchase_options_var_pop_fields"]: {
	__typename: "vectric_oem_purchase_options_var_pop_fields",
	maxQuantity?: number,
	minQuantity?: number,
	optionId?: number,
	partnerId?: number
};
	/** aggregate var_samp on columns */
["vectric_oem_purchase_options_var_samp_fields"]: {
	__typename: "vectric_oem_purchase_options_var_samp_fields",
	maxQuantity?: number,
	minQuantity?: number,
	optionId?: number,
	partnerId?: number
};
	/** aggregate variance on columns */
["vectric_oem_purchase_options_variance_fields"]: {
	__typename: "vectric_oem_purchase_options_variance_fields",
	maxQuantity?: number,
	minQuantity?: number,
	optionId?: number,
	partnerId?: number
};
	/** columns and relationships of "vectric.oem_staff_admin_ownership" */
["vectric_oem_staff_admin_ownership"]: {
	__typename: "vectric_oem_staff_admin_ownership",
	admin?: boolean,
	adminId?: GraphQLTypes["bigint"],
	customerId?: GraphQLTypes["bigint"],
	customerName?: string,
	dateAccepted?: GraphQLTypes["timestamptz"],
	displayStatus?: string,
	email?: string,
	partnerId?: GraphQLTypes["bigint"],
	status?: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.oem_staff_admin_ownership" */
["vectric_oem_staff_admin_ownership_aggregate"]: {
	__typename: "vectric_oem_staff_admin_ownership_aggregate",
	aggregate?: GraphQLTypes["vectric_oem_staff_admin_ownership_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_oem_staff_admin_ownership"]>
};
	/** aggregate fields of "vectric.oem_staff_admin_ownership" */
["vectric_oem_staff_admin_ownership_aggregate_fields"]: {
	__typename: "vectric_oem_staff_admin_ownership_aggregate_fields",
	avg?: GraphQLTypes["vectric_oem_staff_admin_ownership_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_oem_staff_admin_ownership_max_fields"],
	min?: GraphQLTypes["vectric_oem_staff_admin_ownership_min_fields"],
	stddev?: GraphQLTypes["vectric_oem_staff_admin_ownership_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_oem_staff_admin_ownership_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_oem_staff_admin_ownership_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_oem_staff_admin_ownership_sum_fields"],
	var_pop?: GraphQLTypes["vectric_oem_staff_admin_ownership_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_oem_staff_admin_ownership_var_samp_fields"],
	variance?: GraphQLTypes["vectric_oem_staff_admin_ownership_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_staff_admin_ownership_avg_fields"]: {
	__typename: "vectric_oem_staff_admin_ownership_avg_fields",
	adminId?: number,
	customerId?: number,
	partnerId?: number,
	status?: number
};
	/** aggregate max on columns */
["vectric_oem_staff_admin_ownership_max_fields"]: {
	__typename: "vectric_oem_staff_admin_ownership_max_fields",
	adminId?: GraphQLTypes["bigint"],
	customerId?: GraphQLTypes["bigint"],
	customerName?: string,
	dateAccepted?: GraphQLTypes["timestamptz"],
	displayStatus?: string,
	email?: string,
	partnerId?: GraphQLTypes["bigint"],
	status?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_oem_staff_admin_ownership_min_fields"]: {
	__typename: "vectric_oem_staff_admin_ownership_min_fields",
	adminId?: GraphQLTypes["bigint"],
	customerId?: GraphQLTypes["bigint"],
	customerName?: string,
	dateAccepted?: GraphQLTypes["timestamptz"],
	displayStatus?: string,
	email?: string,
	partnerId?: GraphQLTypes["bigint"],
	status?: GraphQLTypes["bigint"]
};
	/** aggregate stddev on columns */
["vectric_oem_staff_admin_ownership_stddev_fields"]: {
	__typename: "vectric_oem_staff_admin_ownership_stddev_fields",
	adminId?: number,
	customerId?: number,
	partnerId?: number,
	status?: number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_staff_admin_ownership_stddev_pop_fields"]: {
	__typename: "vectric_oem_staff_admin_ownership_stddev_pop_fields",
	adminId?: number,
	customerId?: number,
	partnerId?: number,
	status?: number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_staff_admin_ownership_stddev_samp_fields"]: {
	__typename: "vectric_oem_staff_admin_ownership_stddev_samp_fields",
	adminId?: number,
	customerId?: number,
	partnerId?: number,
	status?: number
};
	/** aggregate sum on columns */
["vectric_oem_staff_admin_ownership_sum_fields"]: {
	__typename: "vectric_oem_staff_admin_ownership_sum_fields",
	adminId?: GraphQLTypes["bigint"],
	customerId?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"],
	status?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_staff_admin_ownership_var_pop_fields"]: {
	__typename: "vectric_oem_staff_admin_ownership_var_pop_fields",
	adminId?: number,
	customerId?: number,
	partnerId?: number,
	status?: number
};
	/** aggregate var_samp on columns */
["vectric_oem_staff_admin_ownership_var_samp_fields"]: {
	__typename: "vectric_oem_staff_admin_ownership_var_samp_fields",
	adminId?: number,
	customerId?: number,
	partnerId?: number,
	status?: number
};
	/** aggregate variance on columns */
["vectric_oem_staff_admin_ownership_variance_fields"]: {
	__typename: "vectric_oem_staff_admin_ownership_variance_fields",
	adminId?: number,
	customerId?: number,
	partnerId?: number,
	status?: number
};
	/** columns and relationships of "vectric.oem_staff_customer" */
["vectric_oem_staff_customer"]: {
	__typename: "vectric_oem_staff_customer",
	admin: boolean,
	/** An object relationship */
	customer: GraphQLTypes["vectric_sales_customers"],
	customerId: GraphQLTypes["bigint"],
	dataRequested: GraphQLTypes["timestamptz"],
	dateAccepted?: GraphQLTypes["timestamptz"],
	dateUpdated?: GraphQLTypes["timestamptz"],
	/** An object relationship */
	inviteStatus: GraphQLTypes["vectric_oem_invite_status"],
	/** An object relationship */
	partner: GraphQLTypes["vectric_oem_partners"],
	partnerId: GraphQLTypes["bigint"],
	staffId: GraphQLTypes["bigint"],
	status: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_aggregate"]: {
	__typename: "vectric_oem_staff_customer_aggregate",
	aggregate?: GraphQLTypes["vectric_oem_staff_customer_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_oem_staff_customer"]>
};
	/** aggregate fields of "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_aggregate_fields"]: {
	__typename: "vectric_oem_staff_customer_aggregate_fields",
	avg?: GraphQLTypes["vectric_oem_staff_customer_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_oem_staff_customer_max_fields"],
	min?: GraphQLTypes["vectric_oem_staff_customer_min_fields"],
	stddev?: GraphQLTypes["vectric_oem_staff_customer_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_oem_staff_customer_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_oem_staff_customer_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_oem_staff_customer_sum_fields"],
	var_pop?: GraphQLTypes["vectric_oem_staff_customer_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_oem_staff_customer_var_samp_fields"],
	variance?: GraphQLTypes["vectric_oem_staff_customer_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_oem_staff_customer_avg_fields"]: {
	__typename: "vectric_oem_staff_customer_avg_fields",
	customerId?: number,
	partnerId?: number,
	staffId?: number,
	status?: number
};
	/** aggregate max on columns */
["vectric_oem_staff_customer_max_fields"]: {
	__typename: "vectric_oem_staff_customer_max_fields",
	customerId?: GraphQLTypes["bigint"],
	dataRequested?: GraphQLTypes["timestamptz"],
	dateAccepted?: GraphQLTypes["timestamptz"],
	dateUpdated?: GraphQLTypes["timestamptz"],
	partnerId?: GraphQLTypes["bigint"],
	staffId?: GraphQLTypes["bigint"],
	status?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_oem_staff_customer_min_fields"]: {
	__typename: "vectric_oem_staff_customer_min_fields",
	customerId?: GraphQLTypes["bigint"],
	dataRequested?: GraphQLTypes["timestamptz"],
	dateAccepted?: GraphQLTypes["timestamptz"],
	dateUpdated?: GraphQLTypes["timestamptz"],
	partnerId?: GraphQLTypes["bigint"],
	staffId?: GraphQLTypes["bigint"],
	status?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_mutation_response"]: {
	__typename: "vectric_oem_staff_customer_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_oem_staff_customer"]>
};
	/** aggregate stddev on columns */
["vectric_oem_staff_customer_stddev_fields"]: {
	__typename: "vectric_oem_staff_customer_stddev_fields",
	customerId?: number,
	partnerId?: number,
	staffId?: number,
	status?: number
};
	/** aggregate stddev_pop on columns */
["vectric_oem_staff_customer_stddev_pop_fields"]: {
	__typename: "vectric_oem_staff_customer_stddev_pop_fields",
	customerId?: number,
	partnerId?: number,
	staffId?: number,
	status?: number
};
	/** aggregate stddev_samp on columns */
["vectric_oem_staff_customer_stddev_samp_fields"]: {
	__typename: "vectric_oem_staff_customer_stddev_samp_fields",
	customerId?: number,
	partnerId?: number,
	staffId?: number,
	status?: number
};
	/** aggregate sum on columns */
["vectric_oem_staff_customer_sum_fields"]: {
	__typename: "vectric_oem_staff_customer_sum_fields",
	customerId?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"],
	staffId?: GraphQLTypes["bigint"],
	status?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_oem_staff_customer_var_pop_fields"]: {
	__typename: "vectric_oem_staff_customer_var_pop_fields",
	customerId?: number,
	partnerId?: number,
	staffId?: number,
	status?: number
};
	/** aggregate var_samp on columns */
["vectric_oem_staff_customer_var_samp_fields"]: {
	__typename: "vectric_oem_staff_customer_var_samp_fields",
	customerId?: number,
	partnerId?: number,
	staffId?: number,
	status?: number
};
	/** aggregate variance on columns */
["vectric_oem_staff_customer_variance_fields"]: {
	__typename: "vectric_oem_staff_customer_variance_fields",
	customerId?: number,
	partnerId?: number,
	staffId?: number,
	status?: number
};
	/** columns and relationships of "vectric.organization_audit" */
["vectric_organization_audit"]: {
	__typename: "vectric_organization_audit",
	auditDate: GraphQLTypes["timestamp"],
	auditId: number,
	auditPayload?: GraphQLTypes["jsonb"],
	auditType: string,
	author: string,
	internalChange: boolean,
	ipAddress?: string,
	organizationId: number
};
	/** aggregated selection of "vectric.organization_audit" */
["vectric_organization_audit_aggregate"]: {
	__typename: "vectric_organization_audit_aggregate",
	aggregate?: GraphQLTypes["vectric_organization_audit_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_organization_audit"]>
};
	/** aggregate fields of "vectric.organization_audit" */
["vectric_organization_audit_aggregate_fields"]: {
	__typename: "vectric_organization_audit_aggregate_fields",
	avg?: GraphQLTypes["vectric_organization_audit_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_organization_audit_max_fields"],
	min?: GraphQLTypes["vectric_organization_audit_min_fields"],
	stddev?: GraphQLTypes["vectric_organization_audit_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_organization_audit_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_organization_audit_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_organization_audit_sum_fields"],
	var_pop?: GraphQLTypes["vectric_organization_audit_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_organization_audit_var_samp_fields"],
	variance?: GraphQLTypes["vectric_organization_audit_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_organization_audit_avg_fields"]: {
	__typename: "vectric_organization_audit_avg_fields",
	auditId?: number,
	organizationId?: number
};
	/** aggregate max on columns */
["vectric_organization_audit_max_fields"]: {
	__typename: "vectric_organization_audit_max_fields",
	auditDate?: GraphQLTypes["timestamp"],
	auditId?: number,
	auditType?: string,
	author?: string,
	ipAddress?: string,
	organizationId?: number
};
	/** aggregate min on columns */
["vectric_organization_audit_min_fields"]: {
	__typename: "vectric_organization_audit_min_fields",
	auditDate?: GraphQLTypes["timestamp"],
	auditId?: number,
	auditType?: string,
	author?: string,
	ipAddress?: string,
	organizationId?: number
};
	/** response of any mutation on the table "vectric.organization_audit" */
["vectric_organization_audit_mutation_response"]: {
	__typename: "vectric_organization_audit_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_organization_audit"]>
};
	/** aggregate stddev on columns */
["vectric_organization_audit_stddev_fields"]: {
	__typename: "vectric_organization_audit_stddev_fields",
	auditId?: number,
	organizationId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_organization_audit_stddev_pop_fields"]: {
	__typename: "vectric_organization_audit_stddev_pop_fields",
	auditId?: number,
	organizationId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_organization_audit_stddev_samp_fields"]: {
	__typename: "vectric_organization_audit_stddev_samp_fields",
	auditId?: number,
	organizationId?: number
};
	/** aggregate sum on columns */
["vectric_organization_audit_sum_fields"]: {
	__typename: "vectric_organization_audit_sum_fields",
	auditId?: number,
	organizationId?: number
};
	/** aggregate var_pop on columns */
["vectric_organization_audit_var_pop_fields"]: {
	__typename: "vectric_organization_audit_var_pop_fields",
	auditId?: number,
	organizationId?: number
};
	/** aggregate var_samp on columns */
["vectric_organization_audit_var_samp_fields"]: {
	__typename: "vectric_organization_audit_var_samp_fields",
	auditId?: number,
	organizationId?: number
};
	/** aggregate variance on columns */
["vectric_organization_audit_variance_fields"]: {
	__typename: "vectric_organization_audit_variance_fields",
	auditId?: number,
	organizationId?: number
};
	/** columns and relationships of "vectric.organization_licence_scope" */
["vectric_organization_licence_scope"]: {
	__typename: "vectric_organization_licence_scope",
	scope: string
};
	/** aggregated selection of "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_aggregate"]: {
	__typename: "vectric_organization_licence_scope_aggregate",
	aggregate?: GraphQLTypes["vectric_organization_licence_scope_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_organization_licence_scope"]>
};
	/** aggregate fields of "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_aggregate_fields"]: {
	__typename: "vectric_organization_licence_scope_aggregate_fields",
	count: number,
	max?: GraphQLTypes["vectric_organization_licence_scope_max_fields"],
	min?: GraphQLTypes["vectric_organization_licence_scope_min_fields"]
};
	/** aggregate max on columns */
["vectric_organization_licence_scope_max_fields"]: {
	__typename: "vectric_organization_licence_scope_max_fields",
	scope?: string
};
	/** aggregate min on columns */
["vectric_organization_licence_scope_min_fields"]: {
	__typename: "vectric_organization_licence_scope_min_fields",
	scope?: string
};
	/** response of any mutation on the table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_mutation_response"]: {
	__typename: "vectric_organization_licence_scope_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_organization_licence_scope"]>
};
	/** The view is created for organization admins. Admins should not have access to customer information if the customer has not confirmed their invitation


columns and relationships of "vectric.organization_memberships_admin_access" */
["vectric_organization_memberships_admin_access"]: {
	__typename: "vectric_organization_memberships_admin_access",
	addedBy?: string,
	amendedBy?: string,
	customerEmail?: string,
	customerId?: GraphQLTypes["bigint"],
	customerName?: string,
	customerRegisteredUsername?: string,
	dateAdded?: GraphQLTypes["timestamp"],
	dateAmended?: GraphQLTypes["timestamp"],
	/** An array relationship */
	invitations: Array<GraphQLTypes["vectric_membership_invitations"]>,
	/** An aggregate relationship */
	invitations_aggregate: GraphQLTypes["vectric_membership_invitations_aggregate"],
	membershipId?: number,
	membershipRole?: string,
	membershipStatus?: string,
	/** An object relationship */
	organization?: GraphQLTypes["vectric_organizations"],
	organizationCountryId?: GraphQLTypes["bigint"],
	organizationCountryName?: string,
	organizationId?: number,
	organizationName?: string,
	organizationType?: string
};
	/** aggregated selection of "vectric.organization_memberships_admin_access" */
["vectric_organization_memberships_admin_access_aggregate"]: {
	__typename: "vectric_organization_memberships_admin_access_aggregate",
	aggregate?: GraphQLTypes["vectric_organization_memberships_admin_access_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_organization_memberships_admin_access"]>
};
	/** aggregate fields of "vectric.organization_memberships_admin_access" */
["vectric_organization_memberships_admin_access_aggregate_fields"]: {
	__typename: "vectric_organization_memberships_admin_access_aggregate_fields",
	avg?: GraphQLTypes["vectric_organization_memberships_admin_access_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_organization_memberships_admin_access_max_fields"],
	min?: GraphQLTypes["vectric_organization_memberships_admin_access_min_fields"],
	stddev?: GraphQLTypes["vectric_organization_memberships_admin_access_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_organization_memberships_admin_access_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_organization_memberships_admin_access_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_organization_memberships_admin_access_sum_fields"],
	var_pop?: GraphQLTypes["vectric_organization_memberships_admin_access_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_organization_memberships_admin_access_var_samp_fields"],
	variance?: GraphQLTypes["vectric_organization_memberships_admin_access_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_organization_memberships_admin_access_avg_fields"]: {
	__typename: "vectric_organization_memberships_admin_access_avg_fields",
	customerId?: number,
	membershipId?: number,
	organizationCountryId?: number,
	organizationId?: number
};
	/** aggregate max on columns */
["vectric_organization_memberships_admin_access_max_fields"]: {
	__typename: "vectric_organization_memberships_admin_access_max_fields",
	addedBy?: string,
	amendedBy?: string,
	customerEmail?: string,
	customerId?: GraphQLTypes["bigint"],
	customerName?: string,
	customerRegisteredUsername?: string,
	dateAdded?: GraphQLTypes["timestamp"],
	dateAmended?: GraphQLTypes["timestamp"],
	membershipId?: number,
	membershipRole?: string,
	membershipStatus?: string,
	organizationCountryId?: GraphQLTypes["bigint"],
	organizationCountryName?: string,
	organizationId?: number,
	organizationName?: string,
	organizationType?: string
};
	/** aggregate min on columns */
["vectric_organization_memberships_admin_access_min_fields"]: {
	__typename: "vectric_organization_memberships_admin_access_min_fields",
	addedBy?: string,
	amendedBy?: string,
	customerEmail?: string,
	customerId?: GraphQLTypes["bigint"],
	customerName?: string,
	customerRegisteredUsername?: string,
	dateAdded?: GraphQLTypes["timestamp"],
	dateAmended?: GraphQLTypes["timestamp"],
	membershipId?: number,
	membershipRole?: string,
	membershipStatus?: string,
	organizationCountryId?: GraphQLTypes["bigint"],
	organizationCountryName?: string,
	organizationId?: number,
	organizationName?: string,
	organizationType?: string
};
	/** aggregate stddev on columns */
["vectric_organization_memberships_admin_access_stddev_fields"]: {
	__typename: "vectric_organization_memberships_admin_access_stddev_fields",
	customerId?: number,
	membershipId?: number,
	organizationCountryId?: number,
	organizationId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_organization_memberships_admin_access_stddev_pop_fields"]: {
	__typename: "vectric_organization_memberships_admin_access_stddev_pop_fields",
	customerId?: number,
	membershipId?: number,
	organizationCountryId?: number,
	organizationId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_organization_memberships_admin_access_stddev_samp_fields"]: {
	__typename: "vectric_organization_memberships_admin_access_stddev_samp_fields",
	customerId?: number,
	membershipId?: number,
	organizationCountryId?: number,
	organizationId?: number
};
	/** aggregate sum on columns */
["vectric_organization_memberships_admin_access_sum_fields"]: {
	__typename: "vectric_organization_memberships_admin_access_sum_fields",
	customerId?: GraphQLTypes["bigint"],
	membershipId?: number,
	organizationCountryId?: GraphQLTypes["bigint"],
	organizationId?: number
};
	/** aggregate var_pop on columns */
["vectric_organization_memberships_admin_access_var_pop_fields"]: {
	__typename: "vectric_organization_memberships_admin_access_var_pop_fields",
	customerId?: number,
	membershipId?: number,
	organizationCountryId?: number,
	organizationId?: number
};
	/** aggregate var_samp on columns */
["vectric_organization_memberships_admin_access_var_samp_fields"]: {
	__typename: "vectric_organization_memberships_admin_access_var_samp_fields",
	customerId?: number,
	membershipId?: number,
	organizationCountryId?: number,
	organizationId?: number
};
	/** aggregate variance on columns */
["vectric_organization_memberships_admin_access_variance_fields"]: {
	__typename: "vectric_organization_memberships_admin_access_variance_fields",
	customerId?: number,
	membershipId?: number,
	organizationCountryId?: number,
	organizationId?: number
};
	/** columns and relationships of "vectric.organization_order_items" */
["vectric_organization_order_items"]: {
	__typename: "vectric_organization_order_items",
	/** An object relationship */
	order: GraphQLTypes["vectric_organization_orders"],
	orderId: string,
	orderItemId: number,
	/** An array relationship */
	ownedItems: Array<GraphQLTypes["vectric_owned_items"]>,
	/** An aggregate relationship */
	ownedItems_aggregate: GraphQLTypes["vectric_owned_items_aggregate"],
	/** An object relationship */
	saleableProduct: GraphQLTypes["vectric_saleable_products"],
	saleableProductId: number,
	subscription?: boolean,
	/** An object relationship */
	subscriptionContract?: GraphQLTypes["vectric_subscription_contracts"],
	/** An array relationship */
	subscriptionEvents: Array<GraphQLTypes["vectric_subscription_events"]>,
	/** An aggregate relationship */
	subscriptionEvents_aggregate: GraphQLTypes["vectric_subscription_events_aggregate"]
};
	/** aggregated selection of "vectric.organization_order_items" */
["vectric_organization_order_items_aggregate"]: {
	__typename: "vectric_organization_order_items_aggregate",
	aggregate?: GraphQLTypes["vectric_organization_order_items_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_organization_order_items"]>
};
	/** aggregate fields of "vectric.organization_order_items" */
["vectric_organization_order_items_aggregate_fields"]: {
	__typename: "vectric_organization_order_items_aggregate_fields",
	avg?: GraphQLTypes["vectric_organization_order_items_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_organization_order_items_max_fields"],
	min?: GraphQLTypes["vectric_organization_order_items_min_fields"],
	stddev?: GraphQLTypes["vectric_organization_order_items_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_organization_order_items_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_organization_order_items_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_organization_order_items_sum_fields"],
	var_pop?: GraphQLTypes["vectric_organization_order_items_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_organization_order_items_var_samp_fields"],
	variance?: GraphQLTypes["vectric_organization_order_items_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_organization_order_items_avg_fields"]: {
	__typename: "vectric_organization_order_items_avg_fields",
	orderItemId?: number,
	saleableProductId?: number
};
	/** aggregate max on columns */
["vectric_organization_order_items_max_fields"]: {
	__typename: "vectric_organization_order_items_max_fields",
	orderId?: string,
	orderItemId?: number,
	saleableProductId?: number
};
	/** aggregate min on columns */
["vectric_organization_order_items_min_fields"]: {
	__typename: "vectric_organization_order_items_min_fields",
	orderId?: string,
	orderItemId?: number,
	saleableProductId?: number
};
	/** response of any mutation on the table "vectric.organization_order_items" */
["vectric_organization_order_items_mutation_response"]: {
	__typename: "vectric_organization_order_items_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_organization_order_items"]>
};
	/** aggregate stddev on columns */
["vectric_organization_order_items_stddev_fields"]: {
	__typename: "vectric_organization_order_items_stddev_fields",
	orderItemId?: number,
	saleableProductId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_organization_order_items_stddev_pop_fields"]: {
	__typename: "vectric_organization_order_items_stddev_pop_fields",
	orderItemId?: number,
	saleableProductId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_organization_order_items_stddev_samp_fields"]: {
	__typename: "vectric_organization_order_items_stddev_samp_fields",
	orderItemId?: number,
	saleableProductId?: number
};
	/** aggregate sum on columns */
["vectric_organization_order_items_sum_fields"]: {
	__typename: "vectric_organization_order_items_sum_fields",
	orderItemId?: number,
	saleableProductId?: number
};
	/** aggregate var_pop on columns */
["vectric_organization_order_items_var_pop_fields"]: {
	__typename: "vectric_organization_order_items_var_pop_fields",
	orderItemId?: number,
	saleableProductId?: number
};
	/** aggregate var_samp on columns */
["vectric_organization_order_items_var_samp_fields"]: {
	__typename: "vectric_organization_order_items_var_samp_fields",
	orderItemId?: number,
	saleableProductId?: number
};
	/** aggregate variance on columns */
["vectric_organization_order_items_variance_fields"]: {
	__typename: "vectric_organization_order_items_variance_fields",
	orderItemId?: number,
	saleableProductId?: number
};
	/** columns and relationships of "vectric.organization_orders" */
["vectric_organization_orders"]: {
	__typename: "vectric_organization_orders",
	amendedBy?: string,
	createdBy: string,
	dateAmended?: GraphQLTypes["timestamp"],
	dateCreated: GraphQLTypes["timestamp"],
	externalReference?: string,
	/** An array relationship */
	items: Array<GraphQLTypes["vectric_organization_order_items"]>,
	/** An aggregate relationship */
	items_aggregate: GraphQLTypes["vectric_organization_order_items_aggregate"],
	notes?: string,
	orderDate: GraphQLTypes["timestamp"],
	orderId: string,
	/** An object relationship */
	organization?: GraphQLTypes["vectric_organizations"],
	organizationId?: number,
	/** An object relationship */
	purchaser: GraphQLTypes["vectric_sales_customers"],
	purchaserId: number
};
	/** aggregated selection of "vectric.organization_orders" */
["vectric_organization_orders_aggregate"]: {
	__typename: "vectric_organization_orders_aggregate",
	aggregate?: GraphQLTypes["vectric_organization_orders_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_organization_orders"]>
};
	/** aggregate fields of "vectric.organization_orders" */
["vectric_organization_orders_aggregate_fields"]: {
	__typename: "vectric_organization_orders_aggregate_fields",
	avg?: GraphQLTypes["vectric_organization_orders_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_organization_orders_max_fields"],
	min?: GraphQLTypes["vectric_organization_orders_min_fields"],
	stddev?: GraphQLTypes["vectric_organization_orders_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_organization_orders_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_organization_orders_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_organization_orders_sum_fields"],
	var_pop?: GraphQLTypes["vectric_organization_orders_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_organization_orders_var_samp_fields"],
	variance?: GraphQLTypes["vectric_organization_orders_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_organization_orders_avg_fields"]: {
	__typename: "vectric_organization_orders_avg_fields",
	organizationId?: number,
	purchaserId?: number
};
	/** aggregate max on columns */
["vectric_organization_orders_max_fields"]: {
	__typename: "vectric_organization_orders_max_fields",
	amendedBy?: string,
	createdBy?: string,
	dateAmended?: GraphQLTypes["timestamp"],
	dateCreated?: GraphQLTypes["timestamp"],
	externalReference?: string,
	notes?: string,
	orderDate?: GraphQLTypes["timestamp"],
	orderId?: string,
	organizationId?: number,
	purchaserId?: number
};
	/** aggregate min on columns */
["vectric_organization_orders_min_fields"]: {
	__typename: "vectric_organization_orders_min_fields",
	amendedBy?: string,
	createdBy?: string,
	dateAmended?: GraphQLTypes["timestamp"],
	dateCreated?: GraphQLTypes["timestamp"],
	externalReference?: string,
	notes?: string,
	orderDate?: GraphQLTypes["timestamp"],
	orderId?: string,
	organizationId?: number,
	purchaserId?: number
};
	/** response of any mutation on the table "vectric.organization_orders" */
["vectric_organization_orders_mutation_response"]: {
	__typename: "vectric_organization_orders_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_organization_orders"]>
};
	/** aggregate stddev on columns */
["vectric_organization_orders_stddev_fields"]: {
	__typename: "vectric_organization_orders_stddev_fields",
	organizationId?: number,
	purchaserId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_organization_orders_stddev_pop_fields"]: {
	__typename: "vectric_organization_orders_stddev_pop_fields",
	organizationId?: number,
	purchaserId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_organization_orders_stddev_samp_fields"]: {
	__typename: "vectric_organization_orders_stddev_samp_fields",
	organizationId?: number,
	purchaserId?: number
};
	/** aggregate sum on columns */
["vectric_organization_orders_sum_fields"]: {
	__typename: "vectric_organization_orders_sum_fields",
	organizationId?: number,
	purchaserId?: number
};
	/** aggregate var_pop on columns */
["vectric_organization_orders_var_pop_fields"]: {
	__typename: "vectric_organization_orders_var_pop_fields",
	organizationId?: number,
	purchaserId?: number
};
	/** aggregate var_samp on columns */
["vectric_organization_orders_var_samp_fields"]: {
	__typename: "vectric_organization_orders_var_samp_fields",
	organizationId?: number,
	purchaserId?: number
};
	/** aggregate variance on columns */
["vectric_organization_orders_variance_fields"]: {
	__typename: "vectric_organization_orders_variance_fields",
	organizationId?: number,
	purchaserId?: number
};
	/** columns and relationships of "vectric.organization_types" */
["vectric_organization_types"]: {
	__typename: "vectric_organization_types",
	type: string
};
	/** aggregated selection of "vectric.organization_types" */
["vectric_organization_types_aggregate"]: {
	__typename: "vectric_organization_types_aggregate",
	aggregate?: GraphQLTypes["vectric_organization_types_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_organization_types"]>
};
	/** aggregate fields of "vectric.organization_types" */
["vectric_organization_types_aggregate_fields"]: {
	__typename: "vectric_organization_types_aggregate_fields",
	count: number,
	max?: GraphQLTypes["vectric_organization_types_max_fields"],
	min?: GraphQLTypes["vectric_organization_types_min_fields"]
};
	/** aggregate max on columns */
["vectric_organization_types_max_fields"]: {
	__typename: "vectric_organization_types_max_fields",
	type?: string
};
	/** aggregate min on columns */
["vectric_organization_types_min_fields"]: {
	__typename: "vectric_organization_types_min_fields",
	type?: string
};
	/** response of any mutation on the table "vectric.organization_types" */
["vectric_organization_types_mutation_response"]: {
	__typename: "vectric_organization_types_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_organization_types"]>
};
	/** columns and relationships of "vectric.organizations" */
["vectric_organizations"]: {
	__typename: "vectric_organizations",
	active: boolean,
	/** An array relationship */
	activeMembers: Array<GraphQLTypes["vectric_active_memberships"]>,
	/** An aggregate relationship */
	activeMembers_aggregate: GraphQLTypes["vectric_active_memberships_aggregate"],
	amendedBy?: string,
	/** An array relationship */
	auditLogs: Array<GraphQLTypes["vectric_organization_audit"]>,
	/** An aggregate relationship */
	auditLogs_aggregate: GraphQLTypes["vectric_organization_audit_aggregate"],
	/** An object relationship */
	country?: GraphQLTypes["vectric_countries"],
	countryId?: GraphQLTypes["bigint"],
	createdBy: string,
	dateAmended?: GraphQLTypes["timestamp"],
	dateCreated: GraphQLTypes["timestamp"],
	internalNotes?: string,
	/** An array relationship */
	invitations: Array<GraphQLTypes["vectric_membership_invitations"]>,
	/** An aggregate relationship */
	invitations_aggregate: GraphQLTypes["vectric_membership_invitations_aggregate"],
	/** An array relationship */
	memberships: Array<GraphQLTypes["vectric_memberships"]>,
	/** An aggregate relationship */
	memberships_aggregate: GraphQLTypes["vectric_memberships_aggregate"],
	organizationId: number,
	organizationName: string,
	/** An object relationship */
	organizationType: GraphQLTypes["vectric_organization_types"],
	organizationUUID: GraphQLTypes["uuid"],
	type: GraphQLTypes["vectric_organization_types_enum"]
};
	/** aggregated selection of "vectric.organizations" */
["vectric_organizations_aggregate"]: {
	__typename: "vectric_organizations_aggregate",
	aggregate?: GraphQLTypes["vectric_organizations_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_organizations"]>
};
	/** aggregate fields of "vectric.organizations" */
["vectric_organizations_aggregate_fields"]: {
	__typename: "vectric_organizations_aggregate_fields",
	avg?: GraphQLTypes["vectric_organizations_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_organizations_max_fields"],
	min?: GraphQLTypes["vectric_organizations_min_fields"],
	stddev?: GraphQLTypes["vectric_organizations_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_organizations_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_organizations_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_organizations_sum_fields"],
	var_pop?: GraphQLTypes["vectric_organizations_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_organizations_var_samp_fields"],
	variance?: GraphQLTypes["vectric_organizations_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_organizations_avg_fields"]: {
	__typename: "vectric_organizations_avg_fields",
	countryId?: number,
	organizationId?: number
};
	/** aggregate max on columns */
["vectric_organizations_max_fields"]: {
	__typename: "vectric_organizations_max_fields",
	amendedBy?: string,
	countryId?: GraphQLTypes["bigint"],
	createdBy?: string,
	dateAmended?: GraphQLTypes["timestamp"],
	dateCreated?: GraphQLTypes["timestamp"],
	internalNotes?: string,
	organizationId?: number,
	organizationName?: string,
	organizationUUID?: GraphQLTypes["uuid"]
};
	/** aggregate min on columns */
["vectric_organizations_min_fields"]: {
	__typename: "vectric_organizations_min_fields",
	amendedBy?: string,
	countryId?: GraphQLTypes["bigint"],
	createdBy?: string,
	dateAmended?: GraphQLTypes["timestamp"],
	dateCreated?: GraphQLTypes["timestamp"],
	internalNotes?: string,
	organizationId?: number,
	organizationName?: string,
	organizationUUID?: GraphQLTypes["uuid"]
};
	/** response of any mutation on the table "vectric.organizations" */
["vectric_organizations_mutation_response"]: {
	__typename: "vectric_organizations_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_organizations"]>
};
	/** aggregate stddev on columns */
["vectric_organizations_stddev_fields"]: {
	__typename: "vectric_organizations_stddev_fields",
	countryId?: number,
	organizationId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_organizations_stddev_pop_fields"]: {
	__typename: "vectric_organizations_stddev_pop_fields",
	countryId?: number,
	organizationId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_organizations_stddev_samp_fields"]: {
	__typename: "vectric_organizations_stddev_samp_fields",
	countryId?: number,
	organizationId?: number
};
	/** aggregate sum on columns */
["vectric_organizations_sum_fields"]: {
	__typename: "vectric_organizations_sum_fields",
	countryId?: GraphQLTypes["bigint"],
	organizationId?: number
};
	/** aggregate var_pop on columns */
["vectric_organizations_var_pop_fields"]: {
	__typename: "vectric_organizations_var_pop_fields",
	countryId?: number,
	organizationId?: number
};
	/** aggregate var_samp on columns */
["vectric_organizations_var_samp_fields"]: {
	__typename: "vectric_organizations_var_samp_fields",
	countryId?: number,
	organizationId?: number
};
	/** aggregate variance on columns */
["vectric_organizations_variance_fields"]: {
	__typename: "vectric_organizations_variance_fields",
	countryId?: number,
	organizationId?: number
};
	/** columns and relationships of "vectric.owned_item_assignments" */
["vectric_owned_item_assignments"]: {
	__typename: "vectric_owned_item_assignments",
	assignedBy: string,
	assignedTo: GraphQLTypes["bigint"],
	/** An object relationship */
	assignedToMember: GraphQLTypes["vectric_memberships"],
	/** An object relationship */
	assignedToMemberAdminAccess?: GraphQLTypes["vectric_organization_memberships_admin_access"],
	assignment_id: number,
	dateAssigned: GraphQLTypes["timestamp"],
	ownedItemId: number
};
	/** aggregated selection of "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_aggregate"]: {
	__typename: "vectric_owned_item_assignments_aggregate",
	aggregate?: GraphQLTypes["vectric_owned_item_assignments_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_owned_item_assignments"]>
};
	/** aggregate fields of "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_aggregate_fields"]: {
	__typename: "vectric_owned_item_assignments_aggregate_fields",
	avg?: GraphQLTypes["vectric_owned_item_assignments_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_owned_item_assignments_max_fields"],
	min?: GraphQLTypes["vectric_owned_item_assignments_min_fields"],
	stddev?: GraphQLTypes["vectric_owned_item_assignments_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_owned_item_assignments_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_owned_item_assignments_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_owned_item_assignments_sum_fields"],
	var_pop?: GraphQLTypes["vectric_owned_item_assignments_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_owned_item_assignments_var_samp_fields"],
	variance?: GraphQLTypes["vectric_owned_item_assignments_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_owned_item_assignments_avg_fields"]: {
	__typename: "vectric_owned_item_assignments_avg_fields",
	assignedTo?: number,
	assignment_id?: number,
	ownedItemId?: number
};
	/** aggregate max on columns */
["vectric_owned_item_assignments_max_fields"]: {
	__typename: "vectric_owned_item_assignments_max_fields",
	assignedBy?: string,
	assignedTo?: GraphQLTypes["bigint"],
	assignment_id?: number,
	dateAssigned?: GraphQLTypes["timestamp"],
	ownedItemId?: number
};
	/** aggregate min on columns */
["vectric_owned_item_assignments_min_fields"]: {
	__typename: "vectric_owned_item_assignments_min_fields",
	assignedBy?: string,
	assignedTo?: GraphQLTypes["bigint"],
	assignment_id?: number,
	dateAssigned?: GraphQLTypes["timestamp"],
	ownedItemId?: number
};
	/** response of any mutation on the table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_mutation_response"]: {
	__typename: "vectric_owned_item_assignments_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_owned_item_assignments"]>
};
	/** aggregate stddev on columns */
["vectric_owned_item_assignments_stddev_fields"]: {
	__typename: "vectric_owned_item_assignments_stddev_fields",
	assignedTo?: number,
	assignment_id?: number,
	ownedItemId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_owned_item_assignments_stddev_pop_fields"]: {
	__typename: "vectric_owned_item_assignments_stddev_pop_fields",
	assignedTo?: number,
	assignment_id?: number,
	ownedItemId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_owned_item_assignments_stddev_samp_fields"]: {
	__typename: "vectric_owned_item_assignments_stddev_samp_fields",
	assignedTo?: number,
	assignment_id?: number,
	ownedItemId?: number
};
	/** aggregate sum on columns */
["vectric_owned_item_assignments_sum_fields"]: {
	__typename: "vectric_owned_item_assignments_sum_fields",
	assignedTo?: GraphQLTypes["bigint"],
	assignment_id?: number,
	ownedItemId?: number
};
	/** aggregate var_pop on columns */
["vectric_owned_item_assignments_var_pop_fields"]: {
	__typename: "vectric_owned_item_assignments_var_pop_fields",
	assignedTo?: number,
	assignment_id?: number,
	ownedItemId?: number
};
	/** aggregate var_samp on columns */
["vectric_owned_item_assignments_var_samp_fields"]: {
	__typename: "vectric_owned_item_assignments_var_samp_fields",
	assignedTo?: number,
	assignment_id?: number,
	ownedItemId?: number
};
	/** aggregate variance on columns */
["vectric_owned_item_assignments_variance_fields"]: {
	__typename: "vectric_owned_item_assignments_variance_fields",
	assignedTo?: number,
	assignment_id?: number,
	ownedItemId?: number
};
	/** columns and relationships of "vectric.owned_items" */
["vectric_owned_items"]: {
	__typename: "vectric_owned_items",
	amendedBy?: string,
	/** An object relationship */
	assignment?: GraphQLTypes["vectric_owned_item_assignments"],
	createdBy: string,
	/** An object relationship */
	customer?: GraphQLTypes["vectric_sales_customers"],
	customerId?: GraphQLTypes["bigint"],
	dateAmended?: GraphQLTypes["timestamp"],
	dateCreated: GraphQLTypes["timestamp"],
	/** An array relationship */
	entitlements: Array<GraphQLTypes["vectric_entitlements"]>,
	/** An aggregate relationship */
	entitlements_aggregate: GraphQLTypes["vectric_entitlements_aggregate"],
	/** An object relationship */
	licenceScope: GraphQLTypes["vectric_organization_licence_scope"],
	notes?: string,
	/** An object relationship */
	orderItem?: GraphQLTypes["vectric_organization_order_items"],
	orderItemId?: number,
	/** An object relationship */
	organization?: GraphQLTypes["vectric_organizations"],
	organizationId?: number,
	ownedItemId: number,
	/** An object relationship */
	ownedProduct: GraphQLTypes["vectric_owned_products"],
	ownedProductId: number,
	record_date: GraphQLTypes["timestamp"],
	scope: GraphQLTypes["vectric_organization_licence_scope_enum"],
	status: number,
	subscription?: boolean
};
	/** aggregated selection of "vectric.owned_items" */
["vectric_owned_items_aggregate"]: {
	__typename: "vectric_owned_items_aggregate",
	aggregate?: GraphQLTypes["vectric_owned_items_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_owned_items"]>
};
	/** aggregate fields of "vectric.owned_items" */
["vectric_owned_items_aggregate_fields"]: {
	__typename: "vectric_owned_items_aggregate_fields",
	avg?: GraphQLTypes["vectric_owned_items_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_owned_items_max_fields"],
	min?: GraphQLTypes["vectric_owned_items_min_fields"],
	stddev?: GraphQLTypes["vectric_owned_items_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_owned_items_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_owned_items_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_owned_items_sum_fields"],
	var_pop?: GraphQLTypes["vectric_owned_items_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_owned_items_var_samp_fields"],
	variance?: GraphQLTypes["vectric_owned_items_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_owned_items_avg_fields"]: {
	__typename: "vectric_owned_items_avg_fields",
	customerId?: number,
	orderItemId?: number,
	organizationId?: number,
	ownedItemId?: number,
	ownedProductId?: number,
	status?: number
};
	/** aggregate max on columns */
["vectric_owned_items_max_fields"]: {
	__typename: "vectric_owned_items_max_fields",
	amendedBy?: string,
	createdBy?: string,
	customerId?: GraphQLTypes["bigint"],
	dateAmended?: GraphQLTypes["timestamp"],
	dateCreated?: GraphQLTypes["timestamp"],
	notes?: string,
	orderItemId?: number,
	organizationId?: number,
	ownedItemId?: number,
	ownedProductId?: number,
	record_date?: GraphQLTypes["timestamp"],
	status?: number
};
	/** aggregate min on columns */
["vectric_owned_items_min_fields"]: {
	__typename: "vectric_owned_items_min_fields",
	amendedBy?: string,
	createdBy?: string,
	customerId?: GraphQLTypes["bigint"],
	dateAmended?: GraphQLTypes["timestamp"],
	dateCreated?: GraphQLTypes["timestamp"],
	notes?: string,
	orderItemId?: number,
	organizationId?: number,
	ownedItemId?: number,
	ownedProductId?: number,
	record_date?: GraphQLTypes["timestamp"],
	status?: number
};
	/** response of any mutation on the table "vectric.owned_items" */
["vectric_owned_items_mutation_response"]: {
	__typename: "vectric_owned_items_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_owned_items"]>
};
	/** aggregate stddev on columns */
["vectric_owned_items_stddev_fields"]: {
	__typename: "vectric_owned_items_stddev_fields",
	customerId?: number,
	orderItemId?: number,
	organizationId?: number,
	ownedItemId?: number,
	ownedProductId?: number,
	status?: number
};
	/** aggregate stddev_pop on columns */
["vectric_owned_items_stddev_pop_fields"]: {
	__typename: "vectric_owned_items_stddev_pop_fields",
	customerId?: number,
	orderItemId?: number,
	organizationId?: number,
	ownedItemId?: number,
	ownedProductId?: number,
	status?: number
};
	/** aggregate stddev_samp on columns */
["vectric_owned_items_stddev_samp_fields"]: {
	__typename: "vectric_owned_items_stddev_samp_fields",
	customerId?: number,
	orderItemId?: number,
	organizationId?: number,
	ownedItemId?: number,
	ownedProductId?: number,
	status?: number
};
	/** aggregate sum on columns */
["vectric_owned_items_sum_fields"]: {
	__typename: "vectric_owned_items_sum_fields",
	customerId?: GraphQLTypes["bigint"],
	orderItemId?: number,
	organizationId?: number,
	ownedItemId?: number,
	ownedProductId?: number,
	status?: number
};
	/** aggregate var_pop on columns */
["vectric_owned_items_var_pop_fields"]: {
	__typename: "vectric_owned_items_var_pop_fields",
	customerId?: number,
	orderItemId?: number,
	organizationId?: number,
	ownedItemId?: number,
	ownedProductId?: number,
	status?: number
};
	/** aggregate var_samp on columns */
["vectric_owned_items_var_samp_fields"]: {
	__typename: "vectric_owned_items_var_samp_fields",
	customerId?: number,
	orderItemId?: number,
	organizationId?: number,
	ownedItemId?: number,
	ownedProductId?: number,
	status?: number
};
	/** aggregate variance on columns */
["vectric_owned_items_variance_fields"]: {
	__typename: "vectric_owned_items_variance_fields",
	customerId?: number,
	orderItemId?: number,
	organizationId?: number,
	ownedItemId?: number,
	ownedProductId?: number,
	status?: number
};
	/** columns and relationships of "vectric.owned_products" */
["vectric_owned_products"]: {
	__typename: "vectric_owned_products",
	enabled?: boolean,
	enhancement?: boolean,
	productId: number,
	productName: string,
	/** An object relationship */
	productType: GraphQLTypes["vectric_products_producttype"],
	productTypeId: number,
	subscription?: boolean
};
	/** aggregated selection of "vectric.owned_products" */
["vectric_owned_products_aggregate"]: {
	__typename: "vectric_owned_products_aggregate",
	aggregate?: GraphQLTypes["vectric_owned_products_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_owned_products"]>
};
	/** aggregate fields of "vectric.owned_products" */
["vectric_owned_products_aggregate_fields"]: {
	__typename: "vectric_owned_products_aggregate_fields",
	avg?: GraphQLTypes["vectric_owned_products_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_owned_products_max_fields"],
	min?: GraphQLTypes["vectric_owned_products_min_fields"],
	stddev?: GraphQLTypes["vectric_owned_products_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_owned_products_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_owned_products_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_owned_products_sum_fields"],
	var_pop?: GraphQLTypes["vectric_owned_products_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_owned_products_var_samp_fields"],
	variance?: GraphQLTypes["vectric_owned_products_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_owned_products_avg_fields"]: {
	__typename: "vectric_owned_products_avg_fields",
	productId?: number,
	productTypeId?: number
};
	/** aggregate max on columns */
["vectric_owned_products_max_fields"]: {
	__typename: "vectric_owned_products_max_fields",
	productId?: number,
	productName?: string,
	productTypeId?: number
};
	/** aggregate min on columns */
["vectric_owned_products_min_fields"]: {
	__typename: "vectric_owned_products_min_fields",
	productId?: number,
	productName?: string,
	productTypeId?: number
};
	/** response of any mutation on the table "vectric.owned_products" */
["vectric_owned_products_mutation_response"]: {
	__typename: "vectric_owned_products_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_owned_products"]>
};
	/** aggregate stddev on columns */
["vectric_owned_products_stddev_fields"]: {
	__typename: "vectric_owned_products_stddev_fields",
	productId?: number,
	productTypeId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_owned_products_stddev_pop_fields"]: {
	__typename: "vectric_owned_products_stddev_pop_fields",
	productId?: number,
	productTypeId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_owned_products_stddev_samp_fields"]: {
	__typename: "vectric_owned_products_stddev_samp_fields",
	productId?: number,
	productTypeId?: number
};
	/** aggregate sum on columns */
["vectric_owned_products_sum_fields"]: {
	__typename: "vectric_owned_products_sum_fields",
	productId?: number,
	productTypeId?: number
};
	/** aggregate var_pop on columns */
["vectric_owned_products_var_pop_fields"]: {
	__typename: "vectric_owned_products_var_pop_fields",
	productId?: number,
	productTypeId?: number
};
	/** aggregate var_samp on columns */
["vectric_owned_products_var_samp_fields"]: {
	__typename: "vectric_owned_products_var_samp_fields",
	productId?: number,
	productTypeId?: number
};
	/** aggregate variance on columns */
["vectric_owned_products_variance_fields"]: {
	__typename: "vectric_owned_products_variance_fields",
	productId?: number,
	productTypeId?: number
};
	/** columns and relationships of "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links"]: {
	__typename: "vectric_products_clipartcollection_links",
	clipartChildId: GraphQLTypes["bigint"],
	clipartCollectionLinkId: GraphQLTypes["bigint"],
	clipartParentId: GraphQLTypes["bigint"],
	/** An object relationship */
	collection: GraphQLTypes["vectric_products_products"],
	/** An object relationship */
	project: GraphQLTypes["vectric_products_products"]
};
	/** aggregated selection of "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_aggregate"]: {
	__typename: "vectric_products_clipartcollection_links_aggregate",
	aggregate?: GraphQLTypes["vectric_products_clipartcollection_links_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_products_clipartcollection_links"]>
};
	/** aggregate fields of "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_aggregate_fields"]: {
	__typename: "vectric_products_clipartcollection_links_aggregate_fields",
	avg?: GraphQLTypes["vectric_products_clipartcollection_links_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_products_clipartcollection_links_max_fields"],
	min?: GraphQLTypes["vectric_products_clipartcollection_links_min_fields"],
	stddev?: GraphQLTypes["vectric_products_clipartcollection_links_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_products_clipartcollection_links_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_products_clipartcollection_links_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_products_clipartcollection_links_sum_fields"],
	var_pop?: GraphQLTypes["vectric_products_clipartcollection_links_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_products_clipartcollection_links_var_samp_fields"],
	variance?: GraphQLTypes["vectric_products_clipartcollection_links_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_products_clipartcollection_links_avg_fields"]: {
	__typename: "vectric_products_clipartcollection_links_avg_fields",
	clipartChildId?: number,
	clipartCollectionLinkId?: number,
	clipartParentId?: number
};
	/** aggregate max on columns */
["vectric_products_clipartcollection_links_max_fields"]: {
	__typename: "vectric_products_clipartcollection_links_max_fields",
	clipartChildId?: GraphQLTypes["bigint"],
	clipartCollectionLinkId?: GraphQLTypes["bigint"],
	clipartParentId?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_products_clipartcollection_links_min_fields"]: {
	__typename: "vectric_products_clipartcollection_links_min_fields",
	clipartChildId?: GraphQLTypes["bigint"],
	clipartCollectionLinkId?: GraphQLTypes["bigint"],
	clipartParentId?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_mutation_response"]: {
	__typename: "vectric_products_clipartcollection_links_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_products_clipartcollection_links"]>
};
	/** aggregate stddev on columns */
["vectric_products_clipartcollection_links_stddev_fields"]: {
	__typename: "vectric_products_clipartcollection_links_stddev_fields",
	clipartChildId?: number,
	clipartCollectionLinkId?: number,
	clipartParentId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_products_clipartcollection_links_stddev_pop_fields"]: {
	__typename: "vectric_products_clipartcollection_links_stddev_pop_fields",
	clipartChildId?: number,
	clipartCollectionLinkId?: number,
	clipartParentId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_products_clipartcollection_links_stddev_samp_fields"]: {
	__typename: "vectric_products_clipartcollection_links_stddev_samp_fields",
	clipartChildId?: number,
	clipartCollectionLinkId?: number,
	clipartParentId?: number
};
	/** aggregate sum on columns */
["vectric_products_clipartcollection_links_sum_fields"]: {
	__typename: "vectric_products_clipartcollection_links_sum_fields",
	clipartChildId?: GraphQLTypes["bigint"],
	clipartCollectionLinkId?: GraphQLTypes["bigint"],
	clipartParentId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_products_clipartcollection_links_var_pop_fields"]: {
	__typename: "vectric_products_clipartcollection_links_var_pop_fields",
	clipartChildId?: number,
	clipartCollectionLinkId?: number,
	clipartParentId?: number
};
	/** aggregate var_samp on columns */
["vectric_products_clipartcollection_links_var_samp_fields"]: {
	__typename: "vectric_products_clipartcollection_links_var_samp_fields",
	clipartChildId?: number,
	clipartCollectionLinkId?: number,
	clipartParentId?: number
};
	/** aggregate variance on columns */
["vectric_products_clipartcollection_links_variance_fields"]: {
	__typename: "vectric_products_clipartcollection_links_variance_fields",
	clipartChildId?: number,
	clipartCollectionLinkId?: number,
	clipartParentId?: number
};
	/** columns and relationships of "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility"]: {
	__typename: "vectric_products_enhancement_eligibility",
	eligibilityId: GraphQLTypes["bigint"],
	fastspringurl: string,
	/** An object relationship */
	fromProduct: GraphQLTypes["vectric_products_products"],
	fromproduct: GraphQLTypes["bigint"],
	moreinfolink?: string,
	price: GraphQLTypes["numeric"],
	summary?: string,
	/** An object relationship */
	toProduct: GraphQLTypes["vectric_products_products"],
	toproduct: GraphQLTypes["bigint"],
	visibletocustomers: boolean,
	visibletostaff: boolean
};
	/** aggregated selection of "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_aggregate"]: {
	__typename: "vectric_products_enhancement_eligibility_aggregate",
	aggregate?: GraphQLTypes["vectric_products_enhancement_eligibility_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_products_enhancement_eligibility"]>
};
	/** aggregate fields of "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_aggregate_fields"]: {
	__typename: "vectric_products_enhancement_eligibility_aggregate_fields",
	avg?: GraphQLTypes["vectric_products_enhancement_eligibility_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_products_enhancement_eligibility_max_fields"],
	min?: GraphQLTypes["vectric_products_enhancement_eligibility_min_fields"],
	stddev?: GraphQLTypes["vectric_products_enhancement_eligibility_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_products_enhancement_eligibility_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_products_enhancement_eligibility_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_products_enhancement_eligibility_sum_fields"],
	var_pop?: GraphQLTypes["vectric_products_enhancement_eligibility_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_products_enhancement_eligibility_var_samp_fields"],
	variance?: GraphQLTypes["vectric_products_enhancement_eligibility_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_products_enhancement_eligibility_avg_fields"]: {
	__typename: "vectric_products_enhancement_eligibility_avg_fields",
	eligibilityId?: number,
	fromproduct?: number,
	price?: number,
	toproduct?: number
};
	/** aggregate max on columns */
["vectric_products_enhancement_eligibility_max_fields"]: {
	__typename: "vectric_products_enhancement_eligibility_max_fields",
	eligibilityId?: GraphQLTypes["bigint"],
	fastspringurl?: string,
	fromproduct?: GraphQLTypes["bigint"],
	moreinfolink?: string,
	price?: GraphQLTypes["numeric"],
	summary?: string,
	toproduct?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_products_enhancement_eligibility_min_fields"]: {
	__typename: "vectric_products_enhancement_eligibility_min_fields",
	eligibilityId?: GraphQLTypes["bigint"],
	fastspringurl?: string,
	fromproduct?: GraphQLTypes["bigint"],
	moreinfolink?: string,
	price?: GraphQLTypes["numeric"],
	summary?: string,
	toproduct?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_mutation_response"]: {
	__typename: "vectric_products_enhancement_eligibility_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_products_enhancement_eligibility"]>
};
	/** aggregate stddev on columns */
["vectric_products_enhancement_eligibility_stddev_fields"]: {
	__typename: "vectric_products_enhancement_eligibility_stddev_fields",
	eligibilityId?: number,
	fromproduct?: number,
	price?: number,
	toproduct?: number
};
	/** aggregate stddev_pop on columns */
["vectric_products_enhancement_eligibility_stddev_pop_fields"]: {
	__typename: "vectric_products_enhancement_eligibility_stddev_pop_fields",
	eligibilityId?: number,
	fromproduct?: number,
	price?: number,
	toproduct?: number
};
	/** aggregate stddev_samp on columns */
["vectric_products_enhancement_eligibility_stddev_samp_fields"]: {
	__typename: "vectric_products_enhancement_eligibility_stddev_samp_fields",
	eligibilityId?: number,
	fromproduct?: number,
	price?: number,
	toproduct?: number
};
	/** aggregate sum on columns */
["vectric_products_enhancement_eligibility_sum_fields"]: {
	__typename: "vectric_products_enhancement_eligibility_sum_fields",
	eligibilityId?: GraphQLTypes["bigint"],
	fromproduct?: GraphQLTypes["bigint"],
	price?: GraphQLTypes["numeric"],
	toproduct?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_products_enhancement_eligibility_var_pop_fields"]: {
	__typename: "vectric_products_enhancement_eligibility_var_pop_fields",
	eligibilityId?: number,
	fromproduct?: number,
	price?: number,
	toproduct?: number
};
	/** aggregate var_samp on columns */
["vectric_products_enhancement_eligibility_var_samp_fields"]: {
	__typename: "vectric_products_enhancement_eligibility_var_samp_fields",
	eligibilityId?: number,
	fromproduct?: number,
	price?: number,
	toproduct?: number
};
	/** aggregate variance on columns */
["vectric_products_enhancement_eligibility_variance_fields"]: {
	__typename: "vectric_products_enhancement_eligibility_variance_fields",
	eligibilityId?: number,
	fromproduct?: number,
	price?: number,
	toproduct?: number
};
	/** columns and relationships of "vectric.products_freeclipart" */
["vectric_products_freeclipart"]: {
	__typename: "vectric_products_freeclipart",
	/** An object relationship */
	freeClipart?: GraphQLTypes["vectric_freeclipart"],
	freeClipartId?: GraphQLTypes["bigint"],
	/** An object relationship */
	product?: GraphQLTypes["vectric_products_products"],
	productFreeClipartId: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.products_freeclipart" */
["vectric_products_freeclipart_aggregate"]: {
	__typename: "vectric_products_freeclipart_aggregate",
	aggregate?: GraphQLTypes["vectric_products_freeclipart_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_products_freeclipart"]>
};
	/** aggregate fields of "vectric.products_freeclipart" */
["vectric_products_freeclipart_aggregate_fields"]: {
	__typename: "vectric_products_freeclipart_aggregate_fields",
	avg?: GraphQLTypes["vectric_products_freeclipart_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_products_freeclipart_max_fields"],
	min?: GraphQLTypes["vectric_products_freeclipart_min_fields"],
	stddev?: GraphQLTypes["vectric_products_freeclipart_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_products_freeclipart_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_products_freeclipart_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_products_freeclipart_sum_fields"],
	var_pop?: GraphQLTypes["vectric_products_freeclipart_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_products_freeclipart_var_samp_fields"],
	variance?: GraphQLTypes["vectric_products_freeclipart_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_products_freeclipart_avg_fields"]: {
	__typename: "vectric_products_freeclipart_avg_fields",
	freeClipartId?: number,
	productFreeClipartId?: number,
	productId?: number
};
	/** aggregate max on columns */
["vectric_products_freeclipart_max_fields"]: {
	__typename: "vectric_products_freeclipart_max_fields",
	freeClipartId?: GraphQLTypes["bigint"],
	productFreeClipartId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_products_freeclipart_min_fields"]: {
	__typename: "vectric_products_freeclipart_min_fields",
	freeClipartId?: GraphQLTypes["bigint"],
	productFreeClipartId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.products_freeclipart" */
["vectric_products_freeclipart_mutation_response"]: {
	__typename: "vectric_products_freeclipart_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_products_freeclipart"]>
};
	/** aggregate stddev on columns */
["vectric_products_freeclipart_stddev_fields"]: {
	__typename: "vectric_products_freeclipart_stddev_fields",
	freeClipartId?: number,
	productFreeClipartId?: number,
	productId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_products_freeclipart_stddev_pop_fields"]: {
	__typename: "vectric_products_freeclipart_stddev_pop_fields",
	freeClipartId?: number,
	productFreeClipartId?: number,
	productId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_products_freeclipart_stddev_samp_fields"]: {
	__typename: "vectric_products_freeclipart_stddev_samp_fields",
	freeClipartId?: number,
	productFreeClipartId?: number,
	productId?: number
};
	/** aggregate sum on columns */
["vectric_products_freeclipart_sum_fields"]: {
	__typename: "vectric_products_freeclipart_sum_fields",
	freeClipartId?: GraphQLTypes["bigint"],
	productFreeClipartId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_products_freeclipart_var_pop_fields"]: {
	__typename: "vectric_products_freeclipart_var_pop_fields",
	freeClipartId?: number,
	productFreeClipartId?: number,
	productId?: number
};
	/** aggregate var_samp on columns */
["vectric_products_freeclipart_var_samp_fields"]: {
	__typename: "vectric_products_freeclipart_var_samp_fields",
	freeClipartId?: number,
	productFreeClipartId?: number,
	productId?: number
};
	/** aggregate variance on columns */
["vectric_products_freeclipart_variance_fields"]: {
	__typename: "vectric_products_freeclipart_variance_fields",
	freeClipartId?: number,
	productFreeClipartId?: number,
	productId?: number
};
	/** columns and relationships of "vectric.products_fulfilments" */
["vectric_products_fulfilments"]: {
	__typename: "vectric_products_fulfilments",
	description?: string,
	downloadSize?: string,
	fulfilmentId: GraphQLTypes["bigint"],
	fulfilmentName: string,
	fulfilmenttypeid?: GraphQLTypes["bigint"],
	location: string,
	objectName: string,
	/** An object relationship */
	type?: GraphQLTypes["vectric_products_fulfilmenttypes"]
};
	/** aggregated selection of "vectric.products_fulfilments" */
["vectric_products_fulfilments_aggregate"]: {
	__typename: "vectric_products_fulfilments_aggregate",
	aggregate?: GraphQLTypes["vectric_products_fulfilments_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_products_fulfilments"]>
};
	/** aggregate fields of "vectric.products_fulfilments" */
["vectric_products_fulfilments_aggregate_fields"]: {
	__typename: "vectric_products_fulfilments_aggregate_fields",
	avg?: GraphQLTypes["vectric_products_fulfilments_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_products_fulfilments_max_fields"],
	min?: GraphQLTypes["vectric_products_fulfilments_min_fields"],
	stddev?: GraphQLTypes["vectric_products_fulfilments_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_products_fulfilments_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_products_fulfilments_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_products_fulfilments_sum_fields"],
	var_pop?: GraphQLTypes["vectric_products_fulfilments_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_products_fulfilments_var_samp_fields"],
	variance?: GraphQLTypes["vectric_products_fulfilments_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_products_fulfilments_avg_fields"]: {
	__typename: "vectric_products_fulfilments_avg_fields",
	fulfilmentId?: number,
	fulfilmenttypeid?: number
};
	/** aggregate max on columns */
["vectric_products_fulfilments_max_fields"]: {
	__typename: "vectric_products_fulfilments_max_fields",
	description?: string,
	downloadSize?: string,
	fulfilmentId?: GraphQLTypes["bigint"],
	fulfilmentName?: string,
	fulfilmenttypeid?: GraphQLTypes["bigint"],
	location?: string,
	objectName?: string
};
	/** aggregate min on columns */
["vectric_products_fulfilments_min_fields"]: {
	__typename: "vectric_products_fulfilments_min_fields",
	description?: string,
	downloadSize?: string,
	fulfilmentId?: GraphQLTypes["bigint"],
	fulfilmentName?: string,
	fulfilmenttypeid?: GraphQLTypes["bigint"],
	location?: string,
	objectName?: string
};
	/** response of any mutation on the table "vectric.products_fulfilments" */
["vectric_products_fulfilments_mutation_response"]: {
	__typename: "vectric_products_fulfilments_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_products_fulfilments"]>
};
	/** aggregate stddev on columns */
["vectric_products_fulfilments_stddev_fields"]: {
	__typename: "vectric_products_fulfilments_stddev_fields",
	fulfilmentId?: number,
	fulfilmenttypeid?: number
};
	/** aggregate stddev_pop on columns */
["vectric_products_fulfilments_stddev_pop_fields"]: {
	__typename: "vectric_products_fulfilments_stddev_pop_fields",
	fulfilmentId?: number,
	fulfilmenttypeid?: number
};
	/** aggregate stddev_samp on columns */
["vectric_products_fulfilments_stddev_samp_fields"]: {
	__typename: "vectric_products_fulfilments_stddev_samp_fields",
	fulfilmentId?: number,
	fulfilmenttypeid?: number
};
	/** aggregate sum on columns */
["vectric_products_fulfilments_sum_fields"]: {
	__typename: "vectric_products_fulfilments_sum_fields",
	fulfilmentId?: GraphQLTypes["bigint"],
	fulfilmenttypeid?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_products_fulfilments_var_pop_fields"]: {
	__typename: "vectric_products_fulfilments_var_pop_fields",
	fulfilmentId?: number,
	fulfilmenttypeid?: number
};
	/** aggregate var_samp on columns */
["vectric_products_fulfilments_var_samp_fields"]: {
	__typename: "vectric_products_fulfilments_var_samp_fields",
	fulfilmentId?: number,
	fulfilmenttypeid?: number
};
	/** aggregate variance on columns */
["vectric_products_fulfilments_variance_fields"]: {
	__typename: "vectric_products_fulfilments_variance_fields",
	fulfilmentId?: number,
	fulfilmenttypeid?: number
};
	/** columns and relationships of "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes"]: {
	__typename: "vectric_products_fulfilmenttypes",
	fulfilmenttypeid: GraphQLTypes["bigint"],
	typename: string
};
	/** aggregated selection of "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_aggregate"]: {
	__typename: "vectric_products_fulfilmenttypes_aggregate",
	aggregate?: GraphQLTypes["vectric_products_fulfilmenttypes_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_products_fulfilmenttypes"]>
};
	/** aggregate fields of "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_aggregate_fields"]: {
	__typename: "vectric_products_fulfilmenttypes_aggregate_fields",
	avg?: GraphQLTypes["vectric_products_fulfilmenttypes_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_products_fulfilmenttypes_max_fields"],
	min?: GraphQLTypes["vectric_products_fulfilmenttypes_min_fields"],
	stddev?: GraphQLTypes["vectric_products_fulfilmenttypes_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_products_fulfilmenttypes_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_products_fulfilmenttypes_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_products_fulfilmenttypes_sum_fields"],
	var_pop?: GraphQLTypes["vectric_products_fulfilmenttypes_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_products_fulfilmenttypes_var_samp_fields"],
	variance?: GraphQLTypes["vectric_products_fulfilmenttypes_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_products_fulfilmenttypes_avg_fields"]: {
	__typename: "vectric_products_fulfilmenttypes_avg_fields",
	fulfilmenttypeid?: number
};
	/** aggregate max on columns */
["vectric_products_fulfilmenttypes_max_fields"]: {
	__typename: "vectric_products_fulfilmenttypes_max_fields",
	fulfilmenttypeid?: GraphQLTypes["bigint"],
	typename?: string
};
	/** aggregate min on columns */
["vectric_products_fulfilmenttypes_min_fields"]: {
	__typename: "vectric_products_fulfilmenttypes_min_fields",
	fulfilmenttypeid?: GraphQLTypes["bigint"],
	typename?: string
};
	/** response of any mutation on the table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_mutation_response"]: {
	__typename: "vectric_products_fulfilmenttypes_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_products_fulfilmenttypes"]>
};
	/** aggregate stddev on columns */
["vectric_products_fulfilmenttypes_stddev_fields"]: {
	__typename: "vectric_products_fulfilmenttypes_stddev_fields",
	fulfilmenttypeid?: number
};
	/** aggregate stddev_pop on columns */
["vectric_products_fulfilmenttypes_stddev_pop_fields"]: {
	__typename: "vectric_products_fulfilmenttypes_stddev_pop_fields",
	fulfilmenttypeid?: number
};
	/** aggregate stddev_samp on columns */
["vectric_products_fulfilmenttypes_stddev_samp_fields"]: {
	__typename: "vectric_products_fulfilmenttypes_stddev_samp_fields",
	fulfilmenttypeid?: number
};
	/** aggregate sum on columns */
["vectric_products_fulfilmenttypes_sum_fields"]: {
	__typename: "vectric_products_fulfilmenttypes_sum_fields",
	fulfilmenttypeid?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_products_fulfilmenttypes_var_pop_fields"]: {
	__typename: "vectric_products_fulfilmenttypes_var_pop_fields",
	fulfilmenttypeid?: number
};
	/** aggregate var_samp on columns */
["vectric_products_fulfilmenttypes_var_samp_fields"]: {
	__typename: "vectric_products_fulfilmenttypes_var_samp_fields",
	fulfilmenttypeid?: number
};
	/** aggregate variance on columns */
["vectric_products_fulfilmenttypes_variance_fields"]: {
	__typename: "vectric_products_fulfilmenttypes_variance_fields",
	fulfilmenttypeid?: number
};
	/** columns and relationships of "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments"]: {
	__typename: "vectric_products_product_fulfilments",
	/** An object relationship */
	fulfilment: GraphQLTypes["vectric_products_fulfilments"],
	fulfilmentid: GraphQLTypes["bigint"],
	/** An object relationship */
	product: GraphQLTypes["vectric_products_products"],
	productfulfilmentid: GraphQLTypes["bigint"],
	productid: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_aggregate"]: {
	__typename: "vectric_products_product_fulfilments_aggregate",
	aggregate?: GraphQLTypes["vectric_products_product_fulfilments_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_products_product_fulfilments"]>
};
	/** aggregate fields of "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_aggregate_fields"]: {
	__typename: "vectric_products_product_fulfilments_aggregate_fields",
	avg?: GraphQLTypes["vectric_products_product_fulfilments_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_products_product_fulfilments_max_fields"],
	min?: GraphQLTypes["vectric_products_product_fulfilments_min_fields"],
	stddev?: GraphQLTypes["vectric_products_product_fulfilments_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_products_product_fulfilments_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_products_product_fulfilments_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_products_product_fulfilments_sum_fields"],
	var_pop?: GraphQLTypes["vectric_products_product_fulfilments_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_products_product_fulfilments_var_samp_fields"],
	variance?: GraphQLTypes["vectric_products_product_fulfilments_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_products_product_fulfilments_avg_fields"]: {
	__typename: "vectric_products_product_fulfilments_avg_fields",
	fulfilmentid?: number,
	productfulfilmentid?: number,
	productid?: number
};
	/** aggregate max on columns */
["vectric_products_product_fulfilments_max_fields"]: {
	__typename: "vectric_products_product_fulfilments_max_fields",
	fulfilmentid?: GraphQLTypes["bigint"],
	productfulfilmentid?: GraphQLTypes["bigint"],
	productid?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_products_product_fulfilments_min_fields"]: {
	__typename: "vectric_products_product_fulfilments_min_fields",
	fulfilmentid?: GraphQLTypes["bigint"],
	productfulfilmentid?: GraphQLTypes["bigint"],
	productid?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_mutation_response"]: {
	__typename: "vectric_products_product_fulfilments_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_products_product_fulfilments"]>
};
	/** aggregate stddev on columns */
["vectric_products_product_fulfilments_stddev_fields"]: {
	__typename: "vectric_products_product_fulfilments_stddev_fields",
	fulfilmentid?: number,
	productfulfilmentid?: number,
	productid?: number
};
	/** aggregate stddev_pop on columns */
["vectric_products_product_fulfilments_stddev_pop_fields"]: {
	__typename: "vectric_products_product_fulfilments_stddev_pop_fields",
	fulfilmentid?: number,
	productfulfilmentid?: number,
	productid?: number
};
	/** aggregate stddev_samp on columns */
["vectric_products_product_fulfilments_stddev_samp_fields"]: {
	__typename: "vectric_products_product_fulfilments_stddev_samp_fields",
	fulfilmentid?: number,
	productfulfilmentid?: number,
	productid?: number
};
	/** aggregate sum on columns */
["vectric_products_product_fulfilments_sum_fields"]: {
	__typename: "vectric_products_product_fulfilments_sum_fields",
	fulfilmentid?: GraphQLTypes["bigint"],
	productfulfilmentid?: GraphQLTypes["bigint"],
	productid?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_products_product_fulfilments_var_pop_fields"]: {
	__typename: "vectric_products_product_fulfilments_var_pop_fields",
	fulfilmentid?: number,
	productfulfilmentid?: number,
	productid?: number
};
	/** aggregate var_samp on columns */
["vectric_products_product_fulfilments_var_samp_fields"]: {
	__typename: "vectric_products_product_fulfilments_var_samp_fields",
	fulfilmentid?: number,
	productfulfilmentid?: number,
	productid?: number
};
	/** aggregate variance on columns */
["vectric_products_product_fulfilments_variance_fields"]: {
	__typename: "vectric_products_product_fulfilments_variance_fields",
	fulfilmentid?: number,
	productfulfilmentid?: number,
	productid?: number
};
	/** columns and relationships of "vectric.products_product_licence_type" */
["vectric_products_product_licence_type"]: {
	__typename: "vectric_products_product_licence_type",
	type: string
};
	/** aggregated selection of "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_aggregate"]: {
	__typename: "vectric_products_product_licence_type_aggregate",
	aggregate?: GraphQLTypes["vectric_products_product_licence_type_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_products_product_licence_type"]>
};
	/** aggregate fields of "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_aggregate_fields"]: {
	__typename: "vectric_products_product_licence_type_aggregate_fields",
	count: number,
	max?: GraphQLTypes["vectric_products_product_licence_type_max_fields"],
	min?: GraphQLTypes["vectric_products_product_licence_type_min_fields"]
};
	/** aggregate max on columns */
["vectric_products_product_licence_type_max_fields"]: {
	__typename: "vectric_products_product_licence_type_max_fields",
	type?: string
};
	/** aggregate min on columns */
["vectric_products_product_licence_type_min_fields"]: {
	__typename: "vectric_products_product_licence_type_min_fields",
	type?: string
};
	/** response of any mutation on the table "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_mutation_response"]: {
	__typename: "vectric_products_product_licence_type_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_products_product_licence_type"]>
};
	/** columns and relationships of "vectric.products_products" */
["vectric_products_products"]: {
	__typename: "vectric_products_products",
	enabled: boolean,
	externalid?: GraphQLTypes["bigint"],
	fastspringId?: string,
	free: boolean,
	/** An object relationship */
	latestVersion?: GraphQLTypes["vectric_products_versioncodes"],
	latestversion?: GraphQLTypes["bigint"],
	licenceType: GraphQLTypes["vectric_products_product_licence_type_enum"],
	media: boolean,
	/** An array relationship */
	potentialEnhancements: Array<GraphQLTypes["vectric_products_enhancement_eligibility"]>,
	/** An aggregate relationship */
	potentialEnhancements_aggregate: GraphQLTypes["vectric_products_enhancement_eligibility_aggregate"],
	/** An array relationship */
	potentialUpgrades: Array<GraphQLTypes["vectric_active_upgrades"]>,
	/** An aggregate relationship */
	potentialUpgrades_aggregate: GraphQLTypes["vectric_active_upgrades_aggregate"],
	productID: GraphQLTypes["bigint"],
	productName: string,
	/** An object relationship */
	productType: GraphQLTypes["vectric_products_producttype"],
	/** An array relationship */
	product_fulfilments: Array<GraphQLTypes["vectric_products_product_fulfilments"]>,
	/** An aggregate relationship */
	product_fulfilments_aggregate: GraphQLTypes["vectric_products_product_fulfilments_aggregate"],
	receivesClipart: boolean,
	releaseDate?: GraphQLTypes["date"],
	requireslicence?: boolean,
	type: GraphQLTypes["bigint"],
	upgradefromtypeid?: GraphQLTypes["bigint"],
	/** An array relationship */
	versions: Array<GraphQLTypes["vectric_products_versioncodes"]>,
	/** An aggregate relationship */
	versions_aggregate: GraphQLTypes["vectric_products_versioncodes_aggregate"]
};
	/** aggregated selection of "vectric.products_products" */
["vectric_products_products_aggregate"]: {
	__typename: "vectric_products_products_aggregate",
	aggregate?: GraphQLTypes["vectric_products_products_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_products_products"]>
};
	/** aggregate fields of "vectric.products_products" */
["vectric_products_products_aggregate_fields"]: {
	__typename: "vectric_products_products_aggregate_fields",
	avg?: GraphQLTypes["vectric_products_products_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_products_products_max_fields"],
	min?: GraphQLTypes["vectric_products_products_min_fields"],
	stddev?: GraphQLTypes["vectric_products_products_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_products_products_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_products_products_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_products_products_sum_fields"],
	var_pop?: GraphQLTypes["vectric_products_products_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_products_products_var_samp_fields"],
	variance?: GraphQLTypes["vectric_products_products_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_products_products_avg_fields"]: {
	__typename: "vectric_products_products_avg_fields",
	externalid?: number,
	latestversion?: number,
	productID?: number,
	type?: number,
	upgradefromtypeid?: number
};
	/** aggregate max on columns */
["vectric_products_products_max_fields"]: {
	__typename: "vectric_products_products_max_fields",
	externalid?: GraphQLTypes["bigint"],
	fastspringId?: string,
	latestversion?: GraphQLTypes["bigint"],
	productID?: GraphQLTypes["bigint"],
	productName?: string,
	releaseDate?: GraphQLTypes["date"],
	type?: GraphQLTypes["bigint"],
	upgradefromtypeid?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_products_products_min_fields"]: {
	__typename: "vectric_products_products_min_fields",
	externalid?: GraphQLTypes["bigint"],
	fastspringId?: string,
	latestversion?: GraphQLTypes["bigint"],
	productID?: GraphQLTypes["bigint"],
	productName?: string,
	releaseDate?: GraphQLTypes["date"],
	type?: GraphQLTypes["bigint"],
	upgradefromtypeid?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.products_products" */
["vectric_products_products_mutation_response"]: {
	__typename: "vectric_products_products_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_products_products"]>
};
	/** aggregate stddev on columns */
["vectric_products_products_stddev_fields"]: {
	__typename: "vectric_products_products_stddev_fields",
	externalid?: number,
	latestversion?: number,
	productID?: number,
	type?: number,
	upgradefromtypeid?: number
};
	/** aggregate stddev_pop on columns */
["vectric_products_products_stddev_pop_fields"]: {
	__typename: "vectric_products_products_stddev_pop_fields",
	externalid?: number,
	latestversion?: number,
	productID?: number,
	type?: number,
	upgradefromtypeid?: number
};
	/** aggregate stddev_samp on columns */
["vectric_products_products_stddev_samp_fields"]: {
	__typename: "vectric_products_products_stddev_samp_fields",
	externalid?: number,
	latestversion?: number,
	productID?: number,
	type?: number,
	upgradefromtypeid?: number
};
	/** aggregate sum on columns */
["vectric_products_products_sum_fields"]: {
	__typename: "vectric_products_products_sum_fields",
	externalid?: GraphQLTypes["bigint"],
	latestversion?: GraphQLTypes["bigint"],
	productID?: GraphQLTypes["bigint"],
	type?: GraphQLTypes["bigint"],
	upgradefromtypeid?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_products_products_var_pop_fields"]: {
	__typename: "vectric_products_products_var_pop_fields",
	externalid?: number,
	latestversion?: number,
	productID?: number,
	type?: number,
	upgradefromtypeid?: number
};
	/** aggregate var_samp on columns */
["vectric_products_products_var_samp_fields"]: {
	__typename: "vectric_products_products_var_samp_fields",
	externalid?: number,
	latestversion?: number,
	productID?: number,
	type?: number,
	upgradefromtypeid?: number
};
	/** aggregate variance on columns */
["vectric_products_products_variance_fields"]: {
	__typename: "vectric_products_products_variance_fields",
	externalid?: number,
	latestversion?: number,
	productID?: number,
	type?: number,
	upgradefromtypeid?: number
};
	/** columns and relationships of "vectric.products_producttype" */
["vectric_products_producttype"]: {
	__typename: "vectric_products_producttype",
	productTypeId: GraphQLTypes["bigint"],
	productTypeName: string,
	/** An array relationship */
	products: Array<GraphQLTypes["vectric_products_products"]>,
	/** An aggregate relationship */
	products_aggregate: GraphQLTypes["vectric_products_products_aggregate"],
	seq?: number
};
	/** aggregated selection of "vectric.products_producttype" */
["vectric_products_producttype_aggregate"]: {
	__typename: "vectric_products_producttype_aggregate",
	aggregate?: GraphQLTypes["vectric_products_producttype_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_products_producttype"]>
};
	/** aggregate fields of "vectric.products_producttype" */
["vectric_products_producttype_aggregate_fields"]: {
	__typename: "vectric_products_producttype_aggregate_fields",
	avg?: GraphQLTypes["vectric_products_producttype_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_products_producttype_max_fields"],
	min?: GraphQLTypes["vectric_products_producttype_min_fields"],
	stddev?: GraphQLTypes["vectric_products_producttype_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_products_producttype_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_products_producttype_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_products_producttype_sum_fields"],
	var_pop?: GraphQLTypes["vectric_products_producttype_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_products_producttype_var_samp_fields"],
	variance?: GraphQLTypes["vectric_products_producttype_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_products_producttype_avg_fields"]: {
	__typename: "vectric_products_producttype_avg_fields",
	productTypeId?: number,
	seq?: number
};
	/** aggregate max on columns */
["vectric_products_producttype_max_fields"]: {
	__typename: "vectric_products_producttype_max_fields",
	productTypeId?: GraphQLTypes["bigint"],
	productTypeName?: string,
	seq?: number
};
	/** aggregate min on columns */
["vectric_products_producttype_min_fields"]: {
	__typename: "vectric_products_producttype_min_fields",
	productTypeId?: GraphQLTypes["bigint"],
	productTypeName?: string,
	seq?: number
};
	/** response of any mutation on the table "vectric.products_producttype" */
["vectric_products_producttype_mutation_response"]: {
	__typename: "vectric_products_producttype_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_products_producttype"]>
};
	/** aggregate stddev on columns */
["vectric_products_producttype_stddev_fields"]: {
	__typename: "vectric_products_producttype_stddev_fields",
	productTypeId?: number,
	seq?: number
};
	/** aggregate stddev_pop on columns */
["vectric_products_producttype_stddev_pop_fields"]: {
	__typename: "vectric_products_producttype_stddev_pop_fields",
	productTypeId?: number,
	seq?: number
};
	/** aggregate stddev_samp on columns */
["vectric_products_producttype_stddev_samp_fields"]: {
	__typename: "vectric_products_producttype_stddev_samp_fields",
	productTypeId?: number,
	seq?: number
};
	/** aggregate sum on columns */
["vectric_products_producttype_sum_fields"]: {
	__typename: "vectric_products_producttype_sum_fields",
	productTypeId?: GraphQLTypes["bigint"],
	seq?: number
};
	/** aggregate var_pop on columns */
["vectric_products_producttype_var_pop_fields"]: {
	__typename: "vectric_products_producttype_var_pop_fields",
	productTypeId?: number,
	seq?: number
};
	/** aggregate var_samp on columns */
["vectric_products_producttype_var_samp_fields"]: {
	__typename: "vectric_products_producttype_var_samp_fields",
	productTypeId?: number,
	seq?: number
};
	/** aggregate variance on columns */
["vectric_products_producttype_variance_fields"]: {
	__typename: "vectric_products_producttype_variance_fields",
	productTypeId?: number,
	seq?: number
};
	/** columns and relationships of "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility"]: {
	__typename: "vectric_products_upgrade_eligibility",
	eligibilityid: GraphQLTypes["bigint"],
	fastspringproductid: string,
	fastspringurl: string,
	fromtype: GraphQLTypes["bigint"],
	maxmajorversion: GraphQLTypes["bigint"],
	minmajorversion: GraphQLTypes["bigint"],
	price: GraphQLTypes["numeric"],
	/** An object relationship */
	productsUpgradeFromType: GraphQLTypes["vectric_products_producttype"],
	/** An object relationship */
	productsUpgradeToProduct: GraphQLTypes["vectric_products_products"],
	summary?: string,
	toproduct: GraphQLTypes["bigint"],
	updatelink?: string,
	visibletocustomers: boolean,
	visibletostaff: boolean
};
	/** aggregated selection of "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_aggregate"]: {
	__typename: "vectric_products_upgrade_eligibility_aggregate",
	aggregate?: GraphQLTypes["vectric_products_upgrade_eligibility_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_products_upgrade_eligibility"]>
};
	/** aggregate fields of "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_aggregate_fields"]: {
	__typename: "vectric_products_upgrade_eligibility_aggregate_fields",
	avg?: GraphQLTypes["vectric_products_upgrade_eligibility_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_products_upgrade_eligibility_max_fields"],
	min?: GraphQLTypes["vectric_products_upgrade_eligibility_min_fields"],
	stddev?: GraphQLTypes["vectric_products_upgrade_eligibility_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_products_upgrade_eligibility_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_products_upgrade_eligibility_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_products_upgrade_eligibility_sum_fields"],
	var_pop?: GraphQLTypes["vectric_products_upgrade_eligibility_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_products_upgrade_eligibility_var_samp_fields"],
	variance?: GraphQLTypes["vectric_products_upgrade_eligibility_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_products_upgrade_eligibility_avg_fields"]: {
	__typename: "vectric_products_upgrade_eligibility_avg_fields",
	eligibilityid?: number,
	fromtype?: number,
	maxmajorversion?: number,
	minmajorversion?: number,
	price?: number,
	toproduct?: number
};
	/** aggregate max on columns */
["vectric_products_upgrade_eligibility_max_fields"]: {
	__typename: "vectric_products_upgrade_eligibility_max_fields",
	eligibilityid?: GraphQLTypes["bigint"],
	fastspringproductid?: string,
	fastspringurl?: string,
	fromtype?: GraphQLTypes["bigint"],
	maxmajorversion?: GraphQLTypes["bigint"],
	minmajorversion?: GraphQLTypes["bigint"],
	price?: GraphQLTypes["numeric"],
	summary?: string,
	toproduct?: GraphQLTypes["bigint"],
	updatelink?: string
};
	/** aggregate min on columns */
["vectric_products_upgrade_eligibility_min_fields"]: {
	__typename: "vectric_products_upgrade_eligibility_min_fields",
	eligibilityid?: GraphQLTypes["bigint"],
	fastspringproductid?: string,
	fastspringurl?: string,
	fromtype?: GraphQLTypes["bigint"],
	maxmajorversion?: GraphQLTypes["bigint"],
	minmajorversion?: GraphQLTypes["bigint"],
	price?: GraphQLTypes["numeric"],
	summary?: string,
	toproduct?: GraphQLTypes["bigint"],
	updatelink?: string
};
	/** response of any mutation on the table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_mutation_response"]: {
	__typename: "vectric_products_upgrade_eligibility_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_products_upgrade_eligibility"]>
};
	/** aggregate stddev on columns */
["vectric_products_upgrade_eligibility_stddev_fields"]: {
	__typename: "vectric_products_upgrade_eligibility_stddev_fields",
	eligibilityid?: number,
	fromtype?: number,
	maxmajorversion?: number,
	minmajorversion?: number,
	price?: number,
	toproduct?: number
};
	/** aggregate stddev_pop on columns */
["vectric_products_upgrade_eligibility_stddev_pop_fields"]: {
	__typename: "vectric_products_upgrade_eligibility_stddev_pop_fields",
	eligibilityid?: number,
	fromtype?: number,
	maxmajorversion?: number,
	minmajorversion?: number,
	price?: number,
	toproduct?: number
};
	/** aggregate stddev_samp on columns */
["vectric_products_upgrade_eligibility_stddev_samp_fields"]: {
	__typename: "vectric_products_upgrade_eligibility_stddev_samp_fields",
	eligibilityid?: number,
	fromtype?: number,
	maxmajorversion?: number,
	minmajorversion?: number,
	price?: number,
	toproduct?: number
};
	/** aggregate sum on columns */
["vectric_products_upgrade_eligibility_sum_fields"]: {
	__typename: "vectric_products_upgrade_eligibility_sum_fields",
	eligibilityid?: GraphQLTypes["bigint"],
	fromtype?: GraphQLTypes["bigint"],
	maxmajorversion?: GraphQLTypes["bigint"],
	minmajorversion?: GraphQLTypes["bigint"],
	price?: GraphQLTypes["numeric"],
	toproduct?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_products_upgrade_eligibility_var_pop_fields"]: {
	__typename: "vectric_products_upgrade_eligibility_var_pop_fields",
	eligibilityid?: number,
	fromtype?: number,
	maxmajorversion?: number,
	minmajorversion?: number,
	price?: number,
	toproduct?: number
};
	/** aggregate var_samp on columns */
["vectric_products_upgrade_eligibility_var_samp_fields"]: {
	__typename: "vectric_products_upgrade_eligibility_var_samp_fields",
	eligibilityid?: number,
	fromtype?: number,
	maxmajorversion?: number,
	minmajorversion?: number,
	price?: number,
	toproduct?: number
};
	/** aggregate variance on columns */
["vectric_products_upgrade_eligibility_variance_fields"]: {
	__typename: "vectric_products_upgrade_eligibility_variance_fields",
	eligibilityid?: number,
	fromtype?: number,
	maxmajorversion?: number,
	minmajorversion?: number,
	price?: number,
	toproduct?: number
};
	/** columns and relationships of "vectric.products_versioncodes" */
["vectric_products_versioncodes"]: {
	__typename: "vectric_products_versioncodes",
	displayVersion?: string,
	latest: boolean,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	notifying?: boolean,
	patchurl?: string,
	/** An object relationship */
	product?: GraphQLTypes["vectric_products_products"],
	productid?: GraphQLTypes["bigint"],
	releaseDate?: GraphQLTypes["date"],
	url?: string,
	versioncodeid: GraphQLTypes["bigint"],
	visible: boolean
};
	/** aggregated selection of "vectric.products_versioncodes" */
["vectric_products_versioncodes_aggregate"]: {
	__typename: "vectric_products_versioncodes_aggregate",
	aggregate?: GraphQLTypes["vectric_products_versioncodes_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_products_versioncodes"]>
};
	/** aggregate fields of "vectric.products_versioncodes" */
["vectric_products_versioncodes_aggregate_fields"]: {
	__typename: "vectric_products_versioncodes_aggregate_fields",
	avg?: GraphQLTypes["vectric_products_versioncodes_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_products_versioncodes_max_fields"],
	min?: GraphQLTypes["vectric_products_versioncodes_min_fields"],
	stddev?: GraphQLTypes["vectric_products_versioncodes_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_products_versioncodes_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_products_versioncodes_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_products_versioncodes_sum_fields"],
	var_pop?: GraphQLTypes["vectric_products_versioncodes_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_products_versioncodes_var_samp_fields"],
	variance?: GraphQLTypes["vectric_products_versioncodes_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_products_versioncodes_avg_fields"]: {
	__typename: "vectric_products_versioncodes_avg_fields",
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	productid?: number,
	versioncodeid?: number
};
	/** aggregate max on columns */
["vectric_products_versioncodes_max_fields"]: {
	__typename: "vectric_products_versioncodes_max_fields",
	displayVersion?: string,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	patchurl?: string,
	productid?: GraphQLTypes["bigint"],
	releaseDate?: GraphQLTypes["date"],
	url?: string,
	versioncodeid?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_products_versioncodes_min_fields"]: {
	__typename: "vectric_products_versioncodes_min_fields",
	displayVersion?: string,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	patchurl?: string,
	productid?: GraphQLTypes["bigint"],
	releaseDate?: GraphQLTypes["date"],
	url?: string,
	versioncodeid?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.products_versioncodes" */
["vectric_products_versioncodes_mutation_response"]: {
	__typename: "vectric_products_versioncodes_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_products_versioncodes"]>
};
	/** aggregate stddev on columns */
["vectric_products_versioncodes_stddev_fields"]: {
	__typename: "vectric_products_versioncodes_stddev_fields",
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	productid?: number,
	versioncodeid?: number
};
	/** aggregate stddev_pop on columns */
["vectric_products_versioncodes_stddev_pop_fields"]: {
	__typename: "vectric_products_versioncodes_stddev_pop_fields",
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	productid?: number,
	versioncodeid?: number
};
	/** aggregate stddev_samp on columns */
["vectric_products_versioncodes_stddev_samp_fields"]: {
	__typename: "vectric_products_versioncodes_stddev_samp_fields",
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	productid?: number,
	versioncodeid?: number
};
	/** aggregate sum on columns */
["vectric_products_versioncodes_sum_fields"]: {
	__typename: "vectric_products_versioncodes_sum_fields",
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	productid?: GraphQLTypes["bigint"],
	versioncodeid?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_products_versioncodes_var_pop_fields"]: {
	__typename: "vectric_products_versioncodes_var_pop_fields",
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	productid?: number,
	versioncodeid?: number
};
	/** aggregate var_samp on columns */
["vectric_products_versioncodes_var_samp_fields"]: {
	__typename: "vectric_products_versioncodes_var_samp_fields",
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	productid?: number,
	versioncodeid?: number
};
	/** aggregate variance on columns */
["vectric_products_versioncodes_variance_fields"]: {
	__typename: "vectric_products_versioncodes_variance_fields",
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	productid?: number,
	versioncodeid?: number
};
	/** columns and relationships of "vectric.questions" */
["vectric_questions"]: {
	__typename: "vectric_questions",
	/** An array relationship */
	customer_responses: Array<GraphQLTypes["vectric_customer_responses"]>,
	/** An aggregate relationship */
	customer_responses_aggregate: GraphQLTypes["vectric_customer_responses_aggregate"],
	multipleanswers?: boolean,
	questionid: GraphQLTypes["bigint"],
	questiontext?: string,
	/** fetch data from the table: "vectric.responses" */
	responses: Array<GraphQLTypes["vectric_responses"]>,
	/** fetch aggregated fields from the table: "vectric.responses" */
	responses_aggregate: GraphQLTypes["vectric_responses_aggregate"]
};
	/** aggregated selection of "vectric.questions" */
["vectric_questions_aggregate"]: {
	__typename: "vectric_questions_aggregate",
	aggregate?: GraphQLTypes["vectric_questions_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_questions"]>
};
	/** aggregate fields of "vectric.questions" */
["vectric_questions_aggregate_fields"]: {
	__typename: "vectric_questions_aggregate_fields",
	avg?: GraphQLTypes["vectric_questions_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_questions_max_fields"],
	min?: GraphQLTypes["vectric_questions_min_fields"],
	stddev?: GraphQLTypes["vectric_questions_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_questions_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_questions_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_questions_sum_fields"],
	var_pop?: GraphQLTypes["vectric_questions_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_questions_var_samp_fields"],
	variance?: GraphQLTypes["vectric_questions_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_questions_avg_fields"]: {
	__typename: "vectric_questions_avg_fields",
	questionid?: number
};
	/** aggregate max on columns */
["vectric_questions_max_fields"]: {
	__typename: "vectric_questions_max_fields",
	questionid?: GraphQLTypes["bigint"],
	questiontext?: string
};
	/** aggregate min on columns */
["vectric_questions_min_fields"]: {
	__typename: "vectric_questions_min_fields",
	questionid?: GraphQLTypes["bigint"],
	questiontext?: string
};
	/** response of any mutation on the table "vectric.questions" */
["vectric_questions_mutation_response"]: {
	__typename: "vectric_questions_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_questions"]>
};
	/** aggregate stddev on columns */
["vectric_questions_stddev_fields"]: {
	__typename: "vectric_questions_stddev_fields",
	questionid?: number
};
	/** aggregate stddev_pop on columns */
["vectric_questions_stddev_pop_fields"]: {
	__typename: "vectric_questions_stddev_pop_fields",
	questionid?: number
};
	/** aggregate stddev_samp on columns */
["vectric_questions_stddev_samp_fields"]: {
	__typename: "vectric_questions_stddev_samp_fields",
	questionid?: number
};
	/** aggregate sum on columns */
["vectric_questions_sum_fields"]: {
	__typename: "vectric_questions_sum_fields",
	questionid?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_questions_var_pop_fields"]: {
	__typename: "vectric_questions_var_pop_fields",
	questionid?: number
};
	/** aggregate var_samp on columns */
["vectric_questions_var_samp_fields"]: {
	__typename: "vectric_questions_var_samp_fields",
	questionid?: number
};
	/** aggregate variance on columns */
["vectric_questions_variance_fields"]: {
	__typename: "vectric_questions_variance_fields",
	questionid?: number
};
	/** columns and relationships of "vectric.responses" */
["vectric_responses"]: {
	__typename: "vectric_responses",
	questionid: GraphQLTypes["bigint"],
	responseid: GraphQLTypes["bigint"],
	responsetext?: string
};
	/** aggregated selection of "vectric.responses" */
["vectric_responses_aggregate"]: {
	__typename: "vectric_responses_aggregate",
	aggregate?: GraphQLTypes["vectric_responses_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_responses"]>
};
	/** aggregate fields of "vectric.responses" */
["vectric_responses_aggregate_fields"]: {
	__typename: "vectric_responses_aggregate_fields",
	avg?: GraphQLTypes["vectric_responses_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_responses_max_fields"],
	min?: GraphQLTypes["vectric_responses_min_fields"],
	stddev?: GraphQLTypes["vectric_responses_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_responses_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_responses_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_responses_sum_fields"],
	var_pop?: GraphQLTypes["vectric_responses_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_responses_var_samp_fields"],
	variance?: GraphQLTypes["vectric_responses_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_responses_avg_fields"]: {
	__typename: "vectric_responses_avg_fields",
	questionid?: number,
	responseid?: number
};
	/** aggregate max on columns */
["vectric_responses_max_fields"]: {
	__typename: "vectric_responses_max_fields",
	questionid?: GraphQLTypes["bigint"],
	responseid?: GraphQLTypes["bigint"],
	responsetext?: string
};
	/** aggregate min on columns */
["vectric_responses_min_fields"]: {
	__typename: "vectric_responses_min_fields",
	questionid?: GraphQLTypes["bigint"],
	responseid?: GraphQLTypes["bigint"],
	responsetext?: string
};
	/** response of any mutation on the table "vectric.responses" */
["vectric_responses_mutation_response"]: {
	__typename: "vectric_responses_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_responses"]>
};
	/** aggregate stddev on columns */
["vectric_responses_stddev_fields"]: {
	__typename: "vectric_responses_stddev_fields",
	questionid?: number,
	responseid?: number
};
	/** aggregate stddev_pop on columns */
["vectric_responses_stddev_pop_fields"]: {
	__typename: "vectric_responses_stddev_pop_fields",
	questionid?: number,
	responseid?: number
};
	/** aggregate stddev_samp on columns */
["vectric_responses_stddev_samp_fields"]: {
	__typename: "vectric_responses_stddev_samp_fields",
	questionid?: number,
	responseid?: number
};
	/** aggregate sum on columns */
["vectric_responses_sum_fields"]: {
	__typename: "vectric_responses_sum_fields",
	questionid?: GraphQLTypes["bigint"],
	responseid?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_responses_var_pop_fields"]: {
	__typename: "vectric_responses_var_pop_fields",
	questionid?: number,
	responseid?: number
};
	/** aggregate var_samp on columns */
["vectric_responses_var_samp_fields"]: {
	__typename: "vectric_responses_var_samp_fields",
	questionid?: number,
	responseid?: number
};
	/** aggregate variance on columns */
["vectric_responses_variance_fields"]: {
	__typename: "vectric_responses_variance_fields",
	questionid?: number,
	responseid?: number
};
	/** columns and relationships of "vectric.saleable_products" */
["vectric_saleable_products"]: {
	__typename: "vectric_saleable_products",
	enabled?: boolean,
	fastspringId?: string,
	free?: boolean,
	media?: boolean,
	productId: number,
	productName: string,
	productTypeId: number,
	receivesClipart?: boolean,
	subscription?: boolean
};
	/** aggregated selection of "vectric.saleable_products" */
["vectric_saleable_products_aggregate"]: {
	__typename: "vectric_saleable_products_aggregate",
	aggregate?: GraphQLTypes["vectric_saleable_products_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_saleable_products"]>
};
	/** aggregate fields of "vectric.saleable_products" */
["vectric_saleable_products_aggregate_fields"]: {
	__typename: "vectric_saleable_products_aggregate_fields",
	avg?: GraphQLTypes["vectric_saleable_products_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_saleable_products_max_fields"],
	min?: GraphQLTypes["vectric_saleable_products_min_fields"],
	stddev?: GraphQLTypes["vectric_saleable_products_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_saleable_products_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_saleable_products_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_saleable_products_sum_fields"],
	var_pop?: GraphQLTypes["vectric_saleable_products_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_saleable_products_var_samp_fields"],
	variance?: GraphQLTypes["vectric_saleable_products_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_saleable_products_avg_fields"]: {
	__typename: "vectric_saleable_products_avg_fields",
	productId?: number,
	productTypeId?: number
};
	/** aggregate max on columns */
["vectric_saleable_products_max_fields"]: {
	__typename: "vectric_saleable_products_max_fields",
	fastspringId?: string,
	productId?: number,
	productName?: string,
	productTypeId?: number
};
	/** aggregate min on columns */
["vectric_saleable_products_min_fields"]: {
	__typename: "vectric_saleable_products_min_fields",
	fastspringId?: string,
	productId?: number,
	productName?: string,
	productTypeId?: number
};
	/** response of any mutation on the table "vectric.saleable_products" */
["vectric_saleable_products_mutation_response"]: {
	__typename: "vectric_saleable_products_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_saleable_products"]>
};
	/** aggregate stddev on columns */
["vectric_saleable_products_stddev_fields"]: {
	__typename: "vectric_saleable_products_stddev_fields",
	productId?: number,
	productTypeId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_saleable_products_stddev_pop_fields"]: {
	__typename: "vectric_saleable_products_stddev_pop_fields",
	productId?: number,
	productTypeId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_saleable_products_stddev_samp_fields"]: {
	__typename: "vectric_saleable_products_stddev_samp_fields",
	productId?: number,
	productTypeId?: number
};
	/** aggregate sum on columns */
["vectric_saleable_products_sum_fields"]: {
	__typename: "vectric_saleable_products_sum_fields",
	productId?: number,
	productTypeId?: number
};
	/** aggregate var_pop on columns */
["vectric_saleable_products_var_pop_fields"]: {
	__typename: "vectric_saleable_products_var_pop_fields",
	productId?: number,
	productTypeId?: number
};
	/** aggregate var_samp on columns */
["vectric_saleable_products_var_samp_fields"]: {
	__typename: "vectric_saleable_products_var_samp_fields",
	productId?: number,
	productTypeId?: number
};
	/** aggregate variance on columns */
["vectric_saleable_products_variance_fields"]: {
	__typename: "vectric_saleable_products_variance_fields",
	productId?: number,
	productTypeId?: number
};
	/** columns and relationships of "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads"]: {
	__typename: "vectric_sales_customer_downloads",
	customerId?: GraphQLTypes["bigint"],
	downloadDate?: GraphQLTypes["timestamptz"],
	downloadId: GraphQLTypes["bigint"],
	fulfilmentId?: GraphQLTypes["bigint"],
	ipAddress?: string
};
	/** aggregated selection of "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_aggregate"]: {
	__typename: "vectric_sales_customer_downloads_aggregate",
	aggregate?: GraphQLTypes["vectric_sales_customer_downloads_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_sales_customer_downloads"]>
};
	/** aggregate fields of "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_aggregate_fields"]: {
	__typename: "vectric_sales_customer_downloads_aggregate_fields",
	avg?: GraphQLTypes["vectric_sales_customer_downloads_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_sales_customer_downloads_max_fields"],
	min?: GraphQLTypes["vectric_sales_customer_downloads_min_fields"],
	stddev?: GraphQLTypes["vectric_sales_customer_downloads_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_sales_customer_downloads_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_sales_customer_downloads_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_sales_customer_downloads_sum_fields"],
	var_pop?: GraphQLTypes["vectric_sales_customer_downloads_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_sales_customer_downloads_var_samp_fields"],
	variance?: GraphQLTypes["vectric_sales_customer_downloads_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_sales_customer_downloads_avg_fields"]: {
	__typename: "vectric_sales_customer_downloads_avg_fields",
	customerId?: number,
	downloadId?: number,
	fulfilmentId?: number
};
	/** aggregate max on columns */
["vectric_sales_customer_downloads_max_fields"]: {
	__typename: "vectric_sales_customer_downloads_max_fields",
	customerId?: GraphQLTypes["bigint"],
	downloadDate?: GraphQLTypes["timestamptz"],
	downloadId?: GraphQLTypes["bigint"],
	fulfilmentId?: GraphQLTypes["bigint"],
	ipAddress?: string
};
	/** aggregate min on columns */
["vectric_sales_customer_downloads_min_fields"]: {
	__typename: "vectric_sales_customer_downloads_min_fields",
	customerId?: GraphQLTypes["bigint"],
	downloadDate?: GraphQLTypes["timestamptz"],
	downloadId?: GraphQLTypes["bigint"],
	fulfilmentId?: GraphQLTypes["bigint"],
	ipAddress?: string
};
	/** response of any mutation on the table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_mutation_response"]: {
	__typename: "vectric_sales_customer_downloads_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_sales_customer_downloads"]>
};
	/** aggregate stddev on columns */
["vectric_sales_customer_downloads_stddev_fields"]: {
	__typename: "vectric_sales_customer_downloads_stddev_fields",
	customerId?: number,
	downloadId?: number,
	fulfilmentId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_sales_customer_downloads_stddev_pop_fields"]: {
	__typename: "vectric_sales_customer_downloads_stddev_pop_fields",
	customerId?: number,
	downloadId?: number,
	fulfilmentId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_sales_customer_downloads_stddev_samp_fields"]: {
	__typename: "vectric_sales_customer_downloads_stddev_samp_fields",
	customerId?: number,
	downloadId?: number,
	fulfilmentId?: number
};
	/** aggregate sum on columns */
["vectric_sales_customer_downloads_sum_fields"]: {
	__typename: "vectric_sales_customer_downloads_sum_fields",
	customerId?: GraphQLTypes["bigint"],
	downloadId?: GraphQLTypes["bigint"],
	fulfilmentId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_sales_customer_downloads_var_pop_fields"]: {
	__typename: "vectric_sales_customer_downloads_var_pop_fields",
	customerId?: number,
	downloadId?: number,
	fulfilmentId?: number
};
	/** aggregate var_samp on columns */
["vectric_sales_customer_downloads_var_samp_fields"]: {
	__typename: "vectric_sales_customer_downloads_var_samp_fields",
	customerId?: number,
	downloadId?: number,
	fulfilmentId?: number
};
	/** aggregate variance on columns */
["vectric_sales_customer_downloads_variance_fields"]: {
	__typename: "vectric_sales_customer_downloads_variance_fields",
	customerId?: number,
	downloadId?: number,
	fulfilmentId?: number
};
	/** columns and relationships of "vectric.sales_customers" */
["vectric_sales_customers"]: {
	__typename: "vectric_sales_customers",
	acceptedTerms: boolean,
	amendedby?: string,
	companyName?: string,
	/** An object relationship */
	country?: GraphQLTypes["vectric_countries"],
	countrycode?: GraphQLTypes["bigint"],
	createdby?: string,
	customerAddressLine?: string,
	customerId: GraphQLTypes["bigint"],
	customerName?: string,
	/** An array relationship */
	customerSales: Array<GraphQLTypes["vectric_customer_sales"]>,
	/** An aggregate relationship */
	customerSales_aggregate: GraphQLTypes["vectric_customer_sales_aggregate"],
	customerTelephone?: string,
	customerType: string,
	customerstatusid: GraphQLTypes["bigint"],
	customeruuid: GraphQLTypes["uuid"],
	dateAcceptedTerms?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateMarketingConsentUpdated?: GraphQLTypes["timestamptz"],
	dateUpgradeEmailConsentUpdates?: GraphQLTypes["timestamptz"],
	dateamended?: GraphQLTypes["timestamptz"],
	email: string,
	/** An array relationship */
	freeClipartTokens: Array<GraphQLTypes["vectric_free_clipart_tokens"]>,
	/** An aggregate relationship */
	freeClipartTokens_aggregate: GraphQLTypes["vectric_free_clipart_tokens_aggregate"],
	language?: string,
	lastLogin?: GraphQLTypes["timestamptz"],
	lastipaddress?: string,
	location?: string,
	/** An array relationship */
	memberships: Array<GraphQLTypes["vectric_group_user_role"]>,
	/** An aggregate relationship */
	memberships_aggregate: GraphQLTypes["vectric_group_user_role_aggregate"],
	mergedfromcustomerid?: GraphQLTypes["bigint"],
	mergedtocustomerid?: GraphQLTypes["bigint"],
	notes?: string,
	/** An array relationship */
	orders: Array<GraphQLTypes["vectric_sales_orders"]>,
	/** An aggregate relationship */
	orders_aggregate: GraphQLTypes["vectric_sales_orders_aggregate"],
	/** An array relationship */
	organizationMemberships: Array<GraphQLTypes["vectric_memberships"]>,
	/** An aggregate relationship */
	organizationMemberships_aggregate: GraphQLTypes["vectric_memberships_aggregate"],
	/** An array relationship */
	partnerMemberships: Array<GraphQLTypes["vectric_oem_staff_customer"]>,
	/** An aggregate relationship */
	partnerMemberships_aggregate: GraphQLTypes["vectric_oem_staff_customer_aggregate"],
	receivingMarketingEmails: boolean,
	receivingUpgradeEmails: boolean,
	registeredUsername: string,
	/** An object relationship */
	user?: GraphQLTypes["vectric_security_users"],
	verified: boolean
};
	/** aggregated selection of "vectric.sales_customers" */
["vectric_sales_customers_aggregate"]: {
	__typename: "vectric_sales_customers_aggregate",
	aggregate?: GraphQLTypes["vectric_sales_customers_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_sales_customers"]>
};
	/** aggregate fields of "vectric.sales_customers" */
["vectric_sales_customers_aggregate_fields"]: {
	__typename: "vectric_sales_customers_aggregate_fields",
	avg?: GraphQLTypes["vectric_sales_customers_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_sales_customers_max_fields"],
	min?: GraphQLTypes["vectric_sales_customers_min_fields"],
	stddev?: GraphQLTypes["vectric_sales_customers_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_sales_customers_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_sales_customers_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_sales_customers_sum_fields"],
	var_pop?: GraphQLTypes["vectric_sales_customers_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_sales_customers_var_samp_fields"],
	variance?: GraphQLTypes["vectric_sales_customers_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_sales_customers_avg_fields"]: {
	__typename: "vectric_sales_customers_avg_fields",
	countrycode?: number,
	customerId?: number,
	customerstatusid?: number,
	mergedfromcustomerid?: number,
	mergedtocustomerid?: number
};
	/** aggregate max on columns */
["vectric_sales_customers_max_fields"]: {
	__typename: "vectric_sales_customers_max_fields",
	amendedby?: string,
	companyName?: string,
	countrycode?: GraphQLTypes["bigint"],
	createdby?: string,
	customerAddressLine?: string,
	customerId?: GraphQLTypes["bigint"],
	customerName?: string,
	customerTelephone?: string,
	customerType?: string,
	customerstatusid?: GraphQLTypes["bigint"],
	customeruuid?: GraphQLTypes["uuid"],
	dateAcceptedTerms?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateMarketingConsentUpdated?: GraphQLTypes["timestamptz"],
	dateUpgradeEmailConsentUpdates?: GraphQLTypes["timestamptz"],
	dateamended?: GraphQLTypes["timestamptz"],
	email?: string,
	language?: string,
	lastLogin?: GraphQLTypes["timestamptz"],
	lastipaddress?: string,
	location?: string,
	mergedfromcustomerid?: GraphQLTypes["bigint"],
	mergedtocustomerid?: GraphQLTypes["bigint"],
	notes?: string,
	registeredUsername?: string
};
	/** aggregate min on columns */
["vectric_sales_customers_min_fields"]: {
	__typename: "vectric_sales_customers_min_fields",
	amendedby?: string,
	companyName?: string,
	countrycode?: GraphQLTypes["bigint"],
	createdby?: string,
	customerAddressLine?: string,
	customerId?: GraphQLTypes["bigint"],
	customerName?: string,
	customerTelephone?: string,
	customerType?: string,
	customerstatusid?: GraphQLTypes["bigint"],
	customeruuid?: GraphQLTypes["uuid"],
	dateAcceptedTerms?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateMarketingConsentUpdated?: GraphQLTypes["timestamptz"],
	dateUpgradeEmailConsentUpdates?: GraphQLTypes["timestamptz"],
	dateamended?: GraphQLTypes["timestamptz"],
	email?: string,
	language?: string,
	lastLogin?: GraphQLTypes["timestamptz"],
	lastipaddress?: string,
	location?: string,
	mergedfromcustomerid?: GraphQLTypes["bigint"],
	mergedtocustomerid?: GraphQLTypes["bigint"],
	notes?: string,
	registeredUsername?: string
};
	/** response of any mutation on the table "vectric.sales_customers" */
["vectric_sales_customers_mutation_response"]: {
	__typename: "vectric_sales_customers_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_sales_customers"]>
};
	/** aggregate stddev on columns */
["vectric_sales_customers_stddev_fields"]: {
	__typename: "vectric_sales_customers_stddev_fields",
	countrycode?: number,
	customerId?: number,
	customerstatusid?: number,
	mergedfromcustomerid?: number,
	mergedtocustomerid?: number
};
	/** aggregate stddev_pop on columns */
["vectric_sales_customers_stddev_pop_fields"]: {
	__typename: "vectric_sales_customers_stddev_pop_fields",
	countrycode?: number,
	customerId?: number,
	customerstatusid?: number,
	mergedfromcustomerid?: number,
	mergedtocustomerid?: number
};
	/** aggregate stddev_samp on columns */
["vectric_sales_customers_stddev_samp_fields"]: {
	__typename: "vectric_sales_customers_stddev_samp_fields",
	countrycode?: number,
	customerId?: number,
	customerstatusid?: number,
	mergedfromcustomerid?: number,
	mergedtocustomerid?: number
};
	/** aggregate sum on columns */
["vectric_sales_customers_sum_fields"]: {
	__typename: "vectric_sales_customers_sum_fields",
	countrycode?: GraphQLTypes["bigint"],
	customerId?: GraphQLTypes["bigint"],
	customerstatusid?: GraphQLTypes["bigint"],
	mergedfromcustomerid?: GraphQLTypes["bigint"],
	mergedtocustomerid?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_sales_customers_var_pop_fields"]: {
	__typename: "vectric_sales_customers_var_pop_fields",
	countrycode?: number,
	customerId?: number,
	customerstatusid?: number,
	mergedfromcustomerid?: number,
	mergedtocustomerid?: number
};
	/** aggregate var_samp on columns */
["vectric_sales_customers_var_samp_fields"]: {
	__typename: "vectric_sales_customers_var_samp_fields",
	countrycode?: number,
	customerId?: number,
	customerstatusid?: number,
	mergedfromcustomerid?: number,
	mergedtocustomerid?: number
};
	/** aggregate variance on columns */
["vectric_sales_customers_variance_fields"]: {
	__typename: "vectric_sales_customers_variance_fields",
	countrycode?: number,
	customerId?: number,
	customerstatusid?: number,
	mergedfromcustomerid?: number,
	mergedtocustomerid?: number
};
	/** columns and relationships of "vectric.sales_customerupdates" */
["vectric_sales_customerupdates"]: {
	__typename: "vectric_sales_customerupdates",
	changedBy?: string,
	customerId: GraphQLTypes["bigint"],
	customerUpdateId: GraphQLTypes["bigint"],
	dateChanged: GraphQLTypes["timestamptz"],
	fieldName: string,
	newValue: string,
	oldValue?: string
};
	/** aggregated selection of "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_aggregate"]: {
	__typename: "vectric_sales_customerupdates_aggregate",
	aggregate?: GraphQLTypes["vectric_sales_customerupdates_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_sales_customerupdates"]>
};
	/** aggregate fields of "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_aggregate_fields"]: {
	__typename: "vectric_sales_customerupdates_aggregate_fields",
	avg?: GraphQLTypes["vectric_sales_customerupdates_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_sales_customerupdates_max_fields"],
	min?: GraphQLTypes["vectric_sales_customerupdates_min_fields"],
	stddev?: GraphQLTypes["vectric_sales_customerupdates_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_sales_customerupdates_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_sales_customerupdates_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_sales_customerupdates_sum_fields"],
	var_pop?: GraphQLTypes["vectric_sales_customerupdates_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_sales_customerupdates_var_samp_fields"],
	variance?: GraphQLTypes["vectric_sales_customerupdates_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_sales_customerupdates_avg_fields"]: {
	__typename: "vectric_sales_customerupdates_avg_fields",
	customerId?: number,
	customerUpdateId?: number
};
	/** aggregate max on columns */
["vectric_sales_customerupdates_max_fields"]: {
	__typename: "vectric_sales_customerupdates_max_fields",
	changedBy?: string,
	customerId?: GraphQLTypes["bigint"],
	customerUpdateId?: GraphQLTypes["bigint"],
	dateChanged?: GraphQLTypes["timestamptz"],
	fieldName?: string,
	newValue?: string,
	oldValue?: string
};
	/** aggregate min on columns */
["vectric_sales_customerupdates_min_fields"]: {
	__typename: "vectric_sales_customerupdates_min_fields",
	changedBy?: string,
	customerId?: GraphQLTypes["bigint"],
	customerUpdateId?: GraphQLTypes["bigint"],
	dateChanged?: GraphQLTypes["timestamptz"],
	fieldName?: string,
	newValue?: string,
	oldValue?: string
};
	/** response of any mutation on the table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_mutation_response"]: {
	__typename: "vectric_sales_customerupdates_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_sales_customerupdates"]>
};
	/** aggregate stddev on columns */
["vectric_sales_customerupdates_stddev_fields"]: {
	__typename: "vectric_sales_customerupdates_stddev_fields",
	customerId?: number,
	customerUpdateId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_sales_customerupdates_stddev_pop_fields"]: {
	__typename: "vectric_sales_customerupdates_stddev_pop_fields",
	customerId?: number,
	customerUpdateId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_sales_customerupdates_stddev_samp_fields"]: {
	__typename: "vectric_sales_customerupdates_stddev_samp_fields",
	customerId?: number,
	customerUpdateId?: number
};
	/** aggregate sum on columns */
["vectric_sales_customerupdates_sum_fields"]: {
	__typename: "vectric_sales_customerupdates_sum_fields",
	customerId?: GraphQLTypes["bigint"],
	customerUpdateId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_sales_customerupdates_var_pop_fields"]: {
	__typename: "vectric_sales_customerupdates_var_pop_fields",
	customerId?: number,
	customerUpdateId?: number
};
	/** aggregate var_samp on columns */
["vectric_sales_customerupdates_var_samp_fields"]: {
	__typename: "vectric_sales_customerupdates_var_samp_fields",
	customerId?: number,
	customerUpdateId?: number
};
	/** aggregate variance on columns */
["vectric_sales_customerupdates_variance_fields"]: {
	__typename: "vectric_sales_customerupdates_variance_fields",
	customerId?: number,
	customerUpdateId?: number
};
	/** columns and relationships of "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles"]: {
	__typename: "vectric_sales_oem_bundles",
	allocatedBy?: string,
	allocationBatch?: string,
	/** An object relationship */
	allocationType: GraphQLTypes["vectric_oem_licence_allocation_type"],
	allocationTypeId: GraphQLTypes["bigint"],
	bundleId: string,
	dateAllocated?: GraphQLTypes["timestamptz"],
	dateCreated: GraphQLTypes["timestamptz"],
	/** An array relationship */
	licences: Array<GraphQLTypes["vectric_sales_oemlicences"]>,
	/** An aggregate relationship */
	licences_aggregate: GraphQLTypes["vectric_sales_oemlicences_aggregate"],
	notes?: string,
	/** An object relationship */
	partner?: GraphQLTypes["vectric_oem_partners"],
	partnerId: GraphQLTypes["bigint"],
	product: GraphQLTypes["bigint"],
	productDisplayName?: string,
	registrationDate?: GraphQLTypes["timestamptz"],
	typeDisplayName?: string
};
	/** aggregated selection of "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_aggregate"]: {
	__typename: "vectric_sales_oem_bundles_aggregate",
	aggregate?: GraphQLTypes["vectric_sales_oem_bundles_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_sales_oem_bundles"]>
};
	/** aggregate fields of "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_aggregate_fields"]: {
	__typename: "vectric_sales_oem_bundles_aggregate_fields",
	avg?: GraphQLTypes["vectric_sales_oem_bundles_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_sales_oem_bundles_max_fields"],
	min?: GraphQLTypes["vectric_sales_oem_bundles_min_fields"],
	stddev?: GraphQLTypes["vectric_sales_oem_bundles_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_sales_oem_bundles_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_sales_oem_bundles_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_sales_oem_bundles_sum_fields"],
	var_pop?: GraphQLTypes["vectric_sales_oem_bundles_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_sales_oem_bundles_var_samp_fields"],
	variance?: GraphQLTypes["vectric_sales_oem_bundles_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_sales_oem_bundles_avg_fields"]: {
	__typename: "vectric_sales_oem_bundles_avg_fields",
	allocationTypeId?: number,
	partnerId?: number,
	product?: number
};
	/** aggregate max on columns */
["vectric_sales_oem_bundles_max_fields"]: {
	__typename: "vectric_sales_oem_bundles_max_fields",
	allocatedBy?: string,
	allocationBatch?: string,
	allocationTypeId?: GraphQLTypes["bigint"],
	bundleId?: string,
	dateAllocated?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	notes?: string,
	partnerId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["bigint"],
	productDisplayName?: string,
	registrationDate?: GraphQLTypes["timestamptz"],
	typeDisplayName?: string
};
	/** aggregate min on columns */
["vectric_sales_oem_bundles_min_fields"]: {
	__typename: "vectric_sales_oem_bundles_min_fields",
	allocatedBy?: string,
	allocationBatch?: string,
	allocationTypeId?: GraphQLTypes["bigint"],
	bundleId?: string,
	dateAllocated?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	notes?: string,
	partnerId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["bigint"],
	productDisplayName?: string,
	registrationDate?: GraphQLTypes["timestamptz"],
	typeDisplayName?: string
};
	/** response of any mutation on the table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_mutation_response"]: {
	__typename: "vectric_sales_oem_bundles_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_sales_oem_bundles"]>
};
	/** aggregate stddev on columns */
["vectric_sales_oem_bundles_stddev_fields"]: {
	__typename: "vectric_sales_oem_bundles_stddev_fields",
	allocationTypeId?: number,
	partnerId?: number,
	product?: number
};
	/** aggregate stddev_pop on columns */
["vectric_sales_oem_bundles_stddev_pop_fields"]: {
	__typename: "vectric_sales_oem_bundles_stddev_pop_fields",
	allocationTypeId?: number,
	partnerId?: number,
	product?: number
};
	/** aggregate stddev_samp on columns */
["vectric_sales_oem_bundles_stddev_samp_fields"]: {
	__typename: "vectric_sales_oem_bundles_stddev_samp_fields",
	allocationTypeId?: number,
	partnerId?: number,
	product?: number
};
	/** aggregate sum on columns */
["vectric_sales_oem_bundles_sum_fields"]: {
	__typename: "vectric_sales_oem_bundles_sum_fields",
	allocationTypeId?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_sales_oem_bundles_var_pop_fields"]: {
	__typename: "vectric_sales_oem_bundles_var_pop_fields",
	allocationTypeId?: number,
	partnerId?: number,
	product?: number
};
	/** aggregate var_samp on columns */
["vectric_sales_oem_bundles_var_samp_fields"]: {
	__typename: "vectric_sales_oem_bundles_var_samp_fields",
	allocationTypeId?: number,
	partnerId?: number,
	product?: number
};
	/** aggregate variance on columns */
["vectric_sales_oem_bundles_variance_fields"]: {
	__typename: "vectric_sales_oem_bundles_variance_fields",
	allocationTypeId?: number,
	partnerId?: number,
	product?: number
};
	/** columns and relationships of "vectric.sales_oemlicences" */
["vectric_sales_oemlicences"]: {
	__typename: "vectric_sales_oemlicences",
	allocatedBy?: string,
	/** An object relationship */
	allocationType: GraphQLTypes["vectric_oem_licence_allocation_type"],
	allocationTypeId: GraphQLTypes["bigint"],
	dateAllocated?: GraphQLTypes["timestamptz"],
	dateCreated: GraphQLTypes["timestamptz"],
	disabled?: boolean,
	licenceCode: string,
	/** An array relationship */
	licenceLogRows: Array<GraphQLTypes["vectric_licence_log"]>,
	/** An aggregate relationship */
	licenceLogRows_aggregate: GraphQLTypes["vectric_licence_log_aggregate"],
	mediaProvided?: boolean,
	oemBundleId: string,
	oemLicenceId: GraphQLTypes["bigint"],
	orderItemProductId?: GraphQLTypes["bigint"],
	/** An object relationship */
	partner?: GraphQLTypes["vectric_oem_partners"],
	partnerId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"],
	productName: string,
	registrationDate?: GraphQLTypes["timestamptz"],
	saleItemId?: GraphQLTypes["bigint"],
	version: GraphQLTypes["smallint"]
};
	/** aggregated selection of "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_aggregate"]: {
	__typename: "vectric_sales_oemlicences_aggregate",
	aggregate?: GraphQLTypes["vectric_sales_oemlicences_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_sales_oemlicences"]>
};
	/** aggregate fields of "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_aggregate_fields"]: {
	__typename: "vectric_sales_oemlicences_aggregate_fields",
	avg?: GraphQLTypes["vectric_sales_oemlicences_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_sales_oemlicences_max_fields"],
	min?: GraphQLTypes["vectric_sales_oemlicences_min_fields"],
	stddev?: GraphQLTypes["vectric_sales_oemlicences_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_sales_oemlicences_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_sales_oemlicences_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_sales_oemlicences_sum_fields"],
	var_pop?: GraphQLTypes["vectric_sales_oemlicences_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_sales_oemlicences_var_samp_fields"],
	variance?: GraphQLTypes["vectric_sales_oemlicences_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_sales_oemlicences_avg_fields"]: {
	__typename: "vectric_sales_oemlicences_avg_fields",
	allocationTypeId?: number,
	oemLicenceId?: number,
	orderItemProductId?: number,
	partnerId?: number,
	productId?: number,
	saleItemId?: number,
	version?: number
};
	/** aggregate max on columns */
["vectric_sales_oemlicences_max_fields"]: {
	__typename: "vectric_sales_oemlicences_max_fields",
	allocatedBy?: string,
	allocationTypeId?: GraphQLTypes["bigint"],
	dateAllocated?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	licenceCode?: string,
	oemBundleId?: string,
	oemLicenceId?: GraphQLTypes["bigint"],
	orderItemProductId?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"],
	productName?: string,
	registrationDate?: GraphQLTypes["timestamptz"],
	saleItemId?: GraphQLTypes["bigint"],
	version?: GraphQLTypes["smallint"]
};
	/** aggregate min on columns */
["vectric_sales_oemlicences_min_fields"]: {
	__typename: "vectric_sales_oemlicences_min_fields",
	allocatedBy?: string,
	allocationTypeId?: GraphQLTypes["bigint"],
	dateAllocated?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	licenceCode?: string,
	oemBundleId?: string,
	oemLicenceId?: GraphQLTypes["bigint"],
	orderItemProductId?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"],
	productName?: string,
	registrationDate?: GraphQLTypes["timestamptz"],
	saleItemId?: GraphQLTypes["bigint"],
	version?: GraphQLTypes["smallint"]
};
	/** response of any mutation on the table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_mutation_response"]: {
	__typename: "vectric_sales_oemlicences_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_sales_oemlicences"]>
};
	/** aggregate stddev on columns */
["vectric_sales_oemlicences_stddev_fields"]: {
	__typename: "vectric_sales_oemlicences_stddev_fields",
	allocationTypeId?: number,
	oemLicenceId?: number,
	orderItemProductId?: number,
	partnerId?: number,
	productId?: number,
	saleItemId?: number,
	version?: number
};
	/** aggregate stddev_pop on columns */
["vectric_sales_oemlicences_stddev_pop_fields"]: {
	__typename: "vectric_sales_oemlicences_stddev_pop_fields",
	allocationTypeId?: number,
	oemLicenceId?: number,
	orderItemProductId?: number,
	partnerId?: number,
	productId?: number,
	saleItemId?: number,
	version?: number
};
	/** aggregate stddev_samp on columns */
["vectric_sales_oemlicences_stddev_samp_fields"]: {
	__typename: "vectric_sales_oemlicences_stddev_samp_fields",
	allocationTypeId?: number,
	oemLicenceId?: number,
	orderItemProductId?: number,
	partnerId?: number,
	productId?: number,
	saleItemId?: number,
	version?: number
};
	/** aggregate sum on columns */
["vectric_sales_oemlicences_sum_fields"]: {
	__typename: "vectric_sales_oemlicences_sum_fields",
	allocationTypeId?: GraphQLTypes["bigint"],
	oemLicenceId?: GraphQLTypes["bigint"],
	orderItemProductId?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"],
	saleItemId?: GraphQLTypes["bigint"],
	version?: GraphQLTypes["smallint"]
};
	/** aggregate var_pop on columns */
["vectric_sales_oemlicences_var_pop_fields"]: {
	__typename: "vectric_sales_oemlicences_var_pop_fields",
	allocationTypeId?: number,
	oemLicenceId?: number,
	orderItemProductId?: number,
	partnerId?: number,
	productId?: number,
	saleItemId?: number,
	version?: number
};
	/** aggregate var_samp on columns */
["vectric_sales_oemlicences_var_samp_fields"]: {
	__typename: "vectric_sales_oemlicences_var_samp_fields",
	allocationTypeId?: number,
	oemLicenceId?: number,
	orderItemProductId?: number,
	partnerId?: number,
	productId?: number,
	saleItemId?: number,
	version?: number
};
	/** aggregate variance on columns */
["vectric_sales_oemlicences_variance_fields"]: {
	__typename: "vectric_sales_oemlicences_variance_fields",
	allocationTypeId?: number,
	oemLicenceId?: number,
	orderItemProductId?: number,
	partnerId?: number,
	productId?: number,
	saleItemId?: number,
	version?: number
};
	/** columns and relationships of "vectric.sales_orders" */
["vectric_sales_orders"]: {
	__typename: "vectric_sales_orders",
	amendedby?: string,
	createdby?: string,
	customerId: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateamended?: GraphQLTypes["timestamptz"],
	mergedfromcustomerid?: GraphQLTypes["bigint"],
	orderDate: GraphQLTypes["timestamptz"],
	orderId: string,
	purchaser?: string,
	registrationemailsent?: GraphQLTypes["date"],
	salenote?: string,
	/** An array relationship */
	salesItems: Array<GraphQLTypes["vectric_sales_salesitems"]>,
	/** An aggregate relationship */
	salesItems_aggregate: GraphQLTypes["vectric_sales_salesitems_aggregate"],
	/** An object relationship */
	sales_customer: GraphQLTypes["vectric_sales_customers"],
	salesdetails?: string,
	salesummary?: string,
	validationcomments?: string,
	veccode?: string
};
	/** aggregated selection of "vectric.sales_orders" */
["vectric_sales_orders_aggregate"]: {
	__typename: "vectric_sales_orders_aggregate",
	aggregate?: GraphQLTypes["vectric_sales_orders_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_sales_orders"]>
};
	/** aggregate fields of "vectric.sales_orders" */
["vectric_sales_orders_aggregate_fields"]: {
	__typename: "vectric_sales_orders_aggregate_fields",
	avg?: GraphQLTypes["vectric_sales_orders_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_sales_orders_max_fields"],
	min?: GraphQLTypes["vectric_sales_orders_min_fields"],
	stddev?: GraphQLTypes["vectric_sales_orders_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_sales_orders_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_sales_orders_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_sales_orders_sum_fields"],
	var_pop?: GraphQLTypes["vectric_sales_orders_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_sales_orders_var_samp_fields"],
	variance?: GraphQLTypes["vectric_sales_orders_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_sales_orders_avg_fields"]: {
	__typename: "vectric_sales_orders_avg_fields",
	customerId?: number,
	mergedfromcustomerid?: number
};
	/** aggregate max on columns */
["vectric_sales_orders_max_fields"]: {
	__typename: "vectric_sales_orders_max_fields",
	amendedby?: string,
	createdby?: string,
	customerId?: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateamended?: GraphQLTypes["timestamptz"],
	mergedfromcustomerid?: GraphQLTypes["bigint"],
	orderDate?: GraphQLTypes["timestamptz"],
	orderId?: string,
	purchaser?: string,
	registrationemailsent?: GraphQLTypes["date"],
	salenote?: string,
	salesdetails?: string,
	salesummary?: string,
	validationcomments?: string,
	veccode?: string
};
	/** aggregate min on columns */
["vectric_sales_orders_min_fields"]: {
	__typename: "vectric_sales_orders_min_fields",
	amendedby?: string,
	createdby?: string,
	customerId?: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateamended?: GraphQLTypes["timestamptz"],
	mergedfromcustomerid?: GraphQLTypes["bigint"],
	orderDate?: GraphQLTypes["timestamptz"],
	orderId?: string,
	purchaser?: string,
	registrationemailsent?: GraphQLTypes["date"],
	salenote?: string,
	salesdetails?: string,
	salesummary?: string,
	validationcomments?: string,
	veccode?: string
};
	/** response of any mutation on the table "vectric.sales_orders" */
["vectric_sales_orders_mutation_response"]: {
	__typename: "vectric_sales_orders_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_sales_orders"]>
};
	/** aggregate stddev on columns */
["vectric_sales_orders_stddev_fields"]: {
	__typename: "vectric_sales_orders_stddev_fields",
	customerId?: number,
	mergedfromcustomerid?: number
};
	/** aggregate stddev_pop on columns */
["vectric_sales_orders_stddev_pop_fields"]: {
	__typename: "vectric_sales_orders_stddev_pop_fields",
	customerId?: number,
	mergedfromcustomerid?: number
};
	/** aggregate stddev_samp on columns */
["vectric_sales_orders_stddev_samp_fields"]: {
	__typename: "vectric_sales_orders_stddev_samp_fields",
	customerId?: number,
	mergedfromcustomerid?: number
};
	/** aggregate sum on columns */
["vectric_sales_orders_sum_fields"]: {
	__typename: "vectric_sales_orders_sum_fields",
	customerId?: GraphQLTypes["bigint"],
	mergedfromcustomerid?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_sales_orders_var_pop_fields"]: {
	__typename: "vectric_sales_orders_var_pop_fields",
	customerId?: number,
	mergedfromcustomerid?: number
};
	/** aggregate var_samp on columns */
["vectric_sales_orders_var_samp_fields"]: {
	__typename: "vectric_sales_orders_var_samp_fields",
	customerId?: number,
	mergedfromcustomerid?: number
};
	/** aggregate variance on columns */
["vectric_sales_orders_variance_fields"]: {
	__typename: "vectric_sales_orders_variance_fields",
	customerId?: number,
	mergedfromcustomerid?: number
};
	/** columns and relationships of "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products"]: {
	__typename: "vectric_sales_salesitem_products",
	/** An array relationship */
	addOns: Array<GraphQLTypes["vectric_sales_salesitem_products"]>,
	/** An aggregate relationship */
	addOns_aggregate: GraphQLTypes["vectric_sales_salesitem_products_aggregate"],
	amended?: GraphQLTypes["timestamptz"],
	amendedby?: string,
	emailsubject?: string,
	/** An object relationship */
	enhanceSalesItemProduct?: GraphQLTypes["vectric_sales_salesitem_products"],
	/** An array relationship */
	enhancementTokens: Array<GraphQLTypes["vectric_enhancement_tokens"]>,
	/** An aggregate relationship */
	enhancementTokens_aggregate: GraphQLTypes["vectric_enhancement_tokens_aggregate"],
	enhances?: GraphQLTypes["bigint"],
	/** An array relationship */
	freeClipartTokens: Array<GraphQLTypes["vectric_free_clipart_tokens"]>,
	/** An aggregate relationship */
	freeClipartTokens_aggregate: GraphQLTypes["vectric_free_clipart_tokens_aggregate"],
	licenceCode: string,
	licenceIdAsDisplay: boolean,
	licenceType?: string,
	oembundleid?: string,
	/** An object relationship */
	product: GraphQLTypes["vectric_products_products"],
	productId: GraphQLTypes["bigint"],
	registeredUsername: string,
	resentdate?: GraphQLTypes["timestamptz"],
	/** An object relationship */
	salesItem: GraphQLTypes["vectric_sales_salesitems"],
	salesItemProductId: GraphQLTypes["bigint"],
	/** An object relationship */
	salesItemProductStatus?: GraphQLTypes["vectric_sales_salesitemproduct_status"],
	salesitemid: GraphQLTypes["bigint"],
	status: GraphQLTypes["bigint"],
	transfersalesitem?: GraphQLTypes["bigint"],
	/** An array relationship */
	upgradeTokens: Array<GraphQLTypes["vectric_upgrade_tokens"]>,
	/** An aggregate relationship */
	upgradeTokens_aggregate: GraphQLTypes["vectric_upgrade_tokens_aggregate"],
	upgradesalesitem?: GraphQLTypes["bigint"],
	versioncodeid?: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_aggregate"]: {
	__typename: "vectric_sales_salesitem_products_aggregate",
	aggregate?: GraphQLTypes["vectric_sales_salesitem_products_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_sales_salesitem_products"]>
};
	/** aggregate fields of "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_aggregate_fields"]: {
	__typename: "vectric_sales_salesitem_products_aggregate_fields",
	avg?: GraphQLTypes["vectric_sales_salesitem_products_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_sales_salesitem_products_max_fields"],
	min?: GraphQLTypes["vectric_sales_salesitem_products_min_fields"],
	stddev?: GraphQLTypes["vectric_sales_salesitem_products_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_sales_salesitem_products_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_sales_salesitem_products_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_sales_salesitem_products_sum_fields"],
	var_pop?: GraphQLTypes["vectric_sales_salesitem_products_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_sales_salesitem_products_var_samp_fields"],
	variance?: GraphQLTypes["vectric_sales_salesitem_products_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_sales_salesitem_products_avg_fields"]: {
	__typename: "vectric_sales_salesitem_products_avg_fields",
	enhances?: number,
	productId?: number,
	salesItemProductId?: number,
	salesitemid?: number,
	status?: number,
	transfersalesitem?: number,
	upgradesalesitem?: number,
	versioncodeid?: number
};
	/** aggregate max on columns */
["vectric_sales_salesitem_products_max_fields"]: {
	__typename: "vectric_sales_salesitem_products_max_fields",
	amended?: GraphQLTypes["timestamptz"],
	amendedby?: string,
	emailsubject?: string,
	enhances?: GraphQLTypes["bigint"],
	licenceCode?: string,
	licenceType?: string,
	oembundleid?: string,
	productId?: GraphQLTypes["bigint"],
	registeredUsername?: string,
	resentdate?: GraphQLTypes["timestamptz"],
	salesItemProductId?: GraphQLTypes["bigint"],
	salesitemid?: GraphQLTypes["bigint"],
	status?: GraphQLTypes["bigint"],
	transfersalesitem?: GraphQLTypes["bigint"],
	upgradesalesitem?: GraphQLTypes["bigint"],
	versioncodeid?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_sales_salesitem_products_min_fields"]: {
	__typename: "vectric_sales_salesitem_products_min_fields",
	amended?: GraphQLTypes["timestamptz"],
	amendedby?: string,
	emailsubject?: string,
	enhances?: GraphQLTypes["bigint"],
	licenceCode?: string,
	licenceType?: string,
	oembundleid?: string,
	productId?: GraphQLTypes["bigint"],
	registeredUsername?: string,
	resentdate?: GraphQLTypes["timestamptz"],
	salesItemProductId?: GraphQLTypes["bigint"],
	salesitemid?: GraphQLTypes["bigint"],
	status?: GraphQLTypes["bigint"],
	transfersalesitem?: GraphQLTypes["bigint"],
	upgradesalesitem?: GraphQLTypes["bigint"],
	versioncodeid?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_mutation_response"]: {
	__typename: "vectric_sales_salesitem_products_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_sales_salesitem_products"]>
};
	/** aggregate stddev on columns */
["vectric_sales_salesitem_products_stddev_fields"]: {
	__typename: "vectric_sales_salesitem_products_stddev_fields",
	enhances?: number,
	productId?: number,
	salesItemProductId?: number,
	salesitemid?: number,
	status?: number,
	transfersalesitem?: number,
	upgradesalesitem?: number,
	versioncodeid?: number
};
	/** aggregate stddev_pop on columns */
["vectric_sales_salesitem_products_stddev_pop_fields"]: {
	__typename: "vectric_sales_salesitem_products_stddev_pop_fields",
	enhances?: number,
	productId?: number,
	salesItemProductId?: number,
	salesitemid?: number,
	status?: number,
	transfersalesitem?: number,
	upgradesalesitem?: number,
	versioncodeid?: number
};
	/** aggregate stddev_samp on columns */
["vectric_sales_salesitem_products_stddev_samp_fields"]: {
	__typename: "vectric_sales_salesitem_products_stddev_samp_fields",
	enhances?: number,
	productId?: number,
	salesItemProductId?: number,
	salesitemid?: number,
	status?: number,
	transfersalesitem?: number,
	upgradesalesitem?: number,
	versioncodeid?: number
};
	/** aggregate sum on columns */
["vectric_sales_salesitem_products_sum_fields"]: {
	__typename: "vectric_sales_salesitem_products_sum_fields",
	enhances?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"],
	salesItemProductId?: GraphQLTypes["bigint"],
	salesitemid?: GraphQLTypes["bigint"],
	status?: GraphQLTypes["bigint"],
	transfersalesitem?: GraphQLTypes["bigint"],
	upgradesalesitem?: GraphQLTypes["bigint"],
	versioncodeid?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_sales_salesitem_products_var_pop_fields"]: {
	__typename: "vectric_sales_salesitem_products_var_pop_fields",
	enhances?: number,
	productId?: number,
	salesItemProductId?: number,
	salesitemid?: number,
	status?: number,
	transfersalesitem?: number,
	upgradesalesitem?: number,
	versioncodeid?: number
};
	/** aggregate var_samp on columns */
["vectric_sales_salesitem_products_var_samp_fields"]: {
	__typename: "vectric_sales_salesitem_products_var_samp_fields",
	enhances?: number,
	productId?: number,
	salesItemProductId?: number,
	salesitemid?: number,
	status?: number,
	transfersalesitem?: number,
	upgradesalesitem?: number,
	versioncodeid?: number
};
	/** aggregate variance on columns */
["vectric_sales_salesitem_products_variance_fields"]: {
	__typename: "vectric_sales_salesitem_products_variance_fields",
	enhances?: number,
	productId?: number,
	salesItemProductId?: number,
	salesitemid?: number,
	status?: number,
	transfersalesitem?: number,
	upgradesalesitem?: number,
	versioncodeid?: number
};
	/** columns and relationships of "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status"]: {
	__typename: "vectric_sales_salesitemproduct_status",
	status: string,
	statusid: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_aggregate"]: {
	__typename: "vectric_sales_salesitemproduct_status_aggregate",
	aggregate?: GraphQLTypes["vectric_sales_salesitemproduct_status_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_sales_salesitemproduct_status"]>
};
	/** aggregate fields of "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_aggregate_fields"]: {
	__typename: "vectric_sales_salesitemproduct_status_aggregate_fields",
	avg?: GraphQLTypes["vectric_sales_salesitemproduct_status_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_sales_salesitemproduct_status_max_fields"],
	min?: GraphQLTypes["vectric_sales_salesitemproduct_status_min_fields"],
	stddev?: GraphQLTypes["vectric_sales_salesitemproduct_status_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_sales_salesitemproduct_status_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_sales_salesitemproduct_status_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_sales_salesitemproduct_status_sum_fields"],
	var_pop?: GraphQLTypes["vectric_sales_salesitemproduct_status_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_sales_salesitemproduct_status_var_samp_fields"],
	variance?: GraphQLTypes["vectric_sales_salesitemproduct_status_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_sales_salesitemproduct_status_avg_fields"]: {
	__typename: "vectric_sales_salesitemproduct_status_avg_fields",
	statusid?: number
};
	/** aggregate max on columns */
["vectric_sales_salesitemproduct_status_max_fields"]: {
	__typename: "vectric_sales_salesitemproduct_status_max_fields",
	status?: string,
	statusid?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_sales_salesitemproduct_status_min_fields"]: {
	__typename: "vectric_sales_salesitemproduct_status_min_fields",
	status?: string,
	statusid?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_mutation_response"]: {
	__typename: "vectric_sales_salesitemproduct_status_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_sales_salesitemproduct_status"]>
};
	/** aggregate stddev on columns */
["vectric_sales_salesitemproduct_status_stddev_fields"]: {
	__typename: "vectric_sales_salesitemproduct_status_stddev_fields",
	statusid?: number
};
	/** aggregate stddev_pop on columns */
["vectric_sales_salesitemproduct_status_stddev_pop_fields"]: {
	__typename: "vectric_sales_salesitemproduct_status_stddev_pop_fields",
	statusid?: number
};
	/** aggregate stddev_samp on columns */
["vectric_sales_salesitemproduct_status_stddev_samp_fields"]: {
	__typename: "vectric_sales_salesitemproduct_status_stddev_samp_fields",
	statusid?: number
};
	/** aggregate sum on columns */
["vectric_sales_salesitemproduct_status_sum_fields"]: {
	__typename: "vectric_sales_salesitemproduct_status_sum_fields",
	statusid?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_sales_salesitemproduct_status_var_pop_fields"]: {
	__typename: "vectric_sales_salesitemproduct_status_var_pop_fields",
	statusid?: number
};
	/** aggregate var_samp on columns */
["vectric_sales_salesitemproduct_status_var_samp_fields"]: {
	__typename: "vectric_sales_salesitemproduct_status_var_samp_fields",
	statusid?: number
};
	/** aggregate variance on columns */
["vectric_sales_salesitemproduct_status_variance_fields"]: {
	__typename: "vectric_sales_salesitemproduct_status_variance_fields",
	statusid?: number
};
	/** columns and relationships of "vectric.sales_salesitems" */
["vectric_sales_salesitems"]: {
	__typename: "vectric_sales_salesitems",
	amendedby?: string,
	/** An object relationship */
	customerSale?: GraphQLTypes["vectric_customer_sales"],
	dateamended?: GraphQLTypes["timestamptz"],
	orderid: string,
	/** An object relationship */
	product: GraphQLTypes["vectric_products_products"],
	productid: GraphQLTypes["bigint"],
	/** An array relationship */
	salesItemProducts: Array<GraphQLTypes["vectric_sales_salesitem_products"]>,
	/** An aggregate relationship */
	salesItemProducts_aggregate: GraphQLTypes["vectric_sales_salesitem_products_aggregate"],
	/** An object relationship */
	sales_order: GraphQLTypes["vectric_sales_orders"],
	salesitemid: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.sales_salesitems" */
["vectric_sales_salesitems_aggregate"]: {
	__typename: "vectric_sales_salesitems_aggregate",
	aggregate?: GraphQLTypes["vectric_sales_salesitems_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_sales_salesitems"]>
};
	/** aggregate fields of "vectric.sales_salesitems" */
["vectric_sales_salesitems_aggregate_fields"]: {
	__typename: "vectric_sales_salesitems_aggregate_fields",
	avg?: GraphQLTypes["vectric_sales_salesitems_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_sales_salesitems_max_fields"],
	min?: GraphQLTypes["vectric_sales_salesitems_min_fields"],
	stddev?: GraphQLTypes["vectric_sales_salesitems_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_sales_salesitems_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_sales_salesitems_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_sales_salesitems_sum_fields"],
	var_pop?: GraphQLTypes["vectric_sales_salesitems_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_sales_salesitems_var_samp_fields"],
	variance?: GraphQLTypes["vectric_sales_salesitems_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_sales_salesitems_avg_fields"]: {
	__typename: "vectric_sales_salesitems_avg_fields",
	productid?: number,
	salesitemid?: number
};
	/** aggregate max on columns */
["vectric_sales_salesitems_max_fields"]: {
	__typename: "vectric_sales_salesitems_max_fields",
	amendedby?: string,
	dateamended?: GraphQLTypes["timestamptz"],
	orderid?: string,
	productid?: GraphQLTypes["bigint"],
	salesitemid?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_sales_salesitems_min_fields"]: {
	__typename: "vectric_sales_salesitems_min_fields",
	amendedby?: string,
	dateamended?: GraphQLTypes["timestamptz"],
	orderid?: string,
	productid?: GraphQLTypes["bigint"],
	salesitemid?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.sales_salesitems" */
["vectric_sales_salesitems_mutation_response"]: {
	__typename: "vectric_sales_salesitems_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_sales_salesitems"]>
};
	/** aggregate stddev on columns */
["vectric_sales_salesitems_stddev_fields"]: {
	__typename: "vectric_sales_salesitems_stddev_fields",
	productid?: number,
	salesitemid?: number
};
	/** aggregate stddev_pop on columns */
["vectric_sales_salesitems_stddev_pop_fields"]: {
	__typename: "vectric_sales_salesitems_stddev_pop_fields",
	productid?: number,
	salesitemid?: number
};
	/** aggregate stddev_samp on columns */
["vectric_sales_salesitems_stddev_samp_fields"]: {
	__typename: "vectric_sales_salesitems_stddev_samp_fields",
	productid?: number,
	salesitemid?: number
};
	/** aggregate sum on columns */
["vectric_sales_salesitems_sum_fields"]: {
	__typename: "vectric_sales_salesitems_sum_fields",
	productid?: GraphQLTypes["bigint"],
	salesitemid?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_sales_salesitems_var_pop_fields"]: {
	__typename: "vectric_sales_salesitems_var_pop_fields",
	productid?: number,
	salesitemid?: number
};
	/** aggregate var_samp on columns */
["vectric_sales_salesitems_var_samp_fields"]: {
	__typename: "vectric_sales_salesitems_var_samp_fields",
	productid?: number,
	salesitemid?: number
};
	/** aggregate variance on columns */
["vectric_sales_salesitems_variance_fields"]: {
	__typename: "vectric_sales_salesitems_variance_fields",
	productid?: number,
	salesitemid?: number
};
	/** columns and relationships of "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate"]: {
	__typename: "vectric_sales_velocitytemplate",
	lang?: string,
	/** An object relationship */
	languageCode?: GraphQLTypes["vectric_language_codes"],
	sender: string,
	signedBy: string,
	subject: string,
	template: string,
	templateName: string,
	templateTimestamp: GraphQLTypes["timestamptz"]
};
	/** aggregated selection of "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_aggregate"]: {
	__typename: "vectric_sales_velocitytemplate_aggregate",
	aggregate?: GraphQLTypes["vectric_sales_velocitytemplate_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_sales_velocitytemplate"]>
};
	/** aggregate fields of "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_aggregate_fields"]: {
	__typename: "vectric_sales_velocitytemplate_aggregate_fields",
	count: number,
	max?: GraphQLTypes["vectric_sales_velocitytemplate_max_fields"],
	min?: GraphQLTypes["vectric_sales_velocitytemplate_min_fields"]
};
	/** aggregate max on columns */
["vectric_sales_velocitytemplate_max_fields"]: {
	__typename: "vectric_sales_velocitytemplate_max_fields",
	lang?: string,
	sender?: string,
	signedBy?: string,
	subject?: string,
	template?: string,
	templateName?: string,
	templateTimestamp?: GraphQLTypes["timestamptz"]
};
	/** aggregate min on columns */
["vectric_sales_velocitytemplate_min_fields"]: {
	__typename: "vectric_sales_velocitytemplate_min_fields",
	lang?: string,
	sender?: string,
	signedBy?: string,
	subject?: string,
	template?: string,
	templateName?: string,
	templateTimestamp?: GraphQLTypes["timestamptz"]
};
	/** response of any mutation on the table "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_mutation_response"]: {
	__typename: "vectric_sales_velocitytemplate_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_sales_velocitytemplate"]>
};
	/** columns and relationships of "vectric.scheduled_emails" */
["vectric_scheduled_emails"]: {
	__typename: "vectric_scheduled_emails",
	createdOn: GraphQLTypes["timestamp"],
	customerId?: GraphQLTypes["bigint"],
	id: number,
	processed?: boolean,
	processedOn?: GraphQLTypes["timestamp"],
	sendTo: string,
	templateId: string,
	variables?: string
};
	/** aggregated selection of "vectric.scheduled_emails" */
["vectric_scheduled_emails_aggregate"]: {
	__typename: "vectric_scheduled_emails_aggregate",
	aggregate?: GraphQLTypes["vectric_scheduled_emails_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_scheduled_emails"]>
};
	/** aggregate fields of "vectric.scheduled_emails" */
["vectric_scheduled_emails_aggregate_fields"]: {
	__typename: "vectric_scheduled_emails_aggregate_fields",
	avg?: GraphQLTypes["vectric_scheduled_emails_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_scheduled_emails_max_fields"],
	min?: GraphQLTypes["vectric_scheduled_emails_min_fields"],
	stddev?: GraphQLTypes["vectric_scheduled_emails_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_scheduled_emails_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_scheduled_emails_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_scheduled_emails_sum_fields"],
	var_pop?: GraphQLTypes["vectric_scheduled_emails_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_scheduled_emails_var_samp_fields"],
	variance?: GraphQLTypes["vectric_scheduled_emails_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_scheduled_emails_avg_fields"]: {
	__typename: "vectric_scheduled_emails_avg_fields",
	customerId?: number,
	id?: number
};
	/** aggregate max on columns */
["vectric_scheduled_emails_max_fields"]: {
	__typename: "vectric_scheduled_emails_max_fields",
	createdOn?: GraphQLTypes["timestamp"],
	customerId?: GraphQLTypes["bigint"],
	id?: number,
	processedOn?: GraphQLTypes["timestamp"],
	sendTo?: string,
	templateId?: string,
	variables?: string
};
	/** aggregate min on columns */
["vectric_scheduled_emails_min_fields"]: {
	__typename: "vectric_scheduled_emails_min_fields",
	createdOn?: GraphQLTypes["timestamp"],
	customerId?: GraphQLTypes["bigint"],
	id?: number,
	processedOn?: GraphQLTypes["timestamp"],
	sendTo?: string,
	templateId?: string,
	variables?: string
};
	/** response of any mutation on the table "vectric.scheduled_emails" */
["vectric_scheduled_emails_mutation_response"]: {
	__typename: "vectric_scheduled_emails_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_scheduled_emails"]>
};
	/** aggregate stddev on columns */
["vectric_scheduled_emails_stddev_fields"]: {
	__typename: "vectric_scheduled_emails_stddev_fields",
	customerId?: number,
	id?: number
};
	/** aggregate stddev_pop on columns */
["vectric_scheduled_emails_stddev_pop_fields"]: {
	__typename: "vectric_scheduled_emails_stddev_pop_fields",
	customerId?: number,
	id?: number
};
	/** aggregate stddev_samp on columns */
["vectric_scheduled_emails_stddev_samp_fields"]: {
	__typename: "vectric_scheduled_emails_stddev_samp_fields",
	customerId?: number,
	id?: number
};
	/** aggregate sum on columns */
["vectric_scheduled_emails_sum_fields"]: {
	__typename: "vectric_scheduled_emails_sum_fields",
	customerId?: GraphQLTypes["bigint"],
	id?: number
};
	/** aggregate var_pop on columns */
["vectric_scheduled_emails_var_pop_fields"]: {
	__typename: "vectric_scheduled_emails_var_pop_fields",
	customerId?: number,
	id?: number
};
	/** aggregate var_samp on columns */
["vectric_scheduled_emails_var_samp_fields"]: {
	__typename: "vectric_scheduled_emails_var_samp_fields",
	customerId?: number,
	id?: number
};
	/** aggregate variance on columns */
["vectric_scheduled_emails_variance_fields"]: {
	__typename: "vectric_scheduled_emails_variance_fields",
	customerId?: number,
	id?: number
};
	/** columns and relationships of "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens"]: {
	__typename: "vectric_security_emailverificationtokens",
	customerId?: GraphQLTypes["bigint"],
	expiryDate?: GraphQLTypes["timestamptz"],
	token: string,
	username: string
};
	/** aggregated selection of "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_aggregate"]: {
	__typename: "vectric_security_emailverificationtokens_aggregate",
	aggregate?: GraphQLTypes["vectric_security_emailverificationtokens_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_security_emailverificationtokens"]>
};
	/** aggregate fields of "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_aggregate_fields"]: {
	__typename: "vectric_security_emailverificationtokens_aggregate_fields",
	avg?: GraphQLTypes["vectric_security_emailverificationtokens_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_security_emailverificationtokens_max_fields"],
	min?: GraphQLTypes["vectric_security_emailverificationtokens_min_fields"],
	stddev?: GraphQLTypes["vectric_security_emailverificationtokens_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_security_emailverificationtokens_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_security_emailverificationtokens_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_security_emailverificationtokens_sum_fields"],
	var_pop?: GraphQLTypes["vectric_security_emailverificationtokens_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_security_emailverificationtokens_var_samp_fields"],
	variance?: GraphQLTypes["vectric_security_emailverificationtokens_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_security_emailverificationtokens_avg_fields"]: {
	__typename: "vectric_security_emailverificationtokens_avg_fields",
	customerId?: number
};
	/** aggregate max on columns */
["vectric_security_emailverificationtokens_max_fields"]: {
	__typename: "vectric_security_emailverificationtokens_max_fields",
	customerId?: GraphQLTypes["bigint"],
	expiryDate?: GraphQLTypes["timestamptz"],
	token?: string,
	username?: string
};
	/** aggregate min on columns */
["vectric_security_emailverificationtokens_min_fields"]: {
	__typename: "vectric_security_emailverificationtokens_min_fields",
	customerId?: GraphQLTypes["bigint"],
	expiryDate?: GraphQLTypes["timestamptz"],
	token?: string,
	username?: string
};
	/** response of any mutation on the table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_mutation_response"]: {
	__typename: "vectric_security_emailverificationtokens_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_security_emailverificationtokens"]>
};
	/** aggregate stddev on columns */
["vectric_security_emailverificationtokens_stddev_fields"]: {
	__typename: "vectric_security_emailverificationtokens_stddev_fields",
	customerId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_security_emailverificationtokens_stddev_pop_fields"]: {
	__typename: "vectric_security_emailverificationtokens_stddev_pop_fields",
	customerId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_security_emailverificationtokens_stddev_samp_fields"]: {
	__typename: "vectric_security_emailverificationtokens_stddev_samp_fields",
	customerId?: number
};
	/** aggregate sum on columns */
["vectric_security_emailverificationtokens_sum_fields"]: {
	__typename: "vectric_security_emailverificationtokens_sum_fields",
	customerId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_security_emailverificationtokens_var_pop_fields"]: {
	__typename: "vectric_security_emailverificationtokens_var_pop_fields",
	customerId?: number
};
	/** aggregate var_samp on columns */
["vectric_security_emailverificationtokens_var_samp_fields"]: {
	__typename: "vectric_security_emailverificationtokens_var_samp_fields",
	customerId?: number
};
	/** aggregate variance on columns */
["vectric_security_emailverificationtokens_variance_fields"]: {
	__typename: "vectric_security_emailverificationtokens_variance_fields",
	customerId?: number
};
	/** columns and relationships of "vectric.security_group_authorities" */
["vectric_security_group_authorities"]: {
	__typename: "vectric_security_group_authorities",
	authority: string,
	groupId: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.security_group_authorities" */
["vectric_security_group_authorities_aggregate"]: {
	__typename: "vectric_security_group_authorities_aggregate",
	aggregate?: GraphQLTypes["vectric_security_group_authorities_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_security_group_authorities"]>
};
	/** aggregate fields of "vectric.security_group_authorities" */
["vectric_security_group_authorities_aggregate_fields"]: {
	__typename: "vectric_security_group_authorities_aggregate_fields",
	avg?: GraphQLTypes["vectric_security_group_authorities_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_security_group_authorities_max_fields"],
	min?: GraphQLTypes["vectric_security_group_authorities_min_fields"],
	stddev?: GraphQLTypes["vectric_security_group_authorities_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_security_group_authorities_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_security_group_authorities_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_security_group_authorities_sum_fields"],
	var_pop?: GraphQLTypes["vectric_security_group_authorities_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_security_group_authorities_var_samp_fields"],
	variance?: GraphQLTypes["vectric_security_group_authorities_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_security_group_authorities_avg_fields"]: {
	__typename: "vectric_security_group_authorities_avg_fields",
	groupId?: number
};
	/** aggregate max on columns */
["vectric_security_group_authorities_max_fields"]: {
	__typename: "vectric_security_group_authorities_max_fields",
	authority?: string,
	groupId?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_security_group_authorities_min_fields"]: {
	__typename: "vectric_security_group_authorities_min_fields",
	authority?: string,
	groupId?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.security_group_authorities" */
["vectric_security_group_authorities_mutation_response"]: {
	__typename: "vectric_security_group_authorities_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_security_group_authorities"]>
};
	/** aggregate stddev on columns */
["vectric_security_group_authorities_stddev_fields"]: {
	__typename: "vectric_security_group_authorities_stddev_fields",
	groupId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_security_group_authorities_stddev_pop_fields"]: {
	__typename: "vectric_security_group_authorities_stddev_pop_fields",
	groupId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_security_group_authorities_stddev_samp_fields"]: {
	__typename: "vectric_security_group_authorities_stddev_samp_fields",
	groupId?: number
};
	/** aggregate sum on columns */
["vectric_security_group_authorities_sum_fields"]: {
	__typename: "vectric_security_group_authorities_sum_fields",
	groupId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_security_group_authorities_var_pop_fields"]: {
	__typename: "vectric_security_group_authorities_var_pop_fields",
	groupId?: number
};
	/** aggregate var_samp on columns */
["vectric_security_group_authorities_var_samp_fields"]: {
	__typename: "vectric_security_group_authorities_var_samp_fields",
	groupId?: number
};
	/** aggregate variance on columns */
["vectric_security_group_authorities_variance_fields"]: {
	__typename: "vectric_security_group_authorities_variance_fields",
	groupId?: number
};
	/** columns and relationships of "vectric.security_group_members" */
["vectric_security_group_members"]: {
	__typename: "vectric_security_group_members",
	/** An array relationship */
	groupAuthorities: Array<GraphQLTypes["vectric_security_group_authorities"]>,
	/** An aggregate relationship */
	groupAuthorities_aggregate: GraphQLTypes["vectric_security_group_authorities_aggregate"],
	groupId: GraphQLTypes["bigint"],
	id: GraphQLTypes["bigint"],
	/** An object relationship */
	securityUser?: GraphQLTypes["vectric_security_users"],
	username?: string
};
	/** aggregated selection of "vectric.security_group_members" */
["vectric_security_group_members_aggregate"]: {
	__typename: "vectric_security_group_members_aggregate",
	aggregate?: GraphQLTypes["vectric_security_group_members_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_security_group_members"]>
};
	/** aggregate fields of "vectric.security_group_members" */
["vectric_security_group_members_aggregate_fields"]: {
	__typename: "vectric_security_group_members_aggregate_fields",
	avg?: GraphQLTypes["vectric_security_group_members_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_security_group_members_max_fields"],
	min?: GraphQLTypes["vectric_security_group_members_min_fields"],
	stddev?: GraphQLTypes["vectric_security_group_members_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_security_group_members_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_security_group_members_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_security_group_members_sum_fields"],
	var_pop?: GraphQLTypes["vectric_security_group_members_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_security_group_members_var_samp_fields"],
	variance?: GraphQLTypes["vectric_security_group_members_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_security_group_members_avg_fields"]: {
	__typename: "vectric_security_group_members_avg_fields",
	groupId?: number,
	id?: number
};
	/** aggregate max on columns */
["vectric_security_group_members_max_fields"]: {
	__typename: "vectric_security_group_members_max_fields",
	groupId?: GraphQLTypes["bigint"],
	id?: GraphQLTypes["bigint"],
	username?: string
};
	/** aggregate min on columns */
["vectric_security_group_members_min_fields"]: {
	__typename: "vectric_security_group_members_min_fields",
	groupId?: GraphQLTypes["bigint"],
	id?: GraphQLTypes["bigint"],
	username?: string
};
	/** response of any mutation on the table "vectric.security_group_members" */
["vectric_security_group_members_mutation_response"]: {
	__typename: "vectric_security_group_members_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_security_group_members"]>
};
	/** aggregate stddev on columns */
["vectric_security_group_members_stddev_fields"]: {
	__typename: "vectric_security_group_members_stddev_fields",
	groupId?: number,
	id?: number
};
	/** aggregate stddev_pop on columns */
["vectric_security_group_members_stddev_pop_fields"]: {
	__typename: "vectric_security_group_members_stddev_pop_fields",
	groupId?: number,
	id?: number
};
	/** aggregate stddev_samp on columns */
["vectric_security_group_members_stddev_samp_fields"]: {
	__typename: "vectric_security_group_members_stddev_samp_fields",
	groupId?: number,
	id?: number
};
	/** aggregate sum on columns */
["vectric_security_group_members_sum_fields"]: {
	__typename: "vectric_security_group_members_sum_fields",
	groupId?: GraphQLTypes["bigint"],
	id?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_security_group_members_var_pop_fields"]: {
	__typename: "vectric_security_group_members_var_pop_fields",
	groupId?: number,
	id?: number
};
	/** aggregate var_samp on columns */
["vectric_security_group_members_var_samp_fields"]: {
	__typename: "vectric_security_group_members_var_samp_fields",
	groupId?: number,
	id?: number
};
	/** aggregate variance on columns */
["vectric_security_group_members_variance_fields"]: {
	__typename: "vectric_security_group_members_variance_fields",
	groupId?: number,
	id?: number
};
	/** columns and relationships of "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens"]: {
	__typename: "vectric_security_passwordresettokens",
	expiryDate: GraphQLTypes["timestamptz"],
	token: string,
	username: string
};
	/** aggregated selection of "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_aggregate"]: {
	__typename: "vectric_security_passwordresettokens_aggregate",
	aggregate?: GraphQLTypes["vectric_security_passwordresettokens_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_security_passwordresettokens"]>
};
	/** aggregate fields of "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_aggregate_fields"]: {
	__typename: "vectric_security_passwordresettokens_aggregate_fields",
	count: number,
	max?: GraphQLTypes["vectric_security_passwordresettokens_max_fields"],
	min?: GraphQLTypes["vectric_security_passwordresettokens_min_fields"]
};
	/** aggregate max on columns */
["vectric_security_passwordresettokens_max_fields"]: {
	__typename: "vectric_security_passwordresettokens_max_fields",
	expiryDate?: GraphQLTypes["timestamptz"],
	token?: string,
	username?: string
};
	/** aggregate min on columns */
["vectric_security_passwordresettokens_min_fields"]: {
	__typename: "vectric_security_passwordresettokens_min_fields",
	expiryDate?: GraphQLTypes["timestamptz"],
	token?: string,
	username?: string
};
	/** response of any mutation on the table "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_mutation_response"]: {
	__typename: "vectric_security_passwordresettokens_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_security_passwordresettokens"]>
};
	/** columns and relationships of "vectric.security_userinvitations" */
["vectric_security_userinvitations"]: {
	__typename: "vectric_security_userinvitations",
	acceptedDate?: GraphQLTypes["timestamptz"],
	adminofid?: GraphQLTypes["bigint"],
	createDate?: GraphQLTypes["timestamptz"],
	customerId?: GraphQLTypes["bigint"],
	expirydate?: GraphQLTypes["timestamptz"],
	staffofid?: GraphQLTypes["bigint"],
	token: string,
	username: string
};
	/** aggregated selection of "vectric.security_userinvitations" */
["vectric_security_userinvitations_aggregate"]: {
	__typename: "vectric_security_userinvitations_aggregate",
	aggregate?: GraphQLTypes["vectric_security_userinvitations_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_security_userinvitations"]>
};
	/** aggregate fields of "vectric.security_userinvitations" */
["vectric_security_userinvitations_aggregate_fields"]: {
	__typename: "vectric_security_userinvitations_aggregate_fields",
	avg?: GraphQLTypes["vectric_security_userinvitations_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_security_userinvitations_max_fields"],
	min?: GraphQLTypes["vectric_security_userinvitations_min_fields"],
	stddev?: GraphQLTypes["vectric_security_userinvitations_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_security_userinvitations_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_security_userinvitations_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_security_userinvitations_sum_fields"],
	var_pop?: GraphQLTypes["vectric_security_userinvitations_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_security_userinvitations_var_samp_fields"],
	variance?: GraphQLTypes["vectric_security_userinvitations_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_security_userinvitations_avg_fields"]: {
	__typename: "vectric_security_userinvitations_avg_fields",
	adminofid?: number,
	customerId?: number,
	staffofid?: number
};
	/** aggregate max on columns */
["vectric_security_userinvitations_max_fields"]: {
	__typename: "vectric_security_userinvitations_max_fields",
	acceptedDate?: GraphQLTypes["timestamptz"],
	adminofid?: GraphQLTypes["bigint"],
	createDate?: GraphQLTypes["timestamptz"],
	customerId?: GraphQLTypes["bigint"],
	expirydate?: GraphQLTypes["timestamptz"],
	staffofid?: GraphQLTypes["bigint"],
	token?: string,
	username?: string
};
	/** aggregate min on columns */
["vectric_security_userinvitations_min_fields"]: {
	__typename: "vectric_security_userinvitations_min_fields",
	acceptedDate?: GraphQLTypes["timestamptz"],
	adminofid?: GraphQLTypes["bigint"],
	createDate?: GraphQLTypes["timestamptz"],
	customerId?: GraphQLTypes["bigint"],
	expirydate?: GraphQLTypes["timestamptz"],
	staffofid?: GraphQLTypes["bigint"],
	token?: string,
	username?: string
};
	/** response of any mutation on the table "vectric.security_userinvitations" */
["vectric_security_userinvitations_mutation_response"]: {
	__typename: "vectric_security_userinvitations_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_security_userinvitations"]>
};
	/** aggregate stddev on columns */
["vectric_security_userinvitations_stddev_fields"]: {
	__typename: "vectric_security_userinvitations_stddev_fields",
	adminofid?: number,
	customerId?: number,
	staffofid?: number
};
	/** aggregate stddev_pop on columns */
["vectric_security_userinvitations_stddev_pop_fields"]: {
	__typename: "vectric_security_userinvitations_stddev_pop_fields",
	adminofid?: number,
	customerId?: number,
	staffofid?: number
};
	/** aggregate stddev_samp on columns */
["vectric_security_userinvitations_stddev_samp_fields"]: {
	__typename: "vectric_security_userinvitations_stddev_samp_fields",
	adminofid?: number,
	customerId?: number,
	staffofid?: number
};
	/** aggregate sum on columns */
["vectric_security_userinvitations_sum_fields"]: {
	__typename: "vectric_security_userinvitations_sum_fields",
	adminofid?: GraphQLTypes["bigint"],
	customerId?: GraphQLTypes["bigint"],
	staffofid?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_security_userinvitations_var_pop_fields"]: {
	__typename: "vectric_security_userinvitations_var_pop_fields",
	adminofid?: number,
	customerId?: number,
	staffofid?: number
};
	/** aggregate var_samp on columns */
["vectric_security_userinvitations_var_samp_fields"]: {
	__typename: "vectric_security_userinvitations_var_samp_fields",
	adminofid?: number,
	customerId?: number,
	staffofid?: number
};
	/** aggregate variance on columns */
["vectric_security_userinvitations_variance_fields"]: {
	__typename: "vectric_security_userinvitations_variance_fields",
	adminofid?: number,
	customerId?: number,
	staffofid?: number
};
	/** columns and relationships of "vectric.security_users" */
["vectric_security_users"]: {
	__typename: "vectric_security_users",
	accountNonExpired: boolean,
	credentialsNonExpired: boolean,
	enabled: boolean,
	password: string,
	salesCustomerId?: GraphQLTypes["bigint"],
	/** An array relationship */
	securityGroups: Array<GraphQLTypes["vectric_security_group_members"]>,
	/** An aggregate relationship */
	securityGroups_aggregate: GraphQLTypes["vectric_security_group_members_aggregate"],
	username: string,
	voucherCode?: string
};
	/** aggregated selection of "vectric.security_users" */
["vectric_security_users_aggregate"]: {
	__typename: "vectric_security_users_aggregate",
	aggregate?: GraphQLTypes["vectric_security_users_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_security_users"]>
};
	/** aggregate fields of "vectric.security_users" */
["vectric_security_users_aggregate_fields"]: {
	__typename: "vectric_security_users_aggregate_fields",
	avg?: GraphQLTypes["vectric_security_users_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_security_users_max_fields"],
	min?: GraphQLTypes["vectric_security_users_min_fields"],
	stddev?: GraphQLTypes["vectric_security_users_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_security_users_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_security_users_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_security_users_sum_fields"],
	var_pop?: GraphQLTypes["vectric_security_users_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_security_users_var_samp_fields"],
	variance?: GraphQLTypes["vectric_security_users_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_security_users_avg_fields"]: {
	__typename: "vectric_security_users_avg_fields",
	salesCustomerId?: number
};
	/** aggregate max on columns */
["vectric_security_users_max_fields"]: {
	__typename: "vectric_security_users_max_fields",
	password?: string,
	salesCustomerId?: GraphQLTypes["bigint"],
	username?: string,
	voucherCode?: string
};
	/** aggregate min on columns */
["vectric_security_users_min_fields"]: {
	__typename: "vectric_security_users_min_fields",
	password?: string,
	salesCustomerId?: GraphQLTypes["bigint"],
	username?: string,
	voucherCode?: string
};
	/** response of any mutation on the table "vectric.security_users" */
["vectric_security_users_mutation_response"]: {
	__typename: "vectric_security_users_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_security_users"]>
};
	/** aggregate stddev on columns */
["vectric_security_users_stddev_fields"]: {
	__typename: "vectric_security_users_stddev_fields",
	salesCustomerId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_security_users_stddev_pop_fields"]: {
	__typename: "vectric_security_users_stddev_pop_fields",
	salesCustomerId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_security_users_stddev_samp_fields"]: {
	__typename: "vectric_security_users_stddev_samp_fields",
	salesCustomerId?: number
};
	/** aggregate sum on columns */
["vectric_security_users_sum_fields"]: {
	__typename: "vectric_security_users_sum_fields",
	salesCustomerId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_security_users_var_pop_fields"]: {
	__typename: "vectric_security_users_var_pop_fields",
	salesCustomerId?: number
};
	/** aggregate var_samp on columns */
["vectric_security_users_var_samp_fields"]: {
	__typename: "vectric_security_users_var_samp_fields",
	salesCustomerId?: number
};
	/** aggregate variance on columns */
["vectric_security_users_variance_fields"]: {
	__typename: "vectric_security_users_variance_fields",
	salesCustomerId?: number
};
	/** columns and relationships of "vectric.site_option_location" */
["vectric_site_option_location"]: {
	__typename: "vectric_site_option_location",
	locationid: GraphQLTypes["bigint"],
	name?: string
};
	/** aggregated selection of "vectric.site_option_location" */
["vectric_site_option_location_aggregate"]: {
	__typename: "vectric_site_option_location_aggregate",
	aggregate?: GraphQLTypes["vectric_site_option_location_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_site_option_location"]>
};
	/** aggregate fields of "vectric.site_option_location" */
["vectric_site_option_location_aggregate_fields"]: {
	__typename: "vectric_site_option_location_aggregate_fields",
	avg?: GraphQLTypes["vectric_site_option_location_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_site_option_location_max_fields"],
	min?: GraphQLTypes["vectric_site_option_location_min_fields"],
	stddev?: GraphQLTypes["vectric_site_option_location_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_site_option_location_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_site_option_location_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_site_option_location_sum_fields"],
	var_pop?: GraphQLTypes["vectric_site_option_location_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_site_option_location_var_samp_fields"],
	variance?: GraphQLTypes["vectric_site_option_location_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_site_option_location_avg_fields"]: {
	__typename: "vectric_site_option_location_avg_fields",
	locationid?: number
};
	/** aggregate max on columns */
["vectric_site_option_location_max_fields"]: {
	__typename: "vectric_site_option_location_max_fields",
	locationid?: GraphQLTypes["bigint"],
	name?: string
};
	/** aggregate min on columns */
["vectric_site_option_location_min_fields"]: {
	__typename: "vectric_site_option_location_min_fields",
	locationid?: GraphQLTypes["bigint"],
	name?: string
};
	/** response of any mutation on the table "vectric.site_option_location" */
["vectric_site_option_location_mutation_response"]: {
	__typename: "vectric_site_option_location_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_site_option_location"]>
};
	/** aggregate stddev on columns */
["vectric_site_option_location_stddev_fields"]: {
	__typename: "vectric_site_option_location_stddev_fields",
	locationid?: number
};
	/** aggregate stddev_pop on columns */
["vectric_site_option_location_stddev_pop_fields"]: {
	__typename: "vectric_site_option_location_stddev_pop_fields",
	locationid?: number
};
	/** aggregate stddev_samp on columns */
["vectric_site_option_location_stddev_samp_fields"]: {
	__typename: "vectric_site_option_location_stddev_samp_fields",
	locationid?: number
};
	/** aggregate sum on columns */
["vectric_site_option_location_sum_fields"]: {
	__typename: "vectric_site_option_location_sum_fields",
	locationid?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_site_option_location_var_pop_fields"]: {
	__typename: "vectric_site_option_location_var_pop_fields",
	locationid?: number
};
	/** aggregate var_samp on columns */
["vectric_site_option_location_var_samp_fields"]: {
	__typename: "vectric_site_option_location_var_samp_fields",
	locationid?: number
};
	/** aggregate variance on columns */
["vectric_site_option_location_variance_fields"]: {
	__typename: "vectric_site_option_location_variance_fields",
	locationid?: number
};
	/** columns and relationships of "vectric.site_options" */
["vectric_site_options"]: {
	__typename: "vectric_site_options",
	description?: string,
	optionid: GraphQLTypes["bigint"],
	optionname: string,
	/** An object relationship */
	site_optiositeOptionLocationn_location: GraphQLTypes["vectric_site_option_location"],
	siteid: GraphQLTypes["bigint"],
	stringval?: string,
	value?: boolean
};
	/** aggregated selection of "vectric.site_options" */
["vectric_site_options_aggregate"]: {
	__typename: "vectric_site_options_aggregate",
	aggregate?: GraphQLTypes["vectric_site_options_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_site_options"]>
};
	/** aggregate fields of "vectric.site_options" */
["vectric_site_options_aggregate_fields"]: {
	__typename: "vectric_site_options_aggregate_fields",
	avg?: GraphQLTypes["vectric_site_options_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_site_options_max_fields"],
	min?: GraphQLTypes["vectric_site_options_min_fields"],
	stddev?: GraphQLTypes["vectric_site_options_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_site_options_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_site_options_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_site_options_sum_fields"],
	var_pop?: GraphQLTypes["vectric_site_options_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_site_options_var_samp_fields"],
	variance?: GraphQLTypes["vectric_site_options_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_site_options_avg_fields"]: {
	__typename: "vectric_site_options_avg_fields",
	optionid?: number,
	siteid?: number
};
	/** aggregate max on columns */
["vectric_site_options_max_fields"]: {
	__typename: "vectric_site_options_max_fields",
	description?: string,
	optionid?: GraphQLTypes["bigint"],
	optionname?: string,
	siteid?: GraphQLTypes["bigint"],
	stringval?: string
};
	/** aggregate min on columns */
["vectric_site_options_min_fields"]: {
	__typename: "vectric_site_options_min_fields",
	description?: string,
	optionid?: GraphQLTypes["bigint"],
	optionname?: string,
	siteid?: GraphQLTypes["bigint"],
	stringval?: string
};
	/** response of any mutation on the table "vectric.site_options" */
["vectric_site_options_mutation_response"]: {
	__typename: "vectric_site_options_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_site_options"]>
};
	/** aggregate stddev on columns */
["vectric_site_options_stddev_fields"]: {
	__typename: "vectric_site_options_stddev_fields",
	optionid?: number,
	siteid?: number
};
	/** aggregate stddev_pop on columns */
["vectric_site_options_stddev_pop_fields"]: {
	__typename: "vectric_site_options_stddev_pop_fields",
	optionid?: number,
	siteid?: number
};
	/** aggregate stddev_samp on columns */
["vectric_site_options_stddev_samp_fields"]: {
	__typename: "vectric_site_options_stddev_samp_fields",
	optionid?: number,
	siteid?: number
};
	/** aggregate sum on columns */
["vectric_site_options_sum_fields"]: {
	__typename: "vectric_site_options_sum_fields",
	optionid?: GraphQLTypes["bigint"],
	siteid?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_site_options_var_pop_fields"]: {
	__typename: "vectric_site_options_var_pop_fields",
	optionid?: number,
	siteid?: number
};
	/** aggregate var_samp on columns */
["vectric_site_options_var_samp_fields"]: {
	__typename: "vectric_site_options_var_samp_fields",
	optionid?: number,
	siteid?: number
};
	/** aggregate variance on columns */
["vectric_site_options_variance_fields"]: {
	__typename: "vectric_site_options_variance_fields",
	optionid?: number,
	siteid?: number
};
	/** columns and relationships of "vectric.subscription_contract_status" */
["vectric_subscription_contract_status"]: {
	__typename: "vectric_subscription_contract_status",
	status: string
};
	/** aggregated selection of "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_aggregate"]: {
	__typename: "vectric_subscription_contract_status_aggregate",
	aggregate?: GraphQLTypes["vectric_subscription_contract_status_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_subscription_contract_status"]>
};
	/** aggregate fields of "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_aggregate_fields"]: {
	__typename: "vectric_subscription_contract_status_aggregate_fields",
	count: number,
	max?: GraphQLTypes["vectric_subscription_contract_status_max_fields"],
	min?: GraphQLTypes["vectric_subscription_contract_status_min_fields"]
};
	/** aggregate max on columns */
["vectric_subscription_contract_status_max_fields"]: {
	__typename: "vectric_subscription_contract_status_max_fields",
	status?: string
};
	/** aggregate min on columns */
["vectric_subscription_contract_status_min_fields"]: {
	__typename: "vectric_subscription_contract_status_min_fields",
	status?: string
};
	/** response of any mutation on the table "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_mutation_response"]: {
	__typename: "vectric_subscription_contract_status_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_subscription_contract_status"]>
};
	/** columns and relationships of "vectric.subscription_contracts" */
["vectric_subscription_contracts"]: {
	__typename: "vectric_subscription_contracts",
	dateEnding: GraphQLTypes["timestamp"],
	dateStarted: GraphQLTypes["timestamp"],
	/** An array relationship */
	events: Array<GraphQLTypes["vectric_subscription_events"]>,
	/** An aggregate relationship */
	events_aggregate: GraphQLTypes["vectric_subscription_events_aggregate"],
	/** An object relationship */
	orderItem: GraphQLTypes["vectric_organization_order_items"],
	orderItemId: number,
	status: string,
	subscriptionContractId: number,
	subscriptionId: string
};
	/** aggregated selection of "vectric.subscription_contracts" */
["vectric_subscription_contracts_aggregate"]: {
	__typename: "vectric_subscription_contracts_aggregate",
	aggregate?: GraphQLTypes["vectric_subscription_contracts_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_subscription_contracts"]>
};
	/** aggregate fields of "vectric.subscription_contracts" */
["vectric_subscription_contracts_aggregate_fields"]: {
	__typename: "vectric_subscription_contracts_aggregate_fields",
	avg?: GraphQLTypes["vectric_subscription_contracts_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_subscription_contracts_max_fields"],
	min?: GraphQLTypes["vectric_subscription_contracts_min_fields"],
	stddev?: GraphQLTypes["vectric_subscription_contracts_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_subscription_contracts_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_subscription_contracts_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_subscription_contracts_sum_fields"],
	var_pop?: GraphQLTypes["vectric_subscription_contracts_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_subscription_contracts_var_samp_fields"],
	variance?: GraphQLTypes["vectric_subscription_contracts_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_subscription_contracts_avg_fields"]: {
	__typename: "vectric_subscription_contracts_avg_fields",
	orderItemId?: number,
	subscriptionContractId?: number
};
	/** aggregate max on columns */
["vectric_subscription_contracts_max_fields"]: {
	__typename: "vectric_subscription_contracts_max_fields",
	dateEnding?: GraphQLTypes["timestamp"],
	dateStarted?: GraphQLTypes["timestamp"],
	orderItemId?: number,
	status?: string,
	subscriptionContractId?: number,
	subscriptionId?: string
};
	/** aggregate min on columns */
["vectric_subscription_contracts_min_fields"]: {
	__typename: "vectric_subscription_contracts_min_fields",
	dateEnding?: GraphQLTypes["timestamp"],
	dateStarted?: GraphQLTypes["timestamp"],
	orderItemId?: number,
	status?: string,
	subscriptionContractId?: number,
	subscriptionId?: string
};
	/** response of any mutation on the table "vectric.subscription_contracts" */
["vectric_subscription_contracts_mutation_response"]: {
	__typename: "vectric_subscription_contracts_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_subscription_contracts"]>
};
	/** aggregate stddev on columns */
["vectric_subscription_contracts_stddev_fields"]: {
	__typename: "vectric_subscription_contracts_stddev_fields",
	orderItemId?: number,
	subscriptionContractId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_subscription_contracts_stddev_pop_fields"]: {
	__typename: "vectric_subscription_contracts_stddev_pop_fields",
	orderItemId?: number,
	subscriptionContractId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_subscription_contracts_stddev_samp_fields"]: {
	__typename: "vectric_subscription_contracts_stddev_samp_fields",
	orderItemId?: number,
	subscriptionContractId?: number
};
	/** aggregate sum on columns */
["vectric_subscription_contracts_sum_fields"]: {
	__typename: "vectric_subscription_contracts_sum_fields",
	orderItemId?: number,
	subscriptionContractId?: number
};
	/** aggregate var_pop on columns */
["vectric_subscription_contracts_var_pop_fields"]: {
	__typename: "vectric_subscription_contracts_var_pop_fields",
	orderItemId?: number,
	subscriptionContractId?: number
};
	/** aggregate var_samp on columns */
["vectric_subscription_contracts_var_samp_fields"]: {
	__typename: "vectric_subscription_contracts_var_samp_fields",
	orderItemId?: number,
	subscriptionContractId?: number
};
	/** aggregate variance on columns */
["vectric_subscription_contracts_variance_fields"]: {
	__typename: "vectric_subscription_contracts_variance_fields",
	orderItemId?: number,
	subscriptionContractId?: number
};
	/** columns and relationships of "vectric.subscription_events" */
["vectric_subscription_events"]: {
	__typename: "vectric_subscription_events",
	actionTaken: string,
	dateCreated: GraphQLTypes["timestamp"],
	dateProcessed?: GraphQLTypes["timestamp"],
	eventId: number,
	eventType: string,
	fastspringInternalOrderId?: string,
	fastspringOrderReference?: string,
	fastspringSubscriptionId: string,
	orderItemId?: number,
	subscriptionContractId?: number,
	subscriptionDateStarted?: GraphQLTypes["timestamp"],
	subscriptionDeactivationDate?: GraphQLTypes["timestamp"],
	subscriptionNextRebillDate?: GraphQLTypes["timestamp"]
};
	/** aggregated selection of "vectric.subscription_events" */
["vectric_subscription_events_aggregate"]: {
	__typename: "vectric_subscription_events_aggregate",
	aggregate?: GraphQLTypes["vectric_subscription_events_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_subscription_events"]>
};
	/** aggregate fields of "vectric.subscription_events" */
["vectric_subscription_events_aggregate_fields"]: {
	__typename: "vectric_subscription_events_aggregate_fields",
	avg?: GraphQLTypes["vectric_subscription_events_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_subscription_events_max_fields"],
	min?: GraphQLTypes["vectric_subscription_events_min_fields"],
	stddev?: GraphQLTypes["vectric_subscription_events_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_subscription_events_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_subscription_events_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_subscription_events_sum_fields"],
	var_pop?: GraphQLTypes["vectric_subscription_events_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_subscription_events_var_samp_fields"],
	variance?: GraphQLTypes["vectric_subscription_events_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_subscription_events_avg_fields"]: {
	__typename: "vectric_subscription_events_avg_fields",
	eventId?: number,
	orderItemId?: number,
	subscriptionContractId?: number
};
	/** aggregate max on columns */
["vectric_subscription_events_max_fields"]: {
	__typename: "vectric_subscription_events_max_fields",
	actionTaken?: string,
	dateCreated?: GraphQLTypes["timestamp"],
	dateProcessed?: GraphQLTypes["timestamp"],
	eventId?: number,
	eventType?: string,
	fastspringInternalOrderId?: string,
	fastspringOrderReference?: string,
	fastspringSubscriptionId?: string,
	orderItemId?: number,
	subscriptionContractId?: number,
	subscriptionDateStarted?: GraphQLTypes["timestamp"],
	subscriptionDeactivationDate?: GraphQLTypes["timestamp"],
	subscriptionNextRebillDate?: GraphQLTypes["timestamp"]
};
	/** aggregate min on columns */
["vectric_subscription_events_min_fields"]: {
	__typename: "vectric_subscription_events_min_fields",
	actionTaken?: string,
	dateCreated?: GraphQLTypes["timestamp"],
	dateProcessed?: GraphQLTypes["timestamp"],
	eventId?: number,
	eventType?: string,
	fastspringInternalOrderId?: string,
	fastspringOrderReference?: string,
	fastspringSubscriptionId?: string,
	orderItemId?: number,
	subscriptionContractId?: number,
	subscriptionDateStarted?: GraphQLTypes["timestamp"],
	subscriptionDeactivationDate?: GraphQLTypes["timestamp"],
	subscriptionNextRebillDate?: GraphQLTypes["timestamp"]
};
	/** response of any mutation on the table "vectric.subscription_events" */
["vectric_subscription_events_mutation_response"]: {
	__typename: "vectric_subscription_events_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_subscription_events"]>
};
	/** aggregate stddev on columns */
["vectric_subscription_events_stddev_fields"]: {
	__typename: "vectric_subscription_events_stddev_fields",
	eventId?: number,
	orderItemId?: number,
	subscriptionContractId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_subscription_events_stddev_pop_fields"]: {
	__typename: "vectric_subscription_events_stddev_pop_fields",
	eventId?: number,
	orderItemId?: number,
	subscriptionContractId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_subscription_events_stddev_samp_fields"]: {
	__typename: "vectric_subscription_events_stddev_samp_fields",
	eventId?: number,
	orderItemId?: number,
	subscriptionContractId?: number
};
	/** aggregate sum on columns */
["vectric_subscription_events_sum_fields"]: {
	__typename: "vectric_subscription_events_sum_fields",
	eventId?: number,
	orderItemId?: number,
	subscriptionContractId?: number
};
	/** aggregate var_pop on columns */
["vectric_subscription_events_var_pop_fields"]: {
	__typename: "vectric_subscription_events_var_pop_fields",
	eventId?: number,
	orderItemId?: number,
	subscriptionContractId?: number
};
	/** aggregate var_samp on columns */
["vectric_subscription_events_var_samp_fields"]: {
	__typename: "vectric_subscription_events_var_samp_fields",
	eventId?: number,
	orderItemId?: number,
	subscriptionContractId?: number
};
	/** aggregate variance on columns */
["vectric_subscription_events_variance_fields"]: {
	__typename: "vectric_subscription_events_variance_fields",
	eventId?: number,
	orderItemId?: number,
	subscriptionContractId?: number
};
	/** columns and relationships of "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token"]: {
	__typename: "vectric_toolpath_saver_token",
	/** An object relationship */
	customer: GraphQLTypes["vectric_sales_customers"],
	customerId: GraphQLTypes["bigint"],
	dateExpired: GraphQLTypes["timestamptz"],
	dateGenerated: GraphQLTypes["timestamptz"],
	/** An object relationship */
	product: GraphQLTypes["vectric_products_products"],
	productId: GraphQLTypes["bigint"],
	token: string,
	toolpathSaverTokenId: GraphQLTypes["bigint"],
	used: number
};
	/** aggregated selection of "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_aggregate"]: {
	__typename: "vectric_toolpath_saver_token_aggregate",
	aggregate?: GraphQLTypes["vectric_toolpath_saver_token_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_toolpath_saver_token"]>
};
	/** aggregate fields of "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_aggregate_fields"]: {
	__typename: "vectric_toolpath_saver_token_aggregate_fields",
	avg?: GraphQLTypes["vectric_toolpath_saver_token_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_toolpath_saver_token_max_fields"],
	min?: GraphQLTypes["vectric_toolpath_saver_token_min_fields"],
	stddev?: GraphQLTypes["vectric_toolpath_saver_token_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_toolpath_saver_token_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_toolpath_saver_token_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_toolpath_saver_token_sum_fields"],
	var_pop?: GraphQLTypes["vectric_toolpath_saver_token_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_toolpath_saver_token_var_samp_fields"],
	variance?: GraphQLTypes["vectric_toolpath_saver_token_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_toolpath_saver_token_avg_fields"]: {
	__typename: "vectric_toolpath_saver_token_avg_fields",
	customerId?: number,
	productId?: number,
	toolpathSaverTokenId?: number,
	used?: number
};
	/** aggregate max on columns */
["vectric_toolpath_saver_token_max_fields"]: {
	__typename: "vectric_toolpath_saver_token_max_fields",
	customerId?: GraphQLTypes["bigint"],
	dateExpired?: GraphQLTypes["timestamptz"],
	dateGenerated?: GraphQLTypes["timestamptz"],
	productId?: GraphQLTypes["bigint"],
	token?: string,
	toolpathSaverTokenId?: GraphQLTypes["bigint"],
	used?: number
};
	/** aggregate min on columns */
["vectric_toolpath_saver_token_min_fields"]: {
	__typename: "vectric_toolpath_saver_token_min_fields",
	customerId?: GraphQLTypes["bigint"],
	dateExpired?: GraphQLTypes["timestamptz"],
	dateGenerated?: GraphQLTypes["timestamptz"],
	productId?: GraphQLTypes["bigint"],
	token?: string,
	toolpathSaverTokenId?: GraphQLTypes["bigint"],
	used?: number
};
	/** response of any mutation on the table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_mutation_response"]: {
	__typename: "vectric_toolpath_saver_token_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_toolpath_saver_token"]>
};
	/** aggregate stddev on columns */
["vectric_toolpath_saver_token_stddev_fields"]: {
	__typename: "vectric_toolpath_saver_token_stddev_fields",
	customerId?: number,
	productId?: number,
	toolpathSaverTokenId?: number,
	used?: number
};
	/** aggregate stddev_pop on columns */
["vectric_toolpath_saver_token_stddev_pop_fields"]: {
	__typename: "vectric_toolpath_saver_token_stddev_pop_fields",
	customerId?: number,
	productId?: number,
	toolpathSaverTokenId?: number,
	used?: number
};
	/** aggregate stddev_samp on columns */
["vectric_toolpath_saver_token_stddev_samp_fields"]: {
	__typename: "vectric_toolpath_saver_token_stddev_samp_fields",
	customerId?: number,
	productId?: number,
	toolpathSaverTokenId?: number,
	used?: number
};
	/** aggregate sum on columns */
["vectric_toolpath_saver_token_sum_fields"]: {
	__typename: "vectric_toolpath_saver_token_sum_fields",
	customerId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"],
	toolpathSaverTokenId?: GraphQLTypes["bigint"],
	used?: number
};
	/** aggregate var_pop on columns */
["vectric_toolpath_saver_token_var_pop_fields"]: {
	__typename: "vectric_toolpath_saver_token_var_pop_fields",
	customerId?: number,
	productId?: number,
	toolpathSaverTokenId?: number,
	used?: number
};
	/** aggregate var_samp on columns */
["vectric_toolpath_saver_token_var_samp_fields"]: {
	__typename: "vectric_toolpath_saver_token_var_samp_fields",
	customerId?: number,
	productId?: number,
	toolpathSaverTokenId?: number,
	used?: number
};
	/** aggregate variance on columns */
["vectric_toolpath_saver_token_variance_fields"]: {
	__typename: "vectric_toolpath_saver_token_variance_fields",
	customerId?: number,
	productId?: number,
	toolpathSaverTokenId?: number,
	used?: number
};
	/** columns and relationships of "vectric.trial_order" */
["vectric_trial_order"]: {
	__typename: "vectric_trial_order",
	/** An object relationship */
	customer: GraphQLTypes["vectric_sales_customers"],
	customerId: GraphQLTypes["bigint"],
	endDate?: GraphQLTypes["timestamptz"],
	orderId: GraphQLTypes["bigint"],
	/** An object relationship */
	product: GraphQLTypes["vectric_products_products"],
	productId: GraphQLTypes["bigint"],
	startDate?: GraphQLTypes["timestamptz"],
	valid: boolean
};
	/** aggregated selection of "vectric.trial_order" */
["vectric_trial_order_aggregate"]: {
	__typename: "vectric_trial_order_aggregate",
	aggregate?: GraphQLTypes["vectric_trial_order_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_trial_order"]>
};
	/** aggregate fields of "vectric.trial_order" */
["vectric_trial_order_aggregate_fields"]: {
	__typename: "vectric_trial_order_aggregate_fields",
	avg?: GraphQLTypes["vectric_trial_order_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_trial_order_max_fields"],
	min?: GraphQLTypes["vectric_trial_order_min_fields"],
	stddev?: GraphQLTypes["vectric_trial_order_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_trial_order_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_trial_order_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_trial_order_sum_fields"],
	var_pop?: GraphQLTypes["vectric_trial_order_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_trial_order_var_samp_fields"],
	variance?: GraphQLTypes["vectric_trial_order_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_trial_order_avg_fields"]: {
	__typename: "vectric_trial_order_avg_fields",
	customerId?: number,
	orderId?: number,
	productId?: number
};
	/** aggregate max on columns */
["vectric_trial_order_max_fields"]: {
	__typename: "vectric_trial_order_max_fields",
	customerId?: GraphQLTypes["bigint"],
	endDate?: GraphQLTypes["timestamptz"],
	orderId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"],
	startDate?: GraphQLTypes["timestamptz"]
};
	/** aggregate min on columns */
["vectric_trial_order_min_fields"]: {
	__typename: "vectric_trial_order_min_fields",
	customerId?: GraphQLTypes["bigint"],
	endDate?: GraphQLTypes["timestamptz"],
	orderId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"],
	startDate?: GraphQLTypes["timestamptz"]
};
	/** response of any mutation on the table "vectric.trial_order" */
["vectric_trial_order_mutation_response"]: {
	__typename: "vectric_trial_order_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_trial_order"]>
};
	/** aggregate stddev on columns */
["vectric_trial_order_stddev_fields"]: {
	__typename: "vectric_trial_order_stddev_fields",
	customerId?: number,
	orderId?: number,
	productId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_trial_order_stddev_pop_fields"]: {
	__typename: "vectric_trial_order_stddev_pop_fields",
	customerId?: number,
	orderId?: number,
	productId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_trial_order_stddev_samp_fields"]: {
	__typename: "vectric_trial_order_stddev_samp_fields",
	customerId?: number,
	orderId?: number,
	productId?: number
};
	/** aggregate sum on columns */
["vectric_trial_order_sum_fields"]: {
	__typename: "vectric_trial_order_sum_fields",
	customerId?: GraphQLTypes["bigint"],
	orderId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_trial_order_var_pop_fields"]: {
	__typename: "vectric_trial_order_var_pop_fields",
	customerId?: number,
	orderId?: number,
	productId?: number
};
	/** aggregate var_samp on columns */
["vectric_trial_order_var_samp_fields"]: {
	__typename: "vectric_trial_order_var_samp_fields",
	customerId?: number,
	orderId?: number,
	productId?: number
};
	/** aggregate variance on columns */
["vectric_trial_order_variance_fields"]: {
	__typename: "vectric_trial_order_variance_fields",
	customerId?: number,
	orderId?: number,
	productId?: number
};
	/** columns and relationships of "vectric.update_requests" */
["vectric_update_requests"]: {
	__typename: "vectric_update_requests",
	dateAccessed?: GraphQLTypes["timestamptz"],
	ipAddress?: string,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	osMajorVersion?: GraphQLTypes["bigint"],
	osMinorVersion?: GraphQLTypes["bigint"],
	productName?: string,
	requestId: GraphQLTypes["bigint"],
	wProcessorArch?: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.update_requests" */
["vectric_update_requests_aggregate"]: {
	__typename: "vectric_update_requests_aggregate",
	aggregate?: GraphQLTypes["vectric_update_requests_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_update_requests"]>
};
	/** aggregate fields of "vectric.update_requests" */
["vectric_update_requests_aggregate_fields"]: {
	__typename: "vectric_update_requests_aggregate_fields",
	avg?: GraphQLTypes["vectric_update_requests_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_update_requests_max_fields"],
	min?: GraphQLTypes["vectric_update_requests_min_fields"],
	stddev?: GraphQLTypes["vectric_update_requests_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_update_requests_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_update_requests_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_update_requests_sum_fields"],
	var_pop?: GraphQLTypes["vectric_update_requests_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_update_requests_var_samp_fields"],
	variance?: GraphQLTypes["vectric_update_requests_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_update_requests_avg_fields"]: {
	__typename: "vectric_update_requests_avg_fields",
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	osMajorVersion?: number,
	osMinorVersion?: number,
	requestId?: number,
	wProcessorArch?: number
};
	/** aggregate max on columns */
["vectric_update_requests_max_fields"]: {
	__typename: "vectric_update_requests_max_fields",
	dateAccessed?: GraphQLTypes["timestamptz"],
	ipAddress?: string,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	osMajorVersion?: GraphQLTypes["bigint"],
	osMinorVersion?: GraphQLTypes["bigint"],
	productName?: string,
	requestId?: GraphQLTypes["bigint"],
	wProcessorArch?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_update_requests_min_fields"]: {
	__typename: "vectric_update_requests_min_fields",
	dateAccessed?: GraphQLTypes["timestamptz"],
	ipAddress?: string,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	osMajorVersion?: GraphQLTypes["bigint"],
	osMinorVersion?: GraphQLTypes["bigint"],
	productName?: string,
	requestId?: GraphQLTypes["bigint"],
	wProcessorArch?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.update_requests" */
["vectric_update_requests_mutation_response"]: {
	__typename: "vectric_update_requests_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_update_requests"]>
};
	/** aggregate stddev on columns */
["vectric_update_requests_stddev_fields"]: {
	__typename: "vectric_update_requests_stddev_fields",
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	osMajorVersion?: number,
	osMinorVersion?: number,
	requestId?: number,
	wProcessorArch?: number
};
	/** aggregate stddev_pop on columns */
["vectric_update_requests_stddev_pop_fields"]: {
	__typename: "vectric_update_requests_stddev_pop_fields",
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	osMajorVersion?: number,
	osMinorVersion?: number,
	requestId?: number,
	wProcessorArch?: number
};
	/** aggregate stddev_samp on columns */
["vectric_update_requests_stddev_samp_fields"]: {
	__typename: "vectric_update_requests_stddev_samp_fields",
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	osMajorVersion?: number,
	osMinorVersion?: number,
	requestId?: number,
	wProcessorArch?: number
};
	/** aggregate sum on columns */
["vectric_update_requests_sum_fields"]: {
	__typename: "vectric_update_requests_sum_fields",
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	osMajorVersion?: GraphQLTypes["bigint"],
	osMinorVersion?: GraphQLTypes["bigint"],
	requestId?: GraphQLTypes["bigint"],
	wProcessorArch?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_update_requests_var_pop_fields"]: {
	__typename: "vectric_update_requests_var_pop_fields",
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	osMajorVersion?: number,
	osMinorVersion?: number,
	requestId?: number,
	wProcessorArch?: number
};
	/** aggregate var_samp on columns */
["vectric_update_requests_var_samp_fields"]: {
	__typename: "vectric_update_requests_var_samp_fields",
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	osMajorVersion?: number,
	osMinorVersion?: number,
	requestId?: number,
	wProcessorArch?: number
};
	/** aggregate variance on columns */
["vectric_update_requests_variance_fields"]: {
	__typename: "vectric_update_requests_variance_fields",
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	osMajorVersion?: number,
	osMinorVersion?: number,
	requestId?: number,
	wProcessorArch?: number
};
	/** columns and relationships of "vectric.upgrade_tokens" */
["vectric_upgrade_tokens"]: {
	__typename: "vectric_upgrade_tokens",
	customerId: GraphQLTypes["bigint"],
	dateCreated: GraphQLTypes["timestamptz"],
	dateUsed?: GraphQLTypes["timestamptz"],
	/** An object relationship */
	fromProduct: GraphQLTypes["vectric_sales_salesitem_products"],
	orderItemProductId: GraphQLTypes["bigint"],
	/** An object relationship */
	toProduct?: GraphQLTypes["vectric_products_upgrade_eligibility"],
	token: string,
	upgradeEligibilityId?: GraphQLTypes["bigint"],
	upgradedToOrderItemProduct?: GraphQLTypes["bigint"],
	used: boolean
};
	/** aggregated selection of "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_aggregate"]: {
	__typename: "vectric_upgrade_tokens_aggregate",
	aggregate?: GraphQLTypes["vectric_upgrade_tokens_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_upgrade_tokens"]>
};
	/** aggregate fields of "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_aggregate_fields"]: {
	__typename: "vectric_upgrade_tokens_aggregate_fields",
	avg?: GraphQLTypes["vectric_upgrade_tokens_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_upgrade_tokens_max_fields"],
	min?: GraphQLTypes["vectric_upgrade_tokens_min_fields"],
	stddev?: GraphQLTypes["vectric_upgrade_tokens_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_upgrade_tokens_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_upgrade_tokens_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_upgrade_tokens_sum_fields"],
	var_pop?: GraphQLTypes["vectric_upgrade_tokens_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_upgrade_tokens_var_samp_fields"],
	variance?: GraphQLTypes["vectric_upgrade_tokens_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_upgrade_tokens_avg_fields"]: {
	__typename: "vectric_upgrade_tokens_avg_fields",
	customerId?: number,
	orderItemProductId?: number,
	upgradeEligibilityId?: number,
	upgradedToOrderItemProduct?: number
};
	/** aggregate max on columns */
["vectric_upgrade_tokens_max_fields"]: {
	__typename: "vectric_upgrade_tokens_max_fields",
	customerId?: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateUsed?: GraphQLTypes["timestamptz"],
	orderItemProductId?: GraphQLTypes["bigint"],
	token?: string,
	upgradeEligibilityId?: GraphQLTypes["bigint"],
	upgradedToOrderItemProduct?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_upgrade_tokens_min_fields"]: {
	__typename: "vectric_upgrade_tokens_min_fields",
	customerId?: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateUsed?: GraphQLTypes["timestamptz"],
	orderItemProductId?: GraphQLTypes["bigint"],
	token?: string,
	upgradeEligibilityId?: GraphQLTypes["bigint"],
	upgradedToOrderItemProduct?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_mutation_response"]: {
	__typename: "vectric_upgrade_tokens_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_upgrade_tokens"]>
};
	/** aggregate stddev on columns */
["vectric_upgrade_tokens_stddev_fields"]: {
	__typename: "vectric_upgrade_tokens_stddev_fields",
	customerId?: number,
	orderItemProductId?: number,
	upgradeEligibilityId?: number,
	upgradedToOrderItemProduct?: number
};
	/** aggregate stddev_pop on columns */
["vectric_upgrade_tokens_stddev_pop_fields"]: {
	__typename: "vectric_upgrade_tokens_stddev_pop_fields",
	customerId?: number,
	orderItemProductId?: number,
	upgradeEligibilityId?: number,
	upgradedToOrderItemProduct?: number
};
	/** aggregate stddev_samp on columns */
["vectric_upgrade_tokens_stddev_samp_fields"]: {
	__typename: "vectric_upgrade_tokens_stddev_samp_fields",
	customerId?: number,
	orderItemProductId?: number,
	upgradeEligibilityId?: number,
	upgradedToOrderItemProduct?: number
};
	/** aggregate sum on columns */
["vectric_upgrade_tokens_sum_fields"]: {
	__typename: "vectric_upgrade_tokens_sum_fields",
	customerId?: GraphQLTypes["bigint"],
	orderItemProductId?: GraphQLTypes["bigint"],
	upgradeEligibilityId?: GraphQLTypes["bigint"],
	upgradedToOrderItemProduct?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_upgrade_tokens_var_pop_fields"]: {
	__typename: "vectric_upgrade_tokens_var_pop_fields",
	customerId?: number,
	orderItemProductId?: number,
	upgradeEligibilityId?: number,
	upgradedToOrderItemProduct?: number
};
	/** aggregate var_samp on columns */
["vectric_upgrade_tokens_var_samp_fields"]: {
	__typename: "vectric_upgrade_tokens_var_samp_fields",
	customerId?: number,
	orderItemProductId?: number,
	upgradeEligibilityId?: number,
	upgradedToOrderItemProduct?: number
};
	/** aggregate variance on columns */
["vectric_upgrade_tokens_variance_fields"]: {
	__typename: "vectric_upgrade_tokens_variance_fields",
	customerId?: number,
	orderItemProductId?: number,
	upgradeEligibilityId?: number,
	upgradedToOrderItemProduct?: number
};
	/** columns and relationships of "vectric.upgrades_feature" */
["vectric_upgrades_feature"]: {
	__typename: "vectric_upgrades_feature",
	enabled: boolean,
	extendedDescription?: string,
	featureId: string,
	title?: string,
	/** An array relationship */
	upgradeProductTypeFeatures: Array<GraphQLTypes["vectric_upgrades_product_type_feature"]>,
	/** An aggregate relationship */
	upgradeProductTypeFeatures_aggregate: GraphQLTypes["vectric_upgrades_product_type_feature_aggregate"],
	/** fetch data from the table: "vectric.upgrades_version_feature" */
	upgradeVersionFeatures: Array<GraphQLTypes["vectric_upgrades_version_feature"]>,
	/** An aggregate relationship */
	upgradeVersionFeatures_aggregate: GraphQLTypes["vectric_upgrades_version_feature_aggregate"]
};
	/** aggregated selection of "vectric.upgrades_feature" */
["vectric_upgrades_feature_aggregate"]: {
	__typename: "vectric_upgrades_feature_aggregate",
	aggregate?: GraphQLTypes["vectric_upgrades_feature_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_upgrades_feature"]>
};
	/** aggregate fields of "vectric.upgrades_feature" */
["vectric_upgrades_feature_aggregate_fields"]: {
	__typename: "vectric_upgrades_feature_aggregate_fields",
	count: number,
	max?: GraphQLTypes["vectric_upgrades_feature_max_fields"],
	min?: GraphQLTypes["vectric_upgrades_feature_min_fields"]
};
	/** aggregate max on columns */
["vectric_upgrades_feature_max_fields"]: {
	__typename: "vectric_upgrades_feature_max_fields",
	extendedDescription?: string,
	featureId?: string,
	title?: string
};
	/** aggregate min on columns */
["vectric_upgrades_feature_min_fields"]: {
	__typename: "vectric_upgrades_feature_min_fields",
	extendedDescription?: string,
	featureId?: string,
	title?: string
};
	/** response of any mutation on the table "vectric.upgrades_feature" */
["vectric_upgrades_feature_mutation_response"]: {
	__typename: "vectric_upgrades_feature_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_upgrades_feature"]>
};
	/** columns and relationships of "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature"]: {
	__typename: "vectric_upgrades_product_type_feature",
	feature?: string,
	fromProductType: GraphQLTypes["bigint"],
	/** An object relationship */
	fromProductTypeObject: GraphQLTypes["vectric_products_producttype"],
	ranking?: GraphQLTypes["bigint"],
	toProductType: GraphQLTypes["bigint"],
	/** An object relationship */
	toProductTypeObject: GraphQLTypes["vectric_products_producttype"],
	/** An object relationship */
	upgradeFeatureObject?: GraphQLTypes["vectric_upgrades_feature"],
	upgradeId: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_aggregate"]: {
	__typename: "vectric_upgrades_product_type_feature_aggregate",
	aggregate?: GraphQLTypes["vectric_upgrades_product_type_feature_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_upgrades_product_type_feature"]>
};
	/** aggregate fields of "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_aggregate_fields"]: {
	__typename: "vectric_upgrades_product_type_feature_aggregate_fields",
	avg?: GraphQLTypes["vectric_upgrades_product_type_feature_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_upgrades_product_type_feature_max_fields"],
	min?: GraphQLTypes["vectric_upgrades_product_type_feature_min_fields"],
	stddev?: GraphQLTypes["vectric_upgrades_product_type_feature_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_upgrades_product_type_feature_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_upgrades_product_type_feature_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_upgrades_product_type_feature_sum_fields"],
	var_pop?: GraphQLTypes["vectric_upgrades_product_type_feature_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_upgrades_product_type_feature_var_samp_fields"],
	variance?: GraphQLTypes["vectric_upgrades_product_type_feature_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_upgrades_product_type_feature_avg_fields"]: {
	__typename: "vectric_upgrades_product_type_feature_avg_fields",
	fromProductType?: number,
	ranking?: number,
	toProductType?: number,
	upgradeId?: number
};
	/** aggregate max on columns */
["vectric_upgrades_product_type_feature_max_fields"]: {
	__typename: "vectric_upgrades_product_type_feature_max_fields",
	feature?: string,
	fromProductType?: GraphQLTypes["bigint"],
	ranking?: GraphQLTypes["bigint"],
	toProductType?: GraphQLTypes["bigint"],
	upgradeId?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_upgrades_product_type_feature_min_fields"]: {
	__typename: "vectric_upgrades_product_type_feature_min_fields",
	feature?: string,
	fromProductType?: GraphQLTypes["bigint"],
	ranking?: GraphQLTypes["bigint"],
	toProductType?: GraphQLTypes["bigint"],
	upgradeId?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_mutation_response"]: {
	__typename: "vectric_upgrades_product_type_feature_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_upgrades_product_type_feature"]>
};
	/** aggregate stddev on columns */
["vectric_upgrades_product_type_feature_stddev_fields"]: {
	__typename: "vectric_upgrades_product_type_feature_stddev_fields",
	fromProductType?: number,
	ranking?: number,
	toProductType?: number,
	upgradeId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_upgrades_product_type_feature_stddev_pop_fields"]: {
	__typename: "vectric_upgrades_product_type_feature_stddev_pop_fields",
	fromProductType?: number,
	ranking?: number,
	toProductType?: number,
	upgradeId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_upgrades_product_type_feature_stddev_samp_fields"]: {
	__typename: "vectric_upgrades_product_type_feature_stddev_samp_fields",
	fromProductType?: number,
	ranking?: number,
	toProductType?: number,
	upgradeId?: number
};
	/** aggregate sum on columns */
["vectric_upgrades_product_type_feature_sum_fields"]: {
	__typename: "vectric_upgrades_product_type_feature_sum_fields",
	fromProductType?: GraphQLTypes["bigint"],
	ranking?: GraphQLTypes["bigint"],
	toProductType?: GraphQLTypes["bigint"],
	upgradeId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_upgrades_product_type_feature_var_pop_fields"]: {
	__typename: "vectric_upgrades_product_type_feature_var_pop_fields",
	fromProductType?: number,
	ranking?: number,
	toProductType?: number,
	upgradeId?: number
};
	/** aggregate var_samp on columns */
["vectric_upgrades_product_type_feature_var_samp_fields"]: {
	__typename: "vectric_upgrades_product_type_feature_var_samp_fields",
	fromProductType?: number,
	ranking?: number,
	toProductType?: number,
	upgradeId?: number
};
	/** aggregate variance on columns */
["vectric_upgrades_product_type_feature_variance_fields"]: {
	__typename: "vectric_upgrades_product_type_feature_variance_fields",
	fromProductType?: number,
	ranking?: number,
	toProductType?: number,
	upgradeId?: number
};
	/** columns and relationships of "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature"]: {
	__typename: "vectric_upgrades_version_feature",
	feature?: string,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersion?: GraphQLTypes["bigint"],
	productType: GraphQLTypes["bigint"],
	/** An object relationship */
	productTypeObject: GraphQLTypes["vectric_products_producttype"],
	ranking?: GraphQLTypes["bigint"],
	/** An object relationship */
	upgradeFeatureObject?: GraphQLTypes["vectric_upgrades_feature"],
	upgradeId: GraphQLTypes["bigint"]
};
	/** aggregated selection of "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_aggregate"]: {
	__typename: "vectric_upgrades_version_feature_aggregate",
	aggregate?: GraphQLTypes["vectric_upgrades_version_feature_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_upgrades_version_feature"]>
};
	/** aggregate fields of "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_aggregate_fields"]: {
	__typename: "vectric_upgrades_version_feature_aggregate_fields",
	avg?: GraphQLTypes["vectric_upgrades_version_feature_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_upgrades_version_feature_max_fields"],
	min?: GraphQLTypes["vectric_upgrades_version_feature_min_fields"],
	stddev?: GraphQLTypes["vectric_upgrades_version_feature_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_upgrades_version_feature_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_upgrades_version_feature_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_upgrades_version_feature_sum_fields"],
	var_pop?: GraphQLTypes["vectric_upgrades_version_feature_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_upgrades_version_feature_var_samp_fields"],
	variance?: GraphQLTypes["vectric_upgrades_version_feature_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_upgrades_version_feature_avg_fields"]: {
	__typename: "vectric_upgrades_version_feature_avg_fields",
	majorVersion?: number,
	minorVersion?: number,
	productType?: number,
	ranking?: number,
	upgradeId?: number
};
	/** aggregate max on columns */
["vectric_upgrades_version_feature_max_fields"]: {
	__typename: "vectric_upgrades_version_feature_max_fields",
	feature?: string,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersion?: GraphQLTypes["bigint"],
	productType?: GraphQLTypes["bigint"],
	ranking?: GraphQLTypes["bigint"],
	upgradeId?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_upgrades_version_feature_min_fields"]: {
	__typename: "vectric_upgrades_version_feature_min_fields",
	feature?: string,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersion?: GraphQLTypes["bigint"],
	productType?: GraphQLTypes["bigint"],
	ranking?: GraphQLTypes["bigint"],
	upgradeId?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_mutation_response"]: {
	__typename: "vectric_upgrades_version_feature_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_upgrades_version_feature"]>
};
	/** aggregate stddev on columns */
["vectric_upgrades_version_feature_stddev_fields"]: {
	__typename: "vectric_upgrades_version_feature_stddev_fields",
	majorVersion?: number,
	minorVersion?: number,
	productType?: number,
	ranking?: number,
	upgradeId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_upgrades_version_feature_stddev_pop_fields"]: {
	__typename: "vectric_upgrades_version_feature_stddev_pop_fields",
	majorVersion?: number,
	minorVersion?: number,
	productType?: number,
	ranking?: number,
	upgradeId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_upgrades_version_feature_stddev_samp_fields"]: {
	__typename: "vectric_upgrades_version_feature_stddev_samp_fields",
	majorVersion?: number,
	minorVersion?: number,
	productType?: number,
	ranking?: number,
	upgradeId?: number
};
	/** aggregate sum on columns */
["vectric_upgrades_version_feature_sum_fields"]: {
	__typename: "vectric_upgrades_version_feature_sum_fields",
	majorVersion?: GraphQLTypes["bigint"],
	minorVersion?: GraphQLTypes["bigint"],
	productType?: GraphQLTypes["bigint"],
	ranking?: GraphQLTypes["bigint"],
	upgradeId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_upgrades_version_feature_var_pop_fields"]: {
	__typename: "vectric_upgrades_version_feature_var_pop_fields",
	majorVersion?: number,
	minorVersion?: number,
	productType?: number,
	ranking?: number,
	upgradeId?: number
};
	/** aggregate var_samp on columns */
["vectric_upgrades_version_feature_var_samp_fields"]: {
	__typename: "vectric_upgrades_version_feature_var_samp_fields",
	majorVersion?: number,
	minorVersion?: number,
	productType?: number,
	ranking?: number,
	upgradeId?: number
};
	/** aggregate variance on columns */
["vectric_upgrades_version_feature_variance_fields"]: {
	__typename: "vectric_upgrades_version_feature_variance_fields",
	majorVersion?: number,
	minorVersion?: number,
	productType?: number,
	ranking?: number,
	upgradeId?: number
};
	/** columns and relationships of "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees"]: {
	__typename: "vectric_usergroup_2019_attendees",
	attendeeid: GraphQLTypes["bigint"],
	bringingsample?: boolean,
	company?: string,
	customerid?: GraphQLTypes["bigint"],
	diet?: string,
	email?: string,
	fastspringreference?: string,
	firstname?: string,
	forumname?: string,
	lastname?: string,
	notes?: string,
	productid?: GraphQLTypes["bigint"],
	purchasedate?: GraphQLTypes["timestamptz"],
	reference: string,
	state?: string,
	status?: string,
	tshirtsize?: string,
	uk?: boolean
};
	/** aggregated selection of "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_aggregate"]: {
	__typename: "vectric_usergroup_2019_attendees_aggregate",
	aggregate?: GraphQLTypes["vectric_usergroup_2019_attendees_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_usergroup_2019_attendees"]>
};
	/** aggregate fields of "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_aggregate_fields"]: {
	__typename: "vectric_usergroup_2019_attendees_aggregate_fields",
	avg?: GraphQLTypes["vectric_usergroup_2019_attendees_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_usergroup_2019_attendees_max_fields"],
	min?: GraphQLTypes["vectric_usergroup_2019_attendees_min_fields"],
	stddev?: GraphQLTypes["vectric_usergroup_2019_attendees_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_usergroup_2019_attendees_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_usergroup_2019_attendees_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_usergroup_2019_attendees_sum_fields"],
	var_pop?: GraphQLTypes["vectric_usergroup_2019_attendees_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_usergroup_2019_attendees_var_samp_fields"],
	variance?: GraphQLTypes["vectric_usergroup_2019_attendees_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_usergroup_2019_attendees_avg_fields"]: {
	__typename: "vectric_usergroup_2019_attendees_avg_fields",
	attendeeid?: number,
	customerid?: number,
	productid?: number
};
	/** aggregate max on columns */
["vectric_usergroup_2019_attendees_max_fields"]: {
	__typename: "vectric_usergroup_2019_attendees_max_fields",
	attendeeid?: GraphQLTypes["bigint"],
	company?: string,
	customerid?: GraphQLTypes["bigint"],
	diet?: string,
	email?: string,
	fastspringreference?: string,
	firstname?: string,
	forumname?: string,
	lastname?: string,
	notes?: string,
	productid?: GraphQLTypes["bigint"],
	purchasedate?: GraphQLTypes["timestamptz"],
	reference?: string,
	state?: string,
	status?: string,
	tshirtsize?: string
};
	/** aggregate min on columns */
["vectric_usergroup_2019_attendees_min_fields"]: {
	__typename: "vectric_usergroup_2019_attendees_min_fields",
	attendeeid?: GraphQLTypes["bigint"],
	company?: string,
	customerid?: GraphQLTypes["bigint"],
	diet?: string,
	email?: string,
	fastspringreference?: string,
	firstname?: string,
	forumname?: string,
	lastname?: string,
	notes?: string,
	productid?: GraphQLTypes["bigint"],
	purchasedate?: GraphQLTypes["timestamptz"],
	reference?: string,
	state?: string,
	status?: string,
	tshirtsize?: string
};
	/** response of any mutation on the table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_mutation_response"]: {
	__typename: "vectric_usergroup_2019_attendees_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_usergroup_2019_attendees"]>
};
	/** aggregate stddev on columns */
["vectric_usergroup_2019_attendees_stddev_fields"]: {
	__typename: "vectric_usergroup_2019_attendees_stddev_fields",
	attendeeid?: number,
	customerid?: number,
	productid?: number
};
	/** aggregate stddev_pop on columns */
["vectric_usergroup_2019_attendees_stddev_pop_fields"]: {
	__typename: "vectric_usergroup_2019_attendees_stddev_pop_fields",
	attendeeid?: number,
	customerid?: number,
	productid?: number
};
	/** aggregate stddev_samp on columns */
["vectric_usergroup_2019_attendees_stddev_samp_fields"]: {
	__typename: "vectric_usergroup_2019_attendees_stddev_samp_fields",
	attendeeid?: number,
	customerid?: number,
	productid?: number
};
	/** aggregate sum on columns */
["vectric_usergroup_2019_attendees_sum_fields"]: {
	__typename: "vectric_usergroup_2019_attendees_sum_fields",
	attendeeid?: GraphQLTypes["bigint"],
	customerid?: GraphQLTypes["bigint"],
	productid?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_usergroup_2019_attendees_var_pop_fields"]: {
	__typename: "vectric_usergroup_2019_attendees_var_pop_fields",
	attendeeid?: number,
	customerid?: number,
	productid?: number
};
	/** aggregate var_samp on columns */
["vectric_usergroup_2019_attendees_var_samp_fields"]: {
	__typename: "vectric_usergroup_2019_attendees_var_samp_fields",
	attendeeid?: number,
	customerid?: number,
	productid?: number
};
	/** aggregate variance on columns */
["vectric_usergroup_2019_attendees_variance_fields"]: {
	__typename: "vectric_usergroup_2019_attendees_variance_fields",
	attendeeid?: number,
	customerid?: number,
	productid?: number
};
	/** columns and relationships of "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist"]: {
	__typename: "vectric_usergroup_2019_waitlist",
	attendeeid: GraphQLTypes["bigint"],
	customerid?: GraphQLTypes["bigint"],
	desiredquantity: GraphQLTypes["bigint"],
	email?: string,
	invitationdate?: GraphQLTypes["timestamptz"],
	productid?: GraphQLTypes["bigint"],
	reference: string,
	status?: string
};
	/** aggregated selection of "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_aggregate"]: {
	__typename: "vectric_usergroup_2019_waitlist_aggregate",
	aggregate?: GraphQLTypes["vectric_usergroup_2019_waitlist_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_usergroup_2019_waitlist"]>
};
	/** aggregate fields of "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_aggregate_fields"]: {
	__typename: "vectric_usergroup_2019_waitlist_aggregate_fields",
	avg?: GraphQLTypes["vectric_usergroup_2019_waitlist_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_usergroup_2019_waitlist_max_fields"],
	min?: GraphQLTypes["vectric_usergroup_2019_waitlist_min_fields"],
	stddev?: GraphQLTypes["vectric_usergroup_2019_waitlist_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_usergroup_2019_waitlist_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_usergroup_2019_waitlist_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_usergroup_2019_waitlist_sum_fields"],
	var_pop?: GraphQLTypes["vectric_usergroup_2019_waitlist_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_usergroup_2019_waitlist_var_samp_fields"],
	variance?: GraphQLTypes["vectric_usergroup_2019_waitlist_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_usergroup_2019_waitlist_avg_fields"]: {
	__typename: "vectric_usergroup_2019_waitlist_avg_fields",
	attendeeid?: number,
	customerid?: number,
	desiredquantity?: number,
	productid?: number
};
	/** aggregate max on columns */
["vectric_usergroup_2019_waitlist_max_fields"]: {
	__typename: "vectric_usergroup_2019_waitlist_max_fields",
	attendeeid?: GraphQLTypes["bigint"],
	customerid?: GraphQLTypes["bigint"],
	desiredquantity?: GraphQLTypes["bigint"],
	email?: string,
	invitationdate?: GraphQLTypes["timestamptz"],
	productid?: GraphQLTypes["bigint"],
	reference?: string,
	status?: string
};
	/** aggregate min on columns */
["vectric_usergroup_2019_waitlist_min_fields"]: {
	__typename: "vectric_usergroup_2019_waitlist_min_fields",
	attendeeid?: GraphQLTypes["bigint"],
	customerid?: GraphQLTypes["bigint"],
	desiredquantity?: GraphQLTypes["bigint"],
	email?: string,
	invitationdate?: GraphQLTypes["timestamptz"],
	productid?: GraphQLTypes["bigint"],
	reference?: string,
	status?: string
};
	/** response of any mutation on the table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_mutation_response"]: {
	__typename: "vectric_usergroup_2019_waitlist_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_usergroup_2019_waitlist"]>
};
	/** aggregate stddev on columns */
["vectric_usergroup_2019_waitlist_stddev_fields"]: {
	__typename: "vectric_usergroup_2019_waitlist_stddev_fields",
	attendeeid?: number,
	customerid?: number,
	desiredquantity?: number,
	productid?: number
};
	/** aggregate stddev_pop on columns */
["vectric_usergroup_2019_waitlist_stddev_pop_fields"]: {
	__typename: "vectric_usergroup_2019_waitlist_stddev_pop_fields",
	attendeeid?: number,
	customerid?: number,
	desiredquantity?: number,
	productid?: number
};
	/** aggregate stddev_samp on columns */
["vectric_usergroup_2019_waitlist_stddev_samp_fields"]: {
	__typename: "vectric_usergroup_2019_waitlist_stddev_samp_fields",
	attendeeid?: number,
	customerid?: number,
	desiredquantity?: number,
	productid?: number
};
	/** aggregate sum on columns */
["vectric_usergroup_2019_waitlist_sum_fields"]: {
	__typename: "vectric_usergroup_2019_waitlist_sum_fields",
	attendeeid?: GraphQLTypes["bigint"],
	customerid?: GraphQLTypes["bigint"],
	desiredquantity?: GraphQLTypes["bigint"],
	productid?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_usergroup_2019_waitlist_var_pop_fields"]: {
	__typename: "vectric_usergroup_2019_waitlist_var_pop_fields",
	attendeeid?: number,
	customerid?: number,
	desiredquantity?: number,
	productid?: number
};
	/** aggregate var_samp on columns */
["vectric_usergroup_2019_waitlist_var_samp_fields"]: {
	__typename: "vectric_usergroup_2019_waitlist_var_samp_fields",
	attendeeid?: number,
	customerid?: number,
	desiredquantity?: number,
	productid?: number
};
	/** aggregate variance on columns */
["vectric_usergroup_2019_waitlist_variance_fields"]: {
	__typename: "vectric_usergroup_2019_waitlist_variance_fields",
	attendeeid?: number,
	customerid?: number,
	desiredquantity?: number,
	productid?: number
};
	/** columns and relationships of "vectric.version_code" */
["vectric_version_code"]: {
	__typename: "vectric_version_code",
	displayVersion?: string,
	latest: boolean,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	notifying?: boolean,
	patchUrl?: string,
	releaseDate?: GraphQLTypes["date"],
	url?: string,
	versionCodeId: GraphQLTypes["bigint"],
	visible: boolean
};
	/** aggregated selection of "vectric.version_code" */
["vectric_version_code_aggregate"]: {
	__typename: "vectric_version_code_aggregate",
	aggregate?: GraphQLTypes["vectric_version_code_aggregate_fields"],
	nodes: Array<GraphQLTypes["vectric_version_code"]>
};
	/** aggregate fields of "vectric.version_code" */
["vectric_version_code_aggregate_fields"]: {
	__typename: "vectric_version_code_aggregate_fields",
	avg?: GraphQLTypes["vectric_version_code_avg_fields"],
	count: number,
	max?: GraphQLTypes["vectric_version_code_max_fields"],
	min?: GraphQLTypes["vectric_version_code_min_fields"],
	stddev?: GraphQLTypes["vectric_version_code_stddev_fields"],
	stddev_pop?: GraphQLTypes["vectric_version_code_stddev_pop_fields"],
	stddev_samp?: GraphQLTypes["vectric_version_code_stddev_samp_fields"],
	sum?: GraphQLTypes["vectric_version_code_sum_fields"],
	var_pop?: GraphQLTypes["vectric_version_code_var_pop_fields"],
	var_samp?: GraphQLTypes["vectric_version_code_var_samp_fields"],
	variance?: GraphQLTypes["vectric_version_code_variance_fields"]
};
	/** aggregate avg on columns */
["vectric_version_code_avg_fields"]: {
	__typename: "vectric_version_code_avg_fields",
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	versionCodeId?: number
};
	/** aggregate max on columns */
["vectric_version_code_max_fields"]: {
	__typename: "vectric_version_code_max_fields",
	displayVersion?: string,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	patchUrl?: string,
	releaseDate?: GraphQLTypes["date"],
	url?: string,
	versionCodeId?: GraphQLTypes["bigint"]
};
	/** aggregate min on columns */
["vectric_version_code_min_fields"]: {
	__typename: "vectric_version_code_min_fields",
	displayVersion?: string,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	patchUrl?: string,
	releaseDate?: GraphQLTypes["date"],
	url?: string,
	versionCodeId?: GraphQLTypes["bigint"]
};
	/** response of any mutation on the table "vectric.version_code" */
["vectric_version_code_mutation_response"]: {
	__typename: "vectric_version_code_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["vectric_version_code"]>
};
	/** aggregate stddev on columns */
["vectric_version_code_stddev_fields"]: {
	__typename: "vectric_version_code_stddev_fields",
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	versionCodeId?: number
};
	/** aggregate stddev_pop on columns */
["vectric_version_code_stddev_pop_fields"]: {
	__typename: "vectric_version_code_stddev_pop_fields",
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	versionCodeId?: number
};
	/** aggregate stddev_samp on columns */
["vectric_version_code_stddev_samp_fields"]: {
	__typename: "vectric_version_code_stddev_samp_fields",
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	versionCodeId?: number
};
	/** aggregate sum on columns */
["vectric_version_code_sum_fields"]: {
	__typename: "vectric_version_code_sum_fields",
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	versionCodeId?: GraphQLTypes["bigint"]
};
	/** aggregate var_pop on columns */
["vectric_version_code_var_pop_fields"]: {
	__typename: "vectric_version_code_var_pop_fields",
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	versionCodeId?: number
};
	/** aggregate var_samp on columns */
["vectric_version_code_var_samp_fields"]: {
	__typename: "vectric_version_code_var_samp_fields",
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	versionCodeId?: number
};
	/** aggregate variance on columns */
["vectric_version_code_variance_fields"]: {
	__typename: "vectric_version_code_variance_fields",
	majorVersion?: number,
	minorVersionOOX?: number,
	minorVersionOXO?: number,
	minorVersionXOO?: number,
	versionCodeId?: number
};
	/** column ordering options */
["order_by"]: order_by;
	/** select columns of table "vectric.active_memberships" */
["vectric_active_memberships_select_column"]: vectric_active_memberships_select_column;
	/** select columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_select_column"]: vectric_active_upgrades_select_column;
	/** select columns of table "vectric.allocatable_bundles" */
["vectric_allocatable_bundles_select_column"]: vectric_allocatable_bundles_select_column;
	/** select columns of table "vectric.allocatable_licence_count" */
["vectric_allocatable_licence_count_select_column"]: vectric_allocatable_licence_count_select_column;
	/** select columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_select_column"]: vectric_allocated_bundles_select_column;
	/** unique or primary key constraints on table "vectric.allocation_summary" */
["vectric_allocation_summary_constraint"]: vectric_allocation_summary_constraint;
	/** unique or primary key constraints on table "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_constraint"]: vectric_allocation_summary_file_type_constraint;
	["vectric_allocation_summary_file_type_enum"]: vectric_allocation_summary_file_type_enum;
	/** select columns of table "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_select_column"]: vectric_allocation_summary_file_type_select_column;
	/** update columns of table "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_update_column"]: vectric_allocation_summary_file_type_update_column;
	/** select columns of table "vectric.allocation_summary" */
["vectric_allocation_summary_select_column"]: vectric_allocation_summary_select_column;
	/** update columns of table "vectric.allocation_summary" */
["vectric_allocation_summary_update_column"]: vectric_allocation_summary_update_column;
	/** unique or primary key constraints on table "vectric.continents" */
["vectric_continents_constraint"]: vectric_continents_constraint;
	/** select columns of table "vectric.continents" */
["vectric_continents_select_column"]: vectric_continents_select_column;
	/** update columns of table "vectric.continents" */
["vectric_continents_update_column"]: vectric_continents_update_column;
	/** unique or primary key constraints on table "vectric.countries" */
["vectric_countries_constraint"]: vectric_countries_constraint;
	/** select columns of table "vectric.countries" */
["vectric_countries_select_column"]: vectric_countries_select_column;
	/** update columns of table "vectric.countries" */
["vectric_countries_update_column"]: vectric_countries_update_column;
	/** unique or primary key constraints on table "vectric.customer_area" */
["vectric_customer_area_constraint"]: vectric_customer_area_constraint;
	/** unique or primary key constraints on table "vectric.customer_area_file" */
["vectric_customer_area_file_constraint"]: vectric_customer_area_file_constraint;
	/** select columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_select_column"]: vectric_customer_area_file_select_column;
	/** update columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_update_column"]: vectric_customer_area_file_update_column;
	/** select columns of table "vectric.customer_area" */
["vectric_customer_area_select_column"]: vectric_customer_area_select_column;
	/** update columns of table "vectric.customer_area" */
["vectric_customer_area_update_column"]: vectric_customer_area_update_column;
	/** unique or primary key constraints on table "vectric.customer_responses" */
["vectric_customer_responses_constraint"]: vectric_customer_responses_constraint;
	/** select columns of table "vectric.customer_responses" */
["vectric_customer_responses_select_column"]: vectric_customer_responses_select_column;
	/** update columns of table "vectric.customer_responses" */
["vectric_customer_responses_update_column"]: vectric_customer_responses_update_column;
	/** select columns of table "vectric.customer_sales" */
["vectric_customer_sales_select_column"]: vectric_customer_sales_select_column;
	/** unique or primary key constraints on table "vectric.customer_status" */
["vectric_customer_status_constraint"]: vectric_customer_status_constraint;
	/** select columns of table "vectric.customer_status" */
["vectric_customer_status_select_column"]: vectric_customer_status_select_column;
	/** update columns of table "vectric.customer_status" */
["vectric_customer_status_update_column"]: vectric_customer_status_update_column;
	/** unique or primary key constraints on table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_constraint"]: vectric_customer_zd_uploads_constraint;
	/** select columns of table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_select_column"]: vectric_customer_zd_uploads_select_column;
	/** update columns of table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_update_column"]: vectric_customer_zd_uploads_update_column;
	/** unique or primary key constraints on table "vectric.download" */
["vectric_download_constraint"]: vectric_download_constraint;
	/** unique or primary key constraints on table "vectric.download_record" */
["vectric_download_record_constraint"]: vectric_download_record_constraint;
	/** select columns of table "vectric.download_record" */
["vectric_download_record_select_column"]: vectric_download_record_select_column;
	/** update columns of table "vectric.download_record" */
["vectric_download_record_update_column"]: vectric_download_record_update_column;
	/** select columns of table "vectric.download" */
["vectric_download_select_column"]: vectric_download_select_column;
	/** update columns of table "vectric.download" */
["vectric_download_update_column"]: vectric_download_update_column;
	/** unique or primary key constraints on table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_constraint"]: vectric_enhancement_tokens_constraint;
	/** select columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_select_column"]: vectric_enhancement_tokens_select_column;
	/** update columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_update_column"]: vectric_enhancement_tokens_update_column;
	/** select columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_select_column"]: vectric_entitled_product_version_code_view_select_column;
	/** unique or primary key constraints on table "vectric.entitled_products" */
["vectric_entitled_products_constraint"]: vectric_entitled_products_constraint;
	/** select columns of table "vectric.entitled_products" */
["vectric_entitled_products_select_column"]: vectric_entitled_products_select_column;
	/** update columns of table "vectric.entitled_products" */
["vectric_entitled_products_update_column"]: vectric_entitled_products_update_column;
	/** unique or primary key constraints on table "vectric.entitlement_licences" */
["vectric_entitlement_licences_constraint"]: vectric_entitlement_licences_constraint;
	/** select columns of table "vectric.entitlement_licences" */
["vectric_entitlement_licences_select_column"]: vectric_entitlement_licences_select_column;
	/** update columns of table "vectric.entitlement_licences" */
["vectric_entitlement_licences_update_column"]: vectric_entitlement_licences_update_column;
	/** unique or primary key constraints on table "vectric.entitlements" */
["vectric_entitlements_constraint"]: vectric_entitlements_constraint;
	/** select columns of table "vectric.entitlements" */
["vectric_entitlements_select_column"]: vectric_entitlements_select_column;
	/** update columns of table "vectric.entitlements" */
["vectric_entitlements_update_column"]: vectric_entitlements_update_column;
	/** unique or primary key constraints on table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_constraint"]: vectric_free_clipart_tokens_constraint;
	/** select columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_select_column"]: vectric_free_clipart_tokens_select_column;
	/** update columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_update_column"]: vectric_free_clipart_tokens_update_column;
	/** unique or primary key constraints on table "vectric.freeclipart_category" */
["vectric_freeclipart_category_constraint"]: vectric_freeclipart_category_constraint;
	/** select columns of table "vectric.freeclipart_category" */
["vectric_freeclipart_category_select_column"]: vectric_freeclipart_category_select_column;
	/** update columns of table "vectric.freeclipart_category" */
["vectric_freeclipart_category_update_column"]: vectric_freeclipart_category_update_column;
	/** unique or primary key constraints on table "vectric.freeclipart" */
["vectric_freeclipart_constraint"]: vectric_freeclipart_constraint;
	/** unique or primary key constraints on table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_constraint"]: vectric_freeclipart_download_record_constraint;
	/** select columns of table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_select_column"]: vectric_freeclipart_download_record_select_column;
	/** update columns of table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_update_column"]: vectric_freeclipart_download_record_update_column;
	/** select columns of table "vectric.freeclipart" */
["vectric_freeclipart_select_column"]: vectric_freeclipart_select_column;
	/** update columns of table "vectric.freeclipart" */
["vectric_freeclipart_update_column"]: vectric_freeclipart_update_column;
	/** select columns of table "vectric.group_info" */
["vectric_group_info_select_column"]: vectric_group_info_select_column;
	/** unique or primary key constraints on table "vectric.group_roles" */
["vectric_group_roles_constraint"]: vectric_group_roles_constraint;
	/** select columns of table "vectric.group_roles" */
["vectric_group_roles_select_column"]: vectric_group_roles_select_column;
	/** update columns of table "vectric.group_roles" */
["vectric_group_roles_update_column"]: vectric_group_roles_update_column;
	/** unique or primary key constraints on table "vectric.group_user_role" */
["vectric_group_user_role_constraint"]: vectric_group_user_role_constraint;
	/** select columns of table "vectric.group_user_role" */
["vectric_group_user_role_select_column"]: vectric_group_user_role_select_column;
	/** update columns of table "vectric.group_user_role" */
["vectric_group_user_role_update_column"]: vectric_group_user_role_update_column;
	/** unique or primary key constraints on table "vectric.groups" */
["vectric_groups_constraint"]: vectric_groups_constraint;
	/** select columns of table "vectric.groups" */
["vectric_groups_select_column"]: vectric_groups_select_column;
	/** update columns of table "vectric.groups" */
["vectric_groups_update_column"]: vectric_groups_update_column;
	/** unique or primary key constraints on table "vectric.language_codes" */
["vectric_language_codes_constraint"]: vectric_language_codes_constraint;
	/** select columns of table "vectric.language_codes" */
["vectric_language_codes_select_column"]: vectric_language_codes_select_column;
	/** update columns of table "vectric.language_codes" */
["vectric_language_codes_update_column"]: vectric_language_codes_update_column;
	/** unique or primary key constraints on table "vectric.licence_log" */
["vectric_licence_log_constraint"]: vectric_licence_log_constraint;
	/** select columns of table "vectric.licence_log" */
["vectric_licence_log_select_column"]: vectric_licence_log_select_column;
	/** update columns of table "vectric.licence_log" */
["vectric_licence_log_update_column"]: vectric_licence_log_update_column;
	/** unique or primary key constraints on table "vectric.linkshortener_links" */
["vectric_linkshortener_links_constraint"]: vectric_linkshortener_links_constraint;
	/** select columns of table "vectric.linkshortener_links" */
["vectric_linkshortener_links_select_column"]: vectric_linkshortener_links_select_column;
	/** update columns of table "vectric.linkshortener_links" */
["vectric_linkshortener_links_update_column"]: vectric_linkshortener_links_update_column;
	/** unique or primary key constraints on table "vectric.makerspace_requests" */
["vectric_makerspace_requests_constraint"]: vectric_makerspace_requests_constraint;
	/** select columns of table "vectric.makerspace_requests" */
["vectric_makerspace_requests_select_column"]: vectric_makerspace_requests_select_column;
	/** update columns of table "vectric.makerspace_requests" */
["vectric_makerspace_requests_update_column"]: vectric_makerspace_requests_update_column;
	/** unique or primary key constraints on table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_constraint"]: vectric_membership_invitation_status_constraint;
	["vectric_membership_invitation_status_enum"]: vectric_membership_invitation_status_enum;
	/** select columns of table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_select_column"]: vectric_membership_invitation_status_select_column;
	/** update columns of table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_update_column"]: vectric_membership_invitation_status_update_column;
	/** unique or primary key constraints on table "vectric.membership_invitations" */
["vectric_membership_invitations_constraint"]: vectric_membership_invitations_constraint;
	/** select columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_select_column"]: vectric_membership_invitations_select_column;
	/** update columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_update_column"]: vectric_membership_invitations_update_column;
	/** unique or primary key constraints on table "vectric.membership_roles" */
["vectric_membership_roles_constraint"]: vectric_membership_roles_constraint;
	["vectric_membership_roles_enum"]: vectric_membership_roles_enum;
	/** select columns of table "vectric.membership_roles" */
["vectric_membership_roles_select_column"]: vectric_membership_roles_select_column;
	/** update columns of table "vectric.membership_roles" */
["vectric_membership_roles_update_column"]: vectric_membership_roles_update_column;
	/** unique or primary key constraints on table "vectric.membership_status" */
["vectric_membership_status_constraint"]: vectric_membership_status_constraint;
	["vectric_membership_status_enum"]: vectric_membership_status_enum;
	/** select columns of table "vectric.membership_status" */
["vectric_membership_status_select_column"]: vectric_membership_status_select_column;
	/** update columns of table "vectric.membership_status" */
["vectric_membership_status_update_column"]: vectric_membership_status_update_column;
	/** unique or primary key constraints on table "vectric.memberships" */
["vectric_memberships_constraint"]: vectric_memberships_constraint;
	/** select columns of table "vectric.memberships" */
["vectric_memberships_select_column"]: vectric_memberships_select_column;
	/** update columns of table "vectric.memberships" */
["vectric_memberships_update_column"]: vectric_memberships_update_column;
	/** unique or primary key constraints on table "vectric.oauth_client_details" */
["vectric_oauth_client_details_constraint"]: vectric_oauth_client_details_constraint;
	/** select columns of table "vectric.oauth_client_details" */
["vectric_oauth_client_details_select_column"]: vectric_oauth_client_details_select_column;
	/** update columns of table "vectric.oauth_client_details" */
["vectric_oauth_client_details_update_column"]: vectric_oauth_client_details_update_column;
	/** select columns of table "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails_select_column"]: vectric_oem_allocation_emails_select_column;
	/** unique or primary key constraints on table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_constraint"]: vectric_oem_detailed_products_constraint;
	/** select columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_select_column"]: vectric_oem_detailed_products_select_column;
	/** update columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_update_column"]: vectric_oem_detailed_products_update_column;
	/** unique or primary key constraints on table "vectric.oem_eval_request" */
["vectric_oem_eval_request_constraint"]: vectric_oem_eval_request_constraint;
	/** select columns of table "vectric.oem_eval_request" */
["vectric_oem_eval_request_select_column"]: vectric_oem_eval_request_select_column;
	/** update columns of table "vectric.oem_eval_request" */
["vectric_oem_eval_request_update_column"]: vectric_oem_eval_request_update_column;
	/** unique or primary key constraints on table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_constraint"]: vectric_oem_fastspring_item_bundle_constraint;
	/** select columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_select_column"]: vectric_oem_fastspring_item_bundle_select_column;
	/** update columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_update_column"]: vectric_oem_fastspring_item_bundle_update_column;
	/** unique or primary key constraints on table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_constraint"]: vectric_oem_fastspring_item_constraint;
	/** select columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_select_column"]: vectric_oem_fastspring_item_select_column;
	/** update columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_update_column"]: vectric_oem_fastspring_item_update_column;
	/** unique or primary key constraints on table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_constraint"]: vectric_oem_fastspring_order_constraint;
	/** select columns of table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_select_column"]: vectric_oem_fastspring_order_select_column;
	/** update columns of table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_update_column"]: vectric_oem_fastspring_order_update_column;
	/** unique or primary key constraints on table "vectric.oem_invite_status" */
["vectric_oem_invite_status_constraint"]: vectric_oem_invite_status_constraint;
	/** select columns of table "vectric.oem_invite_status" */
["vectric_oem_invite_status_select_column"]: vectric_oem_invite_status_select_column;
	/** update columns of table "vectric.oem_invite_status" */
["vectric_oem_invite_status_update_column"]: vectric_oem_invite_status_update_column;
	/** unique or primary key constraints on table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_constraint"]: vectric_oem_licence_allocation_type_constraint;
	/** select columns of table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_select_column"]: vectric_oem_licence_allocation_type_select_column;
	/** update columns of table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_update_column"]: vectric_oem_licence_allocation_type_update_column;
	/** unique or primary key constraints on table "vectric.oem_partners" */
["vectric_oem_partners_constraint"]: vectric_oem_partners_constraint;
	/** select columns of table "vectric.oem_partners" */
["vectric_oem_partners_select_column"]: vectric_oem_partners_select_column;
	/** update columns of table "vectric.oem_partners" */
["vectric_oem_partners_update_column"]: vectric_oem_partners_update_column;
	/** unique or primary key constraints on table "vectric.oem_products" */
["vectric_oem_products_constraint"]: vectric_oem_products_constraint;
	/** select columns of table "vectric.oem_products" */
["vectric_oem_products_select_column"]: vectric_oem_products_select_column;
	/** update columns of table "vectric.oem_products" */
["vectric_oem_products_update_column"]: vectric_oem_products_update_column;
	/** unique or primary key constraints on table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_constraint"]: vectric_oem_purchase_options_constraint;
	/** select columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_select_column"]: vectric_oem_purchase_options_select_column;
	/** update columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_update_column"]: vectric_oem_purchase_options_update_column;
	/** select columns of table "vectric.oem_staff_admin_ownership" */
["vectric_oem_staff_admin_ownership_select_column"]: vectric_oem_staff_admin_ownership_select_column;
	/** unique or primary key constraints on table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_constraint"]: vectric_oem_staff_customer_constraint;
	/** select columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_select_column"]: vectric_oem_staff_customer_select_column;
	/** update columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_update_column"]: vectric_oem_staff_customer_update_column;
	/** unique or primary key constraints on table "vectric.organization_audit" */
["vectric_organization_audit_constraint"]: vectric_organization_audit_constraint;
	/** select columns of table "vectric.organization_audit" */
["vectric_organization_audit_select_column"]: vectric_organization_audit_select_column;
	/** update columns of table "vectric.organization_audit" */
["vectric_organization_audit_update_column"]: vectric_organization_audit_update_column;
	/** unique or primary key constraints on table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_constraint"]: vectric_organization_licence_scope_constraint;
	["vectric_organization_licence_scope_enum"]: vectric_organization_licence_scope_enum;
	/** select columns of table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_select_column"]: vectric_organization_licence_scope_select_column;
	/** update columns of table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_update_column"]: vectric_organization_licence_scope_update_column;
	/** select columns of table "vectric.organization_memberships_admin_access" */
["vectric_organization_memberships_admin_access_select_column"]: vectric_organization_memberships_admin_access_select_column;
	/** unique or primary key constraints on table "vectric.organization_order_items" */
["vectric_organization_order_items_constraint"]: vectric_organization_order_items_constraint;
	/** select columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_select_column"]: vectric_organization_order_items_select_column;
	/** update columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_update_column"]: vectric_organization_order_items_update_column;
	/** unique or primary key constraints on table "vectric.organization_orders" */
["vectric_organization_orders_constraint"]: vectric_organization_orders_constraint;
	/** select columns of table "vectric.organization_orders" */
["vectric_organization_orders_select_column"]: vectric_organization_orders_select_column;
	/** update columns of table "vectric.organization_orders" */
["vectric_organization_orders_update_column"]: vectric_organization_orders_update_column;
	/** unique or primary key constraints on table "vectric.organization_types" */
["vectric_organization_types_constraint"]: vectric_organization_types_constraint;
	["vectric_organization_types_enum"]: vectric_organization_types_enum;
	/** select columns of table "vectric.organization_types" */
["vectric_organization_types_select_column"]: vectric_organization_types_select_column;
	/** update columns of table "vectric.organization_types" */
["vectric_organization_types_update_column"]: vectric_organization_types_update_column;
	/** unique or primary key constraints on table "vectric.organizations" */
["vectric_organizations_constraint"]: vectric_organizations_constraint;
	/** select columns of table "vectric.organizations" */
["vectric_organizations_select_column"]: vectric_organizations_select_column;
	/** update columns of table "vectric.organizations" */
["vectric_organizations_update_column"]: vectric_organizations_update_column;
	/** unique or primary key constraints on table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_constraint"]: vectric_owned_item_assignments_constraint;
	/** select columns of table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_select_column"]: vectric_owned_item_assignments_select_column;
	/** update columns of table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_update_column"]: vectric_owned_item_assignments_update_column;
	/** unique or primary key constraints on table "vectric.owned_items" */
["vectric_owned_items_constraint"]: vectric_owned_items_constraint;
	/** select columns of table "vectric.owned_items" */
["vectric_owned_items_select_column"]: vectric_owned_items_select_column;
	/** update columns of table "vectric.owned_items" */
["vectric_owned_items_update_column"]: vectric_owned_items_update_column;
	/** unique or primary key constraints on table "vectric.owned_products" */
["vectric_owned_products_constraint"]: vectric_owned_products_constraint;
	/** select columns of table "vectric.owned_products" */
["vectric_owned_products_select_column"]: vectric_owned_products_select_column;
	/** update columns of table "vectric.owned_products" */
["vectric_owned_products_update_column"]: vectric_owned_products_update_column;
	/** unique or primary key constraints on table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_constraint"]: vectric_products_clipartcollection_links_constraint;
	/** select columns of table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_select_column"]: vectric_products_clipartcollection_links_select_column;
	/** update columns of table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_update_column"]: vectric_products_clipartcollection_links_update_column;
	/** unique or primary key constraints on table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_constraint"]: vectric_products_enhancement_eligibility_constraint;
	/** select columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_select_column"]: vectric_products_enhancement_eligibility_select_column;
	/** update columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_update_column"]: vectric_products_enhancement_eligibility_update_column;
	/** unique or primary key constraints on table "vectric.products_freeclipart" */
["vectric_products_freeclipart_constraint"]: vectric_products_freeclipart_constraint;
	/** select columns of table "vectric.products_freeclipart" */
["vectric_products_freeclipart_select_column"]: vectric_products_freeclipart_select_column;
	/** update columns of table "vectric.products_freeclipart" */
["vectric_products_freeclipart_update_column"]: vectric_products_freeclipart_update_column;
	/** unique or primary key constraints on table "vectric.products_fulfilments" */
["vectric_products_fulfilments_constraint"]: vectric_products_fulfilments_constraint;
	/** select columns of table "vectric.products_fulfilments" */
["vectric_products_fulfilments_select_column"]: vectric_products_fulfilments_select_column;
	/** update columns of table "vectric.products_fulfilments" */
["vectric_products_fulfilments_update_column"]: vectric_products_fulfilments_update_column;
	/** unique or primary key constraints on table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_constraint"]: vectric_products_fulfilmenttypes_constraint;
	/** select columns of table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_select_column"]: vectric_products_fulfilmenttypes_select_column;
	/** update columns of table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_update_column"]: vectric_products_fulfilmenttypes_update_column;
	/** unique or primary key constraints on table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_constraint"]: vectric_products_product_fulfilments_constraint;
	/** select columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_select_column"]: vectric_products_product_fulfilments_select_column;
	/** update columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_update_column"]: vectric_products_product_fulfilments_update_column;
	/** unique or primary key constraints on table "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_constraint"]: vectric_products_product_licence_type_constraint;
	["vectric_products_product_licence_type_enum"]: vectric_products_product_licence_type_enum;
	/** select columns of table "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_select_column"]: vectric_products_product_licence_type_select_column;
	/** update columns of table "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_update_column"]: vectric_products_product_licence_type_update_column;
	/** unique or primary key constraints on table "vectric.products_products" */
["vectric_products_products_constraint"]: vectric_products_products_constraint;
	/** select columns of table "vectric.products_products" */
["vectric_products_products_select_column"]: vectric_products_products_select_column;
	/** update columns of table "vectric.products_products" */
["vectric_products_products_update_column"]: vectric_products_products_update_column;
	/** unique or primary key constraints on table "vectric.products_producttype" */
["vectric_products_producttype_constraint"]: vectric_products_producttype_constraint;
	/** select columns of table "vectric.products_producttype" */
["vectric_products_producttype_select_column"]: vectric_products_producttype_select_column;
	/** update columns of table "vectric.products_producttype" */
["vectric_products_producttype_update_column"]: vectric_products_producttype_update_column;
	/** unique or primary key constraints on table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_constraint"]: vectric_products_upgrade_eligibility_constraint;
	/** select columns of table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_select_column"]: vectric_products_upgrade_eligibility_select_column;
	/** update columns of table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_update_column"]: vectric_products_upgrade_eligibility_update_column;
	/** unique or primary key constraints on table "vectric.products_versioncodes" */
["vectric_products_versioncodes_constraint"]: vectric_products_versioncodes_constraint;
	/** select columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_select_column"]: vectric_products_versioncodes_select_column;
	/** update columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_update_column"]: vectric_products_versioncodes_update_column;
	/** unique or primary key constraints on table "vectric.questions" */
["vectric_questions_constraint"]: vectric_questions_constraint;
	/** select columns of table "vectric.questions" */
["vectric_questions_select_column"]: vectric_questions_select_column;
	/** update columns of table "vectric.questions" */
["vectric_questions_update_column"]: vectric_questions_update_column;
	/** unique or primary key constraints on table "vectric.responses" */
["vectric_responses_constraint"]: vectric_responses_constraint;
	/** select columns of table "vectric.responses" */
["vectric_responses_select_column"]: vectric_responses_select_column;
	/** update columns of table "vectric.responses" */
["vectric_responses_update_column"]: vectric_responses_update_column;
	/** unique or primary key constraints on table "vectric.saleable_products" */
["vectric_saleable_products_constraint"]: vectric_saleable_products_constraint;
	/** select columns of table "vectric.saleable_products" */
["vectric_saleable_products_select_column"]: vectric_saleable_products_select_column;
	/** update columns of table "vectric.saleable_products" */
["vectric_saleable_products_update_column"]: vectric_saleable_products_update_column;
	/** unique or primary key constraints on table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_constraint"]: vectric_sales_customer_downloads_constraint;
	/** select columns of table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_select_column"]: vectric_sales_customer_downloads_select_column;
	/** update columns of table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_update_column"]: vectric_sales_customer_downloads_update_column;
	/** unique or primary key constraints on table "vectric.sales_customers" */
["vectric_sales_customers_constraint"]: vectric_sales_customers_constraint;
	/** select columns of table "vectric.sales_customers" */
["vectric_sales_customers_select_column"]: vectric_sales_customers_select_column;
	/** update columns of table "vectric.sales_customers" */
["vectric_sales_customers_update_column"]: vectric_sales_customers_update_column;
	/** unique or primary key constraints on table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_constraint"]: vectric_sales_customerupdates_constraint;
	/** select columns of table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_select_column"]: vectric_sales_customerupdates_select_column;
	/** update columns of table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_update_column"]: vectric_sales_customerupdates_update_column;
	/** unique or primary key constraints on table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_constraint"]: vectric_sales_oem_bundles_constraint;
	/** select columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_select_column"]: vectric_sales_oem_bundles_select_column;
	/** update columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_update_column"]: vectric_sales_oem_bundles_update_column;
	/** unique or primary key constraints on table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_constraint"]: vectric_sales_oemlicences_constraint;
	/** select columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_select_column"]: vectric_sales_oemlicences_select_column;
	/** update columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_update_column"]: vectric_sales_oemlicences_update_column;
	/** unique or primary key constraints on table "vectric.sales_orders" */
["vectric_sales_orders_constraint"]: vectric_sales_orders_constraint;
	/** select columns of table "vectric.sales_orders" */
["vectric_sales_orders_select_column"]: vectric_sales_orders_select_column;
	/** update columns of table "vectric.sales_orders" */
["vectric_sales_orders_update_column"]: vectric_sales_orders_update_column;
	/** unique or primary key constraints on table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_constraint"]: vectric_sales_salesitem_products_constraint;
	/** select columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_select_column"]: vectric_sales_salesitem_products_select_column;
	/** update columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_update_column"]: vectric_sales_salesitem_products_update_column;
	/** unique or primary key constraints on table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_constraint"]: vectric_sales_salesitemproduct_status_constraint;
	/** select columns of table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_select_column"]: vectric_sales_salesitemproduct_status_select_column;
	/** update columns of table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_update_column"]: vectric_sales_salesitemproduct_status_update_column;
	/** unique or primary key constraints on table "vectric.sales_salesitems" */
["vectric_sales_salesitems_constraint"]: vectric_sales_salesitems_constraint;
	/** select columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_select_column"]: vectric_sales_salesitems_select_column;
	/** update columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_update_column"]: vectric_sales_salesitems_update_column;
	/** unique or primary key constraints on table "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_constraint"]: vectric_sales_velocitytemplate_constraint;
	/** select columns of table "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_select_column"]: vectric_sales_velocitytemplate_select_column;
	/** update columns of table "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_update_column"]: vectric_sales_velocitytemplate_update_column;
	/** unique or primary key constraints on table "vectric.scheduled_emails" */
["vectric_scheduled_emails_constraint"]: vectric_scheduled_emails_constraint;
	/** select columns of table "vectric.scheduled_emails" */
["vectric_scheduled_emails_select_column"]: vectric_scheduled_emails_select_column;
	/** update columns of table "vectric.scheduled_emails" */
["vectric_scheduled_emails_update_column"]: vectric_scheduled_emails_update_column;
	/** unique or primary key constraints on table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_constraint"]: vectric_security_emailverificationtokens_constraint;
	/** select columns of table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_select_column"]: vectric_security_emailverificationtokens_select_column;
	/** update columns of table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_update_column"]: vectric_security_emailverificationtokens_update_column;
	/** select columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_select_column"]: vectric_security_group_authorities_select_column;
	/** unique or primary key constraints on table "vectric.security_group_members" */
["vectric_security_group_members_constraint"]: vectric_security_group_members_constraint;
	/** select columns of table "vectric.security_group_members" */
["vectric_security_group_members_select_column"]: vectric_security_group_members_select_column;
	/** update columns of table "vectric.security_group_members" */
["vectric_security_group_members_update_column"]: vectric_security_group_members_update_column;
	/** unique or primary key constraints on table "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_constraint"]: vectric_security_passwordresettokens_constraint;
	/** select columns of table "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_select_column"]: vectric_security_passwordresettokens_select_column;
	/** update columns of table "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_update_column"]: vectric_security_passwordresettokens_update_column;
	/** unique or primary key constraints on table "vectric.security_userinvitations" */
["vectric_security_userinvitations_constraint"]: vectric_security_userinvitations_constraint;
	/** select columns of table "vectric.security_userinvitations" */
["vectric_security_userinvitations_select_column"]: vectric_security_userinvitations_select_column;
	/** update columns of table "vectric.security_userinvitations" */
["vectric_security_userinvitations_update_column"]: vectric_security_userinvitations_update_column;
	/** unique or primary key constraints on table "vectric.security_users" */
["vectric_security_users_constraint"]: vectric_security_users_constraint;
	/** select columns of table "vectric.security_users" */
["vectric_security_users_select_column"]: vectric_security_users_select_column;
	/** update columns of table "vectric.security_users" */
["vectric_security_users_update_column"]: vectric_security_users_update_column;
	/** unique or primary key constraints on table "vectric.site_option_location" */
["vectric_site_option_location_constraint"]: vectric_site_option_location_constraint;
	/** select columns of table "vectric.site_option_location" */
["vectric_site_option_location_select_column"]: vectric_site_option_location_select_column;
	/** update columns of table "vectric.site_option_location" */
["vectric_site_option_location_update_column"]: vectric_site_option_location_update_column;
	/** unique or primary key constraints on table "vectric.site_options" */
["vectric_site_options_constraint"]: vectric_site_options_constraint;
	/** select columns of table "vectric.site_options" */
["vectric_site_options_select_column"]: vectric_site_options_select_column;
	/** update columns of table "vectric.site_options" */
["vectric_site_options_update_column"]: vectric_site_options_update_column;
	/** unique or primary key constraints on table "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_constraint"]: vectric_subscription_contract_status_constraint;
	/** select columns of table "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_select_column"]: vectric_subscription_contract_status_select_column;
	/** update columns of table "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_update_column"]: vectric_subscription_contract_status_update_column;
	/** unique or primary key constraints on table "vectric.subscription_contracts" */
["vectric_subscription_contracts_constraint"]: vectric_subscription_contracts_constraint;
	/** select columns of table "vectric.subscription_contracts" */
["vectric_subscription_contracts_select_column"]: vectric_subscription_contracts_select_column;
	/** update columns of table "vectric.subscription_contracts" */
["vectric_subscription_contracts_update_column"]: vectric_subscription_contracts_update_column;
	/** unique or primary key constraints on table "vectric.subscription_events" */
["vectric_subscription_events_constraint"]: vectric_subscription_events_constraint;
	/** select columns of table "vectric.subscription_events" */
["vectric_subscription_events_select_column"]: vectric_subscription_events_select_column;
	/** update columns of table "vectric.subscription_events" */
["vectric_subscription_events_update_column"]: vectric_subscription_events_update_column;
	/** unique or primary key constraints on table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_constraint"]: vectric_toolpath_saver_token_constraint;
	/** select columns of table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_select_column"]: vectric_toolpath_saver_token_select_column;
	/** update columns of table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_update_column"]: vectric_toolpath_saver_token_update_column;
	/** unique or primary key constraints on table "vectric.trial_order" */
["vectric_trial_order_constraint"]: vectric_trial_order_constraint;
	/** select columns of table "vectric.trial_order" */
["vectric_trial_order_select_column"]: vectric_trial_order_select_column;
	/** update columns of table "vectric.trial_order" */
["vectric_trial_order_update_column"]: vectric_trial_order_update_column;
	/** unique or primary key constraints on table "vectric.update_requests" */
["vectric_update_requests_constraint"]: vectric_update_requests_constraint;
	/** select columns of table "vectric.update_requests" */
["vectric_update_requests_select_column"]: vectric_update_requests_select_column;
	/** update columns of table "vectric.update_requests" */
["vectric_update_requests_update_column"]: vectric_update_requests_update_column;
	/** unique or primary key constraints on table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_constraint"]: vectric_upgrade_tokens_constraint;
	/** select columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_select_column"]: vectric_upgrade_tokens_select_column;
	/** update columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_update_column"]: vectric_upgrade_tokens_update_column;
	/** unique or primary key constraints on table "vectric.upgrades_feature" */
["vectric_upgrades_feature_constraint"]: vectric_upgrades_feature_constraint;
	/** select columns of table "vectric.upgrades_feature" */
["vectric_upgrades_feature_select_column"]: vectric_upgrades_feature_select_column;
	/** update columns of table "vectric.upgrades_feature" */
["vectric_upgrades_feature_update_column"]: vectric_upgrades_feature_update_column;
	/** unique or primary key constraints on table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_constraint"]: vectric_upgrades_product_type_feature_constraint;
	/** select columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_select_column"]: vectric_upgrades_product_type_feature_select_column;
	/** update columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_update_column"]: vectric_upgrades_product_type_feature_update_column;
	/** unique or primary key constraints on table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_constraint"]: vectric_upgrades_version_feature_constraint;
	/** select columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_select_column"]: vectric_upgrades_version_feature_select_column;
	/** update columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_update_column"]: vectric_upgrades_version_feature_update_column;
	/** unique or primary key constraints on table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_constraint"]: vectric_usergroup_2019_attendees_constraint;
	/** select columns of table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_select_column"]: vectric_usergroup_2019_attendees_select_column;
	/** update columns of table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_update_column"]: vectric_usergroup_2019_attendees_update_column;
	/** unique or primary key constraints on table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_constraint"]: vectric_usergroup_2019_waitlist_constraint;
	/** select columns of table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_select_column"]: vectric_usergroup_2019_waitlist_select_column;
	/** update columns of table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_update_column"]: vectric_usergroup_2019_waitlist_update_column;
	/** unique or primary key constraints on table "vectric.version_code" */
["vectric_version_code_constraint"]: vectric_version_code_constraint;
	/** select columns of table "vectric.version_code" */
["vectric_version_code_select_column"]: vectric_version_code_select_column;
	/** update columns of table "vectric.version_code" */
["vectric_version_code_update_column"]: vectric_version_code_update_column;
	["bigint"]:any;
	["bpchar"]:any;
	["date"]:any;
	["jsonb"]:any;
	["numeric"]:any;
	["smallint"]:any;
	["timestamp"]:any;
	["timestamptz"]:any;
	["uuid"]:any;
	["AddFreeClipartRequest"]: {
		clipartToken: string,
	customerId: GraphQLTypes["bigint"],
	fastspringId: string,
	registeredUsername: string
};
	["AddLicenceInput"]: {
		customerId: GraphQLTypes["bigint"],
	productName: string
};
	["AddTestBundleInput"]: {
		partnerId: GraphQLTypes["bigint"],
	productName?: string,
	quantity: number
};
	["AllocateLicenceRequest"]: {
		allocatedBy: string,
	allocationType: string,
	customerId: GraphQLTypes["bigint"],
	notes?: string,
	partnerId: number,
	productId: number,
	quantity: number
};
	["AssignmentInput"]: {
		assignedBy: string,
	email: string,
	organizationId: number,
	ownedItemId: number
};
	/** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
["Boolean_comparison_exp"]: {
		_eq?: boolean,
	_gt?: boolean,
	_gte?: boolean,
	_in?: Array<boolean>,
	_is_null?: boolean,
	_lt?: boolean,
	_lte?: boolean,
	_neq?: boolean,
	_nin?: Array<boolean>
};
	["CheckEmailForSignUpInput"]: {
		email: string
};
	["EvaluationLicenceRequest"]: {
		customerId: GraphQLTypes["bigint"],
	days: number,
	productName: string
};
	/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
["Int_comparison_exp"]: {
		_eq?: number,
	_gt?: number,
	_gte?: number,
	_in?: Array<number>,
	_is_null?: boolean,
	_lt?: number,
	_lte?: number,
	_neq?: number,
	_nin?: Array<number>
};
	["OemFSRequest"]: {
		quantity: number,
	software: string
};
	["OrganizationAddNewMemberRequest"]: {
		email: string,
	organizationId: number,
	role: string
};
	["OrganizationEditMemberRequest"]: {
		jobType: string,
	membershipId: number,
	organizationId: number,
	role: string,
	status: string
};
	["RegisterInviteInput"]: {
		invitationToken: string,
	marketingEmails: boolean,
	password: string,
	termsAndConditions: boolean
};
	["SecureFSItemsInput"]: {
		percentDiscount: number,
	product: string
};
	["SignUpInput"]: {
		captchaResponse: string,
	companyName?: string,
	customerName: string,
	email: string,
	marketingEmails: boolean,
	membershipInvitationToken?: string,
	password: string,
	product?: string,
	termsAndConditions: boolean
};
	/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
["String_comparison_exp"]: {
		_eq?: string,
	_gt?: string,
	_gte?: string,
	/** does the column match the given case-insensitive pattern */
	_ilike?: string,
	_in?: Array<string>,
	/** does the column match the given POSIX regular expression, case insensitive */
	_iregex?: string,
	_is_null?: boolean,
	/** does the column match the given pattern */
	_like?: string,
	_lt?: string,
	_lte?: string,
	_neq?: string,
	/** does the column NOT match the given case-insensitive pattern */
	_nilike?: string,
	_nin?: Array<string>,
	/** does the column NOT match the given POSIX regular expression, case insensitive */
	_niregex?: string,
	/** does the column NOT match the given pattern */
	_nlike?: string,
	/** does the column NOT match the given POSIX regular expression, case sensitive */
	_nregex?: string,
	/** does the column NOT match the given SQL regular expression */
	_nsimilar?: string,
	/** does the column match the given POSIX regular expression, case sensitive */
	_regex?: string,
	/** does the column match the given SQL regular expression */
	_similar?: string
};
	["TestOrderInput"]: {
		customerId: number,
	date?: GraphQLTypes["timestamptz"],
	licenceCode?: string,
	orderId?: string,
	productName: string,
	registeredUsername?: string,
	status?: number
};
	["TransferInput"]: {
		customerId: GraphQLTypes["bigint"],
	oipId: string,
	transferClipart?: boolean
};
	["UnassignItemInput"]: {
		ownedItemId: number
};
	/** Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'. */
["bigint_comparison_exp"]: {
		_eq?: GraphQLTypes["bigint"],
	_gt?: GraphQLTypes["bigint"],
	_gte?: GraphQLTypes["bigint"],
	_in?: Array<GraphQLTypes["bigint"]>,
	_is_null?: boolean,
	_lt?: GraphQLTypes["bigint"],
	_lte?: GraphQLTypes["bigint"],
	_neq?: GraphQLTypes["bigint"],
	_nin?: Array<GraphQLTypes["bigint"]>
};
	/** Boolean expression to compare columns of type "bpchar". All fields are combined with logical 'AND'. */
["bpchar_comparison_exp"]: {
		_eq?: GraphQLTypes["bpchar"],
	_gt?: GraphQLTypes["bpchar"],
	_gte?: GraphQLTypes["bpchar"],
	/** does the column match the given case-insensitive pattern */
	_ilike?: GraphQLTypes["bpchar"],
	_in?: Array<GraphQLTypes["bpchar"]>,
	/** does the column match the given POSIX regular expression, case insensitive */
	_iregex?: GraphQLTypes["bpchar"],
	_is_null?: boolean,
	/** does the column match the given pattern */
	_like?: GraphQLTypes["bpchar"],
	_lt?: GraphQLTypes["bpchar"],
	_lte?: GraphQLTypes["bpchar"],
	_neq?: GraphQLTypes["bpchar"],
	/** does the column NOT match the given case-insensitive pattern */
	_nilike?: GraphQLTypes["bpchar"],
	_nin?: Array<GraphQLTypes["bpchar"]>,
	/** does the column NOT match the given POSIX regular expression, case insensitive */
	_niregex?: GraphQLTypes["bpchar"],
	/** does the column NOT match the given pattern */
	_nlike?: GraphQLTypes["bpchar"],
	/** does the column NOT match the given POSIX regular expression, case sensitive */
	_nregex?: GraphQLTypes["bpchar"],
	/** does the column NOT match the given SQL regular expression */
	_nsimilar?: GraphQLTypes["bpchar"],
	/** does the column match the given POSIX regular expression, case sensitive */
	_regex?: GraphQLTypes["bpchar"],
	/** does the column match the given SQL regular expression */
	_similar?: GraphQLTypes["bpchar"]
};
	/** Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'. */
["date_comparison_exp"]: {
		_eq?: GraphQLTypes["date"],
	_gt?: GraphQLTypes["date"],
	_gte?: GraphQLTypes["date"],
	_in?: Array<GraphQLTypes["date"]>,
	_is_null?: boolean,
	_lt?: GraphQLTypes["date"],
	_lte?: GraphQLTypes["date"],
	_neq?: GraphQLTypes["date"],
	_nin?: Array<GraphQLTypes["date"]>
};
	/** Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'. */
["jsonb_comparison_exp"]: {
		/** is the column contained in the given json value */
	_contained_in?: GraphQLTypes["jsonb"],
	/** does the column contain the given json value at the top level */
	_contains?: GraphQLTypes["jsonb"],
	_eq?: GraphQLTypes["jsonb"],
	_gt?: GraphQLTypes["jsonb"],
	_gte?: GraphQLTypes["jsonb"],
	/** does the string exist as a top-level key in the column */
	_has_key?: string,
	/** do all of these strings exist as top-level keys in the column */
	_has_keys_all?: Array<string>,
	/** do any of these strings exist as top-level keys in the column */
	_has_keys_any?: Array<string>,
	_in?: Array<GraphQLTypes["jsonb"]>,
	_is_null?: boolean,
	_lt?: GraphQLTypes["jsonb"],
	_lte?: GraphQLTypes["jsonb"],
	_neq?: GraphQLTypes["jsonb"],
	_nin?: Array<GraphQLTypes["jsonb"]>
};
	/** Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'. */
["numeric_comparison_exp"]: {
		_eq?: GraphQLTypes["numeric"],
	_gt?: GraphQLTypes["numeric"],
	_gte?: GraphQLTypes["numeric"],
	_in?: Array<GraphQLTypes["numeric"]>,
	_is_null?: boolean,
	_lt?: GraphQLTypes["numeric"],
	_lte?: GraphQLTypes["numeric"],
	_neq?: GraphQLTypes["numeric"],
	_nin?: Array<GraphQLTypes["numeric"]>
};
	["sendLicenceAllocationEmailRequest"]: {
		automated: boolean,
	bundleId: string,
	email: string
};
	/** Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'. */
["smallint_comparison_exp"]: {
		_eq?: GraphQLTypes["smallint"],
	_gt?: GraphQLTypes["smallint"],
	_gte?: GraphQLTypes["smallint"],
	_in?: Array<GraphQLTypes["smallint"]>,
	_is_null?: boolean,
	_lt?: GraphQLTypes["smallint"],
	_lte?: GraphQLTypes["smallint"],
	_neq?: GraphQLTypes["smallint"],
	_nin?: Array<GraphQLTypes["smallint"]>
};
	/** Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'. */
["timestamp_comparison_exp"]: {
		_eq?: GraphQLTypes["timestamp"],
	_gt?: GraphQLTypes["timestamp"],
	_gte?: GraphQLTypes["timestamp"],
	_in?: Array<GraphQLTypes["timestamp"]>,
	_is_null?: boolean,
	_lt?: GraphQLTypes["timestamp"],
	_lte?: GraphQLTypes["timestamp"],
	_neq?: GraphQLTypes["timestamp"],
	_nin?: Array<GraphQLTypes["timestamp"]>
};
	/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
["timestamptz_comparison_exp"]: {
		_eq?: GraphQLTypes["timestamptz"],
	_gt?: GraphQLTypes["timestamptz"],
	_gte?: GraphQLTypes["timestamptz"],
	_in?: Array<GraphQLTypes["timestamptz"]>,
	_is_null?: boolean,
	_lt?: GraphQLTypes["timestamptz"],
	_lte?: GraphQLTypes["timestamptz"],
	_neq?: GraphQLTypes["timestamptz"],
	_nin?: Array<GraphQLTypes["timestamptz"]>
};
	/** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
["uuid_comparison_exp"]: {
		_eq?: GraphQLTypes["uuid"],
	_gt?: GraphQLTypes["uuid"],
	_gte?: GraphQLTypes["uuid"],
	_in?: Array<GraphQLTypes["uuid"]>,
	_is_null?: boolean,
	_lt?: GraphQLTypes["uuid"],
	_lte?: GraphQLTypes["uuid"],
	_neq?: GraphQLTypes["uuid"],
	_nin?: Array<GraphQLTypes["uuid"]>
};
	/** order by aggregate values of table "vectric.active_memberships" */
["vectric_active_memberships_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_active_memberships_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_active_memberships_max_order_by"],
	min?: GraphQLTypes["vectric_active_memberships_min_order_by"],
	stddev?: GraphQLTypes["vectric_active_memberships_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_active_memberships_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_active_memberships_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_active_memberships_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_active_memberships_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_active_memberships_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_active_memberships_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.active_memberships" */
["vectric_active_memberships_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_active_memberships_insert_input"]>
};
	/** order by avg() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_avg_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.active_memberships". All fields are combined with a logical 'AND'. */
["vectric_active_memberships_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_active_memberships_bool_exp"]>,
	_not?: GraphQLTypes["vectric_active_memberships_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_active_memberships_bool_exp"]>,
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	isAdmin?: GraphQLTypes["Boolean_comparison_exp"],
	membershipId?: GraphQLTypes["Int_comparison_exp"],
	organization?: GraphQLTypes["vectric_organizations_bool_exp"],
	organizationId?: GraphQLTypes["Int_comparison_exp"],
	role?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for inserting data into table "vectric.active_memberships" */
["vectric_active_memberships_insert_input"]: {
		customerId?: GraphQLTypes["bigint"],
	isAdmin?: boolean,
	membershipId?: number,
	organization?: GraphQLTypes["vectric_organizations_obj_rel_insert_input"],
	organizationId?: number,
	role?: string
};
	/** order by max() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_max_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"],
	role?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_min_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"],
	role?: GraphQLTypes["order_by"]
};
	/** Ordering options when selecting data from "vectric.active_memberships". */
["vectric_active_memberships_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	isAdmin?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organization?: GraphQLTypes["vectric_organizations_order_by"],
	organizationId?: GraphQLTypes["order_by"],
	role?: GraphQLTypes["order_by"]
};
	/** order by stddev() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_stddev_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_stddev_pop_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_stddev_samp_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_sum_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_var_pop_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_var_samp_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.active_memberships" */
["vectric_active_memberships_variance_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by aggregate values of table "vectric.active_upgrades" */
["vectric_active_upgrades_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_active_upgrades_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_active_upgrades_max_order_by"],
	min?: GraphQLTypes["vectric_active_upgrades_min_order_by"],
	stddev?: GraphQLTypes["vectric_active_upgrades_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_active_upgrades_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_active_upgrades_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_active_upgrades_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_active_upgrades_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_active_upgrades_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_active_upgrades_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.active_upgrades" */
["vectric_active_upgrades_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_active_upgrades_insert_input"]>
};
	/** order by avg() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_avg_order_by"]: {
		eligibility_id?: GraphQLTypes["order_by"],
	from_product_id?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	to_product_id?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.active_upgrades". All fields are combined with a logical 'AND'. */
["vectric_active_upgrades_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_active_upgrades_bool_exp"]>,
	_not?: GraphQLTypes["vectric_active_upgrades_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_active_upgrades_bool_exp"]>,
	eligibility_id?: GraphQLTypes["bigint_comparison_exp"],
	fastspring_id?: GraphQLTypes["String_comparison_exp"],
	fromProduct?: GraphQLTypes["vectric_products_products_bool_exp"],
	from_product_id?: GraphQLTypes["bigint_comparison_exp"],
	from_product_name?: GraphQLTypes["String_comparison_exp"],
	price?: GraphQLTypes["numeric_comparison_exp"],
	summary?: GraphQLTypes["String_comparison_exp"],
	toProduct?: GraphQLTypes["vectric_products_products_bool_exp"],
	to_product_id?: GraphQLTypes["bigint_comparison_exp"],
	to_product_name?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for inserting data into table "vectric.active_upgrades" */
["vectric_active_upgrades_insert_input"]: {
		eligibility_id?: GraphQLTypes["bigint"],
	fastspring_id?: string,
	fromProduct?: GraphQLTypes["vectric_products_products_obj_rel_insert_input"],
	from_product_id?: GraphQLTypes["bigint"],
	from_product_name?: string,
	price?: GraphQLTypes["numeric"],
	summary?: string,
	toProduct?: GraphQLTypes["vectric_products_products_obj_rel_insert_input"],
	to_product_id?: GraphQLTypes["bigint"],
	to_product_name?: string
};
	/** order by max() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_max_order_by"]: {
		eligibility_id?: GraphQLTypes["order_by"],
	fastspring_id?: GraphQLTypes["order_by"],
	from_product_id?: GraphQLTypes["order_by"],
	from_product_name?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	summary?: GraphQLTypes["order_by"],
	to_product_id?: GraphQLTypes["order_by"],
	to_product_name?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_min_order_by"]: {
		eligibility_id?: GraphQLTypes["order_by"],
	fastspring_id?: GraphQLTypes["order_by"],
	from_product_id?: GraphQLTypes["order_by"],
	from_product_name?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	summary?: GraphQLTypes["order_by"],
	to_product_id?: GraphQLTypes["order_by"],
	to_product_name?: GraphQLTypes["order_by"]
};
	/** Ordering options when selecting data from "vectric.active_upgrades". */
["vectric_active_upgrades_order_by"]: {
		eligibility_id?: GraphQLTypes["order_by"],
	fastspring_id?: GraphQLTypes["order_by"],
	fromProduct?: GraphQLTypes["vectric_products_products_order_by"],
	from_product_id?: GraphQLTypes["order_by"],
	from_product_name?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	summary?: GraphQLTypes["order_by"],
	toProduct?: GraphQLTypes["vectric_products_products_order_by"],
	to_product_id?: GraphQLTypes["order_by"],
	to_product_name?: GraphQLTypes["order_by"]
};
	/** order by stddev() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_stddev_order_by"]: {
		eligibility_id?: GraphQLTypes["order_by"],
	from_product_id?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	to_product_id?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_stddev_pop_order_by"]: {
		eligibility_id?: GraphQLTypes["order_by"],
	from_product_id?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	to_product_id?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_stddev_samp_order_by"]: {
		eligibility_id?: GraphQLTypes["order_by"],
	from_product_id?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	to_product_id?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_sum_order_by"]: {
		eligibility_id?: GraphQLTypes["order_by"],
	from_product_id?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	to_product_id?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_var_pop_order_by"]: {
		eligibility_id?: GraphQLTypes["order_by"],
	from_product_id?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	to_product_id?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_var_samp_order_by"]: {
		eligibility_id?: GraphQLTypes["order_by"],
	from_product_id?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	to_product_id?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.active_upgrades" */
["vectric_active_upgrades_variance_order_by"]: {
		eligibility_id?: GraphQLTypes["order_by"],
	from_product_id?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	to_product_id?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.allocatable_bundles". All fields are combined with a logical 'AND'. */
["vectric_allocatable_bundles_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_allocatable_bundles_bool_exp"]>,
	_not?: GraphQLTypes["vectric_allocatable_bundles_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_allocatable_bundles_bool_exp"]>,
	allocatableProduct?: GraphQLTypes["vectric_products_products_bool_exp"],
	bundleId?: GraphQLTypes["String_comparison_exp"],
	licences?: GraphQLTypes["vectric_sales_oemlicences_bool_exp"],
	partner?: GraphQLTypes["vectric_oem_partners_bool_exp"],
	partnerId?: GraphQLTypes["bigint_comparison_exp"],
	product?: GraphQLTypes["bigint_comparison_exp"],
	productDisplayName?: GraphQLTypes["String_comparison_exp"],
	typeDisplayName?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.allocatable_bundles" */
["vectric_allocatable_bundles_inc_input"]: {
		partnerId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.allocatable_bundles" */
["vectric_allocatable_bundles_insert_input"]: {
		allocatableProduct?: GraphQLTypes["vectric_products_products_obj_rel_insert_input"],
	bundleId?: string,
	licences?: GraphQLTypes["vectric_sales_oemlicences_arr_rel_insert_input"],
	partner?: GraphQLTypes["vectric_oem_partners_obj_rel_insert_input"],
	partnerId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["bigint"],
	productDisplayName?: string,
	typeDisplayName?: string
};
	/** Ordering options when selecting data from "vectric.allocatable_bundles". */
["vectric_allocatable_bundles_order_by"]: {
		allocatableProduct?: GraphQLTypes["vectric_products_products_order_by"],
	bundleId?: GraphQLTypes["order_by"],
	licences_aggregate?: GraphQLTypes["vectric_sales_oemlicences_aggregate_order_by"],
	partner?: GraphQLTypes["vectric_oem_partners_order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"],
	productDisplayName?: GraphQLTypes["order_by"],
	typeDisplayName?: GraphQLTypes["order_by"]
};
	/** input type for updating data in table "vectric.allocatable_bundles" */
["vectric_allocatable_bundles_set_input"]: {
		bundleId?: string,
	partnerId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["bigint"],
	productDisplayName?: string,
	typeDisplayName?: string
};
	/** Boolean expression to filter rows from the table "vectric.allocatable_licence_count". All fields are combined with a logical 'AND'. */
["vectric_allocatable_licence_count_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_allocatable_licence_count_bool_exp"]>,
	_not?: GraphQLTypes["vectric_allocatable_licence_count_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_allocatable_licence_count_bool_exp"]>,
	allocatableProduct?: GraphQLTypes["vectric_products_products_bool_exp"],
	availableCount?: GraphQLTypes["bigint_comparison_exp"],
	oemPartnerId?: GraphQLTypes["bigint_comparison_exp"],
	partner?: GraphQLTypes["vectric_oem_partners_bool_exp"],
	productId?: GraphQLTypes["bigint_comparison_exp"]
};
	/** Ordering options when selecting data from "vectric.allocatable_licence_count". */
["vectric_allocatable_licence_count_order_by"]: {
		allocatableProduct?: GraphQLTypes["vectric_products_products_order_by"],
	availableCount?: GraphQLTypes["order_by"],
	oemPartnerId?: GraphQLTypes["order_by"],
	partner?: GraphQLTypes["vectric_oem_partners_order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** order by aggregate values of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_allocated_bundles_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_allocated_bundles_max_order_by"],
	min?: GraphQLTypes["vectric_allocated_bundles_min_order_by"],
	stddev?: GraphQLTypes["vectric_allocated_bundles_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_allocated_bundles_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_allocated_bundles_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_allocated_bundles_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_allocated_bundles_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_allocated_bundles_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_allocated_bundles_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.allocated_bundles" */
["vectric_allocated_bundles_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_allocated_bundles_insert_input"]>
};
	/** order by avg() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_avg_order_by"]: {
		allocationtype?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.allocated_bundles". All fields are combined with a logical 'AND'. */
["vectric_allocated_bundles_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_allocated_bundles_bool_exp"]>,
	_not?: GraphQLTypes["vectric_allocated_bundles_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_allocated_bundles_bool_exp"]>,
	allocatedby?: GraphQLTypes["String_comparison_exp"],
	allocationbatch?: GraphQLTypes["String_comparison_exp"],
	allocationtype?: GraphQLTypes["bigint_comparison_exp"],
	bundleId?: GraphQLTypes["String_comparison_exp"],
	dateAllocated?: GraphQLTypes["timestamptz_comparison_exp"],
	dateCreated?: GraphQLTypes["timestamptz_comparison_exp"],
	dateOriginallyRegistered?: GraphQLTypes["timestamptz_comparison_exp"],
	licences?: GraphQLTypes["vectric_sales_oemlicences_bool_exp"],
	notes?: GraphQLTypes["String_comparison_exp"],
	partner?: GraphQLTypes["vectric_oem_partners_bool_exp"],
	partnerId?: GraphQLTypes["bigint_comparison_exp"],
	product?: GraphQLTypes["bigint_comparison_exp"],
	productDisplayName?: GraphQLTypes["String_comparison_exp"],
	typeDisplayName?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.allocated_bundles" */
["vectric_allocated_bundles_inc_input"]: {
		allocationtype?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.allocated_bundles" */
["vectric_allocated_bundles_insert_input"]: {
		allocatedby?: string,
	allocationbatch?: string,
	allocationtype?: GraphQLTypes["bigint"],
	bundleId?: string,
	dateAllocated?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateOriginallyRegistered?: GraphQLTypes["timestamptz"],
	licences?: GraphQLTypes["vectric_sales_oemlicences_arr_rel_insert_input"],
	notes?: string,
	partner?: GraphQLTypes["vectric_oem_partners_obj_rel_insert_input"],
	partnerId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["bigint"],
	productDisplayName?: string,
	typeDisplayName?: string
};
	/** order by max() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_max_order_by"]: {
		allocatedby?: GraphQLTypes["order_by"],
	allocationbatch?: GraphQLTypes["order_by"],
	allocationtype?: GraphQLTypes["order_by"],
	bundleId?: GraphQLTypes["order_by"],
	dateAllocated?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	dateOriginallyRegistered?: GraphQLTypes["order_by"],
	notes?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"],
	productDisplayName?: GraphQLTypes["order_by"],
	typeDisplayName?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_min_order_by"]: {
		allocatedby?: GraphQLTypes["order_by"],
	allocationbatch?: GraphQLTypes["order_by"],
	allocationtype?: GraphQLTypes["order_by"],
	bundleId?: GraphQLTypes["order_by"],
	dateAllocated?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	dateOriginallyRegistered?: GraphQLTypes["order_by"],
	notes?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"],
	productDisplayName?: GraphQLTypes["order_by"],
	typeDisplayName?: GraphQLTypes["order_by"]
};
	/** Ordering options when selecting data from "vectric.allocated_bundles". */
["vectric_allocated_bundles_order_by"]: {
		allocatedby?: GraphQLTypes["order_by"],
	allocationbatch?: GraphQLTypes["order_by"],
	allocationtype?: GraphQLTypes["order_by"],
	bundleId?: GraphQLTypes["order_by"],
	dateAllocated?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	dateOriginallyRegistered?: GraphQLTypes["order_by"],
	licences_aggregate?: GraphQLTypes["vectric_sales_oemlicences_aggregate_order_by"],
	notes?: GraphQLTypes["order_by"],
	partner?: GraphQLTypes["vectric_oem_partners_order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"],
	productDisplayName?: GraphQLTypes["order_by"],
	typeDisplayName?: GraphQLTypes["order_by"]
};
	/** input type for updating data in table "vectric.allocated_bundles" */
["vectric_allocated_bundles_set_input"]: {
		allocatedby?: string,
	allocationbatch?: string,
	allocationtype?: GraphQLTypes["bigint"],
	bundleId?: string,
	dateAllocated?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateOriginallyRegistered?: GraphQLTypes["timestamptz"],
	notes?: string,
	partnerId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["bigint"],
	productDisplayName?: string,
	typeDisplayName?: string
};
	/** order by stddev() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_stddev_order_by"]: {
		allocationtype?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_stddev_pop_order_by"]: {
		allocationtype?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_stddev_samp_order_by"]: {
		allocationtype?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_sum_order_by"]: {
		allocationtype?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_var_pop_order_by"]: {
		allocationtype?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_var_samp_order_by"]: {
		allocationtype?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.allocated_bundles" */
["vectric_allocated_bundles_variance_order_by"]: {
		allocationtype?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.allocation_summary". All fields are combined with a logical 'AND'. */
["vectric_allocation_summary_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_allocation_summary_bool_exp"]>,
	_not?: GraphQLTypes["vectric_allocation_summary_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_allocation_summary_bool_exp"]>,
	batch?: GraphQLTypes["vectric_allocated_bundles_bool_exp"],
	batchId?: GraphQLTypes["String_comparison_exp"],
	bucket?: GraphQLTypes["String_comparison_exp"],
	id?: GraphQLTypes["Int_comparison_exp"],
	location?: GraphQLTypes["String_comparison_exp"],
	partner?: GraphQLTypes["vectric_oem_partners_bool_exp"],
	partnerId?: GraphQLTypes["Int_comparison_exp"],
	signedUrl?: GraphQLTypes["String_comparison_exp"],
	type?: GraphQLTypes["vectric_allocation_summary_file_type_enum_comparison_exp"]
};
	/** Boolean expression to filter rows from the table "vectric.allocation_summary_file_type". All fields are combined with a logical 'AND'. */
["vectric_allocation_summary_file_type_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_allocation_summary_file_type_bool_exp"]>,
	_not?: GraphQLTypes["vectric_allocation_summary_file_type_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_allocation_summary_file_type_bool_exp"]>,
	type?: GraphQLTypes["String_comparison_exp"]
};
	/** Boolean expression to compare columns of type "vectric_allocation_summary_file_type_enum". All fields are combined with logical 'AND'. */
["vectric_allocation_summary_file_type_enum_comparison_exp"]: {
		_eq?: GraphQLTypes["vectric_allocation_summary_file_type_enum"],
	_in?: Array<GraphQLTypes["vectric_allocation_summary_file_type_enum"]>,
	_is_null?: boolean,
	_neq?: GraphQLTypes["vectric_allocation_summary_file_type_enum"],
	_nin?: Array<GraphQLTypes["vectric_allocation_summary_file_type_enum"]>
};
	/** input type for inserting data into table "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_insert_input"]: {
		type?: string
};
	/** on conflict condition type for table "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_on_conflict"]: {
		constraint: GraphQLTypes["vectric_allocation_summary_file_type_constraint"],
	update_columns: Array<GraphQLTypes["vectric_allocation_summary_file_type_update_column"]>,
	where?: GraphQLTypes["vectric_allocation_summary_file_type_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.allocation_summary_file_type". */
["vectric_allocation_summary_file_type_order_by"]: {
		type?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_allocation_summary_file_type */
["vectric_allocation_summary_file_type_pk_columns_input"]: {
		type: string
};
	/** input type for updating data in table "vectric.allocation_summary_file_type" */
["vectric_allocation_summary_file_type_set_input"]: {
		type?: string
};
	/** input type for incrementing numeric columns in table "vectric.allocation_summary" */
["vectric_allocation_summary_inc_input"]: {
		id?: number,
	partnerId?: number
};
	/** input type for inserting data into table "vectric.allocation_summary" */
["vectric_allocation_summary_insert_input"]: {
		batch?: GraphQLTypes["vectric_allocated_bundles_arr_rel_insert_input"],
	batchId?: string,
	bucket?: string,
	id?: number,
	location?: string,
	partner?: GraphQLTypes["vectric_oem_partners_obj_rel_insert_input"],
	partnerId?: number,
	signedUrl?: string,
	type?: GraphQLTypes["vectric_allocation_summary_file_type_enum"]
};
	/** on conflict condition type for table "vectric.allocation_summary" */
["vectric_allocation_summary_on_conflict"]: {
		constraint: GraphQLTypes["vectric_allocation_summary_constraint"],
	update_columns: Array<GraphQLTypes["vectric_allocation_summary_update_column"]>,
	where?: GraphQLTypes["vectric_allocation_summary_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.allocation_summary". */
["vectric_allocation_summary_order_by"]: {
		batchId?: GraphQLTypes["order_by"],
	batch_aggregate?: GraphQLTypes["vectric_allocated_bundles_aggregate_order_by"],
	bucket?: GraphQLTypes["order_by"],
	id?: GraphQLTypes["order_by"],
	location?: GraphQLTypes["order_by"],
	partner?: GraphQLTypes["vectric_oem_partners_order_by"],
	partnerId?: GraphQLTypes["order_by"],
	signedUrl?: GraphQLTypes["order_by"],
	type?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_allocation_summary */
["vectric_allocation_summary_pk_columns_input"]: {
		id: number
};
	/** input type for updating data in table "vectric.allocation_summary" */
["vectric_allocation_summary_set_input"]: {
		batchId?: string,
	bucket?: string,
	id?: number,
	location?: string,
	partnerId?: number,
	signedUrl?: string,
	type?: GraphQLTypes["vectric_allocation_summary_file_type_enum"]
};
	/** Boolean expression to filter rows from the table "vectric.continents". All fields are combined with a logical 'AND'. */
["vectric_continents_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_continents_bool_exp"]>,
	_not?: GraphQLTypes["vectric_continents_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_continents_bool_exp"]>,
	code?: GraphQLTypes["bpchar_comparison_exp"],
	name?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for inserting data into table "vectric.continents" */
["vectric_continents_insert_input"]: {
		/** Continent code */
	code?: GraphQLTypes["bpchar"],
	name?: string
};
	/** input type for inserting object relation for remote table "vectric.continents" */
["vectric_continents_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_continents_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_continents_on_conflict"]
};
	/** on conflict condition type for table "vectric.continents" */
["vectric_continents_on_conflict"]: {
		constraint: GraphQLTypes["vectric_continents_constraint"],
	update_columns: Array<GraphQLTypes["vectric_continents_update_column"]>,
	where?: GraphQLTypes["vectric_continents_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.continents". */
["vectric_continents_order_by"]: {
		code?: GraphQLTypes["order_by"],
	name?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_continents */
["vectric_continents_pk_columns_input"]: {
		/** Continent code */
	code: GraphQLTypes["bpchar"]
};
	/** input type for updating data in table "vectric.continents" */
["vectric_continents_set_input"]: {
		/** Continent code */
	code?: GraphQLTypes["bpchar"],
	name?: string
};
	/** Boolean expression to filter rows from the table "vectric.countries". All fields are combined with a logical 'AND'. */
["vectric_countries_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_countries_bool_exp"]>,
	_not?: GraphQLTypes["vectric_countries_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_countries_bool_exp"]>,
	code?: GraphQLTypes["bpchar_comparison_exp"],
	continent?: GraphQLTypes["vectric_continents_bool_exp"],
	continentcode?: GraphQLTypes["bpchar_comparison_exp"],
	countryid?: GraphQLTypes["bigint_comparison_exp"],
	displayorder?: GraphQLTypes["Int_comparison_exp"],
	fullname?: GraphQLTypes["String_comparison_exp"],
	iso3?: GraphQLTypes["bpchar_comparison_exp"],
	name?: GraphQLTypes["String_comparison_exp"],
	number?: GraphQLTypes["Int_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.countries" */
["vectric_countries_inc_input"]: {
		countryid?: GraphQLTypes["bigint"],
	displayorder?: number,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?: number
};
	/** input type for inserting data into table "vectric.countries" */
["vectric_countries_insert_input"]: {
		/** Two-letter country code (ISO 3166-1 alpha-2) */
	code?: GraphQLTypes["bpchar"],
	continent?: GraphQLTypes["vectric_continents_obj_rel_insert_input"],
	continentcode?: GraphQLTypes["bpchar"],
	countryid?: GraphQLTypes["bigint"],
	displayorder?: number,
	/** Full English country name */
	fullname?: string,
	/** Three-letter country code (ISO 3166-1 alpha-3) */
	iso3?: GraphQLTypes["bpchar"],
	/** English country name */
	name?: string,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?: number
};
	/** input type for inserting object relation for remote table "vectric.countries" */
["vectric_countries_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_countries_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_countries_on_conflict"]
};
	/** on conflict condition type for table "vectric.countries" */
["vectric_countries_on_conflict"]: {
		constraint: GraphQLTypes["vectric_countries_constraint"],
	update_columns: Array<GraphQLTypes["vectric_countries_update_column"]>,
	where?: GraphQLTypes["vectric_countries_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.countries". */
["vectric_countries_order_by"]: {
		code?: GraphQLTypes["order_by"],
	continent?: GraphQLTypes["vectric_continents_order_by"],
	continentcode?: GraphQLTypes["order_by"],
	countryid?: GraphQLTypes["order_by"],
	displayorder?: GraphQLTypes["order_by"],
	fullname?: GraphQLTypes["order_by"],
	iso3?: GraphQLTypes["order_by"],
	name?: GraphQLTypes["order_by"],
	number?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_countries */
["vectric_countries_pk_columns_input"]: {
		countryid: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.countries" */
["vectric_countries_set_input"]: {
		/** Two-letter country code (ISO 3166-1 alpha-2) */
	code?: GraphQLTypes["bpchar"],
	continentcode?: GraphQLTypes["bpchar"],
	countryid?: GraphQLTypes["bigint"],
	displayorder?: number,
	/** Full English country name */
	fullname?: string,
	/** Three-letter country code (ISO 3166-1 alpha-3) */
	iso3?: GraphQLTypes["bpchar"],
	/** English country name */
	name?: string,
	/** Three-digit country number (ISO 3166-1 numeric) */
	number?: number
};
	/** Boolean expression to filter rows from the table "vectric.customer_area". All fields are combined with a logical 'AND'. */
["vectric_customer_area_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_customer_area_bool_exp"]>,
	_not?: GraphQLTypes["vectric_customer_area_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_customer_area_bool_exp"]>,
	bucketName?: GraphQLTypes["String_comparison_exp"],
	customer?: GraphQLTypes["vectric_sales_customers_bool_exp"],
	customerAreaFiles?: GraphQLTypes["vectric_customer_area_file_bool_exp"],
	customerAreaId?: GraphQLTypes["bigint_comparison_exp"],
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	objectName?: GraphQLTypes["String_comparison_exp"]
};
	/** order by aggregate values of table "vectric.customer_area_file" */
["vectric_customer_area_file_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_customer_area_file_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_customer_area_file_max_order_by"],
	min?: GraphQLTypes["vectric_customer_area_file_min_order_by"],
	stddev?: GraphQLTypes["vectric_customer_area_file_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_customer_area_file_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_customer_area_file_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_customer_area_file_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_customer_area_file_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_customer_area_file_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_customer_area_file_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.customer_area_file" */
["vectric_customer_area_file_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_customer_area_file_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_customer_area_file_on_conflict"]
};
	/** order by avg() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_avg_order_by"]: {
		customerAreaFileId?: GraphQLTypes["order_by"],
	customerAreaId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.customer_area_file". All fields are combined with a logical 'AND'. */
["vectric_customer_area_file_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_customer_area_file_bool_exp"]>,
	_not?: GraphQLTypes["vectric_customer_area_file_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_customer_area_file_bool_exp"]>,
	customerArea?: GraphQLTypes["vectric_customer_area_bool_exp"],
	customerAreaFileId?: GraphQLTypes["bigint_comparison_exp"],
	customerAreaId?: GraphQLTypes["bigint_comparison_exp"],
	dateUploaded?: GraphQLTypes["timestamptz_comparison_exp"],
	fileKey?: GraphQLTypes["String_comparison_exp"],
	fileName?: GraphQLTypes["String_comparison_exp"],
	objectName?: GraphQLTypes["String_comparison_exp"],
	product?: GraphQLTypes["vectric_products_products_bool_exp"],
	productId?: GraphQLTypes["bigint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.customer_area_file" */
["vectric_customer_area_file_inc_input"]: {
		customerAreaFileId?: GraphQLTypes["bigint"],
	customerAreaId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.customer_area_file" */
["vectric_customer_area_file_insert_input"]: {
		customerArea?: GraphQLTypes["vectric_customer_area_obj_rel_insert_input"],
	customerAreaFileId?: GraphQLTypes["bigint"],
	customerAreaId?: GraphQLTypes["bigint"],
	dateUploaded?: GraphQLTypes["timestamptz"],
	fileKey?: string,
	fileName?: string,
	objectName?: string,
	product?: GraphQLTypes["vectric_products_products_obj_rel_insert_input"],
	productId?: GraphQLTypes["bigint"]
};
	/** order by max() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_max_order_by"]: {
		customerAreaFileId?: GraphQLTypes["order_by"],
	customerAreaId?: GraphQLTypes["order_by"],
	dateUploaded?: GraphQLTypes["order_by"],
	fileKey?: GraphQLTypes["order_by"],
	fileName?: GraphQLTypes["order_by"],
	objectName?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_min_order_by"]: {
		customerAreaFileId?: GraphQLTypes["order_by"],
	customerAreaId?: GraphQLTypes["order_by"],
	dateUploaded?: GraphQLTypes["order_by"],
	fileKey?: GraphQLTypes["order_by"],
	fileName?: GraphQLTypes["order_by"],
	objectName?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** on conflict condition type for table "vectric.customer_area_file" */
["vectric_customer_area_file_on_conflict"]: {
		constraint: GraphQLTypes["vectric_customer_area_file_constraint"],
	update_columns: Array<GraphQLTypes["vectric_customer_area_file_update_column"]>,
	where?: GraphQLTypes["vectric_customer_area_file_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.customer_area_file". */
["vectric_customer_area_file_order_by"]: {
		customerArea?: GraphQLTypes["vectric_customer_area_order_by"],
	customerAreaFileId?: GraphQLTypes["order_by"],
	customerAreaId?: GraphQLTypes["order_by"],
	dateUploaded?: GraphQLTypes["order_by"],
	fileKey?: GraphQLTypes["order_by"],
	fileName?: GraphQLTypes["order_by"],
	objectName?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["vectric_products_products_order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_customer_area_file */
["vectric_customer_area_file_pk_columns_input"]: {
		customerAreaFileId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.customer_area_file" */
["vectric_customer_area_file_set_input"]: {
		customerAreaFileId?: GraphQLTypes["bigint"],
	customerAreaId?: GraphQLTypes["bigint"],
	dateUploaded?: GraphQLTypes["timestamptz"],
	fileKey?: string,
	fileName?: string,
	objectName?: string,
	productId?: GraphQLTypes["bigint"]
};
	/** order by stddev() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_stddev_order_by"]: {
		customerAreaFileId?: GraphQLTypes["order_by"],
	customerAreaId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_stddev_pop_order_by"]: {
		customerAreaFileId?: GraphQLTypes["order_by"],
	customerAreaId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_stddev_samp_order_by"]: {
		customerAreaFileId?: GraphQLTypes["order_by"],
	customerAreaId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_sum_order_by"]: {
		customerAreaFileId?: GraphQLTypes["order_by"],
	customerAreaId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_var_pop_order_by"]: {
		customerAreaFileId?: GraphQLTypes["order_by"],
	customerAreaId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_var_samp_order_by"]: {
		customerAreaFileId?: GraphQLTypes["order_by"],
	customerAreaId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.customer_area_file" */
["vectric_customer_area_file_variance_order_by"]: {
		customerAreaFileId?: GraphQLTypes["order_by"],
	customerAreaId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** input type for incrementing numeric columns in table "vectric.customer_area" */
["vectric_customer_area_inc_input"]: {
		customerAreaId?: GraphQLTypes["bigint"],
	customerId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.customer_area" */
["vectric_customer_area_insert_input"]: {
		bucketName?: string,
	customer?: GraphQLTypes["vectric_sales_customers_obj_rel_insert_input"],
	customerAreaFiles?: GraphQLTypes["vectric_customer_area_file_arr_rel_insert_input"],
	customerAreaId?: GraphQLTypes["bigint"],
	customerId?: GraphQLTypes["bigint"],
	objectName?: string
};
	/** input type for inserting object relation for remote table "vectric.customer_area" */
["vectric_customer_area_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_customer_area_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_customer_area_on_conflict"]
};
	/** on conflict condition type for table "vectric.customer_area" */
["vectric_customer_area_on_conflict"]: {
		constraint: GraphQLTypes["vectric_customer_area_constraint"],
	update_columns: Array<GraphQLTypes["vectric_customer_area_update_column"]>,
	where?: GraphQLTypes["vectric_customer_area_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.customer_area". */
["vectric_customer_area_order_by"]: {
		bucketName?: GraphQLTypes["order_by"],
	customer?: GraphQLTypes["vectric_sales_customers_order_by"],
	customerAreaFiles_aggregate?: GraphQLTypes["vectric_customer_area_file_aggregate_order_by"],
	customerAreaId?: GraphQLTypes["order_by"],
	customerId?: GraphQLTypes["order_by"],
	objectName?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_customer_area */
["vectric_customer_area_pk_columns_input"]: {
		customerAreaId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.customer_area" */
["vectric_customer_area_set_input"]: {
		bucketName?: string,
	customerAreaId?: GraphQLTypes["bigint"],
	customerId?: GraphQLTypes["bigint"],
	objectName?: string
};
	/** order by aggregate values of table "vectric.customer_responses" */
["vectric_customer_responses_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_customer_responses_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_customer_responses_max_order_by"],
	min?: GraphQLTypes["vectric_customer_responses_min_order_by"],
	stddev?: GraphQLTypes["vectric_customer_responses_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_customer_responses_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_customer_responses_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_customer_responses_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_customer_responses_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_customer_responses_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_customer_responses_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.customer_responses" */
["vectric_customer_responses_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_customer_responses_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_customer_responses_on_conflict"]
};
	/** order by avg() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_avg_order_by"]: {
		customerid?: GraphQLTypes["order_by"],
	customerresponseid?: GraphQLTypes["order_by"],
	questionid?: GraphQLTypes["order_by"],
	responseid?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.customer_responses". All fields are combined with a logical 'AND'. */
["vectric_customer_responses_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_customer_responses_bool_exp"]>,
	_not?: GraphQLTypes["vectric_customer_responses_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_customer_responses_bool_exp"]>,
	customerid?: GraphQLTypes["bigint_comparison_exp"],
	customerresponseid?: GraphQLTypes["bigint_comparison_exp"],
	othertext?: GraphQLTypes["String_comparison_exp"],
	question?: GraphQLTypes["vectric_questions_bool_exp"],
	questionid?: GraphQLTypes["bigint_comparison_exp"],
	response?: GraphQLTypes["vectric_responses_bool_exp"],
	responseid?: GraphQLTypes["bigint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.customer_responses" */
["vectric_customer_responses_inc_input"]: {
		customerid?: GraphQLTypes["bigint"],
	customerresponseid?: GraphQLTypes["bigint"],
	questionid?: GraphQLTypes["bigint"],
	responseid?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.customer_responses" */
["vectric_customer_responses_insert_input"]: {
		customerid?: GraphQLTypes["bigint"],
	customerresponseid?: GraphQLTypes["bigint"],
	othertext?: string,
	question?: GraphQLTypes["vectric_questions_obj_rel_insert_input"],
	questionid?: GraphQLTypes["bigint"],
	response?: GraphQLTypes["vectric_responses_obj_rel_insert_input"],
	responseid?: GraphQLTypes["bigint"]
};
	/** order by max() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_max_order_by"]: {
		customerid?: GraphQLTypes["order_by"],
	customerresponseid?: GraphQLTypes["order_by"],
	othertext?: GraphQLTypes["order_by"],
	questionid?: GraphQLTypes["order_by"],
	responseid?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_min_order_by"]: {
		customerid?: GraphQLTypes["order_by"],
	customerresponseid?: GraphQLTypes["order_by"],
	othertext?: GraphQLTypes["order_by"],
	questionid?: GraphQLTypes["order_by"],
	responseid?: GraphQLTypes["order_by"]
};
	/** on conflict condition type for table "vectric.customer_responses" */
["vectric_customer_responses_on_conflict"]: {
		constraint: GraphQLTypes["vectric_customer_responses_constraint"],
	update_columns: Array<GraphQLTypes["vectric_customer_responses_update_column"]>,
	where?: GraphQLTypes["vectric_customer_responses_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.customer_responses". */
["vectric_customer_responses_order_by"]: {
		customerid?: GraphQLTypes["order_by"],
	customerresponseid?: GraphQLTypes["order_by"],
	othertext?: GraphQLTypes["order_by"],
	question?: GraphQLTypes["vectric_questions_order_by"],
	questionid?: GraphQLTypes["order_by"],
	response?: GraphQLTypes["vectric_responses_order_by"],
	responseid?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_customer_responses */
["vectric_customer_responses_pk_columns_input"]: {
		customerresponseid: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.customer_responses" */
["vectric_customer_responses_set_input"]: {
		customerid?: GraphQLTypes["bigint"],
	customerresponseid?: GraphQLTypes["bigint"],
	othertext?: string,
	questionid?: GraphQLTypes["bigint"],
	responseid?: GraphQLTypes["bigint"]
};
	/** order by stddev() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_stddev_order_by"]: {
		customerid?: GraphQLTypes["order_by"],
	customerresponseid?: GraphQLTypes["order_by"],
	questionid?: GraphQLTypes["order_by"],
	responseid?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_stddev_pop_order_by"]: {
		customerid?: GraphQLTypes["order_by"],
	customerresponseid?: GraphQLTypes["order_by"],
	questionid?: GraphQLTypes["order_by"],
	responseid?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_stddev_samp_order_by"]: {
		customerid?: GraphQLTypes["order_by"],
	customerresponseid?: GraphQLTypes["order_by"],
	questionid?: GraphQLTypes["order_by"],
	responseid?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_sum_order_by"]: {
		customerid?: GraphQLTypes["order_by"],
	customerresponseid?: GraphQLTypes["order_by"],
	questionid?: GraphQLTypes["order_by"],
	responseid?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_var_pop_order_by"]: {
		customerid?: GraphQLTypes["order_by"],
	customerresponseid?: GraphQLTypes["order_by"],
	questionid?: GraphQLTypes["order_by"],
	responseid?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_var_samp_order_by"]: {
		customerid?: GraphQLTypes["order_by"],
	customerresponseid?: GraphQLTypes["order_by"],
	questionid?: GraphQLTypes["order_by"],
	responseid?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.customer_responses" */
["vectric_customer_responses_variance_order_by"]: {
		customerid?: GraphQLTypes["order_by"],
	customerresponseid?: GraphQLTypes["order_by"],
	questionid?: GraphQLTypes["order_by"],
	responseid?: GraphQLTypes["order_by"]
};
	/** order by aggregate values of table "vectric.customer_sales" */
["vectric_customer_sales_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_customer_sales_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_customer_sales_max_order_by"],
	min?: GraphQLTypes["vectric_customer_sales_min_order_by"],
	stddev?: GraphQLTypes["vectric_customer_sales_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_customer_sales_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_customer_sales_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_customer_sales_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_customer_sales_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_customer_sales_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_customer_sales_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.customer_sales" */
["vectric_customer_sales_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_customer_sales_insert_input"]>
};
	/** order by avg() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_avg_order_by"]: {
		customerId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.customer_sales". All fields are combined with a logical 'AND'. */
["vectric_customer_sales_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_customer_sales_bool_exp"]>,
	_not?: GraphQLTypes["vectric_customer_sales_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_customer_sales_bool_exp"]>,
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	dateCreated?: GraphQLTypes["timestamptz_comparison_exp"],
	orderDate?: GraphQLTypes["timestamptz_comparison_exp"],
	orderId?: GraphQLTypes["String_comparison_exp"],
	salesItems?: GraphQLTypes["vectric_sales_salesitems_bool_exp"],
	veccode?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.customer_sales" */
["vectric_customer_sales_inc_input"]: {
		customerId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.customer_sales" */
["vectric_customer_sales_insert_input"]: {
		customerId?: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	orderDate?: GraphQLTypes["timestamptz"],
	orderId?: string,
	salesItems?: GraphQLTypes["vectric_sales_salesitems_arr_rel_insert_input"],
	veccode?: string
};
	/** order by max() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_max_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	orderDate?: GraphQLTypes["order_by"],
	orderId?: GraphQLTypes["order_by"],
	veccode?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_min_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	orderDate?: GraphQLTypes["order_by"],
	orderId?: GraphQLTypes["order_by"],
	veccode?: GraphQLTypes["order_by"]
};
	/** input type for inserting object relation for remote table "vectric.customer_sales" */
["vectric_customer_sales_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_customer_sales_insert_input"]
};
	/** Ordering options when selecting data from "vectric.customer_sales". */
["vectric_customer_sales_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	orderDate?: GraphQLTypes["order_by"],
	orderId?: GraphQLTypes["order_by"],
	salesItems_aggregate?: GraphQLTypes["vectric_sales_salesitems_aggregate_order_by"],
	veccode?: GraphQLTypes["order_by"]
};
	/** input type for updating data in table "vectric.customer_sales" */
["vectric_customer_sales_set_input"]: {
		customerId?: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	orderDate?: GraphQLTypes["timestamptz"],
	orderId?: string,
	veccode?: string
};
	/** order by stddev() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_stddev_order_by"]: {
		customerId?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_stddev_pop_order_by"]: {
		customerId?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_stddev_samp_order_by"]: {
		customerId?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_sum_order_by"]: {
		customerId?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_var_pop_order_by"]: {
		customerId?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_var_samp_order_by"]: {
		customerId?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.customer_sales" */
["vectric_customer_sales_variance_order_by"]: {
		customerId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.customer_status". All fields are combined with a logical 'AND'. */
["vectric_customer_status_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_customer_status_bool_exp"]>,
	_not?: GraphQLTypes["vectric_customer_status_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_customer_status_bool_exp"]>,
	status?: GraphQLTypes["String_comparison_exp"],
	statusId?: GraphQLTypes["bigint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.customer_status" */
["vectric_customer_status_inc_input"]: {
		statusId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.customer_status" */
["vectric_customer_status_insert_input"]: {
		status?: string,
	statusId?: GraphQLTypes["bigint"]
};
	/** on conflict condition type for table "vectric.customer_status" */
["vectric_customer_status_on_conflict"]: {
		constraint: GraphQLTypes["vectric_customer_status_constraint"],
	update_columns: Array<GraphQLTypes["vectric_customer_status_update_column"]>,
	where?: GraphQLTypes["vectric_customer_status_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.customer_status". */
["vectric_customer_status_order_by"]: {
		status?: GraphQLTypes["order_by"],
	statusId?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_customer_status */
["vectric_customer_status_pk_columns_input"]: {
		statusId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.customer_status" */
["vectric_customer_status_set_input"]: {
		status?: string,
	statusId?: GraphQLTypes["bigint"]
};
	/** Boolean expression to filter rows from the table "vectric.customer_zd_uploads". All fields are combined with a logical 'AND'. */
["vectric_customer_zd_uploads_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_customer_zd_uploads_bool_exp"]>,
	_not?: GraphQLTypes["vectric_customer_zd_uploads_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_customer_zd_uploads_bool_exp"]>,
	createdBy?: GraphQLTypes["bigint_comparison_exp"],
	customer?: GraphQLTypes["vectric_sales_customers_bool_exp"],
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	dateCreated?: GraphQLTypes["timestamptz_comparison_exp"],
	dateUploaded?: GraphQLTypes["timestamptz_comparison_exp"],
	location?: GraphQLTypes["String_comparison_exp"],
	objectName?: GraphQLTypes["String_comparison_exp"],
	shorturlhash?: GraphQLTypes["String_comparison_exp"],
	staff?: GraphQLTypes["vectric_sales_customers_bool_exp"],
	ticketId?: GraphQLTypes["String_comparison_exp"],
	zdUploadId?: GraphQLTypes["bigint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_inc_input"]: {
		createdBy?: GraphQLTypes["bigint"],
	customerId?: GraphQLTypes["bigint"],
	zdUploadId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_insert_input"]: {
		createdBy?: GraphQLTypes["bigint"],
	customer?: GraphQLTypes["vectric_sales_customers_obj_rel_insert_input"],
	customerId?: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateUploaded?: GraphQLTypes["timestamptz"],
	location?: string,
	objectName?: string,
	shorturlhash?: string,
	staff?: GraphQLTypes["vectric_sales_customers_obj_rel_insert_input"],
	ticketId?: string,
	zdUploadId?: GraphQLTypes["bigint"]
};
	/** on conflict condition type for table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_on_conflict"]: {
		constraint: GraphQLTypes["vectric_customer_zd_uploads_constraint"],
	update_columns: Array<GraphQLTypes["vectric_customer_zd_uploads_update_column"]>,
	where?: GraphQLTypes["vectric_customer_zd_uploads_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.customer_zd_uploads". */
["vectric_customer_zd_uploads_order_by"]: {
		createdBy?: GraphQLTypes["order_by"],
	customer?: GraphQLTypes["vectric_sales_customers_order_by"],
	customerId?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	dateUploaded?: GraphQLTypes["order_by"],
	location?: GraphQLTypes["order_by"],
	objectName?: GraphQLTypes["order_by"],
	shorturlhash?: GraphQLTypes["order_by"],
	staff?: GraphQLTypes["vectric_sales_customers_order_by"],
	ticketId?: GraphQLTypes["order_by"],
	zdUploadId?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_customer_zd_uploads */
["vectric_customer_zd_uploads_pk_columns_input"]: {
		zdUploadId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.customer_zd_uploads" */
["vectric_customer_zd_uploads_set_input"]: {
		createdBy?: GraphQLTypes["bigint"],
	customerId?: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateUploaded?: GraphQLTypes["timestamptz"],
	location?: string,
	objectName?: string,
	shorturlhash?: string,
	ticketId?: string,
	zdUploadId?: GraphQLTypes["bigint"]
};
	/** Boolean expression to filter rows from the table "vectric.download". All fields are combined with a logical 'AND'. */
["vectric_download_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_download_bool_exp"]>,
	_not?: GraphQLTypes["vectric_download_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_download_bool_exp"]>,
	bucketName?: GraphQLTypes["String_comparison_exp"],
	description?: GraphQLTypes["String_comparison_exp"],
	downloadId?: GraphQLTypes["String_comparison_exp"],
	downloadSize?: GraphQLTypes["String_comparison_exp"],
	groupId?: GraphQLTypes["String_comparison_exp"],
	name?: GraphQLTypes["String_comparison_exp"],
	objectName?: GraphQLTypes["String_comparison_exp"],
	previewImageUrl?: GraphQLTypes["String_comparison_exp"],
	uploadDate?: GraphQLTypes["timestamptz_comparison_exp"]
};
	/** input type for inserting data into table "vectric.download" */
["vectric_download_insert_input"]: {
		bucketName?: string,
	description?: string,
	downloadId?: string,
	downloadSize?: string,
	groupId?: string,
	name?: string,
	objectName?: string,
	previewImageUrl?: string,
	uploadDate?: GraphQLTypes["timestamptz"]
};
	/** on conflict condition type for table "vectric.download" */
["vectric_download_on_conflict"]: {
		constraint: GraphQLTypes["vectric_download_constraint"],
	update_columns: Array<GraphQLTypes["vectric_download_update_column"]>,
	where?: GraphQLTypes["vectric_download_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.download". */
["vectric_download_order_by"]: {
		bucketName?: GraphQLTypes["order_by"],
	description?: GraphQLTypes["order_by"],
	downloadId?: GraphQLTypes["order_by"],
	downloadSize?: GraphQLTypes["order_by"],
	groupId?: GraphQLTypes["order_by"],
	name?: GraphQLTypes["order_by"],
	objectName?: GraphQLTypes["order_by"],
	previewImageUrl?: GraphQLTypes["order_by"],
	uploadDate?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_download */
["vectric_download_pk_columns_input"]: {
		downloadId: string
};
	/** Boolean expression to filter rows from the table "vectric.download_record". All fields are combined with a logical 'AND'. */
["vectric_download_record_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_download_record_bool_exp"]>,
	_not?: GraphQLTypes["vectric_download_record_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_download_record_bool_exp"]>,
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	downloadDate?: GraphQLTypes["timestamptz_comparison_exp"],
	downloadId?: GraphQLTypes["String_comparison_exp"],
	id?: GraphQLTypes["bigint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.download_record" */
["vectric_download_record_inc_input"]: {
		customerId?: GraphQLTypes["bigint"],
	id?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.download_record" */
["vectric_download_record_insert_input"]: {
		customerId?: GraphQLTypes["bigint"],
	downloadDate?: GraphQLTypes["timestamptz"],
	downloadId?: string,
	id?: GraphQLTypes["bigint"]
};
	/** on conflict condition type for table "vectric.download_record" */
["vectric_download_record_on_conflict"]: {
		constraint: GraphQLTypes["vectric_download_record_constraint"],
	update_columns: Array<GraphQLTypes["vectric_download_record_update_column"]>,
	where?: GraphQLTypes["vectric_download_record_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.download_record". */
["vectric_download_record_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	downloadDate?: GraphQLTypes["order_by"],
	downloadId?: GraphQLTypes["order_by"],
	id?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_download_record */
["vectric_download_record_pk_columns_input"]: {
		id: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.download_record" */
["vectric_download_record_set_input"]: {
		customerId?: GraphQLTypes["bigint"],
	downloadDate?: GraphQLTypes["timestamptz"],
	downloadId?: string,
	id?: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.download" */
["vectric_download_set_input"]: {
		bucketName?: string,
	description?: string,
	downloadId?: string,
	downloadSize?: string,
	groupId?: string,
	name?: string,
	objectName?: string,
	previewImageUrl?: string,
	uploadDate?: GraphQLTypes["timestamptz"]
};
	/** order by aggregate values of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_enhancement_tokens_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_enhancement_tokens_max_order_by"],
	min?: GraphQLTypes["vectric_enhancement_tokens_min_order_by"],
	stddev?: GraphQLTypes["vectric_enhancement_tokens_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_enhancement_tokens_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_enhancement_tokens_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_enhancement_tokens_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_enhancement_tokens_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_enhancement_tokens_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_enhancement_tokens_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_enhancement_tokens_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_enhancement_tokens_on_conflict"]
};
	/** order by avg() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_avg_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	enhancementEligibilityId?: GraphQLTypes["order_by"],
	enhancementOrderItemProductId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.enhancement_tokens". All fields are combined with a logical 'AND'. */
["vectric_enhancement_tokens_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_enhancement_tokens_bool_exp"]>,
	_not?: GraphQLTypes["vectric_enhancement_tokens_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_enhancement_tokens_bool_exp"]>,
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	dateCreated?: GraphQLTypes["timestamptz_comparison_exp"],
	dateUsed?: GraphQLTypes["timestamptz_comparison_exp"],
	enhancementEligibilityId?: GraphQLTypes["bigint_comparison_exp"],
	enhancementOrderItemProductId?: GraphQLTypes["bigint_comparison_exp"],
	orderItemProductId?: GraphQLTypes["bigint_comparison_exp"],
	token?: GraphQLTypes["String_comparison_exp"],
	used?: GraphQLTypes["Boolean_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_inc_input"]: {
		customerId?: GraphQLTypes["bigint"],
	enhancementEligibilityId?: GraphQLTypes["bigint"],
	enhancementOrderItemProductId?: GraphQLTypes["bigint"],
	orderItemProductId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_insert_input"]: {
		customerId?: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateUsed?: GraphQLTypes["timestamptz"],
	enhancementEligibilityId?: GraphQLTypes["bigint"],
	enhancementOrderItemProductId?: GraphQLTypes["bigint"],
	orderItemProductId?: GraphQLTypes["bigint"],
	token?: string,
	used?: boolean
};
	/** order by max() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_max_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	dateUsed?: GraphQLTypes["order_by"],
	enhancementEligibilityId?: GraphQLTypes["order_by"],
	enhancementOrderItemProductId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	token?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_min_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	dateUsed?: GraphQLTypes["order_by"],
	enhancementEligibilityId?: GraphQLTypes["order_by"],
	enhancementOrderItemProductId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	token?: GraphQLTypes["order_by"]
};
	/** on conflict condition type for table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_on_conflict"]: {
		constraint: GraphQLTypes["vectric_enhancement_tokens_constraint"],
	update_columns: Array<GraphQLTypes["vectric_enhancement_tokens_update_column"]>,
	where?: GraphQLTypes["vectric_enhancement_tokens_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.enhancement_tokens". */
["vectric_enhancement_tokens_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	dateUsed?: GraphQLTypes["order_by"],
	enhancementEligibilityId?: GraphQLTypes["order_by"],
	enhancementOrderItemProductId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	token?: GraphQLTypes["order_by"],
	used?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_enhancement_tokens */
["vectric_enhancement_tokens_pk_columns_input"]: {
		token: string
};
	/** input type for updating data in table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_set_input"]: {
		customerId?: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateUsed?: GraphQLTypes["timestamptz"],
	enhancementEligibilityId?: GraphQLTypes["bigint"],
	enhancementOrderItemProductId?: GraphQLTypes["bigint"],
	orderItemProductId?: GraphQLTypes["bigint"],
	token?: string,
	used?: boolean
};
	/** order by stddev() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_stddev_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	enhancementEligibilityId?: GraphQLTypes["order_by"],
	enhancementOrderItemProductId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_stddev_pop_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	enhancementEligibilityId?: GraphQLTypes["order_by"],
	enhancementOrderItemProductId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_stddev_samp_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	enhancementEligibilityId?: GraphQLTypes["order_by"],
	enhancementOrderItemProductId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_sum_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	enhancementEligibilityId?: GraphQLTypes["order_by"],
	enhancementOrderItemProductId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_var_pop_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	enhancementEligibilityId?: GraphQLTypes["order_by"],
	enhancementOrderItemProductId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_var_samp_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	enhancementEligibilityId?: GraphQLTypes["order_by"],
	enhancementOrderItemProductId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.enhancement_tokens" */
["vectric_enhancement_tokens_variance_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	enhancementEligibilityId?: GraphQLTypes["order_by"],
	enhancementOrderItemProductId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"]
};
	/** order by aggregate values of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_entitled_product_version_code_view_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_entitled_product_version_code_view_max_order_by"],
	min?: GraphQLTypes["vectric_entitled_product_version_code_view_min_order_by"],
	stddev?: GraphQLTypes["vectric_entitled_product_version_code_view_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_entitled_product_version_code_view_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_entitled_product_version_code_view_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_entitled_product_version_code_view_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_entitled_product_version_code_view_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_entitled_product_version_code_view_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_entitled_product_version_code_view_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_entitled_product_version_code_view_insert_input"]>
};
	/** order by avg() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_avg_order_by"]: {
		entitled_product_id?: GraphQLTypes["order_by"],
	majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	versionCodeId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.entitled_product_version_code_view". All fields are combined with a logical 'AND'. */
["vectric_entitled_product_version_code_view_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_entitled_product_version_code_view_bool_exp"]>,
	_not?: GraphQLTypes["vectric_entitled_product_version_code_view_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_entitled_product_version_code_view_bool_exp"]>,
	displayVersion?: GraphQLTypes["String_comparison_exp"],
	entitled_product_id?: GraphQLTypes["bigint_comparison_exp"],
	latest?: GraphQLTypes["Boolean_comparison_exp"],
	majorVersion?: GraphQLTypes["bigint_comparison_exp"],
	minorVersionOOX?: GraphQLTypes["bigint_comparison_exp"],
	minorVersionOXO?: GraphQLTypes["bigint_comparison_exp"],
	minorVersionXOO?: GraphQLTypes["bigint_comparison_exp"],
	notifying?: GraphQLTypes["Boolean_comparison_exp"],
	patchUrl?: GraphQLTypes["String_comparison_exp"],
	releaseDate?: GraphQLTypes["date_comparison_exp"],
	url?: GraphQLTypes["String_comparison_exp"],
	versionCodeId?: GraphQLTypes["bigint_comparison_exp"],
	visible?: GraphQLTypes["Boolean_comparison_exp"]
};
	/** input type for inserting data into table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_insert_input"]: {
		displayVersion?: string,
	entitled_product_id?: GraphQLTypes["bigint"],
	latest?: boolean,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	notifying?: boolean,
	patchUrl?: string,
	releaseDate?: GraphQLTypes["date"],
	url?: string,
	versionCodeId?: GraphQLTypes["bigint"],
	visible?: boolean
};
	/** order by max() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_max_order_by"]: {
		displayVersion?: GraphQLTypes["order_by"],
	entitled_product_id?: GraphQLTypes["order_by"],
	majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	patchUrl?: GraphQLTypes["order_by"],
	releaseDate?: GraphQLTypes["order_by"],
	url?: GraphQLTypes["order_by"],
	versionCodeId?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_min_order_by"]: {
		displayVersion?: GraphQLTypes["order_by"],
	entitled_product_id?: GraphQLTypes["order_by"],
	majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	patchUrl?: GraphQLTypes["order_by"],
	releaseDate?: GraphQLTypes["order_by"],
	url?: GraphQLTypes["order_by"],
	versionCodeId?: GraphQLTypes["order_by"]
};
	/** Ordering options when selecting data from "vectric.entitled_product_version_code_view". */
["vectric_entitled_product_version_code_view_order_by"]: {
		displayVersion?: GraphQLTypes["order_by"],
	entitled_product_id?: GraphQLTypes["order_by"],
	latest?: GraphQLTypes["order_by"],
	majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	notifying?: GraphQLTypes["order_by"],
	patchUrl?: GraphQLTypes["order_by"],
	releaseDate?: GraphQLTypes["order_by"],
	url?: GraphQLTypes["order_by"],
	versionCodeId?: GraphQLTypes["order_by"],
	visible?: GraphQLTypes["order_by"]
};
	/** order by stddev() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_stddev_order_by"]: {
		entitled_product_id?: GraphQLTypes["order_by"],
	majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	versionCodeId?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_stddev_pop_order_by"]: {
		entitled_product_id?: GraphQLTypes["order_by"],
	majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	versionCodeId?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_stddev_samp_order_by"]: {
		entitled_product_id?: GraphQLTypes["order_by"],
	majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	versionCodeId?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_sum_order_by"]: {
		entitled_product_id?: GraphQLTypes["order_by"],
	majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	versionCodeId?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_var_pop_order_by"]: {
		entitled_product_id?: GraphQLTypes["order_by"],
	majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	versionCodeId?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_var_samp_order_by"]: {
		entitled_product_id?: GraphQLTypes["order_by"],
	majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	versionCodeId?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.entitled_product_version_code_view" */
["vectric_entitled_product_version_code_view_variance_order_by"]: {
		entitled_product_id?: GraphQLTypes["order_by"],
	majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	versionCodeId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.entitled_products". All fields are combined with a logical 'AND'. */
["vectric_entitled_products_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_entitled_products_bool_exp"]>,
	_not?: GraphQLTypes["vectric_entitled_products_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_entitled_products_bool_exp"]>,
	enabled?: GraphQLTypes["Boolean_comparison_exp"],
	latestVersion?: GraphQLTypes["vectric_products_versioncodes_bool_exp"],
	latestVersionId?: GraphQLTypes["Int_comparison_exp"],
	licenceType?: GraphQLTypes["vectric_products_product_licence_type_enum_comparison_exp"],
	productId?: GraphQLTypes["Int_comparison_exp"],
	productName?: GraphQLTypes["String_comparison_exp"],
	productType?: GraphQLTypes["vectric_products_producttype_bool_exp"],
	productTypeId?: GraphQLTypes["Int_comparison_exp"],
	releaseDate?: GraphQLTypes["timestamp_comparison_exp"],
	requiresLicence?: GraphQLTypes["Boolean_comparison_exp"],
	versions?: GraphQLTypes["vectric_entitled_product_version_code_view_bool_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.entitled_products" */
["vectric_entitled_products_inc_input"]: {
		latestVersionId?: number,
	productId?: number,
	productTypeId?: number
};
	/** input type for inserting data into table "vectric.entitled_products" */
["vectric_entitled_products_insert_input"]: {
		enabled?: boolean,
	latestVersion?: GraphQLTypes["vectric_products_versioncodes_obj_rel_insert_input"],
	latestVersionId?: number,
	licenceType?: GraphQLTypes["vectric_products_product_licence_type_enum"],
	productId?: number,
	productName?: string,
	productType?: GraphQLTypes["vectric_products_producttype_obj_rel_insert_input"],
	productTypeId?: number,
	releaseDate?: GraphQLTypes["timestamp"],
	requiresLicence?: boolean,
	versions?: GraphQLTypes["vectric_entitled_product_version_code_view_arr_rel_insert_input"]
};
	/** input type for inserting object relation for remote table "vectric.entitled_products" */
["vectric_entitled_products_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_entitled_products_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_entitled_products_on_conflict"]
};
	/** on conflict condition type for table "vectric.entitled_products" */
["vectric_entitled_products_on_conflict"]: {
		constraint: GraphQLTypes["vectric_entitled_products_constraint"],
	update_columns: Array<GraphQLTypes["vectric_entitled_products_update_column"]>,
	where?: GraphQLTypes["vectric_entitled_products_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.entitled_products". */
["vectric_entitled_products_order_by"]: {
		enabled?: GraphQLTypes["order_by"],
	latestVersion?: GraphQLTypes["vectric_products_versioncodes_order_by"],
	latestVersionId?: GraphQLTypes["order_by"],
	licenceType?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	productName?: GraphQLTypes["order_by"],
	productType?: GraphQLTypes["vectric_products_producttype_order_by"],
	productTypeId?: GraphQLTypes["order_by"],
	releaseDate?: GraphQLTypes["order_by"],
	requiresLicence?: GraphQLTypes["order_by"],
	versions_aggregate?: GraphQLTypes["vectric_entitled_product_version_code_view_aggregate_order_by"]
};
	/** primary key columns input for table: vectric_entitled_products */
["vectric_entitled_products_pk_columns_input"]: {
		productId: number
};
	/** input type for updating data in table "vectric.entitled_products" */
["vectric_entitled_products_set_input"]: {
		enabled?: boolean,
	latestVersionId?: number,
	licenceType?: GraphQLTypes["vectric_products_product_licence_type_enum"],
	productId?: number,
	productName?: string,
	productTypeId?: number,
	releaseDate?: GraphQLTypes["timestamp"],
	requiresLicence?: boolean
};
	/** Boolean expression to filter rows from the table "vectric.entitlement_licences". All fields are combined with a logical 'AND'. */
["vectric_entitlement_licences_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_entitlement_licences_bool_exp"]>,
	_not?: GraphQLTypes["vectric_entitlement_licences_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_entitlement_licences_bool_exp"]>,
	entitledProduct?: GraphQLTypes["vectric_entitled_products_bool_exp"],
	entitlement?: GraphQLTypes["vectric_entitlements_bool_exp"],
	entitlementId?: GraphQLTypes["Int_comparison_exp"],
	entitlementLicenceId?: GraphQLTypes["Int_comparison_exp"],
	licenceCode?: GraphQLTypes["String_comparison_exp"],
	licenceIdAsDisplay?: GraphQLTypes["Boolean_comparison_exp"],
	licenceType?: GraphQLTypes["String_comparison_exp"],
	productId?: GraphQLTypes["Int_comparison_exp"],
	registeredUsername?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.entitlement_licences" */
["vectric_entitlement_licences_inc_input"]: {
		entitlementId?: number,
	entitlementLicenceId?: number,
	productId?: number
};
	/** input type for inserting data into table "vectric.entitlement_licences" */
["vectric_entitlement_licences_insert_input"]: {
		entitledProduct?: GraphQLTypes["vectric_entitled_products_obj_rel_insert_input"],
	entitlement?: GraphQLTypes["vectric_entitlements_obj_rel_insert_input"],
	entitlementId?: number,
	entitlementLicenceId?: number,
	licenceCode?: string,
	licenceIdAsDisplay?: boolean,
	licenceType?: string,
	productId?: number,
	registeredUsername?: string
};
	/** input type for inserting object relation for remote table "vectric.entitlement_licences" */
["vectric_entitlement_licences_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_entitlement_licences_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_entitlement_licences_on_conflict"]
};
	/** on conflict condition type for table "vectric.entitlement_licences" */
["vectric_entitlement_licences_on_conflict"]: {
		constraint: GraphQLTypes["vectric_entitlement_licences_constraint"],
	update_columns: Array<GraphQLTypes["vectric_entitlement_licences_update_column"]>,
	where?: GraphQLTypes["vectric_entitlement_licences_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.entitlement_licences". */
["vectric_entitlement_licences_order_by"]: {
		entitledProduct?: GraphQLTypes["vectric_entitled_products_order_by"],
	entitlement?: GraphQLTypes["vectric_entitlements_order_by"],
	entitlementId?: GraphQLTypes["order_by"],
	entitlementLicenceId?: GraphQLTypes["order_by"],
	licenceCode?: GraphQLTypes["order_by"],
	licenceIdAsDisplay?: GraphQLTypes["order_by"],
	licenceType?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	registeredUsername?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_entitlement_licences */
["vectric_entitlement_licences_pk_columns_input"]: {
		entitlementLicenceId: number
};
	/** input type for updating data in table "vectric.entitlement_licences" */
["vectric_entitlement_licences_set_input"]: {
		entitlementId?: number,
	entitlementLicenceId?: number,
	licenceCode?: string,
	licenceIdAsDisplay?: boolean,
	licenceType?: string,
	productId?: number,
	registeredUsername?: string
};
	/** order by aggregate values of table "vectric.entitlements" */
["vectric_entitlements_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_entitlements_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_entitlements_max_order_by"],
	min?: GraphQLTypes["vectric_entitlements_min_order_by"],
	stddev?: GraphQLTypes["vectric_entitlements_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_entitlements_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_entitlements_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_entitlements_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_entitlements_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_entitlements_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_entitlements_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.entitlements" */
["vectric_entitlements_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_entitlements_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_entitlements_on_conflict"]
};
	/** order by avg() on columns of table "vectric.entitlements" */
["vectric_entitlements_avg_order_by"]: {
		entitledProductId?: GraphQLTypes["order_by"],
	entitlementId?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	statusId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.entitlements". All fields are combined with a logical 'AND'. */
["vectric_entitlements_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_entitlements_bool_exp"]>,
	_not?: GraphQLTypes["vectric_entitlements_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_entitlements_bool_exp"]>,
	amendedBy?: GraphQLTypes["String_comparison_exp"],
	createdBy?: GraphQLTypes["String_comparison_exp"],
	dateAmended?: GraphQLTypes["timestamp_comparison_exp"],
	dateCreated?: GraphQLTypes["timestamp_comparison_exp"],
	entitledProduct?: GraphQLTypes["vectric_entitled_products_bool_exp"],
	entitledProductId?: GraphQLTypes["Int_comparison_exp"],
	entitlementId?: GraphQLTypes["Int_comparison_exp"],
	licence?: GraphQLTypes["vectric_entitlement_licences_bool_exp"],
	ownedItem?: GraphQLTypes["vectric_owned_items_bool_exp"],
	ownedItemId?: GraphQLTypes["Int_comparison_exp"],
	statusId?: GraphQLTypes["Int_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.entitlements" */
["vectric_entitlements_inc_input"]: {
		entitledProductId?: number,
	entitlementId?: number,
	ownedItemId?: number,
	statusId?: number
};
	/** input type for inserting data into table "vectric.entitlements" */
["vectric_entitlements_insert_input"]: {
		amendedBy?: string,
	createdBy?: string,
	dateAmended?: GraphQLTypes["timestamp"],
	dateCreated?: GraphQLTypes["timestamp"],
	entitledProduct?: GraphQLTypes["vectric_entitled_products_obj_rel_insert_input"],
	entitledProductId?: number,
	entitlementId?: number,
	licence?: GraphQLTypes["vectric_entitlement_licences_obj_rel_insert_input"],
	ownedItem?: GraphQLTypes["vectric_owned_items_obj_rel_insert_input"],
	ownedItemId?: number,
	statusId?: number
};
	/** order by max() on columns of table "vectric.entitlements" */
["vectric_entitlements_max_order_by"]: {
		amendedBy?: GraphQLTypes["order_by"],
	createdBy?: GraphQLTypes["order_by"],
	dateAmended?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	entitledProductId?: GraphQLTypes["order_by"],
	entitlementId?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	statusId?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.entitlements" */
["vectric_entitlements_min_order_by"]: {
		amendedBy?: GraphQLTypes["order_by"],
	createdBy?: GraphQLTypes["order_by"],
	dateAmended?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	entitledProductId?: GraphQLTypes["order_by"],
	entitlementId?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	statusId?: GraphQLTypes["order_by"]
};
	/** input type for inserting object relation for remote table "vectric.entitlements" */
["vectric_entitlements_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_entitlements_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_entitlements_on_conflict"]
};
	/** on conflict condition type for table "vectric.entitlements" */
["vectric_entitlements_on_conflict"]: {
		constraint: GraphQLTypes["vectric_entitlements_constraint"],
	update_columns: Array<GraphQLTypes["vectric_entitlements_update_column"]>,
	where?: GraphQLTypes["vectric_entitlements_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.entitlements". */
["vectric_entitlements_order_by"]: {
		amendedBy?: GraphQLTypes["order_by"],
	createdBy?: GraphQLTypes["order_by"],
	dateAmended?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	entitledProduct?: GraphQLTypes["vectric_entitled_products_order_by"],
	entitledProductId?: GraphQLTypes["order_by"],
	entitlementId?: GraphQLTypes["order_by"],
	licence?: GraphQLTypes["vectric_entitlement_licences_order_by"],
	ownedItem?: GraphQLTypes["vectric_owned_items_order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	statusId?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_entitlements */
["vectric_entitlements_pk_columns_input"]: {
		entitlementId: number
};
	/** input type for updating data in table "vectric.entitlements" */
["vectric_entitlements_set_input"]: {
		amendedBy?: string,
	createdBy?: string,
	dateAmended?: GraphQLTypes["timestamp"],
	dateCreated?: GraphQLTypes["timestamp"],
	entitledProductId?: number,
	entitlementId?: number,
	ownedItemId?: number,
	statusId?: number
};
	/** order by stddev() on columns of table "vectric.entitlements" */
["vectric_entitlements_stddev_order_by"]: {
		entitledProductId?: GraphQLTypes["order_by"],
	entitlementId?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	statusId?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.entitlements" */
["vectric_entitlements_stddev_pop_order_by"]: {
		entitledProductId?: GraphQLTypes["order_by"],
	entitlementId?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	statusId?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.entitlements" */
["vectric_entitlements_stddev_samp_order_by"]: {
		entitledProductId?: GraphQLTypes["order_by"],
	entitlementId?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	statusId?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.entitlements" */
["vectric_entitlements_sum_order_by"]: {
		entitledProductId?: GraphQLTypes["order_by"],
	entitlementId?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	statusId?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.entitlements" */
["vectric_entitlements_var_pop_order_by"]: {
		entitledProductId?: GraphQLTypes["order_by"],
	entitlementId?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	statusId?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.entitlements" */
["vectric_entitlements_var_samp_order_by"]: {
		entitledProductId?: GraphQLTypes["order_by"],
	entitlementId?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	statusId?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.entitlements" */
["vectric_entitlements_variance_order_by"]: {
		entitledProductId?: GraphQLTypes["order_by"],
	entitlementId?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	statusId?: GraphQLTypes["order_by"]
};
	/** order by aggregate values of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_free_clipart_tokens_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_free_clipart_tokens_max_order_by"],
	min?: GraphQLTypes["vectric_free_clipart_tokens_min_order_by"],
	stddev?: GraphQLTypes["vectric_free_clipart_tokens_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_free_clipart_tokens_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_free_clipart_tokens_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_free_clipart_tokens_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_free_clipart_tokens_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_free_clipart_tokens_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_free_clipart_tokens_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_free_clipart_tokens_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_free_clipart_tokens_on_conflict"]
};
	/** order by avg() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_avg_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	redeemableTokenOip?: GraphQLTypes["order_by"],
	replacementOip?: GraphQLTypes["order_by"],
	v10Product?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.free_clipart_tokens". All fields are combined with a logical 'AND'. */
["vectric_free_clipart_tokens_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_free_clipart_tokens_bool_exp"]>,
	_not?: GraphQLTypes["vectric_free_clipart_tokens_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_free_clipart_tokens_bool_exp"]>,
	clipartToken?: GraphQLTypes["String_comparison_exp"],
	completed?: GraphQLTypes["Boolean_comparison_exp"],
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	dateAdded?: GraphQLTypes["timestamptz_comparison_exp"],
	dateSelected?: GraphQLTypes["timestamptz_comparison_exp"],
	redeemableToken?: GraphQLTypes["vectric_sales_salesitem_products_bool_exp"],
	redeemableTokenOip?: GraphQLTypes["bigint_comparison_exp"],
	replacementOip?: GraphQLTypes["bigint_comparison_exp"],
	toV10Product?: GraphQLTypes["vectric_products_products_bool_exp"],
	v10Product?: GraphQLTypes["bigint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_inc_input"]: {
		customerId?: GraphQLTypes["bigint"],
	redeemableTokenOip?: GraphQLTypes["bigint"],
	replacementOip?: GraphQLTypes["bigint"],
	v10Product?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_insert_input"]: {
		clipartToken?: string,
	completed?: boolean,
	customerId?: GraphQLTypes["bigint"],
	dateAdded?: GraphQLTypes["timestamptz"],
	dateSelected?: GraphQLTypes["timestamptz"],
	redeemableToken?: GraphQLTypes["vectric_sales_salesitem_products_obj_rel_insert_input"],
	redeemableTokenOip?: GraphQLTypes["bigint"],
	replacementOip?: GraphQLTypes["bigint"],
	toV10Product?: GraphQLTypes["vectric_products_products_obj_rel_insert_input"],
	v10Product?: GraphQLTypes["bigint"]
};
	/** order by max() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_max_order_by"]: {
		clipartToken?: GraphQLTypes["order_by"],
	customerId?: GraphQLTypes["order_by"],
	dateAdded?: GraphQLTypes["order_by"],
	dateSelected?: GraphQLTypes["order_by"],
	redeemableTokenOip?: GraphQLTypes["order_by"],
	replacementOip?: GraphQLTypes["order_by"],
	v10Product?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_min_order_by"]: {
		clipartToken?: GraphQLTypes["order_by"],
	customerId?: GraphQLTypes["order_by"],
	dateAdded?: GraphQLTypes["order_by"],
	dateSelected?: GraphQLTypes["order_by"],
	redeemableTokenOip?: GraphQLTypes["order_by"],
	replacementOip?: GraphQLTypes["order_by"],
	v10Product?: GraphQLTypes["order_by"]
};
	/** on conflict condition type for table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_on_conflict"]: {
		constraint: GraphQLTypes["vectric_free_clipart_tokens_constraint"],
	update_columns: Array<GraphQLTypes["vectric_free_clipart_tokens_update_column"]>,
	where?: GraphQLTypes["vectric_free_clipart_tokens_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.free_clipart_tokens". */
["vectric_free_clipart_tokens_order_by"]: {
		clipartToken?: GraphQLTypes["order_by"],
	completed?: GraphQLTypes["order_by"],
	customerId?: GraphQLTypes["order_by"],
	dateAdded?: GraphQLTypes["order_by"],
	dateSelected?: GraphQLTypes["order_by"],
	redeemableToken?: GraphQLTypes["vectric_sales_salesitem_products_order_by"],
	redeemableTokenOip?: GraphQLTypes["order_by"],
	replacementOip?: GraphQLTypes["order_by"],
	toV10Product?: GraphQLTypes["vectric_products_products_order_by"],
	v10Product?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_free_clipart_tokens */
["vectric_free_clipart_tokens_pk_columns_input"]: {
		clipartToken: string
};
	/** input type for updating data in table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_set_input"]: {
		clipartToken?: string,
	completed?: boolean,
	customerId?: GraphQLTypes["bigint"],
	dateAdded?: GraphQLTypes["timestamptz"],
	dateSelected?: GraphQLTypes["timestamptz"],
	redeemableTokenOip?: GraphQLTypes["bigint"],
	replacementOip?: GraphQLTypes["bigint"],
	v10Product?: GraphQLTypes["bigint"]
};
	/** order by stddev() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_stddev_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	redeemableTokenOip?: GraphQLTypes["order_by"],
	replacementOip?: GraphQLTypes["order_by"],
	v10Product?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_stddev_pop_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	redeemableTokenOip?: GraphQLTypes["order_by"],
	replacementOip?: GraphQLTypes["order_by"],
	v10Product?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_stddev_samp_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	redeemableTokenOip?: GraphQLTypes["order_by"],
	replacementOip?: GraphQLTypes["order_by"],
	v10Product?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_sum_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	redeemableTokenOip?: GraphQLTypes["order_by"],
	replacementOip?: GraphQLTypes["order_by"],
	v10Product?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_var_pop_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	redeemableTokenOip?: GraphQLTypes["order_by"],
	replacementOip?: GraphQLTypes["order_by"],
	v10Product?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_var_samp_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	redeemableTokenOip?: GraphQLTypes["order_by"],
	replacementOip?: GraphQLTypes["order_by"],
	v10Product?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.free_clipart_tokens" */
["vectric_free_clipart_tokens_variance_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	redeemableTokenOip?: GraphQLTypes["order_by"],
	replacementOip?: GraphQLTypes["order_by"],
	v10Product?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.freeclipart". All fields are combined with a logical 'AND'. */
["vectric_freeclipart_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_freeclipart_bool_exp"]>,
	_not?: GraphQLTypes["vectric_freeclipart_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_freeclipart_bool_exp"]>,
	accessId?: GraphQLTypes["String_comparison_exp"],
	category?: GraphQLTypes["vectric_freeclipart_category_bool_exp"],
	categoryId?: GraphQLTypes["bigint_comparison_exp"],
	freeClipartId?: GraphQLTypes["bigint_comparison_exp"],
	location?: GraphQLTypes["String_comparison_exp"],
	name?: GraphQLTypes["String_comparison_exp"],
	objectName?: GraphQLTypes["String_comparison_exp"],
	previewImgUrl?: GraphQLTypes["String_comparison_exp"]
};
	/** Boolean expression to filter rows from the table "vectric.freeclipart_category". All fields are combined with a logical 'AND'. */
["vectric_freeclipart_category_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_freeclipart_category_bool_exp"]>,
	_not?: GraphQLTypes["vectric_freeclipart_category_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_freeclipart_category_bool_exp"]>,
	categoryId?: GraphQLTypes["bigint_comparison_exp"],
	name?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.freeclipart_category" */
["vectric_freeclipart_category_inc_input"]: {
		categoryId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.freeclipart_category" */
["vectric_freeclipart_category_insert_input"]: {
		categoryId?: GraphQLTypes["bigint"],
	name?: string
};
	/** input type for inserting object relation for remote table "vectric.freeclipart_category" */
["vectric_freeclipart_category_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_freeclipart_category_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_freeclipart_category_on_conflict"]
};
	/** on conflict condition type for table "vectric.freeclipart_category" */
["vectric_freeclipart_category_on_conflict"]: {
		constraint: GraphQLTypes["vectric_freeclipart_category_constraint"],
	update_columns: Array<GraphQLTypes["vectric_freeclipart_category_update_column"]>,
	where?: GraphQLTypes["vectric_freeclipart_category_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.freeclipart_category". */
["vectric_freeclipart_category_order_by"]: {
		categoryId?: GraphQLTypes["order_by"],
	name?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_freeclipart_category */
["vectric_freeclipart_category_pk_columns_input"]: {
		categoryId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.freeclipart_category" */
["vectric_freeclipart_category_set_input"]: {
		categoryId?: GraphQLTypes["bigint"],
	name?: string
};
	/** Boolean expression to filter rows from the table "vectric.freeclipart_download_record". All fields are combined with a logical 'AND'. */
["vectric_freeclipart_download_record_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_freeclipart_download_record_bool_exp"]>,
	_not?: GraphQLTypes["vectric_freeclipart_download_record_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_freeclipart_download_record_bool_exp"]>,
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	downloadDate?: GraphQLTypes["timestamptz_comparison_exp"],
	downloadId?: GraphQLTypes["bigint_comparison_exp"],
	freeClipartResourceId?: GraphQLTypes["bigint_comparison_exp"],
	ipAddress?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_inc_input"]: {
		customerId?: GraphQLTypes["bigint"],
	downloadId?: GraphQLTypes["bigint"],
	freeClipartResourceId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_insert_input"]: {
		customerId?: GraphQLTypes["bigint"],
	downloadDate?: GraphQLTypes["timestamptz"],
	downloadId?: GraphQLTypes["bigint"],
	freeClipartResourceId?: GraphQLTypes["bigint"],
	ipAddress?: string
};
	/** on conflict condition type for table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_on_conflict"]: {
		constraint: GraphQLTypes["vectric_freeclipart_download_record_constraint"],
	update_columns: Array<GraphQLTypes["vectric_freeclipart_download_record_update_column"]>,
	where?: GraphQLTypes["vectric_freeclipart_download_record_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.freeclipart_download_record". */
["vectric_freeclipart_download_record_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	downloadDate?: GraphQLTypes["order_by"],
	downloadId?: GraphQLTypes["order_by"],
	freeClipartResourceId?: GraphQLTypes["order_by"],
	ipAddress?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_freeclipart_download_record */
["vectric_freeclipart_download_record_pk_columns_input"]: {
		downloadId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.freeclipart_download_record" */
["vectric_freeclipart_download_record_set_input"]: {
		customerId?: GraphQLTypes["bigint"],
	downloadDate?: GraphQLTypes["timestamptz"],
	downloadId?: GraphQLTypes["bigint"],
	freeClipartResourceId?: GraphQLTypes["bigint"],
	ipAddress?: string
};
	/** input type for incrementing numeric columns in table "vectric.freeclipart" */
["vectric_freeclipart_inc_input"]: {
		categoryId?: GraphQLTypes["bigint"],
	freeClipartId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.freeclipart" */
["vectric_freeclipart_insert_input"]: {
		accessId?: string,
	category?: GraphQLTypes["vectric_freeclipart_category_obj_rel_insert_input"],
	categoryId?: GraphQLTypes["bigint"],
	freeClipartId?: GraphQLTypes["bigint"],
	location?: string,
	name?: string,
	objectName?: string,
	previewImgUrl?: string
};
	/** input type for inserting object relation for remote table "vectric.freeclipart" */
["vectric_freeclipart_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_freeclipart_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_freeclipart_on_conflict"]
};
	/** on conflict condition type for table "vectric.freeclipart" */
["vectric_freeclipart_on_conflict"]: {
		constraint: GraphQLTypes["vectric_freeclipart_constraint"],
	update_columns: Array<GraphQLTypes["vectric_freeclipart_update_column"]>,
	where?: GraphQLTypes["vectric_freeclipart_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.freeclipart". */
["vectric_freeclipart_order_by"]: {
		accessId?: GraphQLTypes["order_by"],
	category?: GraphQLTypes["vectric_freeclipart_category_order_by"],
	categoryId?: GraphQLTypes["order_by"],
	freeClipartId?: GraphQLTypes["order_by"],
	location?: GraphQLTypes["order_by"],
	name?: GraphQLTypes["order_by"],
	objectName?: GraphQLTypes["order_by"],
	previewImgUrl?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_freeclipart */
["vectric_freeclipart_pk_columns_input"]: {
		freeClipartId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.freeclipart" */
["vectric_freeclipart_set_input"]: {
		accessId?: string,
	categoryId?: GraphQLTypes["bigint"],
	freeClipartId?: GraphQLTypes["bigint"],
	location?: string,
	name?: string,
	objectName?: string,
	previewImgUrl?: string
};
	/** Boolean expression to filter rows from the table "vectric.group_info". All fields are combined with a logical 'AND'. */
["vectric_group_info_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_group_info_bool_exp"]>,
	_not?: GraphQLTypes["vectric_group_info_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_group_info_bool_exp"]>,
	customerid?: GraphQLTypes["bigint_comparison_exp"],
	group_id?: GraphQLTypes["Int_comparison_exp"],
	group_name?: GraphQLTypes["String_comparison_exp"],
	role?: GraphQLTypes["String_comparison_exp"]
};
	/** Ordering options when selecting data from "vectric.group_info". */
["vectric_group_info_order_by"]: {
		customerid?: GraphQLTypes["order_by"],
	group_id?: GraphQLTypes["order_by"],
	group_name?: GraphQLTypes["order_by"],
	role?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.group_roles". All fields are combined with a logical 'AND'. */
["vectric_group_roles_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_group_roles_bool_exp"]>,
	_not?: GraphQLTypes["vectric_group_roles_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_group_roles_bool_exp"]>,
	id?: GraphQLTypes["Int_comparison_exp"],
	role?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.group_roles" */
["vectric_group_roles_inc_input"]: {
		id?: number
};
	/** input type for inserting data into table "vectric.group_roles" */
["vectric_group_roles_insert_input"]: {
		id?: number,
	role?: string
};
	/** input type for inserting object relation for remote table "vectric.group_roles" */
["vectric_group_roles_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_group_roles_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_group_roles_on_conflict"]
};
	/** on conflict condition type for table "vectric.group_roles" */
["vectric_group_roles_on_conflict"]: {
		constraint: GraphQLTypes["vectric_group_roles_constraint"],
	update_columns: Array<GraphQLTypes["vectric_group_roles_update_column"]>,
	where?: GraphQLTypes["vectric_group_roles_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.group_roles". */
["vectric_group_roles_order_by"]: {
		id?: GraphQLTypes["order_by"],
	role?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_group_roles */
["vectric_group_roles_pk_columns_input"]: {
		id: number
};
	/** input type for updating data in table "vectric.group_roles" */
["vectric_group_roles_set_input"]: {
		id?: number,
	role?: string
};
	/** order by aggregate values of table "vectric.group_user_role" */
["vectric_group_user_role_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_group_user_role_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_group_user_role_max_order_by"],
	min?: GraphQLTypes["vectric_group_user_role_min_order_by"],
	stddev?: GraphQLTypes["vectric_group_user_role_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_group_user_role_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_group_user_role_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_group_user_role_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_group_user_role_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_group_user_role_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_group_user_role_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.group_user_role" */
["vectric_group_user_role_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_group_user_role_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_group_user_role_on_conflict"]
};
	/** order by avg() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_avg_order_by"]: {
		customer_id?: GraphQLTypes["order_by"],
	group_id?: GraphQLTypes["order_by"],
	role_id?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.group_user_role". All fields are combined with a logical 'AND'. */
["vectric_group_user_role_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_group_user_role_bool_exp"]>,
	_not?: GraphQLTypes["vectric_group_user_role_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_group_user_role_bool_exp"]>,
	customer?: GraphQLTypes["vectric_sales_customers_bool_exp"],
	customer_id?: GraphQLTypes["bigint_comparison_exp"],
	group?: GraphQLTypes["vectric_groups_bool_exp"],
	group_id?: GraphQLTypes["Int_comparison_exp"],
	role?: GraphQLTypes["vectric_group_roles_bool_exp"],
	role_id?: GraphQLTypes["Int_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.group_user_role" */
["vectric_group_user_role_inc_input"]: {
		customer_id?: GraphQLTypes["bigint"],
	group_id?: number,
	role_id?: number
};
	/** input type for inserting data into table "vectric.group_user_role" */
["vectric_group_user_role_insert_input"]: {
		customer?: GraphQLTypes["vectric_sales_customers_obj_rel_insert_input"],
	customer_id?: GraphQLTypes["bigint"],
	group?: GraphQLTypes["vectric_groups_obj_rel_insert_input"],
	group_id?: number,
	role?: GraphQLTypes["vectric_group_roles_obj_rel_insert_input"],
	role_id?: number
};
	/** order by max() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_max_order_by"]: {
		customer_id?: GraphQLTypes["order_by"],
	group_id?: GraphQLTypes["order_by"],
	role_id?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_min_order_by"]: {
		customer_id?: GraphQLTypes["order_by"],
	group_id?: GraphQLTypes["order_by"],
	role_id?: GraphQLTypes["order_by"]
};
	/** on conflict condition type for table "vectric.group_user_role" */
["vectric_group_user_role_on_conflict"]: {
		constraint: GraphQLTypes["vectric_group_user_role_constraint"],
	update_columns: Array<GraphQLTypes["vectric_group_user_role_update_column"]>,
	where?: GraphQLTypes["vectric_group_user_role_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.group_user_role". */
["vectric_group_user_role_order_by"]: {
		customer?: GraphQLTypes["vectric_sales_customers_order_by"],
	customer_id?: GraphQLTypes["order_by"],
	group?: GraphQLTypes["vectric_groups_order_by"],
	group_id?: GraphQLTypes["order_by"],
	role?: GraphQLTypes["vectric_group_roles_order_by"],
	role_id?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_group_user_role */
["vectric_group_user_role_pk_columns_input"]: {
		customer_id: GraphQLTypes["bigint"],
	group_id: number
};
	/** input type for updating data in table "vectric.group_user_role" */
["vectric_group_user_role_set_input"]: {
		customer_id?: GraphQLTypes["bigint"],
	group_id?: number,
	role_id?: number
};
	/** order by stddev() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_stddev_order_by"]: {
		customer_id?: GraphQLTypes["order_by"],
	group_id?: GraphQLTypes["order_by"],
	role_id?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_stddev_pop_order_by"]: {
		customer_id?: GraphQLTypes["order_by"],
	group_id?: GraphQLTypes["order_by"],
	role_id?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_stddev_samp_order_by"]: {
		customer_id?: GraphQLTypes["order_by"],
	group_id?: GraphQLTypes["order_by"],
	role_id?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_sum_order_by"]: {
		customer_id?: GraphQLTypes["order_by"],
	group_id?: GraphQLTypes["order_by"],
	role_id?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_var_pop_order_by"]: {
		customer_id?: GraphQLTypes["order_by"],
	group_id?: GraphQLTypes["order_by"],
	role_id?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_var_samp_order_by"]: {
		customer_id?: GraphQLTypes["order_by"],
	group_id?: GraphQLTypes["order_by"],
	role_id?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.group_user_role" */
["vectric_group_user_role_variance_order_by"]: {
		customer_id?: GraphQLTypes["order_by"],
	group_id?: GraphQLTypes["order_by"],
	role_id?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.groups". All fields are combined with a logical 'AND'. */
["vectric_groups_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_groups_bool_exp"]>,
	_not?: GraphQLTypes["vectric_groups_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_groups_bool_exp"]>,
	created_at?: GraphQLTypes["timestamp_comparison_exp"],
	group_name?: GraphQLTypes["String_comparison_exp"],
	id?: GraphQLTypes["Int_comparison_exp"],
	members?: GraphQLTypes["vectric_group_user_role_bool_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.groups" */
["vectric_groups_inc_input"]: {
		id?: number
};
	/** input type for inserting data into table "vectric.groups" */
["vectric_groups_insert_input"]: {
		created_at?: GraphQLTypes["timestamp"],
	group_name?: string,
	id?: number,
	members?: GraphQLTypes["vectric_group_user_role_arr_rel_insert_input"]
};
	/** input type for inserting object relation for remote table "vectric.groups" */
["vectric_groups_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_groups_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_groups_on_conflict"]
};
	/** on conflict condition type for table "vectric.groups" */
["vectric_groups_on_conflict"]: {
		constraint: GraphQLTypes["vectric_groups_constraint"],
	update_columns: Array<GraphQLTypes["vectric_groups_update_column"]>,
	where?: GraphQLTypes["vectric_groups_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.groups". */
["vectric_groups_order_by"]: {
		created_at?: GraphQLTypes["order_by"],
	group_name?: GraphQLTypes["order_by"],
	id?: GraphQLTypes["order_by"],
	members_aggregate?: GraphQLTypes["vectric_group_user_role_aggregate_order_by"]
};
	/** primary key columns input for table: vectric_groups */
["vectric_groups_pk_columns_input"]: {
		id: number
};
	/** input type for updating data in table "vectric.groups" */
["vectric_groups_set_input"]: {
		created_at?: GraphQLTypes["timestamp"],
	group_name?: string,
	id?: number
};
	/** Boolean expression to filter rows from the table "vectric.language_codes". All fields are combined with a logical 'AND'. */
["vectric_language_codes_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_language_codes_bool_exp"]>,
	_not?: GraphQLTypes["vectric_language_codes_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_language_codes_bool_exp"]>,
	name?: GraphQLTypes["String_comparison_exp"],
	threeLetterCode?: GraphQLTypes["bpchar_comparison_exp"],
	twoLetterCode?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for inserting data into table "vectric.language_codes" */
["vectric_language_codes_insert_input"]: {
		name?: string,
	/** ISO 639-2 Code */
	threeLetterCode?: GraphQLTypes["bpchar"],
	/** ISO 639-1 Code */
	twoLetterCode?: string
};
	/** input type for inserting object relation for remote table "vectric.language_codes" */
["vectric_language_codes_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_language_codes_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_language_codes_on_conflict"]
};
	/** on conflict condition type for table "vectric.language_codes" */
["vectric_language_codes_on_conflict"]: {
		constraint: GraphQLTypes["vectric_language_codes_constraint"],
	update_columns: Array<GraphQLTypes["vectric_language_codes_update_column"]>,
	where?: GraphQLTypes["vectric_language_codes_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.language_codes". */
["vectric_language_codes_order_by"]: {
		name?: GraphQLTypes["order_by"],
	threeLetterCode?: GraphQLTypes["order_by"],
	twoLetterCode?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_language_codes */
["vectric_language_codes_pk_columns_input"]: {
		/** ISO 639-2 Code */
	threeLetterCode: GraphQLTypes["bpchar"]
};
	/** input type for updating data in table "vectric.language_codes" */
["vectric_language_codes_set_input"]: {
		name?: string,
	/** ISO 639-2 Code */
	threeLetterCode?: GraphQLTypes["bpchar"],
	/** ISO 639-1 Code */
	twoLetterCode?: string
};
	/** order by aggregate values of table "vectric.licence_log" */
["vectric_licence_log_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_licence_log_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_licence_log_max_order_by"],
	min?: GraphQLTypes["vectric_licence_log_min_order_by"],
	stddev?: GraphQLTypes["vectric_licence_log_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_licence_log_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_licence_log_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_licence_log_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_licence_log_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_licence_log_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_licence_log_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.licence_log" */
["vectric_licence_log_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_licence_log_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_licence_log_on_conflict"]
};
	/** order by avg() on columns of table "vectric.licence_log" */
["vectric_licence_log_avg_order_by"]: {
		licenceId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.licence_log". All fields are combined with a logical 'AND'. */
["vectric_licence_log_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_licence_log_bool_exp"]>,
	_not?: GraphQLTypes["vectric_licence_log_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_licence_log_bool_exp"]>,
	batchId?: GraphQLTypes["String_comparison_exp"],
	createdBy?: GraphQLTypes["String_comparison_exp"],
	dateCreated?: GraphQLTypes["timestamptz_comparison_exp"],
	licenceCode?: GraphQLTypes["String_comparison_exp"],
	licenceId?: GraphQLTypes["bigint_comparison_exp"],
	oemLicenceId?: GraphQLTypes["bigint_comparison_exp"],
	productName?: GraphQLTypes["String_comparison_exp"],
	registeredUsername?: GraphQLTypes["String_comparison_exp"],
	shortUrlHash?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.licence_log" */
["vectric_licence_log_inc_input"]: {
		licenceId?: GraphQLTypes["bigint"],
	oemLicenceId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.licence_log" */
["vectric_licence_log_insert_input"]: {
		batchId?: string,
	createdBy?: string,
	dateCreated?: GraphQLTypes["timestamptz"],
	licenceCode?: string,
	licenceId?: GraphQLTypes["bigint"],
	oemLicenceId?: GraphQLTypes["bigint"],
	productName?: string,
	registeredUsername?: string,
	shortUrlHash?: string
};
	/** order by max() on columns of table "vectric.licence_log" */
["vectric_licence_log_max_order_by"]: {
		batchId?: GraphQLTypes["order_by"],
	createdBy?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	licenceCode?: GraphQLTypes["order_by"],
	licenceId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"],
	productName?: GraphQLTypes["order_by"],
	registeredUsername?: GraphQLTypes["order_by"],
	shortUrlHash?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.licence_log" */
["vectric_licence_log_min_order_by"]: {
		batchId?: GraphQLTypes["order_by"],
	createdBy?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	licenceCode?: GraphQLTypes["order_by"],
	licenceId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"],
	productName?: GraphQLTypes["order_by"],
	registeredUsername?: GraphQLTypes["order_by"],
	shortUrlHash?: GraphQLTypes["order_by"]
};
	/** on conflict condition type for table "vectric.licence_log" */
["vectric_licence_log_on_conflict"]: {
		constraint: GraphQLTypes["vectric_licence_log_constraint"],
	update_columns: Array<GraphQLTypes["vectric_licence_log_update_column"]>,
	where?: GraphQLTypes["vectric_licence_log_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.licence_log". */
["vectric_licence_log_order_by"]: {
		batchId?: GraphQLTypes["order_by"],
	createdBy?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	licenceCode?: GraphQLTypes["order_by"],
	licenceId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"],
	productName?: GraphQLTypes["order_by"],
	registeredUsername?: GraphQLTypes["order_by"],
	shortUrlHash?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_licence_log */
["vectric_licence_log_pk_columns_input"]: {
		licenceId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.licence_log" */
["vectric_licence_log_set_input"]: {
		batchId?: string,
	createdBy?: string,
	dateCreated?: GraphQLTypes["timestamptz"],
	licenceCode?: string,
	licenceId?: GraphQLTypes["bigint"],
	oemLicenceId?: GraphQLTypes["bigint"],
	productName?: string,
	registeredUsername?: string,
	shortUrlHash?: string
};
	/** order by stddev() on columns of table "vectric.licence_log" */
["vectric_licence_log_stddev_order_by"]: {
		licenceId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.licence_log" */
["vectric_licence_log_stddev_pop_order_by"]: {
		licenceId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.licence_log" */
["vectric_licence_log_stddev_samp_order_by"]: {
		licenceId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.licence_log" */
["vectric_licence_log_sum_order_by"]: {
		licenceId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.licence_log" */
["vectric_licence_log_var_pop_order_by"]: {
		licenceId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.licence_log" */
["vectric_licence_log_var_samp_order_by"]: {
		licenceId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.licence_log" */
["vectric_licence_log_variance_order_by"]: {
		licenceId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.linkshortener_links". All fields are combined with a logical 'AND'. */
["vectric_linkshortener_links_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_linkshortener_links_bool_exp"]>,
	_not?: GraphQLTypes["vectric_linkshortener_links_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_linkshortener_links_bool_exp"]>,
	expiryDate?: GraphQLTypes["timestamptz_comparison_exp"],
	limitDownloads?: GraphQLTypes["Boolean_comparison_exp"],
	longUrl?: GraphQLTypes["String_comparison_exp"],
	remainingDownloads?: GraphQLTypes["smallint_comparison_exp"],
	shortUrlHash?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.linkshortener_links" */
["vectric_linkshortener_links_inc_input"]: {
		remainingDownloads?: GraphQLTypes["smallint"]
};
	/** input type for inserting data into table "vectric.linkshortener_links" */
["vectric_linkshortener_links_insert_input"]: {
		expiryDate?: GraphQLTypes["timestamptz"],
	limitDownloads?: boolean,
	longUrl?: string,
	remainingDownloads?: GraphQLTypes["smallint"],
	shortUrlHash?: string
};
	/** on conflict condition type for table "vectric.linkshortener_links" */
["vectric_linkshortener_links_on_conflict"]: {
		constraint: GraphQLTypes["vectric_linkshortener_links_constraint"],
	update_columns: Array<GraphQLTypes["vectric_linkshortener_links_update_column"]>,
	where?: GraphQLTypes["vectric_linkshortener_links_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.linkshortener_links". */
["vectric_linkshortener_links_order_by"]: {
		expiryDate?: GraphQLTypes["order_by"],
	limitDownloads?: GraphQLTypes["order_by"],
	longUrl?: GraphQLTypes["order_by"],
	remainingDownloads?: GraphQLTypes["order_by"],
	shortUrlHash?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_linkshortener_links */
["vectric_linkshortener_links_pk_columns_input"]: {
		shortUrlHash: string
};
	/** input type for updating data in table "vectric.linkshortener_links" */
["vectric_linkshortener_links_set_input"]: {
		expiryDate?: GraphQLTypes["timestamptz"],
	limitDownloads?: boolean,
	longUrl?: string,
	remainingDownloads?: GraphQLTypes["smallint"],
	shortUrlHash?: string
};
	/** Boolean expression to filter rows from the table "vectric.makerspace_requests". All fields are combined with a logical 'AND'. */
["vectric_makerspace_requests_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_makerspace_requests_bool_exp"]>,
	_not?: GraphQLTypes["vectric_makerspace_requests_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_makerspace_requests_bool_exp"]>,
	ipAddress?: GraphQLTypes["String_comparison_exp"],
	licenceCode?: GraphQLTypes["String_comparison_exp"],
	licenceGenerated?: GraphQLTypes["String_comparison_exp"],
	makerspaceDiskId?: GraphQLTypes["String_comparison_exp"],
	makerspaceId?: GraphQLTypes["String_comparison_exp"],
	requestDate?: GraphQLTypes["timestamptz_comparison_exp"],
	requestId?: GraphQLTypes["bigint_comparison_exp"],
	salesItemProductId?: GraphQLTypes["bigint_comparison_exp"],
	trialDiskId?: GraphQLTypes["String_comparison_exp"],
	trialLayerUuid?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.makerspace_requests" */
["vectric_makerspace_requests_inc_input"]: {
		requestId?: GraphQLTypes["bigint"],
	salesItemProductId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.makerspace_requests" */
["vectric_makerspace_requests_insert_input"]: {
		ipAddress?: string,
	licenceCode?: string,
	licenceGenerated?: string,
	makerspaceDiskId?: string,
	makerspaceId?: string,
	requestDate?: GraphQLTypes["timestamptz"],
	requestId?: GraphQLTypes["bigint"],
	salesItemProductId?: GraphQLTypes["bigint"],
	trialDiskId?: string,
	trialLayerUuid?: string
};
	/** on conflict condition type for table "vectric.makerspace_requests" */
["vectric_makerspace_requests_on_conflict"]: {
		constraint: GraphQLTypes["vectric_makerspace_requests_constraint"],
	update_columns: Array<GraphQLTypes["vectric_makerspace_requests_update_column"]>,
	where?: GraphQLTypes["vectric_makerspace_requests_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.makerspace_requests". */
["vectric_makerspace_requests_order_by"]: {
		ipAddress?: GraphQLTypes["order_by"],
	licenceCode?: GraphQLTypes["order_by"],
	licenceGenerated?: GraphQLTypes["order_by"],
	makerspaceDiskId?: GraphQLTypes["order_by"],
	makerspaceId?: GraphQLTypes["order_by"],
	requestDate?: GraphQLTypes["order_by"],
	requestId?: GraphQLTypes["order_by"],
	salesItemProductId?: GraphQLTypes["order_by"],
	trialDiskId?: GraphQLTypes["order_by"],
	trialLayerUuid?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_makerspace_requests */
["vectric_makerspace_requests_pk_columns_input"]: {
		requestId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.makerspace_requests" */
["vectric_makerspace_requests_set_input"]: {
		ipAddress?: string,
	licenceCode?: string,
	licenceGenerated?: string,
	makerspaceDiskId?: string,
	makerspaceId?: string,
	requestDate?: GraphQLTypes["timestamptz"],
	requestId?: GraphQLTypes["bigint"],
	salesItemProductId?: GraphQLTypes["bigint"],
	trialDiskId?: string,
	trialLayerUuid?: string
};
	/** Boolean expression to filter rows from the table "vectric.membership_invitation_status". All fields are combined with a logical 'AND'. */
["vectric_membership_invitation_status_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_membership_invitation_status_bool_exp"]>,
	_not?: GraphQLTypes["vectric_membership_invitation_status_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_membership_invitation_status_bool_exp"]>,
	status?: GraphQLTypes["String_comparison_exp"]
};
	/** Boolean expression to compare columns of type "vectric_membership_invitation_status_enum". All fields are combined with logical 'AND'. */
["vectric_membership_invitation_status_enum_comparison_exp"]: {
		_eq?: GraphQLTypes["vectric_membership_invitation_status_enum"],
	_in?: Array<GraphQLTypes["vectric_membership_invitation_status_enum"]>,
	_is_null?: boolean,
	_neq?: GraphQLTypes["vectric_membership_invitation_status_enum"],
	_nin?: Array<GraphQLTypes["vectric_membership_invitation_status_enum"]>
};
	/** input type for inserting data into table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_insert_input"]: {
		status?: string
};
	/** input type for inserting object relation for remote table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_membership_invitation_status_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_membership_invitation_status_on_conflict"]
};
	/** on conflict condition type for table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_on_conflict"]: {
		constraint: GraphQLTypes["vectric_membership_invitation_status_constraint"],
	update_columns: Array<GraphQLTypes["vectric_membership_invitation_status_update_column"]>,
	where?: GraphQLTypes["vectric_membership_invitation_status_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.membership_invitation_status". */
["vectric_membership_invitation_status_order_by"]: {
		status?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_membership_invitation_status */
["vectric_membership_invitation_status_pk_columns_input"]: {
		status: string
};
	/** input type for updating data in table "vectric.membership_invitation_status" */
["vectric_membership_invitation_status_set_input"]: {
		status?: string
};
	/** order by aggregate values of table "vectric.membership_invitations" */
["vectric_membership_invitations_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_membership_invitations_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_membership_invitations_max_order_by"],
	min?: GraphQLTypes["vectric_membership_invitations_min_order_by"],
	stddev?: GraphQLTypes["vectric_membership_invitations_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_membership_invitations_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_membership_invitations_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_membership_invitations_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_membership_invitations_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_membership_invitations_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_membership_invitations_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.membership_invitations" */
["vectric_membership_invitations_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_membership_invitations_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_membership_invitations_on_conflict"]
};
	/** order by avg() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_avg_order_by"]: {
		invitationId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.membership_invitations". All fields are combined with a logical 'AND'. */
["vectric_membership_invitations_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_membership_invitations_bool_exp"]>,
	_not?: GraphQLTypes["vectric_membership_invitations_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_membership_invitations_bool_exp"]>,
	dateInvited?: GraphQLTypes["timestamp_comparison_exp"],
	dateProcessed?: GraphQLTypes["timestamp_comparison_exp"],
	email?: GraphQLTypes["String_comparison_exp"],
	invitationId?: GraphQLTypes["Int_comparison_exp"],
	invitationStatus?: GraphQLTypes["vectric_membership_invitation_status_enum_comparison_exp"],
	invitedBy?: GraphQLTypes["String_comparison_exp"],
	membership?: GraphQLTypes["vectric_memberships_bool_exp"],
	membershipId?: GraphQLTypes["Int_comparison_exp"],
	organization?: GraphQLTypes["vectric_organizations_bool_exp"],
	organizationId?: GraphQLTypes["Int_comparison_exp"],
	status?: GraphQLTypes["vectric_membership_invitation_status_bool_exp"],
	token?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.membership_invitations" */
["vectric_membership_invitations_inc_input"]: {
		invitationId?: number,
	membershipId?: number,
	organizationId?: number
};
	/** input type for inserting data into table "vectric.membership_invitations" */
["vectric_membership_invitations_insert_input"]: {
		dateInvited?: GraphQLTypes["timestamp"],
	dateProcessed?: GraphQLTypes["timestamp"],
	email?: string,
	invitationId?: number,
	invitationStatus?: GraphQLTypes["vectric_membership_invitation_status_enum"],
	invitedBy?: string,
	membership?: GraphQLTypes["vectric_memberships_obj_rel_insert_input"],
	membershipId?: number,
	organization?: GraphQLTypes["vectric_organizations_obj_rel_insert_input"],
	organizationId?: number,
	status?: GraphQLTypes["vectric_membership_invitation_status_obj_rel_insert_input"],
	token?: string
};
	/** order by max() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_max_order_by"]: {
		dateInvited?: GraphQLTypes["order_by"],
	dateProcessed?: GraphQLTypes["order_by"],
	email?: GraphQLTypes["order_by"],
	invitationId?: GraphQLTypes["order_by"],
	invitedBy?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"],
	token?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_min_order_by"]: {
		dateInvited?: GraphQLTypes["order_by"],
	dateProcessed?: GraphQLTypes["order_by"],
	email?: GraphQLTypes["order_by"],
	invitationId?: GraphQLTypes["order_by"],
	invitedBy?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"],
	token?: GraphQLTypes["order_by"]
};
	/** on conflict condition type for table "vectric.membership_invitations" */
["vectric_membership_invitations_on_conflict"]: {
		constraint: GraphQLTypes["vectric_membership_invitations_constraint"],
	update_columns: Array<GraphQLTypes["vectric_membership_invitations_update_column"]>,
	where?: GraphQLTypes["vectric_membership_invitations_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.membership_invitations". */
["vectric_membership_invitations_order_by"]: {
		dateInvited?: GraphQLTypes["order_by"],
	dateProcessed?: GraphQLTypes["order_by"],
	email?: GraphQLTypes["order_by"],
	invitationId?: GraphQLTypes["order_by"],
	invitationStatus?: GraphQLTypes["order_by"],
	invitedBy?: GraphQLTypes["order_by"],
	membership?: GraphQLTypes["vectric_memberships_order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organization?: GraphQLTypes["vectric_organizations_order_by"],
	organizationId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["vectric_membership_invitation_status_order_by"],
	token?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_membership_invitations */
["vectric_membership_invitations_pk_columns_input"]: {
		invitationId: number
};
	/** input type for updating data in table "vectric.membership_invitations" */
["vectric_membership_invitations_set_input"]: {
		dateInvited?: GraphQLTypes["timestamp"],
	dateProcessed?: GraphQLTypes["timestamp"],
	email?: string,
	invitationId?: number,
	invitationStatus?: GraphQLTypes["vectric_membership_invitation_status_enum"],
	invitedBy?: string,
	membershipId?: number,
	organizationId?: number,
	token?: string
};
	/** order by stddev() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_stddev_order_by"]: {
		invitationId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_stddev_pop_order_by"]: {
		invitationId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_stddev_samp_order_by"]: {
		invitationId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_sum_order_by"]: {
		invitationId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_var_pop_order_by"]: {
		invitationId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_var_samp_order_by"]: {
		invitationId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.membership_invitations" */
["vectric_membership_invitations_variance_order_by"]: {
		invitationId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.membership_roles". All fields are combined with a logical 'AND'. */
["vectric_membership_roles_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_membership_roles_bool_exp"]>,
	_not?: GraphQLTypes["vectric_membership_roles_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_membership_roles_bool_exp"]>,
	role?: GraphQLTypes["String_comparison_exp"]
};
	/** Boolean expression to compare columns of type "vectric_membership_roles_enum". All fields are combined with logical 'AND'. */
["vectric_membership_roles_enum_comparison_exp"]: {
		_eq?: GraphQLTypes["vectric_membership_roles_enum"],
	_in?: Array<GraphQLTypes["vectric_membership_roles_enum"]>,
	_is_null?: boolean,
	_neq?: GraphQLTypes["vectric_membership_roles_enum"],
	_nin?: Array<GraphQLTypes["vectric_membership_roles_enum"]>
};
	/** input type for inserting data into table "vectric.membership_roles" */
["vectric_membership_roles_insert_input"]: {
		role?: string
};
	/** input type for inserting object relation for remote table "vectric.membership_roles" */
["vectric_membership_roles_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_membership_roles_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_membership_roles_on_conflict"]
};
	/** on conflict condition type for table "vectric.membership_roles" */
["vectric_membership_roles_on_conflict"]: {
		constraint: GraphQLTypes["vectric_membership_roles_constraint"],
	update_columns: Array<GraphQLTypes["vectric_membership_roles_update_column"]>,
	where?: GraphQLTypes["vectric_membership_roles_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.membership_roles". */
["vectric_membership_roles_order_by"]: {
		role?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_membership_roles */
["vectric_membership_roles_pk_columns_input"]: {
		role: string
};
	/** input type for updating data in table "vectric.membership_roles" */
["vectric_membership_roles_set_input"]: {
		role?: string
};
	/** Boolean expression to filter rows from the table "vectric.membership_status". All fields are combined with a logical 'AND'. */
["vectric_membership_status_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_membership_status_bool_exp"]>,
	_not?: GraphQLTypes["vectric_membership_status_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_membership_status_bool_exp"]>,
	status?: GraphQLTypes["String_comparison_exp"]
};
	/** Boolean expression to compare columns of type "vectric_membership_status_enum". All fields are combined with logical 'AND'. */
["vectric_membership_status_enum_comparison_exp"]: {
		_eq?: GraphQLTypes["vectric_membership_status_enum"],
	_in?: Array<GraphQLTypes["vectric_membership_status_enum"]>,
	_is_null?: boolean,
	_neq?: GraphQLTypes["vectric_membership_status_enum"],
	_nin?: Array<GraphQLTypes["vectric_membership_status_enum"]>
};
	/** input type for inserting data into table "vectric.membership_status" */
["vectric_membership_status_insert_input"]: {
		status?: string
};
	/** input type for inserting object relation for remote table "vectric.membership_status" */
["vectric_membership_status_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_membership_status_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_membership_status_on_conflict"]
};
	/** on conflict condition type for table "vectric.membership_status" */
["vectric_membership_status_on_conflict"]: {
		constraint: GraphQLTypes["vectric_membership_status_constraint"],
	update_columns: Array<GraphQLTypes["vectric_membership_status_update_column"]>,
	where?: GraphQLTypes["vectric_membership_status_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.membership_status". */
["vectric_membership_status_order_by"]: {
		status?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_membership_status */
["vectric_membership_status_pk_columns_input"]: {
		status: string
};
	/** input type for updating data in table "vectric.membership_status" */
["vectric_membership_status_set_input"]: {
		status?: string
};
	/** order by aggregate values of table "vectric.memberships" */
["vectric_memberships_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_memberships_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_memberships_max_order_by"],
	min?: GraphQLTypes["vectric_memberships_min_order_by"],
	stddev?: GraphQLTypes["vectric_memberships_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_memberships_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_memberships_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_memberships_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_memberships_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_memberships_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_memberships_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.memberships" */
["vectric_memberships_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_memberships_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_memberships_on_conflict"]
};
	/** order by avg() on columns of table "vectric.memberships" */
["vectric_memberships_avg_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.memberships". All fields are combined with a logical 'AND'. */
["vectric_memberships_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_memberships_bool_exp"]>,
	_not?: GraphQLTypes["vectric_memberships_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_memberships_bool_exp"]>,
	activeMembers?: GraphQLTypes["vectric_active_memberships_bool_exp"],
	addedBy?: GraphQLTypes["String_comparison_exp"],
	amendedBy?: GraphQLTypes["String_comparison_exp"],
	customer?: GraphQLTypes["vectric_sales_customers_bool_exp"],
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	dateAdded?: GraphQLTypes["timestamp_comparison_exp"],
	dateAmended?: GraphQLTypes["timestamp_comparison_exp"],
	membershipId?: GraphQLTypes["Int_comparison_exp"],
	membershipInvitations?: GraphQLTypes["vectric_membership_invitations_bool_exp"],
	membershipRole?: GraphQLTypes["vectric_membership_roles_bool_exp"],
	membershipStatus?: GraphQLTypes["vectric_membership_status_bool_exp"],
	organization?: GraphQLTypes["vectric_organizations_bool_exp"],
	organizationId?: GraphQLTypes["Int_comparison_exp"],
	role?: GraphQLTypes["vectric_membership_roles_enum_comparison_exp"],
	status?: GraphQLTypes["vectric_membership_status_enum_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.memberships" */
["vectric_memberships_inc_input"]: {
		customerId?: GraphQLTypes["bigint"],
	membershipId?: number,
	organizationId?: number
};
	/** input type for inserting data into table "vectric.memberships" */
["vectric_memberships_insert_input"]: {
		activeMembers?: GraphQLTypes["vectric_active_memberships_arr_rel_insert_input"],
	addedBy?: string,
	amendedBy?: string,
	customer?: GraphQLTypes["vectric_sales_customers_obj_rel_insert_input"],
	customerId?: GraphQLTypes["bigint"],
	dateAdded?: GraphQLTypes["timestamp"],
	dateAmended?: GraphQLTypes["timestamp"],
	membershipId?: number,
	membershipInvitations?: GraphQLTypes["vectric_membership_invitations_arr_rel_insert_input"],
	membershipRole?: GraphQLTypes["vectric_membership_roles_obj_rel_insert_input"],
	membershipStatus?: GraphQLTypes["vectric_membership_status_obj_rel_insert_input"],
	organization?: GraphQLTypes["vectric_organizations_obj_rel_insert_input"],
	organizationId?: number,
	role?: GraphQLTypes["vectric_membership_roles_enum"],
	status?: GraphQLTypes["vectric_membership_status_enum"]
};
	/** order by max() on columns of table "vectric.memberships" */
["vectric_memberships_max_order_by"]: {
		addedBy?: GraphQLTypes["order_by"],
	amendedBy?: GraphQLTypes["order_by"],
	customerId?: GraphQLTypes["order_by"],
	dateAdded?: GraphQLTypes["order_by"],
	dateAmended?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.memberships" */
["vectric_memberships_min_order_by"]: {
		addedBy?: GraphQLTypes["order_by"],
	amendedBy?: GraphQLTypes["order_by"],
	customerId?: GraphQLTypes["order_by"],
	dateAdded?: GraphQLTypes["order_by"],
	dateAmended?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** input type for inserting object relation for remote table "vectric.memberships" */
["vectric_memberships_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_memberships_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_memberships_on_conflict"]
};
	/** on conflict condition type for table "vectric.memberships" */
["vectric_memberships_on_conflict"]: {
		constraint: GraphQLTypes["vectric_memberships_constraint"],
	update_columns: Array<GraphQLTypes["vectric_memberships_update_column"]>,
	where?: GraphQLTypes["vectric_memberships_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.memberships". */
["vectric_memberships_order_by"]: {
		activeMembers_aggregate?: GraphQLTypes["vectric_active_memberships_aggregate_order_by"],
	addedBy?: GraphQLTypes["order_by"],
	amendedBy?: GraphQLTypes["order_by"],
	customer?: GraphQLTypes["vectric_sales_customers_order_by"],
	customerId?: GraphQLTypes["order_by"],
	dateAdded?: GraphQLTypes["order_by"],
	dateAmended?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	membershipInvitations_aggregate?: GraphQLTypes["vectric_membership_invitations_aggregate_order_by"],
	membershipRole?: GraphQLTypes["vectric_membership_roles_order_by"],
	membershipStatus?: GraphQLTypes["vectric_membership_status_order_by"],
	organization?: GraphQLTypes["vectric_organizations_order_by"],
	organizationId?: GraphQLTypes["order_by"],
	role?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_memberships */
["vectric_memberships_pk_columns_input"]: {
		membershipId: number
};
	/** input type for updating data in table "vectric.memberships" */
["vectric_memberships_set_input"]: {
		addedBy?: string,
	amendedBy?: string,
	customerId?: GraphQLTypes["bigint"],
	dateAdded?: GraphQLTypes["timestamp"],
	dateAmended?: GraphQLTypes["timestamp"],
	membershipId?: number,
	organizationId?: number,
	role?: GraphQLTypes["vectric_membership_roles_enum"],
	status?: GraphQLTypes["vectric_membership_status_enum"]
};
	/** order by stddev() on columns of table "vectric.memberships" */
["vectric_memberships_stddev_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.memberships" */
["vectric_memberships_stddev_pop_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.memberships" */
["vectric_memberships_stddev_samp_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.memberships" */
["vectric_memberships_sum_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.memberships" */
["vectric_memberships_var_pop_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.memberships" */
["vectric_memberships_var_samp_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.memberships" */
["vectric_memberships_variance_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	membershipId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.oauth_client_details". All fields are combined with a logical 'AND'. */
["vectric_oauth_client_details_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_oauth_client_details_bool_exp"]>,
	_not?: GraphQLTypes["vectric_oauth_client_details_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_oauth_client_details_bool_exp"]>,
	access_token_validity?: GraphQLTypes["bigint_comparison_exp"],
	additional_information?: GraphQLTypes["String_comparison_exp"],
	authorities?: GraphQLTypes["String_comparison_exp"],
	authorized_grant_types?: GraphQLTypes["String_comparison_exp"],
	autoapprove?: GraphQLTypes["String_comparison_exp"],
	client_id?: GraphQLTypes["String_comparison_exp"],
	client_secret?: GraphQLTypes["String_comparison_exp"],
	refresh_token_validity?: GraphQLTypes["bigint_comparison_exp"],
	resource_ids?: GraphQLTypes["String_comparison_exp"],
	scope?: GraphQLTypes["String_comparison_exp"],
	web_server_redirect_uri?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.oauth_client_details" */
["vectric_oauth_client_details_inc_input"]: {
		access_token_validity?: GraphQLTypes["bigint"],
	refresh_token_validity?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.oauth_client_details" */
["vectric_oauth_client_details_insert_input"]: {
		access_token_validity?: GraphQLTypes["bigint"],
	additional_information?: string,
	authorities?: string,
	authorized_grant_types?: string,
	autoapprove?: string,
	client_id?: string,
	client_secret?: string,
	refresh_token_validity?: GraphQLTypes["bigint"],
	resource_ids?: string,
	scope?: string,
	web_server_redirect_uri?: string
};
	/** on conflict condition type for table "vectric.oauth_client_details" */
["vectric_oauth_client_details_on_conflict"]: {
		constraint: GraphQLTypes["vectric_oauth_client_details_constraint"],
	update_columns: Array<GraphQLTypes["vectric_oauth_client_details_update_column"]>,
	where?: GraphQLTypes["vectric_oauth_client_details_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.oauth_client_details". */
["vectric_oauth_client_details_order_by"]: {
		access_token_validity?: GraphQLTypes["order_by"],
	additional_information?: GraphQLTypes["order_by"],
	authorities?: GraphQLTypes["order_by"],
	authorized_grant_types?: GraphQLTypes["order_by"],
	autoapprove?: GraphQLTypes["order_by"],
	client_id?: GraphQLTypes["order_by"],
	client_secret?: GraphQLTypes["order_by"],
	refresh_token_validity?: GraphQLTypes["order_by"],
	resource_ids?: GraphQLTypes["order_by"],
	scope?: GraphQLTypes["order_by"],
	web_server_redirect_uri?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_oauth_client_details */
["vectric_oauth_client_details_pk_columns_input"]: {
		client_id: string
};
	/** input type for updating data in table "vectric.oauth_client_details" */
["vectric_oauth_client_details_set_input"]: {
		access_token_validity?: GraphQLTypes["bigint"],
	additional_information?: string,
	authorities?: string,
	authorized_grant_types?: string,
	autoapprove?: string,
	client_id?: string,
	client_secret?: string,
	refresh_token_validity?: GraphQLTypes["bigint"],
	resource_ids?: string,
	scope?: string,
	web_server_redirect_uri?: string
};
	/** Boolean expression to filter rows from the table "vectric.oem_allocation_emails". All fields are combined with a logical 'AND'. */
["vectric_oem_allocation_emails_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_oem_allocation_emails_bool_exp"]>,
	_not?: GraphQLTypes["vectric_oem_allocation_emails_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_oem_allocation_emails_bool_exp"]>,
	bundle_id?: GraphQLTypes["String_comparison_exp"],
	date?: GraphQLTypes["timestamp_comparison_exp"],
	email_to?: GraphQLTypes["String_comparison_exp"],
	oem_customer?: GraphQLTypes["vectric_sales_customers_bool_exp"],
	oem_customer_id?: GraphQLTypes["bigint_comparison_exp"],
	oem_partner?: GraphQLTypes["vectric_oem_partners_bool_exp"],
	partner_id?: GraphQLTypes["bigint_comparison_exp"],
	sales_oem_bundle?: GraphQLTypes["vectric_sales_oem_bundles_bool_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails_inc_input"]: {
		oem_customer_id?: GraphQLTypes["bigint"],
	partner_id?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails_insert_input"]: {
		bundle_id?: string,
	date?: GraphQLTypes["timestamp"],
	email_to?: string,
	oem_customer?: GraphQLTypes["vectric_sales_customers_obj_rel_insert_input"],
	oem_customer_id?: GraphQLTypes["bigint"],
	oem_partner?: GraphQLTypes["vectric_oem_partners_obj_rel_insert_input"],
	partner_id?: GraphQLTypes["bigint"],
	sales_oem_bundle?: GraphQLTypes["vectric_sales_oem_bundles_obj_rel_insert_input"]
};
	/** Ordering options when selecting data from "vectric.oem_allocation_emails". */
["vectric_oem_allocation_emails_order_by"]: {
		bundle_id?: GraphQLTypes["order_by"],
	date?: GraphQLTypes["order_by"],
	email_to?: GraphQLTypes["order_by"],
	oem_customer?: GraphQLTypes["vectric_sales_customers_order_by"],
	oem_customer_id?: GraphQLTypes["order_by"],
	oem_partner?: GraphQLTypes["vectric_oem_partners_order_by"],
	partner_id?: GraphQLTypes["order_by"],
	sales_oem_bundle?: GraphQLTypes["vectric_sales_oem_bundles_order_by"]
};
	/** input type for updating data in table "vectric.oem_allocation_emails" */
["vectric_oem_allocation_emails_set_input"]: {
		bundle_id?: string,
	date?: GraphQLTypes["timestamp"],
	email_to?: string,
	oem_customer_id?: GraphQLTypes["bigint"],
	partner_id?: GraphQLTypes["bigint"]
};
	/** order by aggregate values of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_oem_detailed_products_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_oem_detailed_products_max_order_by"],
	min?: GraphQLTypes["vectric_oem_detailed_products_min_order_by"],
	stddev?: GraphQLTypes["vectric_oem_detailed_products_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_oem_detailed_products_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_oem_detailed_products_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_oem_detailed_products_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_oem_detailed_products_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_oem_detailed_products_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_oem_detailed_products_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_oem_detailed_products_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_oem_detailed_products_on_conflict"]
};
	/** order by avg() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_avg_order_by"]: {
		id?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.oem_detailed_products". All fields are combined with a logical 'AND'. */
["vectric_oem_detailed_products_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_oem_detailed_products_bool_exp"]>,
	_not?: GraphQLTypes["vectric_oem_detailed_products_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_oem_detailed_products_bool_exp"]>,
	id?: GraphQLTypes["bigint_comparison_exp"],
	oemProductId?: GraphQLTypes["bigint_comparison_exp"],
	product?: GraphQLTypes["vectric_products_products_bool_exp"],
	productId?: GraphQLTypes["bigint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_inc_input"]: {
		id?: GraphQLTypes["bigint"],
	oemProductId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_insert_input"]: {
		id?: GraphQLTypes["bigint"],
	oemProductId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["vectric_products_products_obj_rel_insert_input"],
	productId?: GraphQLTypes["bigint"]
};
	/** order by max() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_max_order_by"]: {
		id?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_min_order_by"]: {
		id?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** on conflict condition type for table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_on_conflict"]: {
		constraint: GraphQLTypes["vectric_oem_detailed_products_constraint"],
	update_columns: Array<GraphQLTypes["vectric_oem_detailed_products_update_column"]>,
	where?: GraphQLTypes["vectric_oem_detailed_products_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.oem_detailed_products". */
["vectric_oem_detailed_products_order_by"]: {
		id?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["vectric_products_products_order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_oem_detailed_products */
["vectric_oem_detailed_products_pk_columns_input"]: {
		id: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_set_input"]: {
		id?: GraphQLTypes["bigint"],
	oemProductId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** order by stddev() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_stddev_order_by"]: {
		id?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_stddev_pop_order_by"]: {
		id?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_stddev_samp_order_by"]: {
		id?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_sum_order_by"]: {
		id?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_var_pop_order_by"]: {
		id?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_var_samp_order_by"]: {
		id?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.oem_detailed_products" */
["vectric_oem_detailed_products_variance_order_by"]: {
		id?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.oem_eval_request". All fields are combined with a logical 'AND'. */
["vectric_oem_eval_request_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_oem_eval_request_bool_exp"]>,
	_not?: GraphQLTypes["vectric_oem_eval_request_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_oem_eval_request_bool_exp"]>,
	customer?: GraphQLTypes["vectric_sales_customers_bool_exp"],
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	dateProcessed?: GraphQLTypes["timestamptz_comparison_exp"],
	dateRequested?: GraphQLTypes["timestamptz_comparison_exp"],
	expired?: GraphQLTypes["Boolean_comparison_exp"],
	granted?: GraphQLTypes["Boolean_comparison_exp"],
	partner?: GraphQLTypes["vectric_oem_partners_bool_exp"],
	partnerId?: GraphQLTypes["bigint_comparison_exp"],
	processed?: GraphQLTypes["Boolean_comparison_exp"],
	processedBy?: GraphQLTypes["String_comparison_exp"],
	replacedBy?: GraphQLTypes["bigint_comparison_exp"],
	replacementRequest?: GraphQLTypes["vectric_oem_eval_request_bool_exp"],
	requestId?: GraphQLTypes["bigint_comparison_exp"],
	requestedBy?: GraphQLTypes["bigint_comparison_exp"],
	requester?: GraphQLTypes["vectric_sales_customers_bool_exp"],
	vloggerId?: GraphQLTypes["Int_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.oem_eval_request" */
["vectric_oem_eval_request_inc_input"]: {
		customerId?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"],
	replacedBy?: GraphQLTypes["bigint"],
	requestId?: GraphQLTypes["bigint"],
	requestedBy?: GraphQLTypes["bigint"],
	vloggerId?: number
};
	/** input type for inserting data into table "vectric.oem_eval_request" */
["vectric_oem_eval_request_insert_input"]: {
		customer?: GraphQLTypes["vectric_sales_customers_obj_rel_insert_input"],
	customerId?: GraphQLTypes["bigint"],
	dateProcessed?: GraphQLTypes["timestamptz"],
	dateRequested?: GraphQLTypes["timestamptz"],
	expired?: boolean,
	granted?: boolean,
	partner?: GraphQLTypes["vectric_oem_partners_obj_rel_insert_input"],
	partnerId?: GraphQLTypes["bigint"],
	processed?: boolean,
	processedBy?: string,
	replacedBy?: GraphQLTypes["bigint"],
	replacementRequest?: GraphQLTypes["vectric_oem_eval_request_obj_rel_insert_input"],
	requestId?: GraphQLTypes["bigint"],
	requestedBy?: GraphQLTypes["bigint"],
	requester?: GraphQLTypes["vectric_sales_customers_obj_rel_insert_input"],
	vloggerId?: number
};
	/** input type for inserting object relation for remote table "vectric.oem_eval_request" */
["vectric_oem_eval_request_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_oem_eval_request_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_oem_eval_request_on_conflict"]
};
	/** on conflict condition type for table "vectric.oem_eval_request" */
["vectric_oem_eval_request_on_conflict"]: {
		constraint: GraphQLTypes["vectric_oem_eval_request_constraint"],
	update_columns: Array<GraphQLTypes["vectric_oem_eval_request_update_column"]>,
	where?: GraphQLTypes["vectric_oem_eval_request_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.oem_eval_request". */
["vectric_oem_eval_request_order_by"]: {
		customer?: GraphQLTypes["vectric_sales_customers_order_by"],
	customerId?: GraphQLTypes["order_by"],
	dateProcessed?: GraphQLTypes["order_by"],
	dateRequested?: GraphQLTypes["order_by"],
	expired?: GraphQLTypes["order_by"],
	granted?: GraphQLTypes["order_by"],
	partner?: GraphQLTypes["vectric_oem_partners_order_by"],
	partnerId?: GraphQLTypes["order_by"],
	processed?: GraphQLTypes["order_by"],
	processedBy?: GraphQLTypes["order_by"],
	replacedBy?: GraphQLTypes["order_by"],
	replacementRequest?: GraphQLTypes["vectric_oem_eval_request_order_by"],
	requestId?: GraphQLTypes["order_by"],
	requestedBy?: GraphQLTypes["order_by"],
	requester?: GraphQLTypes["vectric_sales_customers_order_by"],
	vloggerId?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_oem_eval_request */
["vectric_oem_eval_request_pk_columns_input"]: {
		requestId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_eval_request" */
["vectric_oem_eval_request_set_input"]: {
		customerId?: GraphQLTypes["bigint"],
	dateProcessed?: GraphQLTypes["timestamptz"],
	dateRequested?: GraphQLTypes["timestamptz"],
	expired?: boolean,
	granted?: boolean,
	partnerId?: GraphQLTypes["bigint"],
	processed?: boolean,
	processedBy?: string,
	replacedBy?: GraphQLTypes["bigint"],
	requestId?: GraphQLTypes["bigint"],
	requestedBy?: GraphQLTypes["bigint"],
	vloggerId?: number
};
	/** order by aggregate values of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_oem_fastspring_item_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_oem_fastspring_item_max_order_by"],
	min?: GraphQLTypes["vectric_oem_fastspring_item_min_order_by"],
	stddev?: GraphQLTypes["vectric_oem_fastspring_item_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_oem_fastspring_item_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_oem_fastspring_item_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_oem_fastspring_item_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_oem_fastspring_item_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_oem_fastspring_item_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_oem_fastspring_item_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_oem_fastspring_item_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_oem_fastspring_item_on_conflict"]
};
	/** order by avg() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_avg_order_by"]: {
		discountValue?: GraphQLTypes["order_by"],
	itemId?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	orderId?: GraphQLTypes["order_by"],
	priceTotal?: GraphQLTypes["order_by"],
	quantity?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.oem_fastspring_item". All fields are combined with a logical 'AND'. */
["vectric_oem_fastspring_item_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_oem_fastspring_item_bool_exp"]>,
	_not?: GraphQLTypes["vectric_oem_fastspring_item_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_oem_fastspring_item_bool_exp"]>,
	batchId?: GraphQLTypes["String_comparison_exp"],
	discountValue?: GraphQLTypes["numeric_comparison_exp"],
	itemBundle?: GraphQLTypes["vectric_oem_fastspring_item_bundle_bool_exp"],
	itemId?: GraphQLTypes["bigint_comparison_exp"],
	oemProduct?: GraphQLTypes["vectric_oem_products_bool_exp"],
	oemProductId?: GraphQLTypes["bigint_comparison_exp"],
	order?: GraphQLTypes["vectric_oem_fastspring_order_bool_exp"],
	orderId?: GraphQLTypes["bigint_comparison_exp"],
	priceTotal?: GraphQLTypes["numeric_comparison_exp"],
	productName?: GraphQLTypes["String_comparison_exp"],
	quantity?: GraphQLTypes["bigint_comparison_exp"]
};
	/** order by aggregate values of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_oem_fastspring_item_bundle_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_oem_fastspring_item_bundle_max_order_by"],
	min?: GraphQLTypes["vectric_oem_fastspring_item_bundle_min_order_by"],
	stddev?: GraphQLTypes["vectric_oem_fastspring_item_bundle_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_oem_fastspring_item_bundle_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_oem_fastspring_item_bundle_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_oem_fastspring_item_bundle_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_oem_fastspring_item_bundle_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_oem_fastspring_item_bundle_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_oem_fastspring_item_bundle_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_oem_fastspring_item_bundle_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_oem_fastspring_item_bundle_on_conflict"]
};
	/** order by avg() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_avg_order_by"]: {
		fastspringItemId?: GraphQLTypes["order_by"],
	itemBundleId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.oem_fastspring_item_bundle". All fields are combined with a logical 'AND'. */
["vectric_oem_fastspring_item_bundle_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_oem_fastspring_item_bundle_bool_exp"]>,
	_not?: GraphQLTypes["vectric_oem_fastspring_item_bundle_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_oem_fastspring_item_bundle_bool_exp"]>,
	bundle?: GraphQLTypes["vectric_sales_oem_bundles_bool_exp"],
	bundleId?: GraphQLTypes["String_comparison_exp"],
	fastspringItem?: GraphQLTypes["vectric_oem_fastspring_item_bool_exp"],
	fastspringItemId?: GraphQLTypes["bigint_comparison_exp"],
	itemBundleId?: GraphQLTypes["bigint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_inc_input"]: {
		fastspringItemId?: GraphQLTypes["bigint"],
	itemBundleId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_insert_input"]: {
		bundle?: GraphQLTypes["vectric_sales_oem_bundles_obj_rel_insert_input"],
	bundleId?: string,
	fastspringItem?: GraphQLTypes["vectric_oem_fastspring_item_obj_rel_insert_input"],
	fastspringItemId?: GraphQLTypes["bigint"],
	itemBundleId?: GraphQLTypes["bigint"]
};
	/** order by max() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_max_order_by"]: {
		bundleId?: GraphQLTypes["order_by"],
	fastspringItemId?: GraphQLTypes["order_by"],
	itemBundleId?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_min_order_by"]: {
		bundleId?: GraphQLTypes["order_by"],
	fastspringItemId?: GraphQLTypes["order_by"],
	itemBundleId?: GraphQLTypes["order_by"]
};
	/** on conflict condition type for table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_on_conflict"]: {
		constraint: GraphQLTypes["vectric_oem_fastspring_item_bundle_constraint"],
	update_columns: Array<GraphQLTypes["vectric_oem_fastspring_item_bundle_update_column"]>,
	where?: GraphQLTypes["vectric_oem_fastspring_item_bundle_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.oem_fastspring_item_bundle". */
["vectric_oem_fastspring_item_bundle_order_by"]: {
		bundle?: GraphQLTypes["vectric_sales_oem_bundles_order_by"],
	bundleId?: GraphQLTypes["order_by"],
	fastspringItem?: GraphQLTypes["vectric_oem_fastspring_item_order_by"],
	fastspringItemId?: GraphQLTypes["order_by"],
	itemBundleId?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_oem_fastspring_item_bundle */
["vectric_oem_fastspring_item_bundle_pk_columns_input"]: {
		itemBundleId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_set_input"]: {
		bundleId?: string,
	fastspringItemId?: GraphQLTypes["bigint"],
	itemBundleId?: GraphQLTypes["bigint"]
};
	/** order by stddev() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_stddev_order_by"]: {
		fastspringItemId?: GraphQLTypes["order_by"],
	itemBundleId?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_stddev_pop_order_by"]: {
		fastspringItemId?: GraphQLTypes["order_by"],
	itemBundleId?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_stddev_samp_order_by"]: {
		fastspringItemId?: GraphQLTypes["order_by"],
	itemBundleId?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_sum_order_by"]: {
		fastspringItemId?: GraphQLTypes["order_by"],
	itemBundleId?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_var_pop_order_by"]: {
		fastspringItemId?: GraphQLTypes["order_by"],
	itemBundleId?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_var_samp_order_by"]: {
		fastspringItemId?: GraphQLTypes["order_by"],
	itemBundleId?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.oem_fastspring_item_bundle" */
["vectric_oem_fastspring_item_bundle_variance_order_by"]: {
		fastspringItemId?: GraphQLTypes["order_by"],
	itemBundleId?: GraphQLTypes["order_by"]
};
	/** input type for incrementing numeric columns in table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_inc_input"]: {
		discountValue?: GraphQLTypes["numeric"],
	itemId?: GraphQLTypes["bigint"],
	oemProductId?: GraphQLTypes["bigint"],
	orderId?: GraphQLTypes["bigint"],
	priceTotal?: GraphQLTypes["numeric"],
	quantity?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_insert_input"]: {
		batchId?: string,
	discountValue?: GraphQLTypes["numeric"],
	itemBundle?: GraphQLTypes["vectric_oem_fastspring_item_bundle_arr_rel_insert_input"],
	itemId?: GraphQLTypes["bigint"],
	oemProduct?: GraphQLTypes["vectric_oem_products_obj_rel_insert_input"],
	oemProductId?: GraphQLTypes["bigint"],
	order?: GraphQLTypes["vectric_oem_fastspring_order_obj_rel_insert_input"],
	orderId?: GraphQLTypes["bigint"],
	priceTotal?: GraphQLTypes["numeric"],
	productName?: string,
	quantity?: GraphQLTypes["bigint"]
};
	/** order by max() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_max_order_by"]: {
		batchId?: GraphQLTypes["order_by"],
	discountValue?: GraphQLTypes["order_by"],
	itemId?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	orderId?: GraphQLTypes["order_by"],
	priceTotal?: GraphQLTypes["order_by"],
	productName?: GraphQLTypes["order_by"],
	quantity?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_min_order_by"]: {
		batchId?: GraphQLTypes["order_by"],
	discountValue?: GraphQLTypes["order_by"],
	itemId?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	orderId?: GraphQLTypes["order_by"],
	priceTotal?: GraphQLTypes["order_by"],
	productName?: GraphQLTypes["order_by"],
	quantity?: GraphQLTypes["order_by"]
};
	/** input type for inserting object relation for remote table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_oem_fastspring_item_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_oem_fastspring_item_on_conflict"]
};
	/** on conflict condition type for table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_on_conflict"]: {
		constraint: GraphQLTypes["vectric_oem_fastspring_item_constraint"],
	update_columns: Array<GraphQLTypes["vectric_oem_fastspring_item_update_column"]>,
	where?: GraphQLTypes["vectric_oem_fastspring_item_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.oem_fastspring_item". */
["vectric_oem_fastspring_item_order_by"]: {
		batchId?: GraphQLTypes["order_by"],
	discountValue?: GraphQLTypes["order_by"],
	itemBundle_aggregate?: GraphQLTypes["vectric_oem_fastspring_item_bundle_aggregate_order_by"],
	itemId?: GraphQLTypes["order_by"],
	oemProduct?: GraphQLTypes["vectric_oem_products_order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	order?: GraphQLTypes["vectric_oem_fastspring_order_order_by"],
	orderId?: GraphQLTypes["order_by"],
	priceTotal?: GraphQLTypes["order_by"],
	productName?: GraphQLTypes["order_by"],
	quantity?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_oem_fastspring_item */
["vectric_oem_fastspring_item_pk_columns_input"]: {
		itemId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_set_input"]: {
		batchId?: string,
	discountValue?: GraphQLTypes["numeric"],
	itemId?: GraphQLTypes["bigint"],
	oemProductId?: GraphQLTypes["bigint"],
	orderId?: GraphQLTypes["bigint"],
	priceTotal?: GraphQLTypes["numeric"],
	productName?: string,
	quantity?: GraphQLTypes["bigint"]
};
	/** order by stddev() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_stddev_order_by"]: {
		discountValue?: GraphQLTypes["order_by"],
	itemId?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	orderId?: GraphQLTypes["order_by"],
	priceTotal?: GraphQLTypes["order_by"],
	quantity?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_stddev_pop_order_by"]: {
		discountValue?: GraphQLTypes["order_by"],
	itemId?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	orderId?: GraphQLTypes["order_by"],
	priceTotal?: GraphQLTypes["order_by"],
	quantity?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_stddev_samp_order_by"]: {
		discountValue?: GraphQLTypes["order_by"],
	itemId?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	orderId?: GraphQLTypes["order_by"],
	priceTotal?: GraphQLTypes["order_by"],
	quantity?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_sum_order_by"]: {
		discountValue?: GraphQLTypes["order_by"],
	itemId?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	orderId?: GraphQLTypes["order_by"],
	priceTotal?: GraphQLTypes["order_by"],
	quantity?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_var_pop_order_by"]: {
		discountValue?: GraphQLTypes["order_by"],
	itemId?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	orderId?: GraphQLTypes["order_by"],
	priceTotal?: GraphQLTypes["order_by"],
	quantity?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_var_samp_order_by"]: {
		discountValue?: GraphQLTypes["order_by"],
	itemId?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	orderId?: GraphQLTypes["order_by"],
	priceTotal?: GraphQLTypes["order_by"],
	quantity?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.oem_fastspring_item" */
["vectric_oem_fastspring_item_variance_order_by"]: {
		discountValue?: GraphQLTypes["order_by"],
	itemId?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	orderId?: GraphQLTypes["order_by"],
	priceTotal?: GraphQLTypes["order_by"],
	quantity?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.oem_fastspring_order". All fields are combined with a logical 'AND'. */
["vectric_oem_fastspring_order_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_oem_fastspring_order_bool_exp"]>,
	_not?: GraphQLTypes["vectric_oem_fastspring_order_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_oem_fastspring_order_bool_exp"]>,
	actionTaken?: GraphQLTypes["bigint_comparison_exp"],
	amendedBy?: GraphQLTypes["String_comparison_exp"],
	city?: GraphQLTypes["String_comparison_exp"],
	createdBy?: GraphQLTypes["String_comparison_exp"],
	currency?: GraphQLTypes["String_comparison_exp"],
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	dateAmended?: GraphQLTypes["timestamptz_comparison_exp"],
	dateCreated?: GraphQLTypes["timestamptz_comparison_exp"],
	dateProcessed?: GraphQLTypes["timestamptz_comparison_exp"],
	fastSpringCustomerId?: GraphQLTypes["bigint_comparison_exp"],
	items?: GraphQLTypes["vectric_oem_fastspring_item_bool_exp"],
	language?: GraphQLTypes["String_comparison_exp"],
	notes?: GraphQLTypes["String_comparison_exp"],
	orderId?: GraphQLTypes["bigint_comparison_exp"],
	orderReference?: GraphQLTypes["String_comparison_exp"],
	partner?: GraphQLTypes["vectric_oem_partners_bool_exp"],
	partnerId?: GraphQLTypes["bigint_comparison_exp"],
	postalCode?: GraphQLTypes["String_comparison_exp"],
	processedBy?: GraphQLTypes["String_comparison_exp"],
	region?: GraphQLTypes["String_comparison_exp"],
	route?: GraphQLTypes["String_comparison_exp"],
	subTotal?: GraphQLTypes["numeric_comparison_exp"],
	tax?: GraphQLTypes["numeric_comparison_exp"],
	total?: GraphQLTypes["numeric_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_inc_input"]: {
		actionTaken?: GraphQLTypes["bigint"],
	customerId?: GraphQLTypes["bigint"],
	fastSpringCustomerId?: GraphQLTypes["bigint"],
	orderId?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"],
	subTotal?: GraphQLTypes["numeric"],
	tax?: GraphQLTypes["numeric"],
	total?: GraphQLTypes["numeric"]
};
	/** input type for inserting data into table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_insert_input"]: {
		actionTaken?: GraphQLTypes["bigint"],
	amendedBy?: string,
	city?: string,
	createdBy?: string,
	currency?: string,
	customerId?: GraphQLTypes["bigint"],
	dateAmended?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateProcessed?: GraphQLTypes["timestamptz"],
	fastSpringCustomerId?: GraphQLTypes["bigint"],
	items?: GraphQLTypes["vectric_oem_fastspring_item_arr_rel_insert_input"],
	language?: string,
	notes?: string,
	orderId?: GraphQLTypes["bigint"],
	orderReference?: string,
	partner?: GraphQLTypes["vectric_oem_partners_obj_rel_insert_input"],
	partnerId?: GraphQLTypes["bigint"],
	postalCode?: string,
	processedBy?: string,
	region?: string,
	route?: string,
	subTotal?: GraphQLTypes["numeric"],
	tax?: GraphQLTypes["numeric"],
	total?: GraphQLTypes["numeric"]
};
	/** input type for inserting object relation for remote table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_oem_fastspring_order_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_oem_fastspring_order_on_conflict"]
};
	/** on conflict condition type for table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_on_conflict"]: {
		constraint: GraphQLTypes["vectric_oem_fastspring_order_constraint"],
	update_columns: Array<GraphQLTypes["vectric_oem_fastspring_order_update_column"]>,
	where?: GraphQLTypes["vectric_oem_fastspring_order_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.oem_fastspring_order". */
["vectric_oem_fastspring_order_order_by"]: {
		actionTaken?: GraphQLTypes["order_by"],
	amendedBy?: GraphQLTypes["order_by"],
	city?: GraphQLTypes["order_by"],
	createdBy?: GraphQLTypes["order_by"],
	currency?: GraphQLTypes["order_by"],
	customerId?: GraphQLTypes["order_by"],
	dateAmended?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	dateProcessed?: GraphQLTypes["order_by"],
	fastSpringCustomerId?: GraphQLTypes["order_by"],
	items_aggregate?: GraphQLTypes["vectric_oem_fastspring_item_aggregate_order_by"],
	language?: GraphQLTypes["order_by"],
	notes?: GraphQLTypes["order_by"],
	orderId?: GraphQLTypes["order_by"],
	orderReference?: GraphQLTypes["order_by"],
	partner?: GraphQLTypes["vectric_oem_partners_order_by"],
	partnerId?: GraphQLTypes["order_by"],
	postalCode?: GraphQLTypes["order_by"],
	processedBy?: GraphQLTypes["order_by"],
	region?: GraphQLTypes["order_by"],
	route?: GraphQLTypes["order_by"],
	subTotal?: GraphQLTypes["order_by"],
	tax?: GraphQLTypes["order_by"],
	total?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_oem_fastspring_order */
["vectric_oem_fastspring_order_pk_columns_input"]: {
		orderId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_fastspring_order" */
["vectric_oem_fastspring_order_set_input"]: {
		actionTaken?: GraphQLTypes["bigint"],
	amendedBy?: string,
	city?: string,
	createdBy?: string,
	currency?: string,
	customerId?: GraphQLTypes["bigint"],
	dateAmended?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateProcessed?: GraphQLTypes["timestamptz"],
	fastSpringCustomerId?: GraphQLTypes["bigint"],
	language?: string,
	notes?: string,
	orderId?: GraphQLTypes["bigint"],
	orderReference?: string,
	partnerId?: GraphQLTypes["bigint"],
	postalCode?: string,
	processedBy?: string,
	region?: string,
	route?: string,
	subTotal?: GraphQLTypes["numeric"],
	tax?: GraphQLTypes["numeric"],
	total?: GraphQLTypes["numeric"]
};
	/** Boolean expression to filter rows from the table "vectric.oem_invite_status". All fields are combined with a logical 'AND'. */
["vectric_oem_invite_status_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_oem_invite_status_bool_exp"]>,
	_not?: GraphQLTypes["vectric_oem_invite_status_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_oem_invite_status_bool_exp"]>,
	status?: GraphQLTypes["String_comparison_exp"],
	statusId?: GraphQLTypes["bigint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.oem_invite_status" */
["vectric_oem_invite_status_inc_input"]: {
		statusId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.oem_invite_status" */
["vectric_oem_invite_status_insert_input"]: {
		status?: string,
	statusId?: GraphQLTypes["bigint"]
};
	/** input type for inserting object relation for remote table "vectric.oem_invite_status" */
["vectric_oem_invite_status_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_oem_invite_status_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_oem_invite_status_on_conflict"]
};
	/** on conflict condition type for table "vectric.oem_invite_status" */
["vectric_oem_invite_status_on_conflict"]: {
		constraint: GraphQLTypes["vectric_oem_invite_status_constraint"],
	update_columns: Array<GraphQLTypes["vectric_oem_invite_status_update_column"]>,
	where?: GraphQLTypes["vectric_oem_invite_status_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.oem_invite_status". */
["vectric_oem_invite_status_order_by"]: {
		status?: GraphQLTypes["order_by"],
	statusId?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_oem_invite_status */
["vectric_oem_invite_status_pk_columns_input"]: {
		statusId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_invite_status" */
["vectric_oem_invite_status_set_input"]: {
		status?: string,
	statusId?: GraphQLTypes["bigint"]
};
	/** Boolean expression to filter rows from the table "vectric.oem_licence_allocation_type". All fields are combined with a logical 'AND'. */
["vectric_oem_licence_allocation_type_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_oem_licence_allocation_type_bool_exp"]>,
	_not?: GraphQLTypes["vectric_oem_licence_allocation_type_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_oem_licence_allocation_type_bool_exp"]>,
	allocationTypeId?: GraphQLTypes["bigint_comparison_exp"],
	typeName?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_inc_input"]: {
		allocationTypeId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_insert_input"]: {
		allocationTypeId?: GraphQLTypes["bigint"],
	typeName?: string
};
	/** input type for inserting object relation for remote table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_oem_licence_allocation_type_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_oem_licence_allocation_type_on_conflict"]
};
	/** on conflict condition type for table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_on_conflict"]: {
		constraint: GraphQLTypes["vectric_oem_licence_allocation_type_constraint"],
	update_columns: Array<GraphQLTypes["vectric_oem_licence_allocation_type_update_column"]>,
	where?: GraphQLTypes["vectric_oem_licence_allocation_type_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.oem_licence_allocation_type". */
["vectric_oem_licence_allocation_type_order_by"]: {
		allocationTypeId?: GraphQLTypes["order_by"],
	typeName?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_oem_licence_allocation_type */
["vectric_oem_licence_allocation_type_pk_columns_input"]: {
		allocationTypeId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_licence_allocation_type" */
["vectric_oem_licence_allocation_type_set_input"]: {
		allocationTypeId?: GraphQLTypes["bigint"],
	typeName?: string
};
	/** Boolean expression to filter rows from the table "vectric.oem_partners". All fields are combined with a logical 'AND'. */
["vectric_oem_partners_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_oem_partners_bool_exp"]>,
	_not?: GraphQLTypes["vectric_oem_partners_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_oem_partners_bool_exp"]>,
	bundles?: GraphQLTypes["vectric_sales_oem_bundles_bool_exp"],
	codePrefix?: GraphQLTypes["String_comparison_exp"],
	countrycode?: GraphQLTypes["bigint_comparison_exp"],
	dateOfLastBatch?: GraphQLTypes["timestamptz_comparison_exp"],
	displayName?: GraphQLTypes["String_comparison_exp"],
	inactive?: GraphQLTypes["Boolean_comparison_exp"],
	nextIssue?: GraphQLTypes["bigint_comparison_exp"],
	partnerId?: GraphQLTypes["bigint_comparison_exp"],
	purchaseOptions?: GraphQLTypes["vectric_oem_purchase_options_bool_exp"],
	staff?: GraphQLTypes["vectric_oem_staff_customer_bool_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.oem_partners" */
["vectric_oem_partners_inc_input"]: {
		countrycode?: GraphQLTypes["bigint"],
	nextIssue?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.oem_partners" */
["vectric_oem_partners_insert_input"]: {
		bundles?: GraphQLTypes["vectric_sales_oem_bundles_arr_rel_insert_input"],
	codePrefix?: string,
	countrycode?: GraphQLTypes["bigint"],
	dateOfLastBatch?: GraphQLTypes["timestamptz"],
	displayName?: string,
	inactive?: boolean,
	nextIssue?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"],
	purchaseOptions?: GraphQLTypes["vectric_oem_purchase_options_arr_rel_insert_input"],
	staff?: GraphQLTypes["vectric_oem_staff_customer_arr_rel_insert_input"]
};
	/** input type for inserting object relation for remote table "vectric.oem_partners" */
["vectric_oem_partners_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_oem_partners_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_oem_partners_on_conflict"]
};
	/** on conflict condition type for table "vectric.oem_partners" */
["vectric_oem_partners_on_conflict"]: {
		constraint: GraphQLTypes["vectric_oem_partners_constraint"],
	update_columns: Array<GraphQLTypes["vectric_oem_partners_update_column"]>,
	where?: GraphQLTypes["vectric_oem_partners_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.oem_partners". */
["vectric_oem_partners_order_by"]: {
		bundles_aggregate?: GraphQLTypes["vectric_sales_oem_bundles_aggregate_order_by"],
	codePrefix?: GraphQLTypes["order_by"],
	countrycode?: GraphQLTypes["order_by"],
	dateOfLastBatch?: GraphQLTypes["order_by"],
	displayName?: GraphQLTypes["order_by"],
	inactive?: GraphQLTypes["order_by"],
	nextIssue?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	purchaseOptions_aggregate?: GraphQLTypes["vectric_oem_purchase_options_aggregate_order_by"],
	staff_aggregate?: GraphQLTypes["vectric_oem_staff_customer_aggregate_order_by"]
};
	/** primary key columns input for table: vectric_oem_partners */
["vectric_oem_partners_pk_columns_input"]: {
		partnerId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_partners" */
["vectric_oem_partners_set_input"]: {
		codePrefix?: string,
	countrycode?: GraphQLTypes["bigint"],
	dateOfLastBatch?: GraphQLTypes["timestamptz"],
	displayName?: string,
	inactive?: boolean,
	nextIssue?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"]
};
	/** Boolean expression to filter rows from the table "vectric.oem_products". All fields are combined with a logical 'AND'. */
["vectric_oem_products_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_oem_products_bool_exp"]>,
	_not?: GraphQLTypes["vectric_oem_products_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_oem_products_bool_exp"]>,
	detailedProducts?: GraphQLTypes["vectric_oem_detailed_products_bool_exp"],
	enabled?: GraphQLTypes["Boolean_comparison_exp"],
	oemFastspringId?: GraphQLTypes["String_comparison_exp"],
	oemProductId?: GraphQLTypes["bigint_comparison_exp"],
	product?: GraphQLTypes["vectric_products_products_bool_exp"],
	productId?: GraphQLTypes["bigint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.oem_products" */
["vectric_oem_products_inc_input"]: {
		oemProductId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.oem_products" */
["vectric_oem_products_insert_input"]: {
		detailedProducts?: GraphQLTypes["vectric_oem_detailed_products_arr_rel_insert_input"],
	enabled?: boolean,
	oemFastspringId?: string,
	oemProductId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["vectric_products_products_obj_rel_insert_input"],
	productId?: GraphQLTypes["bigint"]
};
	/** input type for inserting object relation for remote table "vectric.oem_products" */
["vectric_oem_products_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_oem_products_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_oem_products_on_conflict"]
};
	/** on conflict condition type for table "vectric.oem_products" */
["vectric_oem_products_on_conflict"]: {
		constraint: GraphQLTypes["vectric_oem_products_constraint"],
	update_columns: Array<GraphQLTypes["vectric_oem_products_update_column"]>,
	where?: GraphQLTypes["vectric_oem_products_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.oem_products". */
["vectric_oem_products_order_by"]: {
		detailedProducts_aggregate?: GraphQLTypes["vectric_oem_detailed_products_aggregate_order_by"],
	enabled?: GraphQLTypes["order_by"],
	oemFastspringId?: GraphQLTypes["order_by"],
	oemProductId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["vectric_products_products_order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_oem_products */
["vectric_oem_products_pk_columns_input"]: {
		oemProductId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_products" */
["vectric_oem_products_set_input"]: {
		enabled?: boolean,
	oemFastspringId?: string,
	oemProductId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** order by aggregate values of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_oem_purchase_options_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_oem_purchase_options_max_order_by"],
	min?: GraphQLTypes["vectric_oem_purchase_options_min_order_by"],
	stddev?: GraphQLTypes["vectric_oem_purchase_options_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_oem_purchase_options_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_oem_purchase_options_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_oem_purchase_options_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_oem_purchase_options_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_oem_purchase_options_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_oem_purchase_options_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_oem_purchase_options_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_oem_purchase_options_on_conflict"]
};
	/** order by avg() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_avg_order_by"]: {
		maxQuantity?: GraphQLTypes["order_by"],
	minQuantity?: GraphQLTypes["order_by"],
	optionId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.oem_purchase_options". All fields are combined with a logical 'AND'. */
["vectric_oem_purchase_options_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_oem_purchase_options_bool_exp"]>,
	_not?: GraphQLTypes["vectric_oem_purchase_options_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_oem_purchase_options_bool_exp"]>,
	emailLicenceDetails?: GraphQLTypes["Boolean_comparison_exp"],
	maxQuantity?: GraphQLTypes["bigint_comparison_exp"],
	minQuantity?: GraphQLTypes["bigint_comparison_exp"],
	multipleLicences?: GraphQLTypes["Boolean_comparison_exp"],
	optionId?: GraphQLTypes["bigint_comparison_exp"],
	partner?: GraphQLTypes["vectric_oem_partners_bool_exp"],
	partnerId?: GraphQLTypes["bigint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_inc_input"]: {
		maxQuantity?: GraphQLTypes["bigint"],
	minQuantity?: GraphQLTypes["bigint"],
	optionId?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_insert_input"]: {
		emailLicenceDetails?: boolean,
	maxQuantity?: GraphQLTypes["bigint"],
	minQuantity?: GraphQLTypes["bigint"],
	multipleLicences?: boolean,
	optionId?: GraphQLTypes["bigint"],
	partner?: GraphQLTypes["vectric_oem_partners_obj_rel_insert_input"],
	partnerId?: GraphQLTypes["bigint"]
};
	/** order by max() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_max_order_by"]: {
		maxQuantity?: GraphQLTypes["order_by"],
	minQuantity?: GraphQLTypes["order_by"],
	optionId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_min_order_by"]: {
		maxQuantity?: GraphQLTypes["order_by"],
	minQuantity?: GraphQLTypes["order_by"],
	optionId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"]
};
	/** on conflict condition type for table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_on_conflict"]: {
		constraint: GraphQLTypes["vectric_oem_purchase_options_constraint"],
	update_columns: Array<GraphQLTypes["vectric_oem_purchase_options_update_column"]>,
	where?: GraphQLTypes["vectric_oem_purchase_options_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.oem_purchase_options". */
["vectric_oem_purchase_options_order_by"]: {
		emailLicenceDetails?: GraphQLTypes["order_by"],
	maxQuantity?: GraphQLTypes["order_by"],
	minQuantity?: GraphQLTypes["order_by"],
	multipleLicences?: GraphQLTypes["order_by"],
	optionId?: GraphQLTypes["order_by"],
	partner?: GraphQLTypes["vectric_oem_partners_order_by"],
	partnerId?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_oem_purchase_options */
["vectric_oem_purchase_options_pk_columns_input"]: {
		optionId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_set_input"]: {
		emailLicenceDetails?: boolean,
	maxQuantity?: GraphQLTypes["bigint"],
	minQuantity?: GraphQLTypes["bigint"],
	multipleLicences?: boolean,
	optionId?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"]
};
	/** order by stddev() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_stddev_order_by"]: {
		maxQuantity?: GraphQLTypes["order_by"],
	minQuantity?: GraphQLTypes["order_by"],
	optionId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_stddev_pop_order_by"]: {
		maxQuantity?: GraphQLTypes["order_by"],
	minQuantity?: GraphQLTypes["order_by"],
	optionId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_stddev_samp_order_by"]: {
		maxQuantity?: GraphQLTypes["order_by"],
	minQuantity?: GraphQLTypes["order_by"],
	optionId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_sum_order_by"]: {
		maxQuantity?: GraphQLTypes["order_by"],
	minQuantity?: GraphQLTypes["order_by"],
	optionId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_var_pop_order_by"]: {
		maxQuantity?: GraphQLTypes["order_by"],
	minQuantity?: GraphQLTypes["order_by"],
	optionId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_var_samp_order_by"]: {
		maxQuantity?: GraphQLTypes["order_by"],
	minQuantity?: GraphQLTypes["order_by"],
	optionId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.oem_purchase_options" */
["vectric_oem_purchase_options_variance_order_by"]: {
		maxQuantity?: GraphQLTypes["order_by"],
	minQuantity?: GraphQLTypes["order_by"],
	optionId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.oem_staff_admin_ownership". All fields are combined with a logical 'AND'. */
["vectric_oem_staff_admin_ownership_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_oem_staff_admin_ownership_bool_exp"]>,
	_not?: GraphQLTypes["vectric_oem_staff_admin_ownership_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_oem_staff_admin_ownership_bool_exp"]>,
	admin?: GraphQLTypes["Boolean_comparison_exp"],
	adminId?: GraphQLTypes["bigint_comparison_exp"],
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	customerName?: GraphQLTypes["String_comparison_exp"],
	dateAccepted?: GraphQLTypes["timestamptz_comparison_exp"],
	displayStatus?: GraphQLTypes["String_comparison_exp"],
	email?: GraphQLTypes["String_comparison_exp"],
	partnerId?: GraphQLTypes["bigint_comparison_exp"],
	status?: GraphQLTypes["bigint_comparison_exp"]
};
	/** Ordering options when selecting data from "vectric.oem_staff_admin_ownership". */
["vectric_oem_staff_admin_ownership_order_by"]: {
		admin?: GraphQLTypes["order_by"],
	adminId?: GraphQLTypes["order_by"],
	customerId?: GraphQLTypes["order_by"],
	customerName?: GraphQLTypes["order_by"],
	dateAccepted?: GraphQLTypes["order_by"],
	displayStatus?: GraphQLTypes["order_by"],
	email?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** order by aggregate values of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_oem_staff_customer_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_oem_staff_customer_max_order_by"],
	min?: GraphQLTypes["vectric_oem_staff_customer_min_order_by"],
	stddev?: GraphQLTypes["vectric_oem_staff_customer_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_oem_staff_customer_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_oem_staff_customer_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_oem_staff_customer_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_oem_staff_customer_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_oem_staff_customer_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_oem_staff_customer_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_oem_staff_customer_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_oem_staff_customer_on_conflict"]
};
	/** order by avg() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_avg_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	staffId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.oem_staff_customer". All fields are combined with a logical 'AND'. */
["vectric_oem_staff_customer_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_oem_staff_customer_bool_exp"]>,
	_not?: GraphQLTypes["vectric_oem_staff_customer_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_oem_staff_customer_bool_exp"]>,
	admin?: GraphQLTypes["Boolean_comparison_exp"],
	customer?: GraphQLTypes["vectric_sales_customers_bool_exp"],
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	dataRequested?: GraphQLTypes["timestamptz_comparison_exp"],
	dateAccepted?: GraphQLTypes["timestamptz_comparison_exp"],
	dateUpdated?: GraphQLTypes["timestamptz_comparison_exp"],
	inviteStatus?: GraphQLTypes["vectric_oem_invite_status_bool_exp"],
	partner?: GraphQLTypes["vectric_oem_partners_bool_exp"],
	partnerId?: GraphQLTypes["bigint_comparison_exp"],
	staffId?: GraphQLTypes["bigint_comparison_exp"],
	status?: GraphQLTypes["bigint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_inc_input"]: {
		customerId?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"],
	staffId?: GraphQLTypes["bigint"],
	status?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_insert_input"]: {
		admin?: boolean,
	customer?: GraphQLTypes["vectric_sales_customers_obj_rel_insert_input"],
	customerId?: GraphQLTypes["bigint"],
	dataRequested?: GraphQLTypes["timestamptz"],
	dateAccepted?: GraphQLTypes["timestamptz"],
	dateUpdated?: GraphQLTypes["timestamptz"],
	inviteStatus?: GraphQLTypes["vectric_oem_invite_status_obj_rel_insert_input"],
	partner?: GraphQLTypes["vectric_oem_partners_obj_rel_insert_input"],
	partnerId?: GraphQLTypes["bigint"],
	staffId?: GraphQLTypes["bigint"],
	status?: GraphQLTypes["bigint"]
};
	/** order by max() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_max_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	dataRequested?: GraphQLTypes["order_by"],
	dateAccepted?: GraphQLTypes["order_by"],
	dateUpdated?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	staffId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_min_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	dataRequested?: GraphQLTypes["order_by"],
	dateAccepted?: GraphQLTypes["order_by"],
	dateUpdated?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	staffId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** on conflict condition type for table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_on_conflict"]: {
		constraint: GraphQLTypes["vectric_oem_staff_customer_constraint"],
	update_columns: Array<GraphQLTypes["vectric_oem_staff_customer_update_column"]>,
	where?: GraphQLTypes["vectric_oem_staff_customer_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.oem_staff_customer". */
["vectric_oem_staff_customer_order_by"]: {
		admin?: GraphQLTypes["order_by"],
	customer?: GraphQLTypes["vectric_sales_customers_order_by"],
	customerId?: GraphQLTypes["order_by"],
	dataRequested?: GraphQLTypes["order_by"],
	dateAccepted?: GraphQLTypes["order_by"],
	dateUpdated?: GraphQLTypes["order_by"],
	inviteStatus?: GraphQLTypes["vectric_oem_invite_status_order_by"],
	partner?: GraphQLTypes["vectric_oem_partners_order_by"],
	partnerId?: GraphQLTypes["order_by"],
	staffId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_oem_staff_customer */
["vectric_oem_staff_customer_pk_columns_input"]: {
		staffId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_set_input"]: {
		admin?: boolean,
	customerId?: GraphQLTypes["bigint"],
	dataRequested?: GraphQLTypes["timestamptz"],
	dateAccepted?: GraphQLTypes["timestamptz"],
	dateUpdated?: GraphQLTypes["timestamptz"],
	partnerId?: GraphQLTypes["bigint"],
	staffId?: GraphQLTypes["bigint"],
	status?: GraphQLTypes["bigint"]
};
	/** order by stddev() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_stddev_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	staffId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_stddev_pop_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	staffId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_stddev_samp_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	staffId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_sum_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	staffId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_var_pop_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	staffId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_var_samp_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	staffId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.oem_staff_customer" */
["vectric_oem_staff_customer_variance_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	staffId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** order by aggregate values of table "vectric.organization_audit" */
["vectric_organization_audit_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_organization_audit_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_organization_audit_max_order_by"],
	min?: GraphQLTypes["vectric_organization_audit_min_order_by"],
	stddev?: GraphQLTypes["vectric_organization_audit_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_organization_audit_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_organization_audit_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_organization_audit_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_organization_audit_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_organization_audit_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_organization_audit_variance_order_by"]
};
	/** append existing jsonb value of filtered columns with new jsonb value */
["vectric_organization_audit_append_input"]: {
		auditPayload?: GraphQLTypes["jsonb"]
};
	/** input type for inserting array relation for remote table "vectric.organization_audit" */
["vectric_organization_audit_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_organization_audit_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_organization_audit_on_conflict"]
};
	/** order by avg() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_avg_order_by"]: {
		auditId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.organization_audit". All fields are combined with a logical 'AND'. */
["vectric_organization_audit_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_organization_audit_bool_exp"]>,
	_not?: GraphQLTypes["vectric_organization_audit_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_organization_audit_bool_exp"]>,
	auditDate?: GraphQLTypes["timestamp_comparison_exp"],
	auditId?: GraphQLTypes["Int_comparison_exp"],
	auditPayload?: GraphQLTypes["jsonb_comparison_exp"],
	auditType?: GraphQLTypes["String_comparison_exp"],
	author?: GraphQLTypes["String_comparison_exp"],
	internalChange?: GraphQLTypes["Boolean_comparison_exp"],
	ipAddress?: GraphQLTypes["String_comparison_exp"],
	organizationId?: GraphQLTypes["Int_comparison_exp"]
};
	/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
["vectric_organization_audit_delete_at_path_input"]: {
		auditPayload?: Array<string>
};
	/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
["vectric_organization_audit_delete_elem_input"]: {
		auditPayload?: number
};
	/** delete key/value pair or string element. key/value pairs are matched based on their key value */
["vectric_organization_audit_delete_key_input"]: {
		auditPayload?: string
};
	/** input type for incrementing numeric columns in table "vectric.organization_audit" */
["vectric_organization_audit_inc_input"]: {
		auditId?: number,
	organizationId?: number
};
	/** input type for inserting data into table "vectric.organization_audit" */
["vectric_organization_audit_insert_input"]: {
		auditDate?: GraphQLTypes["timestamp"],
	auditId?: number,
	auditPayload?: GraphQLTypes["jsonb"],
	auditType?: string,
	author?: string,
	internalChange?: boolean,
	ipAddress?: string,
	organizationId?: number
};
	/** order by max() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_max_order_by"]: {
		auditDate?: GraphQLTypes["order_by"],
	auditId?: GraphQLTypes["order_by"],
	auditType?: GraphQLTypes["order_by"],
	author?: GraphQLTypes["order_by"],
	ipAddress?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_min_order_by"]: {
		auditDate?: GraphQLTypes["order_by"],
	auditId?: GraphQLTypes["order_by"],
	auditType?: GraphQLTypes["order_by"],
	author?: GraphQLTypes["order_by"],
	ipAddress?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** on conflict condition type for table "vectric.organization_audit" */
["vectric_organization_audit_on_conflict"]: {
		constraint: GraphQLTypes["vectric_organization_audit_constraint"],
	update_columns: Array<GraphQLTypes["vectric_organization_audit_update_column"]>,
	where?: GraphQLTypes["vectric_organization_audit_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.organization_audit". */
["vectric_organization_audit_order_by"]: {
		auditDate?: GraphQLTypes["order_by"],
	auditId?: GraphQLTypes["order_by"],
	auditPayload?: GraphQLTypes["order_by"],
	auditType?: GraphQLTypes["order_by"],
	author?: GraphQLTypes["order_by"],
	internalChange?: GraphQLTypes["order_by"],
	ipAddress?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_organization_audit */
["vectric_organization_audit_pk_columns_input"]: {
		auditId: number
};
	/** prepend existing jsonb value of filtered columns with new jsonb value */
["vectric_organization_audit_prepend_input"]: {
		auditPayload?: GraphQLTypes["jsonb"]
};
	/** input type for updating data in table "vectric.organization_audit" */
["vectric_organization_audit_set_input"]: {
		auditDate?: GraphQLTypes["timestamp"],
	auditId?: number,
	auditPayload?: GraphQLTypes["jsonb"],
	auditType?: string,
	author?: string,
	internalChange?: boolean,
	ipAddress?: string,
	organizationId?: number
};
	/** order by stddev() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_stddev_order_by"]: {
		auditId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_stddev_pop_order_by"]: {
		auditId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_stddev_samp_order_by"]: {
		auditId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_sum_order_by"]: {
		auditId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_var_pop_order_by"]: {
		auditId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_var_samp_order_by"]: {
		auditId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.organization_audit" */
["vectric_organization_audit_variance_order_by"]: {
		auditId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.organization_licence_scope". All fields are combined with a logical 'AND'. */
["vectric_organization_licence_scope_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_organization_licence_scope_bool_exp"]>,
	_not?: GraphQLTypes["vectric_organization_licence_scope_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_organization_licence_scope_bool_exp"]>,
	scope?: GraphQLTypes["String_comparison_exp"]
};
	/** Boolean expression to compare columns of type "vectric_organization_licence_scope_enum". All fields are combined with logical 'AND'. */
["vectric_organization_licence_scope_enum_comparison_exp"]: {
		_eq?: GraphQLTypes["vectric_organization_licence_scope_enum"],
	_in?: Array<GraphQLTypes["vectric_organization_licence_scope_enum"]>,
	_is_null?: boolean,
	_neq?: GraphQLTypes["vectric_organization_licence_scope_enum"],
	_nin?: Array<GraphQLTypes["vectric_organization_licence_scope_enum"]>
};
	/** input type for inserting data into table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_insert_input"]: {
		scope?: string
};
	/** input type for inserting object relation for remote table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_organization_licence_scope_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_organization_licence_scope_on_conflict"]
};
	/** on conflict condition type for table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_on_conflict"]: {
		constraint: GraphQLTypes["vectric_organization_licence_scope_constraint"],
	update_columns: Array<GraphQLTypes["vectric_organization_licence_scope_update_column"]>,
	where?: GraphQLTypes["vectric_organization_licence_scope_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.organization_licence_scope". */
["vectric_organization_licence_scope_order_by"]: {
		scope?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_organization_licence_scope */
["vectric_organization_licence_scope_pk_columns_input"]: {
		scope: string
};
	/** input type for updating data in table "vectric.organization_licence_scope" */
["vectric_organization_licence_scope_set_input"]: {
		scope?: string
};
	/** Boolean expression to filter rows from the table "vectric.organization_memberships_admin_access". All fields are combined with a logical 'AND'. */
["vectric_organization_memberships_admin_access_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_organization_memberships_admin_access_bool_exp"]>,
	_not?: GraphQLTypes["vectric_organization_memberships_admin_access_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_organization_memberships_admin_access_bool_exp"]>,
	addedBy?: GraphQLTypes["String_comparison_exp"],
	amendedBy?: GraphQLTypes["String_comparison_exp"],
	customerEmail?: GraphQLTypes["String_comparison_exp"],
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	customerName?: GraphQLTypes["String_comparison_exp"],
	customerRegisteredUsername?: GraphQLTypes["String_comparison_exp"],
	dateAdded?: GraphQLTypes["timestamp_comparison_exp"],
	dateAmended?: GraphQLTypes["timestamp_comparison_exp"],
	invitations?: GraphQLTypes["vectric_membership_invitations_bool_exp"],
	membershipId?: GraphQLTypes["Int_comparison_exp"],
	membershipRole?: GraphQLTypes["String_comparison_exp"],
	membershipStatus?: GraphQLTypes["String_comparison_exp"],
	organization?: GraphQLTypes["vectric_organizations_bool_exp"],
	organizationCountryId?: GraphQLTypes["bigint_comparison_exp"],
	organizationCountryName?: GraphQLTypes["String_comparison_exp"],
	organizationId?: GraphQLTypes["Int_comparison_exp"],
	organizationName?: GraphQLTypes["String_comparison_exp"],
	organizationType?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for inserting data into table "vectric.organization_memberships_admin_access" */
["vectric_organization_memberships_admin_access_insert_input"]: {
		addedBy?: string,
	amendedBy?: string,
	customerEmail?: string,
	customerId?: GraphQLTypes["bigint"],
	customerName?: string,
	customerRegisteredUsername?: string,
	dateAdded?: GraphQLTypes["timestamp"],
	dateAmended?: GraphQLTypes["timestamp"],
	invitations?: GraphQLTypes["vectric_membership_invitations_arr_rel_insert_input"],
	membershipId?: number,
	membershipRole?: string,
	membershipStatus?: string,
	organization?: GraphQLTypes["vectric_organizations_obj_rel_insert_input"],
	organizationCountryId?: GraphQLTypes["bigint"],
	organizationCountryName?: string,
	organizationId?: number,
	organizationName?: string,
	organizationType?: string
};
	/** input type for inserting object relation for remote table "vectric.organization_memberships_admin_access" */
["vectric_organization_memberships_admin_access_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_organization_memberships_admin_access_insert_input"]
};
	/** Ordering options when selecting data from "vectric.organization_memberships_admin_access". */
["vectric_organization_memberships_admin_access_order_by"]: {
		addedBy?: GraphQLTypes["order_by"],
	amendedBy?: GraphQLTypes["order_by"],
	customerEmail?: GraphQLTypes["order_by"],
	customerId?: GraphQLTypes["order_by"],
	customerName?: GraphQLTypes["order_by"],
	customerRegisteredUsername?: GraphQLTypes["order_by"],
	dateAdded?: GraphQLTypes["order_by"],
	dateAmended?: GraphQLTypes["order_by"],
	invitations_aggregate?: GraphQLTypes["vectric_membership_invitations_aggregate_order_by"],
	membershipId?: GraphQLTypes["order_by"],
	membershipRole?: GraphQLTypes["order_by"],
	membershipStatus?: GraphQLTypes["order_by"],
	organization?: GraphQLTypes["vectric_organizations_order_by"],
	organizationCountryId?: GraphQLTypes["order_by"],
	organizationCountryName?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"],
	organizationName?: GraphQLTypes["order_by"],
	organizationType?: GraphQLTypes["order_by"]
};
	/** order by aggregate values of table "vectric.organization_order_items" */
["vectric_organization_order_items_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_organization_order_items_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_organization_order_items_max_order_by"],
	min?: GraphQLTypes["vectric_organization_order_items_min_order_by"],
	stddev?: GraphQLTypes["vectric_organization_order_items_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_organization_order_items_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_organization_order_items_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_organization_order_items_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_organization_order_items_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_organization_order_items_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_organization_order_items_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.organization_order_items" */
["vectric_organization_order_items_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_organization_order_items_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_organization_order_items_on_conflict"]
};
	/** order by avg() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_avg_order_by"]: {
		orderItemId?: GraphQLTypes["order_by"],
	saleableProductId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.organization_order_items". All fields are combined with a logical 'AND'. */
["vectric_organization_order_items_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_organization_order_items_bool_exp"]>,
	_not?: GraphQLTypes["vectric_organization_order_items_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_organization_order_items_bool_exp"]>,
	order?: GraphQLTypes["vectric_organization_orders_bool_exp"],
	orderId?: GraphQLTypes["String_comparison_exp"],
	orderItemId?: GraphQLTypes["Int_comparison_exp"],
	ownedItems?: GraphQLTypes["vectric_owned_items_bool_exp"],
	saleableProduct?: GraphQLTypes["vectric_saleable_products_bool_exp"],
	saleableProductId?: GraphQLTypes["Int_comparison_exp"],
	subscription?: GraphQLTypes["Boolean_comparison_exp"],
	subscriptionContract?: GraphQLTypes["vectric_subscription_contracts_bool_exp"],
	subscriptionEvents?: GraphQLTypes["vectric_subscription_events_bool_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.organization_order_items" */
["vectric_organization_order_items_inc_input"]: {
		orderItemId?: number,
	saleableProductId?: number
};
	/** input type for inserting data into table "vectric.organization_order_items" */
["vectric_organization_order_items_insert_input"]: {
		order?: GraphQLTypes["vectric_organization_orders_obj_rel_insert_input"],
	orderId?: string,
	orderItemId?: number,
	ownedItems?: GraphQLTypes["vectric_owned_items_arr_rel_insert_input"],
	saleableProduct?: GraphQLTypes["vectric_saleable_products_obj_rel_insert_input"],
	saleableProductId?: number,
	subscription?: boolean,
	subscriptionContract?: GraphQLTypes["vectric_subscription_contracts_obj_rel_insert_input"],
	subscriptionEvents?: GraphQLTypes["vectric_subscription_events_arr_rel_insert_input"]
};
	/** order by max() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_max_order_by"]: {
		orderId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	saleableProductId?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_min_order_by"]: {
		orderId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	saleableProductId?: GraphQLTypes["order_by"]
};
	/** input type for inserting object relation for remote table "vectric.organization_order_items" */
["vectric_organization_order_items_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_organization_order_items_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_organization_order_items_on_conflict"]
};
	/** on conflict condition type for table "vectric.organization_order_items" */
["vectric_organization_order_items_on_conflict"]: {
		constraint: GraphQLTypes["vectric_organization_order_items_constraint"],
	update_columns: Array<GraphQLTypes["vectric_organization_order_items_update_column"]>,
	where?: GraphQLTypes["vectric_organization_order_items_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.organization_order_items". */
["vectric_organization_order_items_order_by"]: {
		order?: GraphQLTypes["vectric_organization_orders_order_by"],
	orderId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	ownedItems_aggregate?: GraphQLTypes["vectric_owned_items_aggregate_order_by"],
	saleableProduct?: GraphQLTypes["vectric_saleable_products_order_by"],
	saleableProductId?: GraphQLTypes["order_by"],
	subscription?: GraphQLTypes["order_by"],
	subscriptionContract?: GraphQLTypes["vectric_subscription_contracts_order_by"],
	subscriptionEvents_aggregate?: GraphQLTypes["vectric_subscription_events_aggregate_order_by"]
};
	/** primary key columns input for table: vectric_organization_order_items */
["vectric_organization_order_items_pk_columns_input"]: {
		orderItemId: number
};
	/** input type for updating data in table "vectric.organization_order_items" */
["vectric_organization_order_items_set_input"]: {
		orderId?: string,
	orderItemId?: number,
	saleableProductId?: number,
	subscription?: boolean
};
	/** order by stddev() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_stddev_order_by"]: {
		orderItemId?: GraphQLTypes["order_by"],
	saleableProductId?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_stddev_pop_order_by"]: {
		orderItemId?: GraphQLTypes["order_by"],
	saleableProductId?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_stddev_samp_order_by"]: {
		orderItemId?: GraphQLTypes["order_by"],
	saleableProductId?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_sum_order_by"]: {
		orderItemId?: GraphQLTypes["order_by"],
	saleableProductId?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_var_pop_order_by"]: {
		orderItemId?: GraphQLTypes["order_by"],
	saleableProductId?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_var_samp_order_by"]: {
		orderItemId?: GraphQLTypes["order_by"],
	saleableProductId?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.organization_order_items" */
["vectric_organization_order_items_variance_order_by"]: {
		orderItemId?: GraphQLTypes["order_by"],
	saleableProductId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.organization_orders". All fields are combined with a logical 'AND'. */
["vectric_organization_orders_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_organization_orders_bool_exp"]>,
	_not?: GraphQLTypes["vectric_organization_orders_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_organization_orders_bool_exp"]>,
	amendedBy?: GraphQLTypes["String_comparison_exp"],
	createdBy?: GraphQLTypes["String_comparison_exp"],
	dateAmended?: GraphQLTypes["timestamp_comparison_exp"],
	dateCreated?: GraphQLTypes["timestamp_comparison_exp"],
	externalReference?: GraphQLTypes["String_comparison_exp"],
	items?: GraphQLTypes["vectric_organization_order_items_bool_exp"],
	notes?: GraphQLTypes["String_comparison_exp"],
	orderDate?: GraphQLTypes["timestamp_comparison_exp"],
	orderId?: GraphQLTypes["String_comparison_exp"],
	organization?: GraphQLTypes["vectric_organizations_bool_exp"],
	organizationId?: GraphQLTypes["Int_comparison_exp"],
	purchaser?: GraphQLTypes["vectric_sales_customers_bool_exp"],
	purchaserId?: GraphQLTypes["Int_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.organization_orders" */
["vectric_organization_orders_inc_input"]: {
		organizationId?: number,
	purchaserId?: number
};
	/** input type for inserting data into table "vectric.organization_orders" */
["vectric_organization_orders_insert_input"]: {
		amendedBy?: string,
	createdBy?: string,
	dateAmended?: GraphQLTypes["timestamp"],
	dateCreated?: GraphQLTypes["timestamp"],
	externalReference?: string,
	items?: GraphQLTypes["vectric_organization_order_items_arr_rel_insert_input"],
	notes?: string,
	orderDate?: GraphQLTypes["timestamp"],
	orderId?: string,
	organization?: GraphQLTypes["vectric_organizations_obj_rel_insert_input"],
	organizationId?: number,
	purchaser?: GraphQLTypes["vectric_sales_customers_obj_rel_insert_input"],
	purchaserId?: number
};
	/** input type for inserting object relation for remote table "vectric.organization_orders" */
["vectric_organization_orders_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_organization_orders_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_organization_orders_on_conflict"]
};
	/** on conflict condition type for table "vectric.organization_orders" */
["vectric_organization_orders_on_conflict"]: {
		constraint: GraphQLTypes["vectric_organization_orders_constraint"],
	update_columns: Array<GraphQLTypes["vectric_organization_orders_update_column"]>,
	where?: GraphQLTypes["vectric_organization_orders_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.organization_orders". */
["vectric_organization_orders_order_by"]: {
		amendedBy?: GraphQLTypes["order_by"],
	createdBy?: GraphQLTypes["order_by"],
	dateAmended?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	externalReference?: GraphQLTypes["order_by"],
	items_aggregate?: GraphQLTypes["vectric_organization_order_items_aggregate_order_by"],
	notes?: GraphQLTypes["order_by"],
	orderDate?: GraphQLTypes["order_by"],
	orderId?: GraphQLTypes["order_by"],
	organization?: GraphQLTypes["vectric_organizations_order_by"],
	organizationId?: GraphQLTypes["order_by"],
	purchaser?: GraphQLTypes["vectric_sales_customers_order_by"],
	purchaserId?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_organization_orders */
["vectric_organization_orders_pk_columns_input"]: {
		orderId: string
};
	/** input type for updating data in table "vectric.organization_orders" */
["vectric_organization_orders_set_input"]: {
		amendedBy?: string,
	createdBy?: string,
	dateAmended?: GraphQLTypes["timestamp"],
	dateCreated?: GraphQLTypes["timestamp"],
	externalReference?: string,
	notes?: string,
	orderDate?: GraphQLTypes["timestamp"],
	orderId?: string,
	organizationId?: number,
	purchaserId?: number
};
	/** Boolean expression to filter rows from the table "vectric.organization_types". All fields are combined with a logical 'AND'. */
["vectric_organization_types_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_organization_types_bool_exp"]>,
	_not?: GraphQLTypes["vectric_organization_types_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_organization_types_bool_exp"]>,
	type?: GraphQLTypes["String_comparison_exp"]
};
	/** Boolean expression to compare columns of type "vectric_organization_types_enum". All fields are combined with logical 'AND'. */
["vectric_organization_types_enum_comparison_exp"]: {
		_eq?: GraphQLTypes["vectric_organization_types_enum"],
	_in?: Array<GraphQLTypes["vectric_organization_types_enum"]>,
	_is_null?: boolean,
	_neq?: GraphQLTypes["vectric_organization_types_enum"],
	_nin?: Array<GraphQLTypes["vectric_organization_types_enum"]>
};
	/** input type for inserting data into table "vectric.organization_types" */
["vectric_organization_types_insert_input"]: {
		type?: string
};
	/** input type for inserting object relation for remote table "vectric.organization_types" */
["vectric_organization_types_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_organization_types_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_organization_types_on_conflict"]
};
	/** on conflict condition type for table "vectric.organization_types" */
["vectric_organization_types_on_conflict"]: {
		constraint: GraphQLTypes["vectric_organization_types_constraint"],
	update_columns: Array<GraphQLTypes["vectric_organization_types_update_column"]>,
	where?: GraphQLTypes["vectric_organization_types_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.organization_types". */
["vectric_organization_types_order_by"]: {
		type?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_organization_types */
["vectric_organization_types_pk_columns_input"]: {
		type: string
};
	/** input type for updating data in table "vectric.organization_types" */
["vectric_organization_types_set_input"]: {
		type?: string
};
	/** Boolean expression to filter rows from the table "vectric.organizations". All fields are combined with a logical 'AND'. */
["vectric_organizations_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_organizations_bool_exp"]>,
	_not?: GraphQLTypes["vectric_organizations_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_organizations_bool_exp"]>,
	active?: GraphQLTypes["Boolean_comparison_exp"],
	activeMembers?: GraphQLTypes["vectric_active_memberships_bool_exp"],
	amendedBy?: GraphQLTypes["String_comparison_exp"],
	auditLogs?: GraphQLTypes["vectric_organization_audit_bool_exp"],
	country?: GraphQLTypes["vectric_countries_bool_exp"],
	countryId?: GraphQLTypes["bigint_comparison_exp"],
	createdBy?: GraphQLTypes["String_comparison_exp"],
	dateAmended?: GraphQLTypes["timestamp_comparison_exp"],
	dateCreated?: GraphQLTypes["timestamp_comparison_exp"],
	internalNotes?: GraphQLTypes["String_comparison_exp"],
	invitations?: GraphQLTypes["vectric_membership_invitations_bool_exp"],
	memberships?: GraphQLTypes["vectric_memberships_bool_exp"],
	organizationId?: GraphQLTypes["Int_comparison_exp"],
	organizationName?: GraphQLTypes["String_comparison_exp"],
	organizationType?: GraphQLTypes["vectric_organization_types_bool_exp"],
	organizationUUID?: GraphQLTypes["uuid_comparison_exp"],
	type?: GraphQLTypes["vectric_organization_types_enum_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.organizations" */
["vectric_organizations_inc_input"]: {
		countryId?: GraphQLTypes["bigint"],
	organizationId?: number
};
	/** input type for inserting data into table "vectric.organizations" */
["vectric_organizations_insert_input"]: {
		active?: boolean,
	activeMembers?: GraphQLTypes["vectric_active_memberships_arr_rel_insert_input"],
	amendedBy?: string,
	auditLogs?: GraphQLTypes["vectric_organization_audit_arr_rel_insert_input"],
	country?: GraphQLTypes["vectric_countries_obj_rel_insert_input"],
	countryId?: GraphQLTypes["bigint"],
	createdBy?: string,
	dateAmended?: GraphQLTypes["timestamp"],
	dateCreated?: GraphQLTypes["timestamp"],
	internalNotes?: string,
	invitations?: GraphQLTypes["vectric_membership_invitations_arr_rel_insert_input"],
	memberships?: GraphQLTypes["vectric_memberships_arr_rel_insert_input"],
	organizationId?: number,
	organizationName?: string,
	organizationType?: GraphQLTypes["vectric_organization_types_obj_rel_insert_input"],
	organizationUUID?: GraphQLTypes["uuid"],
	type?: GraphQLTypes["vectric_organization_types_enum"]
};
	/** input type for inserting object relation for remote table "vectric.organizations" */
["vectric_organizations_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_organizations_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_organizations_on_conflict"]
};
	/** on conflict condition type for table "vectric.organizations" */
["vectric_organizations_on_conflict"]: {
		constraint: GraphQLTypes["vectric_organizations_constraint"],
	update_columns: Array<GraphQLTypes["vectric_organizations_update_column"]>,
	where?: GraphQLTypes["vectric_organizations_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.organizations". */
["vectric_organizations_order_by"]: {
		active?: GraphQLTypes["order_by"],
	activeMembers_aggregate?: GraphQLTypes["vectric_active_memberships_aggregate_order_by"],
	amendedBy?: GraphQLTypes["order_by"],
	auditLogs_aggregate?: GraphQLTypes["vectric_organization_audit_aggregate_order_by"],
	country?: GraphQLTypes["vectric_countries_order_by"],
	countryId?: GraphQLTypes["order_by"],
	createdBy?: GraphQLTypes["order_by"],
	dateAmended?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	internalNotes?: GraphQLTypes["order_by"],
	invitations_aggregate?: GraphQLTypes["vectric_membership_invitations_aggregate_order_by"],
	memberships_aggregate?: GraphQLTypes["vectric_memberships_aggregate_order_by"],
	organizationId?: GraphQLTypes["order_by"],
	organizationName?: GraphQLTypes["order_by"],
	organizationType?: GraphQLTypes["vectric_organization_types_order_by"],
	organizationUUID?: GraphQLTypes["order_by"],
	type?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_organizations */
["vectric_organizations_pk_columns_input"]: {
		organizationId: number
};
	/** input type for updating data in table "vectric.organizations" */
["vectric_organizations_set_input"]: {
		active?: boolean,
	amendedBy?: string,
	countryId?: GraphQLTypes["bigint"],
	createdBy?: string,
	dateAmended?: GraphQLTypes["timestamp"],
	dateCreated?: GraphQLTypes["timestamp"],
	internalNotes?: string,
	organizationId?: number,
	organizationName?: string,
	organizationUUID?: GraphQLTypes["uuid"],
	type?: GraphQLTypes["vectric_organization_types_enum"]
};
	/** Boolean expression to filter rows from the table "vectric.owned_item_assignments". All fields are combined with a logical 'AND'. */
["vectric_owned_item_assignments_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_owned_item_assignments_bool_exp"]>,
	_not?: GraphQLTypes["vectric_owned_item_assignments_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_owned_item_assignments_bool_exp"]>,
	assignedBy?: GraphQLTypes["String_comparison_exp"],
	assignedTo?: GraphQLTypes["bigint_comparison_exp"],
	assignedToMember?: GraphQLTypes["vectric_memberships_bool_exp"],
	assignedToMemberAdminAccess?: GraphQLTypes["vectric_organization_memberships_admin_access_bool_exp"],
	assignment_id?: GraphQLTypes["Int_comparison_exp"],
	dateAssigned?: GraphQLTypes["timestamp_comparison_exp"],
	ownedItemId?: GraphQLTypes["Int_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_inc_input"]: {
		assignedTo?: GraphQLTypes["bigint"],
	assignment_id?: number,
	ownedItemId?: number
};
	/** input type for inserting data into table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_insert_input"]: {
		assignedBy?: string,
	assignedTo?: GraphQLTypes["bigint"],
	assignedToMember?: GraphQLTypes["vectric_memberships_obj_rel_insert_input"],
	assignedToMemberAdminAccess?: GraphQLTypes["vectric_organization_memberships_admin_access_obj_rel_insert_input"],
	assignment_id?: number,
	dateAssigned?: GraphQLTypes["timestamp"],
	ownedItemId?: number
};
	/** input type for inserting object relation for remote table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_owned_item_assignments_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_owned_item_assignments_on_conflict"]
};
	/** on conflict condition type for table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_on_conflict"]: {
		constraint: GraphQLTypes["vectric_owned_item_assignments_constraint"],
	update_columns: Array<GraphQLTypes["vectric_owned_item_assignments_update_column"]>,
	where?: GraphQLTypes["vectric_owned_item_assignments_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.owned_item_assignments". */
["vectric_owned_item_assignments_order_by"]: {
		assignedBy?: GraphQLTypes["order_by"],
	assignedTo?: GraphQLTypes["order_by"],
	assignedToMember?: GraphQLTypes["vectric_memberships_order_by"],
	assignedToMemberAdminAccess?: GraphQLTypes["vectric_organization_memberships_admin_access_order_by"],
	assignment_id?: GraphQLTypes["order_by"],
	dateAssigned?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_owned_item_assignments */
["vectric_owned_item_assignments_pk_columns_input"]: {
		assignment_id: number
};
	/** input type for updating data in table "vectric.owned_item_assignments" */
["vectric_owned_item_assignments_set_input"]: {
		assignedBy?: string,
	assignedTo?: GraphQLTypes["bigint"],
	assignment_id?: number,
	dateAssigned?: GraphQLTypes["timestamp"],
	ownedItemId?: number
};
	/** order by aggregate values of table "vectric.owned_items" */
["vectric_owned_items_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_owned_items_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_owned_items_max_order_by"],
	min?: GraphQLTypes["vectric_owned_items_min_order_by"],
	stddev?: GraphQLTypes["vectric_owned_items_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_owned_items_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_owned_items_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_owned_items_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_owned_items_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_owned_items_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_owned_items_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.owned_items" */
["vectric_owned_items_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_owned_items_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_owned_items_on_conflict"]
};
	/** order by avg() on columns of table "vectric.owned_items" */
["vectric_owned_items_avg_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	ownedProductId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.owned_items". All fields are combined with a logical 'AND'. */
["vectric_owned_items_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_owned_items_bool_exp"]>,
	_not?: GraphQLTypes["vectric_owned_items_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_owned_items_bool_exp"]>,
	amendedBy?: GraphQLTypes["String_comparison_exp"],
	assignment?: GraphQLTypes["vectric_owned_item_assignments_bool_exp"],
	createdBy?: GraphQLTypes["String_comparison_exp"],
	customer?: GraphQLTypes["vectric_sales_customers_bool_exp"],
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	dateAmended?: GraphQLTypes["timestamp_comparison_exp"],
	dateCreated?: GraphQLTypes["timestamp_comparison_exp"],
	entitlements?: GraphQLTypes["vectric_entitlements_bool_exp"],
	licenceScope?: GraphQLTypes["vectric_organization_licence_scope_bool_exp"],
	notes?: GraphQLTypes["String_comparison_exp"],
	orderItem?: GraphQLTypes["vectric_organization_order_items_bool_exp"],
	orderItemId?: GraphQLTypes["Int_comparison_exp"],
	organization?: GraphQLTypes["vectric_organizations_bool_exp"],
	organizationId?: GraphQLTypes["Int_comparison_exp"],
	ownedItemId?: GraphQLTypes["Int_comparison_exp"],
	ownedProduct?: GraphQLTypes["vectric_owned_products_bool_exp"],
	ownedProductId?: GraphQLTypes["Int_comparison_exp"],
	record_date?: GraphQLTypes["timestamp_comparison_exp"],
	scope?: GraphQLTypes["vectric_organization_licence_scope_enum_comparison_exp"],
	status?: GraphQLTypes["Int_comparison_exp"],
	subscription?: GraphQLTypes["Boolean_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.owned_items" */
["vectric_owned_items_inc_input"]: {
		customerId?: GraphQLTypes["bigint"],
	orderItemId?: number,
	organizationId?: number,
	ownedItemId?: number,
	ownedProductId?: number,
	status?: number
};
	/** input type for inserting data into table "vectric.owned_items" */
["vectric_owned_items_insert_input"]: {
		amendedBy?: string,
	assignment?: GraphQLTypes["vectric_owned_item_assignments_obj_rel_insert_input"],
	createdBy?: string,
	customer?: GraphQLTypes["vectric_sales_customers_obj_rel_insert_input"],
	customerId?: GraphQLTypes["bigint"],
	dateAmended?: GraphQLTypes["timestamp"],
	dateCreated?: GraphQLTypes["timestamp"],
	entitlements?: GraphQLTypes["vectric_entitlements_arr_rel_insert_input"],
	licenceScope?: GraphQLTypes["vectric_organization_licence_scope_obj_rel_insert_input"],
	notes?: string,
	orderItem?: GraphQLTypes["vectric_organization_order_items_obj_rel_insert_input"],
	orderItemId?: number,
	organization?: GraphQLTypes["vectric_organizations_obj_rel_insert_input"],
	organizationId?: number,
	ownedItemId?: number,
	ownedProduct?: GraphQLTypes["vectric_owned_products_obj_rel_insert_input"],
	ownedProductId?: number,
	record_date?: GraphQLTypes["timestamp"],
	scope?: GraphQLTypes["vectric_organization_licence_scope_enum"],
	status?: number,
	subscription?: boolean
};
	/** order by max() on columns of table "vectric.owned_items" */
["vectric_owned_items_max_order_by"]: {
		amendedBy?: GraphQLTypes["order_by"],
	createdBy?: GraphQLTypes["order_by"],
	customerId?: GraphQLTypes["order_by"],
	dateAmended?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	notes?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	ownedProductId?: GraphQLTypes["order_by"],
	record_date?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.owned_items" */
["vectric_owned_items_min_order_by"]: {
		amendedBy?: GraphQLTypes["order_by"],
	createdBy?: GraphQLTypes["order_by"],
	customerId?: GraphQLTypes["order_by"],
	dateAmended?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	notes?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	ownedProductId?: GraphQLTypes["order_by"],
	record_date?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** input type for inserting object relation for remote table "vectric.owned_items" */
["vectric_owned_items_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_owned_items_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_owned_items_on_conflict"]
};
	/** on conflict condition type for table "vectric.owned_items" */
["vectric_owned_items_on_conflict"]: {
		constraint: GraphQLTypes["vectric_owned_items_constraint"],
	update_columns: Array<GraphQLTypes["vectric_owned_items_update_column"]>,
	where?: GraphQLTypes["vectric_owned_items_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.owned_items". */
["vectric_owned_items_order_by"]: {
		amendedBy?: GraphQLTypes["order_by"],
	assignment?: GraphQLTypes["vectric_owned_item_assignments_order_by"],
	createdBy?: GraphQLTypes["order_by"],
	customer?: GraphQLTypes["vectric_sales_customers_order_by"],
	customerId?: GraphQLTypes["order_by"],
	dateAmended?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	entitlements_aggregate?: GraphQLTypes["vectric_entitlements_aggregate_order_by"],
	licenceScope?: GraphQLTypes["vectric_organization_licence_scope_order_by"],
	notes?: GraphQLTypes["order_by"],
	orderItem?: GraphQLTypes["vectric_organization_order_items_order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	organization?: GraphQLTypes["vectric_organizations_order_by"],
	organizationId?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	ownedProduct?: GraphQLTypes["vectric_owned_products_order_by"],
	ownedProductId?: GraphQLTypes["order_by"],
	record_date?: GraphQLTypes["order_by"],
	scope?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"],
	subscription?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_owned_items */
["vectric_owned_items_pk_columns_input"]: {
		ownedItemId: number
};
	/** input type for updating data in table "vectric.owned_items" */
["vectric_owned_items_set_input"]: {
		amendedBy?: string,
	createdBy?: string,
	customerId?: GraphQLTypes["bigint"],
	dateAmended?: GraphQLTypes["timestamp"],
	dateCreated?: GraphQLTypes["timestamp"],
	notes?: string,
	orderItemId?: number,
	organizationId?: number,
	ownedItemId?: number,
	ownedProductId?: number,
	record_date?: GraphQLTypes["timestamp"],
	scope?: GraphQLTypes["vectric_organization_licence_scope_enum"],
	status?: number,
	subscription?: boolean
};
	/** order by stddev() on columns of table "vectric.owned_items" */
["vectric_owned_items_stddev_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	ownedProductId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.owned_items" */
["vectric_owned_items_stddev_pop_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	ownedProductId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.owned_items" */
["vectric_owned_items_stddev_samp_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	ownedProductId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.owned_items" */
["vectric_owned_items_sum_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	ownedProductId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.owned_items" */
["vectric_owned_items_var_pop_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	ownedProductId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.owned_items" */
["vectric_owned_items_var_samp_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	ownedProductId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.owned_items" */
["vectric_owned_items_variance_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	organizationId?: GraphQLTypes["order_by"],
	ownedItemId?: GraphQLTypes["order_by"],
	ownedProductId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.owned_products". All fields are combined with a logical 'AND'. */
["vectric_owned_products_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_owned_products_bool_exp"]>,
	_not?: GraphQLTypes["vectric_owned_products_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_owned_products_bool_exp"]>,
	enabled?: GraphQLTypes["Boolean_comparison_exp"],
	enhancement?: GraphQLTypes["Boolean_comparison_exp"],
	productId?: GraphQLTypes["Int_comparison_exp"],
	productName?: GraphQLTypes["String_comparison_exp"],
	productType?: GraphQLTypes["vectric_products_producttype_bool_exp"],
	productTypeId?: GraphQLTypes["Int_comparison_exp"],
	subscription?: GraphQLTypes["Boolean_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.owned_products" */
["vectric_owned_products_inc_input"]: {
		productId?: number,
	productTypeId?: number
};
	/** input type for inserting data into table "vectric.owned_products" */
["vectric_owned_products_insert_input"]: {
		enabled?: boolean,
	enhancement?: boolean,
	productId?: number,
	productName?: string,
	productType?: GraphQLTypes["vectric_products_producttype_obj_rel_insert_input"],
	productTypeId?: number,
	subscription?: boolean
};
	/** input type for inserting object relation for remote table "vectric.owned_products" */
["vectric_owned_products_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_owned_products_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_owned_products_on_conflict"]
};
	/** on conflict condition type for table "vectric.owned_products" */
["vectric_owned_products_on_conflict"]: {
		constraint: GraphQLTypes["vectric_owned_products_constraint"],
	update_columns: Array<GraphQLTypes["vectric_owned_products_update_column"]>,
	where?: GraphQLTypes["vectric_owned_products_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.owned_products". */
["vectric_owned_products_order_by"]: {
		enabled?: GraphQLTypes["order_by"],
	enhancement?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	productName?: GraphQLTypes["order_by"],
	productType?: GraphQLTypes["vectric_products_producttype_order_by"],
	productTypeId?: GraphQLTypes["order_by"],
	subscription?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_owned_products */
["vectric_owned_products_pk_columns_input"]: {
		productId: number
};
	/** input type for updating data in table "vectric.owned_products" */
["vectric_owned_products_set_input"]: {
		enabled?: boolean,
	enhancement?: boolean,
	productId?: number,
	productName?: string,
	productTypeId?: number,
	subscription?: boolean
};
	/** Boolean expression to filter rows from the table "vectric.products_clipartcollection_links". All fields are combined with a logical 'AND'. */
["vectric_products_clipartcollection_links_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_products_clipartcollection_links_bool_exp"]>,
	_not?: GraphQLTypes["vectric_products_clipartcollection_links_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_products_clipartcollection_links_bool_exp"]>,
	clipartChildId?: GraphQLTypes["bigint_comparison_exp"],
	clipartCollectionLinkId?: GraphQLTypes["bigint_comparison_exp"],
	clipartParentId?: GraphQLTypes["bigint_comparison_exp"],
	collection?: GraphQLTypes["vectric_products_products_bool_exp"],
	project?: GraphQLTypes["vectric_products_products_bool_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_inc_input"]: {
		clipartChildId?: GraphQLTypes["bigint"],
	clipartCollectionLinkId?: GraphQLTypes["bigint"],
	clipartParentId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_insert_input"]: {
		clipartChildId?: GraphQLTypes["bigint"],
	clipartCollectionLinkId?: GraphQLTypes["bigint"],
	clipartParentId?: GraphQLTypes["bigint"],
	collection?: GraphQLTypes["vectric_products_products_obj_rel_insert_input"],
	project?: GraphQLTypes["vectric_products_products_obj_rel_insert_input"]
};
	/** on conflict condition type for table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_on_conflict"]: {
		constraint: GraphQLTypes["vectric_products_clipartcollection_links_constraint"],
	update_columns: Array<GraphQLTypes["vectric_products_clipartcollection_links_update_column"]>,
	where?: GraphQLTypes["vectric_products_clipartcollection_links_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.products_clipartcollection_links". */
["vectric_products_clipartcollection_links_order_by"]: {
		clipartChildId?: GraphQLTypes["order_by"],
	clipartCollectionLinkId?: GraphQLTypes["order_by"],
	clipartParentId?: GraphQLTypes["order_by"],
	collection?: GraphQLTypes["vectric_products_products_order_by"],
	project?: GraphQLTypes["vectric_products_products_order_by"]
};
	/** primary key columns input for table: vectric_products_clipartcollection_links */
["vectric_products_clipartcollection_links_pk_columns_input"]: {
		clipartCollectionLinkId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.products_clipartcollection_links" */
["vectric_products_clipartcollection_links_set_input"]: {
		clipartChildId?: GraphQLTypes["bigint"],
	clipartCollectionLinkId?: GraphQLTypes["bigint"],
	clipartParentId?: GraphQLTypes["bigint"]
};
	/** order by aggregate values of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_products_enhancement_eligibility_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_products_enhancement_eligibility_max_order_by"],
	min?: GraphQLTypes["vectric_products_enhancement_eligibility_min_order_by"],
	stddev?: GraphQLTypes["vectric_products_enhancement_eligibility_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_products_enhancement_eligibility_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_products_enhancement_eligibility_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_products_enhancement_eligibility_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_products_enhancement_eligibility_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_products_enhancement_eligibility_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_products_enhancement_eligibility_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_products_enhancement_eligibility_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_products_enhancement_eligibility_on_conflict"]
};
	/** order by avg() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_avg_order_by"]: {
		eligibilityId?: GraphQLTypes["order_by"],
	fromproduct?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	toproduct?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.products_enhancement_eligibility". All fields are combined with a logical 'AND'. */
["vectric_products_enhancement_eligibility_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_products_enhancement_eligibility_bool_exp"]>,
	_not?: GraphQLTypes["vectric_products_enhancement_eligibility_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_products_enhancement_eligibility_bool_exp"]>,
	eligibilityId?: GraphQLTypes["bigint_comparison_exp"],
	fastspringurl?: GraphQLTypes["String_comparison_exp"],
	fromProduct?: GraphQLTypes["vectric_products_products_bool_exp"],
	fromproduct?: GraphQLTypes["bigint_comparison_exp"],
	moreinfolink?: GraphQLTypes["String_comparison_exp"],
	price?: GraphQLTypes["numeric_comparison_exp"],
	summary?: GraphQLTypes["String_comparison_exp"],
	toProduct?: GraphQLTypes["vectric_products_products_bool_exp"],
	toproduct?: GraphQLTypes["bigint_comparison_exp"],
	visibletocustomers?: GraphQLTypes["Boolean_comparison_exp"],
	visibletostaff?: GraphQLTypes["Boolean_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_inc_input"]: {
		eligibilityId?: GraphQLTypes["bigint"],
	fromproduct?: GraphQLTypes["bigint"],
	price?: GraphQLTypes["numeric"],
	toproduct?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_insert_input"]: {
		eligibilityId?: GraphQLTypes["bigint"],
	fastspringurl?: string,
	fromProduct?: GraphQLTypes["vectric_products_products_obj_rel_insert_input"],
	fromproduct?: GraphQLTypes["bigint"],
	moreinfolink?: string,
	price?: GraphQLTypes["numeric"],
	summary?: string,
	toProduct?: GraphQLTypes["vectric_products_products_obj_rel_insert_input"],
	toproduct?: GraphQLTypes["bigint"],
	visibletocustomers?: boolean,
	visibletostaff?: boolean
};
	/** order by max() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_max_order_by"]: {
		eligibilityId?: GraphQLTypes["order_by"],
	fastspringurl?: GraphQLTypes["order_by"],
	fromproduct?: GraphQLTypes["order_by"],
	moreinfolink?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	summary?: GraphQLTypes["order_by"],
	toproduct?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_min_order_by"]: {
		eligibilityId?: GraphQLTypes["order_by"],
	fastspringurl?: GraphQLTypes["order_by"],
	fromproduct?: GraphQLTypes["order_by"],
	moreinfolink?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	summary?: GraphQLTypes["order_by"],
	toproduct?: GraphQLTypes["order_by"]
};
	/** on conflict condition type for table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_on_conflict"]: {
		constraint: GraphQLTypes["vectric_products_enhancement_eligibility_constraint"],
	update_columns: Array<GraphQLTypes["vectric_products_enhancement_eligibility_update_column"]>,
	where?: GraphQLTypes["vectric_products_enhancement_eligibility_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.products_enhancement_eligibility". */
["vectric_products_enhancement_eligibility_order_by"]: {
		eligibilityId?: GraphQLTypes["order_by"],
	fastspringurl?: GraphQLTypes["order_by"],
	fromProduct?: GraphQLTypes["vectric_products_products_order_by"],
	fromproduct?: GraphQLTypes["order_by"],
	moreinfolink?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	summary?: GraphQLTypes["order_by"],
	toProduct?: GraphQLTypes["vectric_products_products_order_by"],
	toproduct?: GraphQLTypes["order_by"],
	visibletocustomers?: GraphQLTypes["order_by"],
	visibletostaff?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_products_enhancement_eligibility */
["vectric_products_enhancement_eligibility_pk_columns_input"]: {
		eligibilityId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_set_input"]: {
		eligibilityId?: GraphQLTypes["bigint"],
	fastspringurl?: string,
	fromproduct?: GraphQLTypes["bigint"],
	moreinfolink?: string,
	price?: GraphQLTypes["numeric"],
	summary?: string,
	toproduct?: GraphQLTypes["bigint"],
	visibletocustomers?: boolean,
	visibletostaff?: boolean
};
	/** order by stddev() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_stddev_order_by"]: {
		eligibilityId?: GraphQLTypes["order_by"],
	fromproduct?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	toproduct?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_stddev_pop_order_by"]: {
		eligibilityId?: GraphQLTypes["order_by"],
	fromproduct?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	toproduct?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_stddev_samp_order_by"]: {
		eligibilityId?: GraphQLTypes["order_by"],
	fromproduct?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	toproduct?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_sum_order_by"]: {
		eligibilityId?: GraphQLTypes["order_by"],
	fromproduct?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	toproduct?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_var_pop_order_by"]: {
		eligibilityId?: GraphQLTypes["order_by"],
	fromproduct?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	toproduct?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_var_samp_order_by"]: {
		eligibilityId?: GraphQLTypes["order_by"],
	fromproduct?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	toproduct?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.products_enhancement_eligibility" */
["vectric_products_enhancement_eligibility_variance_order_by"]: {
		eligibilityId?: GraphQLTypes["order_by"],
	fromproduct?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	toproduct?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.products_freeclipart". All fields are combined with a logical 'AND'. */
["vectric_products_freeclipart_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_products_freeclipart_bool_exp"]>,
	_not?: GraphQLTypes["vectric_products_freeclipart_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_products_freeclipart_bool_exp"]>,
	freeClipart?: GraphQLTypes["vectric_freeclipart_bool_exp"],
	freeClipartId?: GraphQLTypes["bigint_comparison_exp"],
	product?: GraphQLTypes["vectric_products_products_bool_exp"],
	productFreeClipartId?: GraphQLTypes["bigint_comparison_exp"],
	productId?: GraphQLTypes["bigint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.products_freeclipart" */
["vectric_products_freeclipart_inc_input"]: {
		freeClipartId?: GraphQLTypes["bigint"],
	productFreeClipartId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.products_freeclipart" */
["vectric_products_freeclipart_insert_input"]: {
		freeClipart?: GraphQLTypes["vectric_freeclipart_obj_rel_insert_input"],
	freeClipartId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["vectric_products_products_obj_rel_insert_input"],
	productFreeClipartId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** on conflict condition type for table "vectric.products_freeclipart" */
["vectric_products_freeclipart_on_conflict"]: {
		constraint: GraphQLTypes["vectric_products_freeclipart_constraint"],
	update_columns: Array<GraphQLTypes["vectric_products_freeclipart_update_column"]>,
	where?: GraphQLTypes["vectric_products_freeclipart_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.products_freeclipart". */
["vectric_products_freeclipart_order_by"]: {
		freeClipart?: GraphQLTypes["vectric_freeclipart_order_by"],
	freeClipartId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["vectric_products_products_order_by"],
	productFreeClipartId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_products_freeclipart */
["vectric_products_freeclipart_pk_columns_input"]: {
		productFreeClipartId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.products_freeclipart" */
["vectric_products_freeclipart_set_input"]: {
		freeClipartId?: GraphQLTypes["bigint"],
	productFreeClipartId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** Boolean expression to filter rows from the table "vectric.products_fulfilments". All fields are combined with a logical 'AND'. */
["vectric_products_fulfilments_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_products_fulfilments_bool_exp"]>,
	_not?: GraphQLTypes["vectric_products_fulfilments_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_products_fulfilments_bool_exp"]>,
	description?: GraphQLTypes["String_comparison_exp"],
	downloadSize?: GraphQLTypes["String_comparison_exp"],
	fulfilmentId?: GraphQLTypes["bigint_comparison_exp"],
	fulfilmentName?: GraphQLTypes["String_comparison_exp"],
	fulfilmenttypeid?: GraphQLTypes["bigint_comparison_exp"],
	location?: GraphQLTypes["String_comparison_exp"],
	objectName?: GraphQLTypes["String_comparison_exp"],
	type?: GraphQLTypes["vectric_products_fulfilmenttypes_bool_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.products_fulfilments" */
["vectric_products_fulfilments_inc_input"]: {
		fulfilmentId?: GraphQLTypes["bigint"],
	fulfilmenttypeid?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.products_fulfilments" */
["vectric_products_fulfilments_insert_input"]: {
		description?: string,
	downloadSize?: string,
	fulfilmentId?: GraphQLTypes["bigint"],
	fulfilmentName?: string,
	fulfilmenttypeid?: GraphQLTypes["bigint"],
	location?: string,
	objectName?: string,
	type?: GraphQLTypes["vectric_products_fulfilmenttypes_obj_rel_insert_input"]
};
	/** input type for inserting object relation for remote table "vectric.products_fulfilments" */
["vectric_products_fulfilments_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_products_fulfilments_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_products_fulfilments_on_conflict"]
};
	/** on conflict condition type for table "vectric.products_fulfilments" */
["vectric_products_fulfilments_on_conflict"]: {
		constraint: GraphQLTypes["vectric_products_fulfilments_constraint"],
	update_columns: Array<GraphQLTypes["vectric_products_fulfilments_update_column"]>,
	where?: GraphQLTypes["vectric_products_fulfilments_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.products_fulfilments". */
["vectric_products_fulfilments_order_by"]: {
		description?: GraphQLTypes["order_by"],
	downloadSize?: GraphQLTypes["order_by"],
	fulfilmentId?: GraphQLTypes["order_by"],
	fulfilmentName?: GraphQLTypes["order_by"],
	fulfilmenttypeid?: GraphQLTypes["order_by"],
	location?: GraphQLTypes["order_by"],
	objectName?: GraphQLTypes["order_by"],
	type?: GraphQLTypes["vectric_products_fulfilmenttypes_order_by"]
};
	/** primary key columns input for table: vectric_products_fulfilments */
["vectric_products_fulfilments_pk_columns_input"]: {
		fulfilmentId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.products_fulfilments" */
["vectric_products_fulfilments_set_input"]: {
		description?: string,
	downloadSize?: string,
	fulfilmentId?: GraphQLTypes["bigint"],
	fulfilmentName?: string,
	fulfilmenttypeid?: GraphQLTypes["bigint"],
	location?: string,
	objectName?: string
};
	/** Boolean expression to filter rows from the table "vectric.products_fulfilmenttypes". All fields are combined with a logical 'AND'. */
["vectric_products_fulfilmenttypes_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_products_fulfilmenttypes_bool_exp"]>,
	_not?: GraphQLTypes["vectric_products_fulfilmenttypes_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_products_fulfilmenttypes_bool_exp"]>,
	fulfilmenttypeid?: GraphQLTypes["bigint_comparison_exp"],
	typename?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_inc_input"]: {
		fulfilmenttypeid?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_insert_input"]: {
		fulfilmenttypeid?: GraphQLTypes["bigint"],
	typename?: string
};
	/** input type for inserting object relation for remote table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_products_fulfilmenttypes_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_products_fulfilmenttypes_on_conflict"]
};
	/** on conflict condition type for table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_on_conflict"]: {
		constraint: GraphQLTypes["vectric_products_fulfilmenttypes_constraint"],
	update_columns: Array<GraphQLTypes["vectric_products_fulfilmenttypes_update_column"]>,
	where?: GraphQLTypes["vectric_products_fulfilmenttypes_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.products_fulfilmenttypes". */
["vectric_products_fulfilmenttypes_order_by"]: {
		fulfilmenttypeid?: GraphQLTypes["order_by"],
	typename?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_products_fulfilmenttypes */
["vectric_products_fulfilmenttypes_pk_columns_input"]: {
		fulfilmenttypeid: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.products_fulfilmenttypes" */
["vectric_products_fulfilmenttypes_set_input"]: {
		fulfilmenttypeid?: GraphQLTypes["bigint"],
	typename?: string
};
	/** order by aggregate values of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_products_product_fulfilments_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_products_product_fulfilments_max_order_by"],
	min?: GraphQLTypes["vectric_products_product_fulfilments_min_order_by"],
	stddev?: GraphQLTypes["vectric_products_product_fulfilments_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_products_product_fulfilments_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_products_product_fulfilments_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_products_product_fulfilments_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_products_product_fulfilments_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_products_product_fulfilments_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_products_product_fulfilments_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_products_product_fulfilments_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_products_product_fulfilments_on_conflict"]
};
	/** order by avg() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_avg_order_by"]: {
		fulfilmentid?: GraphQLTypes["order_by"],
	productfulfilmentid?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.products_product_fulfilments". All fields are combined with a logical 'AND'. */
["vectric_products_product_fulfilments_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_products_product_fulfilments_bool_exp"]>,
	_not?: GraphQLTypes["vectric_products_product_fulfilments_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_products_product_fulfilments_bool_exp"]>,
	fulfilment?: GraphQLTypes["vectric_products_fulfilments_bool_exp"],
	fulfilmentid?: GraphQLTypes["bigint_comparison_exp"],
	product?: GraphQLTypes["vectric_products_products_bool_exp"],
	productfulfilmentid?: GraphQLTypes["bigint_comparison_exp"],
	productid?: GraphQLTypes["bigint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_inc_input"]: {
		fulfilmentid?: GraphQLTypes["bigint"],
	productfulfilmentid?: GraphQLTypes["bigint"],
	productid?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_insert_input"]: {
		fulfilment?: GraphQLTypes["vectric_products_fulfilments_obj_rel_insert_input"],
	fulfilmentid?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["vectric_products_products_obj_rel_insert_input"],
	productfulfilmentid?: GraphQLTypes["bigint"],
	productid?: GraphQLTypes["bigint"]
};
	/** order by max() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_max_order_by"]: {
		fulfilmentid?: GraphQLTypes["order_by"],
	productfulfilmentid?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_min_order_by"]: {
		fulfilmentid?: GraphQLTypes["order_by"],
	productfulfilmentid?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"]
};
	/** on conflict condition type for table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_on_conflict"]: {
		constraint: GraphQLTypes["vectric_products_product_fulfilments_constraint"],
	update_columns: Array<GraphQLTypes["vectric_products_product_fulfilments_update_column"]>,
	where?: GraphQLTypes["vectric_products_product_fulfilments_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.products_product_fulfilments". */
["vectric_products_product_fulfilments_order_by"]: {
		fulfilment?: GraphQLTypes["vectric_products_fulfilments_order_by"],
	fulfilmentid?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["vectric_products_products_order_by"],
	productfulfilmentid?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_products_product_fulfilments */
["vectric_products_product_fulfilments_pk_columns_input"]: {
		productfulfilmentid: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_set_input"]: {
		fulfilmentid?: GraphQLTypes["bigint"],
	productfulfilmentid?: GraphQLTypes["bigint"],
	productid?: GraphQLTypes["bigint"]
};
	/** order by stddev() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_stddev_order_by"]: {
		fulfilmentid?: GraphQLTypes["order_by"],
	productfulfilmentid?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_stddev_pop_order_by"]: {
		fulfilmentid?: GraphQLTypes["order_by"],
	productfulfilmentid?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_stddev_samp_order_by"]: {
		fulfilmentid?: GraphQLTypes["order_by"],
	productfulfilmentid?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_sum_order_by"]: {
		fulfilmentid?: GraphQLTypes["order_by"],
	productfulfilmentid?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_var_pop_order_by"]: {
		fulfilmentid?: GraphQLTypes["order_by"],
	productfulfilmentid?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_var_samp_order_by"]: {
		fulfilmentid?: GraphQLTypes["order_by"],
	productfulfilmentid?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.products_product_fulfilments" */
["vectric_products_product_fulfilments_variance_order_by"]: {
		fulfilmentid?: GraphQLTypes["order_by"],
	productfulfilmentid?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.products_product_licence_type". All fields are combined with a logical 'AND'. */
["vectric_products_product_licence_type_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_products_product_licence_type_bool_exp"]>,
	_not?: GraphQLTypes["vectric_products_product_licence_type_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_products_product_licence_type_bool_exp"]>,
	type?: GraphQLTypes["String_comparison_exp"]
};
	/** Boolean expression to compare columns of type "vectric_products_product_licence_type_enum". All fields are combined with logical 'AND'. */
["vectric_products_product_licence_type_enum_comparison_exp"]: {
		_eq?: GraphQLTypes["vectric_products_product_licence_type_enum"],
	_in?: Array<GraphQLTypes["vectric_products_product_licence_type_enum"]>,
	_is_null?: boolean,
	_neq?: GraphQLTypes["vectric_products_product_licence_type_enum"],
	_nin?: Array<GraphQLTypes["vectric_products_product_licence_type_enum"]>
};
	/** input type for inserting data into table "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_insert_input"]: {
		type?: string
};
	/** on conflict condition type for table "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_on_conflict"]: {
		constraint: GraphQLTypes["vectric_products_product_licence_type_constraint"],
	update_columns: Array<GraphQLTypes["vectric_products_product_licence_type_update_column"]>,
	where?: GraphQLTypes["vectric_products_product_licence_type_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.products_product_licence_type". */
["vectric_products_product_licence_type_order_by"]: {
		type?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_products_product_licence_type */
["vectric_products_product_licence_type_pk_columns_input"]: {
		type: string
};
	/** input type for updating data in table "vectric.products_product_licence_type" */
["vectric_products_product_licence_type_set_input"]: {
		type?: string
};
	/** order by aggregate values of table "vectric.products_products" */
["vectric_products_products_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_products_products_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_products_products_max_order_by"],
	min?: GraphQLTypes["vectric_products_products_min_order_by"],
	stddev?: GraphQLTypes["vectric_products_products_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_products_products_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_products_products_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_products_products_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_products_products_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_products_products_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_products_products_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.products_products" */
["vectric_products_products_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_products_products_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_products_products_on_conflict"]
};
	/** order by avg() on columns of table "vectric.products_products" */
["vectric_products_products_avg_order_by"]: {
		externalid?: GraphQLTypes["order_by"],
	latestversion?: GraphQLTypes["order_by"],
	productID?: GraphQLTypes["order_by"],
	type?: GraphQLTypes["order_by"],
	upgradefromtypeid?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.products_products". All fields are combined with a logical 'AND'. */
["vectric_products_products_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_products_products_bool_exp"]>,
	_not?: GraphQLTypes["vectric_products_products_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_products_products_bool_exp"]>,
	enabled?: GraphQLTypes["Boolean_comparison_exp"],
	externalid?: GraphQLTypes["bigint_comparison_exp"],
	fastspringId?: GraphQLTypes["String_comparison_exp"],
	free?: GraphQLTypes["Boolean_comparison_exp"],
	latestVersion?: GraphQLTypes["vectric_products_versioncodes_bool_exp"],
	latestversion?: GraphQLTypes["bigint_comparison_exp"],
	licenceType?: GraphQLTypes["vectric_products_product_licence_type_enum_comparison_exp"],
	media?: GraphQLTypes["Boolean_comparison_exp"],
	potentialEnhancements?: GraphQLTypes["vectric_products_enhancement_eligibility_bool_exp"],
	potentialUpgrades?: GraphQLTypes["vectric_active_upgrades_bool_exp"],
	productID?: GraphQLTypes["bigint_comparison_exp"],
	productName?: GraphQLTypes["String_comparison_exp"],
	productType?: GraphQLTypes["vectric_products_producttype_bool_exp"],
	product_fulfilments?: GraphQLTypes["vectric_products_product_fulfilments_bool_exp"],
	receivesClipart?: GraphQLTypes["Boolean_comparison_exp"],
	releaseDate?: GraphQLTypes["date_comparison_exp"],
	requireslicence?: GraphQLTypes["Boolean_comparison_exp"],
	type?: GraphQLTypes["bigint_comparison_exp"],
	upgradefromtypeid?: GraphQLTypes["bigint_comparison_exp"],
	versions?: GraphQLTypes["vectric_products_versioncodes_bool_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.products_products" */
["vectric_products_products_inc_input"]: {
		externalid?: GraphQLTypes["bigint"],
	latestversion?: GraphQLTypes["bigint"],
	productID?: GraphQLTypes["bigint"],
	type?: GraphQLTypes["bigint"],
	upgradefromtypeid?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.products_products" */
["vectric_products_products_insert_input"]: {
		enabled?: boolean,
	externalid?: GraphQLTypes["bigint"],
	fastspringId?: string,
	free?: boolean,
	latestVersion?: GraphQLTypes["vectric_products_versioncodes_obj_rel_insert_input"],
	latestversion?: GraphQLTypes["bigint"],
	licenceType?: GraphQLTypes["vectric_products_product_licence_type_enum"],
	media?: boolean,
	potentialEnhancements?: GraphQLTypes["vectric_products_enhancement_eligibility_arr_rel_insert_input"],
	potentialUpgrades?: GraphQLTypes["vectric_active_upgrades_arr_rel_insert_input"],
	productID?: GraphQLTypes["bigint"],
	productName?: string,
	productType?: GraphQLTypes["vectric_products_producttype_obj_rel_insert_input"],
	product_fulfilments?: GraphQLTypes["vectric_products_product_fulfilments_arr_rel_insert_input"],
	receivesClipart?: boolean,
	releaseDate?: GraphQLTypes["date"],
	requireslicence?: boolean,
	type?: GraphQLTypes["bigint"],
	upgradefromtypeid?: GraphQLTypes["bigint"],
	versions?: GraphQLTypes["vectric_products_versioncodes_arr_rel_insert_input"]
};
	/** order by max() on columns of table "vectric.products_products" */
["vectric_products_products_max_order_by"]: {
		externalid?: GraphQLTypes["order_by"],
	fastspringId?: GraphQLTypes["order_by"],
	latestversion?: GraphQLTypes["order_by"],
	productID?: GraphQLTypes["order_by"],
	productName?: GraphQLTypes["order_by"],
	releaseDate?: GraphQLTypes["order_by"],
	type?: GraphQLTypes["order_by"],
	upgradefromtypeid?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.products_products" */
["vectric_products_products_min_order_by"]: {
		externalid?: GraphQLTypes["order_by"],
	fastspringId?: GraphQLTypes["order_by"],
	latestversion?: GraphQLTypes["order_by"],
	productID?: GraphQLTypes["order_by"],
	productName?: GraphQLTypes["order_by"],
	releaseDate?: GraphQLTypes["order_by"],
	type?: GraphQLTypes["order_by"],
	upgradefromtypeid?: GraphQLTypes["order_by"]
};
	/** input type for inserting object relation for remote table "vectric.products_products" */
["vectric_products_products_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_products_products_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_products_products_on_conflict"]
};
	/** on conflict condition type for table "vectric.products_products" */
["vectric_products_products_on_conflict"]: {
		constraint: GraphQLTypes["vectric_products_products_constraint"],
	update_columns: Array<GraphQLTypes["vectric_products_products_update_column"]>,
	where?: GraphQLTypes["vectric_products_products_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.products_products". */
["vectric_products_products_order_by"]: {
		enabled?: GraphQLTypes["order_by"],
	externalid?: GraphQLTypes["order_by"],
	fastspringId?: GraphQLTypes["order_by"],
	free?: GraphQLTypes["order_by"],
	latestVersion?: GraphQLTypes["vectric_products_versioncodes_order_by"],
	latestversion?: GraphQLTypes["order_by"],
	licenceType?: GraphQLTypes["order_by"],
	media?: GraphQLTypes["order_by"],
	potentialEnhancements_aggregate?: GraphQLTypes["vectric_products_enhancement_eligibility_aggregate_order_by"],
	potentialUpgrades_aggregate?: GraphQLTypes["vectric_active_upgrades_aggregate_order_by"],
	productID?: GraphQLTypes["order_by"],
	productName?: GraphQLTypes["order_by"],
	productType?: GraphQLTypes["vectric_products_producttype_order_by"],
	product_fulfilments_aggregate?: GraphQLTypes["vectric_products_product_fulfilments_aggregate_order_by"],
	receivesClipart?: GraphQLTypes["order_by"],
	releaseDate?: GraphQLTypes["order_by"],
	requireslicence?: GraphQLTypes["order_by"],
	type?: GraphQLTypes["order_by"],
	upgradefromtypeid?: GraphQLTypes["order_by"],
	versions_aggregate?: GraphQLTypes["vectric_products_versioncodes_aggregate_order_by"]
};
	/** primary key columns input for table: vectric_products_products */
["vectric_products_products_pk_columns_input"]: {
		productID: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.products_products" */
["vectric_products_products_set_input"]: {
		enabled?: boolean,
	externalid?: GraphQLTypes["bigint"],
	fastspringId?: string,
	free?: boolean,
	latestversion?: GraphQLTypes["bigint"],
	licenceType?: GraphQLTypes["vectric_products_product_licence_type_enum"],
	media?: boolean,
	productID?: GraphQLTypes["bigint"],
	productName?: string,
	receivesClipart?: boolean,
	releaseDate?: GraphQLTypes["date"],
	requireslicence?: boolean,
	type?: GraphQLTypes["bigint"],
	upgradefromtypeid?: GraphQLTypes["bigint"]
};
	/** order by stddev() on columns of table "vectric.products_products" */
["vectric_products_products_stddev_order_by"]: {
		externalid?: GraphQLTypes["order_by"],
	latestversion?: GraphQLTypes["order_by"],
	productID?: GraphQLTypes["order_by"],
	type?: GraphQLTypes["order_by"],
	upgradefromtypeid?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.products_products" */
["vectric_products_products_stddev_pop_order_by"]: {
		externalid?: GraphQLTypes["order_by"],
	latestversion?: GraphQLTypes["order_by"],
	productID?: GraphQLTypes["order_by"],
	type?: GraphQLTypes["order_by"],
	upgradefromtypeid?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.products_products" */
["vectric_products_products_stddev_samp_order_by"]: {
		externalid?: GraphQLTypes["order_by"],
	latestversion?: GraphQLTypes["order_by"],
	productID?: GraphQLTypes["order_by"],
	type?: GraphQLTypes["order_by"],
	upgradefromtypeid?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.products_products" */
["vectric_products_products_sum_order_by"]: {
		externalid?: GraphQLTypes["order_by"],
	latestversion?: GraphQLTypes["order_by"],
	productID?: GraphQLTypes["order_by"],
	type?: GraphQLTypes["order_by"],
	upgradefromtypeid?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.products_products" */
["vectric_products_products_var_pop_order_by"]: {
		externalid?: GraphQLTypes["order_by"],
	latestversion?: GraphQLTypes["order_by"],
	productID?: GraphQLTypes["order_by"],
	type?: GraphQLTypes["order_by"],
	upgradefromtypeid?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.products_products" */
["vectric_products_products_var_samp_order_by"]: {
		externalid?: GraphQLTypes["order_by"],
	latestversion?: GraphQLTypes["order_by"],
	productID?: GraphQLTypes["order_by"],
	type?: GraphQLTypes["order_by"],
	upgradefromtypeid?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.products_products" */
["vectric_products_products_variance_order_by"]: {
		externalid?: GraphQLTypes["order_by"],
	latestversion?: GraphQLTypes["order_by"],
	productID?: GraphQLTypes["order_by"],
	type?: GraphQLTypes["order_by"],
	upgradefromtypeid?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.products_producttype". All fields are combined with a logical 'AND'. */
["vectric_products_producttype_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_products_producttype_bool_exp"]>,
	_not?: GraphQLTypes["vectric_products_producttype_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_products_producttype_bool_exp"]>,
	productTypeId?: GraphQLTypes["bigint_comparison_exp"],
	productTypeName?: GraphQLTypes["String_comparison_exp"],
	products?: GraphQLTypes["vectric_products_products_bool_exp"],
	seq?: GraphQLTypes["Int_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.products_producttype" */
["vectric_products_producttype_inc_input"]: {
		productTypeId?: GraphQLTypes["bigint"],
	seq?: number
};
	/** input type for inserting data into table "vectric.products_producttype" */
["vectric_products_producttype_insert_input"]: {
		productTypeId?: GraphQLTypes["bigint"],
	productTypeName?: string,
	products?: GraphQLTypes["vectric_products_products_arr_rel_insert_input"],
	seq?: number
};
	/** input type for inserting object relation for remote table "vectric.products_producttype" */
["vectric_products_producttype_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_products_producttype_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_products_producttype_on_conflict"]
};
	/** on conflict condition type for table "vectric.products_producttype" */
["vectric_products_producttype_on_conflict"]: {
		constraint: GraphQLTypes["vectric_products_producttype_constraint"],
	update_columns: Array<GraphQLTypes["vectric_products_producttype_update_column"]>,
	where?: GraphQLTypes["vectric_products_producttype_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.products_producttype". */
["vectric_products_producttype_order_by"]: {
		productTypeId?: GraphQLTypes["order_by"],
	productTypeName?: GraphQLTypes["order_by"],
	products_aggregate?: GraphQLTypes["vectric_products_products_aggregate_order_by"],
	seq?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_products_producttype */
["vectric_products_producttype_pk_columns_input"]: {
		productTypeId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.products_producttype" */
["vectric_products_producttype_set_input"]: {
		productTypeId?: GraphQLTypes["bigint"],
	productTypeName?: string,
	seq?: number
};
	/** Boolean expression to filter rows from the table "vectric.products_upgrade_eligibility". All fields are combined with a logical 'AND'. */
["vectric_products_upgrade_eligibility_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_products_upgrade_eligibility_bool_exp"]>,
	_not?: GraphQLTypes["vectric_products_upgrade_eligibility_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_products_upgrade_eligibility_bool_exp"]>,
	eligibilityid?: GraphQLTypes["bigint_comparison_exp"],
	fastspringproductid?: GraphQLTypes["String_comparison_exp"],
	fastspringurl?: GraphQLTypes["String_comparison_exp"],
	fromtype?: GraphQLTypes["bigint_comparison_exp"],
	maxmajorversion?: GraphQLTypes["bigint_comparison_exp"],
	minmajorversion?: GraphQLTypes["bigint_comparison_exp"],
	price?: GraphQLTypes["numeric_comparison_exp"],
	productsUpgradeFromType?: GraphQLTypes["vectric_products_producttype_bool_exp"],
	productsUpgradeToProduct?: GraphQLTypes["vectric_products_products_bool_exp"],
	summary?: GraphQLTypes["String_comparison_exp"],
	toproduct?: GraphQLTypes["bigint_comparison_exp"],
	updatelink?: GraphQLTypes["String_comparison_exp"],
	visibletocustomers?: GraphQLTypes["Boolean_comparison_exp"],
	visibletostaff?: GraphQLTypes["Boolean_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_inc_input"]: {
		eligibilityid?: GraphQLTypes["bigint"],
	fromtype?: GraphQLTypes["bigint"],
	maxmajorversion?: GraphQLTypes["bigint"],
	minmajorversion?: GraphQLTypes["bigint"],
	price?: GraphQLTypes["numeric"],
	toproduct?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_insert_input"]: {
		eligibilityid?: GraphQLTypes["bigint"],
	fastspringproductid?: string,
	fastspringurl?: string,
	fromtype?: GraphQLTypes["bigint"],
	maxmajorversion?: GraphQLTypes["bigint"],
	minmajorversion?: GraphQLTypes["bigint"],
	price?: GraphQLTypes["numeric"],
	productsUpgradeFromType?: GraphQLTypes["vectric_products_producttype_obj_rel_insert_input"],
	productsUpgradeToProduct?: GraphQLTypes["vectric_products_products_obj_rel_insert_input"],
	summary?: string,
	toproduct?: GraphQLTypes["bigint"],
	updatelink?: string,
	visibletocustomers?: boolean,
	visibletostaff?: boolean
};
	/** input type for inserting object relation for remote table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_products_upgrade_eligibility_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_products_upgrade_eligibility_on_conflict"]
};
	/** on conflict condition type for table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_on_conflict"]: {
		constraint: GraphQLTypes["vectric_products_upgrade_eligibility_constraint"],
	update_columns: Array<GraphQLTypes["vectric_products_upgrade_eligibility_update_column"]>,
	where?: GraphQLTypes["vectric_products_upgrade_eligibility_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.products_upgrade_eligibility". */
["vectric_products_upgrade_eligibility_order_by"]: {
		eligibilityid?: GraphQLTypes["order_by"],
	fastspringproductid?: GraphQLTypes["order_by"],
	fastspringurl?: GraphQLTypes["order_by"],
	fromtype?: GraphQLTypes["order_by"],
	maxmajorversion?: GraphQLTypes["order_by"],
	minmajorversion?: GraphQLTypes["order_by"],
	price?: GraphQLTypes["order_by"],
	productsUpgradeFromType?: GraphQLTypes["vectric_products_producttype_order_by"],
	productsUpgradeToProduct?: GraphQLTypes["vectric_products_products_order_by"],
	summary?: GraphQLTypes["order_by"],
	toproduct?: GraphQLTypes["order_by"],
	updatelink?: GraphQLTypes["order_by"],
	visibletocustomers?: GraphQLTypes["order_by"],
	visibletostaff?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_products_upgrade_eligibility */
["vectric_products_upgrade_eligibility_pk_columns_input"]: {
		eligibilityid: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.products_upgrade_eligibility" */
["vectric_products_upgrade_eligibility_set_input"]: {
		eligibilityid?: GraphQLTypes["bigint"],
	fastspringproductid?: string,
	fastspringurl?: string,
	fromtype?: GraphQLTypes["bigint"],
	maxmajorversion?: GraphQLTypes["bigint"],
	minmajorversion?: GraphQLTypes["bigint"],
	price?: GraphQLTypes["numeric"],
	summary?: string,
	toproduct?: GraphQLTypes["bigint"],
	updatelink?: string,
	visibletocustomers?: boolean,
	visibletostaff?: boolean
};
	/** order by aggregate values of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_products_versioncodes_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_products_versioncodes_max_order_by"],
	min?: GraphQLTypes["vectric_products_versioncodes_min_order_by"],
	stddev?: GraphQLTypes["vectric_products_versioncodes_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_products_versioncodes_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_products_versioncodes_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_products_versioncodes_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_products_versioncodes_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_products_versioncodes_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_products_versioncodes_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.products_versioncodes" */
["vectric_products_versioncodes_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_products_versioncodes_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_products_versioncodes_on_conflict"]
};
	/** order by avg() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_avg_order_by"]: {
		majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.products_versioncodes". All fields are combined with a logical 'AND'. */
["vectric_products_versioncodes_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_products_versioncodes_bool_exp"]>,
	_not?: GraphQLTypes["vectric_products_versioncodes_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_products_versioncodes_bool_exp"]>,
	displayVersion?: GraphQLTypes["String_comparison_exp"],
	latest?: GraphQLTypes["Boolean_comparison_exp"],
	majorVersion?: GraphQLTypes["bigint_comparison_exp"],
	minorVersionOOX?: GraphQLTypes["bigint_comparison_exp"],
	minorVersionOXO?: GraphQLTypes["bigint_comparison_exp"],
	minorVersionXOO?: GraphQLTypes["bigint_comparison_exp"],
	notifying?: GraphQLTypes["Boolean_comparison_exp"],
	patchurl?: GraphQLTypes["String_comparison_exp"],
	product?: GraphQLTypes["vectric_products_products_bool_exp"],
	productid?: GraphQLTypes["bigint_comparison_exp"],
	releaseDate?: GraphQLTypes["date_comparison_exp"],
	url?: GraphQLTypes["String_comparison_exp"],
	versioncodeid?: GraphQLTypes["bigint_comparison_exp"],
	visible?: GraphQLTypes["Boolean_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.products_versioncodes" */
["vectric_products_versioncodes_inc_input"]: {
		majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	productid?: GraphQLTypes["bigint"],
	versioncodeid?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.products_versioncodes" */
["vectric_products_versioncodes_insert_input"]: {
		displayVersion?: string,
	latest?: boolean,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	notifying?: boolean,
	patchurl?: string,
	product?: GraphQLTypes["vectric_products_products_obj_rel_insert_input"],
	productid?: GraphQLTypes["bigint"],
	releaseDate?: GraphQLTypes["date"],
	url?: string,
	versioncodeid?: GraphQLTypes["bigint"],
	visible?: boolean
};
	/** order by max() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_max_order_by"]: {
		displayVersion?: GraphQLTypes["order_by"],
	majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	patchurl?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"],
	releaseDate?: GraphQLTypes["order_by"],
	url?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_min_order_by"]: {
		displayVersion?: GraphQLTypes["order_by"],
	majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	patchurl?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"],
	releaseDate?: GraphQLTypes["order_by"],
	url?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"]
};
	/** input type for inserting object relation for remote table "vectric.products_versioncodes" */
["vectric_products_versioncodes_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_products_versioncodes_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_products_versioncodes_on_conflict"]
};
	/** on conflict condition type for table "vectric.products_versioncodes" */
["vectric_products_versioncodes_on_conflict"]: {
		constraint: GraphQLTypes["vectric_products_versioncodes_constraint"],
	update_columns: Array<GraphQLTypes["vectric_products_versioncodes_update_column"]>,
	where?: GraphQLTypes["vectric_products_versioncodes_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.products_versioncodes". */
["vectric_products_versioncodes_order_by"]: {
		displayVersion?: GraphQLTypes["order_by"],
	latest?: GraphQLTypes["order_by"],
	majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	notifying?: GraphQLTypes["order_by"],
	patchurl?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["vectric_products_products_order_by"],
	productid?: GraphQLTypes["order_by"],
	releaseDate?: GraphQLTypes["order_by"],
	url?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"],
	visible?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_products_versioncodes */
["vectric_products_versioncodes_pk_columns_input"]: {
		versioncodeid: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.products_versioncodes" */
["vectric_products_versioncodes_set_input"]: {
		displayVersion?: string,
	latest?: boolean,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	notifying?: boolean,
	patchurl?: string,
	productid?: GraphQLTypes["bigint"],
	releaseDate?: GraphQLTypes["date"],
	url?: string,
	versioncodeid?: GraphQLTypes["bigint"],
	visible?: boolean
};
	/** order by stddev() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_stddev_order_by"]: {
		majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_stddev_pop_order_by"]: {
		majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_stddev_samp_order_by"]: {
		majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_sum_order_by"]: {
		majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_var_pop_order_by"]: {
		majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_var_samp_order_by"]: {
		majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.products_versioncodes" */
["vectric_products_versioncodes_variance_order_by"]: {
		majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.questions". All fields are combined with a logical 'AND'. */
["vectric_questions_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_questions_bool_exp"]>,
	_not?: GraphQLTypes["vectric_questions_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_questions_bool_exp"]>,
	customer_responses?: GraphQLTypes["vectric_customer_responses_bool_exp"],
	multipleanswers?: GraphQLTypes["Boolean_comparison_exp"],
	questionid?: GraphQLTypes["bigint_comparison_exp"],
	questiontext?: GraphQLTypes["String_comparison_exp"],
	responses?: GraphQLTypes["vectric_responses_bool_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.questions" */
["vectric_questions_inc_input"]: {
		questionid?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.questions" */
["vectric_questions_insert_input"]: {
		customer_responses?: GraphQLTypes["vectric_customer_responses_arr_rel_insert_input"],
	multipleanswers?: boolean,
	questionid?: GraphQLTypes["bigint"],
	questiontext?: string,
	responses?: GraphQLTypes["vectric_responses_arr_rel_insert_input"]
};
	/** input type for inserting object relation for remote table "vectric.questions" */
["vectric_questions_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_questions_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_questions_on_conflict"]
};
	/** on conflict condition type for table "vectric.questions" */
["vectric_questions_on_conflict"]: {
		constraint: GraphQLTypes["vectric_questions_constraint"],
	update_columns: Array<GraphQLTypes["vectric_questions_update_column"]>,
	where?: GraphQLTypes["vectric_questions_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.questions". */
["vectric_questions_order_by"]: {
		customer_responses_aggregate?: GraphQLTypes["vectric_customer_responses_aggregate_order_by"],
	multipleanswers?: GraphQLTypes["order_by"],
	questionid?: GraphQLTypes["order_by"],
	questiontext?: GraphQLTypes["order_by"],
	responses_aggregate?: GraphQLTypes["vectric_responses_aggregate_order_by"]
};
	/** primary key columns input for table: vectric_questions */
["vectric_questions_pk_columns_input"]: {
		questionid: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.questions" */
["vectric_questions_set_input"]: {
		multipleanswers?: boolean,
	questionid?: GraphQLTypes["bigint"],
	questiontext?: string
};
	/** order by aggregate values of table "vectric.responses" */
["vectric_responses_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_responses_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_responses_max_order_by"],
	min?: GraphQLTypes["vectric_responses_min_order_by"],
	stddev?: GraphQLTypes["vectric_responses_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_responses_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_responses_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_responses_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_responses_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_responses_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_responses_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.responses" */
["vectric_responses_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_responses_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_responses_on_conflict"]
};
	/** order by avg() on columns of table "vectric.responses" */
["vectric_responses_avg_order_by"]: {
		questionid?: GraphQLTypes["order_by"],
	responseid?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.responses". All fields are combined with a logical 'AND'. */
["vectric_responses_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_responses_bool_exp"]>,
	_not?: GraphQLTypes["vectric_responses_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_responses_bool_exp"]>,
	questionid?: GraphQLTypes["bigint_comparison_exp"],
	responseid?: GraphQLTypes["bigint_comparison_exp"],
	responsetext?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.responses" */
["vectric_responses_inc_input"]: {
		questionid?: GraphQLTypes["bigint"],
	responseid?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.responses" */
["vectric_responses_insert_input"]: {
		questionid?: GraphQLTypes["bigint"],
	responseid?: GraphQLTypes["bigint"],
	responsetext?: string
};
	/** order by max() on columns of table "vectric.responses" */
["vectric_responses_max_order_by"]: {
		questionid?: GraphQLTypes["order_by"],
	responseid?: GraphQLTypes["order_by"],
	responsetext?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.responses" */
["vectric_responses_min_order_by"]: {
		questionid?: GraphQLTypes["order_by"],
	responseid?: GraphQLTypes["order_by"],
	responsetext?: GraphQLTypes["order_by"]
};
	/** input type for inserting object relation for remote table "vectric.responses" */
["vectric_responses_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_responses_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_responses_on_conflict"]
};
	/** on conflict condition type for table "vectric.responses" */
["vectric_responses_on_conflict"]: {
		constraint: GraphQLTypes["vectric_responses_constraint"],
	update_columns: Array<GraphQLTypes["vectric_responses_update_column"]>,
	where?: GraphQLTypes["vectric_responses_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.responses". */
["vectric_responses_order_by"]: {
		questionid?: GraphQLTypes["order_by"],
	responseid?: GraphQLTypes["order_by"],
	responsetext?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_responses */
["vectric_responses_pk_columns_input"]: {
		responseid: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.responses" */
["vectric_responses_set_input"]: {
		questionid?: GraphQLTypes["bigint"],
	responseid?: GraphQLTypes["bigint"],
	responsetext?: string
};
	/** order by stddev() on columns of table "vectric.responses" */
["vectric_responses_stddev_order_by"]: {
		questionid?: GraphQLTypes["order_by"],
	responseid?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.responses" */
["vectric_responses_stddev_pop_order_by"]: {
		questionid?: GraphQLTypes["order_by"],
	responseid?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.responses" */
["vectric_responses_stddev_samp_order_by"]: {
		questionid?: GraphQLTypes["order_by"],
	responseid?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.responses" */
["vectric_responses_sum_order_by"]: {
		questionid?: GraphQLTypes["order_by"],
	responseid?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.responses" */
["vectric_responses_var_pop_order_by"]: {
		questionid?: GraphQLTypes["order_by"],
	responseid?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.responses" */
["vectric_responses_var_samp_order_by"]: {
		questionid?: GraphQLTypes["order_by"],
	responseid?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.responses" */
["vectric_responses_variance_order_by"]: {
		questionid?: GraphQLTypes["order_by"],
	responseid?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.saleable_products". All fields are combined with a logical 'AND'. */
["vectric_saleable_products_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_saleable_products_bool_exp"]>,
	_not?: GraphQLTypes["vectric_saleable_products_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_saleable_products_bool_exp"]>,
	enabled?: GraphQLTypes["Boolean_comparison_exp"],
	fastspringId?: GraphQLTypes["String_comparison_exp"],
	free?: GraphQLTypes["Boolean_comparison_exp"],
	media?: GraphQLTypes["Boolean_comparison_exp"],
	productId?: GraphQLTypes["Int_comparison_exp"],
	productName?: GraphQLTypes["String_comparison_exp"],
	productTypeId?: GraphQLTypes["Int_comparison_exp"],
	receivesClipart?: GraphQLTypes["Boolean_comparison_exp"],
	subscription?: GraphQLTypes["Boolean_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.saleable_products" */
["vectric_saleable_products_inc_input"]: {
		productId?: number,
	productTypeId?: number
};
	/** input type for inserting data into table "vectric.saleable_products" */
["vectric_saleable_products_insert_input"]: {
		enabled?: boolean,
	fastspringId?: string,
	free?: boolean,
	media?: boolean,
	productId?: number,
	productName?: string,
	productTypeId?: number,
	receivesClipart?: boolean,
	subscription?: boolean
};
	/** input type for inserting object relation for remote table "vectric.saleable_products" */
["vectric_saleable_products_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_saleable_products_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_saleable_products_on_conflict"]
};
	/** on conflict condition type for table "vectric.saleable_products" */
["vectric_saleable_products_on_conflict"]: {
		constraint: GraphQLTypes["vectric_saleable_products_constraint"],
	update_columns: Array<GraphQLTypes["vectric_saleable_products_update_column"]>,
	where?: GraphQLTypes["vectric_saleable_products_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.saleable_products". */
["vectric_saleable_products_order_by"]: {
		enabled?: GraphQLTypes["order_by"],
	fastspringId?: GraphQLTypes["order_by"],
	free?: GraphQLTypes["order_by"],
	media?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	productName?: GraphQLTypes["order_by"],
	productTypeId?: GraphQLTypes["order_by"],
	receivesClipart?: GraphQLTypes["order_by"],
	subscription?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_saleable_products */
["vectric_saleable_products_pk_columns_input"]: {
		productId: number
};
	/** input type for updating data in table "vectric.saleable_products" */
["vectric_saleable_products_set_input"]: {
		enabled?: boolean,
	fastspringId?: string,
	free?: boolean,
	media?: boolean,
	productId?: number,
	productName?: string,
	productTypeId?: number,
	receivesClipart?: boolean,
	subscription?: boolean
};
	/** Boolean expression to filter rows from the table "vectric.sales_customer_downloads". All fields are combined with a logical 'AND'. */
["vectric_sales_customer_downloads_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_sales_customer_downloads_bool_exp"]>,
	_not?: GraphQLTypes["vectric_sales_customer_downloads_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_sales_customer_downloads_bool_exp"]>,
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	downloadDate?: GraphQLTypes["timestamptz_comparison_exp"],
	downloadId?: GraphQLTypes["bigint_comparison_exp"],
	fulfilmentId?: GraphQLTypes["bigint_comparison_exp"],
	ipAddress?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_inc_input"]: {
		customerId?: GraphQLTypes["bigint"],
	downloadId?: GraphQLTypes["bigint"],
	fulfilmentId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_insert_input"]: {
		customerId?: GraphQLTypes["bigint"],
	downloadDate?: GraphQLTypes["timestamptz"],
	downloadId?: GraphQLTypes["bigint"],
	fulfilmentId?: GraphQLTypes["bigint"],
	ipAddress?: string
};
	/** on conflict condition type for table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_on_conflict"]: {
		constraint: GraphQLTypes["vectric_sales_customer_downloads_constraint"],
	update_columns: Array<GraphQLTypes["vectric_sales_customer_downloads_update_column"]>,
	where?: GraphQLTypes["vectric_sales_customer_downloads_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.sales_customer_downloads". */
["vectric_sales_customer_downloads_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	downloadDate?: GraphQLTypes["order_by"],
	downloadId?: GraphQLTypes["order_by"],
	fulfilmentId?: GraphQLTypes["order_by"],
	ipAddress?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_sales_customer_downloads */
["vectric_sales_customer_downloads_pk_columns_input"]: {
		downloadId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.sales_customer_downloads" */
["vectric_sales_customer_downloads_set_input"]: {
		customerId?: GraphQLTypes["bigint"],
	downloadDate?: GraphQLTypes["timestamptz"],
	downloadId?: GraphQLTypes["bigint"],
	fulfilmentId?: GraphQLTypes["bigint"],
	ipAddress?: string
};
	/** Boolean expression to filter rows from the table "vectric.sales_customers". All fields are combined with a logical 'AND'. */
["vectric_sales_customers_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_sales_customers_bool_exp"]>,
	_not?: GraphQLTypes["vectric_sales_customers_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_sales_customers_bool_exp"]>,
	acceptedTerms?: GraphQLTypes["Boolean_comparison_exp"],
	amendedby?: GraphQLTypes["String_comparison_exp"],
	companyName?: GraphQLTypes["String_comparison_exp"],
	country?: GraphQLTypes["vectric_countries_bool_exp"],
	countrycode?: GraphQLTypes["bigint_comparison_exp"],
	createdby?: GraphQLTypes["String_comparison_exp"],
	customerAddressLine?: GraphQLTypes["String_comparison_exp"],
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	customerName?: GraphQLTypes["String_comparison_exp"],
	customerSales?: GraphQLTypes["vectric_customer_sales_bool_exp"],
	customerTelephone?: GraphQLTypes["String_comparison_exp"],
	customerType?: GraphQLTypes["String_comparison_exp"],
	customerstatusid?: GraphQLTypes["bigint_comparison_exp"],
	customeruuid?: GraphQLTypes["uuid_comparison_exp"],
	dateAcceptedTerms?: GraphQLTypes["timestamptz_comparison_exp"],
	dateCreated?: GraphQLTypes["timestamptz_comparison_exp"],
	dateMarketingConsentUpdated?: GraphQLTypes["timestamptz_comparison_exp"],
	dateUpgradeEmailConsentUpdates?: GraphQLTypes["timestamptz_comparison_exp"],
	dateamended?: GraphQLTypes["timestamptz_comparison_exp"],
	email?: GraphQLTypes["String_comparison_exp"],
	freeClipartTokens?: GraphQLTypes["vectric_free_clipart_tokens_bool_exp"],
	language?: GraphQLTypes["String_comparison_exp"],
	lastLogin?: GraphQLTypes["timestamptz_comparison_exp"],
	lastipaddress?: GraphQLTypes["String_comparison_exp"],
	location?: GraphQLTypes["String_comparison_exp"],
	memberships?: GraphQLTypes["vectric_group_user_role_bool_exp"],
	mergedfromcustomerid?: GraphQLTypes["bigint_comparison_exp"],
	mergedtocustomerid?: GraphQLTypes["bigint_comparison_exp"],
	notes?: GraphQLTypes["String_comparison_exp"],
	orders?: GraphQLTypes["vectric_sales_orders_bool_exp"],
	organizationMemberships?: GraphQLTypes["vectric_memberships_bool_exp"],
	partnerMemberships?: GraphQLTypes["vectric_oem_staff_customer_bool_exp"],
	receivingMarketingEmails?: GraphQLTypes["Boolean_comparison_exp"],
	receivingUpgradeEmails?: GraphQLTypes["Boolean_comparison_exp"],
	registeredUsername?: GraphQLTypes["String_comparison_exp"],
	user?: GraphQLTypes["vectric_security_users_bool_exp"],
	verified?: GraphQLTypes["Boolean_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.sales_customers" */
["vectric_sales_customers_inc_input"]: {
		countrycode?: GraphQLTypes["bigint"],
	customerId?: GraphQLTypes["bigint"],
	customerstatusid?: GraphQLTypes["bigint"],
	mergedfromcustomerid?: GraphQLTypes["bigint"],
	mergedtocustomerid?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.sales_customers" */
["vectric_sales_customers_insert_input"]: {
		acceptedTerms?: boolean,
	amendedby?: string,
	companyName?: string,
	country?: GraphQLTypes["vectric_countries_obj_rel_insert_input"],
	countrycode?: GraphQLTypes["bigint"],
	createdby?: string,
	customerAddressLine?: string,
	customerId?: GraphQLTypes["bigint"],
	customerName?: string,
	customerSales?: GraphQLTypes["vectric_customer_sales_arr_rel_insert_input"],
	customerTelephone?: string,
	customerType?: string,
	customerstatusid?: GraphQLTypes["bigint"],
	customeruuid?: GraphQLTypes["uuid"],
	dateAcceptedTerms?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateMarketingConsentUpdated?: GraphQLTypes["timestamptz"],
	dateUpgradeEmailConsentUpdates?: GraphQLTypes["timestamptz"],
	dateamended?: GraphQLTypes["timestamptz"],
	email?: string,
	freeClipartTokens?: GraphQLTypes["vectric_free_clipart_tokens_arr_rel_insert_input"],
	language?: string,
	lastLogin?: GraphQLTypes["timestamptz"],
	lastipaddress?: string,
	location?: string,
	memberships?: GraphQLTypes["vectric_group_user_role_arr_rel_insert_input"],
	mergedfromcustomerid?: GraphQLTypes["bigint"],
	mergedtocustomerid?: GraphQLTypes["bigint"],
	notes?: string,
	orders?: GraphQLTypes["vectric_sales_orders_arr_rel_insert_input"],
	organizationMemberships?: GraphQLTypes["vectric_memberships_arr_rel_insert_input"],
	partnerMemberships?: GraphQLTypes["vectric_oem_staff_customer_arr_rel_insert_input"],
	receivingMarketingEmails?: boolean,
	receivingUpgradeEmails?: boolean,
	registeredUsername?: string,
	user?: GraphQLTypes["vectric_security_users_obj_rel_insert_input"],
	verified?: boolean
};
	/** input type for inserting object relation for remote table "vectric.sales_customers" */
["vectric_sales_customers_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_sales_customers_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_sales_customers_on_conflict"]
};
	/** on conflict condition type for table "vectric.sales_customers" */
["vectric_sales_customers_on_conflict"]: {
		constraint: GraphQLTypes["vectric_sales_customers_constraint"],
	update_columns: Array<GraphQLTypes["vectric_sales_customers_update_column"]>,
	where?: GraphQLTypes["vectric_sales_customers_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.sales_customers". */
["vectric_sales_customers_order_by"]: {
		acceptedTerms?: GraphQLTypes["order_by"],
	amendedby?: GraphQLTypes["order_by"],
	companyName?: GraphQLTypes["order_by"],
	country?: GraphQLTypes["vectric_countries_order_by"],
	countrycode?: GraphQLTypes["order_by"],
	createdby?: GraphQLTypes["order_by"],
	customerAddressLine?: GraphQLTypes["order_by"],
	customerId?: GraphQLTypes["order_by"],
	customerName?: GraphQLTypes["order_by"],
	customerSales_aggregate?: GraphQLTypes["vectric_customer_sales_aggregate_order_by"],
	customerTelephone?: GraphQLTypes["order_by"],
	customerType?: GraphQLTypes["order_by"],
	customerstatusid?: GraphQLTypes["order_by"],
	customeruuid?: GraphQLTypes["order_by"],
	dateAcceptedTerms?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	dateMarketingConsentUpdated?: GraphQLTypes["order_by"],
	dateUpgradeEmailConsentUpdates?: GraphQLTypes["order_by"],
	dateamended?: GraphQLTypes["order_by"],
	email?: GraphQLTypes["order_by"],
	freeClipartTokens_aggregate?: GraphQLTypes["vectric_free_clipart_tokens_aggregate_order_by"],
	language?: GraphQLTypes["order_by"],
	lastLogin?: GraphQLTypes["order_by"],
	lastipaddress?: GraphQLTypes["order_by"],
	location?: GraphQLTypes["order_by"],
	memberships_aggregate?: GraphQLTypes["vectric_group_user_role_aggregate_order_by"],
	mergedfromcustomerid?: GraphQLTypes["order_by"],
	mergedtocustomerid?: GraphQLTypes["order_by"],
	notes?: GraphQLTypes["order_by"],
	orders_aggregate?: GraphQLTypes["vectric_sales_orders_aggregate_order_by"],
	organizationMemberships_aggregate?: GraphQLTypes["vectric_memberships_aggregate_order_by"],
	partnerMemberships_aggregate?: GraphQLTypes["vectric_oem_staff_customer_aggregate_order_by"],
	receivingMarketingEmails?: GraphQLTypes["order_by"],
	receivingUpgradeEmails?: GraphQLTypes["order_by"],
	registeredUsername?: GraphQLTypes["order_by"],
	user?: GraphQLTypes["vectric_security_users_order_by"],
	verified?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_sales_customers */
["vectric_sales_customers_pk_columns_input"]: {
		customerId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.sales_customers" */
["vectric_sales_customers_set_input"]: {
		acceptedTerms?: boolean,
	amendedby?: string,
	companyName?: string,
	countrycode?: GraphQLTypes["bigint"],
	createdby?: string,
	customerAddressLine?: string,
	customerId?: GraphQLTypes["bigint"],
	customerName?: string,
	customerTelephone?: string,
	customerType?: string,
	customerstatusid?: GraphQLTypes["bigint"],
	customeruuid?: GraphQLTypes["uuid"],
	dateAcceptedTerms?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateMarketingConsentUpdated?: GraphQLTypes["timestamptz"],
	dateUpgradeEmailConsentUpdates?: GraphQLTypes["timestamptz"],
	dateamended?: GraphQLTypes["timestamptz"],
	email?: string,
	language?: string,
	lastLogin?: GraphQLTypes["timestamptz"],
	lastipaddress?: string,
	location?: string,
	mergedfromcustomerid?: GraphQLTypes["bigint"],
	mergedtocustomerid?: GraphQLTypes["bigint"],
	notes?: string,
	receivingMarketingEmails?: boolean,
	receivingUpgradeEmails?: boolean,
	registeredUsername?: string,
	verified?: boolean
};
	/** Boolean expression to filter rows from the table "vectric.sales_customerupdates". All fields are combined with a logical 'AND'. */
["vectric_sales_customerupdates_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_sales_customerupdates_bool_exp"]>,
	_not?: GraphQLTypes["vectric_sales_customerupdates_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_sales_customerupdates_bool_exp"]>,
	changedBy?: GraphQLTypes["String_comparison_exp"],
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	customerUpdateId?: GraphQLTypes["bigint_comparison_exp"],
	dateChanged?: GraphQLTypes["timestamptz_comparison_exp"],
	fieldName?: GraphQLTypes["String_comparison_exp"],
	newValue?: GraphQLTypes["String_comparison_exp"],
	oldValue?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_inc_input"]: {
		customerId?: GraphQLTypes["bigint"],
	customerUpdateId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_insert_input"]: {
		changedBy?: string,
	customerId?: GraphQLTypes["bigint"],
	customerUpdateId?: GraphQLTypes["bigint"],
	dateChanged?: GraphQLTypes["timestamptz"],
	fieldName?: string,
	newValue?: string,
	oldValue?: string
};
	/** on conflict condition type for table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_on_conflict"]: {
		constraint: GraphQLTypes["vectric_sales_customerupdates_constraint"],
	update_columns: Array<GraphQLTypes["vectric_sales_customerupdates_update_column"]>,
	where?: GraphQLTypes["vectric_sales_customerupdates_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.sales_customerupdates". */
["vectric_sales_customerupdates_order_by"]: {
		changedBy?: GraphQLTypes["order_by"],
	customerId?: GraphQLTypes["order_by"],
	customerUpdateId?: GraphQLTypes["order_by"],
	dateChanged?: GraphQLTypes["order_by"],
	fieldName?: GraphQLTypes["order_by"],
	newValue?: GraphQLTypes["order_by"],
	oldValue?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_sales_customerupdates */
["vectric_sales_customerupdates_pk_columns_input"]: {
		customerUpdateId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.sales_customerupdates" */
["vectric_sales_customerupdates_set_input"]: {
		changedBy?: string,
	customerId?: GraphQLTypes["bigint"],
	customerUpdateId?: GraphQLTypes["bigint"],
	dateChanged?: GraphQLTypes["timestamptz"],
	fieldName?: string,
	newValue?: string,
	oldValue?: string
};
	/** order by aggregate values of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_sales_oem_bundles_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_sales_oem_bundles_max_order_by"],
	min?: GraphQLTypes["vectric_sales_oem_bundles_min_order_by"],
	stddev?: GraphQLTypes["vectric_sales_oem_bundles_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_sales_oem_bundles_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_sales_oem_bundles_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_sales_oem_bundles_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_sales_oem_bundles_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_sales_oem_bundles_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_sales_oem_bundles_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_sales_oem_bundles_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_sales_oem_bundles_on_conflict"]
};
	/** order by avg() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_avg_order_by"]: {
		allocationTypeId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.sales_oem_bundles". All fields are combined with a logical 'AND'. */
["vectric_sales_oem_bundles_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_sales_oem_bundles_bool_exp"]>,
	_not?: GraphQLTypes["vectric_sales_oem_bundles_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_sales_oem_bundles_bool_exp"]>,
	allocatedBy?: GraphQLTypes["String_comparison_exp"],
	allocationBatch?: GraphQLTypes["String_comparison_exp"],
	allocationType?: GraphQLTypes["vectric_oem_licence_allocation_type_bool_exp"],
	allocationTypeId?: GraphQLTypes["bigint_comparison_exp"],
	bundleId?: GraphQLTypes["String_comparison_exp"],
	dateAllocated?: GraphQLTypes["timestamptz_comparison_exp"],
	dateCreated?: GraphQLTypes["timestamptz_comparison_exp"],
	licences?: GraphQLTypes["vectric_sales_oemlicences_bool_exp"],
	notes?: GraphQLTypes["String_comparison_exp"],
	partner?: GraphQLTypes["vectric_oem_partners_bool_exp"],
	partnerId?: GraphQLTypes["bigint_comparison_exp"],
	product?: GraphQLTypes["bigint_comparison_exp"],
	productDisplayName?: GraphQLTypes["String_comparison_exp"],
	registrationDate?: GraphQLTypes["timestamptz_comparison_exp"],
	typeDisplayName?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_inc_input"]: {
		allocationTypeId?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_insert_input"]: {
		allocatedBy?: string,
	allocationBatch?: string,
	allocationType?: GraphQLTypes["vectric_oem_licence_allocation_type_obj_rel_insert_input"],
	allocationTypeId?: GraphQLTypes["bigint"],
	bundleId?: string,
	dateAllocated?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	licences?: GraphQLTypes["vectric_sales_oemlicences_arr_rel_insert_input"],
	notes?: string,
	partner?: GraphQLTypes["vectric_oem_partners_obj_rel_insert_input"],
	partnerId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["bigint"],
	productDisplayName?: string,
	registrationDate?: GraphQLTypes["timestamptz"],
	typeDisplayName?: string
};
	/** order by max() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_max_order_by"]: {
		allocatedBy?: GraphQLTypes["order_by"],
	allocationBatch?: GraphQLTypes["order_by"],
	allocationTypeId?: GraphQLTypes["order_by"],
	bundleId?: GraphQLTypes["order_by"],
	dateAllocated?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	notes?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"],
	productDisplayName?: GraphQLTypes["order_by"],
	registrationDate?: GraphQLTypes["order_by"],
	typeDisplayName?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_min_order_by"]: {
		allocatedBy?: GraphQLTypes["order_by"],
	allocationBatch?: GraphQLTypes["order_by"],
	allocationTypeId?: GraphQLTypes["order_by"],
	bundleId?: GraphQLTypes["order_by"],
	dateAllocated?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	notes?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"],
	productDisplayName?: GraphQLTypes["order_by"],
	registrationDate?: GraphQLTypes["order_by"],
	typeDisplayName?: GraphQLTypes["order_by"]
};
	/** input type for inserting object relation for remote table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_sales_oem_bundles_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_sales_oem_bundles_on_conflict"]
};
	/** on conflict condition type for table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_on_conflict"]: {
		constraint: GraphQLTypes["vectric_sales_oem_bundles_constraint"],
	update_columns: Array<GraphQLTypes["vectric_sales_oem_bundles_update_column"]>,
	where?: GraphQLTypes["vectric_sales_oem_bundles_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.sales_oem_bundles". */
["vectric_sales_oem_bundles_order_by"]: {
		allocatedBy?: GraphQLTypes["order_by"],
	allocationBatch?: GraphQLTypes["order_by"],
	allocationType?: GraphQLTypes["vectric_oem_licence_allocation_type_order_by"],
	allocationTypeId?: GraphQLTypes["order_by"],
	bundleId?: GraphQLTypes["order_by"],
	dateAllocated?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	licences_aggregate?: GraphQLTypes["vectric_sales_oemlicences_aggregate_order_by"],
	notes?: GraphQLTypes["order_by"],
	partner?: GraphQLTypes["vectric_oem_partners_order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"],
	productDisplayName?: GraphQLTypes["order_by"],
	registrationDate?: GraphQLTypes["order_by"],
	typeDisplayName?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_sales_oem_bundles */
["vectric_sales_oem_bundles_pk_columns_input"]: {
		bundleId: string
};
	/** input type for updating data in table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_set_input"]: {
		allocatedBy?: string,
	allocationBatch?: string,
	allocationTypeId?: GraphQLTypes["bigint"],
	bundleId?: string,
	dateAllocated?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	notes?: string,
	partnerId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["bigint"],
	productDisplayName?: string,
	registrationDate?: GraphQLTypes["timestamptz"],
	typeDisplayName?: string
};
	/** order by stddev() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_stddev_order_by"]: {
		allocationTypeId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_stddev_pop_order_by"]: {
		allocationTypeId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_stddev_samp_order_by"]: {
		allocationTypeId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_sum_order_by"]: {
		allocationTypeId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_var_pop_order_by"]: {
		allocationTypeId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_var_samp_order_by"]: {
		allocationTypeId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.sales_oem_bundles" */
["vectric_sales_oem_bundles_variance_order_by"]: {
		allocationTypeId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["order_by"]
};
	/** order by aggregate values of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_sales_oemlicences_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_sales_oemlicences_max_order_by"],
	min?: GraphQLTypes["vectric_sales_oemlicences_min_order_by"],
	stddev?: GraphQLTypes["vectric_sales_oemlicences_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_sales_oemlicences_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_sales_oemlicences_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_sales_oemlicences_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_sales_oemlicences_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_sales_oemlicences_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_sales_oemlicences_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_sales_oemlicences_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_sales_oemlicences_on_conflict"]
};
	/** order by avg() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_avg_order_by"]: {
		allocationTypeId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	saleItemId?: GraphQLTypes["order_by"],
	version?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.sales_oemlicences". All fields are combined with a logical 'AND'. */
["vectric_sales_oemlicences_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_sales_oemlicences_bool_exp"]>,
	_not?: GraphQLTypes["vectric_sales_oemlicences_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_sales_oemlicences_bool_exp"]>,
	allocatedBy?: GraphQLTypes["String_comparison_exp"],
	allocationType?: GraphQLTypes["vectric_oem_licence_allocation_type_bool_exp"],
	allocationTypeId?: GraphQLTypes["bigint_comparison_exp"],
	dateAllocated?: GraphQLTypes["timestamptz_comparison_exp"],
	dateCreated?: GraphQLTypes["timestamptz_comparison_exp"],
	disabled?: GraphQLTypes["Boolean_comparison_exp"],
	licenceCode?: GraphQLTypes["String_comparison_exp"],
	licenceLogRows?: GraphQLTypes["vectric_licence_log_bool_exp"],
	mediaProvided?: GraphQLTypes["Boolean_comparison_exp"],
	oemBundleId?: GraphQLTypes["String_comparison_exp"],
	oemLicenceId?: GraphQLTypes["bigint_comparison_exp"],
	orderItemProductId?: GraphQLTypes["bigint_comparison_exp"],
	partner?: GraphQLTypes["vectric_oem_partners_bool_exp"],
	partnerId?: GraphQLTypes["bigint_comparison_exp"],
	productId?: GraphQLTypes["bigint_comparison_exp"],
	productName?: GraphQLTypes["String_comparison_exp"],
	registrationDate?: GraphQLTypes["timestamptz_comparison_exp"],
	saleItemId?: GraphQLTypes["bigint_comparison_exp"],
	version?: GraphQLTypes["smallint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_inc_input"]: {
		allocationTypeId?: GraphQLTypes["bigint"],
	oemLicenceId?: GraphQLTypes["bigint"],
	orderItemProductId?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"],
	saleItemId?: GraphQLTypes["bigint"],
	version?: GraphQLTypes["smallint"]
};
	/** input type for inserting data into table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_insert_input"]: {
		allocatedBy?: string,
	allocationType?: GraphQLTypes["vectric_oem_licence_allocation_type_obj_rel_insert_input"],
	allocationTypeId?: GraphQLTypes["bigint"],
	dateAllocated?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	disabled?: boolean,
	licenceCode?: string,
	licenceLogRows?: GraphQLTypes["vectric_licence_log_arr_rel_insert_input"],
	mediaProvided?: boolean,
	oemBundleId?: string,
	oemLicenceId?: GraphQLTypes["bigint"],
	orderItemProductId?: GraphQLTypes["bigint"],
	partner?: GraphQLTypes["vectric_oem_partners_obj_rel_insert_input"],
	partnerId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"],
	productName?: string,
	registrationDate?: GraphQLTypes["timestamptz"],
	saleItemId?: GraphQLTypes["bigint"],
	version?: GraphQLTypes["smallint"]
};
	/** order by max() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_max_order_by"]: {
		allocatedBy?: GraphQLTypes["order_by"],
	allocationTypeId?: GraphQLTypes["order_by"],
	dateAllocated?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	licenceCode?: GraphQLTypes["order_by"],
	oemBundleId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	productName?: GraphQLTypes["order_by"],
	registrationDate?: GraphQLTypes["order_by"],
	saleItemId?: GraphQLTypes["order_by"],
	version?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_min_order_by"]: {
		allocatedBy?: GraphQLTypes["order_by"],
	allocationTypeId?: GraphQLTypes["order_by"],
	dateAllocated?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	licenceCode?: GraphQLTypes["order_by"],
	oemBundleId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	productName?: GraphQLTypes["order_by"],
	registrationDate?: GraphQLTypes["order_by"],
	saleItemId?: GraphQLTypes["order_by"],
	version?: GraphQLTypes["order_by"]
};
	/** on conflict condition type for table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_on_conflict"]: {
		constraint: GraphQLTypes["vectric_sales_oemlicences_constraint"],
	update_columns: Array<GraphQLTypes["vectric_sales_oemlicences_update_column"]>,
	where?: GraphQLTypes["vectric_sales_oemlicences_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.sales_oemlicences". */
["vectric_sales_oemlicences_order_by"]: {
		allocatedBy?: GraphQLTypes["order_by"],
	allocationType?: GraphQLTypes["vectric_oem_licence_allocation_type_order_by"],
	allocationTypeId?: GraphQLTypes["order_by"],
	dateAllocated?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	disabled?: GraphQLTypes["order_by"],
	licenceCode?: GraphQLTypes["order_by"],
	licenceLogRows_aggregate?: GraphQLTypes["vectric_licence_log_aggregate_order_by"],
	mediaProvided?: GraphQLTypes["order_by"],
	oemBundleId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	partner?: GraphQLTypes["vectric_oem_partners_order_by"],
	partnerId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	productName?: GraphQLTypes["order_by"],
	registrationDate?: GraphQLTypes["order_by"],
	saleItemId?: GraphQLTypes["order_by"],
	version?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_sales_oemlicences */
["vectric_sales_oemlicences_pk_columns_input"]: {
		oemLicenceId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_set_input"]: {
		allocatedBy?: string,
	allocationTypeId?: GraphQLTypes["bigint"],
	dateAllocated?: GraphQLTypes["timestamptz"],
	dateCreated?: GraphQLTypes["timestamptz"],
	disabled?: boolean,
	licenceCode?: string,
	mediaProvided?: boolean,
	oemBundleId?: string,
	oemLicenceId?: GraphQLTypes["bigint"],
	orderItemProductId?: GraphQLTypes["bigint"],
	partnerId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"],
	productName?: string,
	registrationDate?: GraphQLTypes["timestamptz"],
	saleItemId?: GraphQLTypes["bigint"],
	version?: GraphQLTypes["smallint"]
};
	/** order by stddev() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_stddev_order_by"]: {
		allocationTypeId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	saleItemId?: GraphQLTypes["order_by"],
	version?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_stddev_pop_order_by"]: {
		allocationTypeId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	saleItemId?: GraphQLTypes["order_by"],
	version?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_stddev_samp_order_by"]: {
		allocationTypeId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	saleItemId?: GraphQLTypes["order_by"],
	version?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_sum_order_by"]: {
		allocationTypeId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	saleItemId?: GraphQLTypes["order_by"],
	version?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_var_pop_order_by"]: {
		allocationTypeId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	saleItemId?: GraphQLTypes["order_by"],
	version?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_var_samp_order_by"]: {
		allocationTypeId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	saleItemId?: GraphQLTypes["order_by"],
	version?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.sales_oemlicences" */
["vectric_sales_oemlicences_variance_order_by"]: {
		allocationTypeId?: GraphQLTypes["order_by"],
	oemLicenceId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	partnerId?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	saleItemId?: GraphQLTypes["order_by"],
	version?: GraphQLTypes["order_by"]
};
	/** order by aggregate values of table "vectric.sales_orders" */
["vectric_sales_orders_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_sales_orders_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_sales_orders_max_order_by"],
	min?: GraphQLTypes["vectric_sales_orders_min_order_by"],
	stddev?: GraphQLTypes["vectric_sales_orders_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_sales_orders_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_sales_orders_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_sales_orders_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_sales_orders_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_sales_orders_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_sales_orders_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.sales_orders" */
["vectric_sales_orders_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_sales_orders_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_sales_orders_on_conflict"]
};
	/** order by avg() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_avg_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	mergedfromcustomerid?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.sales_orders". All fields are combined with a logical 'AND'. */
["vectric_sales_orders_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_sales_orders_bool_exp"]>,
	_not?: GraphQLTypes["vectric_sales_orders_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_sales_orders_bool_exp"]>,
	amendedby?: GraphQLTypes["String_comparison_exp"],
	createdby?: GraphQLTypes["String_comparison_exp"],
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	dateCreated?: GraphQLTypes["timestamptz_comparison_exp"],
	dateamended?: GraphQLTypes["timestamptz_comparison_exp"],
	mergedfromcustomerid?: GraphQLTypes["bigint_comparison_exp"],
	orderDate?: GraphQLTypes["timestamptz_comparison_exp"],
	orderId?: GraphQLTypes["String_comparison_exp"],
	purchaser?: GraphQLTypes["String_comparison_exp"],
	registrationemailsent?: GraphQLTypes["date_comparison_exp"],
	salenote?: GraphQLTypes["String_comparison_exp"],
	salesItems?: GraphQLTypes["vectric_sales_salesitems_bool_exp"],
	sales_customer?: GraphQLTypes["vectric_sales_customers_bool_exp"],
	salesdetails?: GraphQLTypes["String_comparison_exp"],
	salesummary?: GraphQLTypes["String_comparison_exp"],
	validationcomments?: GraphQLTypes["String_comparison_exp"],
	veccode?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.sales_orders" */
["vectric_sales_orders_inc_input"]: {
		customerId?: GraphQLTypes["bigint"],
	mergedfromcustomerid?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.sales_orders" */
["vectric_sales_orders_insert_input"]: {
		amendedby?: string,
	createdby?: string,
	customerId?: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateamended?: GraphQLTypes["timestamptz"],
	mergedfromcustomerid?: GraphQLTypes["bigint"],
	orderDate?: GraphQLTypes["timestamptz"],
	orderId?: string,
	purchaser?: string,
	registrationemailsent?: GraphQLTypes["date"],
	salenote?: string,
	salesItems?: GraphQLTypes["vectric_sales_salesitems_arr_rel_insert_input"],
	sales_customer?: GraphQLTypes["vectric_sales_customers_obj_rel_insert_input"],
	salesdetails?: string,
	salesummary?: string,
	validationcomments?: string,
	veccode?: string
};
	/** order by max() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_max_order_by"]: {
		amendedby?: GraphQLTypes["order_by"],
	createdby?: GraphQLTypes["order_by"],
	customerId?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	dateamended?: GraphQLTypes["order_by"],
	mergedfromcustomerid?: GraphQLTypes["order_by"],
	orderDate?: GraphQLTypes["order_by"],
	orderId?: GraphQLTypes["order_by"],
	purchaser?: GraphQLTypes["order_by"],
	registrationemailsent?: GraphQLTypes["order_by"],
	salenote?: GraphQLTypes["order_by"],
	salesdetails?: GraphQLTypes["order_by"],
	salesummary?: GraphQLTypes["order_by"],
	validationcomments?: GraphQLTypes["order_by"],
	veccode?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_min_order_by"]: {
		amendedby?: GraphQLTypes["order_by"],
	createdby?: GraphQLTypes["order_by"],
	customerId?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	dateamended?: GraphQLTypes["order_by"],
	mergedfromcustomerid?: GraphQLTypes["order_by"],
	orderDate?: GraphQLTypes["order_by"],
	orderId?: GraphQLTypes["order_by"],
	purchaser?: GraphQLTypes["order_by"],
	registrationemailsent?: GraphQLTypes["order_by"],
	salenote?: GraphQLTypes["order_by"],
	salesdetails?: GraphQLTypes["order_by"],
	salesummary?: GraphQLTypes["order_by"],
	validationcomments?: GraphQLTypes["order_by"],
	veccode?: GraphQLTypes["order_by"]
};
	/** input type for inserting object relation for remote table "vectric.sales_orders" */
["vectric_sales_orders_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_sales_orders_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_sales_orders_on_conflict"]
};
	/** on conflict condition type for table "vectric.sales_orders" */
["vectric_sales_orders_on_conflict"]: {
		constraint: GraphQLTypes["vectric_sales_orders_constraint"],
	update_columns: Array<GraphQLTypes["vectric_sales_orders_update_column"]>,
	where?: GraphQLTypes["vectric_sales_orders_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.sales_orders". */
["vectric_sales_orders_order_by"]: {
		amendedby?: GraphQLTypes["order_by"],
	createdby?: GraphQLTypes["order_by"],
	customerId?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	dateamended?: GraphQLTypes["order_by"],
	mergedfromcustomerid?: GraphQLTypes["order_by"],
	orderDate?: GraphQLTypes["order_by"],
	orderId?: GraphQLTypes["order_by"],
	purchaser?: GraphQLTypes["order_by"],
	registrationemailsent?: GraphQLTypes["order_by"],
	salenote?: GraphQLTypes["order_by"],
	salesItems_aggregate?: GraphQLTypes["vectric_sales_salesitems_aggregate_order_by"],
	sales_customer?: GraphQLTypes["vectric_sales_customers_order_by"],
	salesdetails?: GraphQLTypes["order_by"],
	salesummary?: GraphQLTypes["order_by"],
	validationcomments?: GraphQLTypes["order_by"],
	veccode?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_sales_orders */
["vectric_sales_orders_pk_columns_input"]: {
		orderId: string
};
	/** input type for updating data in table "vectric.sales_orders" */
["vectric_sales_orders_set_input"]: {
		amendedby?: string,
	createdby?: string,
	customerId?: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateamended?: GraphQLTypes["timestamptz"],
	mergedfromcustomerid?: GraphQLTypes["bigint"],
	orderDate?: GraphQLTypes["timestamptz"],
	orderId?: string,
	purchaser?: string,
	registrationemailsent?: GraphQLTypes["date"],
	salenote?: string,
	salesdetails?: string,
	salesummary?: string,
	validationcomments?: string,
	veccode?: string
};
	/** order by stddev() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_stddev_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	mergedfromcustomerid?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_stddev_pop_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	mergedfromcustomerid?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_stddev_samp_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	mergedfromcustomerid?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_sum_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	mergedfromcustomerid?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_var_pop_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	mergedfromcustomerid?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_var_samp_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	mergedfromcustomerid?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.sales_orders" */
["vectric_sales_orders_variance_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	mergedfromcustomerid?: GraphQLTypes["order_by"]
};
	/** order by aggregate values of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_sales_salesitem_products_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_sales_salesitem_products_max_order_by"],
	min?: GraphQLTypes["vectric_sales_salesitem_products_min_order_by"],
	stddev?: GraphQLTypes["vectric_sales_salesitem_products_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_sales_salesitem_products_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_sales_salesitem_products_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_sales_salesitem_products_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_sales_salesitem_products_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_sales_salesitem_products_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_sales_salesitem_products_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_sales_salesitem_products_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_sales_salesitem_products_on_conflict"]
};
	/** order by avg() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_avg_order_by"]: {
		enhances?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	salesItemProductId?: GraphQLTypes["order_by"],
	salesitemid?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"],
	transfersalesitem?: GraphQLTypes["order_by"],
	upgradesalesitem?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.sales_salesitem_products". All fields are combined with a logical 'AND'. */
["vectric_sales_salesitem_products_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_sales_salesitem_products_bool_exp"]>,
	_not?: GraphQLTypes["vectric_sales_salesitem_products_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_sales_salesitem_products_bool_exp"]>,
	addOns?: GraphQLTypes["vectric_sales_salesitem_products_bool_exp"],
	amended?: GraphQLTypes["timestamptz_comparison_exp"],
	amendedby?: GraphQLTypes["String_comparison_exp"],
	emailsubject?: GraphQLTypes["String_comparison_exp"],
	enhanceSalesItemProduct?: GraphQLTypes["vectric_sales_salesitem_products_bool_exp"],
	enhancementTokens?: GraphQLTypes["vectric_enhancement_tokens_bool_exp"],
	enhances?: GraphQLTypes["bigint_comparison_exp"],
	freeClipartTokens?: GraphQLTypes["vectric_free_clipart_tokens_bool_exp"],
	licenceCode?: GraphQLTypes["String_comparison_exp"],
	licenceIdAsDisplay?: GraphQLTypes["Boolean_comparison_exp"],
	licenceType?: GraphQLTypes["String_comparison_exp"],
	oembundleid?: GraphQLTypes["String_comparison_exp"],
	product?: GraphQLTypes["vectric_products_products_bool_exp"],
	productId?: GraphQLTypes["bigint_comparison_exp"],
	registeredUsername?: GraphQLTypes["String_comparison_exp"],
	resentdate?: GraphQLTypes["timestamptz_comparison_exp"],
	salesItem?: GraphQLTypes["vectric_sales_salesitems_bool_exp"],
	salesItemProductId?: GraphQLTypes["bigint_comparison_exp"],
	salesItemProductStatus?: GraphQLTypes["vectric_sales_salesitemproduct_status_bool_exp"],
	salesitemid?: GraphQLTypes["bigint_comparison_exp"],
	status?: GraphQLTypes["bigint_comparison_exp"],
	transfersalesitem?: GraphQLTypes["bigint_comparison_exp"],
	upgradeTokens?: GraphQLTypes["vectric_upgrade_tokens_bool_exp"],
	upgradesalesitem?: GraphQLTypes["bigint_comparison_exp"],
	versioncodeid?: GraphQLTypes["bigint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_inc_input"]: {
		enhances?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"],
	salesItemProductId?: GraphQLTypes["bigint"],
	salesitemid?: GraphQLTypes["bigint"],
	status?: GraphQLTypes["bigint"],
	transfersalesitem?: GraphQLTypes["bigint"],
	upgradesalesitem?: GraphQLTypes["bigint"],
	versioncodeid?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_insert_input"]: {
		addOns?: GraphQLTypes["vectric_sales_salesitem_products_arr_rel_insert_input"],
	amended?: GraphQLTypes["timestamptz"],
	amendedby?: string,
	emailsubject?: string,
	enhanceSalesItemProduct?: GraphQLTypes["vectric_sales_salesitem_products_obj_rel_insert_input"],
	enhancementTokens?: GraphQLTypes["vectric_enhancement_tokens_arr_rel_insert_input"],
	enhances?: GraphQLTypes["bigint"],
	freeClipartTokens?: GraphQLTypes["vectric_free_clipart_tokens_arr_rel_insert_input"],
	licenceCode?: string,
	licenceIdAsDisplay?: boolean,
	licenceType?: string,
	oembundleid?: string,
	product?: GraphQLTypes["vectric_products_products_obj_rel_insert_input"],
	productId?: GraphQLTypes["bigint"],
	registeredUsername?: string,
	resentdate?: GraphQLTypes["timestamptz"],
	salesItem?: GraphQLTypes["vectric_sales_salesitems_obj_rel_insert_input"],
	salesItemProductId?: GraphQLTypes["bigint"],
	salesItemProductStatus?: GraphQLTypes["vectric_sales_salesitemproduct_status_obj_rel_insert_input"],
	salesitemid?: GraphQLTypes["bigint"],
	status?: GraphQLTypes["bigint"],
	transfersalesitem?: GraphQLTypes["bigint"],
	upgradeTokens?: GraphQLTypes["vectric_upgrade_tokens_arr_rel_insert_input"],
	upgradesalesitem?: GraphQLTypes["bigint"],
	versioncodeid?: GraphQLTypes["bigint"]
};
	/** order by max() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_max_order_by"]: {
		amended?: GraphQLTypes["order_by"],
	amendedby?: GraphQLTypes["order_by"],
	emailsubject?: GraphQLTypes["order_by"],
	enhances?: GraphQLTypes["order_by"],
	licenceCode?: GraphQLTypes["order_by"],
	licenceType?: GraphQLTypes["order_by"],
	oembundleid?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	registeredUsername?: GraphQLTypes["order_by"],
	resentdate?: GraphQLTypes["order_by"],
	salesItemProductId?: GraphQLTypes["order_by"],
	salesitemid?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"],
	transfersalesitem?: GraphQLTypes["order_by"],
	upgradesalesitem?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_min_order_by"]: {
		amended?: GraphQLTypes["order_by"],
	amendedby?: GraphQLTypes["order_by"],
	emailsubject?: GraphQLTypes["order_by"],
	enhances?: GraphQLTypes["order_by"],
	licenceCode?: GraphQLTypes["order_by"],
	licenceType?: GraphQLTypes["order_by"],
	oembundleid?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	registeredUsername?: GraphQLTypes["order_by"],
	resentdate?: GraphQLTypes["order_by"],
	salesItemProductId?: GraphQLTypes["order_by"],
	salesitemid?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"],
	transfersalesitem?: GraphQLTypes["order_by"],
	upgradesalesitem?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"]
};
	/** input type for inserting object relation for remote table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_sales_salesitem_products_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_sales_salesitem_products_on_conflict"]
};
	/** on conflict condition type for table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_on_conflict"]: {
		constraint: GraphQLTypes["vectric_sales_salesitem_products_constraint"],
	update_columns: Array<GraphQLTypes["vectric_sales_salesitem_products_update_column"]>,
	where?: GraphQLTypes["vectric_sales_salesitem_products_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.sales_salesitem_products". */
["vectric_sales_salesitem_products_order_by"]: {
		addOns_aggregate?: GraphQLTypes["vectric_sales_salesitem_products_aggregate_order_by"],
	amended?: GraphQLTypes["order_by"],
	amendedby?: GraphQLTypes["order_by"],
	emailsubject?: GraphQLTypes["order_by"],
	enhanceSalesItemProduct?: GraphQLTypes["vectric_sales_salesitem_products_order_by"],
	enhancementTokens_aggregate?: GraphQLTypes["vectric_enhancement_tokens_aggregate_order_by"],
	enhances?: GraphQLTypes["order_by"],
	freeClipartTokens_aggregate?: GraphQLTypes["vectric_free_clipart_tokens_aggregate_order_by"],
	licenceCode?: GraphQLTypes["order_by"],
	licenceIdAsDisplay?: GraphQLTypes["order_by"],
	licenceType?: GraphQLTypes["order_by"],
	oembundleid?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["vectric_products_products_order_by"],
	productId?: GraphQLTypes["order_by"],
	registeredUsername?: GraphQLTypes["order_by"],
	resentdate?: GraphQLTypes["order_by"],
	salesItem?: GraphQLTypes["vectric_sales_salesitems_order_by"],
	salesItemProductId?: GraphQLTypes["order_by"],
	salesItemProductStatus?: GraphQLTypes["vectric_sales_salesitemproduct_status_order_by"],
	salesitemid?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"],
	transfersalesitem?: GraphQLTypes["order_by"],
	upgradeTokens_aggregate?: GraphQLTypes["vectric_upgrade_tokens_aggregate_order_by"],
	upgradesalesitem?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_sales_salesitem_products */
["vectric_sales_salesitem_products_pk_columns_input"]: {
		salesItemProductId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_set_input"]: {
		amended?: GraphQLTypes["timestamptz"],
	amendedby?: string,
	emailsubject?: string,
	enhances?: GraphQLTypes["bigint"],
	licenceCode?: string,
	licenceIdAsDisplay?: boolean,
	licenceType?: string,
	oembundleid?: string,
	productId?: GraphQLTypes["bigint"],
	registeredUsername?: string,
	resentdate?: GraphQLTypes["timestamptz"],
	salesItemProductId?: GraphQLTypes["bigint"],
	salesitemid?: GraphQLTypes["bigint"],
	status?: GraphQLTypes["bigint"],
	transfersalesitem?: GraphQLTypes["bigint"],
	upgradesalesitem?: GraphQLTypes["bigint"],
	versioncodeid?: GraphQLTypes["bigint"]
};
	/** order by stddev() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_stddev_order_by"]: {
		enhances?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	salesItemProductId?: GraphQLTypes["order_by"],
	salesitemid?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"],
	transfersalesitem?: GraphQLTypes["order_by"],
	upgradesalesitem?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_stddev_pop_order_by"]: {
		enhances?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	salesItemProductId?: GraphQLTypes["order_by"],
	salesitemid?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"],
	transfersalesitem?: GraphQLTypes["order_by"],
	upgradesalesitem?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_stddev_samp_order_by"]: {
		enhances?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	salesItemProductId?: GraphQLTypes["order_by"],
	salesitemid?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"],
	transfersalesitem?: GraphQLTypes["order_by"],
	upgradesalesitem?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_sum_order_by"]: {
		enhances?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	salesItemProductId?: GraphQLTypes["order_by"],
	salesitemid?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"],
	transfersalesitem?: GraphQLTypes["order_by"],
	upgradesalesitem?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_var_pop_order_by"]: {
		enhances?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	salesItemProductId?: GraphQLTypes["order_by"],
	salesitemid?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"],
	transfersalesitem?: GraphQLTypes["order_by"],
	upgradesalesitem?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_var_samp_order_by"]: {
		enhances?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	salesItemProductId?: GraphQLTypes["order_by"],
	salesitemid?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"],
	transfersalesitem?: GraphQLTypes["order_by"],
	upgradesalesitem?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.sales_salesitem_products" */
["vectric_sales_salesitem_products_variance_order_by"]: {
		enhances?: GraphQLTypes["order_by"],
	productId?: GraphQLTypes["order_by"],
	salesItemProductId?: GraphQLTypes["order_by"],
	salesitemid?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"],
	transfersalesitem?: GraphQLTypes["order_by"],
	upgradesalesitem?: GraphQLTypes["order_by"],
	versioncodeid?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.sales_salesitemproduct_status". All fields are combined with a logical 'AND'. */
["vectric_sales_salesitemproduct_status_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_sales_salesitemproduct_status_bool_exp"]>,
	_not?: GraphQLTypes["vectric_sales_salesitemproduct_status_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_sales_salesitemproduct_status_bool_exp"]>,
	status?: GraphQLTypes["String_comparison_exp"],
	statusid?: GraphQLTypes["bigint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_inc_input"]: {
		statusid?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_insert_input"]: {
		status?: string,
	statusid?: GraphQLTypes["bigint"]
};
	/** input type for inserting object relation for remote table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_sales_salesitemproduct_status_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_sales_salesitemproduct_status_on_conflict"]
};
	/** on conflict condition type for table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_on_conflict"]: {
		constraint: GraphQLTypes["vectric_sales_salesitemproduct_status_constraint"],
	update_columns: Array<GraphQLTypes["vectric_sales_salesitemproduct_status_update_column"]>,
	where?: GraphQLTypes["vectric_sales_salesitemproduct_status_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.sales_salesitemproduct_status". */
["vectric_sales_salesitemproduct_status_order_by"]: {
		status?: GraphQLTypes["order_by"],
	statusid?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_sales_salesitemproduct_status */
["vectric_sales_salesitemproduct_status_pk_columns_input"]: {
		statusid: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.sales_salesitemproduct_status" */
["vectric_sales_salesitemproduct_status_set_input"]: {
		status?: string,
	statusid?: GraphQLTypes["bigint"]
};
	/** order by aggregate values of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_sales_salesitems_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_sales_salesitems_max_order_by"],
	min?: GraphQLTypes["vectric_sales_salesitems_min_order_by"],
	stddev?: GraphQLTypes["vectric_sales_salesitems_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_sales_salesitems_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_sales_salesitems_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_sales_salesitems_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_sales_salesitems_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_sales_salesitems_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_sales_salesitems_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.sales_salesitems" */
["vectric_sales_salesitems_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_sales_salesitems_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_sales_salesitems_on_conflict"]
};
	/** order by avg() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_avg_order_by"]: {
		productid?: GraphQLTypes["order_by"],
	salesitemid?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.sales_salesitems". All fields are combined with a logical 'AND'. */
["vectric_sales_salesitems_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_sales_salesitems_bool_exp"]>,
	_not?: GraphQLTypes["vectric_sales_salesitems_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_sales_salesitems_bool_exp"]>,
	amendedby?: GraphQLTypes["String_comparison_exp"],
	customerSale?: GraphQLTypes["vectric_customer_sales_bool_exp"],
	dateamended?: GraphQLTypes["timestamptz_comparison_exp"],
	orderid?: GraphQLTypes["String_comparison_exp"],
	product?: GraphQLTypes["vectric_products_products_bool_exp"],
	productid?: GraphQLTypes["bigint_comparison_exp"],
	salesItemProducts?: GraphQLTypes["vectric_sales_salesitem_products_bool_exp"],
	sales_order?: GraphQLTypes["vectric_sales_orders_bool_exp"],
	salesitemid?: GraphQLTypes["bigint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.sales_salesitems" */
["vectric_sales_salesitems_inc_input"]: {
		productid?: GraphQLTypes["bigint"],
	salesitemid?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.sales_salesitems" */
["vectric_sales_salesitems_insert_input"]: {
		amendedby?: string,
	customerSale?: GraphQLTypes["vectric_customer_sales_obj_rel_insert_input"],
	dateamended?: GraphQLTypes["timestamptz"],
	orderid?: string,
	product?: GraphQLTypes["vectric_products_products_obj_rel_insert_input"],
	productid?: GraphQLTypes["bigint"],
	salesItemProducts?: GraphQLTypes["vectric_sales_salesitem_products_arr_rel_insert_input"],
	sales_order?: GraphQLTypes["vectric_sales_orders_obj_rel_insert_input"],
	salesitemid?: GraphQLTypes["bigint"]
};
	/** order by max() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_max_order_by"]: {
		amendedby?: GraphQLTypes["order_by"],
	dateamended?: GraphQLTypes["order_by"],
	orderid?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"],
	salesitemid?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_min_order_by"]: {
		amendedby?: GraphQLTypes["order_by"],
	dateamended?: GraphQLTypes["order_by"],
	orderid?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"],
	salesitemid?: GraphQLTypes["order_by"]
};
	/** input type for inserting object relation for remote table "vectric.sales_salesitems" */
["vectric_sales_salesitems_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_sales_salesitems_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_sales_salesitems_on_conflict"]
};
	/** on conflict condition type for table "vectric.sales_salesitems" */
["vectric_sales_salesitems_on_conflict"]: {
		constraint: GraphQLTypes["vectric_sales_salesitems_constraint"],
	update_columns: Array<GraphQLTypes["vectric_sales_salesitems_update_column"]>,
	where?: GraphQLTypes["vectric_sales_salesitems_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.sales_salesitems". */
["vectric_sales_salesitems_order_by"]: {
		amendedby?: GraphQLTypes["order_by"],
	customerSale?: GraphQLTypes["vectric_customer_sales_order_by"],
	dateamended?: GraphQLTypes["order_by"],
	orderid?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["vectric_products_products_order_by"],
	productid?: GraphQLTypes["order_by"],
	salesItemProducts_aggregate?: GraphQLTypes["vectric_sales_salesitem_products_aggregate_order_by"],
	sales_order?: GraphQLTypes["vectric_sales_orders_order_by"],
	salesitemid?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_sales_salesitems */
["vectric_sales_salesitems_pk_columns_input"]: {
		salesitemid: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.sales_salesitems" */
["vectric_sales_salesitems_set_input"]: {
		amendedby?: string,
	dateamended?: GraphQLTypes["timestamptz"],
	orderid?: string,
	productid?: GraphQLTypes["bigint"],
	salesitemid?: GraphQLTypes["bigint"]
};
	/** order by stddev() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_stddev_order_by"]: {
		productid?: GraphQLTypes["order_by"],
	salesitemid?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_stddev_pop_order_by"]: {
		productid?: GraphQLTypes["order_by"],
	salesitemid?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_stddev_samp_order_by"]: {
		productid?: GraphQLTypes["order_by"],
	salesitemid?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_sum_order_by"]: {
		productid?: GraphQLTypes["order_by"],
	salesitemid?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_var_pop_order_by"]: {
		productid?: GraphQLTypes["order_by"],
	salesitemid?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_var_samp_order_by"]: {
		productid?: GraphQLTypes["order_by"],
	salesitemid?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.sales_salesitems" */
["vectric_sales_salesitems_variance_order_by"]: {
		productid?: GraphQLTypes["order_by"],
	salesitemid?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.sales_velocitytemplate". All fields are combined with a logical 'AND'. */
["vectric_sales_velocitytemplate_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_sales_velocitytemplate_bool_exp"]>,
	_not?: GraphQLTypes["vectric_sales_velocitytemplate_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_sales_velocitytemplate_bool_exp"]>,
	lang?: GraphQLTypes["String_comparison_exp"],
	languageCode?: GraphQLTypes["vectric_language_codes_bool_exp"],
	sender?: GraphQLTypes["String_comparison_exp"],
	signedBy?: GraphQLTypes["String_comparison_exp"],
	subject?: GraphQLTypes["String_comparison_exp"],
	template?: GraphQLTypes["String_comparison_exp"],
	templateName?: GraphQLTypes["String_comparison_exp"],
	templateTimestamp?: GraphQLTypes["timestamptz_comparison_exp"]
};
	/** input type for inserting data into table "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_insert_input"]: {
		lang?: string,
	languageCode?: GraphQLTypes["vectric_language_codes_obj_rel_insert_input"],
	sender?: string,
	signedBy?: string,
	subject?: string,
	template?: string,
	templateName?: string,
	templateTimestamp?: GraphQLTypes["timestamptz"]
};
	/** on conflict condition type for table "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_on_conflict"]: {
		constraint: GraphQLTypes["vectric_sales_velocitytemplate_constraint"],
	update_columns: Array<GraphQLTypes["vectric_sales_velocitytemplate_update_column"]>,
	where?: GraphQLTypes["vectric_sales_velocitytemplate_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.sales_velocitytemplate". */
["vectric_sales_velocitytemplate_order_by"]: {
		lang?: GraphQLTypes["order_by"],
	languageCode?: GraphQLTypes["vectric_language_codes_order_by"],
	sender?: GraphQLTypes["order_by"],
	signedBy?: GraphQLTypes["order_by"],
	subject?: GraphQLTypes["order_by"],
	template?: GraphQLTypes["order_by"],
	templateName?: GraphQLTypes["order_by"],
	templateTimestamp?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_sales_velocitytemplate */
["vectric_sales_velocitytemplate_pk_columns_input"]: {
		templateName: string
};
	/** input type for updating data in table "vectric.sales_velocitytemplate" */
["vectric_sales_velocitytemplate_set_input"]: {
		lang?: string,
	sender?: string,
	signedBy?: string,
	subject?: string,
	template?: string,
	templateName?: string,
	templateTimestamp?: GraphQLTypes["timestamptz"]
};
	/** Boolean expression to filter rows from the table "vectric.scheduled_emails". All fields are combined with a logical 'AND'. */
["vectric_scheduled_emails_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_scheduled_emails_bool_exp"]>,
	_not?: GraphQLTypes["vectric_scheduled_emails_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_scheduled_emails_bool_exp"]>,
	createdOn?: GraphQLTypes["timestamp_comparison_exp"],
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	id?: GraphQLTypes["Int_comparison_exp"],
	processed?: GraphQLTypes["Boolean_comparison_exp"],
	processedOn?: GraphQLTypes["timestamp_comparison_exp"],
	sendTo?: GraphQLTypes["String_comparison_exp"],
	templateId?: GraphQLTypes["String_comparison_exp"],
	variables?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.scheduled_emails" */
["vectric_scheduled_emails_inc_input"]: {
		customerId?: GraphQLTypes["bigint"],
	id?: number
};
	/** input type for inserting data into table "vectric.scheduled_emails" */
["vectric_scheduled_emails_insert_input"]: {
		createdOn?: GraphQLTypes["timestamp"],
	customerId?: GraphQLTypes["bigint"],
	id?: number,
	processed?: boolean,
	processedOn?: GraphQLTypes["timestamp"],
	sendTo?: string,
	templateId?: string,
	variables?: string
};
	/** on conflict condition type for table "vectric.scheduled_emails" */
["vectric_scheduled_emails_on_conflict"]: {
		constraint: GraphQLTypes["vectric_scheduled_emails_constraint"],
	update_columns: Array<GraphQLTypes["vectric_scheduled_emails_update_column"]>,
	where?: GraphQLTypes["vectric_scheduled_emails_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.scheduled_emails". */
["vectric_scheduled_emails_order_by"]: {
		createdOn?: GraphQLTypes["order_by"],
	customerId?: GraphQLTypes["order_by"],
	id?: GraphQLTypes["order_by"],
	processed?: GraphQLTypes["order_by"],
	processedOn?: GraphQLTypes["order_by"],
	sendTo?: GraphQLTypes["order_by"],
	templateId?: GraphQLTypes["order_by"],
	variables?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_scheduled_emails */
["vectric_scheduled_emails_pk_columns_input"]: {
		id: number
};
	/** input type for updating data in table "vectric.scheduled_emails" */
["vectric_scheduled_emails_set_input"]: {
		createdOn?: GraphQLTypes["timestamp"],
	customerId?: GraphQLTypes["bigint"],
	id?: number,
	processed?: boolean,
	processedOn?: GraphQLTypes["timestamp"],
	sendTo?: string,
	templateId?: string,
	variables?: string
};
	/** Boolean expression to filter rows from the table "vectric.security_emailverificationtokens". All fields are combined with a logical 'AND'. */
["vectric_security_emailverificationtokens_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_security_emailverificationtokens_bool_exp"]>,
	_not?: GraphQLTypes["vectric_security_emailverificationtokens_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_security_emailverificationtokens_bool_exp"]>,
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	expiryDate?: GraphQLTypes["timestamptz_comparison_exp"],
	token?: GraphQLTypes["String_comparison_exp"],
	username?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_inc_input"]: {
		customerId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_insert_input"]: {
		customerId?: GraphQLTypes["bigint"],
	expiryDate?: GraphQLTypes["timestamptz"],
	token?: string,
	username?: string
};
	/** on conflict condition type for table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_on_conflict"]: {
		constraint: GraphQLTypes["vectric_security_emailverificationtokens_constraint"],
	update_columns: Array<GraphQLTypes["vectric_security_emailverificationtokens_update_column"]>,
	where?: GraphQLTypes["vectric_security_emailverificationtokens_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.security_emailverificationtokens". */
["vectric_security_emailverificationtokens_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	expiryDate?: GraphQLTypes["order_by"],
	token?: GraphQLTypes["order_by"],
	username?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_security_emailverificationtokens */
["vectric_security_emailverificationtokens_pk_columns_input"]: {
		token: string
};
	/** input type for updating data in table "vectric.security_emailverificationtokens" */
["vectric_security_emailverificationtokens_set_input"]: {
		customerId?: GraphQLTypes["bigint"],
	expiryDate?: GraphQLTypes["timestamptz"],
	token?: string,
	username?: string
};
	/** order by aggregate values of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_security_group_authorities_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_security_group_authorities_max_order_by"],
	min?: GraphQLTypes["vectric_security_group_authorities_min_order_by"],
	stddev?: GraphQLTypes["vectric_security_group_authorities_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_security_group_authorities_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_security_group_authorities_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_security_group_authorities_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_security_group_authorities_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_security_group_authorities_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_security_group_authorities_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.security_group_authorities" */
["vectric_security_group_authorities_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_security_group_authorities_insert_input"]>
};
	/** order by avg() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_avg_order_by"]: {
		groupId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.security_group_authorities". All fields are combined with a logical 'AND'. */
["vectric_security_group_authorities_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_security_group_authorities_bool_exp"]>,
	_not?: GraphQLTypes["vectric_security_group_authorities_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_security_group_authorities_bool_exp"]>,
	authority?: GraphQLTypes["String_comparison_exp"],
	groupId?: GraphQLTypes["bigint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.security_group_authorities" */
["vectric_security_group_authorities_inc_input"]: {
		groupId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.security_group_authorities" */
["vectric_security_group_authorities_insert_input"]: {
		authority?: string,
	groupId?: GraphQLTypes["bigint"]
};
	/** order by max() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_max_order_by"]: {
		authority?: GraphQLTypes["order_by"],
	groupId?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_min_order_by"]: {
		authority?: GraphQLTypes["order_by"],
	groupId?: GraphQLTypes["order_by"]
};
	/** Ordering options when selecting data from "vectric.security_group_authorities". */
["vectric_security_group_authorities_order_by"]: {
		authority?: GraphQLTypes["order_by"],
	groupId?: GraphQLTypes["order_by"]
};
	/** input type for updating data in table "vectric.security_group_authorities" */
["vectric_security_group_authorities_set_input"]: {
		authority?: string,
	groupId?: GraphQLTypes["bigint"]
};
	/** order by stddev() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_stddev_order_by"]: {
		groupId?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_stddev_pop_order_by"]: {
		groupId?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_stddev_samp_order_by"]: {
		groupId?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_sum_order_by"]: {
		groupId?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_var_pop_order_by"]: {
		groupId?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_var_samp_order_by"]: {
		groupId?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.security_group_authorities" */
["vectric_security_group_authorities_variance_order_by"]: {
		groupId?: GraphQLTypes["order_by"]
};
	/** order by aggregate values of table "vectric.security_group_members" */
["vectric_security_group_members_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_security_group_members_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_security_group_members_max_order_by"],
	min?: GraphQLTypes["vectric_security_group_members_min_order_by"],
	stddev?: GraphQLTypes["vectric_security_group_members_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_security_group_members_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_security_group_members_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_security_group_members_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_security_group_members_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_security_group_members_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_security_group_members_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.security_group_members" */
["vectric_security_group_members_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_security_group_members_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_security_group_members_on_conflict"]
};
	/** order by avg() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_avg_order_by"]: {
		groupId?: GraphQLTypes["order_by"],
	id?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.security_group_members". All fields are combined with a logical 'AND'. */
["vectric_security_group_members_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_security_group_members_bool_exp"]>,
	_not?: GraphQLTypes["vectric_security_group_members_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_security_group_members_bool_exp"]>,
	groupAuthorities?: GraphQLTypes["vectric_security_group_authorities_bool_exp"],
	groupId?: GraphQLTypes["bigint_comparison_exp"],
	id?: GraphQLTypes["bigint_comparison_exp"],
	securityUser?: GraphQLTypes["vectric_security_users_bool_exp"],
	username?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.security_group_members" */
["vectric_security_group_members_inc_input"]: {
		groupId?: GraphQLTypes["bigint"],
	id?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.security_group_members" */
["vectric_security_group_members_insert_input"]: {
		groupAuthorities?: GraphQLTypes["vectric_security_group_authorities_arr_rel_insert_input"],
	groupId?: GraphQLTypes["bigint"],
	id?: GraphQLTypes["bigint"],
	securityUser?: GraphQLTypes["vectric_security_users_obj_rel_insert_input"],
	username?: string
};
	/** order by max() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_max_order_by"]: {
		groupId?: GraphQLTypes["order_by"],
	id?: GraphQLTypes["order_by"],
	username?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_min_order_by"]: {
		groupId?: GraphQLTypes["order_by"],
	id?: GraphQLTypes["order_by"],
	username?: GraphQLTypes["order_by"]
};
	/** on conflict condition type for table "vectric.security_group_members" */
["vectric_security_group_members_on_conflict"]: {
		constraint: GraphQLTypes["vectric_security_group_members_constraint"],
	update_columns: Array<GraphQLTypes["vectric_security_group_members_update_column"]>,
	where?: GraphQLTypes["vectric_security_group_members_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.security_group_members". */
["vectric_security_group_members_order_by"]: {
		groupAuthorities_aggregate?: GraphQLTypes["vectric_security_group_authorities_aggregate_order_by"],
	groupId?: GraphQLTypes["order_by"],
	id?: GraphQLTypes["order_by"],
	securityUser?: GraphQLTypes["vectric_security_users_order_by"],
	username?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_security_group_members */
["vectric_security_group_members_pk_columns_input"]: {
		id: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.security_group_members" */
["vectric_security_group_members_set_input"]: {
		groupId?: GraphQLTypes["bigint"],
	id?: GraphQLTypes["bigint"],
	username?: string
};
	/** order by stddev() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_stddev_order_by"]: {
		groupId?: GraphQLTypes["order_by"],
	id?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_stddev_pop_order_by"]: {
		groupId?: GraphQLTypes["order_by"],
	id?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_stddev_samp_order_by"]: {
		groupId?: GraphQLTypes["order_by"],
	id?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_sum_order_by"]: {
		groupId?: GraphQLTypes["order_by"],
	id?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_var_pop_order_by"]: {
		groupId?: GraphQLTypes["order_by"],
	id?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_var_samp_order_by"]: {
		groupId?: GraphQLTypes["order_by"],
	id?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.security_group_members" */
["vectric_security_group_members_variance_order_by"]: {
		groupId?: GraphQLTypes["order_by"],
	id?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.security_passwordresettokens". All fields are combined with a logical 'AND'. */
["vectric_security_passwordresettokens_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_security_passwordresettokens_bool_exp"]>,
	_not?: GraphQLTypes["vectric_security_passwordresettokens_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_security_passwordresettokens_bool_exp"]>,
	expiryDate?: GraphQLTypes["timestamptz_comparison_exp"],
	token?: GraphQLTypes["String_comparison_exp"],
	username?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for inserting data into table "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_insert_input"]: {
		expiryDate?: GraphQLTypes["timestamptz"],
	token?: string,
	username?: string
};
	/** on conflict condition type for table "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_on_conflict"]: {
		constraint: GraphQLTypes["vectric_security_passwordresettokens_constraint"],
	update_columns: Array<GraphQLTypes["vectric_security_passwordresettokens_update_column"]>,
	where?: GraphQLTypes["vectric_security_passwordresettokens_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.security_passwordresettokens". */
["vectric_security_passwordresettokens_order_by"]: {
		expiryDate?: GraphQLTypes["order_by"],
	token?: GraphQLTypes["order_by"],
	username?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_security_passwordresettokens */
["vectric_security_passwordresettokens_pk_columns_input"]: {
		token: string
};
	/** input type for updating data in table "vectric.security_passwordresettokens" */
["vectric_security_passwordresettokens_set_input"]: {
		expiryDate?: GraphQLTypes["timestamptz"],
	token?: string,
	username?: string
};
	/** Boolean expression to filter rows from the table "vectric.security_userinvitations". All fields are combined with a logical 'AND'. */
["vectric_security_userinvitations_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_security_userinvitations_bool_exp"]>,
	_not?: GraphQLTypes["vectric_security_userinvitations_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_security_userinvitations_bool_exp"]>,
	acceptedDate?: GraphQLTypes["timestamptz_comparison_exp"],
	adminofid?: GraphQLTypes["bigint_comparison_exp"],
	createDate?: GraphQLTypes["timestamptz_comparison_exp"],
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	expirydate?: GraphQLTypes["timestamptz_comparison_exp"],
	staffofid?: GraphQLTypes["bigint_comparison_exp"],
	token?: GraphQLTypes["String_comparison_exp"],
	username?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.security_userinvitations" */
["vectric_security_userinvitations_inc_input"]: {
		adminofid?: GraphQLTypes["bigint"],
	customerId?: GraphQLTypes["bigint"],
	staffofid?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.security_userinvitations" */
["vectric_security_userinvitations_insert_input"]: {
		acceptedDate?: GraphQLTypes["timestamptz"],
	adminofid?: GraphQLTypes["bigint"],
	createDate?: GraphQLTypes["timestamptz"],
	customerId?: GraphQLTypes["bigint"],
	expirydate?: GraphQLTypes["timestamptz"],
	staffofid?: GraphQLTypes["bigint"],
	token?: string,
	username?: string
};
	/** on conflict condition type for table "vectric.security_userinvitations" */
["vectric_security_userinvitations_on_conflict"]: {
		constraint: GraphQLTypes["vectric_security_userinvitations_constraint"],
	update_columns: Array<GraphQLTypes["vectric_security_userinvitations_update_column"]>,
	where?: GraphQLTypes["vectric_security_userinvitations_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.security_userinvitations". */
["vectric_security_userinvitations_order_by"]: {
		acceptedDate?: GraphQLTypes["order_by"],
	adminofid?: GraphQLTypes["order_by"],
	createDate?: GraphQLTypes["order_by"],
	customerId?: GraphQLTypes["order_by"],
	expirydate?: GraphQLTypes["order_by"],
	staffofid?: GraphQLTypes["order_by"],
	token?: GraphQLTypes["order_by"],
	username?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_security_userinvitations */
["vectric_security_userinvitations_pk_columns_input"]: {
		token: string
};
	/** input type for updating data in table "vectric.security_userinvitations" */
["vectric_security_userinvitations_set_input"]: {
		acceptedDate?: GraphQLTypes["timestamptz"],
	adminofid?: GraphQLTypes["bigint"],
	createDate?: GraphQLTypes["timestamptz"],
	customerId?: GraphQLTypes["bigint"],
	expirydate?: GraphQLTypes["timestamptz"],
	staffofid?: GraphQLTypes["bigint"],
	token?: string,
	username?: string
};
	/** Boolean expression to filter rows from the table "vectric.security_users". All fields are combined with a logical 'AND'. */
["vectric_security_users_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_security_users_bool_exp"]>,
	_not?: GraphQLTypes["vectric_security_users_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_security_users_bool_exp"]>,
	accountNonExpired?: GraphQLTypes["Boolean_comparison_exp"],
	credentialsNonExpired?: GraphQLTypes["Boolean_comparison_exp"],
	enabled?: GraphQLTypes["Boolean_comparison_exp"],
	password?: GraphQLTypes["String_comparison_exp"],
	salesCustomerId?: GraphQLTypes["bigint_comparison_exp"],
	securityGroups?: GraphQLTypes["vectric_security_group_members_bool_exp"],
	username?: GraphQLTypes["String_comparison_exp"],
	voucherCode?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.security_users" */
["vectric_security_users_inc_input"]: {
		salesCustomerId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.security_users" */
["vectric_security_users_insert_input"]: {
		accountNonExpired?: boolean,
	credentialsNonExpired?: boolean,
	enabled?: boolean,
	password?: string,
	salesCustomerId?: GraphQLTypes["bigint"],
	securityGroups?: GraphQLTypes["vectric_security_group_members_arr_rel_insert_input"],
	username?: string,
	voucherCode?: string
};
	/** input type for inserting object relation for remote table "vectric.security_users" */
["vectric_security_users_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_security_users_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_security_users_on_conflict"]
};
	/** on conflict condition type for table "vectric.security_users" */
["vectric_security_users_on_conflict"]: {
		constraint: GraphQLTypes["vectric_security_users_constraint"],
	update_columns: Array<GraphQLTypes["vectric_security_users_update_column"]>,
	where?: GraphQLTypes["vectric_security_users_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.security_users". */
["vectric_security_users_order_by"]: {
		accountNonExpired?: GraphQLTypes["order_by"],
	credentialsNonExpired?: GraphQLTypes["order_by"],
	enabled?: GraphQLTypes["order_by"],
	password?: GraphQLTypes["order_by"],
	salesCustomerId?: GraphQLTypes["order_by"],
	securityGroups_aggregate?: GraphQLTypes["vectric_security_group_members_aggregate_order_by"],
	username?: GraphQLTypes["order_by"],
	voucherCode?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_security_users */
["vectric_security_users_pk_columns_input"]: {
		username: string
};
	/** input type for updating data in table "vectric.security_users" */
["vectric_security_users_set_input"]: {
		accountNonExpired?: boolean,
	credentialsNonExpired?: boolean,
	enabled?: boolean,
	password?: string,
	salesCustomerId?: GraphQLTypes["bigint"],
	username?: string,
	voucherCode?: string
};
	/** Boolean expression to filter rows from the table "vectric.site_option_location". All fields are combined with a logical 'AND'. */
["vectric_site_option_location_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_site_option_location_bool_exp"]>,
	_not?: GraphQLTypes["vectric_site_option_location_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_site_option_location_bool_exp"]>,
	locationid?: GraphQLTypes["bigint_comparison_exp"],
	name?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.site_option_location" */
["vectric_site_option_location_inc_input"]: {
		locationid?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.site_option_location" */
["vectric_site_option_location_insert_input"]: {
		locationid?: GraphQLTypes["bigint"],
	name?: string
};
	/** input type for inserting object relation for remote table "vectric.site_option_location" */
["vectric_site_option_location_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_site_option_location_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_site_option_location_on_conflict"]
};
	/** on conflict condition type for table "vectric.site_option_location" */
["vectric_site_option_location_on_conflict"]: {
		constraint: GraphQLTypes["vectric_site_option_location_constraint"],
	update_columns: Array<GraphQLTypes["vectric_site_option_location_update_column"]>,
	where?: GraphQLTypes["vectric_site_option_location_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.site_option_location". */
["vectric_site_option_location_order_by"]: {
		locationid?: GraphQLTypes["order_by"],
	name?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_site_option_location */
["vectric_site_option_location_pk_columns_input"]: {
		locationid: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.site_option_location" */
["vectric_site_option_location_set_input"]: {
		locationid?: GraphQLTypes["bigint"],
	name?: string
};
	/** Boolean expression to filter rows from the table "vectric.site_options". All fields are combined with a logical 'AND'. */
["vectric_site_options_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_site_options_bool_exp"]>,
	_not?: GraphQLTypes["vectric_site_options_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_site_options_bool_exp"]>,
	description?: GraphQLTypes["String_comparison_exp"],
	optionid?: GraphQLTypes["bigint_comparison_exp"],
	optionname?: GraphQLTypes["String_comparison_exp"],
	site_optiositeOptionLocationn_location?: GraphQLTypes["vectric_site_option_location_bool_exp"],
	siteid?: GraphQLTypes["bigint_comparison_exp"],
	stringval?: GraphQLTypes["String_comparison_exp"],
	value?: GraphQLTypes["Boolean_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.site_options" */
["vectric_site_options_inc_input"]: {
		optionid?: GraphQLTypes["bigint"],
	siteid?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.site_options" */
["vectric_site_options_insert_input"]: {
		description?: string,
	optionid?: GraphQLTypes["bigint"],
	optionname?: string,
	site_optiositeOptionLocationn_location?: GraphQLTypes["vectric_site_option_location_obj_rel_insert_input"],
	siteid?: GraphQLTypes["bigint"],
	stringval?: string,
	value?: boolean
};
	/** on conflict condition type for table "vectric.site_options" */
["vectric_site_options_on_conflict"]: {
		constraint: GraphQLTypes["vectric_site_options_constraint"],
	update_columns: Array<GraphQLTypes["vectric_site_options_update_column"]>,
	where?: GraphQLTypes["vectric_site_options_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.site_options". */
["vectric_site_options_order_by"]: {
		description?: GraphQLTypes["order_by"],
	optionid?: GraphQLTypes["order_by"],
	optionname?: GraphQLTypes["order_by"],
	site_optiositeOptionLocationn_location?: GraphQLTypes["vectric_site_option_location_order_by"],
	siteid?: GraphQLTypes["order_by"],
	stringval?: GraphQLTypes["order_by"],
	value?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_site_options */
["vectric_site_options_pk_columns_input"]: {
		optionid: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.site_options" */
["vectric_site_options_set_input"]: {
		description?: string,
	optionid?: GraphQLTypes["bigint"],
	optionname?: string,
	siteid?: GraphQLTypes["bigint"],
	stringval?: string,
	value?: boolean
};
	/** Boolean expression to filter rows from the table "vectric.subscription_contract_status". All fields are combined with a logical 'AND'. */
["vectric_subscription_contract_status_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_subscription_contract_status_bool_exp"]>,
	_not?: GraphQLTypes["vectric_subscription_contract_status_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_subscription_contract_status_bool_exp"]>,
	status?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for inserting data into table "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_insert_input"]: {
		status?: string
};
	/** on conflict condition type for table "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_on_conflict"]: {
		constraint: GraphQLTypes["vectric_subscription_contract_status_constraint"],
	update_columns: Array<GraphQLTypes["vectric_subscription_contract_status_update_column"]>,
	where?: GraphQLTypes["vectric_subscription_contract_status_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.subscription_contract_status". */
["vectric_subscription_contract_status_order_by"]: {
		status?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_subscription_contract_status */
["vectric_subscription_contract_status_pk_columns_input"]: {
		status: string
};
	/** input type for updating data in table "vectric.subscription_contract_status" */
["vectric_subscription_contract_status_set_input"]: {
		status?: string
};
	/** Boolean expression to filter rows from the table "vectric.subscription_contracts". All fields are combined with a logical 'AND'. */
["vectric_subscription_contracts_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_subscription_contracts_bool_exp"]>,
	_not?: GraphQLTypes["vectric_subscription_contracts_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_subscription_contracts_bool_exp"]>,
	dateEnding?: GraphQLTypes["timestamp_comparison_exp"],
	dateStarted?: GraphQLTypes["timestamp_comparison_exp"],
	events?: GraphQLTypes["vectric_subscription_events_bool_exp"],
	orderItem?: GraphQLTypes["vectric_organization_order_items_bool_exp"],
	orderItemId?: GraphQLTypes["Int_comparison_exp"],
	status?: GraphQLTypes["String_comparison_exp"],
	subscriptionContractId?: GraphQLTypes["Int_comparison_exp"],
	subscriptionId?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.subscription_contracts" */
["vectric_subscription_contracts_inc_input"]: {
		orderItemId?: number,
	subscriptionContractId?: number
};
	/** input type for inserting data into table "vectric.subscription_contracts" */
["vectric_subscription_contracts_insert_input"]: {
		dateEnding?: GraphQLTypes["timestamp"],
	dateStarted?: GraphQLTypes["timestamp"],
	events?: GraphQLTypes["vectric_subscription_events_arr_rel_insert_input"],
	orderItem?: GraphQLTypes["vectric_organization_order_items_obj_rel_insert_input"],
	orderItemId?: number,
	status?: string,
	subscriptionContractId?: number,
	subscriptionId?: string
};
	/** input type for inserting object relation for remote table "vectric.subscription_contracts" */
["vectric_subscription_contracts_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_subscription_contracts_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_subscription_contracts_on_conflict"]
};
	/** on conflict condition type for table "vectric.subscription_contracts" */
["vectric_subscription_contracts_on_conflict"]: {
		constraint: GraphQLTypes["vectric_subscription_contracts_constraint"],
	update_columns: Array<GraphQLTypes["vectric_subscription_contracts_update_column"]>,
	where?: GraphQLTypes["vectric_subscription_contracts_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.subscription_contracts". */
["vectric_subscription_contracts_order_by"]: {
		dateEnding?: GraphQLTypes["order_by"],
	dateStarted?: GraphQLTypes["order_by"],
	events_aggregate?: GraphQLTypes["vectric_subscription_events_aggregate_order_by"],
	orderItem?: GraphQLTypes["vectric_organization_order_items_order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"],
	subscriptionContractId?: GraphQLTypes["order_by"],
	subscriptionId?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_subscription_contracts */
["vectric_subscription_contracts_pk_columns_input"]: {
		subscriptionContractId: number
};
	/** input type for updating data in table "vectric.subscription_contracts" */
["vectric_subscription_contracts_set_input"]: {
		dateEnding?: GraphQLTypes["timestamp"],
	dateStarted?: GraphQLTypes["timestamp"],
	orderItemId?: number,
	status?: string,
	subscriptionContractId?: number,
	subscriptionId?: string
};
	/** order by aggregate values of table "vectric.subscription_events" */
["vectric_subscription_events_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_subscription_events_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_subscription_events_max_order_by"],
	min?: GraphQLTypes["vectric_subscription_events_min_order_by"],
	stddev?: GraphQLTypes["vectric_subscription_events_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_subscription_events_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_subscription_events_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_subscription_events_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_subscription_events_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_subscription_events_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_subscription_events_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.subscription_events" */
["vectric_subscription_events_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_subscription_events_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_subscription_events_on_conflict"]
};
	/** order by avg() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_avg_order_by"]: {
		eventId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	subscriptionContractId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.subscription_events". All fields are combined with a logical 'AND'. */
["vectric_subscription_events_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_subscription_events_bool_exp"]>,
	_not?: GraphQLTypes["vectric_subscription_events_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_subscription_events_bool_exp"]>,
	actionTaken?: GraphQLTypes["String_comparison_exp"],
	dateCreated?: GraphQLTypes["timestamp_comparison_exp"],
	dateProcessed?: GraphQLTypes["timestamp_comparison_exp"],
	eventId?: GraphQLTypes["Int_comparison_exp"],
	eventType?: GraphQLTypes["String_comparison_exp"],
	fastspringInternalOrderId?: GraphQLTypes["String_comparison_exp"],
	fastspringOrderReference?: GraphQLTypes["String_comparison_exp"],
	fastspringSubscriptionId?: GraphQLTypes["String_comparison_exp"],
	orderItemId?: GraphQLTypes["Int_comparison_exp"],
	subscriptionContractId?: GraphQLTypes["Int_comparison_exp"],
	subscriptionDateStarted?: GraphQLTypes["timestamp_comparison_exp"],
	subscriptionDeactivationDate?: GraphQLTypes["timestamp_comparison_exp"],
	subscriptionNextRebillDate?: GraphQLTypes["timestamp_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.subscription_events" */
["vectric_subscription_events_inc_input"]: {
		eventId?: number,
	orderItemId?: number,
	subscriptionContractId?: number
};
	/** input type for inserting data into table "vectric.subscription_events" */
["vectric_subscription_events_insert_input"]: {
		actionTaken?: string,
	dateCreated?: GraphQLTypes["timestamp"],
	dateProcessed?: GraphQLTypes["timestamp"],
	eventId?: number,
	eventType?: string,
	fastspringInternalOrderId?: string,
	fastspringOrderReference?: string,
	fastspringSubscriptionId?: string,
	orderItemId?: number,
	subscriptionContractId?: number,
	subscriptionDateStarted?: GraphQLTypes["timestamp"],
	subscriptionDeactivationDate?: GraphQLTypes["timestamp"],
	subscriptionNextRebillDate?: GraphQLTypes["timestamp"]
};
	/** order by max() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_max_order_by"]: {
		actionTaken?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	dateProcessed?: GraphQLTypes["order_by"],
	eventId?: GraphQLTypes["order_by"],
	eventType?: GraphQLTypes["order_by"],
	fastspringInternalOrderId?: GraphQLTypes["order_by"],
	fastspringOrderReference?: GraphQLTypes["order_by"],
	fastspringSubscriptionId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	subscriptionContractId?: GraphQLTypes["order_by"],
	subscriptionDateStarted?: GraphQLTypes["order_by"],
	subscriptionDeactivationDate?: GraphQLTypes["order_by"],
	subscriptionNextRebillDate?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_min_order_by"]: {
		actionTaken?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	dateProcessed?: GraphQLTypes["order_by"],
	eventId?: GraphQLTypes["order_by"],
	eventType?: GraphQLTypes["order_by"],
	fastspringInternalOrderId?: GraphQLTypes["order_by"],
	fastspringOrderReference?: GraphQLTypes["order_by"],
	fastspringSubscriptionId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	subscriptionContractId?: GraphQLTypes["order_by"],
	subscriptionDateStarted?: GraphQLTypes["order_by"],
	subscriptionDeactivationDate?: GraphQLTypes["order_by"],
	subscriptionNextRebillDate?: GraphQLTypes["order_by"]
};
	/** on conflict condition type for table "vectric.subscription_events" */
["vectric_subscription_events_on_conflict"]: {
		constraint: GraphQLTypes["vectric_subscription_events_constraint"],
	update_columns: Array<GraphQLTypes["vectric_subscription_events_update_column"]>,
	where?: GraphQLTypes["vectric_subscription_events_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.subscription_events". */
["vectric_subscription_events_order_by"]: {
		actionTaken?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	dateProcessed?: GraphQLTypes["order_by"],
	eventId?: GraphQLTypes["order_by"],
	eventType?: GraphQLTypes["order_by"],
	fastspringInternalOrderId?: GraphQLTypes["order_by"],
	fastspringOrderReference?: GraphQLTypes["order_by"],
	fastspringSubscriptionId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	subscriptionContractId?: GraphQLTypes["order_by"],
	subscriptionDateStarted?: GraphQLTypes["order_by"],
	subscriptionDeactivationDate?: GraphQLTypes["order_by"],
	subscriptionNextRebillDate?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_subscription_events */
["vectric_subscription_events_pk_columns_input"]: {
		eventId: number
};
	/** input type for updating data in table "vectric.subscription_events" */
["vectric_subscription_events_set_input"]: {
		actionTaken?: string,
	dateCreated?: GraphQLTypes["timestamp"],
	dateProcessed?: GraphQLTypes["timestamp"],
	eventId?: number,
	eventType?: string,
	fastspringInternalOrderId?: string,
	fastspringOrderReference?: string,
	fastspringSubscriptionId?: string,
	orderItemId?: number,
	subscriptionContractId?: number,
	subscriptionDateStarted?: GraphQLTypes["timestamp"],
	subscriptionDeactivationDate?: GraphQLTypes["timestamp"],
	subscriptionNextRebillDate?: GraphQLTypes["timestamp"]
};
	/** order by stddev() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_stddev_order_by"]: {
		eventId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	subscriptionContractId?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_stddev_pop_order_by"]: {
		eventId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	subscriptionContractId?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_stddev_samp_order_by"]: {
		eventId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	subscriptionContractId?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_sum_order_by"]: {
		eventId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	subscriptionContractId?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_var_pop_order_by"]: {
		eventId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	subscriptionContractId?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_var_samp_order_by"]: {
		eventId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	subscriptionContractId?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.subscription_events" */
["vectric_subscription_events_variance_order_by"]: {
		eventId?: GraphQLTypes["order_by"],
	orderItemId?: GraphQLTypes["order_by"],
	subscriptionContractId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.toolpath_saver_token". All fields are combined with a logical 'AND'. */
["vectric_toolpath_saver_token_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_toolpath_saver_token_bool_exp"]>,
	_not?: GraphQLTypes["vectric_toolpath_saver_token_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_toolpath_saver_token_bool_exp"]>,
	customer?: GraphQLTypes["vectric_sales_customers_bool_exp"],
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	dateExpired?: GraphQLTypes["timestamptz_comparison_exp"],
	dateGenerated?: GraphQLTypes["timestamptz_comparison_exp"],
	product?: GraphQLTypes["vectric_products_products_bool_exp"],
	productId?: GraphQLTypes["bigint_comparison_exp"],
	token?: GraphQLTypes["String_comparison_exp"],
	toolpathSaverTokenId?: GraphQLTypes["bigint_comparison_exp"],
	used?: GraphQLTypes["Int_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_inc_input"]: {
		customerId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"],
	toolpathSaverTokenId?: GraphQLTypes["bigint"],
	used?: number
};
	/** input type for inserting data into table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_insert_input"]: {
		customer?: GraphQLTypes["vectric_sales_customers_obj_rel_insert_input"],
	customerId?: GraphQLTypes["bigint"],
	dateExpired?: GraphQLTypes["timestamptz"],
	dateGenerated?: GraphQLTypes["timestamptz"],
	product?: GraphQLTypes["vectric_products_products_obj_rel_insert_input"],
	productId?: GraphQLTypes["bigint"],
	token?: string,
	toolpathSaverTokenId?: GraphQLTypes["bigint"],
	used?: number
};
	/** on conflict condition type for table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_on_conflict"]: {
		constraint: GraphQLTypes["vectric_toolpath_saver_token_constraint"],
	update_columns: Array<GraphQLTypes["vectric_toolpath_saver_token_update_column"]>,
	where?: GraphQLTypes["vectric_toolpath_saver_token_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.toolpath_saver_token". */
["vectric_toolpath_saver_token_order_by"]: {
		customer?: GraphQLTypes["vectric_sales_customers_order_by"],
	customerId?: GraphQLTypes["order_by"],
	dateExpired?: GraphQLTypes["order_by"],
	dateGenerated?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["vectric_products_products_order_by"],
	productId?: GraphQLTypes["order_by"],
	token?: GraphQLTypes["order_by"],
	toolpathSaverTokenId?: GraphQLTypes["order_by"],
	used?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_toolpath_saver_token */
["vectric_toolpath_saver_token_pk_columns_input"]: {
		toolpathSaverTokenId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.toolpath_saver_token" */
["vectric_toolpath_saver_token_set_input"]: {
		customerId?: GraphQLTypes["bigint"],
	dateExpired?: GraphQLTypes["timestamptz"],
	dateGenerated?: GraphQLTypes["timestamptz"],
	productId?: GraphQLTypes["bigint"],
	token?: string,
	toolpathSaverTokenId?: GraphQLTypes["bigint"],
	used?: number
};
	/** Boolean expression to filter rows from the table "vectric.trial_order". All fields are combined with a logical 'AND'. */
["vectric_trial_order_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_trial_order_bool_exp"]>,
	_not?: GraphQLTypes["vectric_trial_order_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_trial_order_bool_exp"]>,
	customer?: GraphQLTypes["vectric_sales_customers_bool_exp"],
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	endDate?: GraphQLTypes["timestamptz_comparison_exp"],
	orderId?: GraphQLTypes["bigint_comparison_exp"],
	product?: GraphQLTypes["vectric_products_products_bool_exp"],
	productId?: GraphQLTypes["bigint_comparison_exp"],
	startDate?: GraphQLTypes["timestamptz_comparison_exp"],
	valid?: GraphQLTypes["Boolean_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.trial_order" */
["vectric_trial_order_inc_input"]: {
		customerId?: GraphQLTypes["bigint"],
	orderId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.trial_order" */
["vectric_trial_order_insert_input"]: {
		customer?: GraphQLTypes["vectric_sales_customers_obj_rel_insert_input"],
	customerId?: GraphQLTypes["bigint"],
	endDate?: GraphQLTypes["timestamptz"],
	orderId?: GraphQLTypes["bigint"],
	product?: GraphQLTypes["vectric_products_products_obj_rel_insert_input"],
	productId?: GraphQLTypes["bigint"],
	startDate?: GraphQLTypes["timestamptz"],
	valid?: boolean
};
	/** on conflict condition type for table "vectric.trial_order" */
["vectric_trial_order_on_conflict"]: {
		constraint: GraphQLTypes["vectric_trial_order_constraint"],
	update_columns: Array<GraphQLTypes["vectric_trial_order_update_column"]>,
	where?: GraphQLTypes["vectric_trial_order_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.trial_order". */
["vectric_trial_order_order_by"]: {
		customer?: GraphQLTypes["vectric_sales_customers_order_by"],
	customerId?: GraphQLTypes["order_by"],
	endDate?: GraphQLTypes["order_by"],
	orderId?: GraphQLTypes["order_by"],
	product?: GraphQLTypes["vectric_products_products_order_by"],
	productId?: GraphQLTypes["order_by"],
	startDate?: GraphQLTypes["order_by"],
	valid?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_trial_order */
["vectric_trial_order_pk_columns_input"]: {
		orderId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.trial_order" */
["vectric_trial_order_set_input"]: {
		customerId?: GraphQLTypes["bigint"],
	endDate?: GraphQLTypes["timestamptz"],
	orderId?: GraphQLTypes["bigint"],
	productId?: GraphQLTypes["bigint"],
	startDate?: GraphQLTypes["timestamptz"],
	valid?: boolean
};
	/** Boolean expression to filter rows from the table "vectric.update_requests". All fields are combined with a logical 'AND'. */
["vectric_update_requests_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_update_requests_bool_exp"]>,
	_not?: GraphQLTypes["vectric_update_requests_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_update_requests_bool_exp"]>,
	dateAccessed?: GraphQLTypes["timestamptz_comparison_exp"],
	ipAddress?: GraphQLTypes["String_comparison_exp"],
	majorVersion?: GraphQLTypes["bigint_comparison_exp"],
	minorVersionOOX?: GraphQLTypes["bigint_comparison_exp"],
	minorVersionOXO?: GraphQLTypes["bigint_comparison_exp"],
	minorVersionXOO?: GraphQLTypes["bigint_comparison_exp"],
	osMajorVersion?: GraphQLTypes["bigint_comparison_exp"],
	osMinorVersion?: GraphQLTypes["bigint_comparison_exp"],
	productName?: GraphQLTypes["String_comparison_exp"],
	requestId?: GraphQLTypes["bigint_comparison_exp"],
	wProcessorArch?: GraphQLTypes["bigint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.update_requests" */
["vectric_update_requests_inc_input"]: {
		majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	osMajorVersion?: GraphQLTypes["bigint"],
	osMinorVersion?: GraphQLTypes["bigint"],
	requestId?: GraphQLTypes["bigint"],
	wProcessorArch?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.update_requests" */
["vectric_update_requests_insert_input"]: {
		dateAccessed?: GraphQLTypes["timestamptz"],
	ipAddress?: string,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	osMajorVersion?: GraphQLTypes["bigint"],
	osMinorVersion?: GraphQLTypes["bigint"],
	productName?: string,
	requestId?: GraphQLTypes["bigint"],
	wProcessorArch?: GraphQLTypes["bigint"]
};
	/** on conflict condition type for table "vectric.update_requests" */
["vectric_update_requests_on_conflict"]: {
		constraint: GraphQLTypes["vectric_update_requests_constraint"],
	update_columns: Array<GraphQLTypes["vectric_update_requests_update_column"]>,
	where?: GraphQLTypes["vectric_update_requests_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.update_requests". */
["vectric_update_requests_order_by"]: {
		dateAccessed?: GraphQLTypes["order_by"],
	ipAddress?: GraphQLTypes["order_by"],
	majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	osMajorVersion?: GraphQLTypes["order_by"],
	osMinorVersion?: GraphQLTypes["order_by"],
	productName?: GraphQLTypes["order_by"],
	requestId?: GraphQLTypes["order_by"],
	wProcessorArch?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_update_requests */
["vectric_update_requests_pk_columns_input"]: {
		requestId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.update_requests" */
["vectric_update_requests_set_input"]: {
		dateAccessed?: GraphQLTypes["timestamptz"],
	ipAddress?: string,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	osMajorVersion?: GraphQLTypes["bigint"],
	osMinorVersion?: GraphQLTypes["bigint"],
	productName?: string,
	requestId?: GraphQLTypes["bigint"],
	wProcessorArch?: GraphQLTypes["bigint"]
};
	/** order by aggregate values of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_upgrade_tokens_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_upgrade_tokens_max_order_by"],
	min?: GraphQLTypes["vectric_upgrade_tokens_min_order_by"],
	stddev?: GraphQLTypes["vectric_upgrade_tokens_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_upgrade_tokens_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_upgrade_tokens_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_upgrade_tokens_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_upgrade_tokens_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_upgrade_tokens_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_upgrade_tokens_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_upgrade_tokens_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_upgrade_tokens_on_conflict"]
};
	/** order by avg() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_avg_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	upgradeEligibilityId?: GraphQLTypes["order_by"],
	upgradedToOrderItemProduct?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.upgrade_tokens". All fields are combined with a logical 'AND'. */
["vectric_upgrade_tokens_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_upgrade_tokens_bool_exp"]>,
	_not?: GraphQLTypes["vectric_upgrade_tokens_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_upgrade_tokens_bool_exp"]>,
	customerId?: GraphQLTypes["bigint_comparison_exp"],
	dateCreated?: GraphQLTypes["timestamptz_comparison_exp"],
	dateUsed?: GraphQLTypes["timestamptz_comparison_exp"],
	fromProduct?: GraphQLTypes["vectric_sales_salesitem_products_bool_exp"],
	orderItemProductId?: GraphQLTypes["bigint_comparison_exp"],
	toProduct?: GraphQLTypes["vectric_products_upgrade_eligibility_bool_exp"],
	token?: GraphQLTypes["String_comparison_exp"],
	upgradeEligibilityId?: GraphQLTypes["bigint_comparison_exp"],
	upgradedToOrderItemProduct?: GraphQLTypes["bigint_comparison_exp"],
	used?: GraphQLTypes["Boolean_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_inc_input"]: {
		customerId?: GraphQLTypes["bigint"],
	orderItemProductId?: GraphQLTypes["bigint"],
	upgradeEligibilityId?: GraphQLTypes["bigint"],
	upgradedToOrderItemProduct?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_insert_input"]: {
		customerId?: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateUsed?: GraphQLTypes["timestamptz"],
	fromProduct?: GraphQLTypes["vectric_sales_salesitem_products_obj_rel_insert_input"],
	orderItemProductId?: GraphQLTypes["bigint"],
	toProduct?: GraphQLTypes["vectric_products_upgrade_eligibility_obj_rel_insert_input"],
	token?: string,
	upgradeEligibilityId?: GraphQLTypes["bigint"],
	upgradedToOrderItemProduct?: GraphQLTypes["bigint"],
	used?: boolean
};
	/** order by max() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_max_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	dateUsed?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	token?: GraphQLTypes["order_by"],
	upgradeEligibilityId?: GraphQLTypes["order_by"],
	upgradedToOrderItemProduct?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_min_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	dateUsed?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	token?: GraphQLTypes["order_by"],
	upgradeEligibilityId?: GraphQLTypes["order_by"],
	upgradedToOrderItemProduct?: GraphQLTypes["order_by"]
};
	/** on conflict condition type for table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_on_conflict"]: {
		constraint: GraphQLTypes["vectric_upgrade_tokens_constraint"],
	update_columns: Array<GraphQLTypes["vectric_upgrade_tokens_update_column"]>,
	where?: GraphQLTypes["vectric_upgrade_tokens_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.upgrade_tokens". */
["vectric_upgrade_tokens_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	dateCreated?: GraphQLTypes["order_by"],
	dateUsed?: GraphQLTypes["order_by"],
	fromProduct?: GraphQLTypes["vectric_sales_salesitem_products_order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	toProduct?: GraphQLTypes["vectric_products_upgrade_eligibility_order_by"],
	token?: GraphQLTypes["order_by"],
	upgradeEligibilityId?: GraphQLTypes["order_by"],
	upgradedToOrderItemProduct?: GraphQLTypes["order_by"],
	used?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_upgrade_tokens */
["vectric_upgrade_tokens_pk_columns_input"]: {
		token: string
};
	/** input type for updating data in table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_set_input"]: {
		customerId?: GraphQLTypes["bigint"],
	dateCreated?: GraphQLTypes["timestamptz"],
	dateUsed?: GraphQLTypes["timestamptz"],
	orderItemProductId?: GraphQLTypes["bigint"],
	token?: string,
	upgradeEligibilityId?: GraphQLTypes["bigint"],
	upgradedToOrderItemProduct?: GraphQLTypes["bigint"],
	used?: boolean
};
	/** order by stddev() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_stddev_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	upgradeEligibilityId?: GraphQLTypes["order_by"],
	upgradedToOrderItemProduct?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_stddev_pop_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	upgradeEligibilityId?: GraphQLTypes["order_by"],
	upgradedToOrderItemProduct?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_stddev_samp_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	upgradeEligibilityId?: GraphQLTypes["order_by"],
	upgradedToOrderItemProduct?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_sum_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	upgradeEligibilityId?: GraphQLTypes["order_by"],
	upgradedToOrderItemProduct?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_var_pop_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	upgradeEligibilityId?: GraphQLTypes["order_by"],
	upgradedToOrderItemProduct?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_var_samp_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	upgradeEligibilityId?: GraphQLTypes["order_by"],
	upgradedToOrderItemProduct?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.upgrade_tokens" */
["vectric_upgrade_tokens_variance_order_by"]: {
		customerId?: GraphQLTypes["order_by"],
	orderItemProductId?: GraphQLTypes["order_by"],
	upgradeEligibilityId?: GraphQLTypes["order_by"],
	upgradedToOrderItemProduct?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.upgrades_feature". All fields are combined with a logical 'AND'. */
["vectric_upgrades_feature_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_upgrades_feature_bool_exp"]>,
	_not?: GraphQLTypes["vectric_upgrades_feature_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_upgrades_feature_bool_exp"]>,
	enabled?: GraphQLTypes["Boolean_comparison_exp"],
	extendedDescription?: GraphQLTypes["String_comparison_exp"],
	featureId?: GraphQLTypes["String_comparison_exp"],
	title?: GraphQLTypes["String_comparison_exp"],
	upgradeProductTypeFeatures?: GraphQLTypes["vectric_upgrades_product_type_feature_bool_exp"],
	upgradeVersionFeatures?: GraphQLTypes["vectric_upgrades_version_feature_bool_exp"]
};
	/** input type for inserting data into table "vectric.upgrades_feature" */
["vectric_upgrades_feature_insert_input"]: {
		enabled?: boolean,
	extendedDescription?: string,
	featureId?: string,
	title?: string,
	upgradeProductTypeFeatures?: GraphQLTypes["vectric_upgrades_product_type_feature_arr_rel_insert_input"],
	upgradeVersionFeatures?: GraphQLTypes["vectric_upgrades_version_feature_arr_rel_insert_input"]
};
	/** input type for inserting object relation for remote table "vectric.upgrades_feature" */
["vectric_upgrades_feature_obj_rel_insert_input"]: {
		data: GraphQLTypes["vectric_upgrades_feature_insert_input"],
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_upgrades_feature_on_conflict"]
};
	/** on conflict condition type for table "vectric.upgrades_feature" */
["vectric_upgrades_feature_on_conflict"]: {
		constraint: GraphQLTypes["vectric_upgrades_feature_constraint"],
	update_columns: Array<GraphQLTypes["vectric_upgrades_feature_update_column"]>,
	where?: GraphQLTypes["vectric_upgrades_feature_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.upgrades_feature". */
["vectric_upgrades_feature_order_by"]: {
		enabled?: GraphQLTypes["order_by"],
	extendedDescription?: GraphQLTypes["order_by"],
	featureId?: GraphQLTypes["order_by"],
	title?: GraphQLTypes["order_by"],
	upgradeProductTypeFeatures_aggregate?: GraphQLTypes["vectric_upgrades_product_type_feature_aggregate_order_by"],
	upgradeVersionFeatures_aggregate?: GraphQLTypes["vectric_upgrades_version_feature_aggregate_order_by"]
};
	/** primary key columns input for table: vectric_upgrades_feature */
["vectric_upgrades_feature_pk_columns_input"]: {
		featureId: string
};
	/** input type for updating data in table "vectric.upgrades_feature" */
["vectric_upgrades_feature_set_input"]: {
		enabled?: boolean,
	extendedDescription?: string,
	featureId?: string,
	title?: string
};
	/** order by aggregate values of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_upgrades_product_type_feature_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_upgrades_product_type_feature_max_order_by"],
	min?: GraphQLTypes["vectric_upgrades_product_type_feature_min_order_by"],
	stddev?: GraphQLTypes["vectric_upgrades_product_type_feature_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_upgrades_product_type_feature_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_upgrades_product_type_feature_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_upgrades_product_type_feature_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_upgrades_product_type_feature_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_upgrades_product_type_feature_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_upgrades_product_type_feature_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_upgrades_product_type_feature_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_upgrades_product_type_feature_on_conflict"]
};
	/** order by avg() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_avg_order_by"]: {
		fromProductType?: GraphQLTypes["order_by"],
	ranking?: GraphQLTypes["order_by"],
	toProductType?: GraphQLTypes["order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.upgrades_product_type_feature". All fields are combined with a logical 'AND'. */
["vectric_upgrades_product_type_feature_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_upgrades_product_type_feature_bool_exp"]>,
	_not?: GraphQLTypes["vectric_upgrades_product_type_feature_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_upgrades_product_type_feature_bool_exp"]>,
	feature?: GraphQLTypes["String_comparison_exp"],
	fromProductType?: GraphQLTypes["bigint_comparison_exp"],
	fromProductTypeObject?: GraphQLTypes["vectric_products_producttype_bool_exp"],
	ranking?: GraphQLTypes["bigint_comparison_exp"],
	toProductType?: GraphQLTypes["bigint_comparison_exp"],
	toProductTypeObject?: GraphQLTypes["vectric_products_producttype_bool_exp"],
	upgradeFeatureObject?: GraphQLTypes["vectric_upgrades_feature_bool_exp"],
	upgradeId?: GraphQLTypes["bigint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_inc_input"]: {
		fromProductType?: GraphQLTypes["bigint"],
	ranking?: GraphQLTypes["bigint"],
	toProductType?: GraphQLTypes["bigint"],
	upgradeId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_insert_input"]: {
		feature?: string,
	fromProductType?: GraphQLTypes["bigint"],
	fromProductTypeObject?: GraphQLTypes["vectric_products_producttype_obj_rel_insert_input"],
	ranking?: GraphQLTypes["bigint"],
	toProductType?: GraphQLTypes["bigint"],
	toProductTypeObject?: GraphQLTypes["vectric_products_producttype_obj_rel_insert_input"],
	upgradeFeatureObject?: GraphQLTypes["vectric_upgrades_feature_obj_rel_insert_input"],
	upgradeId?: GraphQLTypes["bigint"]
};
	/** order by max() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_max_order_by"]: {
		feature?: GraphQLTypes["order_by"],
	fromProductType?: GraphQLTypes["order_by"],
	ranking?: GraphQLTypes["order_by"],
	toProductType?: GraphQLTypes["order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_min_order_by"]: {
		feature?: GraphQLTypes["order_by"],
	fromProductType?: GraphQLTypes["order_by"],
	ranking?: GraphQLTypes["order_by"],
	toProductType?: GraphQLTypes["order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** on conflict condition type for table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_on_conflict"]: {
		constraint: GraphQLTypes["vectric_upgrades_product_type_feature_constraint"],
	update_columns: Array<GraphQLTypes["vectric_upgrades_product_type_feature_update_column"]>,
	where?: GraphQLTypes["vectric_upgrades_product_type_feature_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.upgrades_product_type_feature". */
["vectric_upgrades_product_type_feature_order_by"]: {
		feature?: GraphQLTypes["order_by"],
	fromProductType?: GraphQLTypes["order_by"],
	fromProductTypeObject?: GraphQLTypes["vectric_products_producttype_order_by"],
	ranking?: GraphQLTypes["order_by"],
	toProductType?: GraphQLTypes["order_by"],
	toProductTypeObject?: GraphQLTypes["vectric_products_producttype_order_by"],
	upgradeFeatureObject?: GraphQLTypes["vectric_upgrades_feature_order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_upgrades_product_type_feature */
["vectric_upgrades_product_type_feature_pk_columns_input"]: {
		upgradeId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_set_input"]: {
		feature?: string,
	fromProductType?: GraphQLTypes["bigint"],
	ranking?: GraphQLTypes["bigint"],
	toProductType?: GraphQLTypes["bigint"],
	upgradeId?: GraphQLTypes["bigint"]
};
	/** order by stddev() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_stddev_order_by"]: {
		fromProductType?: GraphQLTypes["order_by"],
	ranking?: GraphQLTypes["order_by"],
	toProductType?: GraphQLTypes["order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_stddev_pop_order_by"]: {
		fromProductType?: GraphQLTypes["order_by"],
	ranking?: GraphQLTypes["order_by"],
	toProductType?: GraphQLTypes["order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_stddev_samp_order_by"]: {
		fromProductType?: GraphQLTypes["order_by"],
	ranking?: GraphQLTypes["order_by"],
	toProductType?: GraphQLTypes["order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_sum_order_by"]: {
		fromProductType?: GraphQLTypes["order_by"],
	ranking?: GraphQLTypes["order_by"],
	toProductType?: GraphQLTypes["order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_var_pop_order_by"]: {
		fromProductType?: GraphQLTypes["order_by"],
	ranking?: GraphQLTypes["order_by"],
	toProductType?: GraphQLTypes["order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_var_samp_order_by"]: {
		fromProductType?: GraphQLTypes["order_by"],
	ranking?: GraphQLTypes["order_by"],
	toProductType?: GraphQLTypes["order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.upgrades_product_type_feature" */
["vectric_upgrades_product_type_feature_variance_order_by"]: {
		fromProductType?: GraphQLTypes["order_by"],
	ranking?: GraphQLTypes["order_by"],
	toProductType?: GraphQLTypes["order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** order by aggregate values of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_aggregate_order_by"]: {
		avg?: GraphQLTypes["vectric_upgrades_version_feature_avg_order_by"],
	count?: GraphQLTypes["order_by"],
	max?: GraphQLTypes["vectric_upgrades_version_feature_max_order_by"],
	min?: GraphQLTypes["vectric_upgrades_version_feature_min_order_by"],
	stddev?: GraphQLTypes["vectric_upgrades_version_feature_stddev_order_by"],
	stddev_pop?: GraphQLTypes["vectric_upgrades_version_feature_stddev_pop_order_by"],
	stddev_samp?: GraphQLTypes["vectric_upgrades_version_feature_stddev_samp_order_by"],
	sum?: GraphQLTypes["vectric_upgrades_version_feature_sum_order_by"],
	var_pop?: GraphQLTypes["vectric_upgrades_version_feature_var_pop_order_by"],
	var_samp?: GraphQLTypes["vectric_upgrades_version_feature_var_samp_order_by"],
	variance?: GraphQLTypes["vectric_upgrades_version_feature_variance_order_by"]
};
	/** input type for inserting array relation for remote table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["vectric_upgrades_version_feature_insert_input"]>,
	/** on conflict condition */
	on_conflict?: GraphQLTypes["vectric_upgrades_version_feature_on_conflict"]
};
	/** order by avg() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_avg_order_by"]: {
		majorVersion?: GraphQLTypes["order_by"],
	minorVersion?: GraphQLTypes["order_by"],
	productType?: GraphQLTypes["order_by"],
	ranking?: GraphQLTypes["order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.upgrades_version_feature". All fields are combined with a logical 'AND'. */
["vectric_upgrades_version_feature_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_upgrades_version_feature_bool_exp"]>,
	_not?: GraphQLTypes["vectric_upgrades_version_feature_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_upgrades_version_feature_bool_exp"]>,
	feature?: GraphQLTypes["String_comparison_exp"],
	majorVersion?: GraphQLTypes["bigint_comparison_exp"],
	minorVersion?: GraphQLTypes["bigint_comparison_exp"],
	productType?: GraphQLTypes["bigint_comparison_exp"],
	productTypeObject?: GraphQLTypes["vectric_products_producttype_bool_exp"],
	ranking?: GraphQLTypes["bigint_comparison_exp"],
	upgradeFeatureObject?: GraphQLTypes["vectric_upgrades_feature_bool_exp"],
	upgradeId?: GraphQLTypes["bigint_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_inc_input"]: {
		majorVersion?: GraphQLTypes["bigint"],
	minorVersion?: GraphQLTypes["bigint"],
	productType?: GraphQLTypes["bigint"],
	ranking?: GraphQLTypes["bigint"],
	upgradeId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_insert_input"]: {
		feature?: string,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersion?: GraphQLTypes["bigint"],
	productType?: GraphQLTypes["bigint"],
	productTypeObject?: GraphQLTypes["vectric_products_producttype_obj_rel_insert_input"],
	ranking?: GraphQLTypes["bigint"],
	upgradeFeatureObject?: GraphQLTypes["vectric_upgrades_feature_obj_rel_insert_input"],
	upgradeId?: GraphQLTypes["bigint"]
};
	/** order by max() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_max_order_by"]: {
		feature?: GraphQLTypes["order_by"],
	majorVersion?: GraphQLTypes["order_by"],
	minorVersion?: GraphQLTypes["order_by"],
	productType?: GraphQLTypes["order_by"],
	ranking?: GraphQLTypes["order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** order by min() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_min_order_by"]: {
		feature?: GraphQLTypes["order_by"],
	majorVersion?: GraphQLTypes["order_by"],
	minorVersion?: GraphQLTypes["order_by"],
	productType?: GraphQLTypes["order_by"],
	ranking?: GraphQLTypes["order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** on conflict condition type for table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_on_conflict"]: {
		constraint: GraphQLTypes["vectric_upgrades_version_feature_constraint"],
	update_columns: Array<GraphQLTypes["vectric_upgrades_version_feature_update_column"]>,
	where?: GraphQLTypes["vectric_upgrades_version_feature_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.upgrades_version_feature". */
["vectric_upgrades_version_feature_order_by"]: {
		feature?: GraphQLTypes["order_by"],
	majorVersion?: GraphQLTypes["order_by"],
	minorVersion?: GraphQLTypes["order_by"],
	productType?: GraphQLTypes["order_by"],
	productTypeObject?: GraphQLTypes["vectric_products_producttype_order_by"],
	ranking?: GraphQLTypes["order_by"],
	upgradeFeatureObject?: GraphQLTypes["vectric_upgrades_feature_order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_upgrades_version_feature */
["vectric_upgrades_version_feature_pk_columns_input"]: {
		upgradeId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_set_input"]: {
		feature?: string,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersion?: GraphQLTypes["bigint"],
	productType?: GraphQLTypes["bigint"],
	ranking?: GraphQLTypes["bigint"],
	upgradeId?: GraphQLTypes["bigint"]
};
	/** order by stddev() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_stddev_order_by"]: {
		majorVersion?: GraphQLTypes["order_by"],
	minorVersion?: GraphQLTypes["order_by"],
	productType?: GraphQLTypes["order_by"],
	ranking?: GraphQLTypes["order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** order by stddev_pop() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_stddev_pop_order_by"]: {
		majorVersion?: GraphQLTypes["order_by"],
	minorVersion?: GraphQLTypes["order_by"],
	productType?: GraphQLTypes["order_by"],
	ranking?: GraphQLTypes["order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** order by stddev_samp() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_stddev_samp_order_by"]: {
		majorVersion?: GraphQLTypes["order_by"],
	minorVersion?: GraphQLTypes["order_by"],
	productType?: GraphQLTypes["order_by"],
	ranking?: GraphQLTypes["order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** order by sum() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_sum_order_by"]: {
		majorVersion?: GraphQLTypes["order_by"],
	minorVersion?: GraphQLTypes["order_by"],
	productType?: GraphQLTypes["order_by"],
	ranking?: GraphQLTypes["order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** order by var_pop() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_var_pop_order_by"]: {
		majorVersion?: GraphQLTypes["order_by"],
	minorVersion?: GraphQLTypes["order_by"],
	productType?: GraphQLTypes["order_by"],
	ranking?: GraphQLTypes["order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** order by var_samp() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_var_samp_order_by"]: {
		majorVersion?: GraphQLTypes["order_by"],
	minorVersion?: GraphQLTypes["order_by"],
	productType?: GraphQLTypes["order_by"],
	ranking?: GraphQLTypes["order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** order by variance() on columns of table "vectric.upgrades_version_feature" */
["vectric_upgrades_version_feature_variance_order_by"]: {
		majorVersion?: GraphQLTypes["order_by"],
	minorVersion?: GraphQLTypes["order_by"],
	productType?: GraphQLTypes["order_by"],
	ranking?: GraphQLTypes["order_by"],
	upgradeId?: GraphQLTypes["order_by"]
};
	/** Boolean expression to filter rows from the table "vectric.usergroup_2019_attendees". All fields are combined with a logical 'AND'. */
["vectric_usergroup_2019_attendees_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_usergroup_2019_attendees_bool_exp"]>,
	_not?: GraphQLTypes["vectric_usergroup_2019_attendees_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_usergroup_2019_attendees_bool_exp"]>,
	attendeeid?: GraphQLTypes["bigint_comparison_exp"],
	bringingsample?: GraphQLTypes["Boolean_comparison_exp"],
	company?: GraphQLTypes["String_comparison_exp"],
	customerid?: GraphQLTypes["bigint_comparison_exp"],
	diet?: GraphQLTypes["String_comparison_exp"],
	email?: GraphQLTypes["String_comparison_exp"],
	fastspringreference?: GraphQLTypes["String_comparison_exp"],
	firstname?: GraphQLTypes["String_comparison_exp"],
	forumname?: GraphQLTypes["String_comparison_exp"],
	lastname?: GraphQLTypes["String_comparison_exp"],
	notes?: GraphQLTypes["String_comparison_exp"],
	productid?: GraphQLTypes["bigint_comparison_exp"],
	purchasedate?: GraphQLTypes["timestamptz_comparison_exp"],
	reference?: GraphQLTypes["String_comparison_exp"],
	state?: GraphQLTypes["String_comparison_exp"],
	status?: GraphQLTypes["String_comparison_exp"],
	tshirtsize?: GraphQLTypes["String_comparison_exp"],
	uk?: GraphQLTypes["Boolean_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_inc_input"]: {
		attendeeid?: GraphQLTypes["bigint"],
	customerid?: GraphQLTypes["bigint"],
	productid?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_insert_input"]: {
		attendeeid?: GraphQLTypes["bigint"],
	bringingsample?: boolean,
	company?: string,
	customerid?: GraphQLTypes["bigint"],
	diet?: string,
	email?: string,
	fastspringreference?: string,
	firstname?: string,
	forumname?: string,
	lastname?: string,
	notes?: string,
	productid?: GraphQLTypes["bigint"],
	purchasedate?: GraphQLTypes["timestamptz"],
	reference?: string,
	state?: string,
	status?: string,
	tshirtsize?: string,
	uk?: boolean
};
	/** on conflict condition type for table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_on_conflict"]: {
		constraint: GraphQLTypes["vectric_usergroup_2019_attendees_constraint"],
	update_columns: Array<GraphQLTypes["vectric_usergroup_2019_attendees_update_column"]>,
	where?: GraphQLTypes["vectric_usergroup_2019_attendees_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.usergroup_2019_attendees". */
["vectric_usergroup_2019_attendees_order_by"]: {
		attendeeid?: GraphQLTypes["order_by"],
	bringingsample?: GraphQLTypes["order_by"],
	company?: GraphQLTypes["order_by"],
	customerid?: GraphQLTypes["order_by"],
	diet?: GraphQLTypes["order_by"],
	email?: GraphQLTypes["order_by"],
	fastspringreference?: GraphQLTypes["order_by"],
	firstname?: GraphQLTypes["order_by"],
	forumname?: GraphQLTypes["order_by"],
	lastname?: GraphQLTypes["order_by"],
	notes?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"],
	purchasedate?: GraphQLTypes["order_by"],
	reference?: GraphQLTypes["order_by"],
	state?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"],
	tshirtsize?: GraphQLTypes["order_by"],
	uk?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_usergroup_2019_attendees */
["vectric_usergroup_2019_attendees_pk_columns_input"]: {
		attendeeid: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.usergroup_2019_attendees" */
["vectric_usergroup_2019_attendees_set_input"]: {
		attendeeid?: GraphQLTypes["bigint"],
	bringingsample?: boolean,
	company?: string,
	customerid?: GraphQLTypes["bigint"],
	diet?: string,
	email?: string,
	fastspringreference?: string,
	firstname?: string,
	forumname?: string,
	lastname?: string,
	notes?: string,
	productid?: GraphQLTypes["bigint"],
	purchasedate?: GraphQLTypes["timestamptz"],
	reference?: string,
	state?: string,
	status?: string,
	tshirtsize?: string,
	uk?: boolean
};
	/** Boolean expression to filter rows from the table "vectric.usergroup_2019_waitlist". All fields are combined with a logical 'AND'. */
["vectric_usergroup_2019_waitlist_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_usergroup_2019_waitlist_bool_exp"]>,
	_not?: GraphQLTypes["vectric_usergroup_2019_waitlist_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_usergroup_2019_waitlist_bool_exp"]>,
	attendeeid?: GraphQLTypes["bigint_comparison_exp"],
	customerid?: GraphQLTypes["bigint_comparison_exp"],
	desiredquantity?: GraphQLTypes["bigint_comparison_exp"],
	email?: GraphQLTypes["String_comparison_exp"],
	invitationdate?: GraphQLTypes["timestamptz_comparison_exp"],
	productid?: GraphQLTypes["bigint_comparison_exp"],
	reference?: GraphQLTypes["String_comparison_exp"],
	status?: GraphQLTypes["String_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_inc_input"]: {
		attendeeid?: GraphQLTypes["bigint"],
	customerid?: GraphQLTypes["bigint"],
	desiredquantity?: GraphQLTypes["bigint"],
	productid?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_insert_input"]: {
		attendeeid?: GraphQLTypes["bigint"],
	customerid?: GraphQLTypes["bigint"],
	desiredquantity?: GraphQLTypes["bigint"],
	email?: string,
	invitationdate?: GraphQLTypes["timestamptz"],
	productid?: GraphQLTypes["bigint"],
	reference?: string,
	status?: string
};
	/** on conflict condition type for table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_on_conflict"]: {
		constraint: GraphQLTypes["vectric_usergroup_2019_waitlist_constraint"],
	update_columns: Array<GraphQLTypes["vectric_usergroup_2019_waitlist_update_column"]>,
	where?: GraphQLTypes["vectric_usergroup_2019_waitlist_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.usergroup_2019_waitlist". */
["vectric_usergroup_2019_waitlist_order_by"]: {
		attendeeid?: GraphQLTypes["order_by"],
	customerid?: GraphQLTypes["order_by"],
	desiredquantity?: GraphQLTypes["order_by"],
	email?: GraphQLTypes["order_by"],
	invitationdate?: GraphQLTypes["order_by"],
	productid?: GraphQLTypes["order_by"],
	reference?: GraphQLTypes["order_by"],
	status?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_usergroup_2019_waitlist */
["vectric_usergroup_2019_waitlist_pk_columns_input"]: {
		attendeeid: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.usergroup_2019_waitlist" */
["vectric_usergroup_2019_waitlist_set_input"]: {
		attendeeid?: GraphQLTypes["bigint"],
	customerid?: GraphQLTypes["bigint"],
	desiredquantity?: GraphQLTypes["bigint"],
	email?: string,
	invitationdate?: GraphQLTypes["timestamptz"],
	productid?: GraphQLTypes["bigint"],
	reference?: string,
	status?: string
};
	/** Boolean expression to filter rows from the table "vectric.version_code". All fields are combined with a logical 'AND'. */
["vectric_version_code_bool_exp"]: {
		_and?: Array<GraphQLTypes["vectric_version_code_bool_exp"]>,
	_not?: GraphQLTypes["vectric_version_code_bool_exp"],
	_or?: Array<GraphQLTypes["vectric_version_code_bool_exp"]>,
	displayVersion?: GraphQLTypes["String_comparison_exp"],
	latest?: GraphQLTypes["Boolean_comparison_exp"],
	majorVersion?: GraphQLTypes["bigint_comparison_exp"],
	minorVersionOOX?: GraphQLTypes["bigint_comparison_exp"],
	minorVersionOXO?: GraphQLTypes["bigint_comparison_exp"],
	minorVersionXOO?: GraphQLTypes["bigint_comparison_exp"],
	notifying?: GraphQLTypes["Boolean_comparison_exp"],
	patchUrl?: GraphQLTypes["String_comparison_exp"],
	releaseDate?: GraphQLTypes["date_comparison_exp"],
	url?: GraphQLTypes["String_comparison_exp"],
	versionCodeId?: GraphQLTypes["bigint_comparison_exp"],
	visible?: GraphQLTypes["Boolean_comparison_exp"]
};
	/** input type for incrementing numeric columns in table "vectric.version_code" */
["vectric_version_code_inc_input"]: {
		majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	versionCodeId?: GraphQLTypes["bigint"]
};
	/** input type for inserting data into table "vectric.version_code" */
["vectric_version_code_insert_input"]: {
		displayVersion?: string,
	latest?: boolean,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	notifying?: boolean,
	patchUrl?: string,
	releaseDate?: GraphQLTypes["date"],
	url?: string,
	versionCodeId?: GraphQLTypes["bigint"],
	visible?: boolean
};
	/** on conflict condition type for table "vectric.version_code" */
["vectric_version_code_on_conflict"]: {
		constraint: GraphQLTypes["vectric_version_code_constraint"],
	update_columns: Array<GraphQLTypes["vectric_version_code_update_column"]>,
	where?: GraphQLTypes["vectric_version_code_bool_exp"]
};
	/** Ordering options when selecting data from "vectric.version_code". */
["vectric_version_code_order_by"]: {
		displayVersion?: GraphQLTypes["order_by"],
	latest?: GraphQLTypes["order_by"],
	majorVersion?: GraphQLTypes["order_by"],
	minorVersionOOX?: GraphQLTypes["order_by"],
	minorVersionOXO?: GraphQLTypes["order_by"],
	minorVersionXOO?: GraphQLTypes["order_by"],
	notifying?: GraphQLTypes["order_by"],
	patchUrl?: GraphQLTypes["order_by"],
	releaseDate?: GraphQLTypes["order_by"],
	url?: GraphQLTypes["order_by"],
	versionCodeId?: GraphQLTypes["order_by"],
	visible?: GraphQLTypes["order_by"]
};
	/** primary key columns input for table: vectric_version_code */
["vectric_version_code_pk_columns_input"]: {
		versionCodeId: GraphQLTypes["bigint"]
};
	/** input type for updating data in table "vectric.version_code" */
["vectric_version_code_set_input"]: {
		displayVersion?: string,
	latest?: boolean,
	majorVersion?: GraphQLTypes["bigint"],
	minorVersionOOX?: GraphQLTypes["bigint"],
	minorVersionOXO?: GraphQLTypes["bigint"],
	minorVersionXOO?: GraphQLTypes["bigint"],
	notifying?: boolean,
	patchUrl?: string,
	releaseDate?: GraphQLTypes["date"],
	url?: string,
	versionCodeId?: GraphQLTypes["bigint"],
	visible?: boolean
}
    }
/** column ordering options */
export const enum order_by {
	asc = "asc",
	asc_nulls_first = "asc_nulls_first",
	asc_nulls_last = "asc_nulls_last",
	desc = "desc",
	desc_nulls_first = "desc_nulls_first",
	desc_nulls_last = "desc_nulls_last"
}
/** select columns of table "vectric.active_memberships" */
export const enum vectric_active_memberships_select_column {
	customerId = "customerId",
	isAdmin = "isAdmin",
	membershipId = "membershipId",
	organizationId = "organizationId",
	role = "role"
}
/** select columns of table "vectric.active_upgrades" */
export const enum vectric_active_upgrades_select_column {
	eligibility_id = "eligibility_id",
	fastspring_id = "fastspring_id",
	from_product_id = "from_product_id",
	from_product_name = "from_product_name",
	price = "price",
	summary = "summary",
	to_product_id = "to_product_id",
	to_product_name = "to_product_name"
}
/** select columns of table "vectric.allocatable_bundles" */
export const enum vectric_allocatable_bundles_select_column {
	bundleId = "bundleId",
	partnerId = "partnerId",
	product = "product",
	productDisplayName = "productDisplayName",
	typeDisplayName = "typeDisplayName"
}
/** select columns of table "vectric.allocatable_licence_count" */
export const enum vectric_allocatable_licence_count_select_column {
	availableCount = "availableCount",
	oemPartnerId = "oemPartnerId",
	productId = "productId"
}
/** select columns of table "vectric.allocated_bundles" */
export const enum vectric_allocated_bundles_select_column {
	allocatedby = "allocatedby",
	allocationbatch = "allocationbatch",
	allocationtype = "allocationtype",
	bundleId = "bundleId",
	dateAllocated = "dateAllocated",
	dateCreated = "dateCreated",
	dateOriginallyRegistered = "dateOriginallyRegistered",
	notes = "notes",
	partnerId = "partnerId",
	product = "product",
	productDisplayName = "productDisplayName",
	typeDisplayName = "typeDisplayName"
}
/** unique or primary key constraints on table "vectric.allocation_summary" */
export const enum vectric_allocation_summary_constraint {
	allocation_summary_pkey = "allocation_summary_pkey",
	allocation_summary_type_batch_id_key = "allocation_summary_type_batch_id_key"
}
/** unique or primary key constraints on table "vectric.allocation_summary_file_type" */
export const enum vectric_allocation_summary_file_type_constraint {
	allocation_summary_file_type_pkey = "allocation_summary_file_type_pkey"
}
export const enum vectric_allocation_summary_file_type_enum {
	CSV = "CSV",
	TXT = "TXT"
}
/** select columns of table "vectric.allocation_summary_file_type" */
export const enum vectric_allocation_summary_file_type_select_column {
	type = "type"
}
/** update columns of table "vectric.allocation_summary_file_type" */
export const enum vectric_allocation_summary_file_type_update_column {
	type = "type"
}
/** select columns of table "vectric.allocation_summary" */
export const enum vectric_allocation_summary_select_column {
	batchId = "batchId",
	bucket = "bucket",
	id = "id",
	location = "location",
	partnerId = "partnerId",
	signedUrl = "signedUrl",
	type = "type"
}
/** update columns of table "vectric.allocation_summary" */
export const enum vectric_allocation_summary_update_column {
	batchId = "batchId",
	bucket = "bucket",
	id = "id",
	location = "location",
	partnerId = "partnerId",
	signedUrl = "signedUrl",
	type = "type"
}
/** unique or primary key constraints on table "vectric.continents" */
export const enum vectric_continents_constraint {
	idx_109232_primary = "idx_109232_primary"
}
/** select columns of table "vectric.continents" */
export const enum vectric_continents_select_column {
	code = "code",
	name = "name"
}
/** update columns of table "vectric.continents" */
export const enum vectric_continents_update_column {
	code = "code",
	name = "name"
}
/** unique or primary key constraints on table "vectric.countries" */
export const enum vectric_countries_constraint {
	idx_109237_idx_code = "idx_109237_idx_code",
	idx_109237_primary = "idx_109237_primary"
}
/** select columns of table "vectric.countries" */
export const enum vectric_countries_select_column {
	code = "code",
	continentcode = "continentcode",
	countryid = "countryid",
	displayorder = "displayorder",
	fullname = "fullname",
	iso3 = "iso3",
	name = "name",
	number = "number"
}
/** update columns of table "vectric.countries" */
export const enum vectric_countries_update_column {
	code = "code",
	continentcode = "continentcode",
	countryid = "countryid",
	displayorder = "displayorder",
	fullname = "fullname",
	iso3 = "iso3",
	name = "name",
	number = "number"
}
/** unique or primary key constraints on table "vectric.customer_area" */
export const enum vectric_customer_area_constraint {
	customer_area_bucketname_objectname_key = "customer_area_bucketname_objectname_key",
	idx_109244_customerid = "idx_109244_customerid",
	idx_109244_primary = "idx_109244_primary"
}
/** unique or primary key constraints on table "vectric.customer_area_file" */
export const enum vectric_customer_area_file_constraint {
	customer_area_file_customerareaid_objectname_key = "customer_area_file_customerareaid_objectname_key",
	customer_area_file_customerareaid_productid_filekey_filename_ke = "customer_area_file_customerareaid_productid_filekey_filename_ke",
	idx_109250_primary = "idx_109250_primary"
}
/** select columns of table "vectric.customer_area_file" */
export const enum vectric_customer_area_file_select_column {
	customerAreaFileId = "customerAreaFileId",
	customerAreaId = "customerAreaId",
	dateUploaded = "dateUploaded",
	fileKey = "fileKey",
	fileName = "fileName",
	objectName = "objectName",
	productId = "productId"
}
/** update columns of table "vectric.customer_area_file" */
export const enum vectric_customer_area_file_update_column {
	customerAreaFileId = "customerAreaFileId",
	customerAreaId = "customerAreaId",
	dateUploaded = "dateUploaded",
	fileKey = "fileKey",
	fileName = "fileName",
	objectName = "objectName",
	productId = "productId"
}
/** select columns of table "vectric.customer_area" */
export const enum vectric_customer_area_select_column {
	bucketName = "bucketName",
	customerAreaId = "customerAreaId",
	customerId = "customerId",
	objectName = "objectName"
}
/** update columns of table "vectric.customer_area" */
export const enum vectric_customer_area_update_column {
	bucketName = "bucketName",
	customerAreaId = "customerAreaId",
	customerId = "customerId",
	objectName = "objectName"
}
/** unique or primary key constraints on table "vectric.customer_responses" */
export const enum vectric_customer_responses_constraint {
	idx_109260_primary = "idx_109260_primary"
}
/** select columns of table "vectric.customer_responses" */
export const enum vectric_customer_responses_select_column {
	customerid = "customerid",
	customerresponseid = "customerresponseid",
	othertext = "othertext",
	questionid = "questionid",
	responseid = "responseid"
}
/** update columns of table "vectric.customer_responses" */
export const enum vectric_customer_responses_update_column {
	customerid = "customerid",
	customerresponseid = "customerresponseid",
	othertext = "othertext",
	questionid = "questionid",
	responseid = "responseid"
}
/** select columns of table "vectric.customer_sales" */
export const enum vectric_customer_sales_select_column {
	customerId = "customerId",
	dateCreated = "dateCreated",
	orderDate = "orderDate",
	orderId = "orderId",
	veccode = "veccode"
}
/** unique or primary key constraints on table "vectric.customer_status" */
export const enum vectric_customer_status_constraint {
	idx_109269_primary = "idx_109269_primary"
}
/** select columns of table "vectric.customer_status" */
export const enum vectric_customer_status_select_column {
	status = "status",
	statusId = "statusId"
}
/** update columns of table "vectric.customer_status" */
export const enum vectric_customer_status_update_column {
	status = "status",
	statusId = "statusId"
}
/** unique or primary key constraints on table "vectric.customer_zd_uploads" */
export const enum vectric_customer_zd_uploads_constraint {
	idx_109281_primary = "idx_109281_primary"
}
/** select columns of table "vectric.customer_zd_uploads" */
export const enum vectric_customer_zd_uploads_select_column {
	createdBy = "createdBy",
	customerId = "customerId",
	dateCreated = "dateCreated",
	dateUploaded = "dateUploaded",
	location = "location",
	objectName = "objectName",
	shorturlhash = "shorturlhash",
	ticketId = "ticketId",
	zdUploadId = "zdUploadId"
}
/** update columns of table "vectric.customer_zd_uploads" */
export const enum vectric_customer_zd_uploads_update_column {
	createdBy = "createdBy",
	customerId = "customerId",
	dateCreated = "dateCreated",
	dateUploaded = "dateUploaded",
	location = "location",
	objectName = "objectName",
	shorturlhash = "shorturlhash",
	ticketId = "ticketId",
	zdUploadId = "zdUploadId"
}
/** unique or primary key constraints on table "vectric.download" */
export const enum vectric_download_constraint {
	idx_109322_primary = "idx_109322_primary"
}
/** unique or primary key constraints on table "vectric.download_record" */
export const enum vectric_download_record_constraint {
	idx_109334_primary = "idx_109334_primary"
}
/** select columns of table "vectric.download_record" */
export const enum vectric_download_record_select_column {
	customerId = "customerId",
	downloadDate = "downloadDate",
	downloadId = "downloadId",
	id = "id"
}
/** update columns of table "vectric.download_record" */
export const enum vectric_download_record_update_column {
	customerId = "customerId",
	downloadDate = "downloadDate",
	downloadId = "downloadId",
	id = "id"
}
/** select columns of table "vectric.download" */
export const enum vectric_download_select_column {
	bucketName = "bucketName",
	description = "description",
	downloadId = "downloadId",
	downloadSize = "downloadSize",
	groupId = "groupId",
	name = "name",
	objectName = "objectName",
	previewImageUrl = "previewImageUrl",
	uploadDate = "uploadDate"
}
/** update columns of table "vectric.download" */
export const enum vectric_download_update_column {
	bucketName = "bucketName",
	description = "description",
	downloadId = "downloadId",
	downloadSize = "downloadSize",
	groupId = "groupId",
	name = "name",
	objectName = "objectName",
	previewImageUrl = "previewImageUrl",
	uploadDate = "uploadDate"
}
/** unique or primary key constraints on table "vectric.enhancement_tokens" */
export const enum vectric_enhancement_tokens_constraint {
	idx_109359_primary = "idx_109359_primary"
}
/** select columns of table "vectric.enhancement_tokens" */
export const enum vectric_enhancement_tokens_select_column {
	customerId = "customerId",
	dateCreated = "dateCreated",
	dateUsed = "dateUsed",
	enhancementEligibilityId = "enhancementEligibilityId",
	enhancementOrderItemProductId = "enhancementOrderItemProductId",
	orderItemProductId = "orderItemProductId",
	token = "token",
	used = "used"
}
/** update columns of table "vectric.enhancement_tokens" */
export const enum vectric_enhancement_tokens_update_column {
	customerId = "customerId",
	dateCreated = "dateCreated",
	dateUsed = "dateUsed",
	enhancementEligibilityId = "enhancementEligibilityId",
	enhancementOrderItemProductId = "enhancementOrderItemProductId",
	orderItemProductId = "orderItemProductId",
	token = "token",
	used = "used"
}
/** select columns of table "vectric.entitled_product_version_code_view" */
export const enum vectric_entitled_product_version_code_view_select_column {
	displayVersion = "displayVersion",
	entitled_product_id = "entitled_product_id",
	latest = "latest",
	majorVersion = "majorVersion",
	minorVersionOOX = "minorVersionOOX",
	minorVersionOXO = "minorVersionOXO",
	minorVersionXOO = "minorVersionXOO",
	notifying = "notifying",
	patchUrl = "patchUrl",
	releaseDate = "releaseDate",
	url = "url",
	versionCodeId = "versionCodeId",
	visible = "visible"
}
/** unique or primary key constraints on table "vectric.entitled_products" */
export const enum vectric_entitled_products_constraint {
	entitled_products_pkey = "entitled_products_pkey",
	entitled_products_product_name_key = "entitled_products_product_name_key"
}
/** select columns of table "vectric.entitled_products" */
export const enum vectric_entitled_products_select_column {
	enabled = "enabled",
	latestVersionId = "latestVersionId",
	licenceType = "licenceType",
	productId = "productId",
	productName = "productName",
	productTypeId = "productTypeId",
	releaseDate = "releaseDate",
	requiresLicence = "requiresLicence"
}
/** update columns of table "vectric.entitled_products" */
export const enum vectric_entitled_products_update_column {
	enabled = "enabled",
	latestVersionId = "latestVersionId",
	licenceType = "licenceType",
	productId = "productId",
	productName = "productName",
	productTypeId = "productTypeId",
	releaseDate = "releaseDate",
	requiresLicence = "requiresLicence"
}
/** unique or primary key constraints on table "vectric.entitlement_licences" */
export const enum vectric_entitlement_licences_constraint {
	entitlement_licences_pkey = "entitlement_licences_pkey"
}
/** select columns of table "vectric.entitlement_licences" */
export const enum vectric_entitlement_licences_select_column {
	entitlementId = "entitlementId",
	entitlementLicenceId = "entitlementLicenceId",
	licenceCode = "licenceCode",
	licenceIdAsDisplay = "licenceIdAsDisplay",
	licenceType = "licenceType",
	productId = "productId",
	registeredUsername = "registeredUsername"
}
/** update columns of table "vectric.entitlement_licences" */
export const enum vectric_entitlement_licences_update_column {
	entitlementId = "entitlementId",
	entitlementLicenceId = "entitlementLicenceId",
	licenceCode = "licenceCode",
	licenceIdAsDisplay = "licenceIdAsDisplay",
	licenceType = "licenceType",
	productId = "productId",
	registeredUsername = "registeredUsername"
}
/** unique or primary key constraints on table "vectric.entitlements" */
export const enum vectric_entitlements_constraint {
	entitlements_pkey = "entitlements_pkey"
}
/** select columns of table "vectric.entitlements" */
export const enum vectric_entitlements_select_column {
	amendedBy = "amendedBy",
	createdBy = "createdBy",
	dateAmended = "dateAmended",
	dateCreated = "dateCreated",
	entitledProductId = "entitledProductId",
	entitlementId = "entitlementId",
	ownedItemId = "ownedItemId",
	statusId = "statusId"
}
/** update columns of table "vectric.entitlements" */
export const enum vectric_entitlements_update_column {
	amendedBy = "amendedBy",
	createdBy = "createdBy",
	dateAmended = "dateAmended",
	dateCreated = "dateCreated",
	entitledProductId = "entitledProductId",
	entitlementId = "entitlementId",
	ownedItemId = "ownedItemId",
	statusId = "statusId"
}
/** unique or primary key constraints on table "vectric.free_clipart_tokens" */
export const enum vectric_free_clipart_tokens_constraint {
	idx_109428_primary = "idx_109428_primary"
}
/** select columns of table "vectric.free_clipart_tokens" */
export const enum vectric_free_clipart_tokens_select_column {
	clipartToken = "clipartToken",
	completed = "completed",
	customerId = "customerId",
	dateAdded = "dateAdded",
	dateSelected = "dateSelected",
	redeemableTokenOip = "redeemableTokenOip",
	replacementOip = "replacementOip",
	v10Product = "v10Product"
}
/** update columns of table "vectric.free_clipart_tokens" */
export const enum vectric_free_clipart_tokens_update_column {
	clipartToken = "clipartToken",
	completed = "completed",
	customerId = "customerId",
	dateAdded = "dateAdded",
	dateSelected = "dateSelected",
	redeemableTokenOip = "redeemableTokenOip",
	replacementOip = "replacementOip",
	v10Product = "v10Product"
}
/** unique or primary key constraints on table "vectric.freeclipart_category" */
export const enum vectric_freeclipart_category_constraint {
	idx_109411_name = "idx_109411_name",
	idx_109411_primary = "idx_109411_primary"
}
/** select columns of table "vectric.freeclipart_category" */
export const enum vectric_freeclipart_category_select_column {
	categoryId = "categoryId",
	name = "name"
}
/** update columns of table "vectric.freeclipart_category" */
export const enum vectric_freeclipart_category_update_column {
	categoryId = "categoryId",
	name = "name"
}
/** unique or primary key constraints on table "vectric.freeclipart" */
export const enum vectric_freeclipart_constraint {
	idx_109402_accessid = "idx_109402_accessid",
	idx_109402_primary = "idx_109402_primary"
}
/** unique or primary key constraints on table "vectric.freeclipart_download_record" */
export const enum vectric_freeclipart_download_record_constraint {
	idx_109417_primary = "idx_109417_primary"
}
/** select columns of table "vectric.freeclipart_download_record" */
export const enum vectric_freeclipart_download_record_select_column {
	customerId = "customerId",
	downloadDate = "downloadDate",
	downloadId = "downloadId",
	freeClipartResourceId = "freeClipartResourceId",
	ipAddress = "ipAddress"
}
/** update columns of table "vectric.freeclipart_download_record" */
export const enum vectric_freeclipart_download_record_update_column {
	customerId = "customerId",
	downloadDate = "downloadDate",
	downloadId = "downloadId",
	freeClipartResourceId = "freeClipartResourceId",
	ipAddress = "ipAddress"
}
/** select columns of table "vectric.freeclipart" */
export const enum vectric_freeclipart_select_column {
	accessId = "accessId",
	categoryId = "categoryId",
	freeClipartId = "freeClipartId",
	location = "location",
	name = "name",
	objectName = "objectName",
	previewImgUrl = "previewImgUrl"
}
/** update columns of table "vectric.freeclipart" */
export const enum vectric_freeclipart_update_column {
	accessId = "accessId",
	categoryId = "categoryId",
	freeClipartId = "freeClipartId",
	location = "location",
	name = "name",
	objectName = "objectName",
	previewImgUrl = "previewImgUrl"
}
/** select columns of table "vectric.group_info" */
export const enum vectric_group_info_select_column {
	customerid = "customerid",
	group_id = "group_id",
	group_name = "group_name",
	role = "role"
}
/** unique or primary key constraints on table "vectric.group_roles" */
export const enum vectric_group_roles_constraint {
	group_roles_pkey = "group_roles_pkey"
}
/** select columns of table "vectric.group_roles" */
export const enum vectric_group_roles_select_column {
	id = "id",
	role = "role"
}
/** update columns of table "vectric.group_roles" */
export const enum vectric_group_roles_update_column {
	id = "id",
	role = "role"
}
/** unique or primary key constraints on table "vectric.group_user_role" */
export const enum vectric_group_user_role_constraint {
	group_user_role_pkey = "group_user_role_pkey"
}
/** select columns of table "vectric.group_user_role" */
export const enum vectric_group_user_role_select_column {
	customer_id = "customer_id",
	group_id = "group_id",
	role_id = "role_id"
}
/** update columns of table "vectric.group_user_role" */
export const enum vectric_group_user_role_update_column {
	customer_id = "customer_id",
	group_id = "group_id",
	role_id = "role_id"
}
/** unique or primary key constraints on table "vectric.groups" */
export const enum vectric_groups_constraint {
	groups_pkey = "groups_pkey"
}
/** select columns of table "vectric.groups" */
export const enum vectric_groups_select_column {
	created_at = "created_at",
	group_name = "group_name",
	id = "id"
}
/** update columns of table "vectric.groups" */
export const enum vectric_groups_update_column {
	created_at = "created_at",
	group_name = "group_name",
	id = "id"
}
/** unique or primary key constraints on table "vectric.language_codes" */
export const enum vectric_language_codes_constraint {
	idx_109432_primary = "idx_109432_primary"
}
/** select columns of table "vectric.language_codes" */
export const enum vectric_language_codes_select_column {
	name = "name",
	threeLetterCode = "threeLetterCode",
	twoLetterCode = "twoLetterCode"
}
/** update columns of table "vectric.language_codes" */
export const enum vectric_language_codes_update_column {
	name = "name",
	threeLetterCode = "threeLetterCode",
	twoLetterCode = "twoLetterCode"
}
/** unique or primary key constraints on table "vectric.licence_log" */
export const enum vectric_licence_log_constraint {
	idx_109437_primary = "idx_109437_primary"
}
/** select columns of table "vectric.licence_log" */
export const enum vectric_licence_log_select_column {
	batchId = "batchId",
	createdBy = "createdBy",
	dateCreated = "dateCreated",
	licenceCode = "licenceCode",
	licenceId = "licenceId",
	oemLicenceId = "oemLicenceId",
	productName = "productName",
	registeredUsername = "registeredUsername",
	shortUrlHash = "shortUrlHash"
}
/** update columns of table "vectric.licence_log" */
export const enum vectric_licence_log_update_column {
	batchId = "batchId",
	createdBy = "createdBy",
	dateCreated = "dateCreated",
	licenceCode = "licenceCode",
	licenceId = "licenceId",
	oemLicenceId = "oemLicenceId",
	productName = "productName",
	registeredUsername = "registeredUsername",
	shortUrlHash = "shortUrlHash"
}
/** unique or primary key constraints on table "vectric.linkshortener_links" */
export const enum vectric_linkshortener_links_constraint {
	idx_109444_primary = "idx_109444_primary"
}
/** select columns of table "vectric.linkshortener_links" */
export const enum vectric_linkshortener_links_select_column {
	expiryDate = "expiryDate",
	limitDownloads = "limitDownloads",
	longUrl = "longUrl",
	remainingDownloads = "remainingDownloads",
	shortUrlHash = "shortUrlHash"
}
/** update columns of table "vectric.linkshortener_links" */
export const enum vectric_linkshortener_links_update_column {
	expiryDate = "expiryDate",
	limitDownloads = "limitDownloads",
	longUrl = "longUrl",
	remainingDownloads = "remainingDownloads",
	shortUrlHash = "shortUrlHash"
}
/** unique or primary key constraints on table "vectric.makerspace_requests" */
export const enum vectric_makerspace_requests_constraint {
	idx_109453_primary = "idx_109453_primary"
}
/** select columns of table "vectric.makerspace_requests" */
export const enum vectric_makerspace_requests_select_column {
	ipAddress = "ipAddress",
	licenceCode = "licenceCode",
	licenceGenerated = "licenceGenerated",
	makerspaceDiskId = "makerspaceDiskId",
	makerspaceId = "makerspaceId",
	requestDate = "requestDate",
	requestId = "requestId",
	salesItemProductId = "salesItemProductId",
	trialDiskId = "trialDiskId",
	trialLayerUuid = "trialLayerUuid"
}
/** update columns of table "vectric.makerspace_requests" */
export const enum vectric_makerspace_requests_update_column {
	ipAddress = "ipAddress",
	licenceCode = "licenceCode",
	licenceGenerated = "licenceGenerated",
	makerspaceDiskId = "makerspaceDiskId",
	makerspaceId = "makerspaceId",
	requestDate = "requestDate",
	requestId = "requestId",
	salesItemProductId = "salesItemProductId",
	trialDiskId = "trialDiskId",
	trialLayerUuid = "trialLayerUuid"
}
/** unique or primary key constraints on table "vectric.membership_invitation_status" */
export const enum vectric_membership_invitation_status_constraint {
	membership_invitation_status_pkey = "membership_invitation_status_pkey"
}
export const enum vectric_membership_invitation_status_enum {
	ACCEPTED = "ACCEPTED",
	DECLINED = "DECLINED",
	PENDING = "PENDING"
}
/** select columns of table "vectric.membership_invitation_status" */
export const enum vectric_membership_invitation_status_select_column {
	status = "status"
}
/** update columns of table "vectric.membership_invitation_status" */
export const enum vectric_membership_invitation_status_update_column {
	status = "status"
}
/** unique or primary key constraints on table "vectric.membership_invitations" */
export const enum vectric_membership_invitations_constraint {
	memberships_invitations_pkey = "memberships_invitations_pkey"
}
/** select columns of table "vectric.membership_invitations" */
export const enum vectric_membership_invitations_select_column {
	dateInvited = "dateInvited",
	dateProcessed = "dateProcessed",
	email = "email",
	invitationId = "invitationId",
	invitationStatus = "invitationStatus",
	invitedBy = "invitedBy",
	membershipId = "membershipId",
	organizationId = "organizationId",
	token = "token"
}
/** update columns of table "vectric.membership_invitations" */
export const enum vectric_membership_invitations_update_column {
	dateInvited = "dateInvited",
	dateProcessed = "dateProcessed",
	email = "email",
	invitationId = "invitationId",
	invitationStatus = "invitationStatus",
	invitedBy = "invitedBy",
	membershipId = "membershipId",
	organizationId = "organizationId",
	token = "token"
}
/** unique or primary key constraints on table "vectric.membership_roles" */
export const enum vectric_membership_roles_constraint {
	membership_roles_pky = "membership_roles_pky"
}
export const enum vectric_membership_roles_enum {
	ADMIN = "ADMIN",
	USER = "USER"
}
/** select columns of table "vectric.membership_roles" */
export const enum vectric_membership_roles_select_column {
	role = "role"
}
/** update columns of table "vectric.membership_roles" */
export const enum vectric_membership_roles_update_column {
	role = "role"
}
/** unique or primary key constraints on table "vectric.membership_status" */
export const enum vectric_membership_status_constraint {
	membership_status_pkey = "membership_status_pkey"
}
export const enum vectric_membership_status_enum {
	ACTIVE = "ACTIVE",
	DECLINED = "DECLINED",
	DISABLED = "DISABLED",
	PENDING = "PENDING"
}
/** select columns of table "vectric.membership_status" */
export const enum vectric_membership_status_select_column {
	status = "status"
}
/** update columns of table "vectric.membership_status" */
export const enum vectric_membership_status_update_column {
	status = "status"
}
/** unique or primary key constraints on table "vectric.memberships" */
export const enum vectric_memberships_constraint {
	group_users_pkey = "group_users_pkey",
	memberships_organization_id_customer_id_key = "memberships_organization_id_customer_id_key"
}
/** select columns of table "vectric.memberships" */
export const enum vectric_memberships_select_column {
	addedBy = "addedBy",
	amendedBy = "amendedBy",
	customerId = "customerId",
	dateAdded = "dateAdded",
	dateAmended = "dateAmended",
	membershipId = "membershipId",
	organizationId = "organizationId",
	role = "role",
	status = "status"
}
/** update columns of table "vectric.memberships" */
export const enum vectric_memberships_update_column {
	addedBy = "addedBy",
	amendedBy = "amendedBy",
	customerId = "customerId",
	dateAdded = "dateAdded",
	dateAmended = "dateAmended",
	membershipId = "membershipId",
	organizationId = "organizationId",
	role = "role",
	status = "status"
}
/** unique or primary key constraints on table "vectric.oauth_client_details" */
export const enum vectric_oauth_client_details_constraint {
	idx_109463_primary = "idx_109463_primary"
}
/** select columns of table "vectric.oauth_client_details" */
export const enum vectric_oauth_client_details_select_column {
	access_token_validity = "access_token_validity",
	additional_information = "additional_information",
	authorities = "authorities",
	authorized_grant_types = "authorized_grant_types",
	autoapprove = "autoapprove",
	client_id = "client_id",
	client_secret = "client_secret",
	refresh_token_validity = "refresh_token_validity",
	resource_ids = "resource_ids",
	scope = "scope",
	web_server_redirect_uri = "web_server_redirect_uri"
}
/** update columns of table "vectric.oauth_client_details" */
export const enum vectric_oauth_client_details_update_column {
	access_token_validity = "access_token_validity",
	additional_information = "additional_information",
	authorities = "authorities",
	authorized_grant_types = "authorized_grant_types",
	autoapprove = "autoapprove",
	client_id = "client_id",
	client_secret = "client_secret",
	refresh_token_validity = "refresh_token_validity",
	resource_ids = "resource_ids",
	scope = "scope",
	web_server_redirect_uri = "web_server_redirect_uri"
}
/** select columns of table "vectric.oem_allocation_emails" */
export const enum vectric_oem_allocation_emails_select_column {
	bundle_id = "bundle_id",
	date = "date",
	email_to = "email_to",
	oem_customer_id = "oem_customer_id",
	partner_id = "partner_id"
}
/** unique or primary key constraints on table "vectric.oem_detailed_products" */
export const enum vectric_oem_detailed_products_constraint {
	idx_109483_primary = "idx_109483_primary"
}
/** select columns of table "vectric.oem_detailed_products" */
export const enum vectric_oem_detailed_products_select_column {
	id = "id",
	oemProductId = "oemProductId",
	productId = "productId"
}
/** update columns of table "vectric.oem_detailed_products" */
export const enum vectric_oem_detailed_products_update_column {
	id = "id",
	oemProductId = "oemProductId",
	productId = "productId"
}
/** unique or primary key constraints on table "vectric.oem_eval_request" */
export const enum vectric_oem_eval_request_constraint {
	idx_109510_primary = "idx_109510_primary"
}
/** select columns of table "vectric.oem_eval_request" */
export const enum vectric_oem_eval_request_select_column {
	customerId = "customerId",
	dateProcessed = "dateProcessed",
	dateRequested = "dateRequested",
	expired = "expired",
	granted = "granted",
	partnerId = "partnerId",
	processed = "processed",
	processedBy = "processedBy",
	replacedBy = "replacedBy",
	requestId = "requestId",
	requestedBy = "requestedBy",
	vloggerId = "vloggerId"
}
/** update columns of table "vectric.oem_eval_request" */
export const enum vectric_oem_eval_request_update_column {
	customerId = "customerId",
	dateProcessed = "dateProcessed",
	dateRequested = "dateRequested",
	expired = "expired",
	granted = "granted",
	partnerId = "partnerId",
	processed = "processed",
	processedBy = "processedBy",
	replacedBy = "replacedBy",
	requestId = "requestId",
	requestedBy = "requestedBy",
	vloggerId = "vloggerId"
}
/** unique or primary key constraints on table "vectric.oem_fastspring_item_bundle" */
export const enum vectric_oem_fastspring_item_bundle_constraint {
	idx_109525_bundleid_unique = "idx_109525_bundleid_unique",
	idx_109525_primary = "idx_109525_primary"
}
/** select columns of table "vectric.oem_fastspring_item_bundle" */
export const enum vectric_oem_fastspring_item_bundle_select_column {
	bundleId = "bundleId",
	fastspringItemId = "fastspringItemId",
	itemBundleId = "itemBundleId"
}
/** update columns of table "vectric.oem_fastspring_item_bundle" */
export const enum vectric_oem_fastspring_item_bundle_update_column {
	bundleId = "bundleId",
	fastspringItemId = "fastspringItemId",
	itemBundleId = "itemBundleId"
}
/** unique or primary key constraints on table "vectric.oem_fastspring_item" */
export const enum vectric_oem_fastspring_item_constraint {
	idx_109519_primary = "idx_109519_primary"
}
/** select columns of table "vectric.oem_fastspring_item" */
export const enum vectric_oem_fastspring_item_select_column {
	batchId = "batchId",
	discountValue = "discountValue",
	itemId = "itemId",
	oemProductId = "oemProductId",
	orderId = "orderId",
	priceTotal = "priceTotal",
	productName = "productName",
	quantity = "quantity"
}
/** update columns of table "vectric.oem_fastspring_item" */
export const enum vectric_oem_fastspring_item_update_column {
	batchId = "batchId",
	discountValue = "discountValue",
	itemId = "itemId",
	oemProductId = "oemProductId",
	orderId = "orderId",
	priceTotal = "priceTotal",
	productName = "productName",
	quantity = "quantity"
}
/** unique or primary key constraints on table "vectric.oem_fastspring_order" */
export const enum vectric_oem_fastspring_order_constraint {
	idx_109531_orderreference = "idx_109531_orderreference",
	idx_109531_primary = "idx_109531_primary"
}
/** select columns of table "vectric.oem_fastspring_order" */
export const enum vectric_oem_fastspring_order_select_column {
	actionTaken = "actionTaken",
	amendedBy = "amendedBy",
	city = "city",
	createdBy = "createdBy",
	currency = "currency",
	customerId = "customerId",
	dateAmended = "dateAmended",
	dateCreated = "dateCreated",
	dateProcessed = "dateProcessed",
	fastSpringCustomerId = "fastSpringCustomerId",
	language = "language",
	notes = "notes",
	orderId = "orderId",
	orderReference = "orderReference",
	partnerId = "partnerId",
	postalCode = "postalCode",
	processedBy = "processedBy",
	region = "region",
	route = "route",
	subTotal = "subTotal",
	tax = "tax",
	total = "total"
}
/** update columns of table "vectric.oem_fastspring_order" */
export const enum vectric_oem_fastspring_order_update_column {
	actionTaken = "actionTaken",
	amendedBy = "amendedBy",
	city = "city",
	createdBy = "createdBy",
	currency = "currency",
	customerId = "customerId",
	dateAmended = "dateAmended",
	dateCreated = "dateCreated",
	dateProcessed = "dateProcessed",
	fastSpringCustomerId = "fastSpringCustomerId",
	language = "language",
	notes = "notes",
	orderId = "orderId",
	orderReference = "orderReference",
	partnerId = "partnerId",
	postalCode = "postalCode",
	processedBy = "processedBy",
	region = "region",
	route = "route",
	subTotal = "subTotal",
	tax = "tax",
	total = "total"
}
/** unique or primary key constraints on table "vectric.oem_invite_status" */
export const enum vectric_oem_invite_status_constraint {
	idx_109544_primary = "idx_109544_primary"
}
/** select columns of table "vectric.oem_invite_status" */
export const enum vectric_oem_invite_status_select_column {
	status = "status",
	statusId = "statusId"
}
/** update columns of table "vectric.oem_invite_status" */
export const enum vectric_oem_invite_status_update_column {
	status = "status",
	statusId = "statusId"
}
/** unique or primary key constraints on table "vectric.oem_licence_allocation_type" */
export const enum vectric_oem_licence_allocation_type_constraint {
	idx_109549_primary = "idx_109549_primary"
}
/** select columns of table "vectric.oem_licence_allocation_type" */
export const enum vectric_oem_licence_allocation_type_select_column {
	allocationTypeId = "allocationTypeId",
	typeName = "typeName"
}
/** update columns of table "vectric.oem_licence_allocation_type" */
export const enum vectric_oem_licence_allocation_type_update_column {
	allocationTypeId = "allocationTypeId",
	typeName = "typeName"
}
/** unique or primary key constraints on table "vectric.oem_partners" */
export const enum vectric_oem_partners_constraint {
	idx_109555_primary = "idx_109555_primary"
}
/** select columns of table "vectric.oem_partners" */
export const enum vectric_oem_partners_select_column {
	codePrefix = "codePrefix",
	countrycode = "countrycode",
	dateOfLastBatch = "dateOfLastBatch",
	displayName = "displayName",
	inactive = "inactive",
	nextIssue = "nextIssue",
	partnerId = "partnerId"
}
/** update columns of table "vectric.oem_partners" */
export const enum vectric_oem_partners_update_column {
	codePrefix = "codePrefix",
	countrycode = "countrycode",
	dateOfLastBatch = "dateOfLastBatch",
	displayName = "displayName",
	inactive = "inactive",
	nextIssue = "nextIssue",
	partnerId = "partnerId"
}
/** unique or primary key constraints on table "vectric.oem_products" */
export const enum vectric_oem_products_constraint {
	idx_109565_primary = "idx_109565_primary"
}
/** select columns of table "vectric.oem_products" */
export const enum vectric_oem_products_select_column {
	enabled = "enabled",
	oemFastspringId = "oemFastspringId",
	oemProductId = "oemProductId",
	productId = "productId"
}
/** update columns of table "vectric.oem_products" */
export const enum vectric_oem_products_update_column {
	enabled = "enabled",
	oemFastspringId = "oemFastspringId",
	oemProductId = "oemProductId",
	productId = "productId"
}
/** unique or primary key constraints on table "vectric.oem_purchase_options" */
export const enum vectric_oem_purchase_options_constraint {
	idx_109572_oem_purchase_options_partnerid_unique = "idx_109572_oem_purchase_options_partnerid_unique",
	idx_109572_primary = "idx_109572_primary"
}
/** select columns of table "vectric.oem_purchase_options" */
export const enum vectric_oem_purchase_options_select_column {
	emailLicenceDetails = "emailLicenceDetails",
	maxQuantity = "maxQuantity",
	minQuantity = "minQuantity",
	multipleLicences = "multipleLicences",
	optionId = "optionId",
	partnerId = "partnerId"
}
/** update columns of table "vectric.oem_purchase_options" */
export const enum vectric_oem_purchase_options_update_column {
	emailLicenceDetails = "emailLicenceDetails",
	maxQuantity = "maxQuantity",
	minQuantity = "minQuantity",
	multipleLicences = "multipleLicences",
	optionId = "optionId",
	partnerId = "partnerId"
}
/** select columns of table "vectric.oem_staff_admin_ownership" */
export const enum vectric_oem_staff_admin_ownership_select_column {
	admin = "admin",
	adminId = "adminId",
	customerId = "customerId",
	customerName = "customerName",
	dateAccepted = "dateAccepted",
	displayStatus = "displayStatus",
	email = "email",
	partnerId = "partnerId",
	status = "status"
}
/** unique or primary key constraints on table "vectric.oem_staff_customer" */
export const enum vectric_oem_staff_customer_constraint {
	idx_109590_primary = "idx_109590_primary"
}
/** select columns of table "vectric.oem_staff_customer" */
export const enum vectric_oem_staff_customer_select_column {
	admin = "admin",
	customerId = "customerId",
	dataRequested = "dataRequested",
	dateAccepted = "dateAccepted",
	dateUpdated = "dateUpdated",
	partnerId = "partnerId",
	staffId = "staffId",
	status = "status"
}
/** update columns of table "vectric.oem_staff_customer" */
export const enum vectric_oem_staff_customer_update_column {
	admin = "admin",
	customerId = "customerId",
	dataRequested = "dataRequested",
	dateAccepted = "dateAccepted",
	dateUpdated = "dateUpdated",
	partnerId = "partnerId",
	staffId = "staffId",
	status = "status"
}
/** unique or primary key constraints on table "vectric.organization_audit" */
export const enum vectric_organization_audit_constraint {
	organization_audit_pkey = "organization_audit_pkey"
}
/** select columns of table "vectric.organization_audit" */
export const enum vectric_organization_audit_select_column {
	auditDate = "auditDate",
	auditId = "auditId",
	auditPayload = "auditPayload",
	auditType = "auditType",
	author = "author",
	internalChange = "internalChange",
	ipAddress = "ipAddress",
	organizationId = "organizationId"
}
/** update columns of table "vectric.organization_audit" */
export const enum vectric_organization_audit_update_column {
	auditDate = "auditDate",
	auditId = "auditId",
	auditPayload = "auditPayload",
	auditType = "auditType",
	author = "author",
	internalChange = "internalChange",
	ipAddress = "ipAddress",
	organizationId = "organizationId"
}
/** unique or primary key constraints on table "vectric.organization_licence_scope" */
export const enum vectric_organization_licence_scope_constraint {
	organization_licence_scope_pkey = "organization_licence_scope_pkey"
}
export const enum vectric_organization_licence_scope_enum {
	ALL_ORGANIZATION = "ALL_ORGANIZATION",
	SINGLE_USER = "SINGLE_USER"
}
/** select columns of table "vectric.organization_licence_scope" */
export const enum vectric_organization_licence_scope_select_column {
	scope = "scope"
}
/** update columns of table "vectric.organization_licence_scope" */
export const enum vectric_organization_licence_scope_update_column {
	scope = "scope"
}
/** select columns of table "vectric.organization_memberships_admin_access" */
export const enum vectric_organization_memberships_admin_access_select_column {
	addedBy = "addedBy",
	amendedBy = "amendedBy",
	customerEmail = "customerEmail",
	customerId = "customerId",
	customerName = "customerName",
	customerRegisteredUsername = "customerRegisteredUsername",
	dateAdded = "dateAdded",
	dateAmended = "dateAmended",
	membershipId = "membershipId",
	membershipRole = "membershipRole",
	membershipStatus = "membershipStatus",
	organizationCountryId = "organizationCountryId",
	organizationCountryName = "organizationCountryName",
	organizationId = "organizationId",
	organizationName = "organizationName",
	organizationType = "organizationType"
}
/** unique or primary key constraints on table "vectric.organization_order_items" */
export const enum vectric_organization_order_items_constraint {
	organization_order_items_pkey = "organization_order_items_pkey"
}
/** select columns of table "vectric.organization_order_items" */
export const enum vectric_organization_order_items_select_column {
	orderId = "orderId",
	orderItemId = "orderItemId",
	saleableProductId = "saleableProductId",
	subscription = "subscription"
}
/** update columns of table "vectric.organization_order_items" */
export const enum vectric_organization_order_items_update_column {
	orderId = "orderId",
	orderItemId = "orderItemId",
	saleableProductId = "saleableProductId",
	subscription = "subscription"
}
/** unique or primary key constraints on table "vectric.organization_orders" */
export const enum vectric_organization_orders_constraint {
	organization_orders_pkey = "organization_orders_pkey"
}
/** select columns of table "vectric.organization_orders" */
export const enum vectric_organization_orders_select_column {
	amendedBy = "amendedBy",
	createdBy = "createdBy",
	dateAmended = "dateAmended",
	dateCreated = "dateCreated",
	externalReference = "externalReference",
	notes = "notes",
	orderDate = "orderDate",
	orderId = "orderId",
	organizationId = "organizationId",
	purchaserId = "purchaserId"
}
/** update columns of table "vectric.organization_orders" */
export const enum vectric_organization_orders_update_column {
	amendedBy = "amendedBy",
	createdBy = "createdBy",
	dateAmended = "dateAmended",
	dateCreated = "dateCreated",
	externalReference = "externalReference",
	notes = "notes",
	orderDate = "orderDate",
	orderId = "orderId",
	organizationId = "organizationId",
	purchaserId = "purchaserId"
}
/** unique or primary key constraints on table "vectric.organization_types" */
export const enum vectric_organization_types_constraint {
	organization_types_pkey = "organization_types_pkey"
}
export const enum vectric_organization_types_enum {
	MAKERSPACE = "MAKERSPACE",
	ORGANIZATION = "ORGANIZATION",
	SCHOOL = "SCHOOL"
}
/** select columns of table "vectric.organization_types" */
export const enum vectric_organization_types_select_column {
	type = "type"
}
/** update columns of table "vectric.organization_types" */
export const enum vectric_organization_types_update_column {
	type = "type"
}
/** unique or primary key constraints on table "vectric.organizations" */
export const enum vectric_organizations_constraint {
	organizations_organization_name_key = "organizations_organization_name_key",
	organizations_organization_uuid_key = "organizations_organization_uuid_key",
	organizations_pkey = "organizations_pkey"
}
/** select columns of table "vectric.organizations" */
export const enum vectric_organizations_select_column {
	active = "active",
	amendedBy = "amendedBy",
	countryId = "countryId",
	createdBy = "createdBy",
	dateAmended = "dateAmended",
	dateCreated = "dateCreated",
	internalNotes = "internalNotes",
	organizationId = "organizationId",
	organizationName = "organizationName",
	organizationUUID = "organizationUUID",
	type = "type"
}
/** update columns of table "vectric.organizations" */
export const enum vectric_organizations_update_column {
	active = "active",
	amendedBy = "amendedBy",
	countryId = "countryId",
	createdBy = "createdBy",
	dateAmended = "dateAmended",
	dateCreated = "dateCreated",
	internalNotes = "internalNotes",
	organizationId = "organizationId",
	organizationName = "organizationName",
	organizationUUID = "organizationUUID",
	type = "type"
}
/** unique or primary key constraints on table "vectric.owned_item_assignments" */
export const enum vectric_owned_item_assignments_constraint {
	owned_item_assignments_pkey = "owned_item_assignments_pkey"
}
/** select columns of table "vectric.owned_item_assignments" */
export const enum vectric_owned_item_assignments_select_column {
	assignedBy = "assignedBy",
	assignedTo = "assignedTo",
	assignment_id = "assignment_id",
	dateAssigned = "dateAssigned",
	ownedItemId = "ownedItemId"
}
/** update columns of table "vectric.owned_item_assignments" */
export const enum vectric_owned_item_assignments_update_column {
	assignedBy = "assignedBy",
	assignedTo = "assignedTo",
	assignment_id = "assignment_id",
	dateAssigned = "dateAssigned",
	ownedItemId = "ownedItemId"
}
/** unique or primary key constraints on table "vectric.owned_items" */
export const enum vectric_owned_items_constraint {
	oowned_items_pkey = "oowned_items_pkey"
}
/** select columns of table "vectric.owned_items" */
export const enum vectric_owned_items_select_column {
	amendedBy = "amendedBy",
	createdBy = "createdBy",
	customerId = "customerId",
	dateAmended = "dateAmended",
	dateCreated = "dateCreated",
	notes = "notes",
	orderItemId = "orderItemId",
	organizationId = "organizationId",
	ownedItemId = "ownedItemId",
	ownedProductId = "ownedProductId",
	record_date = "record_date",
	scope = "scope",
	status = "status",
	subscription = "subscription"
}
/** update columns of table "vectric.owned_items" */
export const enum vectric_owned_items_update_column {
	amendedBy = "amendedBy",
	createdBy = "createdBy",
	customerId = "customerId",
	dateAmended = "dateAmended",
	dateCreated = "dateCreated",
	notes = "notes",
	orderItemId = "orderItemId",
	organizationId = "organizationId",
	ownedItemId = "ownedItemId",
	ownedProductId = "ownedProductId",
	record_date = "record_date",
	scope = "scope",
	status = "status",
	subscription = "subscription"
}
/** unique or primary key constraints on table "vectric.owned_products" */
export const enum vectric_owned_products_constraint {
	owned_products_pkey = "owned_products_pkey",
	owned_products_product_name_key = "owned_products_product_name_key"
}
/** select columns of table "vectric.owned_products" */
export const enum vectric_owned_products_select_column {
	enabled = "enabled",
	enhancement = "enhancement",
	productId = "productId",
	productName = "productName",
	productTypeId = "productTypeId",
	subscription = "subscription"
}
/** update columns of table "vectric.owned_products" */
export const enum vectric_owned_products_update_column {
	enabled = "enabled",
	enhancement = "enhancement",
	productId = "productId",
	productName = "productName",
	productTypeId = "productTypeId",
	subscription = "subscription"
}
/** unique or primary key constraints on table "vectric.products_clipartcollection_links" */
export const enum vectric_products_clipartcollection_links_constraint {
	idx_109653_primary = "idx_109653_primary"
}
/** select columns of table "vectric.products_clipartcollection_links" */
export const enum vectric_products_clipartcollection_links_select_column {
	clipartChildId = "clipartChildId",
	clipartCollectionLinkId = "clipartCollectionLinkId",
	clipartParentId = "clipartParentId"
}
/** update columns of table "vectric.products_clipartcollection_links" */
export const enum vectric_products_clipartcollection_links_update_column {
	clipartChildId = "clipartChildId",
	clipartCollectionLinkId = "clipartCollectionLinkId",
	clipartParentId = "clipartParentId"
}
/** unique or primary key constraints on table "vectric.products_enhancement_eligibility" */
export const enum vectric_products_enhancement_eligibility_constraint {
	idx_109662_primary = "idx_109662_primary"
}
/** select columns of table "vectric.products_enhancement_eligibility" */
export const enum vectric_products_enhancement_eligibility_select_column {
	eligibilityId = "eligibilityId",
	fastspringurl = "fastspringurl",
	fromproduct = "fromproduct",
	moreinfolink = "moreinfolink",
	price = "price",
	summary = "summary",
	toproduct = "toproduct",
	visibletocustomers = "visibletocustomers",
	visibletostaff = "visibletostaff"
}
/** update columns of table "vectric.products_enhancement_eligibility" */
export const enum vectric_products_enhancement_eligibility_update_column {
	eligibilityId = "eligibilityId",
	fastspringurl = "fastspringurl",
	fromproduct = "fromproduct",
	moreinfolink = "moreinfolink",
	price = "price",
	summary = "summary",
	toproduct = "toproduct",
	visibletocustomers = "visibletocustomers",
	visibletostaff = "visibletostaff"
}
/** unique or primary key constraints on table "vectric.products_freeclipart" */
export const enum vectric_products_freeclipart_constraint {
	idx_109673_primary = "idx_109673_primary"
}
/** select columns of table "vectric.products_freeclipart" */
export const enum vectric_products_freeclipart_select_column {
	freeClipartId = "freeClipartId",
	productFreeClipartId = "productFreeClipartId",
	productId = "productId"
}
/** update columns of table "vectric.products_freeclipart" */
export const enum vectric_products_freeclipart_update_column {
	freeClipartId = "freeClipartId",
	productFreeClipartId = "productFreeClipartId",
	productId = "productId"
}
/** unique or primary key constraints on table "vectric.products_fulfilments" */
export const enum vectric_products_fulfilments_constraint {
	idx_109679_primary = "idx_109679_primary"
}
/** select columns of table "vectric.products_fulfilments" */
export const enum vectric_products_fulfilments_select_column {
	description = "description",
	downloadSize = "downloadSize",
	fulfilmentId = "fulfilmentId",
	fulfilmentName = "fulfilmentName",
	fulfilmenttypeid = "fulfilmenttypeid",
	location = "location",
	objectName = "objectName"
}
/** update columns of table "vectric.products_fulfilments" */
export const enum vectric_products_fulfilments_update_column {
	description = "description",
	downloadSize = "downloadSize",
	fulfilmentId = "fulfilmentId",
	fulfilmentName = "fulfilmentName",
	fulfilmenttypeid = "fulfilmenttypeid",
	location = "location",
	objectName = "objectName"
}
/** unique or primary key constraints on table "vectric.products_fulfilmenttypes" */
export const enum vectric_products_fulfilmenttypes_constraint {
	idx_109688_primary = "idx_109688_primary"
}
/** select columns of table "vectric.products_fulfilmenttypes" */
export const enum vectric_products_fulfilmenttypes_select_column {
	fulfilmenttypeid = "fulfilmenttypeid",
	typename = "typename"
}
/** update columns of table "vectric.products_fulfilmenttypes" */
export const enum vectric_products_fulfilmenttypes_update_column {
	fulfilmenttypeid = "fulfilmenttypeid",
	typename = "typename"
}
/** unique or primary key constraints on table "vectric.products_product_fulfilments" */
export const enum vectric_products_product_fulfilments_constraint {
	idx_109726_primary = "idx_109726_primary"
}
/** select columns of table "vectric.products_product_fulfilments" */
export const enum vectric_products_product_fulfilments_select_column {
	fulfilmentid = "fulfilmentid",
	productfulfilmentid = "productfulfilmentid",
	productid = "productid"
}
/** update columns of table "vectric.products_product_fulfilments" */
export const enum vectric_products_product_fulfilments_update_column {
	fulfilmentid = "fulfilmentid",
	productfulfilmentid = "productfulfilmentid",
	productid = "productid"
}
/** unique or primary key constraints on table "vectric.products_product_licence_type" */
export const enum vectric_products_product_licence_type_constraint {
	products_product_licence_type_pkey = "products_product_licence_type_pkey"
}
export const enum vectric_products_product_licence_type_enum {
	JSON_V1 = "JSON_V1",
	NONE = "NONE",
	USER_CODE_PAIR = "USER_CODE_PAIR"
}
/** select columns of table "vectric.products_product_licence_type" */
export const enum vectric_products_product_licence_type_select_column {
	type = "type"
}
/** update columns of table "vectric.products_product_licence_type" */
export const enum vectric_products_product_licence_type_update_column {
	type = "type"
}
/** unique or primary key constraints on table "vectric.products_products" */
export const enum vectric_products_products_constraint {
	idx_109708_fastspringid_unique = "idx_109708_fastspringid_unique",
	idx_109708_primary = "idx_109708_primary",
	products_products_productname_key = "products_products_productname_key"
}
/** select columns of table "vectric.products_products" */
export const enum vectric_products_products_select_column {
	enabled = "enabled",
	externalid = "externalid",
	fastspringId = "fastspringId",
	free = "free",
	latestversion = "latestversion",
	licenceType = "licenceType",
	media = "media",
	productID = "productID",
	productName = "productName",
	receivesClipart = "receivesClipart",
	releaseDate = "releaseDate",
	requireslicence = "requireslicence",
	type = "type",
	upgradefromtypeid = "upgradefromtypeid"
}
/** update columns of table "vectric.products_products" */
export const enum vectric_products_products_update_column {
	enabled = "enabled",
	externalid = "externalid",
	fastspringId = "fastspringId",
	free = "free",
	latestversion = "latestversion",
	licenceType = "licenceType",
	media = "media",
	productID = "productID",
	productName = "productName",
	receivesClipart = "receivesClipart",
	releaseDate = "releaseDate",
	requireslicence = "requireslicence",
	type = "type",
	upgradefromtypeid = "upgradefromtypeid"
}
/** unique or primary key constraints on table "vectric.products_producttype" */
export const enum vectric_products_producttype_constraint {
	idx_109720_primary = "idx_109720_primary",
	idx_109720_producttypename = "idx_109720_producttypename"
}
/** select columns of table "vectric.products_producttype" */
export const enum vectric_products_producttype_select_column {
	productTypeId = "productTypeId",
	productTypeName = "productTypeName",
	seq = "seq"
}
/** update columns of table "vectric.products_producttype" */
export const enum vectric_products_producttype_update_column {
	productTypeId = "productTypeId",
	productTypeName = "productTypeName",
	seq = "seq"
}
/** unique or primary key constraints on table "vectric.products_upgrade_eligibility" */
export const enum vectric_products_upgrade_eligibility_constraint {
	idx_109732_primary = "idx_109732_primary"
}
/** select columns of table "vectric.products_upgrade_eligibility" */
export const enum vectric_products_upgrade_eligibility_select_column {
	eligibilityid = "eligibilityid",
	fastspringproductid = "fastspringproductid",
	fastspringurl = "fastspringurl",
	fromtype = "fromtype",
	maxmajorversion = "maxmajorversion",
	minmajorversion = "minmajorversion",
	price = "price",
	summary = "summary",
	toproduct = "toproduct",
	updatelink = "updatelink",
	visibletocustomers = "visibletocustomers",
	visibletostaff = "visibletostaff"
}
/** update columns of table "vectric.products_upgrade_eligibility" */
export const enum vectric_products_upgrade_eligibility_update_column {
	eligibilityid = "eligibilityid",
	fastspringproductid = "fastspringproductid",
	fastspringurl = "fastspringurl",
	fromtype = "fromtype",
	maxmajorversion = "maxmajorversion",
	minmajorversion = "minmajorversion",
	price = "price",
	summary = "summary",
	toproduct = "toproduct",
	updatelink = "updatelink",
	visibletocustomers = "visibletocustomers",
	visibletostaff = "visibletostaff"
}
/** unique or primary key constraints on table "vectric.products_versioncodes" */
export const enum vectric_products_versioncodes_constraint {
	idx_109743_primary = "idx_109743_primary"
}
/** select columns of table "vectric.products_versioncodes" */
export const enum vectric_products_versioncodes_select_column {
	displayVersion = "displayVersion",
	latest = "latest",
	majorVersion = "majorVersion",
	minorVersionOOX = "minorVersionOOX",
	minorVersionOXO = "minorVersionOXO",
	minorVersionXOO = "minorVersionXOO",
	notifying = "notifying",
	patchurl = "patchurl",
	productid = "productid",
	releaseDate = "releaseDate",
	url = "url",
	versioncodeid = "versioncodeid",
	visible = "visible"
}
/** update columns of table "vectric.products_versioncodes" */
export const enum vectric_products_versioncodes_update_column {
	displayVersion = "displayVersion",
	latest = "latest",
	majorVersion = "majorVersion",
	minorVersionOOX = "minorVersionOOX",
	minorVersionOXO = "minorVersionOXO",
	minorVersionXOO = "minorVersionXOO",
	notifying = "notifying",
	patchurl = "patchurl",
	productid = "productid",
	releaseDate = "releaseDate",
	url = "url",
	versioncodeid = "versioncodeid",
	visible = "visible"
}
/** unique or primary key constraints on table "vectric.questions" */
export const enum vectric_questions_constraint {
	idx_109752_primary = "idx_109752_primary"
}
/** select columns of table "vectric.questions" */
export const enum vectric_questions_select_column {
	multipleanswers = "multipleanswers",
	questionid = "questionid",
	questiontext = "questiontext"
}
/** update columns of table "vectric.questions" */
export const enum vectric_questions_update_column {
	multipleanswers = "multipleanswers",
	questionid = "questionid",
	questiontext = "questiontext"
}
/** unique or primary key constraints on table "vectric.responses" */
export const enum vectric_responses_constraint {
	idx_109768_primary = "idx_109768_primary"
}
/** select columns of table "vectric.responses" */
export const enum vectric_responses_select_column {
	questionid = "questionid",
	responseid = "responseid",
	responsetext = "responsetext"
}
/** update columns of table "vectric.responses" */
export const enum vectric_responses_update_column {
	questionid = "questionid",
	responseid = "responseid",
	responsetext = "responsetext"
}
/** unique or primary key constraints on table "vectric.saleable_products" */
export const enum vectric_saleable_products_constraint {
	saleable_products_fastspring_id_key = "saleable_products_fastspring_id_key",
	saleable_products_pkey = "saleable_products_pkey",
	saleable_products_product_name_key = "saleable_products_product_name_key"
}
/** select columns of table "vectric.saleable_products" */
export const enum vectric_saleable_products_select_column {
	enabled = "enabled",
	fastspringId = "fastspringId",
	free = "free",
	media = "media",
	productId = "productId",
	productName = "productName",
	productTypeId = "productTypeId",
	receivesClipart = "receivesClipart",
	subscription = "subscription"
}
/** update columns of table "vectric.saleable_products" */
export const enum vectric_saleable_products_update_column {
	enabled = "enabled",
	fastspringId = "fastspringId",
	free = "free",
	media = "media",
	productId = "productId",
	productName = "productName",
	productTypeId = "productTypeId",
	receivesClipart = "receivesClipart",
	subscription = "subscription"
}
/** unique or primary key constraints on table "vectric.sales_customer_downloads" */
export const enum vectric_sales_customer_downloads_constraint {
	idx_109838_primary = "idx_109838_primary"
}
/** select columns of table "vectric.sales_customer_downloads" */
export const enum vectric_sales_customer_downloads_select_column {
	customerId = "customerId",
	downloadDate = "downloadDate",
	downloadId = "downloadId",
	fulfilmentId = "fulfilmentId",
	ipAddress = "ipAddress"
}
/** update columns of table "vectric.sales_customer_downloads" */
export const enum vectric_sales_customer_downloads_update_column {
	customerId = "customerId",
	downloadDate = "downloadDate",
	downloadId = "downloadId",
	fulfilmentId = "fulfilmentId",
	ipAddress = "ipAddress"
}
/** unique or primary key constraints on table "vectric.sales_customers" */
export const enum vectric_sales_customers_constraint {
	idx_109777_ix_customers_regusername = "idx_109777_ix_customers_regusername",
	idx_109777_primary = "idx_109777_primary",
	idx_109777_sales_customers_regusernameemailaddress = "idx_109777_sales_customers_regusernameemailaddress",
	sales_customers_customeruuid_key = "sales_customers_customeruuid_key"
}
/** select columns of table "vectric.sales_customers" */
export const enum vectric_sales_customers_select_column {
	acceptedTerms = "acceptedTerms",
	amendedby = "amendedby",
	companyName = "companyName",
	countrycode = "countrycode",
	createdby = "createdby",
	customerAddressLine = "customerAddressLine",
	customerId = "customerId",
	customerName = "customerName",
	customerTelephone = "customerTelephone",
	customerType = "customerType",
	customerstatusid = "customerstatusid",
	customeruuid = "customeruuid",
	dateAcceptedTerms = "dateAcceptedTerms",
	dateCreated = "dateCreated",
	dateMarketingConsentUpdated = "dateMarketingConsentUpdated",
	dateUpgradeEmailConsentUpdates = "dateUpgradeEmailConsentUpdates",
	dateamended = "dateamended",
	email = "email",
	language = "language",
	lastLogin = "lastLogin",
	lastipaddress = "lastipaddress",
	location = "location",
	mergedfromcustomerid = "mergedfromcustomerid",
	mergedtocustomerid = "mergedtocustomerid",
	notes = "notes",
	receivingMarketingEmails = "receivingMarketingEmails",
	receivingUpgradeEmails = "receivingUpgradeEmails",
	registeredUsername = "registeredUsername",
	verified = "verified"
}
/** update columns of table "vectric.sales_customers" */
export const enum vectric_sales_customers_update_column {
	acceptedTerms = "acceptedTerms",
	amendedby = "amendedby",
	companyName = "companyName",
	countrycode = "countrycode",
	createdby = "createdby",
	customerAddressLine = "customerAddressLine",
	customerId = "customerId",
	customerName = "customerName",
	customerTelephone = "customerTelephone",
	customerType = "customerType",
	customerstatusid = "customerstatusid",
	customeruuid = "customeruuid",
	dateAcceptedTerms = "dateAcceptedTerms",
	dateCreated = "dateCreated",
	dateMarketingConsentUpdated = "dateMarketingConsentUpdated",
	dateUpgradeEmailConsentUpdates = "dateUpgradeEmailConsentUpdates",
	dateamended = "dateamended",
	email = "email",
	language = "language",
	lastLogin = "lastLogin",
	lastipaddress = "lastipaddress",
	location = "location",
	mergedfromcustomerid = "mergedfromcustomerid",
	mergedtocustomerid = "mergedtocustomerid",
	notes = "notes",
	receivingMarketingEmails = "receivingMarketingEmails",
	receivingUpgradeEmails = "receivingUpgradeEmails",
	registeredUsername = "registeredUsername",
	verified = "verified"
}
/** unique or primary key constraints on table "vectric.sales_customerupdates" */
export const enum vectric_sales_customerupdates_constraint {
	idx_109822_primary = "idx_109822_primary"
}
/** select columns of table "vectric.sales_customerupdates" */
export const enum vectric_sales_customerupdates_select_column {
	changedBy = "changedBy",
	customerId = "customerId",
	customerUpdateId = "customerUpdateId",
	dateChanged = "dateChanged",
	fieldName = "fieldName",
	newValue = "newValue",
	oldValue = "oldValue"
}
/** update columns of table "vectric.sales_customerupdates" */
export const enum vectric_sales_customerupdates_update_column {
	changedBy = "changedBy",
	customerId = "customerId",
	customerUpdateId = "customerUpdateId",
	dateChanged = "dateChanged",
	fieldName = "fieldName",
	newValue = "newValue",
	oldValue = "oldValue"
}
/** unique or primary key constraints on table "vectric.sales_oem_bundles" */
export const enum vectric_sales_oem_bundles_constraint {
	idx_109873_primary = "idx_109873_primary"
}
/** select columns of table "vectric.sales_oem_bundles" */
export const enum vectric_sales_oem_bundles_select_column {
	allocatedBy = "allocatedBy",
	allocationBatch = "allocationBatch",
	allocationTypeId = "allocationTypeId",
	bundleId = "bundleId",
	dateAllocated = "dateAllocated",
	dateCreated = "dateCreated",
	notes = "notes",
	partnerId = "partnerId",
	product = "product",
	productDisplayName = "productDisplayName",
	registrationDate = "registrationDate",
	typeDisplayName = "typeDisplayName"
}
/** update columns of table "vectric.sales_oem_bundles" */
export const enum vectric_sales_oem_bundles_update_column {
	allocatedBy = "allocatedBy",
	allocationBatch = "allocationBatch",
	allocationTypeId = "allocationTypeId",
	bundleId = "bundleId",
	dateAllocated = "dateAllocated",
	dateCreated = "dateCreated",
	notes = "notes",
	partnerId = "partnerId",
	product = "product",
	productDisplayName = "productDisplayName",
	registrationDate = "registrationDate",
	typeDisplayName = "typeDisplayName"
}
/** unique or primary key constraints on table "vectric.sales_oemlicences" */
export const enum vectric_sales_oemlicences_constraint {
	idx_109857_ix_oembundleid_licencecode = "idx_109857_ix_oembundleid_licencecode",
	idx_109857_primary = "idx_109857_primary"
}
/** select columns of table "vectric.sales_oemlicences" */
export const enum vectric_sales_oemlicences_select_column {
	allocatedBy = "allocatedBy",
	allocationTypeId = "allocationTypeId",
	dateAllocated = "dateAllocated",
	dateCreated = "dateCreated",
	disabled = "disabled",
	licenceCode = "licenceCode",
	mediaProvided = "mediaProvided",
	oemBundleId = "oemBundleId",
	oemLicenceId = "oemLicenceId",
	orderItemProductId = "orderItemProductId",
	partnerId = "partnerId",
	productId = "productId",
	productName = "productName",
	registrationDate = "registrationDate",
	saleItemId = "saleItemId",
	version = "version"
}
/** update columns of table "vectric.sales_oemlicences" */
export const enum vectric_sales_oemlicences_update_column {
	allocatedBy = "allocatedBy",
	allocationTypeId = "allocationTypeId",
	dateAllocated = "dateAllocated",
	dateCreated = "dateCreated",
	disabled = "disabled",
	licenceCode = "licenceCode",
	mediaProvided = "mediaProvided",
	oemBundleId = "oemBundleId",
	oemLicenceId = "oemLicenceId",
	orderItemProductId = "orderItemProductId",
	partnerId = "partnerId",
	productId = "productId",
	productName = "productName",
	registrationDate = "registrationDate",
	saleItemId = "saleItemId",
	version = "version"
}
/** unique or primary key constraints on table "vectric.sales_orders" */
export const enum vectric_sales_orders_constraint {
	idx_109890_primary = "idx_109890_primary"
}
/** select columns of table "vectric.sales_orders" */
export const enum vectric_sales_orders_select_column {
	amendedby = "amendedby",
	createdby = "createdby",
	customerId = "customerId",
	dateCreated = "dateCreated",
	dateamended = "dateamended",
	mergedfromcustomerid = "mergedfromcustomerid",
	orderDate = "orderDate",
	orderId = "orderId",
	purchaser = "purchaser",
	registrationemailsent = "registrationemailsent",
	salenote = "salenote",
	salesdetails = "salesdetails",
	salesummary = "salesummary",
	validationcomments = "validationcomments",
	veccode = "veccode"
}
/** update columns of table "vectric.sales_orders" */
export const enum vectric_sales_orders_update_column {
	amendedby = "amendedby",
	createdby = "createdby",
	customerId = "customerId",
	dateCreated = "dateCreated",
	dateamended = "dateamended",
	mergedfromcustomerid = "mergedfromcustomerid",
	orderDate = "orderDate",
	orderId = "orderId",
	purchaser = "purchaser",
	registrationemailsent = "registrationemailsent",
	salenote = "salenote",
	salesdetails = "salesdetails",
	salesummary = "salesummary",
	validationcomments = "validationcomments",
	veccode = "veccode"
}
/** unique or primary key constraints on table "vectric.sales_salesitem_products" */
export const enum vectric_sales_salesitem_products_constraint {
	idx_109921_primary = "idx_109921_primary"
}
/** select columns of table "vectric.sales_salesitem_products" */
export const enum vectric_sales_salesitem_products_select_column {
	amended = "amended",
	amendedby = "amendedby",
	emailsubject = "emailsubject",
	enhances = "enhances",
	licenceCode = "licenceCode",
	licenceIdAsDisplay = "licenceIdAsDisplay",
	licenceType = "licenceType",
	oembundleid = "oembundleid",
	productId = "productId",
	registeredUsername = "registeredUsername",
	resentdate = "resentdate",
	salesItemProductId = "salesItemProductId",
	salesitemid = "salesitemid",
	status = "status",
	transfersalesitem = "transfersalesitem",
	upgradesalesitem = "upgradesalesitem",
	versioncodeid = "versioncodeid"
}
/** update columns of table "vectric.sales_salesitem_products" */
export const enum vectric_sales_salesitem_products_update_column {
	amended = "amended",
	amendedby = "amendedby",
	emailsubject = "emailsubject",
	enhances = "enhances",
	licenceCode = "licenceCode",
	licenceIdAsDisplay = "licenceIdAsDisplay",
	licenceType = "licenceType",
	oembundleid = "oembundleid",
	productId = "productId",
	registeredUsername = "registeredUsername",
	resentdate = "resentdate",
	salesItemProductId = "salesItemProductId",
	salesitemid = "salesitemid",
	status = "status",
	transfersalesitem = "transfersalesitem",
	upgradesalesitem = "upgradesalesitem",
	versioncodeid = "versioncodeid"
}
/** unique or primary key constraints on table "vectric.sales_salesitemproduct_status" */
export const enum vectric_sales_salesitemproduct_status_constraint {
	idx_109909_primary = "idx_109909_primary"
}
/** select columns of table "vectric.sales_salesitemproduct_status" */
export const enum vectric_sales_salesitemproduct_status_select_column {
	status = "status",
	statusid = "statusid"
}
/** update columns of table "vectric.sales_salesitemproduct_status" */
export const enum vectric_sales_salesitemproduct_status_update_column {
	status = "status",
	statusid = "statusid"
}
/** unique or primary key constraints on table "vectric.sales_salesitems" */
export const enum vectric_sales_salesitems_constraint {
	idx_109915_primary = "idx_109915_primary"
}
/** select columns of table "vectric.sales_salesitems" */
export const enum vectric_sales_salesitems_select_column {
	amendedby = "amendedby",
	dateamended = "dateamended",
	orderid = "orderid",
	productid = "productid",
	salesitemid = "salesitemid"
}
/** update columns of table "vectric.sales_salesitems" */
export const enum vectric_sales_salesitems_update_column {
	amendedby = "amendedby",
	dateamended = "dateamended",
	orderid = "orderid",
	productid = "productid",
	salesitemid = "salesitemid"
}
/** unique or primary key constraints on table "vectric.sales_velocitytemplate" */
export const enum vectric_sales_velocitytemplate_constraint {
	sales_velocitytemplate_pkey = "sales_velocitytemplate_pkey"
}
/** select columns of table "vectric.sales_velocitytemplate" */
export const enum vectric_sales_velocitytemplate_select_column {
	lang = "lang",
	sender = "sender",
	signedBy = "signedBy",
	subject = "subject",
	template = "template",
	templateName = "templateName",
	templateTimestamp = "templateTimestamp"
}
/** update columns of table "vectric.sales_velocitytemplate" */
export const enum vectric_sales_velocitytemplate_update_column {
	lang = "lang",
	sender = "sender",
	signedBy = "signedBy",
	subject = "subject",
	template = "template",
	templateName = "templateName",
	templateTimestamp = "templateTimestamp"
}
/** unique or primary key constraints on table "vectric.scheduled_emails" */
export const enum vectric_scheduled_emails_constraint {
	scheduled_emails_pkey = "scheduled_emails_pkey"
}
/** select columns of table "vectric.scheduled_emails" */
export const enum vectric_scheduled_emails_select_column {
	createdOn = "createdOn",
	customerId = "customerId",
	id = "id",
	processed = "processed",
	processedOn = "processedOn",
	sendTo = "sendTo",
	templateId = "templateId",
	variables = "variables"
}
/** update columns of table "vectric.scheduled_emails" */
export const enum vectric_scheduled_emails_update_column {
	createdOn = "createdOn",
	customerId = "customerId",
	id = "id",
	processed = "processed",
	processedOn = "processedOn",
	sendTo = "sendTo",
	templateId = "templateId",
	variables = "variables"
}
/** unique or primary key constraints on table "vectric.security_emailverificationtokens" */
export const enum vectric_security_emailverificationtokens_constraint {
	email_verification_multiple_unique = "email_verification_multiple_unique",
	idx_109959_customerid = "idx_109959_customerid",
	idx_109959_primary = "idx_109959_primary",
	idx_109959_username = "idx_109959_username"
}
/** select columns of table "vectric.security_emailverificationtokens" */
export const enum vectric_security_emailverificationtokens_select_column {
	customerId = "customerId",
	expiryDate = "expiryDate",
	token = "token",
	username = "username"
}
/** update columns of table "vectric.security_emailverificationtokens" */
export const enum vectric_security_emailverificationtokens_update_column {
	customerId = "customerId",
	expiryDate = "expiryDate",
	token = "token",
	username = "username"
}
/** select columns of table "vectric.security_group_authorities" */
export const enum vectric_security_group_authorities_select_column {
	authority = "authority",
	groupId = "groupId"
}
/** unique or primary key constraints on table "vectric.security_group_members" */
export const enum vectric_security_group_members_constraint {
	idx_109976_primary = "idx_109976_primary"
}
/** select columns of table "vectric.security_group_members" */
export const enum vectric_security_group_members_select_column {
	groupId = "groupId",
	id = "id",
	username = "username"
}
/** update columns of table "vectric.security_group_members" */
export const enum vectric_security_group_members_update_column {
	groupId = "groupId",
	id = "id",
	username = "username"
}
/** unique or primary key constraints on table "vectric.security_passwordresettokens" */
export const enum vectric_security_passwordresettokens_constraint {
	idx_109980_primary = "idx_109980_primary"
}
/** select columns of table "vectric.security_passwordresettokens" */
export const enum vectric_security_passwordresettokens_select_column {
	expiryDate = "expiryDate",
	token = "token",
	username = "username"
}
/** update columns of table "vectric.security_passwordresettokens" */
export const enum vectric_security_passwordresettokens_update_column {
	expiryDate = "expiryDate",
	token = "token",
	username = "username"
}
/** unique or primary key constraints on table "vectric.security_userinvitations" */
export const enum vectric_security_userinvitations_constraint {
	idx_109987_customerid = "idx_109987_customerid",
	idx_109987_primary = "idx_109987_primary",
	idx_109987_username = "idx_109987_username",
	user_invitation_multiple_unique = "user_invitation_multiple_unique"
}
/** select columns of table "vectric.security_userinvitations" */
export const enum vectric_security_userinvitations_select_column {
	acceptedDate = "acceptedDate",
	adminofid = "adminofid",
	createDate = "createDate",
	customerId = "customerId",
	expirydate = "expirydate",
	staffofid = "staffofid",
	token = "token",
	username = "username"
}
/** update columns of table "vectric.security_userinvitations" */
export const enum vectric_security_userinvitations_update_column {
	acceptedDate = "acceptedDate",
	adminofid = "adminofid",
	createDate = "createDate",
	customerId = "customerId",
	expirydate = "expirydate",
	staffofid = "staffofid",
	token = "token",
	username = "username"
}
/** unique or primary key constraints on table "vectric.security_users" */
export const enum vectric_security_users_constraint {
	idx_109993_primary = "idx_109993_primary"
}
/** select columns of table "vectric.security_users" */
export const enum vectric_security_users_select_column {
	accountNonExpired = "accountNonExpired",
	credentialsNonExpired = "credentialsNonExpired",
	enabled = "enabled",
	password = "password",
	salesCustomerId = "salesCustomerId",
	username = "username",
	voucherCode = "voucherCode"
}
/** update columns of table "vectric.security_users" */
export const enum vectric_security_users_update_column {
	accountNonExpired = "accountNonExpired",
	credentialsNonExpired = "credentialsNonExpired",
	enabled = "enabled",
	password = "password",
	salesCustomerId = "salesCustomerId",
	username = "username",
	voucherCode = "voucherCode"
}
/** unique or primary key constraints on table "vectric.site_option_location" */
export const enum vectric_site_option_location_constraint {
	idx_110013_primary = "idx_110013_primary"
}
/** select columns of table "vectric.site_option_location" */
export const enum vectric_site_option_location_select_column {
	locationid = "locationid",
	name = "name"
}
/** update columns of table "vectric.site_option_location" */
export const enum vectric_site_option_location_update_column {
	locationid = "locationid",
	name = "name"
}
/** unique or primary key constraints on table "vectric.site_options" */
export const enum vectric_site_options_constraint {
	idx_110004_optionname = "idx_110004_optionname",
	idx_110004_primary = "idx_110004_primary"
}
/** select columns of table "vectric.site_options" */
export const enum vectric_site_options_select_column {
	description = "description",
	optionid = "optionid",
	optionname = "optionname",
	siteid = "siteid",
	stringval = "stringval",
	value = "value"
}
/** update columns of table "vectric.site_options" */
export const enum vectric_site_options_update_column {
	description = "description",
	optionid = "optionid",
	optionname = "optionname",
	siteid = "siteid",
	stringval = "stringval",
	value = "value"
}
/** unique or primary key constraints on table "vectric.subscription_contract_status" */
export const enum vectric_subscription_contract_status_constraint {
	subscription_contract_status_pkey = "subscription_contract_status_pkey"
}
/** select columns of table "vectric.subscription_contract_status" */
export const enum vectric_subscription_contract_status_select_column {
	status = "status"
}
/** update columns of table "vectric.subscription_contract_status" */
export const enum vectric_subscription_contract_status_update_column {
	status = "status"
}
/** unique or primary key constraints on table "vectric.subscription_contracts" */
export const enum vectric_subscription_contracts_constraint {
	subscription_contracts_pkey = "subscription_contracts_pkey"
}
/** select columns of table "vectric.subscription_contracts" */
export const enum vectric_subscription_contracts_select_column {
	dateEnding = "dateEnding",
	dateStarted = "dateStarted",
	orderItemId = "orderItemId",
	status = "status",
	subscriptionContractId = "subscriptionContractId",
	subscriptionId = "subscriptionId"
}
/** update columns of table "vectric.subscription_contracts" */
export const enum vectric_subscription_contracts_update_column {
	dateEnding = "dateEnding",
	dateStarted = "dateStarted",
	orderItemId = "orderItemId",
	status = "status",
	subscriptionContractId = "subscriptionContractId",
	subscriptionId = "subscriptionId"
}
/** unique or primary key constraints on table "vectric.subscription_events" */
export const enum vectric_subscription_events_constraint {
	subscription_events_pkey = "subscription_events_pkey"
}
/** select columns of table "vectric.subscription_events" */
export const enum vectric_subscription_events_select_column {
	actionTaken = "actionTaken",
	dateCreated = "dateCreated",
	dateProcessed = "dateProcessed",
	eventId = "eventId",
	eventType = "eventType",
	fastspringInternalOrderId = "fastspringInternalOrderId",
	fastspringOrderReference = "fastspringOrderReference",
	fastspringSubscriptionId = "fastspringSubscriptionId",
	orderItemId = "orderItemId",
	subscriptionContractId = "subscriptionContractId",
	subscriptionDateStarted = "subscriptionDateStarted",
	subscriptionDeactivationDate = "subscriptionDeactivationDate",
	subscriptionNextRebillDate = "subscriptionNextRebillDate"
}
/** update columns of table "vectric.subscription_events" */
export const enum vectric_subscription_events_update_column {
	actionTaken = "actionTaken",
	dateCreated = "dateCreated",
	dateProcessed = "dateProcessed",
	eventId = "eventId",
	eventType = "eventType",
	fastspringInternalOrderId = "fastspringInternalOrderId",
	fastspringOrderReference = "fastspringOrderReference",
	fastspringSubscriptionId = "fastspringSubscriptionId",
	orderItemId = "orderItemId",
	subscriptionContractId = "subscriptionContractId",
	subscriptionDateStarted = "subscriptionDateStarted",
	subscriptionDeactivationDate = "subscriptionDeactivationDate",
	subscriptionNextRebillDate = "subscriptionNextRebillDate"
}
/** unique or primary key constraints on table "vectric.toolpath_saver_token" */
export const enum vectric_toolpath_saver_token_constraint {
	idx_110023_primary = "idx_110023_primary",
	idx_110023_unique_custom_product_token = "idx_110023_unique_custom_product_token"
}
/** select columns of table "vectric.toolpath_saver_token" */
export const enum vectric_toolpath_saver_token_select_column {
	customerId = "customerId",
	dateExpired = "dateExpired",
	dateGenerated = "dateGenerated",
	productId = "productId",
	token = "token",
	toolpathSaverTokenId = "toolpathSaverTokenId",
	used = "used"
}
/** update columns of table "vectric.toolpath_saver_token" */
export const enum vectric_toolpath_saver_token_update_column {
	customerId = "customerId",
	dateExpired = "dateExpired",
	dateGenerated = "dateGenerated",
	productId = "productId",
	token = "token",
	toolpathSaverTokenId = "toolpathSaverTokenId",
	used = "used"
}
/** unique or primary key constraints on table "vectric.trial_order" */
export const enum vectric_trial_order_constraint {
	idx_110043_primary = "idx_110043_primary"
}
/** select columns of table "vectric.trial_order" */
export const enum vectric_trial_order_select_column {
	customerId = "customerId",
	endDate = "endDate",
	orderId = "orderId",
	productId = "productId",
	startDate = "startDate",
	valid = "valid"
}
/** update columns of table "vectric.trial_order" */
export const enum vectric_trial_order_update_column {
	customerId = "customerId",
	endDate = "endDate",
	orderId = "orderId",
	productId = "productId",
	startDate = "startDate",
	valid = "valid"
}
/** unique or primary key constraints on table "vectric.update_requests" */
export const enum vectric_update_requests_constraint {
	idx_110050_primary = "idx_110050_primary"
}
/** select columns of table "vectric.update_requests" */
export const enum vectric_update_requests_select_column {
	dateAccessed = "dateAccessed",
	ipAddress = "ipAddress",
	majorVersion = "majorVersion",
	minorVersionOOX = "minorVersionOOX",
	minorVersionOXO = "minorVersionOXO",
	minorVersionXOO = "minorVersionXOO",
	osMajorVersion = "osMajorVersion",
	osMinorVersion = "osMinorVersion",
	productName = "productName",
	requestId = "requestId",
	wProcessorArch = "wProcessorArch"
}
/** update columns of table "vectric.update_requests" */
export const enum vectric_update_requests_update_column {
	dateAccessed = "dateAccessed",
	ipAddress = "ipAddress",
	majorVersion = "majorVersion",
	minorVersionOOX = "minorVersionOOX",
	minorVersionOXO = "minorVersionOXO",
	minorVersionXOO = "minorVersionXOO",
	osMajorVersion = "osMajorVersion",
	osMinorVersion = "osMinorVersion",
	productName = "productName",
	requestId = "requestId",
	wProcessorArch = "wProcessorArch"
}
/** unique or primary key constraints on table "vectric.upgrade_tokens" */
export const enum vectric_upgrade_tokens_constraint {
	idx_110088_primary = "idx_110088_primary"
}
/** select columns of table "vectric.upgrade_tokens" */
export const enum vectric_upgrade_tokens_select_column {
	customerId = "customerId",
	dateCreated = "dateCreated",
	dateUsed = "dateUsed",
	orderItemProductId = "orderItemProductId",
	token = "token",
	upgradeEligibilityId = "upgradeEligibilityId",
	upgradedToOrderItemProduct = "upgradedToOrderItemProduct",
	used = "used"
}
/** update columns of table "vectric.upgrade_tokens" */
export const enum vectric_upgrade_tokens_update_column {
	customerId = "customerId",
	dateCreated = "dateCreated",
	dateUsed = "dateUsed",
	orderItemProductId = "orderItemProductId",
	token = "token",
	upgradeEligibilityId = "upgradeEligibilityId",
	upgradedToOrderItemProduct = "upgradedToOrderItemProduct",
	used = "used"
}
/** unique or primary key constraints on table "vectric.upgrades_feature" */
export const enum vectric_upgrades_feature_constraint {
	idx_110060_primary = "idx_110060_primary"
}
/** select columns of table "vectric.upgrades_feature" */
export const enum vectric_upgrades_feature_select_column {
	enabled = "enabled",
	extendedDescription = "extendedDescription",
	featureId = "featureId",
	title = "title"
}
/** update columns of table "vectric.upgrades_feature" */
export const enum vectric_upgrades_feature_update_column {
	enabled = "enabled",
	extendedDescription = "extendedDescription",
	featureId = "featureId",
	title = "title"
}
/** unique or primary key constraints on table "vectric.upgrades_product_type_feature" */
export const enum vectric_upgrades_product_type_feature_constraint {
	idx_110068_primary = "idx_110068_primary"
}
/** select columns of table "vectric.upgrades_product_type_feature" */
export const enum vectric_upgrades_product_type_feature_select_column {
	feature = "feature",
	fromProductType = "fromProductType",
	ranking = "ranking",
	toProductType = "toProductType",
	upgradeId = "upgradeId"
}
/** update columns of table "vectric.upgrades_product_type_feature" */
export const enum vectric_upgrades_product_type_feature_update_column {
	feature = "feature",
	fromProductType = "fromProductType",
	ranking = "ranking",
	toProductType = "toProductType",
	upgradeId = "upgradeId"
}
/** unique or primary key constraints on table "vectric.upgrades_version_feature" */
export const enum vectric_upgrades_version_feature_constraint {
	idx_110074_primary = "idx_110074_primary"
}
/** select columns of table "vectric.upgrades_version_feature" */
export const enum vectric_upgrades_version_feature_select_column {
	feature = "feature",
	majorVersion = "majorVersion",
	minorVersion = "minorVersion",
	productType = "productType",
	ranking = "ranking",
	upgradeId = "upgradeId"
}
/** update columns of table "vectric.upgrades_version_feature" */
export const enum vectric_upgrades_version_feature_update_column {
	feature = "feature",
	majorVersion = "majorVersion",
	minorVersion = "minorVersion",
	productType = "productType",
	ranking = "ranking",
	upgradeId = "upgradeId"
}
/** unique or primary key constraints on table "vectric.usergroup_2019_attendees" */
export const enum vectric_usergroup_2019_attendees_constraint {
	idx_110094_primary = "idx_110094_primary"
}
/** select columns of table "vectric.usergroup_2019_attendees" */
export const enum vectric_usergroup_2019_attendees_select_column {
	attendeeid = "attendeeid",
	bringingsample = "bringingsample",
	company = "company",
	customerid = "customerid",
	diet = "diet",
	email = "email",
	fastspringreference = "fastspringreference",
	firstname = "firstname",
	forumname = "forumname",
	lastname = "lastname",
	notes = "notes",
	productid = "productid",
	purchasedate = "purchasedate",
	reference = "reference",
	state = "state",
	status = "status",
	tshirtsize = "tshirtsize",
	uk = "uk"
}
/** update columns of table "vectric.usergroup_2019_attendees" */
export const enum vectric_usergroup_2019_attendees_update_column {
	attendeeid = "attendeeid",
	bringingsample = "bringingsample",
	company = "company",
	customerid = "customerid",
	diet = "diet",
	email = "email",
	fastspringreference = "fastspringreference",
	firstname = "firstname",
	forumname = "forumname",
	lastname = "lastname",
	notes = "notes",
	productid = "productid",
	purchasedate = "purchasedate",
	reference = "reference",
	state = "state",
	status = "status",
	tshirtsize = "tshirtsize",
	uk = "uk"
}
/** unique or primary key constraints on table "vectric.usergroup_2019_waitlist" */
export const enum vectric_usergroup_2019_waitlist_constraint {
	idx_110106_primary = "idx_110106_primary"
}
/** select columns of table "vectric.usergroup_2019_waitlist" */
export const enum vectric_usergroup_2019_waitlist_select_column {
	attendeeid = "attendeeid",
	customerid = "customerid",
	desiredquantity = "desiredquantity",
	email = "email",
	invitationdate = "invitationdate",
	productid = "productid",
	reference = "reference",
	status = "status"
}
/** update columns of table "vectric.usergroup_2019_waitlist" */
export const enum vectric_usergroup_2019_waitlist_update_column {
	attendeeid = "attendeeid",
	customerid = "customerid",
	desiredquantity = "desiredquantity",
	email = "email",
	invitationdate = "invitationdate",
	productid = "productid",
	reference = "reference",
	status = "status"
}
/** unique or primary key constraints on table "vectric.version_code" */
export const enum vectric_version_code_constraint {
	idx_version_code_id = "idx_version_code_id"
}
/** select columns of table "vectric.version_code" */
export const enum vectric_version_code_select_column {
	displayVersion = "displayVersion",
	latest = "latest",
	majorVersion = "majorVersion",
	minorVersionOOX = "minorVersionOOX",
	minorVersionOXO = "minorVersionOXO",
	minorVersionXOO = "minorVersionXOO",
	notifying = "notifying",
	patchUrl = "patchUrl",
	releaseDate = "releaseDate",
	url = "url",
	versionCodeId = "versionCodeId",
	visible = "visible"
}
/** update columns of table "vectric.version_code" */
export const enum vectric_version_code_update_column {
	displayVersion = "displayVersion",
	latest = "latest",
	majorVersion = "majorVersion",
	minorVersionOOX = "minorVersionOOX",
	minorVersionOXO = "minorVersionOXO",
	minorVersionXOO = "minorVersionXOO",
	notifying = "notifying",
	patchUrl = "patchUrl",
	releaseDate = "releaseDate",
	url = "url",
	versionCodeId = "versionCodeId",
	visible = "visible"
}
export class GraphQLError extends Error {
    constructor(public response: GraphQLResponse) {
      super("");
      console.error(response);
    }
    toString() {
      return "GraphQL Response Error";
    }
  }


export type UnwrapPromise<T> = T extends Promise<infer R> ? R : T;
export type ZeusState<T extends (...args: any[]) => Promise<any>> = NonNullable<
  UnwrapPromise<ReturnType<T>>
>;
export type ZeusHook<
  T extends (
    ...args: any[]
  ) => Record<string, (...args: any[]) => Promise<any>>,
  N extends keyof ReturnType<T>
> = ZeusState<ReturnType<T>[N]>;

type WithTypeNameValue<T> = T & {
  __typename?: boolean;
};
type AliasType<T> = WithTypeNameValue<T> & {
  __alias?: Record<string, WithTypeNameValue<T>>;
};
export interface GraphQLResponse {
  data?: Record<string, any>;
  errors?: Array<{
    message: string;
  }>;
}
type DeepAnify<T> = {
  [P in keyof T]?: any;
};
type IsPayLoad<T> = T extends [any, infer PayLoad] ? PayLoad : T;
type IsArray<T, U> = T extends Array<infer R> ? InputType<R, U>[] : InputType<T, U>;
type FlattenArray<T> = T extends Array<infer R> ? R : T;

type IsInterfaced<SRC extends DeepAnify<DST>, DST> = FlattenArray<SRC> extends ZEUS_INTERFACES | ZEUS_UNIONS
  ? {
      [P in keyof SRC]: SRC[P] extends '__union' & infer R
        ? P extends keyof DST
          ? IsArray<R, '__typename' extends keyof DST ? DST[P] & { __typename: true } : DST[P]>
          : {}
        : never;
    }[keyof DST] &
      {
        [P in keyof Omit<
          Pick<
            SRC,
            {
              [P in keyof DST]: SRC[P] extends '__union' & infer R ? never : P;
            }[keyof DST]
          >,
          '__typename'
        >]: IsPayLoad<DST[P]> extends boolean ? SRC[P] : IsArray<SRC[P], DST[P]>;
      }
  : {
      [P in keyof Pick<SRC, keyof DST>]: IsPayLoad<DST[P]> extends boolean ? SRC[P] : IsArray<SRC[P], DST[P]>;
    };

export type MapType<SRC, DST> = SRC extends DeepAnify<DST> ? IsInterfaced<SRC, DST> : never;
export type InputType<SRC, DST> = IsPayLoad<DST> extends { __alias: infer R }
  ? {
      [P in keyof R]: MapType<SRC, R[P]>;
    } &
      MapType<SRC, Omit<IsPayLoad<DST>, '__alias'>>
  : MapType<SRC, IsPayLoad<DST>>;
type Func<P extends any[], R> = (...args: P) => R;
type AnyFunc = Func<any, any>;
export type ArgsType<F extends AnyFunc> = F extends Func<infer P, any> ? P : never;
export type OperationOptions = {
  variables?: Record<string, any>;
  operationName?: string;
};
export type SubscriptionToGraphQL<Z, T> = {
  ws: WebSocket;
  on: (fn: (args: InputType<T, Z>) => void) => void;
  off: (fn: (e: { data?: InputType<T, Z>; code?: number; reason?: string; message?: string }) => void) => void;
  error: (fn: (e: { data?: InputType<T, Z>; errors?: string[] }) => void) => void;
  open: () => void;
};
export type SelectionFunction<V> = <T>(t: T | V) => T;
export type fetchOptions = ArgsType<typeof fetch>;
type websocketOptions = typeof WebSocket extends new (
  ...args: infer R
) => WebSocket
  ? R
  : never;
export type chainOptions =
  | [fetchOptions[0], fetchOptions[1] & {websocket?: websocketOptions}]
  | [fetchOptions[0]];
export type FetchFunction = (
  query: string,
  variables?: Record<string, any>,
) => Promise<any>;
export type SubscriptionFunction = (query: string) => any;
type NotUndefined<T> = T extends undefined ? never : T;
export type ResolverType<F> = NotUndefined<F extends [infer ARGS, any] ? ARGS : undefined>;



export const ZeusSelect = <T>() => ((t: any) => t) as SelectionFunction<T>;

export const ScalarResolver = (scalar: string, value: any) => {
  switch (scalar) {
    case 'String':
      return  `${JSON.stringify(value)}`;
    case 'Int':
      return `${value}`;
    case 'Float':
      return `${value}`;
    case 'Boolean':
      return `${value}`;
    case 'ID':
      return `"${value}"`;
    case 'enum':
      return `${value}`;
    case 'scalar':
      return `${value}`;
    default:
      return false;
  }
};


export const TypesPropsResolver = ({
    value,
    type,
    name,
    key,
    blockArrays
}: {
    value: any;
    type: string;
    name: string;
    key?: string;
    blockArrays?: boolean;
}): string => {
    if (value === null) {
        return `null`;
    }
    let resolvedValue = AllTypesProps[type][name];
    if (key) {
        resolvedValue = resolvedValue[key];
    }
    if (!resolvedValue) {
        throw new Error(`Cannot resolve ${type} ${name}${key ? ` ${key}` : ''}`)
    }
    const typeResolved = resolvedValue.type;
    const isArray = resolvedValue.array;
    const isArrayRequired = resolvedValue.arrayRequired;
    if (typeof value === 'string' && value.startsWith(`ZEUS_VAR$`)) {
        const isRequired = resolvedValue.required ? '!' : '';
        let t = `${typeResolved}`;
        if (isArray) {
          if (isRequired) {
              t = `${t}!`;
          }
          t = `[${t}]`;
          if(isArrayRequired){
            t = `${t}!`;
          }
        }else{
          if (isRequired) {
                t = `${t}!`;
          }
        }
        return `\$${value.split(`ZEUS_VAR$`)[1]}__ZEUS_VAR__${t}`;
    }
    if (isArray && !blockArrays) {
        return `[${value
        .map((v: any) => TypesPropsResolver({ value: v, type, name, key, blockArrays: true }))
        .join(',')}]`;
    }
    const reslovedScalar = ScalarResolver(typeResolved, value);
    if (!reslovedScalar) {
        const resolvedType = AllTypesProps[typeResolved];
        if (typeof resolvedType === 'object') {
        const argsKeys = Object.keys(resolvedType);
        return `{${argsKeys
            .filter((ak) => value[ak] !== undefined)
            .map(
            (ak) => `${ak}:${TypesPropsResolver({ value: value[ak], type: typeResolved, name: ak })}`
            )}}`;
        }
        return ScalarResolver(AllTypesProps[typeResolved], value) as string;
    }
    return reslovedScalar;
};


const isArrayFunction = (
  parent: string[],
  a: any[]
) => {
  const [values, r] = a;
  const [mainKey, key, ...keys] = parent;
  const keyValues = Object.keys(values).filter((k) => typeof values[k] !== 'undefined');

  if (!keys.length) {
      return keyValues.length > 0
        ? `(${keyValues
            .map(
              (v) =>
                `${v}:${TypesPropsResolver({
                  value: values[v],
                  type: mainKey,
                  name: key,
                  key: v
                })}`
            )
            .join(',')})${r ? traverseToSeekArrays(parent, r) : ''}`
        : traverseToSeekArrays(parent, r);
    }

  const [typeResolverKey] = keys.splice(keys.length - 1, 1);
  let valueToResolve = ReturnTypes[mainKey][key];
  for (const k of keys) {
    valueToResolve = ReturnTypes[valueToResolve][k];
  }

  const argumentString =
    keyValues.length > 0
      ? `(${keyValues
          .map(
            (v) =>
              `${v}:${TypesPropsResolver({
                value: values[v],
                type: valueToResolve,
                name: typeResolverKey,
                key: v
              })}`
          )
          .join(',')})${r ? traverseToSeekArrays(parent, r) : ''}`
      : traverseToSeekArrays(parent, r);
  return argumentString;
};


const resolveKV = (k: string, v: boolean | string | { [x: string]: boolean | string }) =>
  typeof v === 'boolean' ? k : typeof v === 'object' ? `${k}{${objectToTree(v)}}` : `${k}${v}`;


const objectToTree = (o: { [x: string]: boolean | string }): string =>
  `{${Object.keys(o).map((k) => `${resolveKV(k, o[k])}`).join(' ')}}`;


const traverseToSeekArrays = (parent: string[], a?: any): string => {
  if (!a) return '';
  if (Object.keys(a).length === 0) {
    return '';
  }
  let b: Record<string, any> = {};
  if (Array.isArray(a)) {
    return isArrayFunction([...parent], a);
  } else {
    if (typeof a === 'object') {
      Object.keys(a)
        .filter((k) => typeof a[k] !== 'undefined')
        .forEach((k) => {
        if (k === '__alias') {
          Object.keys(a[k]).forEach((aliasKey) => {
            const aliasOperations = a[k][aliasKey];
            const aliasOperationName = Object.keys(aliasOperations)[0];
            const aliasOperation = aliasOperations[aliasOperationName];
            b[
              `${aliasOperationName}__alias__${aliasKey}: ${aliasOperationName}`
            ] = traverseToSeekArrays([...parent, aliasOperationName], aliasOperation);
          });
        } else {
          b[k] = traverseToSeekArrays([...parent, k], a[k]);
        }
      });
    } else {
      return '';
    }
  }
  return objectToTree(b);
};


const buildQuery = (type: string, a?: Record<any, any>) =>
  traverseToSeekArrays([type], a);


const inspectVariables = (query: string) => {
  const regex = /\$\b\w*__ZEUS_VAR__\[?[^!^\]^\s^,^\)^\}]*[!]?[\]]?[!]?/g;
  let result;
  const AllVariables: string[] = [];
  while ((result = regex.exec(query))) {
    if (AllVariables.includes(result[0])) {
      continue;
    }
    AllVariables.push(result[0]);
  }
  if (!AllVariables.length) {
    return query;
  }
  let filteredQuery = query;
  AllVariables.forEach((variable) => {
    while (filteredQuery.includes(variable)) {
      filteredQuery = filteredQuery.replace(variable, variable.split('__ZEUS_VAR__')[0]);
    }
  });
  return `(${AllVariables.map((a) => a.split('__ZEUS_VAR__'))
    .map(([variableName, variableType]) => `${variableName}:${variableType}`)
    .join(', ')})${filteredQuery}`;
};


export const queryConstruct = (t: 'query' | 'mutation' | 'subscription', tName: string, operationName?: string) => (o: Record<any, any>) =>
  `${t.toLowerCase()}${operationName ? ' ' + operationName : ''}${inspectVariables(buildQuery(tName, o))}`;


export const fullChainConstruct = (fn: FetchFunction) => (t: 'query' | 'mutation' | 'subscription', tName: string) => (
  o: Record<any, any>,
  options?: OperationOptions,
) => fn(queryConstruct(t, tName, options?.operationName)(o), options?.variables).then((r:any) => {
  seekForAliases(r)
  return r
});


export const fullSubscriptionConstruct = (fn: SubscriptionFunction) => (
  t: 'query' | 'mutation' | 'subscription',
  tName: string,
) => (o: Record<any, any>, options?: OperationOptions) =>
  fn(queryConstruct(t, tName, options?.operationName)(o));


const seekForAliases = (response: any) => {
  const traverseAlias = (value: any) => {
    if (Array.isArray(value)) {
      value.forEach(seekForAliases);
    } else {
      if (typeof value === 'object') {
        seekForAliases(value);
      }
    }
  };
  if (typeof response === 'object' && response) {
    const keys = Object.keys(response);
    if (keys.length < 1) {
      return;
    }
    keys.forEach((k) => {
      const value = response[k];
      if (k.indexOf('__alias__') !== -1) {
        const [operation, alias] = k.split('__alias__');
        response[alias] = {
          [operation]: value,
        };
        delete response[k];
      }
      traverseAlias(value);
    });
  }
};


export const $ = (t: TemplateStringsArray): any => `ZEUS_VAR$${t.join('')}`;


export const resolverFor = <
  X,
  T extends keyof ValueTypes,
  Z extends keyof ValueTypes[T],
>(
  type: T,
  field: Z,
  fn: (
    args: Required<ValueTypes[T]>[Z] extends [infer Input, any] ? Input : any,
    source: any,
  ) => Z extends keyof ModelTypes[T] ? ModelTypes[T][Z] | Promise<ModelTypes[T][Z]> | X : any,
) => fn as (args?: any,source?: any) => any;


const handleFetchResponse = (
  response: Parameters<Extract<Parameters<ReturnType<typeof fetch>['then']>[0], Function>>[0]
): Promise<GraphQLResponse> => {
  if (!response.ok) {
    return new Promise((_, reject) => {
      response.text().then(text => {
        try { reject(JSON.parse(text)); }
        catch (err) { reject(text); }
      }).catch(reject);
    });
  }
  return response.json();
};

export const apiFetch = (options: fetchOptions) => (query: string, variables: Record<string, any> = {}) => {
    let fetchFunction;
    let queryString = query;
    let fetchOptions = options[1] || {};
    try {
        fetchFunction = require('node-fetch');
    } catch (error) {
        throw new Error("Please install 'node-fetch' to use zeus in nodejs environment");
    }
    if (fetchOptions.method && fetchOptions.method === 'GET') {
      try {
          queryString = require('querystring').stringify(query);
      } catch (error) {
          throw new Error("Something gone wrong 'querystring' is a part of nodejs environment");
      }
      return fetchFunction(`${options[0]}?query=${queryString}`, fetchOptions)
        .then(handleFetchResponse)
        .then((response: GraphQLResponse) => {
          if (response.errors) {
            throw new GraphQLError(response);
          }
          return response.data;
        });
    }
    return fetchFunction(`${options[0]}`, {
      body: JSON.stringify({ query: queryString, variables }),
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      ...fetchOptions
    })
      .then(handleFetchResponse)
      .then((response: GraphQLResponse) => {
        if (response.errors) {
          throw new GraphQLError(response);
        }
        return response.data;
      });
  };


export const apiSubscription = (options: chainOptions) => (
    query: string,
  ) => {
    try {
      const WebSocket =  require('ws');
      const queryString = options[0] + '?query=' + encodeURIComponent(query);
      const wsString = queryString.replace('http', 'ws');
      const host = (options.length > 1 && options[1]?.websocket?.[0]) || wsString;
      const webSocketOptions = options[1]?.websocket || [host];
      const ws = new WebSocket(...webSocketOptions);
      return {
        ws,
        on: (e: (args: any) => void) => {
          ws.onmessage = (event:any) => {
            if(event.data){
              const parsed = JSON.parse(event.data)
              const data = parsed.data
              if (data) {
                seekForAliases(data);
              }
              return e(data);
            }
          };
        },
        off: (e: (args: any) => void) => {
          ws.onclose = e;
        },
        error: (e: (args: any) => void) => {
          ws.onerror = e;
        },
        open: (e: () => void) => {
          ws.onopen = e;
        },
      };
    } catch {
      throw new Error('No websockets implemented. Please install ws');
    }
  };



const allOperations = {
    "query": "query_root",
    "mutation": "mutation_root",
    "subscription": "subscription_root"
}

export type GenericOperation<O> = O extends 'query'
  ? "query_root"
  : O extends 'mutation'
  ? "mutation_root"
  : "subscription_root"

export const Thunder = (fn: FetchFunction) => <
  O extends 'query' | 'mutation' | 'subscription',
  R extends keyof ValueTypes = GenericOperation<O>
>(
  operation: O,
) => <Z extends ValueTypes[R]>(o: Z | ValueTypes[R], ops?: OperationOptions) =>
  fullChainConstruct(fn)(operation, allOperations[operation])(o as any, ops) as Promise<InputType<GraphQLTypes[R], Z>>;

export const Chain = (...options: chainOptions) => Thunder(apiFetch(options));

export const SubscriptionThunder = (fn: SubscriptionFunction) => <
  O extends 'query' | 'mutation' | 'subscription',
  R extends keyof ValueTypes = GenericOperation<O>
>(
  operation: O,
) => <Z extends ValueTypes[R]>(
  o: Z | ValueTypes[R],
  ops?: OperationOptions
)=>
  fullSubscriptionConstruct(fn)(operation, allOperations[operation])(
    o as any,
    ops,
  ) as SubscriptionToGraphQL<Z, GraphQLTypes[R]>;

export const Subscription = (...options: chainOptions) => SubscriptionThunder(apiSubscription(options));
export const Zeus = <
  Z extends ValueTypes[R],
  O extends 'query' | 'mutation' | 'subscription',
  R extends keyof ValueTypes = GenericOperation<O>
>(
  operation: O,
  o: Z | ValueTypes[R],
  operationName?: string,
) => queryConstruct(operation, allOperations[operation], operationName)(o as any);
export const Selector = <T extends keyof ValueTypes>(key: T) => ZeusSelect<ValueTypes[T]>();
